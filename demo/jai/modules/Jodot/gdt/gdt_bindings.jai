//  --------------------
// | JODOT GDT BINDINGS |
//  --------------------

OpaqueClass :: struct {
    p_object: GDExtensionObjectPtr;
    variant: Variant;
}


Side :: enum s32 {    // 0
    SIDE_LEFT :: 0;
    SIDE_TOP :: 1;
    SIDE_RIGHT :: 2;
    SIDE_BOTTOM :: 3;
}

Corner :: enum s32 {    // 1
    CORNER_TOP_LEFT :: 0;
    CORNER_TOP_RIGHT :: 1;
    CORNER_BOTTOM_RIGHT :: 2;
    CORNER_BOTTOM_LEFT :: 3;
}

Orientation :: enum s32 {    // 2
    VERTICAL :: 1;
    HORIZONTAL :: 0;
}

ClockDirection :: enum s32 {    // 3
    CLOCKWISE :: 0;
    COUNTERCLOCKWISE :: 1;
}

HorizontalAlignment :: enum s32 {    // 4
    HORIZONTAL_ALIGNMENT_LEFT :: 0;
    HORIZONTAL_ALIGNMENT_CENTER :: 1;
    HORIZONTAL_ALIGNMENT_RIGHT :: 2;
    HORIZONTAL_ALIGNMENT_FILL :: 3;
}

VerticalAlignment :: enum s32 {    // 5
    VERTICAL_ALIGNMENT_TOP :: 0;
    VERTICAL_ALIGNMENT_CENTER :: 1;
    VERTICAL_ALIGNMENT_BOTTOM :: 2;
    VERTICAL_ALIGNMENT_FILL :: 3;
}

InlineAlignment :: enum s32 {    // 6
    INLINE_ALIGNMENT_TOP_TO :: 0;
    INLINE_ALIGNMENT_CENTER_TO :: 1;
    INLINE_ALIGNMENT_BASELINE_TO :: 3;
    INLINE_ALIGNMENT_BOTTOM_TO :: 2;
    INLINE_ALIGNMENT_TO_TOP :: 0;
    INLINE_ALIGNMENT_TO_CENTER :: 4;
    INLINE_ALIGNMENT_TO_BASELINE :: 8;
    INLINE_ALIGNMENT_TO_BOTTOM :: 12;
    INLINE_ALIGNMENT_TOP :: 0;
    INLINE_ALIGNMENT_CENTER :: 5;
    INLINE_ALIGNMENT_BOTTOM :: 14;
    INLINE_ALIGNMENT_IMAGE_MASK :: 3;
    INLINE_ALIGNMENT_TEXT_MASK :: 12;
}

EulerOrder :: enum s32 {    // 7
    EULER_ORDER_XYZ :: 0;
    EULER_ORDER_XZY :: 1;
    EULER_ORDER_YXZ :: 2;
    EULER_ORDER_YZX :: 3;
    EULER_ORDER_ZXY :: 4;
    EULER_ORDER_ZYX :: 5;
}

Key :: enum s32 {    // 8
    KEY_NONE :: 0;
    KEY_SPECIAL :: 4194304;
    KEY_ESCAPE :: 4194305;
    KEY_TAB :: 4194306;
    KEY_BACKTAB :: 4194307;
    KEY_BACKSPACE :: 4194308;
    KEY_ENTER :: 4194309;
    KEY_KP_ENTER :: 4194310;
    KEY_INSERT :: 4194311;
    KEY_DELETE :: 4194312;
    KEY_PAUSE :: 4194313;
    KEY_PRINT :: 4194314;
    KEY_SYSREQ :: 4194315;
    KEY_CLEAR :: 4194316;
    KEY_HOME :: 4194317;
    KEY_END :: 4194318;
    KEY_LEFT :: 4194319;
    KEY_UP :: 4194320;
    KEY_RIGHT :: 4194321;
    KEY_DOWN :: 4194322;
    KEY_PAGEUP :: 4194323;
    KEY_PAGEDOWN :: 4194324;
    KEY_SHIFT :: 4194325;
    KEY_CTRL :: 4194326;
    KEY_META :: 4194327;
    KEY_ALT :: 4194328;
    KEY_CAPSLOCK :: 4194329;
    KEY_NUMLOCK :: 4194330;
    KEY_SCROLLLOCK :: 4194331;
    KEY_F1 :: 4194332;
    KEY_F2 :: 4194333;
    KEY_F3 :: 4194334;
    KEY_F4 :: 4194335;
    KEY_F5 :: 4194336;
    KEY_F6 :: 4194337;
    KEY_F7 :: 4194338;
    KEY_F8 :: 4194339;
    KEY_F9 :: 4194340;
    KEY_F10 :: 4194341;
    KEY_F11 :: 4194342;
    KEY_F12 :: 4194343;
    KEY_F13 :: 4194344;
    KEY_F14 :: 4194345;
    KEY_F15 :: 4194346;
    KEY_F16 :: 4194347;
    KEY_F17 :: 4194348;
    KEY_F18 :: 4194349;
    KEY_F19 :: 4194350;
    KEY_F20 :: 4194351;
    KEY_F21 :: 4194352;
    KEY_F22 :: 4194353;
    KEY_F23 :: 4194354;
    KEY_F24 :: 4194355;
    KEY_F25 :: 4194356;
    KEY_F26 :: 4194357;
    KEY_F27 :: 4194358;
    KEY_F28 :: 4194359;
    KEY_F29 :: 4194360;
    KEY_F30 :: 4194361;
    KEY_F31 :: 4194362;
    KEY_F32 :: 4194363;
    KEY_F33 :: 4194364;
    KEY_F34 :: 4194365;
    KEY_F35 :: 4194366;
    KEY_KP_MULTIPLY :: 4194433;
    KEY_KP_DIVIDE :: 4194434;
    KEY_KP_SUBTRACT :: 4194435;
    KEY_KP_PERIOD :: 4194436;
    KEY_KP_ADD :: 4194437;
    KEY_KP_0 :: 4194438;
    KEY_KP_1 :: 4194439;
    KEY_KP_2 :: 4194440;
    KEY_KP_3 :: 4194441;
    KEY_KP_4 :: 4194442;
    KEY_KP_5 :: 4194443;
    KEY_KP_6 :: 4194444;
    KEY_KP_7 :: 4194445;
    KEY_KP_8 :: 4194446;
    KEY_KP_9 :: 4194447;
    KEY_MENU :: 4194370;
    KEY_HYPER :: 4194371;
    KEY_HELP :: 4194373;
    KEY_BACK :: 4194376;
    KEY_FORWARD :: 4194377;
    KEY_STOP :: 4194378;
    KEY_REFRESH :: 4194379;
    KEY_VOLUMEDOWN :: 4194380;
    KEY_VOLUMEMUTE :: 4194381;
    KEY_VOLUMEUP :: 4194382;
    KEY_MEDIAPLAY :: 4194388;
    KEY_MEDIASTOP :: 4194389;
    KEY_MEDIAPREVIOUS :: 4194390;
    KEY_MEDIANEXT :: 4194391;
    KEY_MEDIARECORD :: 4194392;
    KEY_HOMEPAGE :: 4194393;
    KEY_FAVORITES :: 4194394;
    KEY_SEARCH :: 4194395;
    KEY_STANDBY :: 4194396;
    KEY_OPENURL :: 4194397;
    KEY_LAUNCHMAIL :: 4194398;
    KEY_LAUNCHMEDIA :: 4194399;
    KEY_LAUNCH0 :: 4194400;
    KEY_LAUNCH1 :: 4194401;
    KEY_LAUNCH2 :: 4194402;
    KEY_LAUNCH3 :: 4194403;
    KEY_LAUNCH4 :: 4194404;
    KEY_LAUNCH5 :: 4194405;
    KEY_LAUNCH6 :: 4194406;
    KEY_LAUNCH7 :: 4194407;
    KEY_LAUNCH8 :: 4194408;
    KEY_LAUNCH9 :: 4194409;
    KEY_LAUNCHA :: 4194410;
    KEY_LAUNCHB :: 4194411;
    KEY_LAUNCHC :: 4194412;
    KEY_LAUNCHD :: 4194413;
    KEY_LAUNCHE :: 4194414;
    KEY_LAUNCHF :: 4194415;
    KEY_GLOBE :: 4194416;
    KEY_KEYBOARD :: 4194417;
    KEY_JIS_EISU :: 4194418;
    KEY_JIS_KANA :: 4194419;
    KEY_UNKNOWN :: 8388607;
    KEY_SPACE :: 32;
    KEY_EXCLAM :: 33;
    KEY_QUOTEDBL :: 34;
    KEY_NUMBERSIGN :: 35;
    KEY_DOLLAR :: 36;
    KEY_PERCENT :: 37;
    KEY_AMPERSAND :: 38;
    KEY_APOSTROPHE :: 39;
    KEY_PARENLEFT :: 40;
    KEY_PARENRIGHT :: 41;
    KEY_ASTERISK :: 42;
    KEY_PLUS :: 43;
    KEY_COMMA :: 44;
    KEY_MINUS :: 45;
    KEY_PERIOD :: 46;
    KEY_SLASH :: 47;
    KEY_0 :: 48;
    KEY_1 :: 49;
    KEY_2 :: 50;
    KEY_3 :: 51;
    KEY_4 :: 52;
    KEY_5 :: 53;
    KEY_6 :: 54;
    KEY_7 :: 55;
    KEY_8 :: 56;
    KEY_9 :: 57;
    KEY_COLON :: 58;
    KEY_SEMICOLON :: 59;
    KEY_LESS :: 60;
    KEY_EQUAL :: 61;
    KEY_GREATER :: 62;
    KEY_QUESTION :: 63;
    KEY_AT :: 64;
    KEY_A :: 65;
    KEY_B :: 66;
    KEY_C :: 67;
    KEY_D :: 68;
    KEY_E :: 69;
    KEY_F :: 70;
    KEY_G :: 71;
    KEY_H :: 72;
    KEY_I :: 73;
    KEY_J :: 74;
    KEY_K :: 75;
    KEY_L :: 76;
    KEY_M :: 77;
    KEY_N :: 78;
    KEY_O :: 79;
    KEY_P :: 80;
    KEY_Q :: 81;
    KEY_R :: 82;
    KEY_S :: 83;
    KEY_T :: 84;
    KEY_U :: 85;
    KEY_V :: 86;
    KEY_W :: 87;
    KEY_X :: 88;
    KEY_Y :: 89;
    KEY_Z :: 90;
    KEY_BRACKETLEFT :: 91;
    KEY_BACKSLASH :: 92;
    KEY_BRACKETRIGHT :: 93;
    KEY_ASCIICIRCUM :: 94;
    KEY_UNDERSCORE :: 95;
    KEY_QUOTELEFT :: 96;
    KEY_BRACELEFT :: 123;
    KEY_BAR :: 124;
    KEY_BRACERIGHT :: 125;
    KEY_ASCIITILDE :: 126;
    KEY_YEN :: 165;
    KEY_SECTION :: 167;
}

KeyModifierMask :: enum s32 {    // 9
    KEY_CODE_MASK :: 8388607;
    KEY_MODIFIER_MASK :: 2130706432;
    KEY_MASK_CMD_OR_CTRL :: 16777216;
    KEY_MASK_SHIFT :: 33554432;
    KEY_MASK_ALT :: 67108864;
    KEY_MASK_META :: 134217728;
    KEY_MASK_CTRL :: 268435456;
    KEY_MASK_KPAD :: 536870912;
    KEY_MASK_GROUP_SWITCH :: 1073741824;
} @bitfield

KeyLocation :: enum s32 {    // 10
    KEY_LOCATION_UNSPECIFIED :: 0;
    KEY_LOCATION_LEFT :: 1;
    KEY_LOCATION_RIGHT :: 2;
}

MouseButton :: enum s32 {    // 11
    MOUSE_BUTTON_NONE :: 0;
    MOUSE_BUTTON_LEFT :: 1;
    MOUSE_BUTTON_RIGHT :: 2;
    MOUSE_BUTTON_MIDDLE :: 3;
    MOUSE_BUTTON_WHEEL_UP :: 4;
    MOUSE_BUTTON_WHEEL_DOWN :: 5;
    MOUSE_BUTTON_WHEEL_LEFT :: 6;
    MOUSE_BUTTON_WHEEL_RIGHT :: 7;
    MOUSE_BUTTON_XBUTTON1 :: 8;
    MOUSE_BUTTON_XBUTTON2 :: 9;
}

MouseButtonMask :: enum s32 {    // 12
    MOUSE_BUTTON_MASK_LEFT :: 1;
    MOUSE_BUTTON_MASK_RIGHT :: 2;
    MOUSE_BUTTON_MASK_MIDDLE :: 4;
    MOUSE_BUTTON_MASK_MB_XBUTTON1 :: 128;
    MOUSE_BUTTON_MASK_MB_XBUTTON2 :: 256;
} @bitfield

JoyButton :: enum s32 {    // 13
    JOY_BUTTON_INVALID :: -1;
    JOY_BUTTON_A :: 0;
    JOY_BUTTON_B :: 1;
    JOY_BUTTON_X :: 2;
    JOY_BUTTON_Y :: 3;
    JOY_BUTTON_BACK :: 4;
    JOY_BUTTON_GUIDE :: 5;
    JOY_BUTTON_START :: 6;
    JOY_BUTTON_LEFT_STICK :: 7;
    JOY_BUTTON_RIGHT_STICK :: 8;
    JOY_BUTTON_LEFT_SHOULDER :: 9;
    JOY_BUTTON_RIGHT_SHOULDER :: 10;
    JOY_BUTTON_DPAD_UP :: 11;
    JOY_BUTTON_DPAD_DOWN :: 12;
    JOY_BUTTON_DPAD_LEFT :: 13;
    JOY_BUTTON_DPAD_RIGHT :: 14;
    JOY_BUTTON_MISC1 :: 15;
    JOY_BUTTON_PADDLE1 :: 16;
    JOY_BUTTON_PADDLE2 :: 17;
    JOY_BUTTON_PADDLE3 :: 18;
    JOY_BUTTON_PADDLE4 :: 19;
    JOY_BUTTON_TOUCHPAD :: 20;
    JOY_BUTTON_SDL_MAX :: 21;
    JOY_BUTTON_MAX :: 128;
}

JoyAxis :: enum s32 {    // 14
    JOY_AXIS_INVALID :: -1;
    JOY_AXIS_LEFT_X :: 0;
    JOY_AXIS_LEFT_Y :: 1;
    JOY_AXIS_RIGHT_X :: 2;
    JOY_AXIS_RIGHT_Y :: 3;
    JOY_AXIS_TRIGGER_LEFT :: 4;
    JOY_AXIS_TRIGGER_RIGHT :: 5;
    JOY_AXIS_SDL_MAX :: 6;
    JOY_AXIS_MAX :: 10;
}

MIDIMessage :: enum s32 {    // 15
    MIDI_MESSAGE_NONE :: 0;
    MIDI_MESSAGE_NOTE_OFF :: 8;
    MIDI_MESSAGE_NOTE_ON :: 9;
    MIDI_MESSAGE_AFTERTOUCH :: 10;
    MIDI_MESSAGE_CONTROL_CHANGE :: 11;
    MIDI_MESSAGE_PROGRAM_CHANGE :: 12;
    MIDI_MESSAGE_CHANNEL_PRESSURE :: 13;
    MIDI_MESSAGE_PITCH_BEND :: 14;
    MIDI_MESSAGE_SYSTEM_EXCLUSIVE :: 240;
    MIDI_MESSAGE_QUARTER_FRAME :: 241;
    MIDI_MESSAGE_SONG_POSITION_POINTER :: 242;
    MIDI_MESSAGE_SONG_SELECT :: 243;
    MIDI_MESSAGE_TUNE_REQUEST :: 246;
    MIDI_MESSAGE_TIMING_CLOCK :: 248;
    MIDI_MESSAGE_START :: 250;
    MIDI_MESSAGE_CONTINUE :: 251;
    MIDI_MESSAGE_STOP :: 252;
    MIDI_MESSAGE_ACTIVE_SENSING :: 254;
    MIDI_MESSAGE_SYSTEM_RESET :: 255;
}

Error :: enum s32 {    // 16
    OK :: 0;
    FAILED :: 1;
    ERR_UNAVAILABLE :: 2;
    ERR_UNCONFIGURED :: 3;
    ERR_UNAUTHORIZED :: 4;
    ERR_PARAMETER_RANGE_ERROR :: 5;
    ERR_OUT_OF_MEMORY :: 6;
    ERR_FILE_NOT_FOUND :: 7;
    ERR_FILE_BAD_DRIVE :: 8;
    ERR_FILE_BAD_PATH :: 9;
    ERR_FILE_NO_PERMISSION :: 10;
    ERR_FILE_ALREADY_IN_USE :: 11;
    ERR_FILE_CANT_OPEN :: 12;
    ERR_FILE_CANT_WRITE :: 13;
    ERR_FILE_CANT_READ :: 14;
    ERR_FILE_UNRECOGNIZED :: 15;
    ERR_FILE_CORRUPT :: 16;
    ERR_FILE_MISSING_DEPENDENCIES :: 17;
    ERR_FILE_EOF :: 18;
    ERR_CANT_OPEN :: 19;
    ERR_CANT_CREATE :: 20;
    ERR_QUERY_FAILED :: 21;
    ERR_ALREADY_IN_USE :: 22;
    ERR_LOCKED :: 23;
    ERR_TIMEOUT :: 24;
    ERR_CANT_CONNECT :: 25;
    ERR_CANT_RESOLVE :: 26;
    ERR_CONNECTION_ERROR :: 27;
    ERR_CANT_ACQUIRE_RESOURCE :: 28;
    ERR_CANT_FORK :: 29;
    ERR_INVALID_DATA :: 30;
    ERR_INVALID_PARAMETER :: 31;
    ERR_ALREADY_EXISTS :: 32;
    ERR_DOES_NOT_EXIST :: 33;
    ERR_DATABASE_CANT_READ :: 34;
    ERR_DATABASE_CANT_WRITE :: 35;
    ERR_COMPILATION_FAILED :: 36;
    ERR_METHOD_NOT_FOUND :: 37;
    ERR_LINK_FAILED :: 38;
    ERR_SCRIPT_FAILED :: 39;
    ERR_CYCLIC_LINK :: 40;
    ERR_INVALID_DECLARATION :: 41;
    ERR_DUPLICATE_SYMBOL :: 42;
    ERR_PARSE_ERROR :: 43;
    ERR_BUSY :: 44;
    ERR_SKIP :: 45;
    ERR_HELP :: 46;
    ERR_BUG :: 47;
    ERR_PRINTER_ON_FIRE :: 48;
}

PropertyHint :: enum s32 {    // 17
    PROPERTY_HINT_NONE :: 0;
    PROPERTY_HINT_RANGE :: 1;
    PROPERTY_HINT_ENUM :: 2;
    PROPERTY_HINT_ENUM_SUGGESTION :: 3;
    PROPERTY_HINT_EXP_EASING :: 4;
    PROPERTY_HINT_LINK :: 5;
    PROPERTY_HINT_FLAGS :: 6;
    PROPERTY_HINT_LAYERS_2D_RENDER :: 7;
    PROPERTY_HINT_LAYERS_2D_PHYSICS :: 8;
    PROPERTY_HINT_LAYERS_2D_NAVIGATION :: 9;
    PROPERTY_HINT_LAYERS_3D_RENDER :: 10;
    PROPERTY_HINT_LAYERS_3D_PHYSICS :: 11;
    PROPERTY_HINT_LAYERS_3D_NAVIGATION :: 12;
    PROPERTY_HINT_LAYERS_AVOIDANCE :: 37;
    PROPERTY_HINT_FILE :: 13;
    PROPERTY_HINT_DIR :: 14;
    PROPERTY_HINT_GLOBAL_FILE :: 15;
    PROPERTY_HINT_GLOBAL_DIR :: 16;
    PROPERTY_HINT_RESOURCE_TYPE :: 17;
    PROPERTY_HINT_MULTILINE_TEXT :: 18;
    PROPERTY_HINT_EXPRESSION :: 19;
    PROPERTY_HINT_PLACEHOLDER_TEXT :: 20;
    PROPERTY_HINT_COLOR_NO_ALPHA :: 21;
    PROPERTY_HINT_OBJECT_ID :: 22;
    PROPERTY_HINT_TYPE_STRING :: 23;
    PROPERTY_HINT_NODE_PATH_TO_EDITED_NODE :: 24;
    PROPERTY_HINT_OBJECT_TOO_BIG :: 25;
    PROPERTY_HINT_NODE_PATH_VALID_TYPES :: 26;
    PROPERTY_HINT_SAVE_FILE :: 27;
    PROPERTY_HINT_GLOBAL_SAVE_FILE :: 28;
    PROPERTY_HINT_INT_IS_OBJECTID :: 29;
    PROPERTY_HINT_INT_IS_POINTER :: 30;
    PROPERTY_HINT_ARRAY_TYPE :: 31;
    PROPERTY_HINT_DICTIONARY_TYPE :: 38;
    PROPERTY_HINT_LOCALE_ID :: 32;
    PROPERTY_HINT_LOCALIZABLE_STRING :: 33;
    PROPERTY_HINT_NODE_TYPE :: 34;
    PROPERTY_HINT_HIDE_QUATERNION_EDIT :: 35;
    PROPERTY_HINT_PASSWORD :: 36;
    PROPERTY_HINT_TOOL_BUTTON :: 39;
    PROPERTY_HINT_ONESHOT :: 40;
    PROPERTY_HINT_MAX :: 42;
}

PropertyUsageFlags :: enum s32 {    // 18
    PROPERTY_USAGE_NONE :: 0;
    PROPERTY_USAGE_STORAGE :: 2;
    PROPERTY_USAGE_EDITOR :: 4;
    PROPERTY_USAGE_INTERNAL :: 8;
    PROPERTY_USAGE_CHECKABLE :: 16;
    PROPERTY_USAGE_CHECKED :: 32;
    PROPERTY_USAGE_GROUP :: 64;
    PROPERTY_USAGE_CATEGORY :: 128;
    PROPERTY_USAGE_SUBGROUP :: 256;
    PROPERTY_USAGE_CLASS_IS_BITFIELD :: 512;
    PROPERTY_USAGE_NO_INSTANCE_STATE :: 1024;
    PROPERTY_USAGE_RESTART_IF_CHANGED :: 2048;
    PROPERTY_USAGE_SCRIPT_VARIABLE :: 4096;
    PROPERTY_USAGE_STORE_IF_NULL :: 8192;
    PROPERTY_USAGE_UPDATE_ALL_IF_MODIFIED :: 16384;
    PROPERTY_USAGE_SCRIPT_DEFAULT_VALUE :: 32768;
    PROPERTY_USAGE_CLASS_IS_ENUM :: 65536;
    PROPERTY_USAGE_NIL_IS_VARIANT :: 131072;
    PROPERTY_USAGE_ARRAY :: 262144;
    PROPERTY_USAGE_ALWAYS_DUPLICATE :: 524288;
    PROPERTY_USAGE_NEVER_DUPLICATE :: 1048576;
    PROPERTY_USAGE_HIGH_END_GFX :: 2097152;
    PROPERTY_USAGE_NODE_PATH_FROM_SCENE_ROOT :: 4194304;
    PROPERTY_USAGE_RESOURCE_NOT_PERSISTENT :: 8388608;
    PROPERTY_USAGE_KEYING_INCREMENTS :: 16777216;
    PROPERTY_USAGE_DEFERRED_SET_RESOURCE :: 33554432;
    PROPERTY_USAGE_EDITOR_INSTANTIATE_OBJECT :: 67108864;
    PROPERTY_USAGE_EDITOR_BASIC_SETTING :: 134217728;
    PROPERTY_USAGE_READ_ONLY :: 268435456;
    PROPERTY_USAGE_SECRET :: 536870912;
    PROPERTY_USAGE_DEFAULT :: 6;
    PROPERTY_USAGE_NO_EDITOR :: 2;
} @bitfield

MethodFlags :: enum s32 {    // 19
    METHOD_FLAG_NORMAL :: 1;
    METHOD_FLAG_EDITOR :: 2;
    METHOD_FLAG_CONST :: 4;
    METHOD_FLAG_VIRTUAL :: 8;
    METHOD_FLAG_VARARG :: 16;
    METHOD_FLAG_STATIC :: 32;
    METHOD_FLAG_OBJECT_CORE :: 64;
    METHOD_FLAG_VIRTUAL_REQUIRED :: 128;
    METHOD_FLAGS_DEFAULT :: 1;
} @bitfield

Variant_Type :: enum s32 {    // 20
    TYPE_NIL :: 0;
    TYPE_BOOL :: 1;
    TYPE_INT :: 2;
    TYPE_FLOAT :: 3;
    TYPE_STRING :: 4;
    TYPE_VECTOR2 :: 5;
    TYPE_VECTOR2I :: 6;
    TYPE_RECT2 :: 7;
    TYPE_RECT2I :: 8;
    TYPE_VECTOR3 :: 9;
    TYPE_VECTOR3I :: 10;
    TYPE_TRANSFORM2D :: 11;
    TYPE_VECTOR4 :: 12;
    TYPE_VECTOR4I :: 13;
    TYPE_PLANE :: 14;
    TYPE_QUATERNION :: 15;
    TYPE_AABB :: 16;
    TYPE_BASIS :: 17;
    TYPE_TRANSFORM3D :: 18;
    TYPE_PROJECTION :: 19;
    TYPE_COLOR :: 20;
    TYPE_STRING_NAME :: 21;
    TYPE_NODE_PATH :: 22;
    TYPE_RID :: 23;
    TYPE_OBJECT :: 24;
    TYPE_CALLABLE :: 25;
    TYPE_SIGNAL :: 26;
    TYPE_DICTIONARY :: 27;
    TYPE_ARRAY :: 28;
    TYPE_PACKED_BYTE_ARRAY :: 29;
    TYPE_PACKED_INT32_ARRAY :: 30;
    TYPE_PACKED_INT64_ARRAY :: 31;
    TYPE_PACKED_FLOAT32_ARRAY :: 32;
    TYPE_PACKED_FLOAT64_ARRAY :: 33;
    TYPE_PACKED_STRING_ARRAY :: 34;
    TYPE_PACKED_VECTOR2_ARRAY :: 35;
    TYPE_PACKED_VECTOR3_ARRAY :: 36;
    TYPE_PACKED_COLOR_ARRAY :: 37;
    TYPE_PACKED_VECTOR4_ARRAY :: 38;
    TYPE_MAX :: 39;
}

Variant_Operator :: enum s32 {    // 21
    OP_EQUAL :: 0;
    OP_NOT_EQUAL :: 1;
    OP_LESS :: 2;
    OP_LESS_EQUAL :: 3;
    OP_GREATER :: 4;
    OP_GREATER_EQUAL :: 5;
    OP_ADD :: 6;
    OP_SUBTRACT :: 7;
    OP_MULTIPLY :: 8;
    OP_DIVIDE :: 9;
    OP_NEGATE :: 10;
    OP_POSITIVE :: 11;
    OP_MODULE :: 12;
    OP_POWER :: 13;
    OP_SHIFT_LEFT :: 14;
    OP_SHIFT_RIGHT :: 15;
    OP_BIT_AND :: 16;
    OP_BIT_OR :: 17;
    OP_BIT_XOR :: 18;
    OP_BIT_NEGATE :: 19;
    OP_AND :: 20;
    OP_OR :: 21;
    OP_XOR :: 22;
    OP_NOT :: 23;
    OP_IN :: 24;
    OP_MAX :: 25;
}

AESContext :: struct {  // 0

        #as using base: OpaqueClass;

    Mode :: enum s32 {
        MODE_ECB_ENCRYPT :: 0;
        MODE_ECB_DECRYPT :: 1;
        MODE_CBC_ENCRYPT :: 2;
        MODE_CBC_DECRYPT :: 3;
        MODE_MAX :: 4;
    }
}

AStar2D :: struct { #as using base: OpaqueClass; } // 1

AStar3D :: struct { #as using base: OpaqueClass; } // 2

AStarGrid2D :: struct {  // 3

        #as using base: OpaqueClass;

    Heuristic :: enum s32 {
        HEURISTIC_EUCLIDEAN :: 0;
        HEURISTIC_MANHATTAN :: 1;
        HEURISTIC_OCTILE :: 2;
        HEURISTIC_CHEBYSHEV :: 3;
        HEURISTIC_MAX :: 4;
    }

    DiagonalMode :: enum s32 {
        DIAGONAL_MODE_ALWAYS :: 0;
        DIAGONAL_MODE_NEVER :: 1;
        DIAGONAL_MODE_AT_LEAST_ONE_WALKABLE :: 2;
        DIAGONAL_MODE_ONLY_IF_NO_OBSTACLES :: 3;
        DIAGONAL_MODE_MAX :: 4;
    }

    CellShape :: enum s32 {
        CELL_SHAPE_SQUARE :: 0;
        CELL_SHAPE_ISOMETRIC_RIGHT :: 1;
        CELL_SHAPE_ISOMETRIC_DOWN :: 2;
        CELL_SHAPE_MAX :: 3;
    }
}

AcceptDialog :: struct { #as using base: OpaqueClass; } // 4

AnimatableBody2D :: struct { #as using base: OpaqueClass; } // 5

AnimatableBody3D :: struct { #as using base: OpaqueClass; } // 6

AnimatedSprite2D :: struct { #as using base: OpaqueClass; } // 7

AnimatedSprite3D :: struct { #as using base: OpaqueClass; } // 8

AnimatedTexture :: struct { #as using base: OpaqueClass; } // 9

Animation :: struct {  // 10

        #as using base: OpaqueClass;

    TrackType :: enum s32 {
        TYPE_VALUE :: 0;
        TYPE_POSITION_3D :: 1;
        TYPE_ROTATION_3D :: 2;
        TYPE_SCALE_3D :: 3;
        TYPE_BLEND_SHAPE :: 4;
        TYPE_METHOD :: 5;
        TYPE_BEZIER :: 6;
        TYPE_AUDIO :: 7;
        TYPE_ANIMATION :: 8;
    }

    InterpolationType :: enum s32 {
        INTERPOLATION_NEAREST :: 0;
        INTERPOLATION_LINEAR :: 1;
        INTERPOLATION_CUBIC :: 2;
        INTERPOLATION_LINEAR_ANGLE :: 3;
        INTERPOLATION_CUBIC_ANGLE :: 4;
    }

    UpdateMode :: enum s32 {
        UPDATE_CONTINUOUS :: 0;
        UPDATE_DISCRETE :: 1;
        UPDATE_CAPTURE :: 2;
    }

    LoopMode :: enum s32 {
        LOOP_NONE :: 0;
        LOOP_LINEAR :: 1;
        LOOP_PINGPONG :: 2;
    }

    LoopedFlag :: enum s32 {
        LOOPED_FLAG_NONE :: 0;
        LOOPED_FLAG_END :: 1;
        LOOPED_FLAG_START :: 2;
    }

    FindMode :: enum s32 {
        FIND_MODE_NEAREST :: 0;
        FIND_MODE_APPROX :: 1;
        FIND_MODE_EXACT :: 2;
    }
}

AnimationLibrary :: struct { #as using base: OpaqueClass; } // 11

AnimationMixer :: struct {  // 12

        #as using base: OpaqueClass;

    AnimationCallbackModeProcess :: enum s32 {
        ANIMATION_CALLBACK_MODE_PROCESS_PHYSICS :: 0;
        ANIMATION_CALLBACK_MODE_PROCESS_IDLE :: 1;
        ANIMATION_CALLBACK_MODE_PROCESS_MANUAL :: 2;
    }

    AnimationCallbackModeMethod :: enum s32 {
        ANIMATION_CALLBACK_MODE_METHOD_DEFERRED :: 0;
        ANIMATION_CALLBACK_MODE_METHOD_IMMEDIATE :: 1;
    }

    AnimationCallbackModeDiscrete :: enum s32 {
        ANIMATION_CALLBACK_MODE_DISCRETE_DOMINANT :: 0;
        ANIMATION_CALLBACK_MODE_DISCRETE_RECESSIVE :: 1;
        ANIMATION_CALLBACK_MODE_DISCRETE_FORCE_CONTINUOUS :: 2;
    }
}

AnimationNode :: struct {  // 13

        #as using base: OpaqueClass;

    FilterAction :: enum s32 {
        FILTER_IGNORE :: 0;
        FILTER_PASS :: 1;
        FILTER_STOP :: 2;
        FILTER_BLEND :: 3;
    }
}

AnimationNodeAdd2 :: struct { #as using base: OpaqueClass; } // 14

AnimationNodeAdd3 :: struct { #as using base: OpaqueClass; } // 15

AnimationNodeAnimation :: struct {  // 16

        #as using base: OpaqueClass;

    PlayMode :: enum s32 {
        PLAY_MODE_FORWARD :: 0;
        PLAY_MODE_BACKWARD :: 1;
    }
}

AnimationNodeBlend2 :: struct { #as using base: OpaqueClass; } // 17

AnimationNodeBlend3 :: struct { #as using base: OpaqueClass; } // 18

AnimationNodeBlendSpace1D :: struct {  // 19

        #as using base: OpaqueClass;

    BlendMode :: enum s32 {
        BLEND_MODE_INTERPOLATED :: 0;
        BLEND_MODE_DISCRETE :: 1;
        BLEND_MODE_DISCRETE_CARRY :: 2;
    }
}

AnimationNodeBlendSpace2D :: struct {  // 20

        #as using base: OpaqueClass;

    BlendMode :: enum s32 {
        BLEND_MODE_INTERPOLATED :: 0;
        BLEND_MODE_DISCRETE :: 1;
        BLEND_MODE_DISCRETE_CARRY :: 2;
    }
}

AnimationNodeBlendTree :: struct { #as using base: OpaqueClass; } // 21

AnimationNodeExtension :: struct { #as using base: OpaqueClass; } // 22

AnimationNodeOneShot :: struct {  // 23

        #as using base: OpaqueClass;

    OneShotRequest :: enum s32 {
        ONE_SHOT_REQUEST_NONE :: 0;
        ONE_SHOT_REQUEST_FIRE :: 1;
        ONE_SHOT_REQUEST_ABORT :: 2;
        ONE_SHOT_REQUEST_FADE_OUT :: 3;
    }

    MixMode :: enum s32 {
        MIX_MODE_BLEND :: 0;
        MIX_MODE_ADD :: 1;
    }
}

AnimationNodeOutput :: struct { #as using base: OpaqueClass; } // 24

AnimationNodeStateMachine :: struct {  // 25

        #as using base: OpaqueClass;

    StateMachineType :: enum s32 {
        STATE_MACHINE_TYPE_ROOT :: 0;
        STATE_MACHINE_TYPE_NESTED :: 1;
        STATE_MACHINE_TYPE_GROUPED :: 2;
    }
}

AnimationNodeStateMachinePlayback :: struct { #as using base: OpaqueClass; } // 26

AnimationNodeStateMachineTransition :: struct {  // 27

        #as using base: OpaqueClass;

    SwitchMode :: enum s32 {
        SWITCH_MODE_IMMEDIATE :: 0;
        SWITCH_MODE_SYNC :: 1;
        SWITCH_MODE_AT_END :: 2;
    }

    AdvanceMode :: enum s32 {
        ADVANCE_MODE_DISABLED :: 0;
        ADVANCE_MODE_ENABLED :: 1;
        ADVANCE_MODE_AUTO :: 2;
    }
}

AnimationNodeSub2 :: struct { #as using base: OpaqueClass; } // 28

AnimationNodeSync :: struct { #as using base: OpaqueClass; } // 29

AnimationNodeTimeScale :: struct { #as using base: OpaqueClass; } // 30

AnimationNodeTimeSeek :: struct { #as using base: OpaqueClass; } // 31

AnimationNodeTransition :: struct { #as using base: OpaqueClass; } // 32

AnimationPlayer :: struct {  // 33

        #as using base: OpaqueClass;

    AnimationProcessCallback :: enum s32 {
        ANIMATION_PROCESS_PHYSICS :: 0;
        ANIMATION_PROCESS_IDLE :: 1;
        ANIMATION_PROCESS_MANUAL :: 2;
    }

    AnimationMethodCallMode :: enum s32 {
        ANIMATION_METHOD_CALL_DEFERRED :: 0;
        ANIMATION_METHOD_CALL_IMMEDIATE :: 1;
    }
}

AnimationRootNode :: struct { #as using base: OpaqueClass; } // 34

AnimationTree :: struct {  // 35

        #as using base: OpaqueClass;

    AnimationProcessCallback :: enum s32 {
        ANIMATION_PROCESS_PHYSICS :: 0;
        ANIMATION_PROCESS_IDLE :: 1;
        ANIMATION_PROCESS_MANUAL :: 2;
    }
}

Area2D :: struct {  // 36

        #as using base: OpaqueClass;

    SpaceOverride :: enum s32 {
        SPACE_OVERRIDE_DISABLED :: 0;
        SPACE_OVERRIDE_COMBINE :: 1;
        SPACE_OVERRIDE_COMBINE_REPLACE :: 2;
        SPACE_OVERRIDE_REPLACE :: 3;
        SPACE_OVERRIDE_REPLACE_COMBINE :: 4;
    }
}

Area3D :: struct {  // 37

        #as using base: OpaqueClass;

    SpaceOverride :: enum s32 {
        SPACE_OVERRIDE_DISABLED :: 0;
        SPACE_OVERRIDE_COMBINE :: 1;
        SPACE_OVERRIDE_COMBINE_REPLACE :: 2;
        SPACE_OVERRIDE_REPLACE :: 3;
        SPACE_OVERRIDE_REPLACE_COMBINE :: 4;
    }
}

ArrayMesh :: struct { #as using base: OpaqueClass; } // 38

ArrayOccluder3D :: struct { #as using base: OpaqueClass; } // 39

AspectRatioContainer :: struct {  // 40

        #as using base: OpaqueClass;

    StretchMode :: enum s32 {
        STRETCH_WIDTH_CONTROLS_HEIGHT :: 0;
        STRETCH_HEIGHT_CONTROLS_WIDTH :: 1;
        STRETCH_FIT :: 2;
        STRETCH_COVER :: 3;
    }

    AlignmentMode :: enum s32 {
        ALIGNMENT_BEGIN :: 0;
        ALIGNMENT_CENTER :: 1;
        ALIGNMENT_END :: 2;
    }
}

AtlasTexture :: struct { #as using base: OpaqueClass; } // 41

AudioBusLayout :: struct { #as using base: OpaqueClass; } // 42

AudioEffect :: struct { #as using base: OpaqueClass; } // 43

AudioEffectAmplify :: struct { #as using base: OpaqueClass; } // 44

AudioEffectBandLimitFilter :: struct { #as using base: OpaqueClass; } // 45

AudioEffectBandPassFilter :: struct { #as using base: OpaqueClass; } // 46

AudioEffectCapture :: struct { #as using base: OpaqueClass; } // 47

AudioEffectChorus :: struct { #as using base: OpaqueClass; } // 48

AudioEffectCompressor :: struct { #as using base: OpaqueClass; } // 49

AudioEffectDelay :: struct { #as using base: OpaqueClass; } // 50

AudioEffectDistortion :: struct {  // 51

        #as using base: OpaqueClass;

    Mode :: enum s32 {
        MODE_CLIP :: 0;
        MODE_ATAN :: 1;
        MODE_LOFI :: 2;
        MODE_OVERDRIVE :: 3;
        MODE_WAVESHAPE :: 4;
    }
}

AudioEffectEQ :: struct { #as using base: OpaqueClass; } // 52

AudioEffectEQ10 :: struct { #as using base: OpaqueClass; } // 53

AudioEffectEQ21 :: struct { #as using base: OpaqueClass; } // 54

AudioEffectEQ6 :: struct { #as using base: OpaqueClass; } // 55

AudioEffectFilter :: struct {  // 56

        #as using base: OpaqueClass;

    FilterDB :: enum s32 {
        FILTER_6DB :: 0;
        FILTER_12DB :: 1;
        FILTER_18DB :: 2;
        FILTER_24DB :: 3;
    }
}

AudioEffectHardLimiter :: struct { #as using base: OpaqueClass; } // 57

AudioEffectHighPassFilter :: struct { #as using base: OpaqueClass; } // 58

AudioEffectHighShelfFilter :: struct { #as using base: OpaqueClass; } // 59

AudioEffectInstance :: struct { #as using base: OpaqueClass; } // 60

AudioEffectLimiter :: struct { #as using base: OpaqueClass; } // 61

AudioEffectLowPassFilter :: struct { #as using base: OpaqueClass; } // 62

AudioEffectLowShelfFilter :: struct { #as using base: OpaqueClass; } // 63

AudioEffectNotchFilter :: struct { #as using base: OpaqueClass; } // 64

AudioEffectPanner :: struct { #as using base: OpaqueClass; } // 65

AudioEffectPhaser :: struct { #as using base: OpaqueClass; } // 66

AudioEffectPitchShift :: struct {  // 67

        #as using base: OpaqueClass;

    FFTSize :: enum s32 {
        FFT_SIZE_256 :: 0;
        FFT_SIZE_512 :: 1;
        FFT_SIZE_1024 :: 2;
        FFT_SIZE_2048 :: 3;
        FFT_SIZE_4096 :: 4;
        FFT_SIZE_MAX :: 5;
    }
}

AudioEffectRecord :: struct { #as using base: OpaqueClass; } // 68

AudioEffectReverb :: struct { #as using base: OpaqueClass; } // 69

AudioEffectSpectrumAnalyzer :: struct {  // 70

        #as using base: OpaqueClass;

    FFTSize :: enum s32 {
        FFT_SIZE_256 :: 0;
        FFT_SIZE_512 :: 1;
        FFT_SIZE_1024 :: 2;
        FFT_SIZE_2048 :: 3;
        FFT_SIZE_4096 :: 4;
        FFT_SIZE_MAX :: 5;
    }
}

AudioEffectSpectrumAnalyzerInstance :: struct {  // 71

        #as using base: OpaqueClass;

    MagnitudeMode :: enum s32 {
        MAGNITUDE_AVERAGE :: 0;
        MAGNITUDE_MAX :: 1;
    }
}

AudioEffectStereoEnhance :: struct { #as using base: OpaqueClass; } // 72

AudioListener2D :: struct { #as using base: OpaqueClass; } // 73

AudioListener3D :: struct { #as using base: OpaqueClass; } // 74

AudioSample :: struct { #as using base: OpaqueClass; } // 75

AudioSamplePlayback :: struct { #as using base: OpaqueClass; } // 76

AudioServer :: struct {  // 77

        #as using base: OpaqueClass;

    SpeakerMode :: enum s32 {
        SPEAKER_MODE_STEREO :: 0;
        SPEAKER_SURROUND_31 :: 1;
        SPEAKER_SURROUND_51 :: 2;
        SPEAKER_SURROUND_71 :: 3;
    }

    PlaybackType :: enum s32 {
        PLAYBACK_TYPE_DEFAULT :: 0;
        PLAYBACK_TYPE_STREAM :: 1;
        PLAYBACK_TYPE_SAMPLE :: 2;
        PLAYBACK_TYPE_MAX :: 3;
    }
}

AudioStream :: struct { #as using base: OpaqueClass; } // 78

AudioStreamGenerator :: struct {  // 79

        #as using base: OpaqueClass;

    AudioStreamGeneratorMixRate :: enum s32 {
        MIX_RATE_OUTPUT :: 0;
        MIX_RATE_INPUT :: 1;
        MIX_RATE_CUSTOM :: 2;
        MIX_RATE_MAX :: 3;
    }
}

AudioStreamGeneratorPlayback :: struct { #as using base: OpaqueClass; } // 80

AudioStreamInteractive :: struct {  // 81

        #as using base: OpaqueClass;

    TransitionFromTime :: enum s32 {
        TRANSITION_FROM_TIME_IMMEDIATE :: 0;
        TRANSITION_FROM_TIME_NEXT_BEAT :: 1;
        TRANSITION_FROM_TIME_NEXT_BAR :: 2;
        TRANSITION_FROM_TIME_END :: 3;
    }

    TransitionToTime :: enum s32 {
        TRANSITION_TO_TIME_SAME_POSITION :: 0;
        TRANSITION_TO_TIME_START :: 1;
    }

    FadeMode :: enum s32 {
        FADE_DISABLED :: 0;
        FADE_IN :: 1;
        FADE_OUT :: 2;
        FADE_CROSS :: 3;
        FADE_AUTOMATIC :: 4;
    }

    AutoAdvanceMode :: enum s32 {
        AUTO_ADVANCE_DISABLED :: 0;
        AUTO_ADVANCE_ENABLED :: 1;
        AUTO_ADVANCE_RETURN_TO_HOLD :: 2;
    }
}

AudioStreamMP3 :: struct { #as using base: OpaqueClass; } // 82

AudioStreamMicrophone :: struct { #as using base: OpaqueClass; } // 83

AudioStreamOggVorbis :: struct { #as using base: OpaqueClass; } // 84

AudioStreamPlayback :: struct { #as using base: OpaqueClass; } // 85

AudioStreamPlaybackInteractive :: struct { #as using base: OpaqueClass; } // 86

AudioStreamPlaybackOggVorbis :: struct { #as using base: OpaqueClass; } // 87

AudioStreamPlaybackPlaylist :: struct { #as using base: OpaqueClass; } // 88

AudioStreamPlaybackPolyphonic :: struct { #as using base: OpaqueClass; } // 89

AudioStreamPlaybackResampled :: struct { #as using base: OpaqueClass; } // 90

AudioStreamPlaybackSynchronized :: struct { #as using base: OpaqueClass; } // 91

AudioStreamPlayer :: struct {  // 92

        #as using base: OpaqueClass;

    MixTarget :: enum s32 {
        MIX_TARGET_STEREO :: 0;
        MIX_TARGET_SURROUND :: 1;
        MIX_TARGET_CENTER :: 2;
    }
}

AudioStreamPlayer2D :: struct { #as using base: OpaqueClass; } // 93

AudioStreamPlayer3D :: struct {  // 94

        #as using base: OpaqueClass;

    AttenuationModel :: enum s32 {
        ATTENUATION_INVERSE_DISTANCE :: 0;
        ATTENUATION_INVERSE_SQUARE_DISTANCE :: 1;
        ATTENUATION_LOGARITHMIC :: 2;
        ATTENUATION_DISABLED :: 3;
    }

    DopplerTracking :: enum s32 {
        DOPPLER_TRACKING_DISABLED :: 0;
        DOPPLER_TRACKING_IDLE_STEP :: 1;
        DOPPLER_TRACKING_PHYSICS_STEP :: 2;
    }
}

AudioStreamPlaylist :: struct { #as using base: OpaqueClass; } // 95

AudioStreamPolyphonic :: struct { #as using base: OpaqueClass; } // 96

AudioStreamRandomizer :: struct {  // 97

        #as using base: OpaqueClass;

    PlaybackMode :: enum s32 {
        PLAYBACK_RANDOM_NO_REPEATS :: 0;
        PLAYBACK_RANDOM :: 1;
        PLAYBACK_SEQUENTIAL :: 2;
    }
}

AudioStreamSynchronized :: struct { #as using base: OpaqueClass; } // 98

AudioStreamWAV :: struct {  // 99

        #as using base: OpaqueClass;

    Format :: enum s32 {
        FORMAT_8_BITS :: 0;
        FORMAT_16_BITS :: 1;
        FORMAT_IMA_ADPCM :: 2;
        FORMAT_QOA :: 3;
    }

    LoopMode :: enum s32 {
        LOOP_DISABLED :: 0;
        LOOP_FORWARD :: 1;
        LOOP_PINGPONG :: 2;
        LOOP_BACKWARD :: 3;
    }
}

BackBufferCopy :: struct {  // 100

        #as using base: OpaqueClass;

    CopyMode :: enum s32 {
        COPY_MODE_DISABLED :: 0;
        COPY_MODE_RECT :: 1;
        COPY_MODE_VIEWPORT :: 2;
    }
}

BaseButton :: struct {  // 101

        #as using base: OpaqueClass;

    DrawMode :: enum s32 {
        DRAW_NORMAL :: 0;
        DRAW_PRESSED :: 1;
        DRAW_HOVER :: 2;
        DRAW_DISABLED :: 3;
        DRAW_HOVER_PRESSED :: 4;
    }

    ActionMode :: enum s32 {
        ACTION_MODE_BUTTON_PRESS :: 0;
        ACTION_MODE_BUTTON_RELEASE :: 1;
    }
}

BaseMaterial3D :: struct {  // 102

        #as using base: OpaqueClass;

    TextureParam :: enum s32 {
        TEXTURE_ALBEDO :: 0;
        TEXTURE_METALLIC :: 1;
        TEXTURE_ROUGHNESS :: 2;
        TEXTURE_EMISSION :: 3;
        TEXTURE_NORMAL :: 4;
        TEXTURE_RIM :: 5;
        TEXTURE_CLEARCOAT :: 6;
        TEXTURE_FLOWMAP :: 7;
        TEXTURE_AMBIENT_OCCLUSION :: 8;
        TEXTURE_HEIGHTMAP :: 9;
        TEXTURE_SUBSURFACE_SCATTERING :: 10;
        TEXTURE_SUBSURFACE_TRANSMITTANCE :: 11;
        TEXTURE_BACKLIGHT :: 12;
        TEXTURE_REFRACTION :: 13;
        TEXTURE_DETAIL_MASK :: 14;
        TEXTURE_DETAIL_ALBEDO :: 15;
        TEXTURE_DETAIL_NORMAL :: 16;
        TEXTURE_ORM :: 17;
        TEXTURE_MAX :: 18;
    }

    TextureFilter :: enum s32 {
        TEXTURE_FILTER_NEAREST :: 0;
        TEXTURE_FILTER_LINEAR :: 1;
        TEXTURE_FILTER_NEAREST_WITH_MIPMAPS :: 2;
        TEXTURE_FILTER_LINEAR_WITH_MIPMAPS :: 3;
        TEXTURE_FILTER_NEAREST_WITH_MIPMAPS_ANISOTROPIC :: 4;
        TEXTURE_FILTER_LINEAR_WITH_MIPMAPS_ANISOTROPIC :: 5;
        TEXTURE_FILTER_MAX :: 6;
    }

    DetailUV :: enum s32 {
        DETAIL_UV_1 :: 0;
        DETAIL_UV_2 :: 1;
    }

    Transparency :: enum s32 {
        TRANSPARENCY_DISABLED :: 0;
        TRANSPARENCY_ALPHA :: 1;
        TRANSPARENCY_ALPHA_SCISSOR :: 2;
        TRANSPARENCY_ALPHA_HASH :: 3;
        TRANSPARENCY_ALPHA_DEPTH_PRE_PASS :: 4;
        TRANSPARENCY_MAX :: 5;
    }

    ShadingMode :: enum s32 {
        SHADING_MODE_UNSHADED :: 0;
        SHADING_MODE_PER_PIXEL :: 1;
        SHADING_MODE_PER_VERTEX :: 2;
        SHADING_MODE_MAX :: 3;
    }

    Feature :: enum s32 {
        FEATURE_EMISSION :: 0;
        FEATURE_NORMAL_MAPPING :: 1;
        FEATURE_RIM :: 2;
        FEATURE_CLEARCOAT :: 3;
        FEATURE_ANISOTROPY :: 4;
        FEATURE_AMBIENT_OCCLUSION :: 5;
        FEATURE_HEIGHT_MAPPING :: 6;
        FEATURE_SUBSURFACE_SCATTERING :: 7;
        FEATURE_SUBSURFACE_TRANSMITTANCE :: 8;
        FEATURE_BACKLIGHT :: 9;
        FEATURE_REFRACTION :: 10;
        FEATURE_DETAIL :: 11;
        FEATURE_MAX :: 12;
    }

    BlendMode :: enum s32 {
        BLEND_MODE_MIX :: 0;
        BLEND_MODE_ADD :: 1;
        BLEND_MODE_SUB :: 2;
        BLEND_MODE_MUL :: 3;
        BLEND_MODE_PREMULT_ALPHA :: 4;
    }

    AlphaAntiAliasing :: enum s32 {
        ALPHA_ANTIALIASING_OFF :: 0;
        ALPHA_ANTIALIASING_ALPHA_TO_COVERAGE :: 1;
        ALPHA_ANTIALIASING_ALPHA_TO_COVERAGE_AND_TO_ONE :: 2;
    }

    DepthDrawMode :: enum s32 {
        DEPTH_DRAW_OPAQUE_ONLY :: 0;
        DEPTH_DRAW_ALWAYS :: 1;
        DEPTH_DRAW_DISABLED :: 2;
    }

    CullMode :: enum s32 {
        CULL_BACK :: 0;
        CULL_FRONT :: 1;
        CULL_DISABLED :: 2;
    }

    Flags :: enum s32 {
        FLAG_DISABLE_DEPTH_TEST :: 0;
        FLAG_ALBEDO_FROM_VERTEX_COLOR :: 1;
        FLAG_SRGB_VERTEX_COLOR :: 2;
        FLAG_USE_POINT_SIZE :: 3;
        FLAG_FIXED_SIZE :: 4;
        FLAG_BILLBOARD_KEEP_SCALE :: 5;
        FLAG_UV1_USE_TRIPLANAR :: 6;
        FLAG_UV2_USE_TRIPLANAR :: 7;
        FLAG_UV1_USE_WORLD_TRIPLANAR :: 8;
        FLAG_UV2_USE_WORLD_TRIPLANAR :: 9;
        FLAG_AO_ON_UV2 :: 10;
        FLAG_EMISSION_ON_UV2 :: 11;
        FLAG_ALBEDO_TEXTURE_FORCE_SRGB :: 12;
        FLAG_DONT_RECEIVE_SHADOWS :: 13;
        FLAG_DISABLE_AMBIENT_LIGHT :: 14;
        FLAG_USE_SHADOW_TO_OPACITY :: 15;
        FLAG_USE_TEXTURE_REPEAT :: 16;
        FLAG_INVERT_HEIGHTMAP :: 17;
        FLAG_SUBSURFACE_MODE_SKIN :: 18;
        FLAG_PARTICLE_TRAILS_MODE :: 19;
        FLAG_ALBEDO_TEXTURE_MSDF :: 20;
        FLAG_DISABLE_FOG :: 21;
        FLAG_MAX :: 22;
    }

    DiffuseMode :: enum s32 {
        DIFFUSE_BURLEY :: 0;
        DIFFUSE_LAMBERT :: 1;
        DIFFUSE_LAMBERT_WRAP :: 2;
        DIFFUSE_TOON :: 3;
    }

    SpecularMode :: enum s32 {
        SPECULAR_SCHLICK_GGX :: 0;
        SPECULAR_TOON :: 1;
        SPECULAR_DISABLED :: 2;
    }

    BillboardMode :: enum s32 {
        BILLBOARD_DISABLED :: 0;
        BILLBOARD_ENABLED :: 1;
        BILLBOARD_FIXED_Y :: 2;
        BILLBOARD_PARTICLES :: 3;
    }

    TextureChannel :: enum s32 {
        TEXTURE_CHANNEL_RED :: 0;
        TEXTURE_CHANNEL_GREEN :: 1;
        TEXTURE_CHANNEL_BLUE :: 2;
        TEXTURE_CHANNEL_ALPHA :: 3;
        TEXTURE_CHANNEL_GRAYSCALE :: 4;
    }

    EmissionOperator :: enum s32 {
        EMISSION_OP_ADD :: 0;
        EMISSION_OP_MULTIPLY :: 1;
    }

    DistanceFadeMode :: enum s32 {
        DISTANCE_FADE_DISABLED :: 0;
        DISTANCE_FADE_PIXEL_ALPHA :: 1;
        DISTANCE_FADE_PIXEL_DITHER :: 2;
        DISTANCE_FADE_OBJECT_DITHER :: 3;
    }
}

BitMap :: struct { #as using base: OpaqueClass; } // 103

Bone2D :: struct { #as using base: OpaqueClass; } // 104

BoneAttachment3D :: struct { #as using base: OpaqueClass; } // 105

BoneMap :: struct { #as using base: OpaqueClass; } // 106

BoxContainer :: struct {  // 107

        #as using base: OpaqueClass;

    AlignmentMode :: enum s32 {
        ALIGNMENT_BEGIN :: 0;
        ALIGNMENT_CENTER :: 1;
        ALIGNMENT_END :: 2;
    }
}

BoxMesh :: struct { #as using base: OpaqueClass; } // 108

BoxOccluder3D :: struct { #as using base: OpaqueClass; } // 109

BoxShape3D :: struct { #as using base: OpaqueClass; } // 110

Button :: struct { #as using base: OpaqueClass; } // 111

ButtonGroup :: struct { #as using base: OpaqueClass; } // 112

CPUParticles2D :: struct {  // 113

        #as using base: OpaqueClass;

    DrawOrder :: enum s32 {
        DRAW_ORDER_INDEX :: 0;
        DRAW_ORDER_LIFETIME :: 1;
    }

    Parameter :: enum s32 {
        PARAM_INITIAL_LINEAR_VELOCITY :: 0;
        PARAM_ANGULAR_VELOCITY :: 1;
        PARAM_ORBIT_VELOCITY :: 2;
        PARAM_LINEAR_ACCEL :: 3;
        PARAM_RADIAL_ACCEL :: 4;
        PARAM_TANGENTIAL_ACCEL :: 5;
        PARAM_DAMPING :: 6;
        PARAM_ANGLE :: 7;
        PARAM_SCALE :: 8;
        PARAM_HUE_VARIATION :: 9;
        PARAM_ANIM_SPEED :: 10;
        PARAM_ANIM_OFFSET :: 11;
        PARAM_MAX :: 12;
    }

    ParticleFlags :: enum s32 {
        PARTICLE_FLAG_ALIGN_Y_TO_VELOCITY :: 0;
        PARTICLE_FLAG_ROTATE_Y :: 1;
        PARTICLE_FLAG_DISABLE_Z :: 2;
        PARTICLE_FLAG_MAX :: 3;
    }

    EmissionShape :: enum s32 {
        EMISSION_SHAPE_POINT :: 0;
        EMISSION_SHAPE_SPHERE :: 1;
        EMISSION_SHAPE_SPHERE_SURFACE :: 2;
        EMISSION_SHAPE_RECTANGLE :: 3;
        EMISSION_SHAPE_POINTS :: 4;
        EMISSION_SHAPE_DIRECTED_POINTS :: 5;
        EMISSION_SHAPE_MAX :: 6;
    }
}

CPUParticles3D :: struct {  // 114

        #as using base: OpaqueClass;

    DrawOrder :: enum s32 {
        DRAW_ORDER_INDEX :: 0;
        DRAW_ORDER_LIFETIME :: 1;
        DRAW_ORDER_VIEW_DEPTH :: 2;
    }

    Parameter :: enum s32 {
        PARAM_INITIAL_LINEAR_VELOCITY :: 0;
        PARAM_ANGULAR_VELOCITY :: 1;
        PARAM_ORBIT_VELOCITY :: 2;
        PARAM_LINEAR_ACCEL :: 3;
        PARAM_RADIAL_ACCEL :: 4;
        PARAM_TANGENTIAL_ACCEL :: 5;
        PARAM_DAMPING :: 6;
        PARAM_ANGLE :: 7;
        PARAM_SCALE :: 8;
        PARAM_HUE_VARIATION :: 9;
        PARAM_ANIM_SPEED :: 10;
        PARAM_ANIM_OFFSET :: 11;
        PARAM_MAX :: 12;
    }

    ParticleFlags :: enum s32 {
        PARTICLE_FLAG_ALIGN_Y_TO_VELOCITY :: 0;
        PARTICLE_FLAG_ROTATE_Y :: 1;
        PARTICLE_FLAG_DISABLE_Z :: 2;
        PARTICLE_FLAG_MAX :: 3;
    }

    EmissionShape :: enum s32 {
        EMISSION_SHAPE_POINT :: 0;
        EMISSION_SHAPE_SPHERE :: 1;
        EMISSION_SHAPE_SPHERE_SURFACE :: 2;
        EMISSION_SHAPE_BOX :: 3;
        EMISSION_SHAPE_POINTS :: 4;
        EMISSION_SHAPE_DIRECTED_POINTS :: 5;
        EMISSION_SHAPE_RING :: 6;
        EMISSION_SHAPE_MAX :: 7;
    }
}

CSGBox3D :: struct { #as using base: OpaqueClass; } // 115

CSGCombiner3D :: struct { #as using base: OpaqueClass; } // 116

CSGCylinder3D :: struct { #as using base: OpaqueClass; } // 117

CSGMesh3D :: struct { #as using base: OpaqueClass; } // 118

CSGPolygon3D :: struct {  // 119

        #as using base: OpaqueClass;

    Mode :: enum s32 {
        MODE_DEPTH :: 0;
        MODE_SPIN :: 1;
        MODE_PATH :: 2;
    }

    PathRotation :: enum s32 {
        PATH_ROTATION_POLYGON :: 0;
        PATH_ROTATION_PATH :: 1;
        PATH_ROTATION_PATH_FOLLOW :: 2;
    }

    PathIntervalType :: enum s32 {
        PATH_INTERVAL_DISTANCE :: 0;
        PATH_INTERVAL_SUBDIVIDE :: 1;
    }
}

CSGPrimitive3D :: struct { #as using base: OpaqueClass; } // 120

CSGShape3D :: struct {  // 121

        #as using base: OpaqueClass;

    Operation :: enum s32 {
        OPERATION_UNION :: 0;
        OPERATION_INTERSECTION :: 1;
        OPERATION_SUBTRACTION :: 2;
    }
}

CSGSphere3D :: struct { #as using base: OpaqueClass; } // 122

CSGTorus3D :: struct { #as using base: OpaqueClass; } // 123

CallbackTweener :: struct { #as using base: OpaqueClass; } // 124

Camera2D :: struct {  // 125

        #as using base: OpaqueClass;

    AnchorMode :: enum s32 {
        ANCHOR_MODE_FIXED_TOP_LEFT :: 0;
        ANCHOR_MODE_DRAG_CENTER :: 1;
    }

    Camera2DProcessCallback :: enum s32 {
        CAMERA2D_PROCESS_PHYSICS :: 0;
        CAMERA2D_PROCESS_IDLE :: 1;
    }
}

Camera3D :: struct {  // 126

        #as using base: OpaqueClass;

    ProjectionType :: enum s32 {
        PROJECTION_PERSPECTIVE :: 0;
        PROJECTION_ORTHOGONAL :: 1;
        PROJECTION_FRUSTUM :: 2;
    }

    KeepAspect :: enum s32 {
        KEEP_WIDTH :: 0;
        KEEP_HEIGHT :: 1;
    }

    DopplerTracking :: enum s32 {
        DOPPLER_TRACKING_DISABLED :: 0;
        DOPPLER_TRACKING_IDLE_STEP :: 1;
        DOPPLER_TRACKING_PHYSICS_STEP :: 2;
    }
}

CameraAttributes :: struct { #as using base: OpaqueClass; } // 127

CameraAttributesPhysical :: struct { #as using base: OpaqueClass; } // 128

CameraAttributesPractical :: struct { #as using base: OpaqueClass; } // 129

CameraFeed :: struct {  // 130

        #as using base: OpaqueClass;

    FeedDataType :: enum s32 {
        FEED_NOIMAGE :: 0;
        FEED_RGB :: 1;
        FEED_YCBCR :: 2;
        FEED_YCBCR_SEP :: 3;
        FEED_EXTERNAL :: 4;
    }

    FeedPosition :: enum s32 {
        FEED_UNSPECIFIED :: 0;
        FEED_FRONT :: 1;
        FEED_BACK :: 2;
    }
}

CameraServer :: struct {  // 131

        #as using base: OpaqueClass;

    FeedImage :: enum s32 {
        FEED_RGBA_IMAGE :: 0;
        FEED_YCBCR_IMAGE :: 0;
        FEED_Y_IMAGE :: 0;
        FEED_CBCR_IMAGE :: 1;
    }
}

CameraTexture :: struct { #as using base: OpaqueClass; } // 132

CanvasGroup :: struct { #as using base: OpaqueClass; } // 133

CanvasItem :: struct {  // 134

        #as using base: OpaqueClass;

    TextureFilter :: enum s32 {
        TEXTURE_FILTER_PARENT_NODE :: 0;
        TEXTURE_FILTER_NEAREST :: 1;
        TEXTURE_FILTER_LINEAR :: 2;
        TEXTURE_FILTER_NEAREST_WITH_MIPMAPS :: 3;
        TEXTURE_FILTER_LINEAR_WITH_MIPMAPS :: 4;
        TEXTURE_FILTER_NEAREST_WITH_MIPMAPS_ANISOTROPIC :: 5;
        TEXTURE_FILTER_LINEAR_WITH_MIPMAPS_ANISOTROPIC :: 6;
        TEXTURE_FILTER_MAX :: 7;
    }

    TextureRepeat :: enum s32 {
        TEXTURE_REPEAT_PARENT_NODE :: 0;
        TEXTURE_REPEAT_DISABLED :: 1;
        TEXTURE_REPEAT_ENABLED :: 2;
        TEXTURE_REPEAT_MIRROR :: 3;
        TEXTURE_REPEAT_MAX :: 4;
    }

    ClipChildrenMode :: enum s32 {
        CLIP_CHILDREN_DISABLED :: 0;
        CLIP_CHILDREN_ONLY :: 1;
        CLIP_CHILDREN_AND_DRAW :: 2;
        CLIP_CHILDREN_MAX :: 3;
    }
}

CanvasItemMaterial :: struct {  // 135

        #as using base: OpaqueClass;

    BlendMode :: enum s32 {
        BLEND_MODE_MIX :: 0;
        BLEND_MODE_ADD :: 1;
        BLEND_MODE_SUB :: 2;
        BLEND_MODE_MUL :: 3;
        BLEND_MODE_PREMULT_ALPHA :: 4;
    }

    LightMode :: enum s32 {
        LIGHT_MODE_NORMAL :: 0;
        LIGHT_MODE_UNSHADED :: 1;
        LIGHT_MODE_LIGHT_ONLY :: 2;
    }
}

CanvasLayer :: struct { #as using base: OpaqueClass; } // 136

CanvasModulate :: struct { #as using base: OpaqueClass; } // 137

CanvasTexture :: struct { #as using base: OpaqueClass; } // 138

CapsuleMesh :: struct { #as using base: OpaqueClass; } // 139

CapsuleShape2D :: struct { #as using base: OpaqueClass; } // 140

CapsuleShape3D :: struct { #as using base: OpaqueClass; } // 141

CenterContainer :: struct { #as using base: OpaqueClass; } // 142

CharFXTransform :: struct { #as using base: OpaqueClass; } // 143

CharacterBody2D :: struct {  // 144

        #as using base: OpaqueClass;

    MotionMode :: enum s32 {
        MOTION_MODE_GROUNDED :: 0;
        MOTION_MODE_FLOATING :: 1;
    }

    PlatformOnLeave :: enum s32 {
        PLATFORM_ON_LEAVE_ADD_VELOCITY :: 0;
        PLATFORM_ON_LEAVE_ADD_UPWARD_VELOCITY :: 1;
        PLATFORM_ON_LEAVE_DO_NOTHING :: 2;
    }
}

CharacterBody3D :: struct {  // 145

        #as using base: OpaqueClass;

    MotionMode :: enum s32 {
        MOTION_MODE_GROUNDED :: 0;
        MOTION_MODE_FLOATING :: 1;
    }

    PlatformOnLeave :: enum s32 {
        PLATFORM_ON_LEAVE_ADD_VELOCITY :: 0;
        PLATFORM_ON_LEAVE_ADD_UPWARD_VELOCITY :: 1;
        PLATFORM_ON_LEAVE_DO_NOTHING :: 2;
    }
}

CheckBox :: struct { #as using base: OpaqueClass; } // 146

CheckButton :: struct { #as using base: OpaqueClass; } // 147

CircleShape2D :: struct { #as using base: OpaqueClass; } // 148

ClassDB :: struct {  // 149

        #as using base: OpaqueClass;

    APIType :: enum s32 {
        API_CORE :: 0;
        API_EDITOR :: 1;
        API_EXTENSION :: 2;
        API_EDITOR_EXTENSION :: 3;
        API_NONE :: 4;
    }
}

CodeEdit :: struct {  // 150

        #as using base: OpaqueClass;

    CodeCompletionKind :: enum s32 {
        KIND_CLASS :: 0;
        KIND_FUNCTION :: 1;
        KIND_SIGNAL :: 2;
        KIND_VARIABLE :: 3;
        KIND_MEMBER :: 4;
        KIND_ENUM :: 5;
        KIND_CONSTANT :: 6;
        KIND_NODE_PATH :: 7;
        KIND_FILE_PATH :: 8;
        KIND_PLAIN_TEXT :: 9;
    }

    CodeCompletionLocation :: enum s32 {
        LOCATION_LOCAL :: 0;
        LOCATION_PARENT_MASK :: 256;
        LOCATION_OTHER_USER_CODE :: 512;
        LOCATION_OTHER :: 1024;
    }
}

CodeHighlighter :: struct { #as using base: OpaqueClass; } // 151

CollisionObject2D :: struct {  // 152

        #as using base: OpaqueClass;

    DisableMode :: enum s32 {
        DISABLE_MODE_REMOVE :: 0;
        DISABLE_MODE_MAKE_STATIC :: 1;
        DISABLE_MODE_KEEP_ACTIVE :: 2;
    }
}

CollisionObject3D :: struct {  // 153

        #as using base: OpaqueClass;

    DisableMode :: enum s32 {
        DISABLE_MODE_REMOVE :: 0;
        DISABLE_MODE_MAKE_STATIC :: 1;
        DISABLE_MODE_KEEP_ACTIVE :: 2;
    }
}

CollisionPolygon2D :: struct {  // 154

        #as using base: OpaqueClass;

    BuildMode :: enum s32 {
        BUILD_SOLIDS :: 0;
        BUILD_SEGMENTS :: 1;
    }
}

CollisionPolygon3D :: struct { #as using base: OpaqueClass; } // 155

CollisionShape2D :: struct { #as using base: OpaqueClass; } // 156

CollisionShape3D :: struct { #as using base: OpaqueClass; } // 157

ColorPalette :: struct { #as using base: OpaqueClass; } // 158

ColorPicker :: struct {  // 159

        #as using base: OpaqueClass;

    ColorModeType :: enum s32 {
        MODE_RGB :: 0;
        MODE_HSV :: 1;
        MODE_RAW :: 2;
        MODE_OKHSL :: 3;
    }

    PickerShapeType :: enum s32 {
        SHAPE_HSV_RECTANGLE :: 0;
        SHAPE_HSV_WHEEL :: 1;
        SHAPE_VHS_CIRCLE :: 2;
        SHAPE_OKHSL_CIRCLE :: 3;
        SHAPE_NONE :: 4;
    }
}

ColorPickerButton :: struct { #as using base: OpaqueClass; } // 160

ColorRect :: struct { #as using base: OpaqueClass; } // 161

Compositor :: struct { #as using base: OpaqueClass; } // 162

CompositorEffect :: struct {  // 163

        #as using base: OpaqueClass;

    EffectCallbackType :: enum s32 {
        EFFECT_CALLBACK_TYPE_PRE_OPAQUE :: 0;
        EFFECT_CALLBACK_TYPE_POST_OPAQUE :: 1;
        EFFECT_CALLBACK_TYPE_POST_SKY :: 2;
        EFFECT_CALLBACK_TYPE_PRE_TRANSPARENT :: 3;
        EFFECT_CALLBACK_TYPE_POST_TRANSPARENT :: 4;
        EFFECT_CALLBACK_TYPE_MAX :: 5;
    }
}

CompressedCubemap :: struct { #as using base: OpaqueClass; } // 164

CompressedCubemapArray :: struct { #as using base: OpaqueClass; } // 165

CompressedTexture2D :: struct { #as using base: OpaqueClass; } // 166

CompressedTexture2DArray :: struct { #as using base: OpaqueClass; } // 167

CompressedTexture3D :: struct { #as using base: OpaqueClass; } // 168

CompressedTextureLayered :: struct { #as using base: OpaqueClass; } // 169

ConcavePolygonShape2D :: struct { #as using base: OpaqueClass; } // 170

ConcavePolygonShape3D :: struct { #as using base: OpaqueClass; } // 171

ConeTwistJoint3D :: struct {  // 172

        #as using base: OpaqueClass;

    Param :: enum s32 {
        PARAM_SWING_SPAN :: 0;
        PARAM_TWIST_SPAN :: 1;
        PARAM_BIAS :: 2;
        PARAM_SOFTNESS :: 3;
        PARAM_RELAXATION :: 4;
        PARAM_MAX :: 5;
    }
}

ConfigFile :: struct { #as using base: OpaqueClass; } // 173

ConfirmationDialog :: struct { #as using base: OpaqueClass; } // 174

Container :: struct { #as using base: OpaqueClass; } // 175

Control :: struct {  // 176

        #as using base: OpaqueClass;

    FocusMode :: enum s32 {
        FOCUS_NONE :: 0;
        FOCUS_CLICK :: 1;
        FOCUS_ALL :: 2;
    }

    CursorShape :: enum s32 {
        CURSOR_ARROW :: 0;
        CURSOR_IBEAM :: 1;
        CURSOR_POINTING_HAND :: 2;
        CURSOR_CROSS :: 3;
        CURSOR_WAIT :: 4;
        CURSOR_BUSY :: 5;
        CURSOR_DRAG :: 6;
        CURSOR_CAN_DROP :: 7;
        CURSOR_FORBIDDEN :: 8;
        CURSOR_VSIZE :: 9;
        CURSOR_HSIZE :: 10;
        CURSOR_BDIAGSIZE :: 11;
        CURSOR_FDIAGSIZE :: 12;
        CURSOR_MOVE :: 13;
        CURSOR_VSPLIT :: 14;
        CURSOR_HSPLIT :: 15;
        CURSOR_HELP :: 16;
    }

    LayoutPreset :: enum s32 {
        PRESET_TOP_LEFT :: 0;
        PRESET_TOP_RIGHT :: 1;
        PRESET_BOTTOM_LEFT :: 2;
        PRESET_BOTTOM_RIGHT :: 3;
        PRESET_CENTER_LEFT :: 4;
        PRESET_CENTER_TOP :: 5;
        PRESET_CENTER_RIGHT :: 6;
        PRESET_CENTER_BOTTOM :: 7;
        PRESET_CENTER :: 8;
        PRESET_LEFT_WIDE :: 9;
        PRESET_TOP_WIDE :: 10;
        PRESET_RIGHT_WIDE :: 11;
        PRESET_BOTTOM_WIDE :: 12;
        PRESET_VCENTER_WIDE :: 13;
        PRESET_HCENTER_WIDE :: 14;
        PRESET_FULL_RECT :: 15;
    }

    LayoutPresetMode :: enum s32 {
        PRESET_MODE_MINSIZE :: 0;
        PRESET_MODE_KEEP_WIDTH :: 1;
        PRESET_MODE_KEEP_HEIGHT :: 2;
        PRESET_MODE_KEEP_SIZE :: 3;
    }

    SizeFlags :: enum u64 {
        SIZE_SHRINK_BEGIN :: 0;
        SIZE_FILL :: 1;
        SIZE_EXPAND :: 2;
        SIZE_EXPAND_FILL :: 3;
        SIZE_SHRINK_CENTER :: 4;
        SIZE_SHRINK_END :: 8;
    } @bitfield

    MouseFilter :: enum s32 {
        MOUSE_FILTER_STOP :: 0;
        MOUSE_FILTER_PASS :: 1;
        MOUSE_FILTER_IGNORE :: 2;
    }

    GrowDirection :: enum s32 {
        GROW_DIRECTION_BEGIN :: 0;
        GROW_DIRECTION_END :: 1;
        GROW_DIRECTION_BOTH :: 2;
    }

    Anchor :: enum s32 {
        ANCHOR_BEGIN :: 0;
        ANCHOR_END :: 1;
    }

    LayoutDirection :: enum s32 {
        LAYOUT_DIRECTION_INHERITED :: 0;
        LAYOUT_DIRECTION_APPLICATION_LOCALE :: 1;
        LAYOUT_DIRECTION_LTR :: 2;
        LAYOUT_DIRECTION_RTL :: 3;
        LAYOUT_DIRECTION_SYSTEM_LOCALE :: 4;
        LAYOUT_DIRECTION_MAX :: 5;
        LAYOUT_DIRECTION_LOCALE :: 1;
    }

    TextDirection :: enum s32 {
        TEXT_DIRECTION_INHERITED :: 3;
        TEXT_DIRECTION_AUTO :: 0;
        TEXT_DIRECTION_LTR :: 1;
        TEXT_DIRECTION_RTL :: 2;
    }
}

ConvexPolygonShape2D :: struct { #as using base: OpaqueClass; } // 177

ConvexPolygonShape3D :: struct { #as using base: OpaqueClass; } // 178

Crypto :: struct { #as using base: OpaqueClass; } // 179

CryptoKey :: struct { #as using base: OpaqueClass; } // 180

Cubemap :: struct { #as using base: OpaqueClass; } // 181

CubemapArray :: struct { #as using base: OpaqueClass; } // 182

Curve :: struct {  // 183

        #as using base: OpaqueClass;

    TangentMode :: enum s32 {
        TANGENT_FREE :: 0;
        TANGENT_LINEAR :: 1;
        TANGENT_MODE_COUNT :: 2;
    }
}

Curve2D :: struct { #as using base: OpaqueClass; } // 184

Curve3D :: struct { #as using base: OpaqueClass; } // 185

CurveTexture :: struct {  // 186

        #as using base: OpaqueClass;

    TextureMode :: enum s32 {
        TEXTURE_MODE_RGB :: 0;
        TEXTURE_MODE_RED :: 1;
    }
}

CurveXYZTexture :: struct { #as using base: OpaqueClass; } // 187

CylinderMesh :: struct { #as using base: OpaqueClass; } // 188

CylinderShape3D :: struct { #as using base: OpaqueClass; } // 189

DTLSServer :: struct { #as using base: OpaqueClass; } // 190

DampedSpringJoint2D :: struct { #as using base: OpaqueClass; } // 191

Decal :: struct {  // 192

        #as using base: OpaqueClass;

    DecalTexture :: enum s32 {
        TEXTURE_ALBEDO :: 0;
        TEXTURE_NORMAL :: 1;
        TEXTURE_ORM :: 2;
        TEXTURE_EMISSION :: 3;
        TEXTURE_MAX :: 4;
    }
}

DirAccess :: struct { #as using base: OpaqueClass; } // 193

DirectionalLight2D :: struct { #as using base: OpaqueClass; } // 194

DirectionalLight3D :: struct {  // 195

        #as using base: OpaqueClass;

    ShadowMode :: enum s32 {
        SHADOW_ORTHOGONAL :: 0;
        SHADOW_PARALLEL_2_SPLITS :: 1;
        SHADOW_PARALLEL_4_SPLITS :: 2;
    }

    SkyMode :: enum s32 {
        SKY_MODE_LIGHT_AND_SKY :: 0;
        SKY_MODE_LIGHT_ONLY :: 1;
        SKY_MODE_SKY_ONLY :: 2;
    }
}

DisplayServer :: struct {  // 196

        #as using base: OpaqueClass;

    Feature :: enum s32 {
        FEATURE_GLOBAL_MENU :: 0;
        FEATURE_SUBWINDOWS :: 1;
        FEATURE_TOUCHSCREEN :: 2;
        FEATURE_MOUSE :: 3;
        FEATURE_MOUSE_WARP :: 4;
        FEATURE_CLIPBOARD :: 5;
        FEATURE_VIRTUAL_KEYBOARD :: 6;
        FEATURE_CURSOR_SHAPE :: 7;
        FEATURE_CUSTOM_CURSOR_SHAPE :: 8;
        FEATURE_NATIVE_DIALOG :: 9;
        FEATURE_IME :: 10;
        FEATURE_WINDOW_TRANSPARENCY :: 11;
        FEATURE_HIDPI :: 12;
        FEATURE_ICON :: 13;
        FEATURE_NATIVE_ICON :: 14;
        FEATURE_ORIENTATION :: 15;
        FEATURE_SWAP_BUFFERS :: 16;
        FEATURE_CLIPBOARD_PRIMARY :: 18;
        FEATURE_TEXT_TO_SPEECH :: 19;
        FEATURE_EXTEND_TO_TITLE :: 20;
        FEATURE_SCREEN_CAPTURE :: 21;
        FEATURE_STATUS_INDICATOR :: 22;
        FEATURE_NATIVE_HELP :: 23;
        FEATURE_NATIVE_DIALOG_INPUT :: 24;
        FEATURE_NATIVE_DIALOG_FILE :: 25;
        FEATURE_NATIVE_DIALOG_FILE_EXTRA :: 26;
        FEATURE_WINDOW_DRAG :: 27;
        FEATURE_SCREEN_EXCLUDE_FROM_CAPTURE :: 28;
        FEATURE_WINDOW_EMBEDDING :: 29;
        FEATURE_NATIVE_DIALOG_FILE_MIME :: 30;
        FEATURE_EMOJI_AND_SYMBOL_PICKER :: 31;
    }

    MouseMode :: enum s32 {
        MOUSE_MODE_VISIBLE :: 0;
        MOUSE_MODE_HIDDEN :: 1;
        MOUSE_MODE_CAPTURED :: 2;
        MOUSE_MODE_CONFINED :: 3;
        MOUSE_MODE_CONFINED_HIDDEN :: 4;
        MOUSE_MODE_MAX :: 5;
    }

    ScreenOrientation :: enum s32 {
        SCREEN_LANDSCAPE :: 0;
        SCREEN_PORTRAIT :: 1;
        SCREEN_REVERSE_LANDSCAPE :: 2;
        SCREEN_REVERSE_PORTRAIT :: 3;
        SCREEN_SENSOR_LANDSCAPE :: 4;
        SCREEN_SENSOR_PORTRAIT :: 5;
        SCREEN_SENSOR :: 6;
    }

    VirtualKeyboardType :: enum s32 {
        KEYBOARD_TYPE_DEFAULT :: 0;
        KEYBOARD_TYPE_MULTILINE :: 1;
        KEYBOARD_TYPE_NUMBER :: 2;
        KEYBOARD_TYPE_NUMBER_DECIMAL :: 3;
        KEYBOARD_TYPE_PHONE :: 4;
        KEYBOARD_TYPE_EMAIL_ADDRESS :: 5;
        KEYBOARD_TYPE_PASSWORD :: 6;
        KEYBOARD_TYPE_URL :: 7;
    }

    CursorShape :: enum s32 {
        CURSOR_ARROW :: 0;
        CURSOR_IBEAM :: 1;
        CURSOR_POINTING_HAND :: 2;
        CURSOR_CROSS :: 3;
        CURSOR_WAIT :: 4;
        CURSOR_BUSY :: 5;
        CURSOR_DRAG :: 6;
        CURSOR_CAN_DROP :: 7;
        CURSOR_FORBIDDEN :: 8;
        CURSOR_VSIZE :: 9;
        CURSOR_HSIZE :: 10;
        CURSOR_BDIAGSIZE :: 11;
        CURSOR_FDIAGSIZE :: 12;
        CURSOR_MOVE :: 13;
        CURSOR_VSPLIT :: 14;
        CURSOR_HSPLIT :: 15;
        CURSOR_HELP :: 16;
        CURSOR_MAX :: 17;
    }

    FileDialogMode :: enum s32 {
        FILE_DIALOG_MODE_OPEN_FILE :: 0;
        FILE_DIALOG_MODE_OPEN_FILES :: 1;
        FILE_DIALOG_MODE_OPEN_DIR :: 2;
        FILE_DIALOG_MODE_OPEN_ANY :: 3;
        FILE_DIALOG_MODE_SAVE_FILE :: 4;
    }

    WindowMode :: enum s32 {
        WINDOW_MODE_WINDOWED :: 0;
        WINDOW_MODE_MINIMIZED :: 1;
        WINDOW_MODE_MAXIMIZED :: 2;
        WINDOW_MODE_FULLSCREEN :: 3;
        WINDOW_MODE_EXCLUSIVE_FULLSCREEN :: 4;
    }

    WindowFlags :: enum s32 {
        WINDOW_FLAG_RESIZE_DISABLED :: 0;
        WINDOW_FLAG_BORDERLESS :: 1;
        WINDOW_FLAG_ALWAYS_ON_TOP :: 2;
        WINDOW_FLAG_TRANSPARENT :: 3;
        WINDOW_FLAG_NO_FOCUS :: 4;
        WINDOW_FLAG_POPUP :: 5;
        WINDOW_FLAG_EXTEND_TO_TITLE :: 6;
        WINDOW_FLAG_MOUSE_PASSTHROUGH :: 7;
        WINDOW_FLAG_SHARP_CORNERS :: 8;
        WINDOW_FLAG_EXCLUDE_FROM_CAPTURE :: 9;
        WINDOW_FLAG_MAX :: 10;
    }

    WindowEvent :: enum s32 {
        WINDOW_EVENT_MOUSE_ENTER :: 0;
        WINDOW_EVENT_MOUSE_EXIT :: 1;
        WINDOW_EVENT_FOCUS_IN :: 2;
        WINDOW_EVENT_FOCUS_OUT :: 3;
        WINDOW_EVENT_CLOSE_REQUEST :: 4;
        WINDOW_EVENT_GO_BACK_REQUEST :: 5;
        WINDOW_EVENT_DPI_CHANGE :: 6;
        WINDOW_EVENT_TITLEBAR_CHANGE :: 7;
    }

    WindowResizeEdge :: enum s32 {
        WINDOW_EDGE_TOP_LEFT :: 0;
        WINDOW_EDGE_TOP :: 1;
        WINDOW_EDGE_TOP_RIGHT :: 2;
        WINDOW_EDGE_LEFT :: 3;
        WINDOW_EDGE_RIGHT :: 4;
        WINDOW_EDGE_BOTTOM_LEFT :: 5;
        WINDOW_EDGE_BOTTOM :: 6;
        WINDOW_EDGE_BOTTOM_RIGHT :: 7;
        WINDOW_EDGE_MAX :: 8;
    }

    VSyncMode :: enum s32 {
        VSYNC_DISABLED :: 0;
        VSYNC_ENABLED :: 1;
        VSYNC_ADAPTIVE :: 2;
        VSYNC_MAILBOX :: 3;
    }

    HandleType :: enum s32 {
        DISPLAY_HANDLE :: 0;
        WINDOW_HANDLE :: 1;
        WINDOW_VIEW :: 2;
        OPENGL_CONTEXT :: 3;
        EGL_DISPLAY :: 4;
        EGL_CONFIG :: 5;
    }

    TTSUtteranceEvent :: enum s32 {
        TTS_UTTERANCE_STARTED :: 0;
        TTS_UTTERANCE_ENDED :: 1;
        TTS_UTTERANCE_CANCELED :: 2;
        TTS_UTTERANCE_BOUNDARY :: 3;
    }
}

ENetConnection :: struct {  // 197

        #as using base: OpaqueClass;

    CompressionMode :: enum s32 {
        COMPRESS_NONE :: 0;
        COMPRESS_RANGE_CODER :: 1;
        COMPRESS_FASTLZ :: 2;
        COMPRESS_ZLIB :: 3;
        COMPRESS_ZSTD :: 4;
    }

    EventType :: enum s32 {
        EVENT_ERROR :: -1;
        EVENT_NONE :: 0;
        EVENT_CONNECT :: 1;
        EVENT_DISCONNECT :: 2;
        EVENT_RECEIVE :: 3;
    }

    HostStatistic :: enum s32 {
        HOST_TOTAL_SENT_DATA :: 0;
        HOST_TOTAL_SENT_PACKETS :: 1;
        HOST_TOTAL_RECEIVED_DATA :: 2;
        HOST_TOTAL_RECEIVED_PACKETS :: 3;
    }
}

ENetMultiplayerPeer :: struct { #as using base: OpaqueClass; } // 198

ENetPacketPeer :: struct {  // 199

        #as using base: OpaqueClass;

    PeerState :: enum s32 {
        STATE_DISCONNECTED :: 0;
        STATE_CONNECTING :: 1;
        STATE_ACKNOWLEDGING_CONNECT :: 2;
        STATE_CONNECTION_PENDING :: 3;
        STATE_CONNECTION_SUCCEEDED :: 4;
        STATE_CONNECTED :: 5;
        STATE_DISCONNECT_LATER :: 6;
        STATE_DISCONNECTING :: 7;
        STATE_ACKNOWLEDGING_DISCONNECT :: 8;
        STATE_ZOMBIE :: 9;
    }

    PeerStatistic :: enum s32 {
        PEER_PACKET_LOSS :: 0;
        PEER_PACKET_LOSS_VARIANCE :: 1;
        PEER_PACKET_LOSS_EPOCH :: 2;
        PEER_ROUND_TRIP_TIME :: 3;
        PEER_ROUND_TRIP_TIME_VARIANCE :: 4;
        PEER_LAST_ROUND_TRIP_TIME :: 5;
        PEER_LAST_ROUND_TRIP_TIME_VARIANCE :: 6;
        PEER_PACKET_THROTTLE :: 7;
        PEER_PACKET_THROTTLE_LIMIT :: 8;
        PEER_PACKET_THROTTLE_COUNTER :: 9;
        PEER_PACKET_THROTTLE_EPOCH :: 10;
        PEER_PACKET_THROTTLE_ACCELERATION :: 11;
        PEER_PACKET_THROTTLE_DECELERATION :: 12;
        PEER_PACKET_THROTTLE_INTERVAL :: 13;
    }
}

EditorCommandPalette :: struct { #as using base: OpaqueClass; } // 200

EditorContextMenuPlugin :: struct {  // 201

        #as using base: OpaqueClass;

    ContextMenuSlot :: enum s32 {
        CONTEXT_SLOT_SCENE_TREE :: 0;
        CONTEXT_SLOT_FILESYSTEM :: 1;
        CONTEXT_SLOT_SCRIPT_EDITOR :: 2;
        CONTEXT_SLOT_FILESYSTEM_CREATE :: 3;
        CONTEXT_SLOT_SCRIPT_EDITOR_CODE :: 4;
        CONTEXT_SLOT_SCENE_TABS :: 5;
        CONTEXT_SLOT_2D_EDITOR :: 6;
    }
}

EditorDebuggerPlugin :: struct { #as using base: OpaqueClass; } // 202

EditorDebuggerSession :: struct { #as using base: OpaqueClass; } // 203

EditorExportPlatform :: struct {  // 204

        #as using base: OpaqueClass;

    ExportMessageType :: enum s32 {
        EXPORT_MESSAGE_NONE :: 0;
        EXPORT_MESSAGE_INFO :: 1;
        EXPORT_MESSAGE_WARNING :: 2;
        EXPORT_MESSAGE_ERROR :: 3;
    }

    DebugFlags :: enum u64 {
        DEBUG_FLAG_DUMB_CLIENT :: 1;
        DEBUG_FLAG_REMOTE_DEBUG :: 2;
        DEBUG_FLAG_REMOTE_DEBUG_LOCALHOST :: 4;
        DEBUG_FLAG_VIEW_COLLISIONS :: 8;
        DEBUG_FLAG_VIEW_NAVIGATION :: 16;
    } @bitfield
}

EditorExportPlatformAndroid :: struct { #as using base: OpaqueClass; } // 205

EditorExportPlatformExtension :: struct { #as using base: OpaqueClass; } // 206

EditorExportPlatformIOS :: struct { #as using base: OpaqueClass; } // 207

EditorExportPlatformLinuxBSD :: struct { #as using base: OpaqueClass; } // 208

EditorExportPlatformMacOS :: struct { #as using base: OpaqueClass; } // 209

EditorExportPlatformPC :: struct { #as using base: OpaqueClass; } // 210

EditorExportPlatformWeb :: struct { #as using base: OpaqueClass; } // 211

EditorExportPlatformWindows :: struct { #as using base: OpaqueClass; } // 212

EditorExportPlugin :: struct { #as using base: OpaqueClass; } // 213

EditorExportPreset :: struct {  // 214

        #as using base: OpaqueClass;

    ExportFilter :: enum s32 {
        EXPORT_ALL_RESOURCES :: 0;
        EXPORT_SELECTED_SCENES :: 1;
        EXPORT_SELECTED_RESOURCES :: 2;
        EXCLUDE_SELECTED_RESOURCES :: 3;
        EXPORT_CUSTOMIZED :: 4;
    }

    FileExportMode :: enum s32 {
        MODE_FILE_NOT_CUSTOMIZED :: 0;
        MODE_FILE_STRIP :: 1;
        MODE_FILE_KEEP :: 2;
        MODE_FILE_REMOVE :: 3;
    }

    ScriptExportMode :: enum s32 {
        MODE_SCRIPT_TEXT :: 0;
        MODE_SCRIPT_BINARY_TOKENS :: 1;
        MODE_SCRIPT_BINARY_TOKENS_COMPRESSED :: 2;
    }
}

EditorFeatureProfile :: struct {  // 215

        #as using base: OpaqueClass;

    Feature :: enum s32 {
        FEATURE_3D :: 0;
        FEATURE_SCRIPT :: 1;
        FEATURE_ASSET_LIB :: 2;
        FEATURE_SCENE_TREE :: 3;
        FEATURE_NODE_DOCK :: 4;
        FEATURE_FILESYSTEM_DOCK :: 5;
        FEATURE_IMPORT_DOCK :: 6;
        FEATURE_HISTORY_DOCK :: 7;
        FEATURE_GAME :: 8;
        FEATURE_MAX :: 9;
    }
}

EditorFileDialog :: struct {  // 216

        #as using base: OpaqueClass;

    FileMode :: enum s32 {
        FILE_MODE_OPEN_FILE :: 0;
        FILE_MODE_OPEN_FILES :: 1;
        FILE_MODE_OPEN_DIR :: 2;
        FILE_MODE_OPEN_ANY :: 3;
        FILE_MODE_SAVE_FILE :: 4;
    }

    Access :: enum s32 {
        ACCESS_RESOURCES :: 0;
        ACCESS_USERDATA :: 1;
        ACCESS_FILESYSTEM :: 2;
    }

    DisplayMode :: enum s32 {
        DISPLAY_THUMBNAILS :: 0;
        DISPLAY_LIST :: 1;
    }
}

EditorFileSystem :: struct { #as using base: OpaqueClass; } // 217

EditorFileSystemDirectory :: struct { #as using base: OpaqueClass; } // 218

EditorFileSystemImportFormatSupportQuery :: struct { #as using base: OpaqueClass; } // 219

EditorImportPlugin :: struct { #as using base: OpaqueClass; } // 220

EditorInspector :: struct { #as using base: OpaqueClass; } // 221

EditorInspectorPlugin :: struct { #as using base: OpaqueClass; } // 222

EditorInterface :: struct { #as using base: OpaqueClass; } // 223

EditorNode3DGizmo :: struct { #as using base: OpaqueClass; } // 224

EditorNode3DGizmoPlugin :: struct { #as using base: OpaqueClass; } // 225

EditorPaths :: struct { #as using base: OpaqueClass; } // 226

EditorPlugin :: struct {  // 227

        #as using base: OpaqueClass;

    CustomControlContainer :: enum s32 {
        CONTAINER_TOOLBAR :: 0;
        CONTAINER_SPATIAL_EDITOR_MENU :: 1;
        CONTAINER_SPATIAL_EDITOR_SIDE_LEFT :: 2;
        CONTAINER_SPATIAL_EDITOR_SIDE_RIGHT :: 3;
        CONTAINER_SPATIAL_EDITOR_BOTTOM :: 4;
        CONTAINER_CANVAS_EDITOR_MENU :: 5;
        CONTAINER_CANVAS_EDITOR_SIDE_LEFT :: 6;
        CONTAINER_CANVAS_EDITOR_SIDE_RIGHT :: 7;
        CONTAINER_CANVAS_EDITOR_BOTTOM :: 8;
        CONTAINER_INSPECTOR_BOTTOM :: 9;
        CONTAINER_PROJECT_SETTING_TAB_LEFT :: 10;
        CONTAINER_PROJECT_SETTING_TAB_RIGHT :: 11;
    }

    DockSlot :: enum s32 {
        DOCK_SLOT_LEFT_UL :: 0;
        DOCK_SLOT_LEFT_BL :: 1;
        DOCK_SLOT_LEFT_UR :: 2;
        DOCK_SLOT_LEFT_BR :: 3;
        DOCK_SLOT_RIGHT_UL :: 4;
        DOCK_SLOT_RIGHT_BL :: 5;
        DOCK_SLOT_RIGHT_UR :: 6;
        DOCK_SLOT_RIGHT_BR :: 7;
        DOCK_SLOT_MAX :: 8;
    }

    AfterGUIInput :: enum s32 {
        AFTER_GUI_INPUT_PASS :: 0;
        AFTER_GUI_INPUT_STOP :: 1;
        AFTER_GUI_INPUT_CUSTOM :: 2;
    }
}

EditorProperty :: struct { #as using base: OpaqueClass; } // 228

EditorResourceConversionPlugin :: struct { #as using base: OpaqueClass; } // 229

EditorResourcePicker :: struct { #as using base: OpaqueClass; } // 230

EditorResourcePreview :: struct { #as using base: OpaqueClass; } // 231

EditorResourcePreviewGenerator :: struct { #as using base: OpaqueClass; } // 232

EditorResourceTooltipPlugin :: struct { #as using base: OpaqueClass; } // 233

EditorSceneFormatImporter :: struct { #as using base: OpaqueClass; } // 234

EditorSceneFormatImporterBlend :: struct { #as using base: OpaqueClass; } // 235

EditorSceneFormatImporterFBX2GLTF :: struct { #as using base: OpaqueClass; } // 236

EditorSceneFormatImporterGLTF :: struct { #as using base: OpaqueClass; } // 237

EditorSceneFormatImporterUFBX :: struct { #as using base: OpaqueClass; } // 238

EditorScenePostImport :: struct { #as using base: OpaqueClass; } // 239

EditorScenePostImportPlugin :: struct {  // 240

        #as using base: OpaqueClass;

    InternalImportCategory :: enum s32 {
        INTERNAL_IMPORT_CATEGORY_NODE :: 0;
        INTERNAL_IMPORT_CATEGORY_MESH_3D_NODE :: 1;
        INTERNAL_IMPORT_CATEGORY_MESH :: 2;
        INTERNAL_IMPORT_CATEGORY_MATERIAL :: 3;
        INTERNAL_IMPORT_CATEGORY_ANIMATION :: 4;
        INTERNAL_IMPORT_CATEGORY_ANIMATION_NODE :: 5;
        INTERNAL_IMPORT_CATEGORY_SKELETON_3D_NODE :: 6;
        INTERNAL_IMPORT_CATEGORY_MAX :: 7;
    }
}

EditorScript :: struct { #as using base: OpaqueClass; } // 241

EditorScriptPicker :: struct { #as using base: OpaqueClass; } // 242

EditorSelection :: struct { #as using base: OpaqueClass; } // 243

EditorSettings :: struct { #as using base: OpaqueClass; } // 244

EditorSpinSlider :: struct { #as using base: OpaqueClass; } // 245

EditorSyntaxHighlighter :: struct { #as using base: OpaqueClass; } // 246

EditorToaster :: struct {  // 247

        #as using base: OpaqueClass;

    Severity :: enum s32 {
        SEVERITY_INFO :: 0;
        SEVERITY_WARNING :: 1;
        SEVERITY_ERROR :: 2;
    }
}

EditorTranslationParserPlugin :: struct { #as using base: OpaqueClass; } // 248

EditorUndoRedoManager :: struct {  // 249

        #as using base: OpaqueClass;

    SpecialHistory :: enum s32 {
        GLOBAL_HISTORY :: 0;
        REMOTE_HISTORY :: -9;
        INVALID_HISTORY :: -99;
    }
}

EditorVCSInterface :: struct {  // 250

        #as using base: OpaqueClass;

    ChangeType :: enum s32 {
        CHANGE_TYPE_NEW :: 0;
        CHANGE_TYPE_MODIFIED :: 1;
        CHANGE_TYPE_RENAMED :: 2;
        CHANGE_TYPE_DELETED :: 3;
        CHANGE_TYPE_TYPECHANGE :: 4;
        CHANGE_TYPE_UNMERGED :: 5;
    }

    TreeArea :: enum s32 {
        TREE_AREA_COMMIT :: 0;
        TREE_AREA_STAGED :: 1;
        TREE_AREA_UNSTAGED :: 2;
    }
}

EncodedObjectAsID :: struct { #as using base: OpaqueClass; } // 251

Engine :: struct { #as using base: OpaqueClass; } // 252

EngineDebugger :: struct { #as using base: OpaqueClass; } // 253

EngineProfiler :: struct { #as using base: OpaqueClass; } // 254

Environment :: struct {  // 255

        #as using base: OpaqueClass;

    BGMode :: enum s32 {
        BG_CLEAR_COLOR :: 0;
        BG_COLOR :: 1;
        BG_SKY :: 2;
        BG_CANVAS :: 3;
        BG_KEEP :: 4;
        BG_CAMERA_FEED :: 5;
        BG_MAX :: 6;
    }

    AmbientSource :: enum s32 {
        AMBIENT_SOURCE_BG :: 0;
        AMBIENT_SOURCE_DISABLED :: 1;
        AMBIENT_SOURCE_COLOR :: 2;
        AMBIENT_SOURCE_SKY :: 3;
    }

    ReflectionSource :: enum s32 {
        REFLECTION_SOURCE_BG :: 0;
        REFLECTION_SOURCE_DISABLED :: 1;
        REFLECTION_SOURCE_SKY :: 2;
    }

    ToneMapper :: enum s32 {
        TONE_MAPPER_LINEAR :: 0;
        TONE_MAPPER_REINHARDT :: 1;
        TONE_MAPPER_FILMIC :: 2;
        TONE_MAPPER_ACES :: 3;
        TONE_MAPPER_AGX :: 4;
    }

    GlowBlendMode :: enum s32 {
        GLOW_BLEND_MODE_ADDITIVE :: 0;
        GLOW_BLEND_MODE_SCREEN :: 1;
        GLOW_BLEND_MODE_SOFTLIGHT :: 2;
        GLOW_BLEND_MODE_REPLACE :: 3;
        GLOW_BLEND_MODE_MIX :: 4;
    }

    FogMode :: enum s32 {
        FOG_MODE_EXPONENTIAL :: 0;
        FOG_MODE_DEPTH :: 1;
    }

    SDFGIYScale :: enum s32 {
        SDFGI_Y_SCALE_50_PERCENT :: 0;
        SDFGI_Y_SCALE_75_PERCENT :: 1;
        SDFGI_Y_SCALE_100_PERCENT :: 2;
    }
}

Expression :: struct { #as using base: OpaqueClass; } // 256

ExternalTexture :: struct { #as using base: OpaqueClass; } // 257

FBXDocument :: struct { #as using base: OpaqueClass; } // 258

FBXState :: struct { #as using base: OpaqueClass; } // 259

FastNoiseLite :: struct {  // 260

        #as using base: OpaqueClass;

    NoiseType :: enum s32 {
        TYPE_VALUE :: 5;
        TYPE_VALUE_CUBIC :: 4;
        TYPE_PERLIN :: 3;
        TYPE_CELLULAR :: 2;
        TYPE_SIMPLEX :: 0;
        TYPE_SIMPLEX_SMOOTH :: 1;
    }

    FractalType :: enum s32 {
        FRACTAL_NONE :: 0;
        FRACTAL_FBM :: 1;
        FRACTAL_RIDGED :: 2;
        FRACTAL_PING_PONG :: 3;
    }

    CellularDistanceFunction :: enum s32 {
        DISTANCE_EUCLIDEAN :: 0;
        DISTANCE_EUCLIDEAN_SQUARED :: 1;
        DISTANCE_MANHATTAN :: 2;
        DISTANCE_HYBRID :: 3;
    }

    CellularReturnType :: enum s32 {
        RETURN_CELL_VALUE :: 0;
        RETURN_DISTANCE :: 1;
        RETURN_DISTANCE2 :: 2;
        RETURN_DISTANCE2_ADD :: 3;
        RETURN_DISTANCE2_SUB :: 4;
        RETURN_DISTANCE2_MUL :: 5;
        RETURN_DISTANCE2_DIV :: 6;
    }

    DomainWarpType :: enum s32 {
        DOMAIN_WARP_SIMPLEX :: 0;
        DOMAIN_WARP_SIMPLEX_REDUCED :: 1;
        DOMAIN_WARP_BASIC_GRID :: 2;
    }

    DomainWarpFractalType :: enum s32 {
        DOMAIN_WARP_FRACTAL_NONE :: 0;
        DOMAIN_WARP_FRACTAL_PROGRESSIVE :: 1;
        DOMAIN_WARP_FRACTAL_INDEPENDENT :: 2;
    }
}

FileAccess :: struct {  // 261

        #as using base: OpaqueClass;

    ModeFlags :: enum s32 {
        READ :: 1;
        WRITE :: 2;
        READ_WRITE :: 3;
        WRITE_READ :: 7;
    }

    CompressionMode :: enum s32 {
        COMPRESSION_FASTLZ :: 0;
        COMPRESSION_DEFLATE :: 1;
        COMPRESSION_ZSTD :: 2;
        COMPRESSION_GZIP :: 3;
        COMPRESSION_BROTLI :: 4;
    }

    UnixPermissionFlags :: enum u64 {
        UNIX_READ_OWNER :: 256;
        UNIX_WRITE_OWNER :: 128;
        UNIX_EXECUTE_OWNER :: 64;
        UNIX_READ_GROUP :: 32;
        UNIX_WRITE_GROUP :: 16;
        UNIX_EXECUTE_GROUP :: 8;
        UNIX_READ_OTHER :: 4;
        UNIX_WRITE_OTHER :: 2;
        UNIX_EXECUTE_OTHER :: 1;
        UNIX_SET_USER_ID :: 2048;
        UNIX_SET_GROUP_ID :: 1024;
        UNIX_RESTRICTED_DELETE :: 512;
    } @bitfield
}

FileDialog :: struct {  // 262

        #as using base: OpaqueClass;

    FileMode :: enum s32 {
        FILE_MODE_OPEN_FILE :: 0;
        FILE_MODE_OPEN_FILES :: 1;
        FILE_MODE_OPEN_DIR :: 2;
        FILE_MODE_OPEN_ANY :: 3;
        FILE_MODE_SAVE_FILE :: 4;
    }

    Access :: enum s32 {
        ACCESS_RESOURCES :: 0;
        ACCESS_USERDATA :: 1;
        ACCESS_FILESYSTEM :: 2;
    }
}

FileSystemDock :: struct { #as using base: OpaqueClass; } // 263

FlowContainer :: struct {  // 264

        #as using base: OpaqueClass;

    AlignmentMode :: enum s32 {
        ALIGNMENT_BEGIN :: 0;
        ALIGNMENT_CENTER :: 1;
        ALIGNMENT_END :: 2;
    }

    LastWrapAlignmentMode :: enum s32 {
        LAST_WRAP_ALIGNMENT_INHERIT :: 0;
        LAST_WRAP_ALIGNMENT_BEGIN :: 1;
        LAST_WRAP_ALIGNMENT_CENTER :: 2;
        LAST_WRAP_ALIGNMENT_END :: 3;
    }
}

FogMaterial :: struct { #as using base: OpaqueClass; } // 265

FogVolume :: struct { #as using base: OpaqueClass; } // 266

Font :: struct { #as using base: OpaqueClass; } // 267

FontFile :: struct { #as using base: OpaqueClass; } // 268

FontVariation :: struct { #as using base: OpaqueClass; } // 269

FramebufferCacheRD :: struct { #as using base: OpaqueClass; } // 270

GDExtension :: struct {  // 271

        #as using base: OpaqueClass;

    InitializationLevel :: enum s32 {
        INITIALIZATION_LEVEL_CORE :: 0;
        INITIALIZATION_LEVEL_SERVERS :: 1;
        INITIALIZATION_LEVEL_SCENE :: 2;
        INITIALIZATION_LEVEL_EDITOR :: 3;
    }
}

GDExtensionManager :: struct {  // 272

        #as using base: OpaqueClass;

    LoadStatus :: enum s32 {
        LOAD_STATUS_OK :: 0;
        LOAD_STATUS_FAILED :: 1;
        LOAD_STATUS_ALREADY_LOADED :: 2;
        LOAD_STATUS_NOT_LOADED :: 3;
        LOAD_STATUS_NEEDS_RESTART :: 4;
    }
}

GDScript :: struct { #as using base: OpaqueClass; } // 273

GDScriptSyntaxHighlighter :: struct { #as using base: OpaqueClass; } // 274

GLTFAccessor :: struct {  // 275

        #as using base: OpaqueClass;

    GLTFAccessorType :: enum s32 {
        TYPE_SCALAR :: 0;
        TYPE_VEC2 :: 1;
        TYPE_VEC3 :: 2;
        TYPE_VEC4 :: 3;
        TYPE_MAT2 :: 4;
        TYPE_MAT3 :: 5;
        TYPE_MAT4 :: 6;
    }

    GLTFComponentType :: enum s32 {
        COMPONENT_TYPE_NONE :: 0;
        COMPONENT_TYPE_SIGNED_BYTE :: 5120;
        COMPONENT_TYPE_UNSIGNED_BYTE :: 5121;
        COMPONENT_TYPE_SIGNED_SHORT :: 5122;
        COMPONENT_TYPE_UNSIGNED_SHORT :: 5123;
        COMPONENT_TYPE_SIGNED_INT :: 5124;
        COMPONENT_TYPE_UNSIGNED_INT :: 5125;
        COMPONENT_TYPE_SINGLE_FLOAT :: 5126;
        COMPONENT_TYPE_DOUBLE_FLOAT :: 5130;
        COMPONENT_TYPE_HALF_FLOAT :: 5131;
        COMPONENT_TYPE_SIGNED_LONG :: 5134;
        COMPONENT_TYPE_UNSIGNED_LONG :: 5135;
    }
}

GLTFAnimation :: struct { #as using base: OpaqueClass; } // 276

GLTFBufferView :: struct { #as using base: OpaqueClass; } // 277

GLTFCamera :: struct { #as using base: OpaqueClass; } // 278

GLTFDocument :: struct {  // 279

        #as using base: OpaqueClass;

    RootNodeMode :: enum s32 {
        ROOT_NODE_MODE_SINGLE_ROOT :: 0;
        ROOT_NODE_MODE_KEEP_ROOT :: 1;
        ROOT_NODE_MODE_MULTI_ROOT :: 2;
    }
}

GLTFDocumentExtension :: struct { #as using base: OpaqueClass; } // 280

GLTFDocumentExtensionConvertImporterMesh :: struct { #as using base: OpaqueClass; } // 281

GLTFLight :: struct { #as using base: OpaqueClass; } // 282

GLTFMesh :: struct { #as using base: OpaqueClass; } // 283

GLTFNode :: struct { #as using base: OpaqueClass; } // 284

GLTFObjectModelProperty :: struct {  // 285

        #as using base: OpaqueClass;

    GLTFObjectModelType :: enum s32 {
        GLTF_OBJECT_MODEL_TYPE_UNKNOWN :: 0;
        GLTF_OBJECT_MODEL_TYPE_BOOL :: 1;
        GLTF_OBJECT_MODEL_TYPE_FLOAT :: 2;
        GLTF_OBJECT_MODEL_TYPE_FLOAT_ARRAY :: 3;
        GLTF_OBJECT_MODEL_TYPE_FLOAT2 :: 4;
        GLTF_OBJECT_MODEL_TYPE_FLOAT3 :: 5;
        GLTF_OBJECT_MODEL_TYPE_FLOAT4 :: 6;
        GLTF_OBJECT_MODEL_TYPE_FLOAT2X2 :: 7;
        GLTF_OBJECT_MODEL_TYPE_FLOAT3X3 :: 8;
        GLTF_OBJECT_MODEL_TYPE_FLOAT4X4 :: 9;
        GLTF_OBJECT_MODEL_TYPE_INT :: 10;
    }
}

GLTFPhysicsBody :: struct { #as using base: OpaqueClass; } // 286

GLTFPhysicsShape :: struct { #as using base: OpaqueClass; } // 287

GLTFSkeleton :: struct { #as using base: OpaqueClass; } // 288

GLTFSkin :: struct { #as using base: OpaqueClass; } // 289

GLTFSpecGloss :: struct { #as using base: OpaqueClass; } // 290

GLTFState :: struct { #as using base: OpaqueClass; } // 291

GLTFTexture :: struct { #as using base: OpaqueClass; } // 292

GLTFTextureSampler :: struct { #as using base: OpaqueClass; } // 293

GPUParticles2D :: struct {  // 294

        #as using base: OpaqueClass;

    DrawOrder :: enum s32 {
        DRAW_ORDER_INDEX :: 0;
        DRAW_ORDER_LIFETIME :: 1;
        DRAW_ORDER_REVERSE_LIFETIME :: 2;
    }

    EmitFlags :: enum s32 {
        EMIT_FLAG_POSITION :: 1;
        EMIT_FLAG_ROTATION_SCALE :: 2;
        EMIT_FLAG_VELOCITY :: 4;
        EMIT_FLAG_COLOR :: 8;
        EMIT_FLAG_CUSTOM :: 16;
    }
}

GPUParticles3D :: struct {  // 295

        #as using base: OpaqueClass;

    DrawOrder :: enum s32 {
        DRAW_ORDER_INDEX :: 0;
        DRAW_ORDER_LIFETIME :: 1;
        DRAW_ORDER_REVERSE_LIFETIME :: 2;
        DRAW_ORDER_VIEW_DEPTH :: 3;
    }

    EmitFlags :: enum s32 {
        EMIT_FLAG_POSITION :: 1;
        EMIT_FLAG_ROTATION_SCALE :: 2;
        EMIT_FLAG_VELOCITY :: 4;
        EMIT_FLAG_COLOR :: 8;
        EMIT_FLAG_CUSTOM :: 16;
    }

    TransformAlign :: enum s32 {
        TRANSFORM_ALIGN_DISABLED :: 0;
        TRANSFORM_ALIGN_Z_BILLBOARD :: 1;
        TRANSFORM_ALIGN_Y_TO_VELOCITY :: 2;
        TRANSFORM_ALIGN_Z_BILLBOARD_Y_TO_VELOCITY :: 3;
    }
}

GPUParticlesAttractor3D :: struct { #as using base: OpaqueClass; } // 296

GPUParticlesAttractorBox3D :: struct { #as using base: OpaqueClass; } // 297

GPUParticlesAttractorSphere3D :: struct { #as using base: OpaqueClass; } // 298

GPUParticlesAttractorVectorField3D :: struct { #as using base: OpaqueClass; } // 299

GPUParticlesCollision3D :: struct { #as using base: OpaqueClass; } // 300

GPUParticlesCollisionBox3D :: struct { #as using base: OpaqueClass; } // 301

GPUParticlesCollisionHeightField3D :: struct {  // 302

        #as using base: OpaqueClass;

    Resolution :: enum s32 {
        RESOLUTION_256 :: 0;
        RESOLUTION_512 :: 1;
        RESOLUTION_1024 :: 2;
        RESOLUTION_2048 :: 3;
        RESOLUTION_4096 :: 4;
        RESOLUTION_8192 :: 5;
        RESOLUTION_MAX :: 6;
    }

    UpdateMode :: enum s32 {
        UPDATE_MODE_WHEN_MOVED :: 0;
        UPDATE_MODE_ALWAYS :: 1;
    }
}

GPUParticlesCollisionSDF3D :: struct {  // 303

        #as using base: OpaqueClass;

    Resolution :: enum s32 {
        RESOLUTION_16 :: 0;
        RESOLUTION_32 :: 1;
        RESOLUTION_64 :: 2;
        RESOLUTION_128 :: 3;
        RESOLUTION_256 :: 4;
        RESOLUTION_512 :: 5;
        RESOLUTION_MAX :: 6;
    }
}

GPUParticlesCollisionSphere3D :: struct { #as using base: OpaqueClass; } // 304

Generic6DOFJoint3D :: struct {  // 305

        #as using base: OpaqueClass;

    Param :: enum s32 {
        PARAM_LINEAR_LOWER_LIMIT :: 0;
        PARAM_LINEAR_UPPER_LIMIT :: 1;
        PARAM_LINEAR_LIMIT_SOFTNESS :: 2;
        PARAM_LINEAR_RESTITUTION :: 3;
        PARAM_LINEAR_DAMPING :: 4;
        PARAM_LINEAR_MOTOR_TARGET_VELOCITY :: 5;
        PARAM_LINEAR_MOTOR_FORCE_LIMIT :: 6;
        PARAM_LINEAR_SPRING_STIFFNESS :: 7;
        PARAM_LINEAR_SPRING_DAMPING :: 8;
        PARAM_LINEAR_SPRING_EQUILIBRIUM_POINT :: 9;
        PARAM_ANGULAR_LOWER_LIMIT :: 10;
        PARAM_ANGULAR_UPPER_LIMIT :: 11;
        PARAM_ANGULAR_LIMIT_SOFTNESS :: 12;
        PARAM_ANGULAR_DAMPING :: 13;
        PARAM_ANGULAR_RESTITUTION :: 14;
        PARAM_ANGULAR_FORCE_LIMIT :: 15;
        PARAM_ANGULAR_ERP :: 16;
        PARAM_ANGULAR_MOTOR_TARGET_VELOCITY :: 17;
        PARAM_ANGULAR_MOTOR_FORCE_LIMIT :: 18;
        PARAM_ANGULAR_SPRING_STIFFNESS :: 19;
        PARAM_ANGULAR_SPRING_DAMPING :: 20;
        PARAM_ANGULAR_SPRING_EQUILIBRIUM_POINT :: 21;
        PARAM_MAX :: 22;
    }

    Flag :: enum s32 {
        FLAG_ENABLE_LINEAR_LIMIT :: 0;
        FLAG_ENABLE_ANGULAR_LIMIT :: 1;
        FLAG_ENABLE_LINEAR_SPRING :: 3;
        FLAG_ENABLE_ANGULAR_SPRING :: 2;
        FLAG_ENABLE_MOTOR :: 4;
        FLAG_ENABLE_LINEAR_MOTOR :: 5;
        FLAG_MAX :: 6;
    }
}

Geometry2D :: struct {  // 306

        #as using base: OpaqueClass;

    PolyBooleanOperation :: enum s32 {
        OPERATION_UNION :: 0;
        OPERATION_DIFFERENCE :: 1;
        OPERATION_INTERSECTION :: 2;
        OPERATION_XOR :: 3;
    }

    PolyJoinType :: enum s32 {
        JOIN_SQUARE :: 0;
        JOIN_ROUND :: 1;
        JOIN_MITER :: 2;
    }

    PolyEndType :: enum s32 {
        END_POLYGON :: 0;
        END_JOINED :: 1;
        END_BUTT :: 2;
        END_SQUARE :: 3;
        END_ROUND :: 4;
    }
}

Geometry3D :: struct { #as using base: OpaqueClass; } // 307

GeometryInstance3D :: struct {  // 308

        #as using base: OpaqueClass;

    ShadowCastingSetting :: enum s32 {
        SHADOW_CASTING_SETTING_OFF :: 0;
        SHADOW_CASTING_SETTING_ON :: 1;
        SHADOW_CASTING_SETTING_DOUBLE_SIDED :: 2;
        SHADOW_CASTING_SETTING_SHADOWS_ONLY :: 3;
    }

    GIMode :: enum s32 {
        GI_MODE_DISABLED :: 0;
        GI_MODE_STATIC :: 1;
        GI_MODE_DYNAMIC :: 2;
    }

    LightmapScale :: enum s32 {
        LIGHTMAP_SCALE_1X :: 0;
        LIGHTMAP_SCALE_2X :: 1;
        LIGHTMAP_SCALE_4X :: 2;
        LIGHTMAP_SCALE_8X :: 3;
        LIGHTMAP_SCALE_MAX :: 4;
    }

    VisibilityRangeFadeMode :: enum s32 {
        VISIBILITY_RANGE_FADE_DISABLED :: 0;
        VISIBILITY_RANGE_FADE_SELF :: 1;
        VISIBILITY_RANGE_FADE_DEPENDENCIES :: 2;
    }
}

Gradient :: struct {  // 309

        #as using base: OpaqueClass;

    InterpolationMode :: enum s32 {
        GRADIENT_INTERPOLATE_LINEAR :: 0;
        GRADIENT_INTERPOLATE_CONSTANT :: 1;
        GRADIENT_INTERPOLATE_CUBIC :: 2;
    }

    ColorSpace :: enum s32 {
        GRADIENT_COLOR_SPACE_SRGB :: 0;
        GRADIENT_COLOR_SPACE_LINEAR_SRGB :: 1;
        GRADIENT_COLOR_SPACE_OKLAB :: 2;
    }
}

GradientTexture1D :: struct { #as using base: OpaqueClass; } // 310

GradientTexture2D :: struct {  // 311

        #as using base: OpaqueClass;

    Fill :: enum s32 {
        FILL_LINEAR :: 0;
        FILL_RADIAL :: 1;
        FILL_SQUARE :: 2;
    }

    Repeat :: enum s32 {
        REPEAT_NONE :: 0;
        REPEAT :: 1;
        REPEAT_MIRROR :: 2;
    }
}

GraphEdit :: struct {  // 312

        #as using base: OpaqueClass;

    PanningScheme :: enum s32 {
        SCROLL_ZOOMS :: 0;
        SCROLL_PANS :: 1;
    }

    GridPattern :: enum s32 {
        GRID_PATTERN_LINES :: 0;
        GRID_PATTERN_DOTS :: 1;
    }
}

GraphElement :: struct { #as using base: OpaqueClass; } // 313

GraphFrame :: struct { #as using base: OpaqueClass; } // 314

GraphNode :: struct { #as using base: OpaqueClass; } // 315

GridContainer :: struct { #as using base: OpaqueClass; } // 316

GridMap :: struct { #as using base: OpaqueClass; } // 317

GridMapEditorPlugin :: struct { #as using base: OpaqueClass; } // 318

GrooveJoint2D :: struct { #as using base: OpaqueClass; } // 319

HBoxContainer :: struct { #as using base: OpaqueClass; } // 320

HFlowContainer :: struct { #as using base: OpaqueClass; } // 321

HMACContext :: struct { #as using base: OpaqueClass; } // 322

HScrollBar :: struct { #as using base: OpaqueClass; } // 323

HSeparator :: struct { #as using base: OpaqueClass; } // 324

HSlider :: struct { #as using base: OpaqueClass; } // 325

HSplitContainer :: struct { #as using base: OpaqueClass; } // 326

HTTPClient :: struct {  // 327

        #as using base: OpaqueClass;

    Method :: enum s32 {
        METHOD_GET :: 0;
        METHOD_HEAD :: 1;
        METHOD_POST :: 2;
        METHOD_PUT :: 3;
        METHOD_DELETE :: 4;
        METHOD_OPTIONS :: 5;
        METHOD_TRACE :: 6;
        METHOD_CONNECT :: 7;
        METHOD_PATCH :: 8;
        METHOD_MAX :: 9;
    }

    Status :: enum s32 {
        STATUS_DISCONNECTED :: 0;
        STATUS_RESOLVING :: 1;
        STATUS_CANT_RESOLVE :: 2;
        STATUS_CONNECTING :: 3;
        STATUS_CANT_CONNECT :: 4;
        STATUS_CONNECTED :: 5;
        STATUS_REQUESTING :: 6;
        STATUS_BODY :: 7;
        STATUS_CONNECTION_ERROR :: 8;
        STATUS_TLS_HANDSHAKE_ERROR :: 9;
    }

    ResponseCode :: enum s32 {
        RESPONSE_CONTINUE :: 100;
        RESPONSE_SWITCHING_PROTOCOLS :: 101;
        RESPONSE_PROCESSING :: 102;
        RESPONSE_OK :: 200;
        RESPONSE_CREATED :: 201;
        RESPONSE_ACCEPTED :: 202;
        RESPONSE_NON_AUTHORITATIVE_INFORMATION :: 203;
        RESPONSE_NO_CONTENT :: 204;
        RESPONSE_RESET_CONTENT :: 205;
        RESPONSE_PARTIAL_CONTENT :: 206;
        RESPONSE_MULTI_STATUS :: 207;
        RESPONSE_ALREADY_REPORTED :: 208;
        RESPONSE_IM_USED :: 226;
        RESPONSE_MULTIPLE_CHOICES :: 300;
        RESPONSE_MOVED_PERMANENTLY :: 301;
        RESPONSE_FOUND :: 302;
        RESPONSE_SEE_OTHER :: 303;
        RESPONSE_NOT_MODIFIED :: 304;
        RESPONSE_USE_PROXY :: 305;
        RESPONSE_SWITCH_PROXY :: 306;
        RESPONSE_TEMPORARY_REDIRECT :: 307;
        RESPONSE_PERMANENT_REDIRECT :: 308;
        RESPONSE_BAD_REQUEST :: 400;
        RESPONSE_UNAUTHORIZED :: 401;
        RESPONSE_PAYMENT_REQUIRED :: 402;
        RESPONSE_FORBIDDEN :: 403;
        RESPONSE_NOT_FOUND :: 404;
        RESPONSE_METHOD_NOT_ALLOWED :: 405;
        RESPONSE_NOT_ACCEPTABLE :: 406;
        RESPONSE_PROXY_AUTHENTICATION_REQUIRED :: 407;
        RESPONSE_REQUEST_TIMEOUT :: 408;
        RESPONSE_CONFLICT :: 409;
        RESPONSE_GONE :: 410;
        RESPONSE_LENGTH_REQUIRED :: 411;
        RESPONSE_PRECONDITION_FAILED :: 412;
        RESPONSE_REQUEST_ENTITY_TOO_LARGE :: 413;
        RESPONSE_REQUEST_URI_TOO_LONG :: 414;
        RESPONSE_UNSUPPORTED_MEDIA_TYPE :: 415;
        RESPONSE_REQUESTED_RANGE_NOT_SATISFIABLE :: 416;
        RESPONSE_EXPECTATION_FAILED :: 417;
        RESPONSE_IM_A_TEAPOT :: 418;
        RESPONSE_MISDIRECTED_REQUEST :: 421;
        RESPONSE_UNPROCESSABLE_ENTITY :: 422;
        RESPONSE_LOCKED :: 423;
        RESPONSE_FAILED_DEPENDENCY :: 424;
        RESPONSE_UPGRADE_REQUIRED :: 426;
        RESPONSE_PRECONDITION_REQUIRED :: 428;
        RESPONSE_TOO_MANY_REQUESTS :: 429;
        RESPONSE_REQUEST_HEADER_FIELDS_TOO_LARGE :: 431;
        RESPONSE_UNAVAILABLE_FOR_LEGAL_REASONS :: 451;
        RESPONSE_INTERNAL_SERVER_ERROR :: 500;
        RESPONSE_NOT_IMPLEMENTED :: 501;
        RESPONSE_BAD_GATEWAY :: 502;
        RESPONSE_SERVICE_UNAVAILABLE :: 503;
        RESPONSE_GATEWAY_TIMEOUT :: 504;
        RESPONSE_HTTP_VERSION_NOT_SUPPORTED :: 505;
        RESPONSE_VARIANT_ALSO_NEGOTIATES :: 506;
        RESPONSE_INSUFFICIENT_STORAGE :: 507;
        RESPONSE_LOOP_DETECTED :: 508;
        RESPONSE_NOT_EXTENDED :: 510;
        RESPONSE_NETWORK_AUTH_REQUIRED :: 511;
    }
}

HTTPRequest :: struct {  // 328

        #as using base: OpaqueClass;

    Result :: enum s32 {
        RESULT_SUCCESS :: 0;
        RESULT_CHUNKED_BODY_SIZE_MISMATCH :: 1;
        RESULT_CANT_CONNECT :: 2;
        RESULT_CANT_RESOLVE :: 3;
        RESULT_CONNECTION_ERROR :: 4;
        RESULT_TLS_HANDSHAKE_ERROR :: 5;
        RESULT_NO_RESPONSE :: 6;
        RESULT_BODY_SIZE_LIMIT_EXCEEDED :: 7;
        RESULT_BODY_DECOMPRESS_FAILED :: 8;
        RESULT_REQUEST_FAILED :: 9;
        RESULT_DOWNLOAD_FILE_CANT_OPEN :: 10;
        RESULT_DOWNLOAD_FILE_WRITE_ERROR :: 11;
        RESULT_REDIRECT_LIMIT_REACHED :: 12;
        RESULT_TIMEOUT :: 13;
    }
}

HashingContext :: struct {  // 329

        #as using base: OpaqueClass;

    HashType :: enum s32 {
        HASH_MD5 :: 0;
        HASH_SHA1 :: 1;
        HASH_SHA256 :: 2;
    }
}

HeightMapShape3D :: struct { #as using base: OpaqueClass; } // 330

HingeJoint3D :: struct {  // 331

        #as using base: OpaqueClass;

    Param :: enum s32 {
        PARAM_BIAS :: 0;
        PARAM_LIMIT_UPPER :: 1;
        PARAM_LIMIT_LOWER :: 2;
        PARAM_LIMIT_BIAS :: 3;
        PARAM_LIMIT_SOFTNESS :: 4;
        PARAM_LIMIT_RELAXATION :: 5;
        PARAM_MOTOR_TARGET_VELOCITY :: 6;
        PARAM_MOTOR_MAX_IMPULSE :: 7;
        PARAM_MAX :: 8;
    }

    Flag :: enum s32 {
        FLAG_USE_LIMIT :: 0;
        FLAG_ENABLE_MOTOR :: 1;
        FLAG_MAX :: 2;
    }
}

IP :: struct {  // 332

        #as using base: OpaqueClass;

    ResolverStatus :: enum s32 {
        RESOLVER_STATUS_NONE :: 0;
        RESOLVER_STATUS_WAITING :: 1;
        RESOLVER_STATUS_DONE :: 2;
        RESOLVER_STATUS_ERROR :: 3;
    }

    Type :: enum s32 {
        TYPE_NONE :: 0;
        TYPE_IPV4 :: 1;
        TYPE_IPV6 :: 2;
        TYPE_ANY :: 3;
    }
}

Image :: struct {  // 333

        #as using base: OpaqueClass;

    Format :: enum s32 {
        FORMAT_L8 :: 0;
        FORMAT_LA8 :: 1;
        FORMAT_R8 :: 2;
        FORMAT_RG8 :: 3;
        FORMAT_RGB8 :: 4;
        FORMAT_RGBA8 :: 5;
        FORMAT_RGBA4444 :: 6;
        FORMAT_RGB565 :: 7;
        FORMAT_RF :: 8;
        FORMAT_RGF :: 9;
        FORMAT_RGBF :: 10;
        FORMAT_RGBAF :: 11;
        FORMAT_RH :: 12;
        FORMAT_RGH :: 13;
        FORMAT_RGBH :: 14;
        FORMAT_RGBAH :: 15;
        FORMAT_RGBE9995 :: 16;
        FORMAT_DXT1 :: 17;
        FORMAT_DXT3 :: 18;
        FORMAT_DXT5 :: 19;
        FORMAT_RGTC_R :: 20;
        FORMAT_RGTC_RG :: 21;
        FORMAT_BPTC_RGBA :: 22;
        FORMAT_BPTC_RGBF :: 23;
        FORMAT_BPTC_RGBFU :: 24;
        FORMAT_ETC :: 25;
        FORMAT_ETC2_R11 :: 26;
        FORMAT_ETC2_R11S :: 27;
        FORMAT_ETC2_RG11 :: 28;
        FORMAT_ETC2_RG11S :: 29;
        FORMAT_ETC2_RGB8 :: 30;
        FORMAT_ETC2_RGBA8 :: 31;
        FORMAT_ETC2_RGB8A1 :: 32;
        FORMAT_ETC2_RA_AS_RG :: 33;
        FORMAT_DXT5_RA_AS_RG :: 34;
        FORMAT_ASTC_4x4 :: 35;
        FORMAT_ASTC_4x4_HDR :: 36;
        FORMAT_ASTC_8x8 :: 37;
        FORMAT_ASTC_8x8_HDR :: 38;
        FORMAT_MAX :: 39;
    }

    Interpolation :: enum s32 {
        INTERPOLATE_NEAREST :: 0;
        INTERPOLATE_BILINEAR :: 1;
        INTERPOLATE_CUBIC :: 2;
        INTERPOLATE_TRILINEAR :: 3;
        INTERPOLATE_LANCZOS :: 4;
    }

    AlphaMode :: enum s32 {
        ALPHA_NONE :: 0;
        ALPHA_BIT :: 1;
        ALPHA_BLEND :: 2;
    }

    CompressMode :: enum s32 {
        COMPRESS_S3TC :: 0;
        COMPRESS_ETC :: 1;
        COMPRESS_ETC2 :: 2;
        COMPRESS_BPTC :: 3;
        COMPRESS_ASTC :: 4;
        COMPRESS_MAX :: 5;
    }

    UsedChannels :: enum s32 {
        USED_CHANNELS_L :: 0;
        USED_CHANNELS_LA :: 1;
        USED_CHANNELS_R :: 2;
        USED_CHANNELS_RG :: 3;
        USED_CHANNELS_RGB :: 4;
        USED_CHANNELS_RGBA :: 5;
    }

    CompressSource :: enum s32 {
        COMPRESS_SOURCE_GENERIC :: 0;
        COMPRESS_SOURCE_SRGB :: 1;
        COMPRESS_SOURCE_NORMAL :: 2;
    }

    ASTCFormat :: enum s32 {
        ASTC_FORMAT_4x4 :: 0;
        ASTC_FORMAT_8x8 :: 1;
    }
}

ImageFormatLoader :: struct {  // 334

        #as using base: OpaqueClass;

    LoaderFlags :: enum u64 {
        FLAG_NONE :: 0;
        FLAG_FORCE_LINEAR :: 1;
        FLAG_CONVERT_COLORS :: 2;
    } @bitfield
}

ImageFormatLoaderExtension :: struct { #as using base: OpaqueClass; } // 335

ImageTexture :: struct { #as using base: OpaqueClass; } // 336

ImageTexture3D :: struct { #as using base: OpaqueClass; } // 337

ImageTextureLayered :: struct { #as using base: OpaqueClass; } // 338

ImmediateMesh :: struct { #as using base: OpaqueClass; } // 339

ImporterMesh :: struct { #as using base: OpaqueClass; } // 340

ImporterMeshInstance3D :: struct { #as using base: OpaqueClass; } // 341

Input :: struct {  // 342

        #as using base: OpaqueClass;

    MouseMode :: enum s32 {
        MOUSE_MODE_VISIBLE :: 0;
        MOUSE_MODE_HIDDEN :: 1;
        MOUSE_MODE_CAPTURED :: 2;
        MOUSE_MODE_CONFINED :: 3;
        MOUSE_MODE_CONFINED_HIDDEN :: 4;
        MOUSE_MODE_MAX :: 5;
    }

    CursorShape :: enum s32 {
        CURSOR_ARROW :: 0;
        CURSOR_IBEAM :: 1;
        CURSOR_POINTING_HAND :: 2;
        CURSOR_CROSS :: 3;
        CURSOR_WAIT :: 4;
        CURSOR_BUSY :: 5;
        CURSOR_DRAG :: 6;
        CURSOR_CAN_DROP :: 7;
        CURSOR_FORBIDDEN :: 8;
        CURSOR_VSIZE :: 9;
        CURSOR_HSIZE :: 10;
        CURSOR_BDIAGSIZE :: 11;
        CURSOR_FDIAGSIZE :: 12;
        CURSOR_MOVE :: 13;
        CURSOR_VSPLIT :: 14;
        CURSOR_HSPLIT :: 15;
        CURSOR_HELP :: 16;
    }
}

InputEvent :: struct { #as using base: OpaqueClass; } // 343

InputEventAction :: struct { #as using base: OpaqueClass; } // 344

InputEventFromWindow :: struct { #as using base: OpaqueClass; } // 345

InputEventGesture :: struct { #as using base: OpaqueClass; } // 346

InputEventJoypadButton :: struct { #as using base: OpaqueClass; } // 347

InputEventJoypadMotion :: struct { #as using base: OpaqueClass; } // 348

InputEventKey :: struct { #as using base: OpaqueClass; } // 349

InputEventMIDI :: struct { #as using base: OpaqueClass; } // 350

InputEventMagnifyGesture :: struct { #as using base: OpaqueClass; } // 351

InputEventMouse :: struct { #as using base: OpaqueClass; } // 352

InputEventMouseButton :: struct { #as using base: OpaqueClass; } // 353

InputEventMouseMotion :: struct { #as using base: OpaqueClass; } // 354

InputEventPanGesture :: struct { #as using base: OpaqueClass; } // 355

InputEventScreenDrag :: struct { #as using base: OpaqueClass; } // 356

InputEventScreenTouch :: struct { #as using base: OpaqueClass; } // 357

InputEventShortcut :: struct { #as using base: OpaqueClass; } // 358

InputEventWithModifiers :: struct { #as using base: OpaqueClass; } // 359

InputMap :: struct { #as using base: OpaqueClass; } // 360

InstancePlaceholder :: struct { #as using base: OpaqueClass; } // 361

IntervalTweener :: struct { #as using base: OpaqueClass; } // 362

ItemList :: struct {  // 363

        #as using base: OpaqueClass;

    IconMode :: enum s32 {
        ICON_MODE_TOP :: 0;
        ICON_MODE_LEFT :: 1;
    }

    SelectMode :: enum s32 {
        SELECT_SINGLE :: 0;
        SELECT_MULTI :: 1;
        SELECT_TOGGLE :: 2;
    }
}

JNISingleton :: struct { #as using base: OpaqueClass; } // 364

JSON :: struct { #as using base: OpaqueClass; } // 365

JSONRPC :: struct {  // 366

        #as using base: OpaqueClass;

    ErrorCode :: enum s32 {
        PARSE_ERROR :: -32700;
        INVALID_REQUEST :: -32600;
        METHOD_NOT_FOUND :: -32601;
        INVALID_PARAMS :: -32602;
        INTERNAL_ERROR :: -32603;
    }
}

JavaClass :: struct { #as using base: OpaqueClass; } // 367

JavaClassWrapper :: struct { #as using base: OpaqueClass; } // 368

JavaObject :: struct { #as using base: OpaqueClass; } // 369

JavaScriptBridge :: struct { #as using base: OpaqueClass; } // 370

JavaScriptObject :: struct { #as using base: OpaqueClass; } // 371

Joint2D :: struct { #as using base: OpaqueClass; } // 372

Joint3D :: struct { #as using base: OpaqueClass; } // 373

KinematicCollision2D :: struct { #as using base: OpaqueClass; } // 374

KinematicCollision3D :: struct { #as using base: OpaqueClass; } // 375

Label :: struct { #as using base: OpaqueClass; } // 376

Label3D :: struct {  // 377

        #as using base: OpaqueClass;

    DrawFlags :: enum s32 {
        FLAG_SHADED :: 0;
        FLAG_DOUBLE_SIDED :: 1;
        FLAG_DISABLE_DEPTH_TEST :: 2;
        FLAG_FIXED_SIZE :: 3;
        FLAG_MAX :: 4;
    }

    AlphaCutMode :: enum s32 {
        ALPHA_CUT_DISABLED :: 0;
        ALPHA_CUT_DISCARD :: 1;
        ALPHA_CUT_OPAQUE_PREPASS :: 2;
        ALPHA_CUT_HASH :: 3;
    }
}

LabelSettings :: struct { #as using base: OpaqueClass; } // 378

Light2D :: struct {  // 379

        #as using base: OpaqueClass;

    ShadowFilter :: enum s32 {
        SHADOW_FILTER_NONE :: 0;
        SHADOW_FILTER_PCF5 :: 1;
        SHADOW_FILTER_PCF13 :: 2;
    }

    BlendMode :: enum s32 {
        BLEND_MODE_ADD :: 0;
        BLEND_MODE_SUB :: 1;
        BLEND_MODE_MIX :: 2;
    }
}

Light3D :: struct {  // 380

        #as using base: OpaqueClass;

    Param :: enum s32 {
        PARAM_ENERGY :: 0;
        PARAM_INDIRECT_ENERGY :: 1;
        PARAM_VOLUMETRIC_FOG_ENERGY :: 2;
        PARAM_SPECULAR :: 3;
        PARAM_RANGE :: 4;
        PARAM_SIZE :: 5;
        PARAM_ATTENUATION :: 6;
        PARAM_SPOT_ANGLE :: 7;
        PARAM_SPOT_ATTENUATION :: 8;
        PARAM_SHADOW_MAX_DISTANCE :: 9;
        PARAM_SHADOW_SPLIT_1_OFFSET :: 10;
        PARAM_SHADOW_SPLIT_2_OFFSET :: 11;
        PARAM_SHADOW_SPLIT_3_OFFSET :: 12;
        PARAM_SHADOW_FADE_START :: 13;
        PARAM_SHADOW_NORMAL_BIAS :: 14;
        PARAM_SHADOW_BIAS :: 15;
        PARAM_SHADOW_PANCAKE_SIZE :: 16;
        PARAM_SHADOW_OPACITY :: 17;
        PARAM_SHADOW_BLUR :: 18;
        PARAM_TRANSMITTANCE_BIAS :: 19;
        PARAM_INTENSITY :: 20;
        PARAM_MAX :: 21;
    }

    BakeMode :: enum s32 {
        BAKE_DISABLED :: 0;
        BAKE_STATIC :: 1;
        BAKE_DYNAMIC :: 2;
    }
}

LightOccluder2D :: struct { #as using base: OpaqueClass; } // 381

LightmapGI :: struct {  // 382

        #as using base: OpaqueClass;

    BakeQuality :: enum s32 {
        BAKE_QUALITY_LOW :: 0;
        BAKE_QUALITY_MEDIUM :: 1;
        BAKE_QUALITY_HIGH :: 2;
        BAKE_QUALITY_ULTRA :: 3;
    }

    GenerateProbes :: enum s32 {
        GENERATE_PROBES_DISABLED :: 0;
        GENERATE_PROBES_SUBDIV_4 :: 1;
        GENERATE_PROBES_SUBDIV_8 :: 2;
        GENERATE_PROBES_SUBDIV_16 :: 3;
        GENERATE_PROBES_SUBDIV_32 :: 4;
    }

    BakeError :: enum s32 {
        BAKE_ERROR_OK :: 0;
        BAKE_ERROR_NO_SCENE_ROOT :: 1;
        BAKE_ERROR_FOREIGN_DATA :: 2;
        BAKE_ERROR_NO_LIGHTMAPPER :: 3;
        BAKE_ERROR_NO_SAVE_PATH :: 4;
        BAKE_ERROR_NO_MESHES :: 5;
        BAKE_ERROR_MESHES_INVALID :: 6;
        BAKE_ERROR_CANT_CREATE_IMAGE :: 7;
        BAKE_ERROR_USER_ABORTED :: 8;
        BAKE_ERROR_TEXTURE_SIZE_TOO_SMALL :: 9;
        BAKE_ERROR_LIGHTMAP_TOO_SMALL :: 10;
        BAKE_ERROR_ATLAS_TOO_SMALL :: 11;
    }

    EnvironmentMode :: enum s32 {
        ENVIRONMENT_MODE_DISABLED :: 0;
        ENVIRONMENT_MODE_SCENE :: 1;
        ENVIRONMENT_MODE_CUSTOM_SKY :: 2;
        ENVIRONMENT_MODE_CUSTOM_COLOR :: 3;
    }
}

LightmapGIData :: struct {  // 383

        #as using base: OpaqueClass;

    ShadowmaskMode :: enum s32 {
        SHADOWMASK_MODE_NONE :: 0;
        SHADOWMASK_MODE_REPLACE :: 1;
        SHADOWMASK_MODE_OVERLAY :: 2;
    }
}

LightmapProbe :: struct { #as using base: OpaqueClass; } // 384

Lightmapper :: struct { #as using base: OpaqueClass; } // 385

LightmapperRD :: struct { #as using base: OpaqueClass; } // 386

Line2D :: struct {  // 387

        #as using base: OpaqueClass;

    LineJointMode :: enum s32 {
        LINE_JOINT_SHARP :: 0;
        LINE_JOINT_BEVEL :: 1;
        LINE_JOINT_ROUND :: 2;
    }

    LineCapMode :: enum s32 {
        LINE_CAP_NONE :: 0;
        LINE_CAP_BOX :: 1;
        LINE_CAP_ROUND :: 2;
    }

    LineTextureMode :: enum s32 {
        LINE_TEXTURE_NONE :: 0;
        LINE_TEXTURE_TILE :: 1;
        LINE_TEXTURE_STRETCH :: 2;
    }
}

LineEdit :: struct {  // 388

        #as using base: OpaqueClass;

    MenuItems :: enum s32 {
        MENU_CUT :: 0;
        MENU_COPY :: 1;
        MENU_PASTE :: 2;
        MENU_CLEAR :: 3;
        MENU_SELECT_ALL :: 4;
        MENU_UNDO :: 5;
        MENU_REDO :: 6;
        MENU_SUBMENU_TEXT_DIR :: 7;
        MENU_DIR_INHERITED :: 8;
        MENU_DIR_AUTO :: 9;
        MENU_DIR_LTR :: 10;
        MENU_DIR_RTL :: 11;
        MENU_DISPLAY_UCC :: 12;
        MENU_SUBMENU_INSERT_UCC :: 13;
        MENU_INSERT_LRM :: 14;
        MENU_INSERT_RLM :: 15;
        MENU_INSERT_LRE :: 16;
        MENU_INSERT_RLE :: 17;
        MENU_INSERT_LRO :: 18;
        MENU_INSERT_RLO :: 19;
        MENU_INSERT_PDF :: 20;
        MENU_INSERT_ALM :: 21;
        MENU_INSERT_LRI :: 22;
        MENU_INSERT_RLI :: 23;
        MENU_INSERT_FSI :: 24;
        MENU_INSERT_PDI :: 25;
        MENU_INSERT_ZWJ :: 26;
        MENU_INSERT_ZWNJ :: 27;
        MENU_INSERT_WJ :: 28;
        MENU_INSERT_SHY :: 29;
        MENU_EMOJI_AND_SYMBOL :: 30;
        MENU_MAX :: 31;
    }

    VirtualKeyboardType :: enum s32 {
        KEYBOARD_TYPE_DEFAULT :: 0;
        KEYBOARD_TYPE_MULTILINE :: 1;
        KEYBOARD_TYPE_NUMBER :: 2;
        KEYBOARD_TYPE_NUMBER_DECIMAL :: 3;
        KEYBOARD_TYPE_PHONE :: 4;
        KEYBOARD_TYPE_EMAIL_ADDRESS :: 5;
        KEYBOARD_TYPE_PASSWORD :: 6;
        KEYBOARD_TYPE_URL :: 7;
    }
}

LinkButton :: struct {  // 389

        #as using base: OpaqueClass;

    UnderlineMode :: enum s32 {
        UNDERLINE_MODE_ALWAYS :: 0;
        UNDERLINE_MODE_ON_HOVER :: 1;
        UNDERLINE_MODE_NEVER :: 2;
    }
}

LookAtModifier3D :: struct {  // 390

        #as using base: OpaqueClass;

    OriginFrom :: enum s32 {
        ORIGIN_FROM_SELF :: 0;
        ORIGIN_FROM_SPECIFIC_BONE :: 1;
        ORIGIN_FROM_EXTERNAL_NODE :: 2;
    }
}

MainLoop :: struct { #as using base: OpaqueClass; } // 391

MarginContainer :: struct { #as using base: OpaqueClass; } // 392

Marker2D :: struct { #as using base: OpaqueClass; } // 393

Marker3D :: struct { #as using base: OpaqueClass; } // 394

Marshalls :: struct { #as using base: OpaqueClass; } // 395

Material :: struct { #as using base: OpaqueClass; } // 396

MenuBar :: struct { #as using base: OpaqueClass; } // 397

MenuButton :: struct { #as using base: OpaqueClass; } // 398

Mesh :: struct {  // 399

        #as using base: OpaqueClass;

    PrimitiveType :: enum s32 {
        PRIMITIVE_POINTS :: 0;
        PRIMITIVE_LINES :: 1;
        PRIMITIVE_LINE_STRIP :: 2;
        PRIMITIVE_TRIANGLES :: 3;
        PRIMITIVE_TRIANGLE_STRIP :: 4;
    }

    ArrayType :: enum s32 {
        ARRAY_VERTEX :: 0;
        ARRAY_NORMAL :: 1;
        ARRAY_TANGENT :: 2;
        ARRAY_COLOR :: 3;
        ARRAY_TEX_UV :: 4;
        ARRAY_TEX_UV2 :: 5;
        ARRAY_CUSTOM0 :: 6;
        ARRAY_CUSTOM1 :: 7;
        ARRAY_CUSTOM2 :: 8;
        ARRAY_CUSTOM3 :: 9;
        ARRAY_BONES :: 10;
        ARRAY_WEIGHTS :: 11;
        ARRAY_INDEX :: 12;
        ARRAY_MAX :: 13;
    }

    ArrayCustomFormat :: enum s32 {
        ARRAY_CUSTOM_RGBA8_UNORM :: 0;
        ARRAY_CUSTOM_RGBA8_SNORM :: 1;
        ARRAY_CUSTOM_RG_HALF :: 2;
        ARRAY_CUSTOM_RGBA_HALF :: 3;
        ARRAY_CUSTOM_R_FLOAT :: 4;
        ARRAY_CUSTOM_RG_FLOAT :: 5;
        ARRAY_CUSTOM_RGB_FLOAT :: 6;
        ARRAY_CUSTOM_RGBA_FLOAT :: 7;
        ARRAY_CUSTOM_MAX :: 8;
    }

    ArrayFormat :: enum u64 {
        ARRAY_FORMAT_VERTEX :: 1;
        ARRAY_FORMAT_NORMAL :: 2;
        ARRAY_FORMAT_TANGENT :: 4;
        ARRAY_FORMAT_COLOR :: 8;
        ARRAY_FORMAT_TEX_UV :: 16;
        ARRAY_FORMAT_TEX_UV2 :: 32;
        ARRAY_FORMAT_CUSTOM0 :: 64;
        ARRAY_FORMAT_CUSTOM1 :: 128;
        ARRAY_FORMAT_CUSTOM2 :: 256;
        ARRAY_FORMAT_CUSTOM3 :: 512;
        ARRAY_FORMAT_BONES :: 1024;
        ARRAY_FORMAT_WEIGHTS :: 2048;
        ARRAY_FORMAT_INDEX :: 4096;
        ARRAY_FORMAT_BLEND_SHAPE_MASK :: 7;
        ARRAY_FORMAT_CUSTOM_BASE :: 13;
        ARRAY_FORMAT_CUSTOM_BITS :: 3;
        ARRAY_FORMAT_CUSTOM0_SHIFT :: 13;
        ARRAY_FORMAT_CUSTOM1_SHIFT :: 16;
        ARRAY_FORMAT_CUSTOM2_SHIFT :: 19;
        ARRAY_FORMAT_CUSTOM3_SHIFT :: 22;
        ARRAY_FORMAT_CUSTOM_MASK :: 7;
        ARRAY_COMPRESS_FLAGS_BASE :: 25;
        ARRAY_FLAG_USE_2D_VERTICES :: 33554432;
        ARRAY_FLAG_USE_DYNAMIC_UPDATE :: 67108864;
        ARRAY_FLAG_USE_8_BONE_WEIGHTS :: 134217728;
        ARRAY_FLAG_USES_EMPTY_VERTEX_ARRAY :: 268435456;
        ARRAY_FLAG_COMPRESS_ATTRIBUTES :: 536870912;
    } @bitfield

    BlendShapeMode :: enum s32 {
        BLEND_SHAPE_MODE_NORMALIZED :: 0;
        BLEND_SHAPE_MODE_RELATIVE :: 1;
    }
}

MeshConvexDecompositionSettings :: struct {  // 400

        #as using base: OpaqueClass;

    Mode :: enum s32 {
        CONVEX_DECOMPOSITION_MODE_VOXEL :: 0;
        CONVEX_DECOMPOSITION_MODE_TETRAHEDRON :: 1;
    }
}

MeshDataTool :: struct { #as using base: OpaqueClass; } // 401

MeshInstance2D :: struct { #as using base: OpaqueClass; } // 402

MeshInstance3D :: struct { #as using base: OpaqueClass; } // 403

MeshLibrary :: struct { #as using base: OpaqueClass; } // 404

MeshTexture :: struct { #as using base: OpaqueClass; } // 405

MethodTweener :: struct { #as using base: OpaqueClass; } // 406

MissingNode :: struct { #as using base: OpaqueClass; } // 407

MissingResource :: struct { #as using base: OpaqueClass; } // 408

MobileVRInterface :: struct { #as using base: OpaqueClass; } // 409

MovieWriter :: struct { #as using base: OpaqueClass; } // 410

MultiMesh :: struct {  // 411

        #as using base: OpaqueClass;

    TransformFormat :: enum s32 {
        TRANSFORM_2D :: 0;
        TRANSFORM_3D :: 1;
    }

    PhysicsInterpolationQuality :: enum s32 {
        INTERP_QUALITY_FAST :: 0;
        INTERP_QUALITY_HIGH :: 1;
    }
}

MultiMeshInstance2D :: struct { #as using base: OpaqueClass; } // 412

MultiMeshInstance3D :: struct { #as using base: OpaqueClass; } // 413

MultiplayerAPI :: struct {  // 414

        #as using base: OpaqueClass;

    RPCMode :: enum s32 {
        RPC_MODE_DISABLED :: 0;
        RPC_MODE_ANY_PEER :: 1;
        RPC_MODE_AUTHORITY :: 2;
    }
}

MultiplayerAPIExtension :: struct { #as using base: OpaqueClass; } // 415

MultiplayerPeer :: struct {  // 416

        #as using base: OpaqueClass;

    ConnectionStatus :: enum s32 {
        CONNECTION_DISCONNECTED :: 0;
        CONNECTION_CONNECTING :: 1;
        CONNECTION_CONNECTED :: 2;
    }

    TransferMode :: enum s32 {
        TRANSFER_MODE_UNRELIABLE :: 0;
        TRANSFER_MODE_UNRELIABLE_ORDERED :: 1;
        TRANSFER_MODE_RELIABLE :: 2;
    }
}

MultiplayerPeerExtension :: struct { #as using base: OpaqueClass; } // 417

MultiplayerSpawner :: struct { #as using base: OpaqueClass; } // 418

MultiplayerSynchronizer :: struct {  // 419

        #as using base: OpaqueClass;

    VisibilityUpdateMode :: enum s32 {
        VISIBILITY_PROCESS_IDLE :: 0;
        VISIBILITY_PROCESS_PHYSICS :: 1;
        VISIBILITY_PROCESS_NONE :: 2;
    }
}

Mutex :: struct { #as using base: OpaqueClass; } // 420

NativeMenu :: struct {  // 421

        #as using base: OpaqueClass;

    Feature :: enum s32 {
        FEATURE_GLOBAL_MENU :: 0;
        FEATURE_POPUP_MENU :: 1;
        FEATURE_OPEN_CLOSE_CALLBACK :: 2;
        FEATURE_HOVER_CALLBACK :: 3;
        FEATURE_KEY_CALLBACK :: 4;
    }

    SystemMenus :: enum s32 {
        INVALID_MENU_ID :: 0;
        MAIN_MENU_ID :: 1;
        APPLICATION_MENU_ID :: 2;
        WINDOW_MENU_ID :: 3;
        HELP_MENU_ID :: 4;
        DOCK_MENU_ID :: 5;
    }
}

NavigationAgent2D :: struct { #as using base: OpaqueClass; } // 422

NavigationAgent3D :: struct { #as using base: OpaqueClass; } // 423

NavigationLink2D :: struct { #as using base: OpaqueClass; } // 424

NavigationLink3D :: struct { #as using base: OpaqueClass; } // 425

NavigationMesh :: struct {  // 426

        #as using base: OpaqueClass;

    SamplePartitionType :: enum s32 {
        SAMPLE_PARTITION_WATERSHED :: 0;
        SAMPLE_PARTITION_MONOTONE :: 1;
        SAMPLE_PARTITION_LAYERS :: 2;
        SAMPLE_PARTITION_MAX :: 3;
    }

    ParsedGeometryType :: enum s32 {
        PARSED_GEOMETRY_MESH_INSTANCES :: 0;
        PARSED_GEOMETRY_STATIC_COLLIDERS :: 1;
        PARSED_GEOMETRY_BOTH :: 2;
        PARSED_GEOMETRY_MAX :: 3;
    }

    SourceGeometryMode :: enum s32 {
        SOURCE_GEOMETRY_ROOT_NODE_CHILDREN :: 0;
        SOURCE_GEOMETRY_GROUPS_WITH_CHILDREN :: 1;
        SOURCE_GEOMETRY_GROUPS_EXPLICIT :: 2;
        SOURCE_GEOMETRY_MAX :: 3;
    }
}

NavigationMeshGenerator :: struct { #as using base: OpaqueClass; } // 427

NavigationMeshSourceGeometryData2D :: struct { #as using base: OpaqueClass; } // 428

NavigationMeshSourceGeometryData3D :: struct { #as using base: OpaqueClass; } // 429

NavigationObstacle2D :: struct { #as using base: OpaqueClass; } // 430

NavigationObstacle3D :: struct { #as using base: OpaqueClass; } // 431

NavigationPathQueryParameters2D :: struct {  // 432

        #as using base: OpaqueClass;

    PathfindingAlgorithm :: enum s32 {
        PATHFINDING_ALGORITHM_ASTAR :: 0;
    }

    PathPostProcessing :: enum s32 {
        PATH_POSTPROCESSING_CORRIDORFUNNEL :: 0;
        PATH_POSTPROCESSING_EDGECENTERED :: 1;
        PATH_POSTPROCESSING_NONE :: 2;
    }

    PathMetadataFlags :: enum u64 {
        PATH_METADATA_INCLUDE_NONE :: 0;
        PATH_METADATA_INCLUDE_TYPES :: 1;
        PATH_METADATA_INCLUDE_RIDS :: 2;
        PATH_METADATA_INCLUDE_OWNERS :: 4;
        PATH_METADATA_INCLUDE_ALL :: 7;
    } @bitfield
}

NavigationPathQueryParameters3D :: struct {  // 433

        #as using base: OpaqueClass;

    PathfindingAlgorithm :: enum s32 {
        PATHFINDING_ALGORITHM_ASTAR :: 0;
    }

    PathPostProcessing :: enum s32 {
        PATH_POSTPROCESSING_CORRIDORFUNNEL :: 0;
        PATH_POSTPROCESSING_EDGECENTERED :: 1;
        PATH_POSTPROCESSING_NONE :: 2;
    }

    PathMetadataFlags :: enum u64 {
        PATH_METADATA_INCLUDE_NONE :: 0;
        PATH_METADATA_INCLUDE_TYPES :: 1;
        PATH_METADATA_INCLUDE_RIDS :: 2;
        PATH_METADATA_INCLUDE_OWNERS :: 4;
        PATH_METADATA_INCLUDE_ALL :: 7;
    } @bitfield
}

NavigationPathQueryResult2D :: struct {  // 434

        #as using base: OpaqueClass;

    PathSegmentType :: enum s32 {
        PATH_SEGMENT_TYPE_REGION :: 0;
        PATH_SEGMENT_TYPE_LINK :: 1;
    }
}

NavigationPathQueryResult3D :: struct {  // 435

        #as using base: OpaqueClass;

    PathSegmentType :: enum s32 {
        PATH_SEGMENT_TYPE_REGION :: 0;
        PATH_SEGMENT_TYPE_LINK :: 1;
    }
}

NavigationPolygon :: struct {  // 436

        #as using base: OpaqueClass;

    SamplePartitionType :: enum s32 {
        SAMPLE_PARTITION_CONVEX_PARTITION :: 0;
        SAMPLE_PARTITION_TRIANGULATE :: 1;
        SAMPLE_PARTITION_MAX :: 2;
    }

    ParsedGeometryType :: enum s32 {
        PARSED_GEOMETRY_MESH_INSTANCES :: 0;
        PARSED_GEOMETRY_STATIC_COLLIDERS :: 1;
        PARSED_GEOMETRY_BOTH :: 2;
        PARSED_GEOMETRY_MAX :: 3;
    }

    SourceGeometryMode :: enum s32 {
        SOURCE_GEOMETRY_ROOT_NODE_CHILDREN :: 0;
        SOURCE_GEOMETRY_GROUPS_WITH_CHILDREN :: 1;
        SOURCE_GEOMETRY_GROUPS_EXPLICIT :: 2;
        SOURCE_GEOMETRY_MAX :: 3;
    }
}

NavigationRegion2D :: struct { #as using base: OpaqueClass; } // 437

NavigationRegion3D :: struct { #as using base: OpaqueClass; } // 438

NavigationServer2D :: struct { #as using base: OpaqueClass; } // 439

NavigationServer3D :: struct {  // 440

        #as using base: OpaqueClass;

    ProcessInfo :: enum s32 {
        INFO_ACTIVE_MAPS :: 0;
        INFO_REGION_COUNT :: 1;
        INFO_AGENT_COUNT :: 2;
        INFO_LINK_COUNT :: 3;
        INFO_POLYGON_COUNT :: 4;
        INFO_EDGE_COUNT :: 5;
        INFO_EDGE_MERGE_COUNT :: 6;
        INFO_EDGE_CONNECTION_COUNT :: 7;
        INFO_EDGE_FREE_COUNT :: 8;
        INFO_OBSTACLE_COUNT :: 9;
    }
}

NinePatchRect :: struct {  // 441

        #as using base: OpaqueClass;

    AxisStretchMode :: enum s32 {
        AXIS_STRETCH_MODE_STRETCH :: 0;
        AXIS_STRETCH_MODE_TILE :: 1;
        AXIS_STRETCH_MODE_TILE_FIT :: 2;
    }
}

Node :: struct {  // 442

        #as using base: OpaqueClass;

    ProcessMode :: enum s32 {
        PROCESS_MODE_INHERIT :: 0;
        PROCESS_MODE_PAUSABLE :: 1;
        PROCESS_MODE_WHEN_PAUSED :: 2;
        PROCESS_MODE_ALWAYS :: 3;
        PROCESS_MODE_DISABLED :: 4;
    }

    ProcessThreadGroup :: enum s32 {
        PROCESS_THREAD_GROUP_INHERIT :: 0;
        PROCESS_THREAD_GROUP_MAIN_THREAD :: 1;
        PROCESS_THREAD_GROUP_SUB_THREAD :: 2;
    }

    ProcessThreadMessages :: enum u64 {
        FLAG_PROCESS_THREAD_MESSAGES :: 1;
        FLAG_PROCESS_THREAD_MESSAGES_PHYSICS :: 2;
        FLAG_PROCESS_THREAD_MESSAGES_ALL :: 3;
    } @bitfield

    PhysicsInterpolationMode :: enum s32 {
        PHYSICS_INTERPOLATION_MODE_INHERIT :: 0;
        PHYSICS_INTERPOLATION_MODE_ON :: 1;
        PHYSICS_INTERPOLATION_MODE_OFF :: 2;
    }

    DuplicateFlags :: enum s32 {
        DUPLICATE_SIGNALS :: 1;
        DUPLICATE_GROUPS :: 2;
        DUPLICATE_SCRIPTS :: 4;
        DUPLICATE_USE_INSTANTIATION :: 8;
    }

    InternalMode :: enum s32 {
        INTERNAL_MODE_DISABLED :: 0;
        INTERNAL_MODE_FRONT :: 1;
        INTERNAL_MODE_BACK :: 2;
    }

    AutoTranslateMode :: enum s32 {
        AUTO_TRANSLATE_MODE_INHERIT :: 0;
        AUTO_TRANSLATE_MODE_ALWAYS :: 1;
        AUTO_TRANSLATE_MODE_DISABLED :: 2;
    }
}

Node2D :: struct { #as using base: OpaqueClass; } // 443

Node3D :: struct {  // 444

        #as using base: OpaqueClass;

    RotationEditMode :: enum s32 {
        ROTATION_EDIT_MODE_EULER :: 0;
        ROTATION_EDIT_MODE_QUATERNION :: 1;
        ROTATION_EDIT_MODE_BASIS :: 2;
    }
}

Node3DGizmo :: struct { #as using base: OpaqueClass; } // 445

Noise :: struct { #as using base: OpaqueClass; } // 446

NoiseTexture2D :: struct { #as using base: OpaqueClass; } // 447

NoiseTexture3D :: struct { #as using base: OpaqueClass; } // 448

ORMMaterial3D :: struct { #as using base: OpaqueClass; } // 449

OS :: struct {  // 450

        #as using base: OpaqueClass;

    RenderingDriver :: enum s32 {
        RENDERING_DRIVER_VULKAN :: 0;
        RENDERING_DRIVER_OPENGL3 :: 1;
        RENDERING_DRIVER_D3D12 :: 2;
        RENDERING_DRIVER_METAL :: 3;
    }

    SystemDir :: enum s32 {
        SYSTEM_DIR_DESKTOP :: 0;
        SYSTEM_DIR_DCIM :: 1;
        SYSTEM_DIR_DOCUMENTS :: 2;
        SYSTEM_DIR_DOWNLOADS :: 3;
        SYSTEM_DIR_MOVIES :: 4;
        SYSTEM_DIR_MUSIC :: 5;
        SYSTEM_DIR_PICTURES :: 6;
        SYSTEM_DIR_RINGTONES :: 7;
    }

    StdHandleType :: enum s32 {
        STD_HANDLE_INVALID :: 0;
        STD_HANDLE_CONSOLE :: 1;
        STD_HANDLE_FILE :: 2;
        STD_HANDLE_PIPE :: 3;
        STD_HANDLE_UNKNOWN :: 4;
    }
}

_Object :: struct {  // 451

        #as using base: OpaqueClass;

    ConnectFlags :: enum s32 {
        CONNECT_DEFERRED :: 1;
        CONNECT_PERSIST :: 2;
        CONNECT_ONE_SHOT :: 4;
        CONNECT_REFERENCE_COUNTED :: 8;
    }
}

Occluder3D :: struct { #as using base: OpaqueClass; } // 452

OccluderInstance3D :: struct { #as using base: OpaqueClass; } // 453

OccluderPolygon2D :: struct {  // 454

        #as using base: OpaqueClass;

    CullMode :: enum s32 {
        CULL_DISABLED :: 0;
        CULL_CLOCKWISE :: 1;
        CULL_COUNTER_CLOCKWISE :: 2;
    }
}

OfflineMultiplayerPeer :: struct { #as using base: OpaqueClass; } // 455

OggPacketSequence :: struct { #as using base: OpaqueClass; } // 456

OggPacketSequencePlayback :: struct { #as using base: OpaqueClass; } // 457

OmniLight3D :: struct {  // 458

        #as using base: OpaqueClass;

    ShadowMode :: enum s32 {
        SHADOW_DUAL_PARABOLOID :: 0;
        SHADOW_CUBE :: 1;
    }
}

OpenXRAPIExtension :: struct {  // 459

        #as using base: OpaqueClass;

    OpenXRAlphaBlendModeSupport :: enum s32 {
        OPENXR_ALPHA_BLEND_MODE_SUPPORT_NONE :: 0;
        OPENXR_ALPHA_BLEND_MODE_SUPPORT_REAL :: 1;
        OPENXR_ALPHA_BLEND_MODE_SUPPORT_EMULATING :: 2;
    }
}

OpenXRAction :: struct {  // 460

        #as using base: OpaqueClass;

    ActionType :: enum s32 {
        OPENXR_ACTION_BOOL :: 0;
        OPENXR_ACTION_FLOAT :: 1;
        OPENXR_ACTION_VECTOR2 :: 2;
        OPENXR_ACTION_POSE :: 3;
    }
}

OpenXRActionBindingModifier :: struct { #as using base: OpaqueClass; } // 461

OpenXRActionMap :: struct { #as using base: OpaqueClass; } // 462

OpenXRActionSet :: struct { #as using base: OpaqueClass; } // 463

OpenXRAnalogThresholdModifier :: struct { #as using base: OpaqueClass; } // 464

OpenXRBindingModifier :: struct { #as using base: OpaqueClass; } // 465

OpenXRBindingModifierEditor :: struct { #as using base: OpaqueClass; } // 466

OpenXRCompositionLayer :: struct { #as using base: OpaqueClass; } // 467

OpenXRCompositionLayerCylinder :: struct { #as using base: OpaqueClass; } // 468

OpenXRCompositionLayerEquirect :: struct { #as using base: OpaqueClass; } // 469

OpenXRCompositionLayerQuad :: struct { #as using base: OpaqueClass; } // 470

OpenXRDpadBindingModifier :: struct { #as using base: OpaqueClass; } // 471

OpenXRExtensionWrapperExtension :: struct { #as using base: OpaqueClass; } // 472

OpenXRHand :: struct {  // 473

        #as using base: OpaqueClass;

    Hands :: enum s32 {
        HAND_LEFT :: 0;
        HAND_RIGHT :: 1;
        HAND_MAX :: 2;
    }

    MotionRange :: enum s32 {
        MOTION_RANGE_UNOBSTRUCTED :: 0;
        MOTION_RANGE_CONFORM_TO_CONTROLLER :: 1;
        MOTION_RANGE_MAX :: 2;
    }

    SkeletonRig :: enum s32 {
        SKELETON_RIG_OPENXR :: 0;
        SKELETON_RIG_HUMANOID :: 1;
        SKELETON_RIG_MAX :: 2;
    }

    BoneUpdate :: enum s32 {
        BONE_UPDATE_FULL :: 0;
        BONE_UPDATE_ROTATION_ONLY :: 1;
        BONE_UPDATE_MAX :: 2;
    }
}

OpenXRHapticBase :: struct { #as using base: OpaqueClass; } // 474

OpenXRHapticVibration :: struct { #as using base: OpaqueClass; } // 475

OpenXRIPBinding :: struct { #as using base: OpaqueClass; } // 476

OpenXRIPBindingModifier :: struct { #as using base: OpaqueClass; } // 477

OpenXRInteractionProfile :: struct { #as using base: OpaqueClass; } // 478

OpenXRInteractionProfileEditor :: struct { #as using base: OpaqueClass; } // 479

OpenXRInteractionProfileEditorBase :: struct { #as using base: OpaqueClass; } // 480

OpenXRInteractionProfileMetadata :: struct { #as using base: OpaqueClass; } // 481

OpenXRInterface :: struct {  // 482

        #as using base: OpaqueClass;

    Hand :: enum s32 {
        HAND_LEFT :: 0;
        HAND_RIGHT :: 1;
        HAND_MAX :: 2;
    }

    HandMotionRange :: enum s32 {
        HAND_MOTION_RANGE_UNOBSTRUCTED :: 0;
        HAND_MOTION_RANGE_CONFORM_TO_CONTROLLER :: 1;
        HAND_MOTION_RANGE_MAX :: 2;
    }

    HandTrackedSource :: enum s32 {
        HAND_TRACKED_SOURCE_UNKNOWN :: 0;
        HAND_TRACKED_SOURCE_UNOBSTRUCTED :: 1;
        HAND_TRACKED_SOURCE_CONTROLLER :: 2;
        HAND_TRACKED_SOURCE_MAX :: 3;
    }

    HandJoints :: enum s32 {
        HAND_JOINT_PALM :: 0;
        HAND_JOINT_WRIST :: 1;
        HAND_JOINT_THUMB_METACARPAL :: 2;
        HAND_JOINT_THUMB_PROXIMAL :: 3;
        HAND_JOINT_THUMB_DISTAL :: 4;
        HAND_JOINT_THUMB_TIP :: 5;
        HAND_JOINT_INDEX_METACARPAL :: 6;
        HAND_JOINT_INDEX_PROXIMAL :: 7;
        HAND_JOINT_INDEX_INTERMEDIATE :: 8;
        HAND_JOINT_INDEX_DISTAL :: 9;
        HAND_JOINT_INDEX_TIP :: 10;
        HAND_JOINT_MIDDLE_METACARPAL :: 11;
        HAND_JOINT_MIDDLE_PROXIMAL :: 12;
        HAND_JOINT_MIDDLE_INTERMEDIATE :: 13;
        HAND_JOINT_MIDDLE_DISTAL :: 14;
        HAND_JOINT_MIDDLE_TIP :: 15;
        HAND_JOINT_RING_METACARPAL :: 16;
        HAND_JOINT_RING_PROXIMAL :: 17;
        HAND_JOINT_RING_INTERMEDIATE :: 18;
        HAND_JOINT_RING_DISTAL :: 19;
        HAND_JOINT_RING_TIP :: 20;
        HAND_JOINT_LITTLE_METACARPAL :: 21;
        HAND_JOINT_LITTLE_PROXIMAL :: 22;
        HAND_JOINT_LITTLE_INTERMEDIATE :: 23;
        HAND_JOINT_LITTLE_DISTAL :: 24;
        HAND_JOINT_LITTLE_TIP :: 25;
        HAND_JOINT_MAX :: 26;
    }

    HandJointFlags :: enum u64 {
        HAND_JOINT_NONE :: 0;
        HAND_JOINT_ORIENTATION_VALID :: 1;
        HAND_JOINT_ORIENTATION_TRACKED :: 2;
        HAND_JOINT_POSITION_VALID :: 4;
        HAND_JOINT_POSITION_TRACKED :: 8;
        HAND_JOINT_LINEAR_VELOCITY_VALID :: 16;
        HAND_JOINT_ANGULAR_VELOCITY_VALID :: 32;
    } @bitfield
}

OpenXRVisibilityMask :: struct { #as using base: OpaqueClass; } // 483

OptimizedTranslation :: struct { #as using base: OpaqueClass; } // 484

OptionButton :: struct { #as using base: OpaqueClass; } // 485

PCKPacker :: struct { #as using base: OpaqueClass; } // 486

PackedDataContainer :: struct { #as using base: OpaqueClass; } // 487

PackedDataContainerRef :: struct { #as using base: OpaqueClass; } // 488

PackedScene :: struct {  // 489

        #as using base: OpaqueClass;

    GenEditState :: enum s32 {
        GEN_EDIT_STATE_DISABLED :: 0;
        GEN_EDIT_STATE_INSTANCE :: 1;
        GEN_EDIT_STATE_MAIN :: 2;
        GEN_EDIT_STATE_MAIN_INHERITED :: 3;
    }
}

PacketPeer :: struct { #as using base: OpaqueClass; } // 490

PacketPeerDTLS :: struct {  // 491

        #as using base: OpaqueClass;

    Status :: enum s32 {
        STATUS_DISCONNECTED :: 0;
        STATUS_HANDSHAKING :: 1;
        STATUS_CONNECTED :: 2;
        STATUS_ERROR :: 3;
        STATUS_ERROR_HOSTNAME_MISMATCH :: 4;
    }
}

PacketPeerExtension :: struct { #as using base: OpaqueClass; } // 492

PacketPeerStream :: struct { #as using base: OpaqueClass; } // 493

PacketPeerUDP :: struct { #as using base: OpaqueClass; } // 494

Panel :: struct { #as using base: OpaqueClass; } // 495

PanelContainer :: struct { #as using base: OpaqueClass; } // 496

PanoramaSkyMaterial :: struct { #as using base: OpaqueClass; } // 497

Parallax2D :: struct { #as using base: OpaqueClass; } // 498

ParallaxBackground :: struct { #as using base: OpaqueClass; } // 499

ParallaxLayer :: struct { #as using base: OpaqueClass; } // 500

ParticleProcessMaterial :: struct {  // 501

        #as using base: OpaqueClass;

    Parameter :: enum s32 {
        PARAM_INITIAL_LINEAR_VELOCITY :: 0;
        PARAM_ANGULAR_VELOCITY :: 1;
        PARAM_ORBIT_VELOCITY :: 2;
        PARAM_LINEAR_ACCEL :: 3;
        PARAM_RADIAL_ACCEL :: 4;
        PARAM_TANGENTIAL_ACCEL :: 5;
        PARAM_DAMPING :: 6;
        PARAM_ANGLE :: 7;
        PARAM_SCALE :: 8;
        PARAM_HUE_VARIATION :: 9;
        PARAM_ANIM_SPEED :: 10;
        PARAM_ANIM_OFFSET :: 11;
        PARAM_RADIAL_VELOCITY :: 15;
        PARAM_DIRECTIONAL_VELOCITY :: 16;
        PARAM_SCALE_OVER_VELOCITY :: 17;
        PARAM_MAX :: 18;
        PARAM_TURB_VEL_INFLUENCE :: 13;
        PARAM_TURB_INIT_DISPLACEMENT :: 14;
        PARAM_TURB_INFLUENCE_OVER_LIFE :: 12;
    }

    ParticleFlags :: enum s32 {
        PARTICLE_FLAG_ALIGN_Y_TO_VELOCITY :: 0;
        PARTICLE_FLAG_ROTATE_Y :: 1;
        PARTICLE_FLAG_DISABLE_Z :: 2;
        PARTICLE_FLAG_DAMPING_AS_FRICTION :: 3;
        PARTICLE_FLAG_MAX :: 4;
    }

    EmissionShape :: enum s32 {
        EMISSION_SHAPE_POINT :: 0;
        EMISSION_SHAPE_SPHERE :: 1;
        EMISSION_SHAPE_SPHERE_SURFACE :: 2;
        EMISSION_SHAPE_BOX :: 3;
        EMISSION_SHAPE_POINTS :: 4;
        EMISSION_SHAPE_DIRECTED_POINTS :: 5;
        EMISSION_SHAPE_RING :: 6;
        EMISSION_SHAPE_MAX :: 7;
    }

    SubEmitterMode :: enum s32 {
        SUB_EMITTER_DISABLED :: 0;
        SUB_EMITTER_CONSTANT :: 1;
        SUB_EMITTER_AT_END :: 2;
        SUB_EMITTER_AT_COLLISION :: 3;
        SUB_EMITTER_AT_START :: 4;
        SUB_EMITTER_MAX :: 5;
    }

    CollisionMode :: enum s32 {
        COLLISION_DISABLED :: 0;
        COLLISION_RIGID :: 1;
        COLLISION_HIDE_ON_CONTACT :: 2;
        COLLISION_MAX :: 3;
    }
}

Path2D :: struct { #as using base: OpaqueClass; } // 502

Path3D :: struct { #as using base: OpaqueClass; } // 503

PathFollow2D :: struct { #as using base: OpaqueClass; } // 504

PathFollow3D :: struct {  // 505

        #as using base: OpaqueClass;

    RotationMode :: enum s32 {
        ROTATION_NONE :: 0;
        ROTATION_Y :: 1;
        ROTATION_XY :: 2;
        ROTATION_XYZ :: 3;
        ROTATION_ORIENTED :: 4;
    }
}

Performance :: struct {  // 506

        #as using base: OpaqueClass;

    Monitor :: enum s32 {
        TIME_FPS :: 0;
        TIME_PROCESS :: 1;
        TIME_PHYSICS_PROCESS :: 2;
        TIME_NAVIGATION_PROCESS :: 3;
        MEMORY_STATIC :: 4;
        MEMORY_STATIC_MAX :: 5;
        MEMORY_MESSAGE_BUFFER_MAX :: 6;
        OBJECT_COUNT :: 7;
        OBJECT_RESOURCE_COUNT :: 8;
        OBJECT_NODE_COUNT :: 9;
        OBJECT_ORPHAN_NODE_COUNT :: 10;
        RENDER_TOTAL_OBJECTS_IN_FRAME :: 11;
        RENDER_TOTAL_PRIMITIVES_IN_FRAME :: 12;
        RENDER_TOTAL_DRAW_CALLS_IN_FRAME :: 13;
        RENDER_VIDEO_MEM_USED :: 14;
        RENDER_TEXTURE_MEM_USED :: 15;
        RENDER_BUFFER_MEM_USED :: 16;
        PHYSICS_2D_ACTIVE_OBJECTS :: 17;
        PHYSICS_2D_COLLISION_PAIRS :: 18;
        PHYSICS_2D_ISLAND_COUNT :: 19;
        PHYSICS_3D_ACTIVE_OBJECTS :: 20;
        PHYSICS_3D_COLLISION_PAIRS :: 21;
        PHYSICS_3D_ISLAND_COUNT :: 22;
        AUDIO_OUTPUT_LATENCY :: 23;
        NAVIGATION_ACTIVE_MAPS :: 24;
        NAVIGATION_REGION_COUNT :: 25;
        NAVIGATION_AGENT_COUNT :: 26;
        NAVIGATION_LINK_COUNT :: 27;
        NAVIGATION_POLYGON_COUNT :: 28;
        NAVIGATION_EDGE_COUNT :: 29;
        NAVIGATION_EDGE_MERGE_COUNT :: 30;
        NAVIGATION_EDGE_CONNECTION_COUNT :: 31;
        NAVIGATION_EDGE_FREE_COUNT :: 32;
        NAVIGATION_OBSTACLE_COUNT :: 33;
        PIPELINE_COMPILATIONS_CANVAS :: 34;
        PIPELINE_COMPILATIONS_MESH :: 35;
        PIPELINE_COMPILATIONS_SURFACE :: 36;
        PIPELINE_COMPILATIONS_DRAW :: 37;
        PIPELINE_COMPILATIONS_SPECIALIZATION :: 38;
        MONITOR_MAX :: 39;
    }
}

PhysicalBone2D :: struct { #as using base: OpaqueClass; } // 507

PhysicalBone3D :: struct {  // 508

        #as using base: OpaqueClass;

    DampMode :: enum s32 {
        DAMP_MODE_COMBINE :: 0;
        DAMP_MODE_REPLACE :: 1;
    }

    JointType :: enum s32 {
        JOINT_TYPE_NONE :: 0;
        JOINT_TYPE_PIN :: 1;
        JOINT_TYPE_CONE :: 2;
        JOINT_TYPE_HINGE :: 3;
        JOINT_TYPE_SLIDER :: 4;
        JOINT_TYPE_6DOF :: 5;
    }
}

PhysicalBoneSimulator3D :: struct { #as using base: OpaqueClass; } // 509

PhysicalSkyMaterial :: struct { #as using base: OpaqueClass; } // 510

PhysicsBody2D :: struct { #as using base: OpaqueClass; } // 511

PhysicsBody3D :: struct { #as using base: OpaqueClass; } // 512

PhysicsDirectBodyState2D :: struct { #as using base: OpaqueClass; } // 513

PhysicsDirectBodyState2DExtension :: struct { #as using base: OpaqueClass; } // 514

PhysicsDirectBodyState3D :: struct { #as using base: OpaqueClass; } // 515

PhysicsDirectBodyState3DExtension :: struct { #as using base: OpaqueClass; } // 516

PhysicsDirectSpaceState2D :: struct { #as using base: OpaqueClass; } // 517

PhysicsDirectSpaceState2DExtension :: struct { #as using base: OpaqueClass; } // 518

PhysicsDirectSpaceState3D :: struct { #as using base: OpaqueClass; } // 519

PhysicsDirectSpaceState3DExtension :: struct { #as using base: OpaqueClass; } // 520

PhysicsMaterial :: struct { #as using base: OpaqueClass; } // 521

PhysicsPointQueryParameters2D :: struct { #as using base: OpaqueClass; } // 522

PhysicsPointQueryParameters3D :: struct { #as using base: OpaqueClass; } // 523

PhysicsRayQueryParameters2D :: struct { #as using base: OpaqueClass; } // 524

PhysicsRayQueryParameters3D :: struct { #as using base: OpaqueClass; } // 525

PhysicsServer2D :: struct {  // 526

        #as using base: OpaqueClass;

    SpaceParameter :: enum s32 {
        SPACE_PARAM_CONTACT_RECYCLE_RADIUS :: 0;
        SPACE_PARAM_CONTACT_MAX_SEPARATION :: 1;
        SPACE_PARAM_CONTACT_MAX_ALLOWED_PENETRATION :: 2;
        SPACE_PARAM_CONTACT_DEFAULT_BIAS :: 3;
        SPACE_PARAM_BODY_LINEAR_VELOCITY_SLEEP_THRESHOLD :: 4;
        SPACE_PARAM_BODY_ANGULAR_VELOCITY_SLEEP_THRESHOLD :: 5;
        SPACE_PARAM_BODY_TIME_TO_SLEEP :: 6;
        SPACE_PARAM_CONSTRAINT_DEFAULT_BIAS :: 7;
        SPACE_PARAM_SOLVER_ITERATIONS :: 8;
    }

    ShapeType :: enum s32 {
        SHAPE_WORLD_BOUNDARY :: 0;
        SHAPE_SEPARATION_RAY :: 1;
        SHAPE_SEGMENT :: 2;
        SHAPE_CIRCLE :: 3;
        SHAPE_RECTANGLE :: 4;
        SHAPE_CAPSULE :: 5;
        SHAPE_CONVEX_POLYGON :: 6;
        SHAPE_CONCAVE_POLYGON :: 7;
        SHAPE_CUSTOM :: 8;
    }

    AreaParameter :: enum s32 {
        AREA_PARAM_GRAVITY_OVERRIDE_MODE :: 0;
        AREA_PARAM_GRAVITY :: 1;
        AREA_PARAM_GRAVITY_VECTOR :: 2;
        AREA_PARAM_GRAVITY_IS_POINT :: 3;
        AREA_PARAM_GRAVITY_POINT_UNIT_DISTANCE :: 4;
        AREA_PARAM_LINEAR_DAMP_OVERRIDE_MODE :: 5;
        AREA_PARAM_LINEAR_DAMP :: 6;
        AREA_PARAM_ANGULAR_DAMP_OVERRIDE_MODE :: 7;
        AREA_PARAM_ANGULAR_DAMP :: 8;
        AREA_PARAM_PRIORITY :: 9;
    }

    AreaSpaceOverrideMode :: enum s32 {
        AREA_SPACE_OVERRIDE_DISABLED :: 0;
        AREA_SPACE_OVERRIDE_COMBINE :: 1;
        AREA_SPACE_OVERRIDE_COMBINE_REPLACE :: 2;
        AREA_SPACE_OVERRIDE_REPLACE :: 3;
        AREA_SPACE_OVERRIDE_REPLACE_COMBINE :: 4;
    }

    BodyMode :: enum s32 {
        BODY_MODE_STATIC :: 0;
        BODY_MODE_KINEMATIC :: 1;
        BODY_MODE_RIGID :: 2;
        BODY_MODE_RIGID_LINEAR :: 3;
    }

    BodyParameter :: enum s32 {
        BODY_PARAM_BOUNCE :: 0;
        BODY_PARAM_FRICTION :: 1;
        BODY_PARAM_MASS :: 2;
        BODY_PARAM_INERTIA :: 3;
        BODY_PARAM_CENTER_OF_MASS :: 4;
        BODY_PARAM_GRAVITY_SCALE :: 5;
        BODY_PARAM_LINEAR_DAMP_MODE :: 6;
        BODY_PARAM_ANGULAR_DAMP_MODE :: 7;
        BODY_PARAM_LINEAR_DAMP :: 8;
        BODY_PARAM_ANGULAR_DAMP :: 9;
        BODY_PARAM_MAX :: 10;
    }

    BodyDampMode :: enum s32 {
        BODY_DAMP_MODE_COMBINE :: 0;
        BODY_DAMP_MODE_REPLACE :: 1;
    }

    BodyState :: enum s32 {
        BODY_STATE_TRANSFORM :: 0;
        BODY_STATE_LINEAR_VELOCITY :: 1;
        BODY_STATE_ANGULAR_VELOCITY :: 2;
        BODY_STATE_SLEEPING :: 3;
        BODY_STATE_CAN_SLEEP :: 4;
    }

    JointType :: enum s32 {
        JOINT_TYPE_PIN :: 0;
        JOINT_TYPE_GROOVE :: 1;
        JOINT_TYPE_DAMPED_SPRING :: 2;
        JOINT_TYPE_MAX :: 3;
    }

    JointParam :: enum s32 {
        JOINT_PARAM_BIAS :: 0;
        JOINT_PARAM_MAX_BIAS :: 1;
        JOINT_PARAM_MAX_FORCE :: 2;
    }

    PinJointParam :: enum s32 {
        PIN_JOINT_SOFTNESS :: 0;
        PIN_JOINT_LIMIT_UPPER :: 1;
        PIN_JOINT_LIMIT_LOWER :: 2;
        PIN_JOINT_MOTOR_TARGET_VELOCITY :: 3;
    }

    PinJointFlag :: enum s32 {
        PIN_JOINT_FLAG_ANGULAR_LIMIT_ENABLED :: 0;
        PIN_JOINT_FLAG_MOTOR_ENABLED :: 1;
    }

    DampedSpringParam :: enum s32 {
        DAMPED_SPRING_REST_LENGTH :: 0;
        DAMPED_SPRING_STIFFNESS :: 1;
        DAMPED_SPRING_DAMPING :: 2;
    }

    CCDMode :: enum s32 {
        CCD_MODE_DISABLED :: 0;
        CCD_MODE_CAST_RAY :: 1;
        CCD_MODE_CAST_SHAPE :: 2;
    }

    AreaBodyStatus :: enum s32 {
        AREA_BODY_ADDED :: 0;
        AREA_BODY_REMOVED :: 1;
    }

    ProcessInfo :: enum s32 {
        INFO_ACTIVE_OBJECTS :: 0;
        INFO_COLLISION_PAIRS :: 1;
        INFO_ISLAND_COUNT :: 2;
    }
}

PhysicsServer2DExtension :: struct { #as using base: OpaqueClass; } // 527

PhysicsServer2DManager :: struct { #as using base: OpaqueClass; } // 528

PhysicsServer3D :: struct {  // 529

        #as using base: OpaqueClass;

    JointType :: enum s32 {
        JOINT_TYPE_PIN :: 0;
        JOINT_TYPE_HINGE :: 1;
        JOINT_TYPE_SLIDER :: 2;
        JOINT_TYPE_CONE_TWIST :: 3;
        JOINT_TYPE_6DOF :: 4;
        JOINT_TYPE_MAX :: 5;
    }

    PinJointParam :: enum s32 {
        PIN_JOINT_BIAS :: 0;
        PIN_JOINT_DAMPING :: 1;
        PIN_JOINT_IMPULSE_CLAMP :: 2;
    }

    HingeJointParam :: enum s32 {
        HINGE_JOINT_BIAS :: 0;
        HINGE_JOINT_LIMIT_UPPER :: 1;
        HINGE_JOINT_LIMIT_LOWER :: 2;
        HINGE_JOINT_LIMIT_BIAS :: 3;
        HINGE_JOINT_LIMIT_SOFTNESS :: 4;
        HINGE_JOINT_LIMIT_RELAXATION :: 5;
        HINGE_JOINT_MOTOR_TARGET_VELOCITY :: 6;
        HINGE_JOINT_MOTOR_MAX_IMPULSE :: 7;
    }

    HingeJointFlag :: enum s32 {
        HINGE_JOINT_FLAG_USE_LIMIT :: 0;
        HINGE_JOINT_FLAG_ENABLE_MOTOR :: 1;
    }

    SliderJointParam :: enum s32 {
        SLIDER_JOINT_LINEAR_LIMIT_UPPER :: 0;
        SLIDER_JOINT_LINEAR_LIMIT_LOWER :: 1;
        SLIDER_JOINT_LINEAR_LIMIT_SOFTNESS :: 2;
        SLIDER_JOINT_LINEAR_LIMIT_RESTITUTION :: 3;
        SLIDER_JOINT_LINEAR_LIMIT_DAMPING :: 4;
        SLIDER_JOINT_LINEAR_MOTION_SOFTNESS :: 5;
        SLIDER_JOINT_LINEAR_MOTION_RESTITUTION :: 6;
        SLIDER_JOINT_LINEAR_MOTION_DAMPING :: 7;
        SLIDER_JOINT_LINEAR_ORTHOGONAL_SOFTNESS :: 8;
        SLIDER_JOINT_LINEAR_ORTHOGONAL_RESTITUTION :: 9;
        SLIDER_JOINT_LINEAR_ORTHOGONAL_DAMPING :: 10;
        SLIDER_JOINT_ANGULAR_LIMIT_UPPER :: 11;
        SLIDER_JOINT_ANGULAR_LIMIT_LOWER :: 12;
        SLIDER_JOINT_ANGULAR_LIMIT_SOFTNESS :: 13;
        SLIDER_JOINT_ANGULAR_LIMIT_RESTITUTION :: 14;
        SLIDER_JOINT_ANGULAR_LIMIT_DAMPING :: 15;
        SLIDER_JOINT_ANGULAR_MOTION_SOFTNESS :: 16;
        SLIDER_JOINT_ANGULAR_MOTION_RESTITUTION :: 17;
        SLIDER_JOINT_ANGULAR_MOTION_DAMPING :: 18;
        SLIDER_JOINT_ANGULAR_ORTHOGONAL_SOFTNESS :: 19;
        SLIDER_JOINT_ANGULAR_ORTHOGONAL_RESTITUTION :: 20;
        SLIDER_JOINT_ANGULAR_ORTHOGONAL_DAMPING :: 21;
        SLIDER_JOINT_MAX :: 22;
    }

    ConeTwistJointParam :: enum s32 {
        CONE_TWIST_JOINT_SWING_SPAN :: 0;
        CONE_TWIST_JOINT_TWIST_SPAN :: 1;
        CONE_TWIST_JOINT_BIAS :: 2;
        CONE_TWIST_JOINT_SOFTNESS :: 3;
        CONE_TWIST_JOINT_RELAXATION :: 4;
    }

    G6DOFJointAxisParam :: enum s32 {
        G6DOF_JOINT_LINEAR_LOWER_LIMIT :: 0;
        G6DOF_JOINT_LINEAR_UPPER_LIMIT :: 1;
        G6DOF_JOINT_LINEAR_LIMIT_SOFTNESS :: 2;
        G6DOF_JOINT_LINEAR_RESTITUTION :: 3;
        G6DOF_JOINT_LINEAR_DAMPING :: 4;
        G6DOF_JOINT_LINEAR_MOTOR_TARGET_VELOCITY :: 5;
        G6DOF_JOINT_LINEAR_MOTOR_FORCE_LIMIT :: 6;
        G6DOF_JOINT_LINEAR_SPRING_STIFFNESS :: 7;
        G6DOF_JOINT_LINEAR_SPRING_DAMPING :: 8;
        G6DOF_JOINT_LINEAR_SPRING_EQUILIBRIUM_POINT :: 9;
        G6DOF_JOINT_ANGULAR_LOWER_LIMIT :: 10;
        G6DOF_JOINT_ANGULAR_UPPER_LIMIT :: 11;
        G6DOF_JOINT_ANGULAR_LIMIT_SOFTNESS :: 12;
        G6DOF_JOINT_ANGULAR_DAMPING :: 13;
        G6DOF_JOINT_ANGULAR_RESTITUTION :: 14;
        G6DOF_JOINT_ANGULAR_FORCE_LIMIT :: 15;
        G6DOF_JOINT_ANGULAR_ERP :: 16;
        G6DOF_JOINT_ANGULAR_MOTOR_TARGET_VELOCITY :: 17;
        G6DOF_JOINT_ANGULAR_MOTOR_FORCE_LIMIT :: 18;
        G6DOF_JOINT_ANGULAR_SPRING_STIFFNESS :: 19;
        G6DOF_JOINT_ANGULAR_SPRING_DAMPING :: 20;
        G6DOF_JOINT_ANGULAR_SPRING_EQUILIBRIUM_POINT :: 21;
        G6DOF_JOINT_MAX :: 22;
    }

    G6DOFJointAxisFlag :: enum s32 {
        G6DOF_JOINT_FLAG_ENABLE_LINEAR_LIMIT :: 0;
        G6DOF_JOINT_FLAG_ENABLE_ANGULAR_LIMIT :: 1;
        G6DOF_JOINT_FLAG_ENABLE_ANGULAR_SPRING :: 2;
        G6DOF_JOINT_FLAG_ENABLE_LINEAR_SPRING :: 3;
        G6DOF_JOINT_FLAG_ENABLE_MOTOR :: 4;
        G6DOF_JOINT_FLAG_ENABLE_LINEAR_MOTOR :: 5;
        G6DOF_JOINT_FLAG_MAX :: 6;
    }

    ShapeType :: enum s32 {
        SHAPE_WORLD_BOUNDARY :: 0;
        SHAPE_SEPARATION_RAY :: 1;
        SHAPE_SPHERE :: 2;
        SHAPE_BOX :: 3;
        SHAPE_CAPSULE :: 4;
        SHAPE_CYLINDER :: 5;
        SHAPE_CONVEX_POLYGON :: 6;
        SHAPE_CONCAVE_POLYGON :: 7;
        SHAPE_HEIGHTMAP :: 8;
        SHAPE_SOFT_BODY :: 9;
        SHAPE_CUSTOM :: 10;
    }

    AreaParameter :: enum s32 {
        AREA_PARAM_GRAVITY_OVERRIDE_MODE :: 0;
        AREA_PARAM_GRAVITY :: 1;
        AREA_PARAM_GRAVITY_VECTOR :: 2;
        AREA_PARAM_GRAVITY_IS_POINT :: 3;
        AREA_PARAM_GRAVITY_POINT_UNIT_DISTANCE :: 4;
        AREA_PARAM_LINEAR_DAMP_OVERRIDE_MODE :: 5;
        AREA_PARAM_LINEAR_DAMP :: 6;
        AREA_PARAM_ANGULAR_DAMP_OVERRIDE_MODE :: 7;
        AREA_PARAM_ANGULAR_DAMP :: 8;
        AREA_PARAM_PRIORITY :: 9;
        AREA_PARAM_WIND_FORCE_MAGNITUDE :: 10;
        AREA_PARAM_WIND_SOURCE :: 11;
        AREA_PARAM_WIND_DIRECTION :: 12;
        AREA_PARAM_WIND_ATTENUATION_FACTOR :: 13;
    }

    AreaSpaceOverrideMode :: enum s32 {
        AREA_SPACE_OVERRIDE_DISABLED :: 0;
        AREA_SPACE_OVERRIDE_COMBINE :: 1;
        AREA_SPACE_OVERRIDE_COMBINE_REPLACE :: 2;
        AREA_SPACE_OVERRIDE_REPLACE :: 3;
        AREA_SPACE_OVERRIDE_REPLACE_COMBINE :: 4;
    }

    BodyMode :: enum s32 {
        BODY_MODE_STATIC :: 0;
        BODY_MODE_KINEMATIC :: 1;
        BODY_MODE_RIGID :: 2;
        BODY_MODE_RIGID_LINEAR :: 3;
    }

    BodyParameter :: enum s32 {
        BODY_PARAM_BOUNCE :: 0;
        BODY_PARAM_FRICTION :: 1;
        BODY_PARAM_MASS :: 2;
        BODY_PARAM_INERTIA :: 3;
        BODY_PARAM_CENTER_OF_MASS :: 4;
        BODY_PARAM_GRAVITY_SCALE :: 5;
        BODY_PARAM_LINEAR_DAMP_MODE :: 6;
        BODY_PARAM_ANGULAR_DAMP_MODE :: 7;
        BODY_PARAM_LINEAR_DAMP :: 8;
        BODY_PARAM_ANGULAR_DAMP :: 9;
        BODY_PARAM_MAX :: 10;
    }

    BodyDampMode :: enum s32 {
        BODY_DAMP_MODE_COMBINE :: 0;
        BODY_DAMP_MODE_REPLACE :: 1;
    }

    BodyState :: enum s32 {
        BODY_STATE_TRANSFORM :: 0;
        BODY_STATE_LINEAR_VELOCITY :: 1;
        BODY_STATE_ANGULAR_VELOCITY :: 2;
        BODY_STATE_SLEEPING :: 3;
        BODY_STATE_CAN_SLEEP :: 4;
    }

    AreaBodyStatus :: enum s32 {
        AREA_BODY_ADDED :: 0;
        AREA_BODY_REMOVED :: 1;
    }

    ProcessInfo :: enum s32 {
        INFO_ACTIVE_OBJECTS :: 0;
        INFO_COLLISION_PAIRS :: 1;
        INFO_ISLAND_COUNT :: 2;
    }

    SpaceParameter :: enum s32 {
        SPACE_PARAM_CONTACT_RECYCLE_RADIUS :: 0;
        SPACE_PARAM_CONTACT_MAX_SEPARATION :: 1;
        SPACE_PARAM_CONTACT_MAX_ALLOWED_PENETRATION :: 2;
        SPACE_PARAM_CONTACT_DEFAULT_BIAS :: 3;
        SPACE_PARAM_BODY_LINEAR_VELOCITY_SLEEP_THRESHOLD :: 4;
        SPACE_PARAM_BODY_ANGULAR_VELOCITY_SLEEP_THRESHOLD :: 5;
        SPACE_PARAM_BODY_TIME_TO_SLEEP :: 6;
        SPACE_PARAM_SOLVER_ITERATIONS :: 7;
    }

    BodyAxis :: enum s32 {
        BODY_AXIS_LINEAR_X :: 1;
        BODY_AXIS_LINEAR_Y :: 2;
        BODY_AXIS_LINEAR_Z :: 4;
        BODY_AXIS_ANGULAR_X :: 8;
        BODY_AXIS_ANGULAR_Y :: 16;
        BODY_AXIS_ANGULAR_Z :: 32;
    }
}

PhysicsServer3DExtension :: struct { #as using base: OpaqueClass; } // 530

PhysicsServer3DManager :: struct { #as using base: OpaqueClass; } // 531

PhysicsServer3DRenderingServerHandler :: struct { #as using base: OpaqueClass; } // 532

PhysicsShapeQueryParameters2D :: struct { #as using base: OpaqueClass; } // 533

PhysicsShapeQueryParameters3D :: struct { #as using base: OpaqueClass; } // 534

PhysicsTestMotionParameters2D :: struct { #as using base: OpaqueClass; } // 535

PhysicsTestMotionParameters3D :: struct { #as using base: OpaqueClass; } // 536

PhysicsTestMotionResult2D :: struct { #as using base: OpaqueClass; } // 537

PhysicsTestMotionResult3D :: struct { #as using base: OpaqueClass; } // 538

PinJoint2D :: struct { #as using base: OpaqueClass; } // 539

PinJoint3D :: struct {  // 540

        #as using base: OpaqueClass;

    Param :: enum s32 {
        PARAM_BIAS :: 0;
        PARAM_DAMPING :: 1;
        PARAM_IMPULSE_CLAMP :: 2;
    }
}

PlaceholderCubemap :: struct { #as using base: OpaqueClass; } // 541

PlaceholderCubemapArray :: struct { #as using base: OpaqueClass; } // 542

PlaceholderMaterial :: struct { #as using base: OpaqueClass; } // 543

PlaceholderMesh :: struct { #as using base: OpaqueClass; } // 544

PlaceholderTexture2D :: struct { #as using base: OpaqueClass; } // 545

PlaceholderTexture2DArray :: struct { #as using base: OpaqueClass; } // 546

PlaceholderTexture3D :: struct { #as using base: OpaqueClass; } // 547

PlaceholderTextureLayered :: struct { #as using base: OpaqueClass; } // 548

PlaneMesh :: struct {  // 549

        #as using base: OpaqueClass;

    Orientation :: enum s32 {
        FACE_X :: 0;
        FACE_Y :: 1;
        FACE_Z :: 2;
    }
}

PointLight2D :: struct { #as using base: OpaqueClass; } // 550

PointMesh :: struct { #as using base: OpaqueClass; } // 551

Polygon2D :: struct { #as using base: OpaqueClass; } // 552

PolygonOccluder3D :: struct { #as using base: OpaqueClass; } // 553

PolygonPathFinder :: struct { #as using base: OpaqueClass; } // 554

Popup :: struct { #as using base: OpaqueClass; } // 555

PopupMenu :: struct { #as using base: OpaqueClass; } // 556

PopupPanel :: struct { #as using base: OpaqueClass; } // 557

PortableCompressedTexture2D :: struct {  // 558

        #as using base: OpaqueClass;

    CompressionMode :: enum s32 {
        COMPRESSION_MODE_LOSSLESS :: 0;
        COMPRESSION_MODE_LOSSY :: 1;
        COMPRESSION_MODE_BASIS_UNIVERSAL :: 2;
        COMPRESSION_MODE_S3TC :: 3;
        COMPRESSION_MODE_ETC2 :: 4;
        COMPRESSION_MODE_BPTC :: 5;
    }
}

PrimitiveMesh :: struct { #as using base: OpaqueClass; } // 559

PrismMesh :: struct { #as using base: OpaqueClass; } // 560

ProceduralSkyMaterial :: struct { #as using base: OpaqueClass; } // 561

ProgressBar :: struct {  // 562

        #as using base: OpaqueClass;

    FillMode :: enum s32 {
        FILL_BEGIN_TO_END :: 0;
        FILL_END_TO_BEGIN :: 1;
        FILL_TOP_TO_BOTTOM :: 2;
        FILL_BOTTOM_TO_TOP :: 3;
    }
}

ProjectSettings :: struct { #as using base: OpaqueClass; } // 563

PropertyTweener :: struct { #as using base: OpaqueClass; } // 564

QuadMesh :: struct { #as using base: OpaqueClass; } // 565

QuadOccluder3D :: struct { #as using base: OpaqueClass; } // 566

RDAttachmentFormat :: struct { #as using base: OpaqueClass; } // 567

RDFramebufferPass :: struct { #as using base: OpaqueClass; } // 568

RDPipelineColorBlendState :: struct { #as using base: OpaqueClass; } // 569

RDPipelineColorBlendStateAttachment :: struct { #as using base: OpaqueClass; } // 570

RDPipelineDepthStencilState :: struct { #as using base: OpaqueClass; } // 571

RDPipelineMultisampleState :: struct { #as using base: OpaqueClass; } // 572

RDPipelineRasterizationState :: struct { #as using base: OpaqueClass; } // 573

RDPipelineSpecializationConstant :: struct { #as using base: OpaqueClass; } // 574

RDSamplerState :: struct { #as using base: OpaqueClass; } // 575

RDShaderFile :: struct { #as using base: OpaqueClass; } // 576

RDShaderSPIRV :: struct { #as using base: OpaqueClass; } // 577

RDShaderSource :: struct { #as using base: OpaqueClass; } // 578

RDTextureFormat :: struct { #as using base: OpaqueClass; } // 579

RDTextureView :: struct { #as using base: OpaqueClass; } // 580

RDUniform :: struct { #as using base: OpaqueClass; } // 581

RDVertexAttribute :: struct { #as using base: OpaqueClass; } // 582

RandomNumberGenerator :: struct { #as using base: OpaqueClass; } // 583

Range :: struct { #as using base: OpaqueClass; } // 584

RayCast2D :: struct { #as using base: OpaqueClass; } // 585

RayCast3D :: struct { #as using base: OpaqueClass; } // 586

RectangleShape2D :: struct { #as using base: OpaqueClass; } // 587

RefCounted :: struct { #as using base: OpaqueClass; } // 588

ReferenceRect :: struct { #as using base: OpaqueClass; } // 589

ReflectionProbe :: struct {  // 590

        #as using base: OpaqueClass;

    UpdateMode :: enum s32 {
        UPDATE_ONCE :: 0;
        UPDATE_ALWAYS :: 1;
    }

    AmbientMode :: enum s32 {
        AMBIENT_DISABLED :: 0;
        AMBIENT_ENVIRONMENT :: 1;
        AMBIENT_COLOR :: 2;
    }
}

RegEx :: struct { #as using base: OpaqueClass; } // 591

RegExMatch :: struct { #as using base: OpaqueClass; } // 592

RemoteTransform2D :: struct { #as using base: OpaqueClass; } // 593

RemoteTransform3D :: struct { #as using base: OpaqueClass; } // 594

RenderData :: struct { #as using base: OpaqueClass; } // 595

RenderDataExtension :: struct { #as using base: OpaqueClass; } // 596

RenderDataRD :: struct { #as using base: OpaqueClass; } // 597

RenderSceneBuffers :: struct { #as using base: OpaqueClass; } // 598

RenderSceneBuffersConfiguration :: struct { #as using base: OpaqueClass; } // 599

RenderSceneBuffersExtension :: struct { #as using base: OpaqueClass; } // 600

RenderSceneBuffersRD :: struct { #as using base: OpaqueClass; } // 601

RenderSceneData :: struct { #as using base: OpaqueClass; } // 602

RenderSceneDataExtension :: struct { #as using base: OpaqueClass; } // 603

RenderSceneDataRD :: struct { #as using base: OpaqueClass; } // 604

RenderingDevice :: struct {  // 605

        #as using base: OpaqueClass;

    DeviceType :: enum s32 {
        DEVICE_TYPE_OTHER :: 0;
        DEVICE_TYPE_INTEGRATED_GPU :: 1;
        DEVICE_TYPE_DISCRETE_GPU :: 2;
        DEVICE_TYPE_VIRTUAL_GPU :: 3;
        DEVICE_TYPE_CPU :: 4;
        DEVICE_TYPE_MAX :: 5;
    }

    DriverResource :: enum s32 {
        DRIVER_RESOURCE_LOGICAL_DEVICE :: 0;
        DRIVER_RESOURCE_PHYSICAL_DEVICE :: 1;
        DRIVER_RESOURCE_TOPMOST_OBJECT :: 2;
        DRIVER_RESOURCE_COMMAND_QUEUE :: 3;
        DRIVER_RESOURCE_QUEUE_FAMILY :: 4;
        DRIVER_RESOURCE_TEXTURE :: 5;
        DRIVER_RESOURCE_TEXTURE_VIEW :: 6;
        DRIVER_RESOURCE_TEXTURE_DATA_FORMAT :: 7;
        DRIVER_RESOURCE_SAMPLER :: 8;
        DRIVER_RESOURCE_UNIFORM_SET :: 9;
        DRIVER_RESOURCE_BUFFER :: 10;
        DRIVER_RESOURCE_COMPUTE_PIPELINE :: 11;
        DRIVER_RESOURCE_RENDER_PIPELINE :: 12;
        DRIVER_RESOURCE_VULKAN_DEVICE :: 0;
        DRIVER_RESOURCE_VULKAN_PHYSICAL_DEVICE :: 1;
        DRIVER_RESOURCE_VULKAN_INSTANCE :: 2;
        DRIVER_RESOURCE_VULKAN_QUEUE :: 3;
        DRIVER_RESOURCE_VULKAN_QUEUE_FAMILY_INDEX :: 4;
        DRIVER_RESOURCE_VULKAN_IMAGE :: 5;
        DRIVER_RESOURCE_VULKAN_IMAGE_VIEW :: 6;
        DRIVER_RESOURCE_VULKAN_IMAGE_NATIVE_TEXTURE_FORMAT :: 7;
        DRIVER_RESOURCE_VULKAN_SAMPLER :: 8;
        DRIVER_RESOURCE_VULKAN_DESCRIPTOR_SET :: 9;
        DRIVER_RESOURCE_VULKAN_BUFFER :: 10;
        DRIVER_RESOURCE_VULKAN_COMPUTE_PIPELINE :: 11;
        DRIVER_RESOURCE_VULKAN_RENDER_PIPELINE :: 12;
    }

    DataFormat :: enum s32 {
        DATA_FORMAT_R4G4_UNORM_PACK8 :: 0;
        DATA_FORMAT_R4G4B4A4_UNORM_PACK16 :: 1;
        DATA_FORMAT_B4G4R4A4_UNORM_PACK16 :: 2;
        DATA_FORMAT_R5G6B5_UNORM_PACK16 :: 3;
        DATA_FORMAT_B5G6R5_UNORM_PACK16 :: 4;
        DATA_FORMAT_R5G5B5A1_UNORM_PACK16 :: 5;
        DATA_FORMAT_B5G5R5A1_UNORM_PACK16 :: 6;
        DATA_FORMAT_A1R5G5B5_UNORM_PACK16 :: 7;
        DATA_FORMAT_R8_UNORM :: 8;
        DATA_FORMAT_R8_SNORM :: 9;
        DATA_FORMAT_R8_USCALED :: 10;
        DATA_FORMAT_R8_SSCALED :: 11;
        DATA_FORMAT_R8_UINT :: 12;
        DATA_FORMAT_R8_SINT :: 13;
        DATA_FORMAT_R8_SRGB :: 14;
        DATA_FORMAT_R8G8_UNORM :: 15;
        DATA_FORMAT_R8G8_SNORM :: 16;
        DATA_FORMAT_R8G8_USCALED :: 17;
        DATA_FORMAT_R8G8_SSCALED :: 18;
        DATA_FORMAT_R8G8_UINT :: 19;
        DATA_FORMAT_R8G8_SINT :: 20;
        DATA_FORMAT_R8G8_SRGB :: 21;
        DATA_FORMAT_R8G8B8_UNORM :: 22;
        DATA_FORMAT_R8G8B8_SNORM :: 23;
        DATA_FORMAT_R8G8B8_USCALED :: 24;
        DATA_FORMAT_R8G8B8_SSCALED :: 25;
        DATA_FORMAT_R8G8B8_UINT :: 26;
        DATA_FORMAT_R8G8B8_SINT :: 27;
        DATA_FORMAT_R8G8B8_SRGB :: 28;
        DATA_FORMAT_B8G8R8_UNORM :: 29;
        DATA_FORMAT_B8G8R8_SNORM :: 30;
        DATA_FORMAT_B8G8R8_USCALED :: 31;
        DATA_FORMAT_B8G8R8_SSCALED :: 32;
        DATA_FORMAT_B8G8R8_UINT :: 33;
        DATA_FORMAT_B8G8R8_SINT :: 34;
        DATA_FORMAT_B8G8R8_SRGB :: 35;
        DATA_FORMAT_R8G8B8A8_UNORM :: 36;
        DATA_FORMAT_R8G8B8A8_SNORM :: 37;
        DATA_FORMAT_R8G8B8A8_USCALED :: 38;
        DATA_FORMAT_R8G8B8A8_SSCALED :: 39;
        DATA_FORMAT_R8G8B8A8_UINT :: 40;
        DATA_FORMAT_R8G8B8A8_SINT :: 41;
        DATA_FORMAT_R8G8B8A8_SRGB :: 42;
        DATA_FORMAT_B8G8R8A8_UNORM :: 43;
        DATA_FORMAT_B8G8R8A8_SNORM :: 44;
        DATA_FORMAT_B8G8R8A8_USCALED :: 45;
        DATA_FORMAT_B8G8R8A8_SSCALED :: 46;
        DATA_FORMAT_B8G8R8A8_UINT :: 47;
        DATA_FORMAT_B8G8R8A8_SINT :: 48;
        DATA_FORMAT_B8G8R8A8_SRGB :: 49;
        DATA_FORMAT_A8B8G8R8_UNORM_PACK32 :: 50;
        DATA_FORMAT_A8B8G8R8_SNORM_PACK32 :: 51;
        DATA_FORMAT_A8B8G8R8_USCALED_PACK32 :: 52;
        DATA_FORMAT_A8B8G8R8_SSCALED_PACK32 :: 53;
        DATA_FORMAT_A8B8G8R8_UINT_PACK32 :: 54;
        DATA_FORMAT_A8B8G8R8_SINT_PACK32 :: 55;
        DATA_FORMAT_A8B8G8R8_SRGB_PACK32 :: 56;
        DATA_FORMAT_A2R10G10B10_UNORM_PACK32 :: 57;
        DATA_FORMAT_A2R10G10B10_SNORM_PACK32 :: 58;
        DATA_FORMAT_A2R10G10B10_USCALED_PACK32 :: 59;
        DATA_FORMAT_A2R10G10B10_SSCALED_PACK32 :: 60;
        DATA_FORMAT_A2R10G10B10_UINT_PACK32 :: 61;
        DATA_FORMAT_A2R10G10B10_SINT_PACK32 :: 62;
        DATA_FORMAT_A2B10G10R10_UNORM_PACK32 :: 63;
        DATA_FORMAT_A2B10G10R10_SNORM_PACK32 :: 64;
        DATA_FORMAT_A2B10G10R10_USCALED_PACK32 :: 65;
        DATA_FORMAT_A2B10G10R10_SSCALED_PACK32 :: 66;
        DATA_FORMAT_A2B10G10R10_UINT_PACK32 :: 67;
        DATA_FORMAT_A2B10G10R10_SINT_PACK32 :: 68;
        DATA_FORMAT_R16_UNORM :: 69;
        DATA_FORMAT_R16_SNORM :: 70;
        DATA_FORMAT_R16_USCALED :: 71;
        DATA_FORMAT_R16_SSCALED :: 72;
        DATA_FORMAT_R16_UINT :: 73;
        DATA_FORMAT_R16_SINT :: 74;
        DATA_FORMAT_R16_SFLOAT :: 75;
        DATA_FORMAT_R16G16_UNORM :: 76;
        DATA_FORMAT_R16G16_SNORM :: 77;
        DATA_FORMAT_R16G16_USCALED :: 78;
        DATA_FORMAT_R16G16_SSCALED :: 79;
        DATA_FORMAT_R16G16_UINT :: 80;
        DATA_FORMAT_R16G16_SINT :: 81;
        DATA_FORMAT_R16G16_SFLOAT :: 82;
        DATA_FORMAT_R16G16B16_UNORM :: 83;
        DATA_FORMAT_R16G16B16_SNORM :: 84;
        DATA_FORMAT_R16G16B16_USCALED :: 85;
        DATA_FORMAT_R16G16B16_SSCALED :: 86;
        DATA_FORMAT_R16G16B16_UINT :: 87;
        DATA_FORMAT_R16G16B16_SINT :: 88;
        DATA_FORMAT_R16G16B16_SFLOAT :: 89;
        DATA_FORMAT_R16G16B16A16_UNORM :: 90;
        DATA_FORMAT_R16G16B16A16_SNORM :: 91;
        DATA_FORMAT_R16G16B16A16_USCALED :: 92;
        DATA_FORMAT_R16G16B16A16_SSCALED :: 93;
        DATA_FORMAT_R16G16B16A16_UINT :: 94;
        DATA_FORMAT_R16G16B16A16_SINT :: 95;
        DATA_FORMAT_R16G16B16A16_SFLOAT :: 96;
        DATA_FORMAT_R32_UINT :: 97;
        DATA_FORMAT_R32_SINT :: 98;
        DATA_FORMAT_R32_SFLOAT :: 99;
        DATA_FORMAT_R32G32_UINT :: 100;
        DATA_FORMAT_R32G32_SINT :: 101;
        DATA_FORMAT_R32G32_SFLOAT :: 102;
        DATA_FORMAT_R32G32B32_UINT :: 103;
        DATA_FORMAT_R32G32B32_SINT :: 104;
        DATA_FORMAT_R32G32B32_SFLOAT :: 105;
        DATA_FORMAT_R32G32B32A32_UINT :: 106;
        DATA_FORMAT_R32G32B32A32_SINT :: 107;
        DATA_FORMAT_R32G32B32A32_SFLOAT :: 108;
        DATA_FORMAT_R64_UINT :: 109;
        DATA_FORMAT_R64_SINT :: 110;
        DATA_FORMAT_R64_SFLOAT :: 111;
        DATA_FORMAT_R64G64_UINT :: 112;
        DATA_FORMAT_R64G64_SINT :: 113;
        DATA_FORMAT_R64G64_SFLOAT :: 114;
        DATA_FORMAT_R64G64B64_UINT :: 115;
        DATA_FORMAT_R64G64B64_SINT :: 116;
        DATA_FORMAT_R64G64B64_SFLOAT :: 117;
        DATA_FORMAT_R64G64B64A64_UINT :: 118;
        DATA_FORMAT_R64G64B64A64_SINT :: 119;
        DATA_FORMAT_R64G64B64A64_SFLOAT :: 120;
        DATA_FORMAT_B10G11R11_UFLOAT_PACK32 :: 121;
        DATA_FORMAT_E5B9G9R9_UFLOAT_PACK32 :: 122;
        DATA_FORMAT_D16_UNORM :: 123;
        DATA_FORMAT_X8_D24_UNORM_PACK32 :: 124;
        DATA_FORMAT_D32_SFLOAT :: 125;
        DATA_FORMAT_S8_UINT :: 126;
        DATA_FORMAT_D16_UNORM_S8_UINT :: 127;
        DATA_FORMAT_D24_UNORM_S8_UINT :: 128;
        DATA_FORMAT_D32_SFLOAT_S8_UINT :: 129;
        DATA_FORMAT_BC1_RGB_UNORM_BLOCK :: 130;
        DATA_FORMAT_BC1_RGB_SRGB_BLOCK :: 131;
        DATA_FORMAT_BC1_RGBA_UNORM_BLOCK :: 132;
        DATA_FORMAT_BC1_RGBA_SRGB_BLOCK :: 133;
        DATA_FORMAT_BC2_UNORM_BLOCK :: 134;
        DATA_FORMAT_BC2_SRGB_BLOCK :: 135;
        DATA_FORMAT_BC3_UNORM_BLOCK :: 136;
        DATA_FORMAT_BC3_SRGB_BLOCK :: 137;
        DATA_FORMAT_BC4_UNORM_BLOCK :: 138;
        DATA_FORMAT_BC4_SNORM_BLOCK :: 139;
        DATA_FORMAT_BC5_UNORM_BLOCK :: 140;
        DATA_FORMAT_BC5_SNORM_BLOCK :: 141;
        DATA_FORMAT_BC6H_UFLOAT_BLOCK :: 142;
        DATA_FORMAT_BC6H_SFLOAT_BLOCK :: 143;
        DATA_FORMAT_BC7_UNORM_BLOCK :: 144;
        DATA_FORMAT_BC7_SRGB_BLOCK :: 145;
        DATA_FORMAT_ETC2_R8G8B8_UNORM_BLOCK :: 146;
        DATA_FORMAT_ETC2_R8G8B8_SRGB_BLOCK :: 147;
        DATA_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK :: 148;
        DATA_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK :: 149;
        DATA_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK :: 150;
        DATA_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK :: 151;
        DATA_FORMAT_EAC_R11_UNORM_BLOCK :: 152;
        DATA_FORMAT_EAC_R11_SNORM_BLOCK :: 153;
        DATA_FORMAT_EAC_R11G11_UNORM_BLOCK :: 154;
        DATA_FORMAT_EAC_R11G11_SNORM_BLOCK :: 155;
        DATA_FORMAT_ASTC_4x4_UNORM_BLOCK :: 156;
        DATA_FORMAT_ASTC_4x4_SRGB_BLOCK :: 157;
        DATA_FORMAT_ASTC_5x4_UNORM_BLOCK :: 158;
        DATA_FORMAT_ASTC_5x4_SRGB_BLOCK :: 159;
        DATA_FORMAT_ASTC_5x5_UNORM_BLOCK :: 160;
        DATA_FORMAT_ASTC_5x5_SRGB_BLOCK :: 161;
        DATA_FORMAT_ASTC_6x5_UNORM_BLOCK :: 162;
        DATA_FORMAT_ASTC_6x5_SRGB_BLOCK :: 163;
        DATA_FORMAT_ASTC_6x6_UNORM_BLOCK :: 164;
        DATA_FORMAT_ASTC_6x6_SRGB_BLOCK :: 165;
        DATA_FORMAT_ASTC_8x5_UNORM_BLOCK :: 166;
        DATA_FORMAT_ASTC_8x5_SRGB_BLOCK :: 167;
        DATA_FORMAT_ASTC_8x6_UNORM_BLOCK :: 168;
        DATA_FORMAT_ASTC_8x6_SRGB_BLOCK :: 169;
        DATA_FORMAT_ASTC_8x8_UNORM_BLOCK :: 170;
        DATA_FORMAT_ASTC_8x8_SRGB_BLOCK :: 171;
        DATA_FORMAT_ASTC_10x5_UNORM_BLOCK :: 172;
        DATA_FORMAT_ASTC_10x5_SRGB_BLOCK :: 173;
        DATA_FORMAT_ASTC_10x6_UNORM_BLOCK :: 174;
        DATA_FORMAT_ASTC_10x6_SRGB_BLOCK :: 175;
        DATA_FORMAT_ASTC_10x8_UNORM_BLOCK :: 176;
        DATA_FORMAT_ASTC_10x8_SRGB_BLOCK :: 177;
        DATA_FORMAT_ASTC_10x10_UNORM_BLOCK :: 178;
        DATA_FORMAT_ASTC_10x10_SRGB_BLOCK :: 179;
        DATA_FORMAT_ASTC_12x10_UNORM_BLOCK :: 180;
        DATA_FORMAT_ASTC_12x10_SRGB_BLOCK :: 181;
        DATA_FORMAT_ASTC_12x12_UNORM_BLOCK :: 182;
        DATA_FORMAT_ASTC_12x12_SRGB_BLOCK :: 183;
        DATA_FORMAT_G8B8G8R8_422_UNORM :: 184;
        DATA_FORMAT_B8G8R8G8_422_UNORM :: 185;
        DATA_FORMAT_G8_B8_R8_3PLANE_420_UNORM :: 186;
        DATA_FORMAT_G8_B8R8_2PLANE_420_UNORM :: 187;
        DATA_FORMAT_G8_B8_R8_3PLANE_422_UNORM :: 188;
        DATA_FORMAT_G8_B8R8_2PLANE_422_UNORM :: 189;
        DATA_FORMAT_G8_B8_R8_3PLANE_444_UNORM :: 190;
        DATA_FORMAT_R10X6_UNORM_PACK16 :: 191;
        DATA_FORMAT_R10X6G10X6_UNORM_2PACK16 :: 192;
        DATA_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 :: 193;
        DATA_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 :: 194;
        DATA_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 :: 195;
        DATA_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 :: 196;
        DATA_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 :: 197;
        DATA_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 :: 198;
        DATA_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 :: 199;
        DATA_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 :: 200;
        DATA_FORMAT_R12X4_UNORM_PACK16 :: 201;
        DATA_FORMAT_R12X4G12X4_UNORM_2PACK16 :: 202;
        DATA_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 :: 203;
        DATA_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 :: 204;
        DATA_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 :: 205;
        DATA_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 :: 206;
        DATA_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 :: 207;
        DATA_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 :: 208;
        DATA_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 :: 209;
        DATA_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 :: 210;
        DATA_FORMAT_G16B16G16R16_422_UNORM :: 211;
        DATA_FORMAT_B16G16R16G16_422_UNORM :: 212;
        DATA_FORMAT_G16_B16_R16_3PLANE_420_UNORM :: 213;
        DATA_FORMAT_G16_B16R16_2PLANE_420_UNORM :: 214;
        DATA_FORMAT_G16_B16_R16_3PLANE_422_UNORM :: 215;
        DATA_FORMAT_G16_B16R16_2PLANE_422_UNORM :: 216;
        DATA_FORMAT_G16_B16_R16_3PLANE_444_UNORM :: 217;
        DATA_FORMAT_ASTC_4x4_SFLOAT_BLOCK :: 218;
        DATA_FORMAT_ASTC_5x4_SFLOAT_BLOCK :: 219;
        DATA_FORMAT_ASTC_5x5_SFLOAT_BLOCK :: 220;
        DATA_FORMAT_ASTC_6x5_SFLOAT_BLOCK :: 221;
        DATA_FORMAT_ASTC_6x6_SFLOAT_BLOCK :: 222;
        DATA_FORMAT_ASTC_8x5_SFLOAT_BLOCK :: 223;
        DATA_FORMAT_ASTC_8x6_SFLOAT_BLOCK :: 224;
        DATA_FORMAT_ASTC_8x8_SFLOAT_BLOCK :: 225;
        DATA_FORMAT_ASTC_10x5_SFLOAT_BLOCK :: 226;
        DATA_FORMAT_ASTC_10x6_SFLOAT_BLOCK :: 227;
        DATA_FORMAT_ASTC_10x8_SFLOAT_BLOCK :: 228;
        DATA_FORMAT_ASTC_10x10_SFLOAT_BLOCK :: 229;
        DATA_FORMAT_ASTC_12x10_SFLOAT_BLOCK :: 230;
        DATA_FORMAT_ASTC_12x12_SFLOAT_BLOCK :: 231;
        DATA_FORMAT_MAX :: 232;
    }

    BarrierMask :: enum u64 {
        BARRIER_MASK_VERTEX :: 1;
        BARRIER_MASK_FRAGMENT :: 8;
        BARRIER_MASK_COMPUTE :: 2;
        BARRIER_MASK_TRANSFER :: 4;
        BARRIER_MASK_RASTER :: 9;
        BARRIER_MASK_ALL_BARRIERS :: 32767;
        BARRIER_MASK_NO_BARRIER :: 32768;
    } @bitfield

    TextureType :: enum s32 {
        TEXTURE_TYPE_1D :: 0;
        TEXTURE_TYPE_2D :: 1;
        TEXTURE_TYPE_3D :: 2;
        TEXTURE_TYPE_CUBE :: 3;
        TEXTURE_TYPE_1D_ARRAY :: 4;
        TEXTURE_TYPE_2D_ARRAY :: 5;
        TEXTURE_TYPE_CUBE_ARRAY :: 6;
        TEXTURE_TYPE_MAX :: 7;
    }

    TextureSamples :: enum s32 {
        TEXTURE_SAMPLES_1 :: 0;
        TEXTURE_SAMPLES_2 :: 1;
        TEXTURE_SAMPLES_4 :: 2;
        TEXTURE_SAMPLES_8 :: 3;
        TEXTURE_SAMPLES_16 :: 4;
        TEXTURE_SAMPLES_32 :: 5;
        TEXTURE_SAMPLES_64 :: 6;
        TEXTURE_SAMPLES_MAX :: 7;
    }

    TextureUsageBits :: enum u64 {
        TEXTURE_USAGE_SAMPLING_BIT :: 1;
        TEXTURE_USAGE_COLOR_ATTACHMENT_BIT :: 2;
        TEXTURE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT :: 4;
        TEXTURE_USAGE_STORAGE_BIT :: 8;
        TEXTURE_USAGE_STORAGE_ATOMIC_BIT :: 16;
        TEXTURE_USAGE_CPU_READ_BIT :: 32;
        TEXTURE_USAGE_CAN_UPDATE_BIT :: 64;
        TEXTURE_USAGE_CAN_COPY_FROM_BIT :: 128;
        TEXTURE_USAGE_CAN_COPY_TO_BIT :: 256;
        TEXTURE_USAGE_INPUT_ATTACHMENT_BIT :: 512;
    } @bitfield

    TextureSwizzle :: enum s32 {
        TEXTURE_SWIZZLE_IDENTITY :: 0;
        TEXTURE_SWIZZLE_ZERO :: 1;
        TEXTURE_SWIZZLE_ONE :: 2;
        TEXTURE_SWIZZLE_R :: 3;
        TEXTURE_SWIZZLE_G :: 4;
        TEXTURE_SWIZZLE_B :: 5;
        TEXTURE_SWIZZLE_A :: 6;
        TEXTURE_SWIZZLE_MAX :: 7;
    }

    TextureSliceType :: enum s32 {
        TEXTURE_SLICE_2D :: 0;
        TEXTURE_SLICE_CUBEMAP :: 1;
        TEXTURE_SLICE_3D :: 2;
    }

    SamplerFilter :: enum s32 {
        SAMPLER_FILTER_NEAREST :: 0;
        SAMPLER_FILTER_LINEAR :: 1;
    }

    SamplerRepeatMode :: enum s32 {
        SAMPLER_REPEAT_MODE_REPEAT :: 0;
        SAMPLER_REPEAT_MODE_MIRRORED_REPEAT :: 1;
        SAMPLER_REPEAT_MODE_CLAMP_TO_EDGE :: 2;
        SAMPLER_REPEAT_MODE_CLAMP_TO_BORDER :: 3;
        SAMPLER_REPEAT_MODE_MIRROR_CLAMP_TO_EDGE :: 4;
        SAMPLER_REPEAT_MODE_MAX :: 5;
    }

    SamplerBorderColor :: enum s32 {
        SAMPLER_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK :: 0;
        SAMPLER_BORDER_COLOR_INT_TRANSPARENT_BLACK :: 1;
        SAMPLER_BORDER_COLOR_FLOAT_OPAQUE_BLACK :: 2;
        SAMPLER_BORDER_COLOR_INT_OPAQUE_BLACK :: 3;
        SAMPLER_BORDER_COLOR_FLOAT_OPAQUE_WHITE :: 4;
        SAMPLER_BORDER_COLOR_INT_OPAQUE_WHITE :: 5;
        SAMPLER_BORDER_COLOR_MAX :: 6;
    }

    VertexFrequency :: enum s32 {
        VERTEX_FREQUENCY_VERTEX :: 0;
        VERTEX_FREQUENCY_INSTANCE :: 1;
    }

    IndexBufferFormat :: enum s32 {
        INDEX_BUFFER_FORMAT_UINT16 :: 0;
        INDEX_BUFFER_FORMAT_UINT32 :: 1;
    }

    StorageBufferUsage :: enum u64 {
        STORAGE_BUFFER_USAGE_DISPATCH_INDIRECT :: 1;
    } @bitfield

    BufferCreationBits :: enum u64 {
        BUFFER_CREATION_DEVICE_ADDRESS_BIT :: 1;
        BUFFER_CREATION_AS_STORAGE_BIT :: 2;
    } @bitfield

    UniformType :: enum s32 {
        UNIFORM_TYPE_SAMPLER :: 0;
        UNIFORM_TYPE_SAMPLER_WITH_TEXTURE :: 1;
        UNIFORM_TYPE_TEXTURE :: 2;
        UNIFORM_TYPE_IMAGE :: 3;
        UNIFORM_TYPE_TEXTURE_BUFFER :: 4;
        UNIFORM_TYPE_SAMPLER_WITH_TEXTURE_BUFFER :: 5;
        UNIFORM_TYPE_IMAGE_BUFFER :: 6;
        UNIFORM_TYPE_UNIFORM_BUFFER :: 7;
        UNIFORM_TYPE_STORAGE_BUFFER :: 8;
        UNIFORM_TYPE_INPUT_ATTACHMENT :: 9;
        UNIFORM_TYPE_MAX :: 10;
    }

    RenderPrimitive :: enum s32 {
        RENDER_PRIMITIVE_POINTS :: 0;
        RENDER_PRIMITIVE_LINES :: 1;
        RENDER_PRIMITIVE_LINES_WITH_ADJACENCY :: 2;
        RENDER_PRIMITIVE_LINESTRIPS :: 3;
        RENDER_PRIMITIVE_LINESTRIPS_WITH_ADJACENCY :: 4;
        RENDER_PRIMITIVE_TRIANGLES :: 5;
        RENDER_PRIMITIVE_TRIANGLES_WITH_ADJACENCY :: 6;
        RENDER_PRIMITIVE_TRIANGLE_STRIPS :: 7;
        RENDER_PRIMITIVE_TRIANGLE_STRIPS_WITH_AJACENCY :: 8;
        RENDER_PRIMITIVE_TRIANGLE_STRIPS_WITH_RESTART_INDEX :: 9;
        RENDER_PRIMITIVE_TESSELATION_PATCH :: 10;
        RENDER_PRIMITIVE_MAX :: 11;
    }

    PolygonCullMode :: enum s32 {
        POLYGON_CULL_DISABLED :: 0;
        POLYGON_CULL_FRONT :: 1;
        POLYGON_CULL_BACK :: 2;
    }

    PolygonFrontFace :: enum s32 {
        POLYGON_FRONT_FACE_CLOCKWISE :: 0;
        POLYGON_FRONT_FACE_COUNTER_CLOCKWISE :: 1;
    }

    StencilOperation :: enum s32 {
        STENCIL_OP_KEEP :: 0;
        STENCIL_OP_ZERO :: 1;
        STENCIL_OP_REPLACE :: 2;
        STENCIL_OP_INCREMENT_AND_CLAMP :: 3;
        STENCIL_OP_DECREMENT_AND_CLAMP :: 4;
        STENCIL_OP_INVERT :: 5;
        STENCIL_OP_INCREMENT_AND_WRAP :: 6;
        STENCIL_OP_DECREMENT_AND_WRAP :: 7;
        STENCIL_OP_MAX :: 8;
    }

    CompareOperator :: enum s32 {
        COMPARE_OP_NEVER :: 0;
        COMPARE_OP_LESS :: 1;
        COMPARE_OP_EQUAL :: 2;
        COMPARE_OP_LESS_OR_EQUAL :: 3;
        COMPARE_OP_GREATER :: 4;
        COMPARE_OP_NOT_EQUAL :: 5;
        COMPARE_OP_GREATER_OR_EQUAL :: 6;
        COMPARE_OP_ALWAYS :: 7;
        COMPARE_OP_MAX :: 8;
    }

    LogicOperation :: enum s32 {
        LOGIC_OP_CLEAR :: 0;
        LOGIC_OP_AND :: 1;
        LOGIC_OP_AND_REVERSE :: 2;
        LOGIC_OP_COPY :: 3;
        LOGIC_OP_AND_INVERTED :: 4;
        LOGIC_OP_NO_OP :: 5;
        LOGIC_OP_XOR :: 6;
        LOGIC_OP_OR :: 7;
        LOGIC_OP_NOR :: 8;
        LOGIC_OP_EQUIVALENT :: 9;
        LOGIC_OP_INVERT :: 10;
        LOGIC_OP_OR_REVERSE :: 11;
        LOGIC_OP_COPY_INVERTED :: 12;
        LOGIC_OP_OR_INVERTED :: 13;
        LOGIC_OP_NAND :: 14;
        LOGIC_OP_SET :: 15;
        LOGIC_OP_MAX :: 16;
    }

    BlendFactor :: enum s32 {
        BLEND_FACTOR_ZERO :: 0;
        BLEND_FACTOR_ONE :: 1;
        BLEND_FACTOR_SRC_COLOR :: 2;
        BLEND_FACTOR_ONE_MINUS_SRC_COLOR :: 3;
        BLEND_FACTOR_DST_COLOR :: 4;
        BLEND_FACTOR_ONE_MINUS_DST_COLOR :: 5;
        BLEND_FACTOR_SRC_ALPHA :: 6;
        BLEND_FACTOR_ONE_MINUS_SRC_ALPHA :: 7;
        BLEND_FACTOR_DST_ALPHA :: 8;
        BLEND_FACTOR_ONE_MINUS_DST_ALPHA :: 9;
        BLEND_FACTOR_CONSTANT_COLOR :: 10;
        BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR :: 11;
        BLEND_FACTOR_CONSTANT_ALPHA :: 12;
        BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA :: 13;
        BLEND_FACTOR_SRC_ALPHA_SATURATE :: 14;
        BLEND_FACTOR_SRC1_COLOR :: 15;
        BLEND_FACTOR_ONE_MINUS_SRC1_COLOR :: 16;
        BLEND_FACTOR_SRC1_ALPHA :: 17;
        BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA :: 18;
        BLEND_FACTOR_MAX :: 19;
    }

    BlendOperation :: enum s32 {
        BLEND_OP_ADD :: 0;
        BLEND_OP_SUBTRACT :: 1;
        BLEND_OP_REVERSE_SUBTRACT :: 2;
        BLEND_OP_MINIMUM :: 3;
        BLEND_OP_MAXIMUM :: 4;
        BLEND_OP_MAX :: 5;
    }

    PipelineDynamicStateFlags :: enum u64 {
        DYNAMIC_STATE_LINE_WIDTH :: 1;
        DYNAMIC_STATE_DEPTH_BIAS :: 2;
        DYNAMIC_STATE_BLEND_CONSTANTS :: 4;
        DYNAMIC_STATE_DEPTH_BOUNDS :: 8;
        DYNAMIC_STATE_STENCIL_COMPARE_MASK :: 16;
        DYNAMIC_STATE_STENCIL_WRITE_MASK :: 32;
        DYNAMIC_STATE_STENCIL_REFERENCE :: 64;
    } @bitfield

    InitialAction :: enum s32 {
        INITIAL_ACTION_LOAD :: 0;
        INITIAL_ACTION_CLEAR :: 1;
        INITIAL_ACTION_DISCARD :: 2;
        INITIAL_ACTION_MAX :: 3;
        INITIAL_ACTION_CLEAR_REGION :: 1;
        INITIAL_ACTION_CLEAR_REGION_CONTINUE :: 1;
        INITIAL_ACTION_KEEP :: 0;
        INITIAL_ACTION_DROP :: 2;
        INITIAL_ACTION_CONTINUE :: 0;
    }

    FinalAction :: enum s32 {
        FINAL_ACTION_STORE :: 0;
        FINAL_ACTION_DISCARD :: 1;
        FINAL_ACTION_MAX :: 2;
        FINAL_ACTION_READ :: 0;
        FINAL_ACTION_CONTINUE :: 0;
    }

    ShaderStage :: enum s32 {
        SHADER_STAGE_VERTEX :: 0;
        SHADER_STAGE_FRAGMENT :: 1;
        SHADER_STAGE_TESSELATION_CONTROL :: 2;
        SHADER_STAGE_TESSELATION_EVALUATION :: 3;
        SHADER_STAGE_COMPUTE :: 4;
        SHADER_STAGE_MAX :: 5;
        SHADER_STAGE_VERTEX_BIT :: 1;
        SHADER_STAGE_FRAGMENT_BIT :: 2;
        SHADER_STAGE_TESSELATION_CONTROL_BIT :: 4;
        SHADER_STAGE_TESSELATION_EVALUATION_BIT :: 8;
        SHADER_STAGE_COMPUTE_BIT :: 16;
    }

    ShaderLanguage :: enum s32 {
        SHADER_LANGUAGE_GLSL :: 0;
        SHADER_LANGUAGE_HLSL :: 1;
    }

    PipelineSpecializationConstantType :: enum s32 {
        PIPELINE_SPECIALIZATION_CONSTANT_TYPE_BOOL :: 0;
        PIPELINE_SPECIALIZATION_CONSTANT_TYPE_INT :: 1;
        PIPELINE_SPECIALIZATION_CONSTANT_TYPE_FLOAT :: 2;
    }

    Features :: enum s32 {
        SUPPORTS_BUFFER_DEVICE_ADDRESS :: 6;
    }

    Limit :: enum s32 {
        LIMIT_MAX_BOUND_UNIFORM_SETS :: 0;
        LIMIT_MAX_FRAMEBUFFER_COLOR_ATTACHMENTS :: 1;
        LIMIT_MAX_TEXTURES_PER_UNIFORM_SET :: 2;
        LIMIT_MAX_SAMPLERS_PER_UNIFORM_SET :: 3;
        LIMIT_MAX_STORAGE_BUFFERS_PER_UNIFORM_SET :: 4;
        LIMIT_MAX_STORAGE_IMAGES_PER_UNIFORM_SET :: 5;
        LIMIT_MAX_UNIFORM_BUFFERS_PER_UNIFORM_SET :: 6;
        LIMIT_MAX_DRAW_INDEXED_INDEX :: 7;
        LIMIT_MAX_FRAMEBUFFER_HEIGHT :: 8;
        LIMIT_MAX_FRAMEBUFFER_WIDTH :: 9;
        LIMIT_MAX_TEXTURE_ARRAY_LAYERS :: 10;
        LIMIT_MAX_TEXTURE_SIZE_1D :: 11;
        LIMIT_MAX_TEXTURE_SIZE_2D :: 12;
        LIMIT_MAX_TEXTURE_SIZE_3D :: 13;
        LIMIT_MAX_TEXTURE_SIZE_CUBE :: 14;
        LIMIT_MAX_TEXTURES_PER_SHADER_STAGE :: 15;
        LIMIT_MAX_SAMPLERS_PER_SHADER_STAGE :: 16;
        LIMIT_MAX_STORAGE_BUFFERS_PER_SHADER_STAGE :: 17;
        LIMIT_MAX_STORAGE_IMAGES_PER_SHADER_STAGE :: 18;
        LIMIT_MAX_UNIFORM_BUFFERS_PER_SHADER_STAGE :: 19;
        LIMIT_MAX_PUSH_CONSTANT_SIZE :: 20;
        LIMIT_MAX_UNIFORM_BUFFER_SIZE :: 21;
        LIMIT_MAX_VERTEX_INPUT_ATTRIBUTE_OFFSET :: 22;
        LIMIT_MAX_VERTEX_INPUT_ATTRIBUTES :: 23;
        LIMIT_MAX_VERTEX_INPUT_BINDINGS :: 24;
        LIMIT_MAX_VERTEX_INPUT_BINDING_STRIDE :: 25;
        LIMIT_MIN_UNIFORM_BUFFER_OFFSET_ALIGNMENT :: 26;
        LIMIT_MAX_COMPUTE_SHARED_MEMORY_SIZE :: 27;
        LIMIT_MAX_COMPUTE_WORKGROUP_COUNT_X :: 28;
        LIMIT_MAX_COMPUTE_WORKGROUP_COUNT_Y :: 29;
        LIMIT_MAX_COMPUTE_WORKGROUP_COUNT_Z :: 30;
        LIMIT_MAX_COMPUTE_WORKGROUP_INVOCATIONS :: 31;
        LIMIT_MAX_COMPUTE_WORKGROUP_SIZE_X :: 32;
        LIMIT_MAX_COMPUTE_WORKGROUP_SIZE_Y :: 33;
        LIMIT_MAX_COMPUTE_WORKGROUP_SIZE_Z :: 34;
        LIMIT_MAX_VIEWPORT_DIMENSIONS_X :: 35;
        LIMIT_MAX_VIEWPORT_DIMENSIONS_Y :: 36;
        LIMIT_METALFX_TEMPORAL_SCALER_MIN_SCALE :: 46;
        LIMIT_METALFX_TEMPORAL_SCALER_MAX_SCALE :: 47;
    }

    MemoryType :: enum s32 {
        MEMORY_TEXTURES :: 0;
        MEMORY_BUFFERS :: 1;
        MEMORY_TOTAL :: 2;
    }

    BreadcrumbMarker :: enum s32 {
        NONE :: 0;
        REFLECTION_PROBES :: 65536;
        SKY_PASS :: 131072;
        LIGHTMAPPER_PASS :: 196608;
        SHADOW_PASS_DIRECTIONAL :: 262144;
        SHADOW_PASS_CUBE :: 327680;
        OPAQUE_PASS :: 393216;
        ALPHA_PASS :: 458752;
        TRANSPARENT_PASS :: 524288;
        POST_PROCESSING_PASS :: 589824;
        BLIT_PASS :: 655360;
        UI_PASS :: 720896;
        DEBUG_PASS :: 786432;
    }

    DrawFlags :: enum u64 {
        DRAW_DEFAULT_ALL :: 0;
        DRAW_CLEAR_COLOR_0 :: 1;
        DRAW_CLEAR_COLOR_1 :: 2;
        DRAW_CLEAR_COLOR_2 :: 4;
        DRAW_CLEAR_COLOR_3 :: 8;
        DRAW_CLEAR_COLOR_4 :: 16;
        DRAW_CLEAR_COLOR_5 :: 32;
        DRAW_CLEAR_COLOR_6 :: 64;
        DRAW_CLEAR_COLOR_7 :: 128;
        DRAW_CLEAR_COLOR_MASK :: 255;
        DRAW_CLEAR_COLOR_ALL :: 255;
        DRAW_IGNORE_COLOR_0 :: 256;
        DRAW_IGNORE_COLOR_1 :: 512;
        DRAW_IGNORE_COLOR_2 :: 1024;
        DRAW_IGNORE_COLOR_3 :: 2048;
        DRAW_IGNORE_COLOR_4 :: 4096;
        DRAW_IGNORE_COLOR_5 :: 8192;
        DRAW_IGNORE_COLOR_6 :: 16384;
        DRAW_IGNORE_COLOR_7 :: 32768;
        DRAW_IGNORE_COLOR_MASK :: 65280;
        DRAW_IGNORE_COLOR_ALL :: 65280;
        DRAW_CLEAR_DEPTH :: 65536;
        DRAW_IGNORE_DEPTH :: 131072;
        DRAW_CLEAR_STENCIL :: 262144;
        DRAW_IGNORE_STENCIL :: 524288;
        DRAW_CLEAR_ALL :: 327935;
        DRAW_IGNORE_ALL :: 720640;
    } @bitfield
}

RenderingServer :: struct {  // 606

        #as using base: OpaqueClass;

    TextureType :: enum s32 {
        TEXTURE_TYPE_2D :: 0;
        TEXTURE_TYPE_LAYERED :: 1;
        TEXTURE_TYPE_3D :: 2;
    }

    TextureLayeredType :: enum s32 {
        TEXTURE_LAYERED_2D_ARRAY :: 0;
        TEXTURE_LAYERED_CUBEMAP :: 1;
        TEXTURE_LAYERED_CUBEMAP_ARRAY :: 2;
    }

    CubeMapLayer :: enum s32 {
        CUBEMAP_LAYER_LEFT :: 0;
        CUBEMAP_LAYER_RIGHT :: 1;
        CUBEMAP_LAYER_BOTTOM :: 2;
        CUBEMAP_LAYER_TOP :: 3;
        CUBEMAP_LAYER_FRONT :: 4;
        CUBEMAP_LAYER_BACK :: 5;
    }

    ShaderMode :: enum s32 {
        SHADER_SPATIAL :: 0;
        SHADER_CANVAS_ITEM :: 1;
        SHADER_PARTICLES :: 2;
        SHADER_SKY :: 3;
        SHADER_FOG :: 4;
        SHADER_MAX :: 5;
    }

    ArrayType :: enum s32 {
        ARRAY_VERTEX :: 0;
        ARRAY_NORMAL :: 1;
        ARRAY_TANGENT :: 2;
        ARRAY_COLOR :: 3;
        ARRAY_TEX_UV :: 4;
        ARRAY_TEX_UV2 :: 5;
        ARRAY_CUSTOM0 :: 6;
        ARRAY_CUSTOM1 :: 7;
        ARRAY_CUSTOM2 :: 8;
        ARRAY_CUSTOM3 :: 9;
        ARRAY_BONES :: 10;
        ARRAY_WEIGHTS :: 11;
        ARRAY_INDEX :: 12;
        ARRAY_MAX :: 13;
    }

    ArrayCustomFormat :: enum s32 {
        ARRAY_CUSTOM_RGBA8_UNORM :: 0;
        ARRAY_CUSTOM_RGBA8_SNORM :: 1;
        ARRAY_CUSTOM_RG_HALF :: 2;
        ARRAY_CUSTOM_RGBA_HALF :: 3;
        ARRAY_CUSTOM_R_FLOAT :: 4;
        ARRAY_CUSTOM_RG_FLOAT :: 5;
        ARRAY_CUSTOM_RGB_FLOAT :: 6;
        ARRAY_CUSTOM_RGBA_FLOAT :: 7;
        ARRAY_CUSTOM_MAX :: 8;
    }

    ArrayFormat :: enum u64 {
        ARRAY_FORMAT_VERTEX :: 1;
        ARRAY_FORMAT_NORMAL :: 2;
        ARRAY_FORMAT_TANGENT :: 4;
        ARRAY_FORMAT_COLOR :: 8;
        ARRAY_FORMAT_TEX_UV :: 16;
        ARRAY_FORMAT_TEX_UV2 :: 32;
        ARRAY_FORMAT_CUSTOM0 :: 64;
        ARRAY_FORMAT_CUSTOM1 :: 128;
        ARRAY_FORMAT_CUSTOM2 :: 256;
        ARRAY_FORMAT_CUSTOM3 :: 512;
        ARRAY_FORMAT_BONES :: 1024;
        ARRAY_FORMAT_WEIGHTS :: 2048;
        ARRAY_FORMAT_INDEX :: 4096;
        ARRAY_FORMAT_BLEND_SHAPE_MASK :: 7;
        ARRAY_FORMAT_CUSTOM_BASE :: 13;
        ARRAY_FORMAT_CUSTOM_BITS :: 3;
        ARRAY_FORMAT_CUSTOM0_SHIFT :: 13;
        ARRAY_FORMAT_CUSTOM1_SHIFT :: 16;
        ARRAY_FORMAT_CUSTOM2_SHIFT :: 19;
        ARRAY_FORMAT_CUSTOM3_SHIFT :: 22;
        ARRAY_FORMAT_CUSTOM_MASK :: 7;
        ARRAY_COMPRESS_FLAGS_BASE :: 25;
        ARRAY_FLAG_USE_2D_VERTICES :: 33554432;
        ARRAY_FLAG_USE_DYNAMIC_UPDATE :: 67108864;
        ARRAY_FLAG_USE_8_BONE_WEIGHTS :: 134217728;
        ARRAY_FLAG_USES_EMPTY_VERTEX_ARRAY :: 268435456;
        ARRAY_FLAG_COMPRESS_ATTRIBUTES :: 536870912;
        ARRAY_FLAG_FORMAT_VERSION_BASE :: 35;
        ARRAY_FLAG_FORMAT_VERSION_SHIFT :: 35;
        ARRAY_FLAG_FORMAT_VERSION_1 :: 0;
        ARRAY_FLAG_FORMAT_VERSION_2 :: 34359738368;
        ARRAY_FLAG_FORMAT_CURRENT_VERSION :: 34359738368;
        ARRAY_FLAG_FORMAT_VERSION_MASK :: 255;
    } @bitfield

    PrimitiveType :: enum s32 {
        PRIMITIVE_POINTS :: 0;
        PRIMITIVE_LINES :: 1;
        PRIMITIVE_LINE_STRIP :: 2;
        PRIMITIVE_TRIANGLES :: 3;
        PRIMITIVE_TRIANGLE_STRIP :: 4;
        PRIMITIVE_MAX :: 5;
    }

    BlendShapeMode :: enum s32 {
        BLEND_SHAPE_MODE_NORMALIZED :: 0;
        BLEND_SHAPE_MODE_RELATIVE :: 1;
    }

    MultimeshTransformFormat :: enum s32 {
        MULTIMESH_TRANSFORM_2D :: 0;
        MULTIMESH_TRANSFORM_3D :: 1;
    }

    MultimeshPhysicsInterpolationQuality :: enum s32 {
        MULTIMESH_INTERP_QUALITY_FAST :: 0;
        MULTIMESH_INTERP_QUALITY_HIGH :: 1;
    }

    LightProjectorFilter :: enum s32 {
        LIGHT_PROJECTOR_FILTER_NEAREST :: 0;
        LIGHT_PROJECTOR_FILTER_LINEAR :: 1;
        LIGHT_PROJECTOR_FILTER_NEAREST_MIPMAPS :: 2;
        LIGHT_PROJECTOR_FILTER_LINEAR_MIPMAPS :: 3;
        LIGHT_PROJECTOR_FILTER_NEAREST_MIPMAPS_ANISOTROPIC :: 4;
        LIGHT_PROJECTOR_FILTER_LINEAR_MIPMAPS_ANISOTROPIC :: 5;
    }

    LightType :: enum s32 {
        LIGHT_DIRECTIONAL :: 0;
        LIGHT_OMNI :: 1;
        LIGHT_SPOT :: 2;
    }

    LightParam :: enum s32 {
        LIGHT_PARAM_ENERGY :: 0;
        LIGHT_PARAM_INDIRECT_ENERGY :: 1;
        LIGHT_PARAM_VOLUMETRIC_FOG_ENERGY :: 2;
        LIGHT_PARAM_SPECULAR :: 3;
        LIGHT_PARAM_RANGE :: 4;
        LIGHT_PARAM_SIZE :: 5;
        LIGHT_PARAM_ATTENUATION :: 6;
        LIGHT_PARAM_SPOT_ANGLE :: 7;
        LIGHT_PARAM_SPOT_ATTENUATION :: 8;
        LIGHT_PARAM_SHADOW_MAX_DISTANCE :: 9;
        LIGHT_PARAM_SHADOW_SPLIT_1_OFFSET :: 10;
        LIGHT_PARAM_SHADOW_SPLIT_2_OFFSET :: 11;
        LIGHT_PARAM_SHADOW_SPLIT_3_OFFSET :: 12;
        LIGHT_PARAM_SHADOW_FADE_START :: 13;
        LIGHT_PARAM_SHADOW_NORMAL_BIAS :: 14;
        LIGHT_PARAM_SHADOW_BIAS :: 15;
        LIGHT_PARAM_SHADOW_PANCAKE_SIZE :: 16;
        LIGHT_PARAM_SHADOW_OPACITY :: 17;
        LIGHT_PARAM_SHADOW_BLUR :: 18;
        LIGHT_PARAM_TRANSMITTANCE_BIAS :: 19;
        LIGHT_PARAM_INTENSITY :: 20;
        LIGHT_PARAM_MAX :: 21;
    }

    LightBakeMode :: enum s32 {
        LIGHT_BAKE_DISABLED :: 0;
        LIGHT_BAKE_STATIC :: 1;
        LIGHT_BAKE_DYNAMIC :: 2;
    }

    LightOmniShadowMode :: enum s32 {
        LIGHT_OMNI_SHADOW_DUAL_PARABOLOID :: 0;
        LIGHT_OMNI_SHADOW_CUBE :: 1;
    }

    LightDirectionalShadowMode :: enum s32 {
        LIGHT_DIRECTIONAL_SHADOW_ORTHOGONAL :: 0;
        LIGHT_DIRECTIONAL_SHADOW_PARALLEL_2_SPLITS :: 1;
        LIGHT_DIRECTIONAL_SHADOW_PARALLEL_4_SPLITS :: 2;
    }

    LightDirectionalSkyMode :: enum s32 {
        LIGHT_DIRECTIONAL_SKY_MODE_LIGHT_AND_SKY :: 0;
        LIGHT_DIRECTIONAL_SKY_MODE_LIGHT_ONLY :: 1;
        LIGHT_DIRECTIONAL_SKY_MODE_SKY_ONLY :: 2;
    }

    ShadowQuality :: enum s32 {
        SHADOW_QUALITY_HARD :: 0;
        SHADOW_QUALITY_SOFT_VERY_LOW :: 1;
        SHADOW_QUALITY_SOFT_LOW :: 2;
        SHADOW_QUALITY_SOFT_MEDIUM :: 3;
        SHADOW_QUALITY_SOFT_HIGH :: 4;
        SHADOW_QUALITY_SOFT_ULTRA :: 5;
        SHADOW_QUALITY_MAX :: 6;
    }

    ReflectionProbeUpdateMode :: enum s32 {
        REFLECTION_PROBE_UPDATE_ONCE :: 0;
        REFLECTION_PROBE_UPDATE_ALWAYS :: 1;
    }

    ReflectionProbeAmbientMode :: enum s32 {
        REFLECTION_PROBE_AMBIENT_DISABLED :: 0;
        REFLECTION_PROBE_AMBIENT_ENVIRONMENT :: 1;
        REFLECTION_PROBE_AMBIENT_COLOR :: 2;
    }

    DecalTexture :: enum s32 {
        DECAL_TEXTURE_ALBEDO :: 0;
        DECAL_TEXTURE_NORMAL :: 1;
        DECAL_TEXTURE_ORM :: 2;
        DECAL_TEXTURE_EMISSION :: 3;
        DECAL_TEXTURE_MAX :: 4;
    }

    DecalFilter :: enum s32 {
        DECAL_FILTER_NEAREST :: 0;
        DECAL_FILTER_LINEAR :: 1;
        DECAL_FILTER_NEAREST_MIPMAPS :: 2;
        DECAL_FILTER_LINEAR_MIPMAPS :: 3;
        DECAL_FILTER_NEAREST_MIPMAPS_ANISOTROPIC :: 4;
        DECAL_FILTER_LINEAR_MIPMAPS_ANISOTROPIC :: 5;
    }

    VoxelGIQuality :: enum s32 {
        VOXEL_GI_QUALITY_LOW :: 0;
        VOXEL_GI_QUALITY_HIGH :: 1;
    }

    ParticlesMode :: enum s32 {
        PARTICLES_MODE_2D :: 0;
        PARTICLES_MODE_3D :: 1;
    }

    ParticlesTransformAlign :: enum s32 {
        PARTICLES_TRANSFORM_ALIGN_DISABLED :: 0;
        PARTICLES_TRANSFORM_ALIGN_Z_BILLBOARD :: 1;
        PARTICLES_TRANSFORM_ALIGN_Y_TO_VELOCITY :: 2;
        PARTICLES_TRANSFORM_ALIGN_Z_BILLBOARD_Y_TO_VELOCITY :: 3;
    }

    ParticlesDrawOrder :: enum s32 {
        PARTICLES_DRAW_ORDER_INDEX :: 0;
        PARTICLES_DRAW_ORDER_LIFETIME :: 1;
        PARTICLES_DRAW_ORDER_REVERSE_LIFETIME :: 2;
        PARTICLES_DRAW_ORDER_VIEW_DEPTH :: 3;
    }

    ParticlesCollisionType :: enum s32 {
        PARTICLES_COLLISION_TYPE_SPHERE_ATTRACT :: 0;
        PARTICLES_COLLISION_TYPE_BOX_ATTRACT :: 1;
        PARTICLES_COLLISION_TYPE_VECTOR_FIELD_ATTRACT :: 2;
        PARTICLES_COLLISION_TYPE_SPHERE_COLLIDE :: 3;
        PARTICLES_COLLISION_TYPE_BOX_COLLIDE :: 4;
        PARTICLES_COLLISION_TYPE_SDF_COLLIDE :: 5;
        PARTICLES_COLLISION_TYPE_HEIGHTFIELD_COLLIDE :: 6;
    }

    ParticlesCollisionHeightfieldResolution :: enum s32 {
        PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_256 :: 0;
        PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_512 :: 1;
        PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_1024 :: 2;
        PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_2048 :: 3;
        PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_4096 :: 4;
        PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_8192 :: 5;
        PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_MAX :: 6;
    }

    FogVolumeShape :: enum s32 {
        FOG_VOLUME_SHAPE_ELLIPSOID :: 0;
        FOG_VOLUME_SHAPE_CONE :: 1;
        FOG_VOLUME_SHAPE_CYLINDER :: 2;
        FOG_VOLUME_SHAPE_BOX :: 3;
        FOG_VOLUME_SHAPE_WORLD :: 4;
        FOG_VOLUME_SHAPE_MAX :: 5;
    }

    ViewportScaling3DMode :: enum s32 {
        VIEWPORT_SCALING_3D_MODE_BILINEAR :: 0;
        VIEWPORT_SCALING_3D_MODE_FSR :: 1;
        VIEWPORT_SCALING_3D_MODE_FSR2 :: 2;
        VIEWPORT_SCALING_3D_MODE_METALFX_SPATIAL :: 3;
        VIEWPORT_SCALING_3D_MODE_METALFX_TEMPORAL :: 4;
        VIEWPORT_SCALING_3D_MODE_MAX :: 5;
    }

    ViewportUpdateMode :: enum s32 {
        VIEWPORT_UPDATE_DISABLED :: 0;
        VIEWPORT_UPDATE_ONCE :: 1;
        VIEWPORT_UPDATE_WHEN_VISIBLE :: 2;
        VIEWPORT_UPDATE_WHEN_PARENT_VISIBLE :: 3;
        VIEWPORT_UPDATE_ALWAYS :: 4;
    }

    ViewportClearMode :: enum s32 {
        VIEWPORT_CLEAR_ALWAYS :: 0;
        VIEWPORT_CLEAR_NEVER :: 1;
        VIEWPORT_CLEAR_ONLY_NEXT_FRAME :: 2;
    }

    ViewportEnvironmentMode :: enum s32 {
        VIEWPORT_ENVIRONMENT_DISABLED :: 0;
        VIEWPORT_ENVIRONMENT_ENABLED :: 1;
        VIEWPORT_ENVIRONMENT_INHERIT :: 2;
        VIEWPORT_ENVIRONMENT_MAX :: 3;
    }

    ViewportSDFOversize :: enum s32 {
        VIEWPORT_SDF_OVERSIZE_100_PERCENT :: 0;
        VIEWPORT_SDF_OVERSIZE_120_PERCENT :: 1;
        VIEWPORT_SDF_OVERSIZE_150_PERCENT :: 2;
        VIEWPORT_SDF_OVERSIZE_200_PERCENT :: 3;
        VIEWPORT_SDF_OVERSIZE_MAX :: 4;
    }

    ViewportSDFScale :: enum s32 {
        VIEWPORT_SDF_SCALE_100_PERCENT :: 0;
        VIEWPORT_SDF_SCALE_50_PERCENT :: 1;
        VIEWPORT_SDF_SCALE_25_PERCENT :: 2;
        VIEWPORT_SDF_SCALE_MAX :: 3;
    }

    ViewportMSAA :: enum s32 {
        VIEWPORT_MSAA_DISABLED :: 0;
        VIEWPORT_MSAA_2X :: 1;
        VIEWPORT_MSAA_4X :: 2;
        VIEWPORT_MSAA_8X :: 3;
        VIEWPORT_MSAA_MAX :: 4;
    }

    ViewportAnisotropicFiltering :: enum s32 {
        VIEWPORT_ANISOTROPY_DISABLED :: 0;
        VIEWPORT_ANISOTROPY_2X :: 1;
        VIEWPORT_ANISOTROPY_4X :: 2;
        VIEWPORT_ANISOTROPY_8X :: 3;
        VIEWPORT_ANISOTROPY_16X :: 4;
        VIEWPORT_ANISOTROPY_MAX :: 5;
    }

    ViewportScreenSpaceAA :: enum s32 {
        VIEWPORT_SCREEN_SPACE_AA_DISABLED :: 0;
        VIEWPORT_SCREEN_SPACE_AA_FXAA :: 1;
        VIEWPORT_SCREEN_SPACE_AA_MAX :: 2;
    }

    ViewportOcclusionCullingBuildQuality :: enum s32 {
        VIEWPORT_OCCLUSION_BUILD_QUALITY_LOW :: 0;
        VIEWPORT_OCCLUSION_BUILD_QUALITY_MEDIUM :: 1;
        VIEWPORT_OCCLUSION_BUILD_QUALITY_HIGH :: 2;
    }

    ViewportRenderInfo :: enum s32 {
        VIEWPORT_RENDER_INFO_OBJECTS_IN_FRAME :: 0;
        VIEWPORT_RENDER_INFO_PRIMITIVES_IN_FRAME :: 1;
        VIEWPORT_RENDER_INFO_DRAW_CALLS_IN_FRAME :: 2;
        VIEWPORT_RENDER_INFO_MAX :: 3;
    }

    ViewportRenderInfoType :: enum s32 {
        VIEWPORT_RENDER_INFO_TYPE_VISIBLE :: 0;
        VIEWPORT_RENDER_INFO_TYPE_SHADOW :: 1;
        VIEWPORT_RENDER_INFO_TYPE_CANVAS :: 2;
        VIEWPORT_RENDER_INFO_TYPE_MAX :: 3;
    }

    ViewportDebugDraw :: enum s32 {
        VIEWPORT_DEBUG_DRAW_DISABLED :: 0;
        VIEWPORT_DEBUG_DRAW_UNSHADED :: 1;
        VIEWPORT_DEBUG_DRAW_LIGHTING :: 2;
        VIEWPORT_DEBUG_DRAW_OVERDRAW :: 3;
        VIEWPORT_DEBUG_DRAW_WIREFRAME :: 4;
        VIEWPORT_DEBUG_DRAW_NORMAL_BUFFER :: 5;
        VIEWPORT_DEBUG_DRAW_VOXEL_GI_ALBEDO :: 6;
        VIEWPORT_DEBUG_DRAW_VOXEL_GI_LIGHTING :: 7;
        VIEWPORT_DEBUG_DRAW_VOXEL_GI_EMISSION :: 8;
        VIEWPORT_DEBUG_DRAW_SHADOW_ATLAS :: 9;
        VIEWPORT_DEBUG_DRAW_DIRECTIONAL_SHADOW_ATLAS :: 10;
        VIEWPORT_DEBUG_DRAW_SCENE_LUMINANCE :: 11;
        VIEWPORT_DEBUG_DRAW_SSAO :: 12;
        VIEWPORT_DEBUG_DRAW_SSIL :: 13;
        VIEWPORT_DEBUG_DRAW_PSSM_SPLITS :: 14;
        VIEWPORT_DEBUG_DRAW_DECAL_ATLAS :: 15;
        VIEWPORT_DEBUG_DRAW_SDFGI :: 16;
        VIEWPORT_DEBUG_DRAW_SDFGI_PROBES :: 17;
        VIEWPORT_DEBUG_DRAW_GI_BUFFER :: 18;
        VIEWPORT_DEBUG_DRAW_DISABLE_LOD :: 19;
        VIEWPORT_DEBUG_DRAW_CLUSTER_OMNI_LIGHTS :: 20;
        VIEWPORT_DEBUG_DRAW_CLUSTER_SPOT_LIGHTS :: 21;
        VIEWPORT_DEBUG_DRAW_CLUSTER_DECALS :: 22;
        VIEWPORT_DEBUG_DRAW_CLUSTER_REFLECTION_PROBES :: 23;
        VIEWPORT_DEBUG_DRAW_OCCLUDERS :: 24;
        VIEWPORT_DEBUG_DRAW_MOTION_VECTORS :: 25;
        VIEWPORT_DEBUG_DRAW_INTERNAL_BUFFER :: 26;
    }

    ViewportVRSMode :: enum s32 {
        VIEWPORT_VRS_DISABLED :: 0;
        VIEWPORT_VRS_TEXTURE :: 1;
        VIEWPORT_VRS_XR :: 2;
        VIEWPORT_VRS_MAX :: 3;
    }

    ViewportVRSUpdateMode :: enum s32 {
        VIEWPORT_VRS_UPDATE_DISABLED :: 0;
        VIEWPORT_VRS_UPDATE_ONCE :: 1;
        VIEWPORT_VRS_UPDATE_ALWAYS :: 2;
        VIEWPORT_VRS_UPDATE_MAX :: 3;
    }

    SkyMode :: enum s32 {
        SKY_MODE_AUTOMATIC :: 0;
        SKY_MODE_QUALITY :: 1;
        SKY_MODE_INCREMENTAL :: 2;
        SKY_MODE_REALTIME :: 3;
    }

    CompositorEffectFlags :: enum s32 {
        COMPOSITOR_EFFECT_FLAG_ACCESS_RESOLVED_COLOR :: 1;
        COMPOSITOR_EFFECT_FLAG_ACCESS_RESOLVED_DEPTH :: 2;
        COMPOSITOR_EFFECT_FLAG_NEEDS_MOTION_VECTORS :: 4;
        COMPOSITOR_EFFECT_FLAG_NEEDS_ROUGHNESS :: 8;
        COMPOSITOR_EFFECT_FLAG_NEEDS_SEPARATE_SPECULAR :: 16;
    }

    CompositorEffectCallbackType :: enum s32 {
        COMPOSITOR_EFFECT_CALLBACK_TYPE_PRE_OPAQUE :: 0;
        COMPOSITOR_EFFECT_CALLBACK_TYPE_POST_OPAQUE :: 1;
        COMPOSITOR_EFFECT_CALLBACK_TYPE_POST_SKY :: 2;
        COMPOSITOR_EFFECT_CALLBACK_TYPE_PRE_TRANSPARENT :: 3;
        COMPOSITOR_EFFECT_CALLBACK_TYPE_POST_TRANSPARENT :: 4;
        COMPOSITOR_EFFECT_CALLBACK_TYPE_ANY :: -1;
    }

    EnvironmentBG :: enum s32 {
        ENV_BG_CLEAR_COLOR :: 0;
        ENV_BG_COLOR :: 1;
        ENV_BG_SKY :: 2;
        ENV_BG_CANVAS :: 3;
        ENV_BG_KEEP :: 4;
        ENV_BG_CAMERA_FEED :: 5;
        ENV_BG_MAX :: 6;
    }

    EnvironmentAmbientSource :: enum s32 {
        ENV_AMBIENT_SOURCE_BG :: 0;
        ENV_AMBIENT_SOURCE_DISABLED :: 1;
        ENV_AMBIENT_SOURCE_COLOR :: 2;
        ENV_AMBIENT_SOURCE_SKY :: 3;
    }

    EnvironmentReflectionSource :: enum s32 {
        ENV_REFLECTION_SOURCE_BG :: 0;
        ENV_REFLECTION_SOURCE_DISABLED :: 1;
        ENV_REFLECTION_SOURCE_SKY :: 2;
    }

    EnvironmentGlowBlendMode :: enum s32 {
        ENV_GLOW_BLEND_MODE_ADDITIVE :: 0;
        ENV_GLOW_BLEND_MODE_SCREEN :: 1;
        ENV_GLOW_BLEND_MODE_SOFTLIGHT :: 2;
        ENV_GLOW_BLEND_MODE_REPLACE :: 3;
        ENV_GLOW_BLEND_MODE_MIX :: 4;
    }

    EnvironmentFogMode :: enum s32 {
        ENV_FOG_MODE_EXPONENTIAL :: 0;
        ENV_FOG_MODE_DEPTH :: 1;
    }

    EnvironmentToneMapper :: enum s32 {
        ENV_TONE_MAPPER_LINEAR :: 0;
        ENV_TONE_MAPPER_REINHARD :: 1;
        ENV_TONE_MAPPER_FILMIC :: 2;
        ENV_TONE_MAPPER_ACES :: 3;
        ENV_TONE_MAPPER_AGX :: 4;
    }

    EnvironmentSSRRoughnessQuality :: enum s32 {
        ENV_SSR_ROUGHNESS_QUALITY_DISABLED :: 0;
        ENV_SSR_ROUGHNESS_QUALITY_LOW :: 1;
        ENV_SSR_ROUGHNESS_QUALITY_MEDIUM :: 2;
        ENV_SSR_ROUGHNESS_QUALITY_HIGH :: 3;
    }

    EnvironmentSSAOQuality :: enum s32 {
        ENV_SSAO_QUALITY_VERY_LOW :: 0;
        ENV_SSAO_QUALITY_LOW :: 1;
        ENV_SSAO_QUALITY_MEDIUM :: 2;
        ENV_SSAO_QUALITY_HIGH :: 3;
        ENV_SSAO_QUALITY_ULTRA :: 4;
    }

    EnvironmentSSILQuality :: enum s32 {
        ENV_SSIL_QUALITY_VERY_LOW :: 0;
        ENV_SSIL_QUALITY_LOW :: 1;
        ENV_SSIL_QUALITY_MEDIUM :: 2;
        ENV_SSIL_QUALITY_HIGH :: 3;
        ENV_SSIL_QUALITY_ULTRA :: 4;
    }

    EnvironmentSDFGIYScale :: enum s32 {
        ENV_SDFGI_Y_SCALE_50_PERCENT :: 0;
        ENV_SDFGI_Y_SCALE_75_PERCENT :: 1;
        ENV_SDFGI_Y_SCALE_100_PERCENT :: 2;
    }

    EnvironmentSDFGIRayCount :: enum s32 {
        ENV_SDFGI_RAY_COUNT_4 :: 0;
        ENV_SDFGI_RAY_COUNT_8 :: 1;
        ENV_SDFGI_RAY_COUNT_16 :: 2;
        ENV_SDFGI_RAY_COUNT_32 :: 3;
        ENV_SDFGI_RAY_COUNT_64 :: 4;
        ENV_SDFGI_RAY_COUNT_96 :: 5;
        ENV_SDFGI_RAY_COUNT_128 :: 6;
        ENV_SDFGI_RAY_COUNT_MAX :: 7;
    }

    EnvironmentSDFGIFramesToConverge :: enum s32 {
        ENV_SDFGI_CONVERGE_IN_5_FRAMES :: 0;
        ENV_SDFGI_CONVERGE_IN_10_FRAMES :: 1;
        ENV_SDFGI_CONVERGE_IN_15_FRAMES :: 2;
        ENV_SDFGI_CONVERGE_IN_20_FRAMES :: 3;
        ENV_SDFGI_CONVERGE_IN_25_FRAMES :: 4;
        ENV_SDFGI_CONVERGE_IN_30_FRAMES :: 5;
        ENV_SDFGI_CONVERGE_MAX :: 6;
    }

    EnvironmentSDFGIFramesToUpdateLight :: enum s32 {
        ENV_SDFGI_UPDATE_LIGHT_IN_1_FRAME :: 0;
        ENV_SDFGI_UPDATE_LIGHT_IN_2_FRAMES :: 1;
        ENV_SDFGI_UPDATE_LIGHT_IN_4_FRAMES :: 2;
        ENV_SDFGI_UPDATE_LIGHT_IN_8_FRAMES :: 3;
        ENV_SDFGI_UPDATE_LIGHT_IN_16_FRAMES :: 4;
        ENV_SDFGI_UPDATE_LIGHT_MAX :: 5;
    }

    SubSurfaceScatteringQuality :: enum s32 {
        SUB_SURFACE_SCATTERING_QUALITY_DISABLED :: 0;
        SUB_SURFACE_SCATTERING_QUALITY_LOW :: 1;
        SUB_SURFACE_SCATTERING_QUALITY_MEDIUM :: 2;
        SUB_SURFACE_SCATTERING_QUALITY_HIGH :: 3;
    }

    DOFBokehShape :: enum s32 {
        DOF_BOKEH_BOX :: 0;
        DOF_BOKEH_HEXAGON :: 1;
        DOF_BOKEH_CIRCLE :: 2;
    }

    DOFBlurQuality :: enum s32 {
        DOF_BLUR_QUALITY_VERY_LOW :: 0;
        DOF_BLUR_QUALITY_LOW :: 1;
        DOF_BLUR_QUALITY_MEDIUM :: 2;
        DOF_BLUR_QUALITY_HIGH :: 3;
    }

    InstanceType :: enum s32 {
        INSTANCE_NONE :: 0;
        INSTANCE_MESH :: 1;
        INSTANCE_MULTIMESH :: 2;
        INSTANCE_PARTICLES :: 3;
        INSTANCE_PARTICLES_COLLISION :: 4;
        INSTANCE_LIGHT :: 5;
        INSTANCE_REFLECTION_PROBE :: 6;
        INSTANCE_DECAL :: 7;
        INSTANCE_VOXEL_GI :: 8;
        INSTANCE_LIGHTMAP :: 9;
        INSTANCE_OCCLUDER :: 10;
        INSTANCE_VISIBLITY_NOTIFIER :: 11;
        INSTANCE_FOG_VOLUME :: 12;
        INSTANCE_MAX :: 13;
        INSTANCE_GEOMETRY_MASK :: 14;
    }

    InstanceFlags :: enum s32 {
        INSTANCE_FLAG_USE_BAKED_LIGHT :: 0;
        INSTANCE_FLAG_USE_DYNAMIC_GI :: 1;
        INSTANCE_FLAG_DRAW_NEXT_FRAME_IF_VISIBLE :: 2;
        INSTANCE_FLAG_IGNORE_OCCLUSION_CULLING :: 3;
        INSTANCE_FLAG_MAX :: 4;
    }

    ShadowCastingSetting :: enum s32 {
        SHADOW_CASTING_SETTING_OFF :: 0;
        SHADOW_CASTING_SETTING_ON :: 1;
        SHADOW_CASTING_SETTING_DOUBLE_SIDED :: 2;
        SHADOW_CASTING_SETTING_SHADOWS_ONLY :: 3;
    }

    VisibilityRangeFadeMode :: enum s32 {
        VISIBILITY_RANGE_FADE_DISABLED :: 0;
        VISIBILITY_RANGE_FADE_SELF :: 1;
        VISIBILITY_RANGE_FADE_DEPENDENCIES :: 2;
    }

    BakeChannels :: enum s32 {
        BAKE_CHANNEL_ALBEDO_ALPHA :: 0;
        BAKE_CHANNEL_NORMAL :: 1;
        BAKE_CHANNEL_ORM :: 2;
        BAKE_CHANNEL_EMISSION :: 3;
    }

    CanvasTextureChannel :: enum s32 {
        CANVAS_TEXTURE_CHANNEL_DIFFUSE :: 0;
        CANVAS_TEXTURE_CHANNEL_NORMAL :: 1;
        CANVAS_TEXTURE_CHANNEL_SPECULAR :: 2;
    }

    NinePatchAxisMode :: enum s32 {
        NINE_PATCH_STRETCH :: 0;
        NINE_PATCH_TILE :: 1;
        NINE_PATCH_TILE_FIT :: 2;
    }

    CanvasItemTextureFilter :: enum s32 {
        CANVAS_ITEM_TEXTURE_FILTER_DEFAULT :: 0;
        CANVAS_ITEM_TEXTURE_FILTER_NEAREST :: 1;
        CANVAS_ITEM_TEXTURE_FILTER_LINEAR :: 2;
        CANVAS_ITEM_TEXTURE_FILTER_NEAREST_WITH_MIPMAPS :: 3;
        CANVAS_ITEM_TEXTURE_FILTER_LINEAR_WITH_MIPMAPS :: 4;
        CANVAS_ITEM_TEXTURE_FILTER_NEAREST_WITH_MIPMAPS_ANISOTROPIC :: 5;
        CANVAS_ITEM_TEXTURE_FILTER_LINEAR_WITH_MIPMAPS_ANISOTROPIC :: 6;
        CANVAS_ITEM_TEXTURE_FILTER_MAX :: 7;
    }

    CanvasItemTextureRepeat :: enum s32 {
        CANVAS_ITEM_TEXTURE_REPEAT_DEFAULT :: 0;
        CANVAS_ITEM_TEXTURE_REPEAT_DISABLED :: 1;
        CANVAS_ITEM_TEXTURE_REPEAT_ENABLED :: 2;
        CANVAS_ITEM_TEXTURE_REPEAT_MIRROR :: 3;
        CANVAS_ITEM_TEXTURE_REPEAT_MAX :: 4;
    }

    CanvasGroupMode :: enum s32 {
        CANVAS_GROUP_MODE_DISABLED :: 0;
        CANVAS_GROUP_MODE_CLIP_ONLY :: 1;
        CANVAS_GROUP_MODE_CLIP_AND_DRAW :: 2;
        CANVAS_GROUP_MODE_TRANSPARENT :: 3;
    }

    CanvasLightMode :: enum s32 {
        CANVAS_LIGHT_MODE_POINT :: 0;
        CANVAS_LIGHT_MODE_DIRECTIONAL :: 1;
    }

    CanvasLightBlendMode :: enum s32 {
        CANVAS_LIGHT_BLEND_MODE_ADD :: 0;
        CANVAS_LIGHT_BLEND_MODE_SUB :: 1;
        CANVAS_LIGHT_BLEND_MODE_MIX :: 2;
    }

    CanvasLightShadowFilter :: enum s32 {
        CANVAS_LIGHT_FILTER_NONE :: 0;
        CANVAS_LIGHT_FILTER_PCF5 :: 1;
        CANVAS_LIGHT_FILTER_PCF13 :: 2;
        CANVAS_LIGHT_FILTER_MAX :: 3;
    }

    CanvasOccluderPolygonCullMode :: enum s32 {
        CANVAS_OCCLUDER_POLYGON_CULL_DISABLED :: 0;
        CANVAS_OCCLUDER_POLYGON_CULL_CLOCKWISE :: 1;
        CANVAS_OCCLUDER_POLYGON_CULL_COUNTER_CLOCKWISE :: 2;
    }

    GlobalShaderParameterType :: enum s32 {
        GLOBAL_VAR_TYPE_BOOL :: 0;
        GLOBAL_VAR_TYPE_BVEC2 :: 1;
        GLOBAL_VAR_TYPE_BVEC3 :: 2;
        GLOBAL_VAR_TYPE_BVEC4 :: 3;
        GLOBAL_VAR_TYPE_INT :: 4;
        GLOBAL_VAR_TYPE_IVEC2 :: 5;
        GLOBAL_VAR_TYPE_IVEC3 :: 6;
        GLOBAL_VAR_TYPE_IVEC4 :: 7;
        GLOBAL_VAR_TYPE_RECT2I :: 8;
        GLOBAL_VAR_TYPE_UINT :: 9;
        GLOBAL_VAR_TYPE_UVEC2 :: 10;
        GLOBAL_VAR_TYPE_UVEC3 :: 11;
        GLOBAL_VAR_TYPE_UVEC4 :: 12;
        GLOBAL_VAR_TYPE_FLOAT :: 13;
        GLOBAL_VAR_TYPE_VEC2 :: 14;
        GLOBAL_VAR_TYPE_VEC3 :: 15;
        GLOBAL_VAR_TYPE_VEC4 :: 16;
        GLOBAL_VAR_TYPE_COLOR :: 17;
        GLOBAL_VAR_TYPE_RECT2 :: 18;
        GLOBAL_VAR_TYPE_MAT2 :: 19;
        GLOBAL_VAR_TYPE_MAT3 :: 20;
        GLOBAL_VAR_TYPE_MAT4 :: 21;
        GLOBAL_VAR_TYPE_TRANSFORM_2D :: 22;
        GLOBAL_VAR_TYPE_TRANSFORM :: 23;
        GLOBAL_VAR_TYPE_SAMPLER2D :: 24;
        GLOBAL_VAR_TYPE_SAMPLER2DARRAY :: 25;
        GLOBAL_VAR_TYPE_SAMPLER3D :: 26;
        GLOBAL_VAR_TYPE_SAMPLERCUBE :: 27;
        GLOBAL_VAR_TYPE_SAMPLEREXT :: 28;
        GLOBAL_VAR_TYPE_MAX :: 29;
    }

    RenderingInfo :: enum s32 {
        RENDERING_INFO_TOTAL_OBJECTS_IN_FRAME :: 0;
        RENDERING_INFO_TOTAL_PRIMITIVES_IN_FRAME :: 1;
        RENDERING_INFO_TOTAL_DRAW_CALLS_IN_FRAME :: 2;
        RENDERING_INFO_TEXTURE_MEM_USED :: 3;
        RENDERING_INFO_BUFFER_MEM_USED :: 4;
        RENDERING_INFO_VIDEO_MEM_USED :: 5;
        RENDERING_INFO_PIPELINE_COMPILATIONS_CANVAS :: 6;
        RENDERING_INFO_PIPELINE_COMPILATIONS_MESH :: 7;
        RENDERING_INFO_PIPELINE_COMPILATIONS_SURFACE :: 8;
        RENDERING_INFO_PIPELINE_COMPILATIONS_DRAW :: 9;
        RENDERING_INFO_PIPELINE_COMPILATIONS_SPECIALIZATION :: 10;
    }

    PipelineSource :: enum s32 {
        PIPELINE_SOURCE_CANVAS :: 0;
        PIPELINE_SOURCE_MESH :: 1;
        PIPELINE_SOURCE_SURFACE :: 2;
        PIPELINE_SOURCE_DRAW :: 3;
        PIPELINE_SOURCE_SPECIALIZATION :: 4;
        PIPELINE_SOURCE_MAX :: 5;
    }

    Features :: enum s32 {
        FEATURE_SHADERS :: 0;
        FEATURE_MULTITHREADED :: 1;
    }
}

Resource :: struct { #as using base: OpaqueClass; } // 607

ResourceFormatLoader :: struct {  // 608

        #as using base: OpaqueClass;

    CacheMode :: enum s32 {
        CACHE_MODE_IGNORE :: 0;
        CACHE_MODE_REUSE :: 1;
        CACHE_MODE_REPLACE :: 2;
        CACHE_MODE_IGNORE_DEEP :: 3;
        CACHE_MODE_REPLACE_DEEP :: 4;
    }
}

ResourceFormatSaver :: struct { #as using base: OpaqueClass; } // 609

ResourceImporter :: struct {  // 610

        #as using base: OpaqueClass;

    ImportOrder :: enum s32 {
        IMPORT_ORDER_DEFAULT :: 0;
        IMPORT_ORDER_SCENE :: 100;
    }
}

ResourceImporterBMFont :: struct { #as using base: OpaqueClass; } // 611

ResourceImporterBitMap :: struct { #as using base: OpaqueClass; } // 612

ResourceImporterCSVTranslation :: struct { #as using base: OpaqueClass; } // 613

ResourceImporterDynamicFont :: struct { #as using base: OpaqueClass; } // 614

ResourceImporterImage :: struct { #as using base: OpaqueClass; } // 615

ResourceImporterImageFont :: struct { #as using base: OpaqueClass; } // 616

ResourceImporterLayeredTexture :: struct { #as using base: OpaqueClass; } // 617

ResourceImporterMP3 :: struct { #as using base: OpaqueClass; } // 618

ResourceImporterOBJ :: struct { #as using base: OpaqueClass; } // 619

ResourceImporterOggVorbis :: struct { #as using base: OpaqueClass; } // 620

ResourceImporterScene :: struct { #as using base: OpaqueClass; } // 621

ResourceImporterShaderFile :: struct { #as using base: OpaqueClass; } // 622

ResourceImporterTexture :: struct { #as using base: OpaqueClass; } // 623

ResourceImporterTextureAtlas :: struct { #as using base: OpaqueClass; } // 624

ResourceImporterWAV :: struct { #as using base: OpaqueClass; } // 625

ResourceLoader :: struct {  // 626

        #as using base: OpaqueClass;

    ThreadLoadStatus :: enum s32 {
        THREAD_LOAD_INVALID_RESOURCE :: 0;
        THREAD_LOAD_IN_PROGRESS :: 1;
        THREAD_LOAD_FAILED :: 2;
        THREAD_LOAD_LOADED :: 3;
    }

    CacheMode :: enum s32 {
        CACHE_MODE_IGNORE :: 0;
        CACHE_MODE_REUSE :: 1;
        CACHE_MODE_REPLACE :: 2;
        CACHE_MODE_IGNORE_DEEP :: 3;
        CACHE_MODE_REPLACE_DEEP :: 4;
    }
}

ResourcePreloader :: struct { #as using base: OpaqueClass; } // 627

ResourceSaver :: struct {  // 628

        #as using base: OpaqueClass;

    SaverFlags :: enum u64 {
        FLAG_NONE :: 0;
        FLAG_RELATIVE_PATHS :: 1;
        FLAG_BUNDLE_RESOURCES :: 2;
        FLAG_CHANGE_PATH :: 4;
        FLAG_OMIT_EDITOR_PROPERTIES :: 8;
        FLAG_SAVE_BIG_ENDIAN :: 16;
        FLAG_COMPRESS :: 32;
        FLAG_REPLACE_SUBRESOURCE_PATHS :: 64;
    } @bitfield
}

ResourceUID :: struct { #as using base: OpaqueClass; } // 629

RetargetModifier3D :: struct {  // 630

        #as using base: OpaqueClass;

    TransformFlag :: enum u64 {
        TRANSFORM_FLAG_POSITION :: 1;
        TRANSFORM_FLAG_ROTATION :: 2;
        TRANSFORM_FLAG_SCALE :: 4;
        TRANSFORM_FLAG_ALL :: 7;
    } @bitfield
}

RibbonTrailMesh :: struct {  // 631

        #as using base: OpaqueClass;

    Shape :: enum s32 {
        SHAPE_FLAT :: 0;
        SHAPE_CROSS :: 1;
    }
}

RichTextEffect :: struct { #as using base: OpaqueClass; } // 632

RichTextLabel :: struct {  // 633

        #as using base: OpaqueClass;

    ListType :: enum s32 {
        LIST_NUMBERS :: 0;
        LIST_LETTERS :: 1;
        LIST_ROMAN :: 2;
        LIST_DOTS :: 3;
    }

    MenuItems :: enum s32 {
        MENU_COPY :: 0;
        MENU_SELECT_ALL :: 1;
        MENU_MAX :: 2;
    }

    MetaUnderline :: enum s32 {
        META_UNDERLINE_NEVER :: 0;
        META_UNDERLINE_ALWAYS :: 1;
        META_UNDERLINE_ON_HOVER :: 2;
    }

    ImageUpdateMask :: enum u64 {
        UPDATE_TEXTURE :: 1;
        UPDATE_SIZE :: 2;
        UPDATE_COLOR :: 4;
        UPDATE_ALIGNMENT :: 8;
        UPDATE_REGION :: 16;
        UPDATE_PAD :: 32;
        UPDATE_TOOLTIP :: 64;
        UPDATE_WIDTH_IN_PERCENT :: 128;
    } @bitfield
}

RigidBody2D :: struct {  // 634

        #as using base: OpaqueClass;

    FreezeMode :: enum s32 {
        FREEZE_MODE_STATIC :: 0;
        FREEZE_MODE_KINEMATIC :: 1;
    }

    CenterOfMassMode :: enum s32 {
        CENTER_OF_MASS_MODE_AUTO :: 0;
        CENTER_OF_MASS_MODE_CUSTOM :: 1;
    }

    DampMode :: enum s32 {
        DAMP_MODE_COMBINE :: 0;
        DAMP_MODE_REPLACE :: 1;
    }

    CCDMode :: enum s32 {
        CCD_MODE_DISABLED :: 0;
        CCD_MODE_CAST_RAY :: 1;
        CCD_MODE_CAST_SHAPE :: 2;
    }
}

RigidBody3D :: struct {  // 635

        #as using base: OpaqueClass;

    FreezeMode :: enum s32 {
        FREEZE_MODE_STATIC :: 0;
        FREEZE_MODE_KINEMATIC :: 1;
    }

    CenterOfMassMode :: enum s32 {
        CENTER_OF_MASS_MODE_AUTO :: 0;
        CENTER_OF_MASS_MODE_CUSTOM :: 1;
    }

    DampMode :: enum s32 {
        DAMP_MODE_COMBINE :: 0;
        DAMP_MODE_REPLACE :: 1;
    }
}

RootMotionView :: struct { #as using base: OpaqueClass; } // 636

SceneMultiplayer :: struct { #as using base: OpaqueClass; } // 637

SceneReplicationConfig :: struct {  // 638

        #as using base: OpaqueClass;

    ReplicationMode :: enum s32 {
        REPLICATION_MODE_NEVER :: 0;
        REPLICATION_MODE_ALWAYS :: 1;
        REPLICATION_MODE_ON_CHANGE :: 2;
    }
}

SceneState :: struct {  // 639

        #as using base: OpaqueClass;

    GenEditState :: enum s32 {
        GEN_EDIT_STATE_DISABLED :: 0;
        GEN_EDIT_STATE_INSTANCE :: 1;
        GEN_EDIT_STATE_MAIN :: 2;
        GEN_EDIT_STATE_MAIN_INHERITED :: 3;
    }
}

SceneTree :: struct {  // 640

        #as using base: OpaqueClass;

    GroupCallFlags :: enum s32 {
        GROUP_CALL_DEFAULT :: 0;
        GROUP_CALL_REVERSE :: 1;
        GROUP_CALL_DEFERRED :: 2;
        GROUP_CALL_UNIQUE :: 4;
    }
}

SceneTreeTimer :: struct { #as using base: OpaqueClass; } // 641

Script :: struct { #as using base: OpaqueClass; } // 642

ScriptCreateDialog :: struct { #as using base: OpaqueClass; } // 643

ScriptEditor :: struct { #as using base: OpaqueClass; } // 644

ScriptEditorBase :: struct { #as using base: OpaqueClass; } // 645

ScriptExtension :: struct { #as using base: OpaqueClass; } // 646

ScriptLanguage :: struct {  // 647

        #as using base: OpaqueClass;

    ScriptNameCasing :: enum s32 {
        SCRIPT_NAME_CASING_AUTO :: 0;
        SCRIPT_NAME_CASING_PASCAL_CASE :: 1;
        SCRIPT_NAME_CASING_SNAKE_CASE :: 2;
        SCRIPT_NAME_CASING_KEBAB_CASE :: 3;
    }
}

ScriptLanguageExtension :: struct {  // 648

        #as using base: OpaqueClass;

    LookupResultType :: enum s32 {
        LOOKUP_RESULT_SCRIPT_LOCATION :: 0;
        LOOKUP_RESULT_CLASS :: 1;
        LOOKUP_RESULT_CLASS_CONSTANT :: 2;
        LOOKUP_RESULT_CLASS_PROPERTY :: 3;
        LOOKUP_RESULT_CLASS_METHOD :: 4;
        LOOKUP_RESULT_CLASS_SIGNAL :: 5;
        LOOKUP_RESULT_CLASS_ENUM :: 6;
        LOOKUP_RESULT_CLASS_TBD_GLOBALSCOPE :: 7;
        LOOKUP_RESULT_CLASS_ANNOTATION :: 8;
        LOOKUP_RESULT_LOCAL_CONSTANT :: 9;
        LOOKUP_RESULT_LOCAL_VARIABLE :: 10;
        LOOKUP_RESULT_MAX :: 11;
    }

    CodeCompletionLocation :: enum s32 {
        LOCATION_LOCAL :: 0;
        LOCATION_PARENT_MASK :: 256;
        LOCATION_OTHER_USER_CODE :: 512;
        LOCATION_OTHER :: 1024;
    }

    CodeCompletionKind :: enum s32 {
        CODE_COMPLETION_KIND_CLASS :: 0;
        CODE_COMPLETION_KIND_FUNCTION :: 1;
        CODE_COMPLETION_KIND_SIGNAL :: 2;
        CODE_COMPLETION_KIND_VARIABLE :: 3;
        CODE_COMPLETION_KIND_MEMBER :: 4;
        CODE_COMPLETION_KIND_ENUM :: 5;
        CODE_COMPLETION_KIND_CONSTANT :: 6;
        CODE_COMPLETION_KIND_NODE_PATH :: 7;
        CODE_COMPLETION_KIND_FILE_PATH :: 8;
        CODE_COMPLETION_KIND_PLAIN_TEXT :: 9;
        CODE_COMPLETION_KIND_MAX :: 10;
    }
}

ScrollBar :: struct { #as using base: OpaqueClass; } // 649

ScrollContainer :: struct {  // 650

        #as using base: OpaqueClass;

    ScrollMode :: enum s32 {
        SCROLL_MODE_DISABLED :: 0;
        SCROLL_MODE_AUTO :: 1;
        SCROLL_MODE_SHOW_ALWAYS :: 2;
        SCROLL_MODE_SHOW_NEVER :: 3;
        SCROLL_MODE_RESERVE :: 4;
    }
}

SegmentShape2D :: struct { #as using base: OpaqueClass; } // 651

Semaphore :: struct { #as using base: OpaqueClass; } // 652

SeparationRayShape2D :: struct { #as using base: OpaqueClass; } // 653

SeparationRayShape3D :: struct { #as using base: OpaqueClass; } // 654

Separator :: struct { #as using base: OpaqueClass; } // 655

Shader :: struct {  // 656

        #as using base: OpaqueClass;

    Mode :: enum s32 {
        MODE_SPATIAL :: 0;
        MODE_CANVAS_ITEM :: 1;
        MODE_PARTICLES :: 2;
        MODE_SKY :: 3;
        MODE_FOG :: 4;
    }
}

ShaderGlobalsOverride :: struct { #as using base: OpaqueClass; } // 657

ShaderInclude :: struct { #as using base: OpaqueClass; } // 658

ShaderIncludeDB :: struct { #as using base: OpaqueClass; } // 659

ShaderMaterial :: struct { #as using base: OpaqueClass; } // 660

Shape2D :: struct { #as using base: OpaqueClass; } // 661

Shape3D :: struct { #as using base: OpaqueClass; } // 662

ShapeCast2D :: struct { #as using base: OpaqueClass; } // 663

ShapeCast3D :: struct { #as using base: OpaqueClass; } // 664

Shortcut :: struct { #as using base: OpaqueClass; } // 665

Skeleton2D :: struct { #as using base: OpaqueClass; } // 666

Skeleton3D :: struct {  // 667

        #as using base: OpaqueClass;

    ModifierCallbackModeProcess :: enum s32 {
        MODIFIER_CALLBACK_MODE_PROCESS_PHYSICS :: 0;
        MODIFIER_CALLBACK_MODE_PROCESS_IDLE :: 1;
    }
}

SkeletonIK3D :: struct { #as using base: OpaqueClass; } // 668

SkeletonModification2D :: struct { #as using base: OpaqueClass; } // 669

SkeletonModification2DCCDIK :: struct { #as using base: OpaqueClass; } // 670

SkeletonModification2DFABRIK :: struct { #as using base: OpaqueClass; } // 671

SkeletonModification2DJiggle :: struct { #as using base: OpaqueClass; } // 672

SkeletonModification2DLookAt :: struct { #as using base: OpaqueClass; } // 673

SkeletonModification2DPhysicalBones :: struct { #as using base: OpaqueClass; } // 674

SkeletonModification2DStackHolder :: struct { #as using base: OpaqueClass; } // 675

SkeletonModification2DTwoBoneIK :: struct { #as using base: OpaqueClass; } // 676

SkeletonModificationStack2D :: struct { #as using base: OpaqueClass; } // 677

SkeletonModifier3D :: struct {  // 678

        #as using base: OpaqueClass;

    BoneAxis :: enum s32 {
        BONE_AXIS_PLUS_X :: 0;
        BONE_AXIS_MINUS_X :: 1;
        BONE_AXIS_PLUS_Y :: 2;
        BONE_AXIS_MINUS_Y :: 3;
        BONE_AXIS_PLUS_Z :: 4;
        BONE_AXIS_MINUS_Z :: 5;
    }
}

SkeletonProfile :: struct {  // 679

        #as using base: OpaqueClass;

    TailDirection :: enum s32 {
        TAIL_DIRECTION_AVERAGE_CHILDREN :: 0;
        TAIL_DIRECTION_SPECIFIC_CHILD :: 1;
        TAIL_DIRECTION_END :: 2;
    }
}

SkeletonProfileHumanoid :: struct { #as using base: OpaqueClass; } // 680

Skin :: struct { #as using base: OpaqueClass; } // 681

SkinReference :: struct { #as using base: OpaqueClass; } // 682

Sky :: struct {  // 683

        #as using base: OpaqueClass;

    RadianceSize :: enum s32 {
        RADIANCE_SIZE_32 :: 0;
        RADIANCE_SIZE_64 :: 1;
        RADIANCE_SIZE_128 :: 2;
        RADIANCE_SIZE_256 :: 3;
        RADIANCE_SIZE_512 :: 4;
        RADIANCE_SIZE_1024 :: 5;
        RADIANCE_SIZE_2048 :: 6;
        RADIANCE_SIZE_MAX :: 7;
    }

    ProcessMode :: enum s32 {
        PROCESS_MODE_AUTOMATIC :: 0;
        PROCESS_MODE_QUALITY :: 1;
        PROCESS_MODE_INCREMENTAL :: 2;
        PROCESS_MODE_REALTIME :: 3;
    }
}

Slider :: struct { #as using base: OpaqueClass; } // 684

SliderJoint3D :: struct {  // 685

        #as using base: OpaqueClass;

    Param :: enum s32 {
        PARAM_LINEAR_LIMIT_UPPER :: 0;
        PARAM_LINEAR_LIMIT_LOWER :: 1;
        PARAM_LINEAR_LIMIT_SOFTNESS :: 2;
        PARAM_LINEAR_LIMIT_RESTITUTION :: 3;
        PARAM_LINEAR_LIMIT_DAMPING :: 4;
        PARAM_LINEAR_MOTION_SOFTNESS :: 5;
        PARAM_LINEAR_MOTION_RESTITUTION :: 6;
        PARAM_LINEAR_MOTION_DAMPING :: 7;
        PARAM_LINEAR_ORTHOGONAL_SOFTNESS :: 8;
        PARAM_LINEAR_ORTHOGONAL_RESTITUTION :: 9;
        PARAM_LINEAR_ORTHOGONAL_DAMPING :: 10;
        PARAM_ANGULAR_LIMIT_UPPER :: 11;
        PARAM_ANGULAR_LIMIT_LOWER :: 12;
        PARAM_ANGULAR_LIMIT_SOFTNESS :: 13;
        PARAM_ANGULAR_LIMIT_RESTITUTION :: 14;
        PARAM_ANGULAR_LIMIT_DAMPING :: 15;
        PARAM_ANGULAR_MOTION_SOFTNESS :: 16;
        PARAM_ANGULAR_MOTION_RESTITUTION :: 17;
        PARAM_ANGULAR_MOTION_DAMPING :: 18;
        PARAM_ANGULAR_ORTHOGONAL_SOFTNESS :: 19;
        PARAM_ANGULAR_ORTHOGONAL_RESTITUTION :: 20;
        PARAM_ANGULAR_ORTHOGONAL_DAMPING :: 21;
        PARAM_MAX :: 22;
    }
}

SoftBody3D :: struct {  // 686

        #as using base: OpaqueClass;

    DisableMode :: enum s32 {
        DISABLE_MODE_REMOVE :: 0;
        DISABLE_MODE_KEEP_ACTIVE :: 1;
    }
}

SphereMesh :: struct { #as using base: OpaqueClass; } // 687

SphereOccluder3D :: struct { #as using base: OpaqueClass; } // 688

SphereShape3D :: struct { #as using base: OpaqueClass; } // 689

SpinBox :: struct { #as using base: OpaqueClass; } // 690

SplitContainer :: struct {  // 691

        #as using base: OpaqueClass;

    DraggerVisibility :: enum s32 {
        DRAGGER_VISIBLE :: 0;
        DRAGGER_HIDDEN :: 1;
        DRAGGER_HIDDEN_COLLAPSED :: 2;
    }
}

SpotLight3D :: struct { #as using base: OpaqueClass; } // 692

SpringArm3D :: struct { #as using base: OpaqueClass; } // 693

SpringBoneCollision3D :: struct { #as using base: OpaqueClass; } // 694

SpringBoneCollisionCapsule3D :: struct { #as using base: OpaqueClass; } // 695

SpringBoneCollisionPlane3D :: struct { #as using base: OpaqueClass; } // 696

SpringBoneCollisionSphere3D :: struct { #as using base: OpaqueClass; } // 697

SpringBoneSimulator3D :: struct {  // 698

        #as using base: OpaqueClass;

    BoneDirection :: enum s32 {
        BONE_DIRECTION_PLUS_X :: 0;
        BONE_DIRECTION_MINUS_X :: 1;
        BONE_DIRECTION_PLUS_Y :: 2;
        BONE_DIRECTION_MINUS_Y :: 3;
        BONE_DIRECTION_PLUS_Z :: 4;
        BONE_DIRECTION_MINUS_Z :: 5;
        BONE_DIRECTION_FROM_PARENT :: 6;
    }

    CenterFrom :: enum s32 {
        CENTER_FROM_WORLD_ORIGIN :: 0;
        CENTER_FROM_NODE :: 1;
        CENTER_FROM_BONE :: 2;
    }

    RotationAxis :: enum s32 {
        ROTATION_AXIS_X :: 0;
        ROTATION_AXIS_Y :: 1;
        ROTATION_AXIS_Z :: 2;
        ROTATION_AXIS_ALL :: 3;
    }
}

Sprite2D :: struct { #as using base: OpaqueClass; } // 699

Sprite3D :: struct { #as using base: OpaqueClass; } // 700

SpriteBase3D :: struct {  // 701

        #as using base: OpaqueClass;

    DrawFlags :: enum s32 {
        FLAG_TRANSPARENT :: 0;
        FLAG_SHADED :: 1;
        FLAG_DOUBLE_SIDED :: 2;
        FLAG_DISABLE_DEPTH_TEST :: 3;
        FLAG_FIXED_SIZE :: 4;
        FLAG_MAX :: 5;
    }

    AlphaCutMode :: enum s32 {
        ALPHA_CUT_DISABLED :: 0;
        ALPHA_CUT_DISCARD :: 1;
        ALPHA_CUT_OPAQUE_PREPASS :: 2;
        ALPHA_CUT_HASH :: 3;
    }
}

SpriteFrames :: struct { #as using base: OpaqueClass; } // 702

StandardMaterial3D :: struct { #as using base: OpaqueClass; } // 703

StaticBody2D :: struct { #as using base: OpaqueClass; } // 704

StaticBody3D :: struct { #as using base: OpaqueClass; } // 705

StatusIndicator :: struct { #as using base: OpaqueClass; } // 706

StreamPeer :: struct { #as using base: OpaqueClass; } // 707

StreamPeerBuffer :: struct { #as using base: OpaqueClass; } // 708

StreamPeerExtension :: struct { #as using base: OpaqueClass; } // 709

StreamPeerGZIP :: struct { #as using base: OpaqueClass; } // 710

StreamPeerTCP :: struct {  // 711

        #as using base: OpaqueClass;

    Status :: enum s32 {
        STATUS_NONE :: 0;
        STATUS_CONNECTING :: 1;
        STATUS_CONNECTED :: 2;
        STATUS_ERROR :: 3;
    }
}

StreamPeerTLS :: struct {  // 712

        #as using base: OpaqueClass;

    Status :: enum s32 {
        STATUS_DISCONNECTED :: 0;
        STATUS_HANDSHAKING :: 1;
        STATUS_CONNECTED :: 2;
        STATUS_ERROR :: 3;
        STATUS_ERROR_HOSTNAME_MISMATCH :: 4;
    }
}

StyleBox :: struct { #as using base: OpaqueClass; } // 713

StyleBoxEmpty :: struct { #as using base: OpaqueClass; } // 714

StyleBoxFlat :: struct { #as using base: OpaqueClass; } // 715

StyleBoxLine :: struct { #as using base: OpaqueClass; } // 716

StyleBoxTexture :: struct {  // 717

        #as using base: OpaqueClass;

    AxisStretchMode :: enum s32 {
        AXIS_STRETCH_MODE_STRETCH :: 0;
        AXIS_STRETCH_MODE_TILE :: 1;
        AXIS_STRETCH_MODE_TILE_FIT :: 2;
    }
}

SubViewport :: struct {  // 718

        #as using base: OpaqueClass;

    ClearMode :: enum s32 {
        CLEAR_MODE_ALWAYS :: 0;
        CLEAR_MODE_NEVER :: 1;
        CLEAR_MODE_ONCE :: 2;
    }

    UpdateMode :: enum s32 {
        UPDATE_DISABLED :: 0;
        UPDATE_ONCE :: 1;
        UPDATE_WHEN_VISIBLE :: 2;
        UPDATE_WHEN_PARENT_VISIBLE :: 3;
        UPDATE_ALWAYS :: 4;
    }
}

SubViewportContainer :: struct { #as using base: OpaqueClass; } // 719

SubtweenTweener :: struct { #as using base: OpaqueClass; } // 720

SurfaceTool :: struct {  // 721

        #as using base: OpaqueClass;

    CustomFormat :: enum s32 {
        CUSTOM_RGBA8_UNORM :: 0;
        CUSTOM_RGBA8_SNORM :: 1;
        CUSTOM_RG_HALF :: 2;
        CUSTOM_RGBA_HALF :: 3;
        CUSTOM_R_FLOAT :: 4;
        CUSTOM_RG_FLOAT :: 5;
        CUSTOM_RGB_FLOAT :: 6;
        CUSTOM_RGBA_FLOAT :: 7;
        CUSTOM_MAX :: 8;
    }

    SkinWeightCount :: enum s32 {
        SKIN_4_WEIGHTS :: 0;
        SKIN_8_WEIGHTS :: 1;
    }
}

SyntaxHighlighter :: struct { #as using base: OpaqueClass; } // 722

SystemFont :: struct { #as using base: OpaqueClass; } // 723

TCPServer :: struct { #as using base: OpaqueClass; } // 724

TLSOptions :: struct { #as using base: OpaqueClass; } // 725

TabBar :: struct {  // 726

        #as using base: OpaqueClass;

    AlignmentMode :: enum s32 {
        ALIGNMENT_LEFT :: 0;
        ALIGNMENT_CENTER :: 1;
        ALIGNMENT_RIGHT :: 2;
        ALIGNMENT_MAX :: 3;
    }

    CloseButtonDisplayPolicy :: enum s32 {
        CLOSE_BUTTON_SHOW_NEVER :: 0;
        CLOSE_BUTTON_SHOW_ACTIVE_ONLY :: 1;
        CLOSE_BUTTON_SHOW_ALWAYS :: 2;
        CLOSE_BUTTON_MAX :: 3;
    }
}

TabContainer :: struct {  // 727

        #as using base: OpaqueClass;

    TabPosition :: enum s32 {
        POSITION_TOP :: 0;
        POSITION_BOTTOM :: 1;
        POSITION_MAX :: 2;
    }
}

TextEdit :: struct {  // 728

        #as using base: OpaqueClass;

    MenuItems :: enum s32 {
        MENU_CUT :: 0;
        MENU_COPY :: 1;
        MENU_PASTE :: 2;
        MENU_CLEAR :: 3;
        MENU_SELECT_ALL :: 4;
        MENU_UNDO :: 5;
        MENU_REDO :: 6;
        MENU_SUBMENU_TEXT_DIR :: 7;
        MENU_DIR_INHERITED :: 8;
        MENU_DIR_AUTO :: 9;
        MENU_DIR_LTR :: 10;
        MENU_DIR_RTL :: 11;
        MENU_DISPLAY_UCC :: 12;
        MENU_SUBMENU_INSERT_UCC :: 13;
        MENU_INSERT_LRM :: 14;
        MENU_INSERT_RLM :: 15;
        MENU_INSERT_LRE :: 16;
        MENU_INSERT_RLE :: 17;
        MENU_INSERT_LRO :: 18;
        MENU_INSERT_RLO :: 19;
        MENU_INSERT_PDF :: 20;
        MENU_INSERT_ALM :: 21;
        MENU_INSERT_LRI :: 22;
        MENU_INSERT_RLI :: 23;
        MENU_INSERT_FSI :: 24;
        MENU_INSERT_PDI :: 25;
        MENU_INSERT_ZWJ :: 26;
        MENU_INSERT_ZWNJ :: 27;
        MENU_INSERT_WJ :: 28;
        MENU_INSERT_SHY :: 29;
        MENU_EMOJI_AND_SYMBOL :: 30;
        MENU_MAX :: 31;
    }

    EditAction :: enum s32 {
        ACTION_NONE :: 0;
        ACTION_TYPING :: 1;
        ACTION_BACKSPACE :: 2;
        ACTION_DELETE :: 3;
    }

    SearchFlags :: enum s32 {
        SEARCH_MATCH_CASE :: 1;
        SEARCH_WHOLE_WORDS :: 2;
        SEARCH_BACKWARDS :: 4;
    }

    CaretType :: enum s32 {
        CARET_TYPE_LINE :: 0;
        CARET_TYPE_BLOCK :: 1;
    }

    SelectionMode :: enum s32 {
        SELECTION_MODE_NONE :: 0;
        SELECTION_MODE_SHIFT :: 1;
        SELECTION_MODE_POINTER :: 2;
        SELECTION_MODE_WORD :: 3;
        SELECTION_MODE_LINE :: 4;
    }

    LineWrappingMode :: enum s32 {
        LINE_WRAPPING_NONE :: 0;
        LINE_WRAPPING_BOUNDARY :: 1;
    }

    GutterType :: enum s32 {
        GUTTER_TYPE_STRING :: 0;
        GUTTER_TYPE_ICON :: 1;
        GUTTER_TYPE_CUSTOM :: 2;
    }
}

TextLine :: struct { #as using base: OpaqueClass; } // 729

TextMesh :: struct { #as using base: OpaqueClass; } // 730

TextParagraph :: struct { #as using base: OpaqueClass; } // 731

TextServer :: struct {  // 732

        #as using base: OpaqueClass;

    FontAntialiasing :: enum s32 {
        FONT_ANTIALIASING_NONE :: 0;
        FONT_ANTIALIASING_GRAY :: 1;
        FONT_ANTIALIASING_LCD :: 2;
    }

    FontLCDSubpixelLayout :: enum s32 {
        FONT_LCD_SUBPIXEL_LAYOUT_NONE :: 0;
        FONT_LCD_SUBPIXEL_LAYOUT_HRGB :: 1;
        FONT_LCD_SUBPIXEL_LAYOUT_HBGR :: 2;
        FONT_LCD_SUBPIXEL_LAYOUT_VRGB :: 3;
        FONT_LCD_SUBPIXEL_LAYOUT_VBGR :: 4;
        FONT_LCD_SUBPIXEL_LAYOUT_MAX :: 5;
    }

    Direction :: enum s32 {
        DIRECTION_AUTO :: 0;
        DIRECTION_LTR :: 1;
        DIRECTION_RTL :: 2;
        DIRECTION_INHERITED :: 3;
    }

    Orientation :: enum s32 {
        ORIENTATION_HORIZONTAL :: 0;
        ORIENTATION_VERTICAL :: 1;
    }

    JustificationFlag :: enum u64 {
        JUSTIFICATION_NONE :: 0;
        JUSTIFICATION_KASHIDA :: 1;
        JUSTIFICATION_WORD_BOUND :: 2;
        JUSTIFICATION_TRIM_EDGE_SPACES :: 4;
        JUSTIFICATION_AFTER_LAST_TAB :: 8;
        JUSTIFICATION_CONSTRAIN_ELLIPSIS :: 16;
        JUSTIFICATION_SKIP_LAST_LINE :: 32;
        JUSTIFICATION_SKIP_LAST_LINE_WITH_VISIBLE_CHARS :: 64;
        JUSTIFICATION_DO_NOT_SKIP_SINGLE_LINE :: 128;
    } @bitfield

    AutowrapMode :: enum s32 {
        AUTOWRAP_OFF :: 0;
        AUTOWRAP_ARBITRARY :: 1;
        AUTOWRAP_WORD :: 2;
        AUTOWRAP_WORD_SMART :: 3;
    }

    LineBreakFlag :: enum u64 {
        BREAK_NONE :: 0;
        BREAK_MANDATORY :: 1;
        BREAK_WORD_BOUND :: 2;
        BREAK_GRAPHEME_BOUND :: 4;
        BREAK_ADAPTIVE :: 8;
        BREAK_TRIM_EDGE_SPACES :: 16;
        BREAK_TRIM_INDENT :: 32;
    } @bitfield

    VisibleCharactersBehavior :: enum s32 {
        VC_CHARS_BEFORE_SHAPING :: 0;
        VC_CHARS_AFTER_SHAPING :: 1;
        VC_GLYPHS_AUTO :: 2;
        VC_GLYPHS_LTR :: 3;
        VC_GLYPHS_RTL :: 4;
    }

    OverrunBehavior :: enum s32 {
        OVERRUN_NO_TRIMMING :: 0;
        OVERRUN_TRIM_CHAR :: 1;
        OVERRUN_TRIM_WORD :: 2;
        OVERRUN_TRIM_ELLIPSIS :: 3;
        OVERRUN_TRIM_WORD_ELLIPSIS :: 4;
    }

    TextOverrunFlag :: enum u64 {
        OVERRUN_NO_TRIM :: 0;
        OVERRUN_TRIM :: 1;
        OVERRUN_TRIM_WORD_ONLY :: 2;
        OVERRUN_ADD_ELLIPSIS :: 4;
        OVERRUN_ENFORCE_ELLIPSIS :: 8;
        OVERRUN_JUSTIFICATION_AWARE :: 16;
    } @bitfield

    GraphemeFlag :: enum u64 {
        GRAPHEME_IS_VALID :: 1;
        GRAPHEME_IS_RTL :: 2;
        GRAPHEME_IS_VIRTUAL :: 4;
        GRAPHEME_IS_SPACE :: 8;
        GRAPHEME_IS_BREAK_HARD :: 16;
        GRAPHEME_IS_BREAK_SOFT :: 32;
        GRAPHEME_IS_TAB :: 64;
        GRAPHEME_IS_ELONGATION :: 128;
        GRAPHEME_IS_PUNCTUATION :: 256;
        GRAPHEME_IS_UNDERSCORE :: 512;
        GRAPHEME_IS_CONNECTED :: 1024;
        GRAPHEME_IS_SAFE_TO_INSERT_TATWEEL :: 2048;
        GRAPHEME_IS_EMBEDDED_OBJECT :: 4096;
        GRAPHEME_IS_SOFT_HYPHEN :: 8192;
    } @bitfield

    Hinting :: enum s32 {
        HINTING_NONE :: 0;
        HINTING_LIGHT :: 1;
        HINTING_NORMAL :: 2;
    }

    SubpixelPositioning :: enum s32 {
        SUBPIXEL_POSITIONING_DISABLED :: 0;
        SUBPIXEL_POSITIONING_AUTO :: 1;
        SUBPIXEL_POSITIONING_ONE_HALF :: 2;
        SUBPIXEL_POSITIONING_ONE_QUARTER :: 3;
        SUBPIXEL_POSITIONING_ONE_HALF_MAX_SIZE :: 20;
        SUBPIXEL_POSITIONING_ONE_QUARTER_MAX_SIZE :: 16;
    }

    Feature :: enum s32 {
        FEATURE_SIMPLE_LAYOUT :: 1;
        FEATURE_BIDI_LAYOUT :: 2;
        FEATURE_VERTICAL_LAYOUT :: 4;
        FEATURE_SHAPING :: 8;
        FEATURE_KASHIDA_JUSTIFICATION :: 16;
        FEATURE_BREAK_ITERATORS :: 32;
        FEATURE_FONT_BITMAP :: 64;
        FEATURE_FONT_DYNAMIC :: 128;
        FEATURE_FONT_MSDF :: 256;
        FEATURE_FONT_SYSTEM :: 512;
        FEATURE_FONT_VARIABLE :: 1024;
        FEATURE_CONTEXT_SENSITIVE_CASE_CONVERSION :: 2048;
        FEATURE_USE_SUPPORT_DATA :: 4096;
        FEATURE_UNICODE_IDENTIFIERS :: 8192;
        FEATURE_UNICODE_SECURITY :: 16384;
    }

    ContourPointTag :: enum s32 {
        CONTOUR_CURVE_TAG_ON :: 1;
        CONTOUR_CURVE_TAG_OFF_CONIC :: 0;
        CONTOUR_CURVE_TAG_OFF_CUBIC :: 2;
    }

    SpacingType :: enum s32 {
        SPACING_GLYPH :: 0;
        SPACING_SPACE :: 1;
        SPACING_TOP :: 2;
        SPACING_BOTTOM :: 3;
        SPACING_MAX :: 4;
    }

    FontStyle :: enum u64 {
        FONT_BOLD :: 1;
        FONT_ITALIC :: 2;
        FONT_FIXED_WIDTH :: 4;
    } @bitfield

    StructuredTextParser :: enum s32 {
        STRUCTURED_TEXT_DEFAULT :: 0;
        STRUCTURED_TEXT_URI :: 1;
        STRUCTURED_TEXT_FILE :: 2;
        STRUCTURED_TEXT_EMAIL :: 3;
        STRUCTURED_TEXT_LIST :: 4;
        STRUCTURED_TEXT_GDSCRIPT :: 5;
        STRUCTURED_TEXT_CUSTOM :: 6;
    }

    FixedSizeScaleMode :: enum s32 {
        FIXED_SIZE_SCALE_DISABLE :: 0;
        FIXED_SIZE_SCALE_INTEGER_ONLY :: 1;
        FIXED_SIZE_SCALE_ENABLED :: 2;
    }
}

TextServerAdvanced :: struct { #as using base: OpaqueClass; } // 733

TextServerDummy :: struct { #as using base: OpaqueClass; } // 734

TextServerExtension :: struct { #as using base: OpaqueClass; } // 735

TextServerManager :: struct { #as using base: OpaqueClass; } // 736

Texture :: struct { #as using base: OpaqueClass; } // 737

Texture2D :: struct { #as using base: OpaqueClass; } // 738

Texture2DArray :: struct { #as using base: OpaqueClass; } // 739

Texture2DArrayRD :: struct { #as using base: OpaqueClass; } // 740

Texture2DRD :: struct { #as using base: OpaqueClass; } // 741

Texture3D :: struct { #as using base: OpaqueClass; } // 742

Texture3DRD :: struct { #as using base: OpaqueClass; } // 743

TextureButton :: struct {  // 744

        #as using base: OpaqueClass;

    StretchMode :: enum s32 {
        STRETCH_SCALE :: 0;
        STRETCH_TILE :: 1;
        STRETCH_KEEP :: 2;
        STRETCH_KEEP_CENTERED :: 3;
        STRETCH_KEEP_ASPECT :: 4;
        STRETCH_KEEP_ASPECT_CENTERED :: 5;
        STRETCH_KEEP_ASPECT_COVERED :: 6;
    }
}

TextureCubemapArrayRD :: struct { #as using base: OpaqueClass; } // 745

TextureCubemapRD :: struct { #as using base: OpaqueClass; } // 746

TextureLayered :: struct {  // 747

        #as using base: OpaqueClass;

    LayeredType :: enum s32 {
        LAYERED_TYPE_2D_ARRAY :: 0;
        LAYERED_TYPE_CUBEMAP :: 1;
        LAYERED_TYPE_CUBEMAP_ARRAY :: 2;
    }
}

TextureLayeredRD :: struct { #as using base: OpaqueClass; } // 748

TextureProgressBar :: struct {  // 749

        #as using base: OpaqueClass;

    FillMode :: enum s32 {
        FILL_LEFT_TO_RIGHT :: 0;
        FILL_RIGHT_TO_LEFT :: 1;
        FILL_TOP_TO_BOTTOM :: 2;
        FILL_BOTTOM_TO_TOP :: 3;
        FILL_CLOCKWISE :: 4;
        FILL_COUNTER_CLOCKWISE :: 5;
        FILL_BILINEAR_LEFT_AND_RIGHT :: 6;
        FILL_BILINEAR_TOP_AND_BOTTOM :: 7;
        FILL_CLOCKWISE_AND_COUNTER_CLOCKWISE :: 8;
    }
}

TextureRect :: struct {  // 750

        #as using base: OpaqueClass;

    ExpandMode :: enum s32 {
        EXPAND_KEEP_SIZE :: 0;
        EXPAND_IGNORE_SIZE :: 1;
        EXPAND_FIT_WIDTH :: 2;
        EXPAND_FIT_WIDTH_PROPORTIONAL :: 3;
        EXPAND_FIT_HEIGHT :: 4;
        EXPAND_FIT_HEIGHT_PROPORTIONAL :: 5;
    }

    StretchMode :: enum s32 {
        STRETCH_SCALE :: 0;
        STRETCH_TILE :: 1;
        STRETCH_KEEP :: 2;
        STRETCH_KEEP_CENTERED :: 3;
        STRETCH_KEEP_ASPECT :: 4;
        STRETCH_KEEP_ASPECT_CENTERED :: 5;
        STRETCH_KEEP_ASPECT_COVERED :: 6;
    }
}

Theme :: struct {  // 751

        #as using base: OpaqueClass;

    DataType :: enum s32 {
        DATA_TYPE_COLOR :: 0;
        DATA_TYPE_CONSTANT :: 1;
        DATA_TYPE_FONT :: 2;
        DATA_TYPE_FONT_SIZE :: 3;
        DATA_TYPE_ICON :: 4;
        DATA_TYPE_STYLEBOX :: 5;
        DATA_TYPE_MAX :: 6;
    }
}

ThemeDB :: struct { #as using base: OpaqueClass; } // 752

Thread :: struct {  // 753

        #as using base: OpaqueClass;

    Priority :: enum s32 {
        PRIORITY_LOW :: 0;
        PRIORITY_NORMAL :: 1;
        PRIORITY_HIGH :: 2;
    }
}

TileData :: struct { #as using base: OpaqueClass; } // 754

TileMap :: struct {  // 755

        #as using base: OpaqueClass;

    VisibilityMode :: enum s32 {
        VISIBILITY_MODE_DEFAULT :: 0;
        VISIBILITY_MODE_FORCE_HIDE :: 2;
        VISIBILITY_MODE_FORCE_SHOW :: 1;
    }
}

TileMapLayer :: struct {  // 756

        #as using base: OpaqueClass;

    DebugVisibilityMode :: enum s32 {
        DEBUG_VISIBILITY_MODE_DEFAULT :: 0;
        DEBUG_VISIBILITY_MODE_FORCE_HIDE :: 2;
        DEBUG_VISIBILITY_MODE_FORCE_SHOW :: 1;
    }
}

TileMapPattern :: struct { #as using base: OpaqueClass; } // 757

TileSet :: struct {  // 758

        #as using base: OpaqueClass;

    TileShape :: enum s32 {
        TILE_SHAPE_SQUARE :: 0;
        TILE_SHAPE_ISOMETRIC :: 1;
        TILE_SHAPE_HALF_OFFSET_SQUARE :: 2;
        TILE_SHAPE_HEXAGON :: 3;
    }

    TileLayout :: enum s32 {
        TILE_LAYOUT_STACKED :: 0;
        TILE_LAYOUT_STACKED_OFFSET :: 1;
        TILE_LAYOUT_STAIRS_RIGHT :: 2;
        TILE_LAYOUT_STAIRS_DOWN :: 3;
        TILE_LAYOUT_DIAMOND_RIGHT :: 4;
        TILE_LAYOUT_DIAMOND_DOWN :: 5;
    }

    TileOffsetAxis :: enum s32 {
        TILE_OFFSET_AXIS_HORIZONTAL :: 0;
        TILE_OFFSET_AXIS_VERTICAL :: 1;
    }

    CellNeighbor :: enum s32 {
        CELL_NEIGHBOR_RIGHT_SIDE :: 0;
        CELL_NEIGHBOR_RIGHT_CORNER :: 1;
        CELL_NEIGHBOR_BOTTOM_RIGHT_SIDE :: 2;
        CELL_NEIGHBOR_BOTTOM_RIGHT_CORNER :: 3;
        CELL_NEIGHBOR_BOTTOM_SIDE :: 4;
        CELL_NEIGHBOR_BOTTOM_CORNER :: 5;
        CELL_NEIGHBOR_BOTTOM_LEFT_SIDE :: 6;
        CELL_NEIGHBOR_BOTTOM_LEFT_CORNER :: 7;
        CELL_NEIGHBOR_LEFT_SIDE :: 8;
        CELL_NEIGHBOR_LEFT_CORNER :: 9;
        CELL_NEIGHBOR_TOP_LEFT_SIDE :: 10;
        CELL_NEIGHBOR_TOP_LEFT_CORNER :: 11;
        CELL_NEIGHBOR_TOP_SIDE :: 12;
        CELL_NEIGHBOR_TOP_CORNER :: 13;
        CELL_NEIGHBOR_TOP_RIGHT_SIDE :: 14;
        CELL_NEIGHBOR_TOP_RIGHT_CORNER :: 15;
    }

    TerrainMode :: enum s32 {
        TERRAIN_MODE_MATCH_CORNERS_AND_SIDES :: 0;
        TERRAIN_MODE_MATCH_CORNERS :: 1;
        TERRAIN_MODE_MATCH_SIDES :: 2;
    }
}

TileSetAtlasSource :: struct {  // 759

        #as using base: OpaqueClass;

    TileAnimationMode :: enum s32 {
        TILE_ANIMATION_MODE_DEFAULT :: 0;
        TILE_ANIMATION_MODE_RANDOM_START_TIMES :: 1;
        TILE_ANIMATION_MODE_MAX :: 2;
    }
}

TileSetScenesCollectionSource :: struct { #as using base: OpaqueClass; } // 760

TileSetSource :: struct { #as using base: OpaqueClass; } // 761

Time :: struct {  // 762

        #as using base: OpaqueClass;

    Month :: enum s32 {
        MONTH_JANUARY :: 1;
        MONTH_FEBRUARY :: 2;
        MONTH_MARCH :: 3;
        MONTH_APRIL :: 4;
        MONTH_MAY :: 5;
        MONTH_JUNE :: 6;
        MONTH_JULY :: 7;
        MONTH_AUGUST :: 8;
        MONTH_SEPTEMBER :: 9;
        MONTH_OCTOBER :: 10;
        MONTH_NOVEMBER :: 11;
        MONTH_DECEMBER :: 12;
    }

    Weekday :: enum s32 {
        WEEKDAY_SUNDAY :: 0;
        WEEKDAY_MONDAY :: 1;
        WEEKDAY_TUESDAY :: 2;
        WEEKDAY_WEDNESDAY :: 3;
        WEEKDAY_THURSDAY :: 4;
        WEEKDAY_FRIDAY :: 5;
        WEEKDAY_SATURDAY :: 6;
    }
}

Timer :: struct {  // 763

        #as using base: OpaqueClass;

    TimerProcessCallback :: enum s32 {
        TIMER_PROCESS_PHYSICS :: 0;
        TIMER_PROCESS_IDLE :: 1;
    }
}

TorusMesh :: struct { #as using base: OpaqueClass; } // 764

TouchScreenButton :: struct {  // 765

        #as using base: OpaqueClass;

    VisibilityMode :: enum s32 {
        VISIBILITY_ALWAYS :: 0;
        VISIBILITY_TOUCHSCREEN_ONLY :: 1;
    }
}

Translation :: struct { #as using base: OpaqueClass; } // 766

TranslationDomain :: struct { #as using base: OpaqueClass; } // 767

TranslationServer :: struct { #as using base: OpaqueClass; } // 768

Tree :: struct {  // 769

        #as using base: OpaqueClass;

    SelectMode :: enum s32 {
        SELECT_SINGLE :: 0;
        SELECT_ROW :: 1;
        SELECT_MULTI :: 2;
    }

    DropModeFlags :: enum s32 {
        DROP_MODE_DISABLED :: 0;
        DROP_MODE_ON_ITEM :: 1;
        DROP_MODE_INBETWEEN :: 2;
    }
}

TreeItem :: struct {  // 770

        #as using base: OpaqueClass;

    TreeCellMode :: enum s32 {
        CELL_MODE_STRING :: 0;
        CELL_MODE_CHECK :: 1;
        CELL_MODE_RANGE :: 2;
        CELL_MODE_ICON :: 3;
        CELL_MODE_CUSTOM :: 4;
    }
}

TriangleMesh :: struct { #as using base: OpaqueClass; } // 771

TubeTrailMesh :: struct { #as using base: OpaqueClass; } // 772

Tween :: struct {  // 773

        #as using base: OpaqueClass;

    TweenProcessMode :: enum s32 {
        TWEEN_PROCESS_PHYSICS :: 0;
        TWEEN_PROCESS_IDLE :: 1;
    }

    TweenPauseMode :: enum s32 {
        TWEEN_PAUSE_BOUND :: 0;
        TWEEN_PAUSE_STOP :: 1;
        TWEEN_PAUSE_PROCESS :: 2;
    }

    TransitionType :: enum s32 {
        TRANS_LINEAR :: 0;
        TRANS_SINE :: 1;
        TRANS_QUINT :: 2;
        TRANS_QUART :: 3;
        TRANS_QUAD :: 4;
        TRANS_EXPO :: 5;
        TRANS_ELASTIC :: 6;
        TRANS_CUBIC :: 7;
        TRANS_CIRC :: 8;
        TRANS_BOUNCE :: 9;
        TRANS_BACK :: 10;
        TRANS_SPRING :: 11;
    }

    EaseType :: enum s32 {
        EASE_IN :: 0;
        EASE_OUT :: 1;
        EASE_IN_OUT :: 2;
        EASE_OUT_IN :: 3;
    }
}

Tweener :: struct { #as using base: OpaqueClass; } // 774

UDPServer :: struct { #as using base: OpaqueClass; } // 775

UPNP :: struct {  // 776

        #as using base: OpaqueClass;

    UPNPResult :: enum s32 {
        UPNP_RESULT_SUCCESS :: 0;
        UPNP_RESULT_NOT_AUTHORIZED :: 1;
        UPNP_RESULT_PORT_MAPPING_NOT_FOUND :: 2;
        UPNP_RESULT_INCONSISTENT_PARAMETERS :: 3;
        UPNP_RESULT_NO_SUCH_ENTRY_IN_ARRAY :: 4;
        UPNP_RESULT_ACTION_FAILED :: 5;
        UPNP_RESULT_SRC_IP_WILDCARD_NOT_PERMITTED :: 6;
        UPNP_RESULT_EXT_PORT_WILDCARD_NOT_PERMITTED :: 7;
        UPNP_RESULT_INT_PORT_WILDCARD_NOT_PERMITTED :: 8;
        UPNP_RESULT_REMOTE_HOST_MUST_BE_WILDCARD :: 9;
        UPNP_RESULT_EXT_PORT_MUST_BE_WILDCARD :: 10;
        UPNP_RESULT_NO_PORT_MAPS_AVAILABLE :: 11;
        UPNP_RESULT_CONFLICT_WITH_OTHER_MECHANISM :: 12;
        UPNP_RESULT_CONFLICT_WITH_OTHER_MAPPING :: 13;
        UPNP_RESULT_SAME_PORT_VALUES_REQUIRED :: 14;
        UPNP_RESULT_ONLY_PERMANENT_LEASE_SUPPORTED :: 15;
        UPNP_RESULT_INVALID_GATEWAY :: 16;
        UPNP_RESULT_INVALID_PORT :: 17;
        UPNP_RESULT_INVALID_PROTOCOL :: 18;
        UPNP_RESULT_INVALID_DURATION :: 19;
        UPNP_RESULT_INVALID_ARGS :: 20;
        UPNP_RESULT_INVALID_RESPONSE :: 21;
        UPNP_RESULT_INVALID_PARAM :: 22;
        UPNP_RESULT_HTTP_ERROR :: 23;
        UPNP_RESULT_SOCKET_ERROR :: 24;
        UPNP_RESULT_MEM_ALLOC_ERROR :: 25;
        UPNP_RESULT_NO_GATEWAY :: 26;
        UPNP_RESULT_NO_DEVICES :: 27;
        UPNP_RESULT_UNKNOWN_ERROR :: 28;
    }
}

UPNPDevice :: struct {  // 777

        #as using base: OpaqueClass;

    IGDStatus :: enum s32 {
        IGD_STATUS_OK :: 0;
        IGD_STATUS_HTTP_ERROR :: 1;
        IGD_STATUS_HTTP_EMPTY :: 2;
        IGD_STATUS_NO_URLS :: 3;
        IGD_STATUS_NO_IGD :: 4;
        IGD_STATUS_DISCONNECTED :: 5;
        IGD_STATUS_UNKNOWN_DEVICE :: 6;
        IGD_STATUS_INVALID_CONTROL :: 7;
        IGD_STATUS_MALLOC_ERROR :: 8;
        IGD_STATUS_UNKNOWN_ERROR :: 9;
    }
}

UndoRedo :: struct {  // 778

        #as using base: OpaqueClass;

    MergeMode :: enum s32 {
        MERGE_DISABLE :: 0;
        MERGE_ENDS :: 1;
        MERGE_ALL :: 2;
    }
}

UniformSetCacheRD :: struct { #as using base: OpaqueClass; } // 779

VBoxContainer :: struct { #as using base: OpaqueClass; } // 780

VFlowContainer :: struct { #as using base: OpaqueClass; } // 781

VScrollBar :: struct { #as using base: OpaqueClass; } // 782

VSeparator :: struct { #as using base: OpaqueClass; } // 783

VSlider :: struct { #as using base: OpaqueClass; } // 784

VSplitContainer :: struct { #as using base: OpaqueClass; } // 785

VehicleBody3D :: struct { #as using base: OpaqueClass; } // 786

VehicleWheel3D :: struct { #as using base: OpaqueClass; } // 787

VideoStream :: struct { #as using base: OpaqueClass; } // 788

VideoStreamPlayback :: struct { #as using base: OpaqueClass; } // 789

VideoStreamPlayer :: struct { #as using base: OpaqueClass; } // 790

VideoStreamTheora :: struct { #as using base: OpaqueClass; } // 791

Viewport :: struct {  // 792

        #as using base: OpaqueClass;

    PositionalShadowAtlasQuadrantSubdiv :: enum s32 {
        SHADOW_ATLAS_QUADRANT_SUBDIV_DISABLED :: 0;
        SHADOW_ATLAS_QUADRANT_SUBDIV_1 :: 1;
        SHADOW_ATLAS_QUADRANT_SUBDIV_4 :: 2;
        SHADOW_ATLAS_QUADRANT_SUBDIV_16 :: 3;
        SHADOW_ATLAS_QUADRANT_SUBDIV_64 :: 4;
        SHADOW_ATLAS_QUADRANT_SUBDIV_256 :: 5;
        SHADOW_ATLAS_QUADRANT_SUBDIV_1024 :: 6;
        SHADOW_ATLAS_QUADRANT_SUBDIV_MAX :: 7;
    }

    Scaling3DMode :: enum s32 {
        SCALING_3D_MODE_BILINEAR :: 0;
        SCALING_3D_MODE_FSR :: 1;
        SCALING_3D_MODE_FSR2 :: 2;
        SCALING_3D_MODE_METALFX_SPATIAL :: 3;
        SCALING_3D_MODE_METALFX_TEMPORAL :: 4;
        SCALING_3D_MODE_MAX :: 5;
    }

    MSAA :: enum s32 {
        MSAA_DISABLED :: 0;
        MSAA_2X :: 1;
        MSAA_4X :: 2;
        MSAA_8X :: 3;
        MSAA_MAX :: 4;
    }

    AnisotropicFiltering :: enum s32 {
        ANISOTROPY_DISABLED :: 0;
        ANISOTROPY_2X :: 1;
        ANISOTROPY_4X :: 2;
        ANISOTROPY_8X :: 3;
        ANISOTROPY_16X :: 4;
        ANISOTROPY_MAX :: 5;
    }

    ScreenSpaceAA :: enum s32 {
        SCREEN_SPACE_AA_DISABLED :: 0;
        SCREEN_SPACE_AA_FXAA :: 1;
        SCREEN_SPACE_AA_MAX :: 2;
    }

    RenderInfo :: enum s32 {
        RENDER_INFO_OBJECTS_IN_FRAME :: 0;
        RENDER_INFO_PRIMITIVES_IN_FRAME :: 1;
        RENDER_INFO_DRAW_CALLS_IN_FRAME :: 2;
        RENDER_INFO_MAX :: 3;
    }

    RenderInfoType :: enum s32 {
        RENDER_INFO_TYPE_VISIBLE :: 0;
        RENDER_INFO_TYPE_SHADOW :: 1;
        RENDER_INFO_TYPE_CANVAS :: 2;
        RENDER_INFO_TYPE_MAX :: 3;
    }

    DebugDraw :: enum s32 {
        DEBUG_DRAW_DISABLED :: 0;
        DEBUG_DRAW_UNSHADED :: 1;
        DEBUG_DRAW_LIGHTING :: 2;
        DEBUG_DRAW_OVERDRAW :: 3;
        DEBUG_DRAW_WIREFRAME :: 4;
        DEBUG_DRAW_NORMAL_BUFFER :: 5;
        DEBUG_DRAW_VOXEL_GI_ALBEDO :: 6;
        DEBUG_DRAW_VOXEL_GI_LIGHTING :: 7;
        DEBUG_DRAW_VOXEL_GI_EMISSION :: 8;
        DEBUG_DRAW_SHADOW_ATLAS :: 9;
        DEBUG_DRAW_DIRECTIONAL_SHADOW_ATLAS :: 10;
        DEBUG_DRAW_SCENE_LUMINANCE :: 11;
        DEBUG_DRAW_SSAO :: 12;
        DEBUG_DRAW_SSIL :: 13;
        DEBUG_DRAW_PSSM_SPLITS :: 14;
        DEBUG_DRAW_DECAL_ATLAS :: 15;
        DEBUG_DRAW_SDFGI :: 16;
        DEBUG_DRAW_SDFGI_PROBES :: 17;
        DEBUG_DRAW_GI_BUFFER :: 18;
        DEBUG_DRAW_DISABLE_LOD :: 19;
        DEBUG_DRAW_CLUSTER_OMNI_LIGHTS :: 20;
        DEBUG_DRAW_CLUSTER_SPOT_LIGHTS :: 21;
        DEBUG_DRAW_CLUSTER_DECALS :: 22;
        DEBUG_DRAW_CLUSTER_REFLECTION_PROBES :: 23;
        DEBUG_DRAW_OCCLUDERS :: 24;
        DEBUG_DRAW_MOTION_VECTORS :: 25;
        DEBUG_DRAW_INTERNAL_BUFFER :: 26;
    }

    DefaultCanvasItemTextureFilter :: enum s32 {
        DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_NEAREST :: 0;
        DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_LINEAR :: 1;
        DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_LINEAR_WITH_MIPMAPS :: 2;
        DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_NEAREST_WITH_MIPMAPS :: 3;
        DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_MAX :: 4;
    }

    DefaultCanvasItemTextureRepeat :: enum s32 {
        DEFAULT_CANVAS_ITEM_TEXTURE_REPEAT_DISABLED :: 0;
        DEFAULT_CANVAS_ITEM_TEXTURE_REPEAT_ENABLED :: 1;
        DEFAULT_CANVAS_ITEM_TEXTURE_REPEAT_MIRROR :: 2;
        DEFAULT_CANVAS_ITEM_TEXTURE_REPEAT_MAX :: 3;
    }

    SDFOversize :: enum s32 {
        SDF_OVERSIZE_100_PERCENT :: 0;
        SDF_OVERSIZE_120_PERCENT :: 1;
        SDF_OVERSIZE_150_PERCENT :: 2;
        SDF_OVERSIZE_200_PERCENT :: 3;
        SDF_OVERSIZE_MAX :: 4;
    }

    SDFScale :: enum s32 {
        SDF_SCALE_100_PERCENT :: 0;
        SDF_SCALE_50_PERCENT :: 1;
        SDF_SCALE_25_PERCENT :: 2;
        SDF_SCALE_MAX :: 3;
    }

    VRSMode :: enum s32 {
        VRS_DISABLED :: 0;
        VRS_TEXTURE :: 1;
        VRS_XR :: 2;
        VRS_MAX :: 3;
    }

    VRSUpdateMode :: enum s32 {
        VRS_UPDATE_DISABLED :: 0;
        VRS_UPDATE_ONCE :: 1;
        VRS_UPDATE_ALWAYS :: 2;
        VRS_UPDATE_MAX :: 3;
    }
}

ViewportTexture :: struct { #as using base: OpaqueClass; } // 793

VisibleOnScreenEnabler2D :: struct {  // 794

        #as using base: OpaqueClass;

    EnableMode :: enum s32 {
        ENABLE_MODE_INHERIT :: 0;
        ENABLE_MODE_ALWAYS :: 1;
        ENABLE_MODE_WHEN_PAUSED :: 2;
    }
}

VisibleOnScreenEnabler3D :: struct {  // 795

        #as using base: OpaqueClass;

    EnableMode :: enum s32 {
        ENABLE_MODE_INHERIT :: 0;
        ENABLE_MODE_ALWAYS :: 1;
        ENABLE_MODE_WHEN_PAUSED :: 2;
    }
}

VisibleOnScreenNotifier2D :: struct { #as using base: OpaqueClass; } // 796

VisibleOnScreenNotifier3D :: struct { #as using base: OpaqueClass; } // 797

VisualInstance3D :: struct { #as using base: OpaqueClass; } // 798

VisualShader :: struct {  // 799

        #as using base: OpaqueClass;

    Type :: enum s32 {
        TYPE_VERTEX :: 0;
        TYPE_FRAGMENT :: 1;
        TYPE_LIGHT :: 2;
        TYPE_START :: 3;
        TYPE_PROCESS :: 4;
        TYPE_COLLIDE :: 5;
        TYPE_START_CUSTOM :: 6;
        TYPE_PROCESS_CUSTOM :: 7;
        TYPE_SKY :: 8;
        TYPE_FOG :: 9;
        TYPE_MAX :: 10;
    }

    VaryingMode :: enum s32 {
        VARYING_MODE_VERTEX_TO_FRAG_LIGHT :: 0;
        VARYING_MODE_FRAG_TO_LIGHT :: 1;
        VARYING_MODE_MAX :: 2;
    }

    VaryingType :: enum s32 {
        VARYING_TYPE_FLOAT :: 0;
        VARYING_TYPE_INT :: 1;
        VARYING_TYPE_UINT :: 2;
        VARYING_TYPE_VECTOR_2D :: 3;
        VARYING_TYPE_VECTOR_3D :: 4;
        VARYING_TYPE_VECTOR_4D :: 5;
        VARYING_TYPE_BOOLEAN :: 6;
        VARYING_TYPE_TRANSFORM :: 7;
        VARYING_TYPE_MAX :: 8;
    }
}

VisualShaderNode :: struct {  // 800

        #as using base: OpaqueClass;

    PortType :: enum s32 {
        PORT_TYPE_SCALAR :: 0;
        PORT_TYPE_SCALAR_INT :: 1;
        PORT_TYPE_SCALAR_UINT :: 2;
        PORT_TYPE_VECTOR_2D :: 3;
        PORT_TYPE_VECTOR_3D :: 4;
        PORT_TYPE_VECTOR_4D :: 5;
        PORT_TYPE_BOOLEAN :: 6;
        PORT_TYPE_TRANSFORM :: 7;
        PORT_TYPE_SAMPLER :: 8;
        PORT_TYPE_MAX :: 9;
    }
}

VisualShaderNodeBillboard :: struct {  // 801

        #as using base: OpaqueClass;

    BillboardType :: enum s32 {
        BILLBOARD_TYPE_DISABLED :: 0;
        BILLBOARD_TYPE_ENABLED :: 1;
        BILLBOARD_TYPE_FIXED_Y :: 2;
        BILLBOARD_TYPE_PARTICLES :: 3;
        BILLBOARD_TYPE_MAX :: 4;
    }
}

VisualShaderNodeBooleanConstant :: struct { #as using base: OpaqueClass; } // 802

VisualShaderNodeBooleanParameter :: struct { #as using base: OpaqueClass; } // 803

VisualShaderNodeClamp :: struct {  // 804

        #as using base: OpaqueClass;

    OpType :: enum s32 {
        OP_TYPE_FLOAT :: 0;
        OP_TYPE_INT :: 1;
        OP_TYPE_UINT :: 2;
        OP_TYPE_VECTOR_2D :: 3;
        OP_TYPE_VECTOR_3D :: 4;
        OP_TYPE_VECTOR_4D :: 5;
        OP_TYPE_MAX :: 6;
    }
}

VisualShaderNodeColorConstant :: struct { #as using base: OpaqueClass; } // 805

VisualShaderNodeColorFunc :: struct {  // 806

        #as using base: OpaqueClass;

    Function :: enum s32 {
        FUNC_GRAYSCALE :: 0;
        FUNC_HSV2RGB :: 1;
        FUNC_RGB2HSV :: 2;
        FUNC_SEPIA :: 3;
        FUNC_LINEAR_TO_SRGB :: 4;
        FUNC_SRGB_TO_LINEAR :: 5;
        FUNC_MAX :: 6;
    }
}

VisualShaderNodeColorOp :: struct {  // 807

        #as using base: OpaqueClass;

    Operator :: enum s32 {
        OP_SCREEN :: 0;
        OP_DIFFERENCE :: 1;
        OP_DARKEN :: 2;
        OP_LIGHTEN :: 3;
        OP_OVERLAY :: 4;
        OP_DODGE :: 5;
        OP_BURN :: 6;
        OP_SOFT_LIGHT :: 7;
        OP_HARD_LIGHT :: 8;
        OP_MAX :: 9;
    }
}

VisualShaderNodeColorParameter :: struct { #as using base: OpaqueClass; } // 808

VisualShaderNodeComment :: struct { #as using base: OpaqueClass; } // 809

VisualShaderNodeCompare :: struct {  // 810

        #as using base: OpaqueClass;

    ComparisonType :: enum s32 {
        CTYPE_SCALAR :: 0;
        CTYPE_SCALAR_INT :: 1;
        CTYPE_SCALAR_UINT :: 2;
        CTYPE_VECTOR_2D :: 3;
        CTYPE_VECTOR_3D :: 4;
        CTYPE_VECTOR_4D :: 5;
        CTYPE_BOOLEAN :: 6;
        CTYPE_TRANSFORM :: 7;
        CTYPE_MAX :: 8;
    }

    Function :: enum s32 {
        FUNC_EQUAL :: 0;
        FUNC_NOT_EQUAL :: 1;
        FUNC_GREATER_THAN :: 2;
        FUNC_GREATER_THAN_EQUAL :: 3;
        FUNC_LESS_THAN :: 4;
        FUNC_LESS_THAN_EQUAL :: 5;
        FUNC_MAX :: 6;
    }

    Condition :: enum s32 {
        COND_ALL :: 0;
        COND_ANY :: 1;
        COND_MAX :: 2;
    }
}

VisualShaderNodeConstant :: struct { #as using base: OpaqueClass; } // 811

VisualShaderNodeCubemap :: struct {  // 812

        #as using base: OpaqueClass;

    Source :: enum s32 {
        SOURCE_TEXTURE :: 0;
        SOURCE_PORT :: 1;
        SOURCE_MAX :: 2;
    }

    TextureType :: enum s32 {
        TYPE_DATA :: 0;
        TYPE_COLOR :: 1;
        TYPE_NORMAL_MAP :: 2;
        TYPE_MAX :: 3;
    }
}

VisualShaderNodeCubemapParameter :: struct { #as using base: OpaqueClass; } // 813

VisualShaderNodeCurveTexture :: struct { #as using base: OpaqueClass; } // 814

VisualShaderNodeCurveXYZTexture :: struct { #as using base: OpaqueClass; } // 815

VisualShaderNodeCustom :: struct { #as using base: OpaqueClass; } // 816

VisualShaderNodeDerivativeFunc :: struct {  // 817

        #as using base: OpaqueClass;

    OpType :: enum s32 {
        OP_TYPE_SCALAR :: 0;
        OP_TYPE_VECTOR_2D :: 1;
        OP_TYPE_VECTOR_3D :: 2;
        OP_TYPE_VECTOR_4D :: 3;
        OP_TYPE_MAX :: 4;
    }

    Function :: enum s32 {
        FUNC_SUM :: 0;
        FUNC_X :: 1;
        FUNC_Y :: 2;
        FUNC_MAX :: 3;
    }

    Precision :: enum s32 {
        PRECISION_NONE :: 0;
        PRECISION_COARSE :: 1;
        PRECISION_FINE :: 2;
        PRECISION_MAX :: 3;
    }
}

VisualShaderNodeDeterminant :: struct { #as using base: OpaqueClass; } // 818

VisualShaderNodeDistanceFade :: struct { #as using base: OpaqueClass; } // 819

VisualShaderNodeDotProduct :: struct { #as using base: OpaqueClass; } // 820

VisualShaderNodeExpression :: struct { #as using base: OpaqueClass; } // 821

VisualShaderNodeFaceForward :: struct { #as using base: OpaqueClass; } // 822

VisualShaderNodeFloatConstant :: struct { #as using base: OpaqueClass; } // 823

VisualShaderNodeFloatFunc :: struct {  // 824

        #as using base: OpaqueClass;

    Function :: enum s32 {
        FUNC_SIN :: 0;
        FUNC_COS :: 1;
        FUNC_TAN :: 2;
        FUNC_ASIN :: 3;
        FUNC_ACOS :: 4;
        FUNC_ATAN :: 5;
        FUNC_SINH :: 6;
        FUNC_COSH :: 7;
        FUNC_TANH :: 8;
        FUNC_LOG :: 9;
        FUNC_EXP :: 10;
        FUNC_SQRT :: 11;
        FUNC_ABS :: 12;
        FUNC_SIGN :: 13;
        FUNC_FLOOR :: 14;
        FUNC_ROUND :: 15;
        FUNC_CEIL :: 16;
        FUNC_FRACT :: 17;
        FUNC_SATURATE :: 18;
        FUNC_NEGATE :: 19;
        FUNC_ACOSH :: 20;
        FUNC_ASINH :: 21;
        FUNC_ATANH :: 22;
        FUNC_DEGREES :: 23;
        FUNC_EXP2 :: 24;
        FUNC_INVERSE_SQRT :: 25;
        FUNC_LOG2 :: 26;
        FUNC_RADIANS :: 27;
        FUNC_RECIPROCAL :: 28;
        FUNC_ROUNDEVEN :: 29;
        FUNC_TRUNC :: 30;
        FUNC_ONEMINUS :: 31;
        FUNC_MAX :: 32;
    }
}

VisualShaderNodeFloatOp :: struct {  // 825

        #as using base: OpaqueClass;

    Operator :: enum s32 {
        OP_ADD :: 0;
        OP_SUB :: 1;
        OP_MUL :: 2;
        OP_DIV :: 3;
        OP_MOD :: 4;
        OP_POW :: 5;
        OP_MAX :: 6;
        OP_MIN :: 7;
        OP_ATAN2 :: 8;
        OP_STEP :: 9;
        OP_ENUM_SIZE :: 10;
    }
}

VisualShaderNodeFloatParameter :: struct {  // 826

        #as using base: OpaqueClass;

    Hint :: enum s32 {
        HINT_NONE :: 0;
        HINT_RANGE :: 1;
        HINT_RANGE_STEP :: 2;
        HINT_MAX :: 3;
    }
}

VisualShaderNodeFrame :: struct { #as using base: OpaqueClass; } // 827

VisualShaderNodeFresnel :: struct { #as using base: OpaqueClass; } // 828

VisualShaderNodeGlobalExpression :: struct { #as using base: OpaqueClass; } // 829

VisualShaderNodeGroupBase :: struct { #as using base: OpaqueClass; } // 830

VisualShaderNodeIf :: struct { #as using base: OpaqueClass; } // 831

VisualShaderNodeInput :: struct { #as using base: OpaqueClass; } // 832

VisualShaderNodeIntConstant :: struct { #as using base: OpaqueClass; } // 833

VisualShaderNodeIntFunc :: struct {  // 834

        #as using base: OpaqueClass;

    Function :: enum s32 {
        FUNC_ABS :: 0;
        FUNC_NEGATE :: 1;
        FUNC_SIGN :: 2;
        FUNC_BITWISE_NOT :: 3;
        FUNC_MAX :: 4;
    }
}

VisualShaderNodeIntOp :: struct {  // 835

        #as using base: OpaqueClass;

    Operator :: enum s32 {
        OP_ADD :: 0;
        OP_SUB :: 1;
        OP_MUL :: 2;
        OP_DIV :: 3;
        OP_MOD :: 4;
        OP_MAX :: 5;
        OP_MIN :: 6;
        OP_BITWISE_AND :: 7;
        OP_BITWISE_OR :: 8;
        OP_BITWISE_XOR :: 9;
        OP_BITWISE_LEFT_SHIFT :: 10;
        OP_BITWISE_RIGHT_SHIFT :: 11;
        OP_ENUM_SIZE :: 12;
    }
}

VisualShaderNodeIntParameter :: struct {  // 836

        #as using base: OpaqueClass;

    Hint :: enum s32 {
        HINT_NONE :: 0;
        HINT_RANGE :: 1;
        HINT_RANGE_STEP :: 2;
        HINT_ENUM :: 3;
        HINT_MAX :: 4;
    }
}

VisualShaderNodeIs :: struct {  // 837

        #as using base: OpaqueClass;

    Function :: enum s32 {
        FUNC_IS_INF :: 0;
        FUNC_IS_NAN :: 1;
        FUNC_MAX :: 2;
    }
}

VisualShaderNodeLinearSceneDepth :: struct { #as using base: OpaqueClass; } // 838

VisualShaderNodeMix :: struct {  // 839

        #as using base: OpaqueClass;

    OpType :: enum s32 {
        OP_TYPE_SCALAR :: 0;
        OP_TYPE_VECTOR_2D :: 1;
        OP_TYPE_VECTOR_2D_SCALAR :: 2;
        OP_TYPE_VECTOR_3D :: 3;
        OP_TYPE_VECTOR_3D_SCALAR :: 4;
        OP_TYPE_VECTOR_4D :: 5;
        OP_TYPE_VECTOR_4D_SCALAR :: 6;
        OP_TYPE_MAX :: 7;
    }
}

VisualShaderNodeMultiplyAdd :: struct {  // 840

        #as using base: OpaqueClass;

    OpType :: enum s32 {
        OP_TYPE_SCALAR :: 0;
        OP_TYPE_VECTOR_2D :: 1;
        OP_TYPE_VECTOR_3D :: 2;
        OP_TYPE_VECTOR_4D :: 3;
        OP_TYPE_MAX :: 4;
    }
}

VisualShaderNodeOuterProduct :: struct { #as using base: OpaqueClass; } // 841

VisualShaderNodeOutput :: struct { #as using base: OpaqueClass; } // 842

VisualShaderNodeParameter :: struct {  // 843

        #as using base: OpaqueClass;

    Qualifier :: enum s32 {
        QUAL_NONE :: 0;
        QUAL_GLOBAL :: 1;
        QUAL_INSTANCE :: 2;
        QUAL_MAX :: 3;
    }
}

VisualShaderNodeParameterRef :: struct { #as using base: OpaqueClass; } // 844

VisualShaderNodeParticleAccelerator :: struct {  // 845

        #as using base: OpaqueClass;

    Mode :: enum s32 {
        MODE_LINEAR :: 0;
        MODE_RADIAL :: 1;
        MODE_TANGENTIAL :: 2;
        MODE_MAX :: 3;
    }
}

VisualShaderNodeParticleBoxEmitter :: struct { #as using base: OpaqueClass; } // 846

VisualShaderNodeParticleConeVelocity :: struct { #as using base: OpaqueClass; } // 847

VisualShaderNodeParticleEmit :: struct {  // 848

        #as using base: OpaqueClass;

    EmitFlags :: enum s32 {
        EMIT_FLAG_POSITION :: 1;
        EMIT_FLAG_ROT_SCALE :: 2;
        EMIT_FLAG_VELOCITY :: 4;
        EMIT_FLAG_COLOR :: 8;
        EMIT_FLAG_CUSTOM :: 16;
    }
}

VisualShaderNodeParticleEmitter :: struct { #as using base: OpaqueClass; } // 849

VisualShaderNodeParticleMeshEmitter :: struct { #as using base: OpaqueClass; } // 850

VisualShaderNodeParticleMultiplyByAxisAngle :: struct { #as using base: OpaqueClass; } // 851

VisualShaderNodeParticleOutput :: struct { #as using base: OpaqueClass; } // 852

VisualShaderNodeParticleRandomness :: struct {  // 853

        #as using base: OpaqueClass;

    OpType :: enum s32 {
        OP_TYPE_SCALAR :: 0;
        OP_TYPE_VECTOR_2D :: 1;
        OP_TYPE_VECTOR_3D :: 2;
        OP_TYPE_VECTOR_4D :: 3;
        OP_TYPE_MAX :: 4;
    }
}

VisualShaderNodeParticleRingEmitter :: struct { #as using base: OpaqueClass; } // 854

VisualShaderNodeParticleSphereEmitter :: struct { #as using base: OpaqueClass; } // 855

VisualShaderNodeProximityFade :: struct { #as using base: OpaqueClass; } // 856

VisualShaderNodeRandomRange :: struct { #as using base: OpaqueClass; } // 857

VisualShaderNodeRemap :: struct {  // 858

        #as using base: OpaqueClass;

    OpType :: enum s32 {
        OP_TYPE_SCALAR :: 0;
        OP_TYPE_VECTOR_2D :: 1;
        OP_TYPE_VECTOR_2D_SCALAR :: 2;
        OP_TYPE_VECTOR_3D :: 3;
        OP_TYPE_VECTOR_3D_SCALAR :: 4;
        OP_TYPE_VECTOR_4D :: 5;
        OP_TYPE_VECTOR_4D_SCALAR :: 6;
        OP_TYPE_MAX :: 7;
    }
}

VisualShaderNodeReroute :: struct { #as using base: OpaqueClass; } // 859

VisualShaderNodeResizableBase :: struct { #as using base: OpaqueClass; } // 860

VisualShaderNodeRotationByAxis :: struct { #as using base: OpaqueClass; } // 861

VisualShaderNodeSDFRaymarch :: struct { #as using base: OpaqueClass; } // 862

VisualShaderNodeSDFToScreenUV :: struct { #as using base: OpaqueClass; } // 863

VisualShaderNodeSample3D :: struct {  // 864

        #as using base: OpaqueClass;

    Source :: enum s32 {
        SOURCE_TEXTURE :: 0;
        SOURCE_PORT :: 1;
        SOURCE_MAX :: 2;
    }
}

VisualShaderNodeScreenNormalWorldSpace :: struct { #as using base: OpaqueClass; } // 865

VisualShaderNodeScreenUVToSDF :: struct { #as using base: OpaqueClass; } // 866

VisualShaderNodeSmoothStep :: struct {  // 867

        #as using base: OpaqueClass;

    OpType :: enum s32 {
        OP_TYPE_SCALAR :: 0;
        OP_TYPE_VECTOR_2D :: 1;
        OP_TYPE_VECTOR_2D_SCALAR :: 2;
        OP_TYPE_VECTOR_3D :: 3;
        OP_TYPE_VECTOR_3D_SCALAR :: 4;
        OP_TYPE_VECTOR_4D :: 5;
        OP_TYPE_VECTOR_4D_SCALAR :: 6;
        OP_TYPE_MAX :: 7;
    }
}

VisualShaderNodeStep :: struct {  // 868

        #as using base: OpaqueClass;

    OpType :: enum s32 {
        OP_TYPE_SCALAR :: 0;
        OP_TYPE_VECTOR_2D :: 1;
        OP_TYPE_VECTOR_2D_SCALAR :: 2;
        OP_TYPE_VECTOR_3D :: 3;
        OP_TYPE_VECTOR_3D_SCALAR :: 4;
        OP_TYPE_VECTOR_4D :: 5;
        OP_TYPE_VECTOR_4D_SCALAR :: 6;
        OP_TYPE_MAX :: 7;
    }
}

VisualShaderNodeSwitch :: struct {  // 869

        #as using base: OpaqueClass;

    OpType :: enum s32 {
        OP_TYPE_FLOAT :: 0;
        OP_TYPE_INT :: 1;
        OP_TYPE_UINT :: 2;
        OP_TYPE_VECTOR_2D :: 3;
        OP_TYPE_VECTOR_3D :: 4;
        OP_TYPE_VECTOR_4D :: 5;
        OP_TYPE_BOOLEAN :: 6;
        OP_TYPE_TRANSFORM :: 7;
        OP_TYPE_MAX :: 8;
    }
}

VisualShaderNodeTexture :: struct {  // 870

        #as using base: OpaqueClass;

    Source :: enum s32 {
        SOURCE_TEXTURE :: 0;
        SOURCE_SCREEN :: 1;
        SOURCE_2D_TEXTURE :: 2;
        SOURCE_2D_NORMAL :: 3;
        SOURCE_DEPTH :: 4;
        SOURCE_PORT :: 5;
        SOURCE_3D_NORMAL :: 6;
        SOURCE_ROUGHNESS :: 7;
        SOURCE_MAX :: 8;
    }

    TextureType :: enum s32 {
        TYPE_DATA :: 0;
        TYPE_COLOR :: 1;
        TYPE_NORMAL_MAP :: 2;
        TYPE_MAX :: 3;
    }
}

VisualShaderNodeTexture2DArray :: struct { #as using base: OpaqueClass; } // 871

VisualShaderNodeTexture2DArrayParameter :: struct { #as using base: OpaqueClass; } // 872

VisualShaderNodeTexture2DParameter :: struct { #as using base: OpaqueClass; } // 873

VisualShaderNodeTexture3D :: struct { #as using base: OpaqueClass; } // 874

VisualShaderNodeTexture3DParameter :: struct { #as using base: OpaqueClass; } // 875

VisualShaderNodeTextureParameter :: struct {  // 876

        #as using base: OpaqueClass;

    TextureType :: enum s32 {
        TYPE_DATA :: 0;
        TYPE_COLOR :: 1;
        TYPE_NORMAL_MAP :: 2;
        TYPE_ANISOTROPY :: 3;
        TYPE_MAX :: 4;
    }

    ColorDefault :: enum s32 {
        COLOR_DEFAULT_WHITE :: 0;
        COLOR_DEFAULT_BLACK :: 1;
        COLOR_DEFAULT_TRANSPARENT :: 2;
        COLOR_DEFAULT_MAX :: 3;
    }

    TextureFilter :: enum s32 {
        FILTER_DEFAULT :: 0;
        FILTER_NEAREST :: 1;
        FILTER_LINEAR :: 2;
        FILTER_NEAREST_MIPMAP :: 3;
        FILTER_LINEAR_MIPMAP :: 4;
        FILTER_NEAREST_MIPMAP_ANISOTROPIC :: 5;
        FILTER_LINEAR_MIPMAP_ANISOTROPIC :: 6;
        FILTER_MAX :: 7;
    }

    TextureRepeat :: enum s32 {
        REPEAT_DEFAULT :: 0;
        REPEAT_ENABLED :: 1;
        REPEAT_DISABLED :: 2;
        REPEAT_MAX :: 3;
    }

    TextureSource :: enum s32 {
        SOURCE_NONE :: 0;
        SOURCE_SCREEN :: 1;
        SOURCE_DEPTH :: 2;
        SOURCE_NORMAL_ROUGHNESS :: 3;
        SOURCE_MAX :: 4;
    }
}

VisualShaderNodeTextureParameterTriplanar :: struct { #as using base: OpaqueClass; } // 877

VisualShaderNodeTextureSDF :: struct { #as using base: OpaqueClass; } // 878

VisualShaderNodeTextureSDFNormal :: struct { #as using base: OpaqueClass; } // 879

VisualShaderNodeTransformCompose :: struct { #as using base: OpaqueClass; } // 880

VisualShaderNodeTransformConstant :: struct { #as using base: OpaqueClass; } // 881

VisualShaderNodeTransformDecompose :: struct { #as using base: OpaqueClass; } // 882

VisualShaderNodeTransformFunc :: struct {  // 883

        #as using base: OpaqueClass;

    Function :: enum s32 {
        FUNC_INVERSE :: 0;
        FUNC_TRANSPOSE :: 1;
        FUNC_MAX :: 2;
    }
}

VisualShaderNodeTransformOp :: struct {  // 884

        #as using base: OpaqueClass;

    Operator :: enum s32 {
        OP_AxB :: 0;
        OP_BxA :: 1;
        OP_AxB_COMP :: 2;
        OP_BxA_COMP :: 3;
        OP_ADD :: 4;
        OP_A_MINUS_B :: 5;
        OP_B_MINUS_A :: 6;
        OP_A_DIV_B :: 7;
        OP_B_DIV_A :: 8;
        OP_MAX :: 9;
    }
}

VisualShaderNodeTransformParameter :: struct { #as using base: OpaqueClass; } // 885

VisualShaderNodeTransformVecMult :: struct {  // 886

        #as using base: OpaqueClass;

    Operator :: enum s32 {
        OP_AxB :: 0;
        OP_BxA :: 1;
        OP_3x3_AxB :: 2;
        OP_3x3_BxA :: 3;
        OP_MAX :: 4;
    }
}

VisualShaderNodeUIntConstant :: struct { #as using base: OpaqueClass; } // 887

VisualShaderNodeUIntFunc :: struct {  // 888

        #as using base: OpaqueClass;

    Function :: enum s32 {
        FUNC_NEGATE :: 0;
        FUNC_BITWISE_NOT :: 1;
        FUNC_MAX :: 2;
    }
}

VisualShaderNodeUIntOp :: struct {  // 889

        #as using base: OpaqueClass;

    Operator :: enum s32 {
        OP_ADD :: 0;
        OP_SUB :: 1;
        OP_MUL :: 2;
        OP_DIV :: 3;
        OP_MOD :: 4;
        OP_MAX :: 5;
        OP_MIN :: 6;
        OP_BITWISE_AND :: 7;
        OP_BITWISE_OR :: 8;
        OP_BITWISE_XOR :: 9;
        OP_BITWISE_LEFT_SHIFT :: 10;
        OP_BITWISE_RIGHT_SHIFT :: 11;
        OP_ENUM_SIZE :: 12;
    }
}

VisualShaderNodeUIntParameter :: struct { #as using base: OpaqueClass; } // 890

VisualShaderNodeUVFunc :: struct {  // 891

        #as using base: OpaqueClass;

    Function :: enum s32 {
        FUNC_PANNING :: 0;
        FUNC_SCALING :: 1;
        FUNC_MAX :: 2;
    }
}

VisualShaderNodeUVPolarCoord :: struct { #as using base: OpaqueClass; } // 892

VisualShaderNodeVarying :: struct { #as using base: OpaqueClass; } // 893

VisualShaderNodeVaryingGetter :: struct { #as using base: OpaqueClass; } // 894

VisualShaderNodeVaryingSetter :: struct { #as using base: OpaqueClass; } // 895

VisualShaderNodeVec2Constant :: struct { #as using base: OpaqueClass; } // 896

VisualShaderNodeVec2Parameter :: struct { #as using base: OpaqueClass; } // 897

VisualShaderNodeVec3Constant :: struct { #as using base: OpaqueClass; } // 898

VisualShaderNodeVec3Parameter :: struct { #as using base: OpaqueClass; } // 899

VisualShaderNodeVec4Constant :: struct { #as using base: OpaqueClass; } // 900

VisualShaderNodeVec4Parameter :: struct { #as using base: OpaqueClass; } // 901

VisualShaderNodeVectorBase :: struct {  // 902

        #as using base: OpaqueClass;

    OpType :: enum s32 {
        OP_TYPE_VECTOR_2D :: 0;
        OP_TYPE_VECTOR_3D :: 1;
        OP_TYPE_VECTOR_4D :: 2;
        OP_TYPE_MAX :: 3;
    }
}

VisualShaderNodeVectorCompose :: struct { #as using base: OpaqueClass; } // 903

VisualShaderNodeVectorDecompose :: struct { #as using base: OpaqueClass; } // 904

VisualShaderNodeVectorDistance :: struct { #as using base: OpaqueClass; } // 905

VisualShaderNodeVectorFunc :: struct {  // 906

        #as using base: OpaqueClass;

    Function :: enum s32 {
        FUNC_NORMALIZE :: 0;
        FUNC_SATURATE :: 1;
        FUNC_NEGATE :: 2;
        FUNC_RECIPROCAL :: 3;
        FUNC_ABS :: 4;
        FUNC_ACOS :: 5;
        FUNC_ACOSH :: 6;
        FUNC_ASIN :: 7;
        FUNC_ASINH :: 8;
        FUNC_ATAN :: 9;
        FUNC_ATANH :: 10;
        FUNC_CEIL :: 11;
        FUNC_COS :: 12;
        FUNC_COSH :: 13;
        FUNC_DEGREES :: 14;
        FUNC_EXP :: 15;
        FUNC_EXP2 :: 16;
        FUNC_FLOOR :: 17;
        FUNC_FRACT :: 18;
        FUNC_INVERSE_SQRT :: 19;
        FUNC_LOG :: 20;
        FUNC_LOG2 :: 21;
        FUNC_RADIANS :: 22;
        FUNC_ROUND :: 23;
        FUNC_ROUNDEVEN :: 24;
        FUNC_SIGN :: 25;
        FUNC_SIN :: 26;
        FUNC_SINH :: 27;
        FUNC_SQRT :: 28;
        FUNC_TAN :: 29;
        FUNC_TANH :: 30;
        FUNC_TRUNC :: 31;
        FUNC_ONEMINUS :: 32;
        FUNC_MAX :: 33;
    }
}

VisualShaderNodeVectorLen :: struct { #as using base: OpaqueClass; } // 907

VisualShaderNodeVectorOp :: struct {  // 908

        #as using base: OpaqueClass;

    Operator :: enum s32 {
        OP_ADD :: 0;
        OP_SUB :: 1;
        OP_MUL :: 2;
        OP_DIV :: 3;
        OP_MOD :: 4;
        OP_POW :: 5;
        OP_MAX :: 6;
        OP_MIN :: 7;
        OP_CROSS :: 8;
        OP_ATAN2 :: 9;
        OP_REFLECT :: 10;
        OP_STEP :: 11;
        OP_ENUM_SIZE :: 12;
    }
}

VisualShaderNodeVectorRefract :: struct { #as using base: OpaqueClass; } // 909

VisualShaderNodeWorldPositionFromDepth :: struct { #as using base: OpaqueClass; } // 910

VoxelGI :: struct {  // 911

        #as using base: OpaqueClass;

    Subdiv :: enum s32 {
        SUBDIV_64 :: 0;
        SUBDIV_128 :: 1;
        SUBDIV_256 :: 2;
        SUBDIV_512 :: 3;
        SUBDIV_MAX :: 4;
    }
}

VoxelGIData :: struct { #as using base: OpaqueClass; } // 912

WeakRef :: struct { #as using base: OpaqueClass; } // 913

WebRTCDataChannel :: struct {  // 914

        #as using base: OpaqueClass;

    WriteMode :: enum s32 {
        WRITE_MODE_TEXT :: 0;
        WRITE_MODE_BINARY :: 1;
    }

    ChannelState :: enum s32 {
        STATE_CONNECTING :: 0;
        STATE_OPEN :: 1;
        STATE_CLOSING :: 2;
        STATE_CLOSED :: 3;
    }
}

WebRTCDataChannelExtension :: struct { #as using base: OpaqueClass; } // 915

WebRTCMultiplayerPeer :: struct { #as using base: OpaqueClass; } // 916

WebRTCPeerConnection :: struct {  // 917

        #as using base: OpaqueClass;

    ConnectionState :: enum s32 {
        STATE_NEW :: 0;
        STATE_CONNECTING :: 1;
        STATE_CONNECTED :: 2;
        STATE_DISCONNECTED :: 3;
        STATE_FAILED :: 4;
        STATE_CLOSED :: 5;
    }

    GatheringState :: enum s32 {
        GATHERING_STATE_NEW :: 0;
        GATHERING_STATE_GATHERING :: 1;
        GATHERING_STATE_COMPLETE :: 2;
    }

    SignalingState :: enum s32 {
        SIGNALING_STATE_STABLE :: 0;
        SIGNALING_STATE_HAVE_LOCAL_OFFER :: 1;
        SIGNALING_STATE_HAVE_REMOTE_OFFER :: 2;
        SIGNALING_STATE_HAVE_LOCAL_PRANSWER :: 3;
        SIGNALING_STATE_HAVE_REMOTE_PRANSWER :: 4;
        SIGNALING_STATE_CLOSED :: 5;
    }
}

WebRTCPeerConnectionExtension :: struct { #as using base: OpaqueClass; } // 918

WebSocketMultiplayerPeer :: struct { #as using base: OpaqueClass; } // 919

WebSocketPeer :: struct {  // 920

        #as using base: OpaqueClass;

    WriteMode :: enum s32 {
        WRITE_MODE_TEXT :: 0;
        WRITE_MODE_BINARY :: 1;
    }

    State :: enum s32 {
        STATE_CONNECTING :: 0;
        STATE_OPEN :: 1;
        STATE_CLOSING :: 2;
        STATE_CLOSED :: 3;
    }
}

WebXRInterface :: struct {  // 921

        #as using base: OpaqueClass;

    TargetRayMode :: enum s32 {
        TARGET_RAY_MODE_UNKNOWN :: 0;
        TARGET_RAY_MODE_GAZE :: 1;
        TARGET_RAY_MODE_TRACKED_POINTER :: 2;
        TARGET_RAY_MODE_SCREEN :: 3;
    }
}

Window :: struct {  // 922

        #as using base: OpaqueClass;

    Mode :: enum s32 {
        MODE_WINDOWED :: 0;
        MODE_MINIMIZED :: 1;
        MODE_MAXIMIZED :: 2;
        MODE_FULLSCREEN :: 3;
        MODE_EXCLUSIVE_FULLSCREEN :: 4;
    }

    Flags :: enum s32 {
        FLAG_RESIZE_DISABLED :: 0;
        FLAG_BORDERLESS :: 1;
        FLAG_ALWAYS_ON_TOP :: 2;
        FLAG_TRANSPARENT :: 3;
        FLAG_NO_FOCUS :: 4;
        FLAG_POPUP :: 5;
        FLAG_EXTEND_TO_TITLE :: 6;
        FLAG_MOUSE_PASSTHROUGH :: 7;
        FLAG_SHARP_CORNERS :: 8;
        FLAG_EXCLUDE_FROM_CAPTURE :: 9;
        FLAG_MAX :: 10;
    }

    ContentScaleMode :: enum s32 {
        CONTENT_SCALE_MODE_DISABLED :: 0;
        CONTENT_SCALE_MODE_CANVAS_ITEMS :: 1;
        CONTENT_SCALE_MODE_VIEWPORT :: 2;
    }

    ContentScaleAspect :: enum s32 {
        CONTENT_SCALE_ASPECT_IGNORE :: 0;
        CONTENT_SCALE_ASPECT_KEEP :: 1;
        CONTENT_SCALE_ASPECT_KEEP_WIDTH :: 2;
        CONTENT_SCALE_ASPECT_KEEP_HEIGHT :: 3;
        CONTENT_SCALE_ASPECT_EXPAND :: 4;
    }

    ContentScaleStretch :: enum s32 {
        CONTENT_SCALE_STRETCH_FRACTIONAL :: 0;
        CONTENT_SCALE_STRETCH_INTEGER :: 1;
    }

    LayoutDirection :: enum s32 {
        LAYOUT_DIRECTION_INHERITED :: 0;
        LAYOUT_DIRECTION_APPLICATION_LOCALE :: 1;
        LAYOUT_DIRECTION_LTR :: 2;
        LAYOUT_DIRECTION_RTL :: 3;
        LAYOUT_DIRECTION_SYSTEM_LOCALE :: 4;
        LAYOUT_DIRECTION_MAX :: 5;
        LAYOUT_DIRECTION_LOCALE :: 1;
    }

    WindowInitialPosition :: enum s32 {
        WINDOW_INITIAL_POSITION_ABSOLUTE :: 0;
        WINDOW_INITIAL_POSITION_CENTER_PRIMARY_SCREEN :: 1;
        WINDOW_INITIAL_POSITION_CENTER_MAIN_WINDOW_SCREEN :: 2;
        WINDOW_INITIAL_POSITION_CENTER_OTHER_SCREEN :: 3;
        WINDOW_INITIAL_POSITION_CENTER_SCREEN_WITH_MOUSE_FOCUS :: 4;
        WINDOW_INITIAL_POSITION_CENTER_SCREEN_WITH_KEYBOARD_FOCUS :: 5;
    }
}

WorkerThreadPool :: struct { #as using base: OpaqueClass; } // 923

World2D :: struct { #as using base: OpaqueClass; } // 924

World3D :: struct { #as using base: OpaqueClass; } // 925

WorldBoundaryShape2D :: struct { #as using base: OpaqueClass; } // 926

WorldBoundaryShape3D :: struct { #as using base: OpaqueClass; } // 927

WorldEnvironment :: struct { #as using base: OpaqueClass; } // 928

X509Certificate :: struct { #as using base: OpaqueClass; } // 929

XMLParser :: struct {  // 930

        #as using base: OpaqueClass;

    NodeType :: enum s32 {
        NODE_NONE :: 0;
        NODE_ELEMENT :: 1;
        NODE_ELEMENT_END :: 2;
        NODE_TEXT :: 3;
        NODE_COMMENT :: 4;
        NODE_CDATA :: 5;
        NODE_UNKNOWN :: 6;
    }
}

XRAnchor3D :: struct { #as using base: OpaqueClass; } // 931

XRBodyModifier3D :: struct {  // 932

        #as using base: OpaqueClass;

    BodyUpdate :: enum u64 {
        BODY_UPDATE_UPPER_BODY :: 1;
        BODY_UPDATE_LOWER_BODY :: 2;
        BODY_UPDATE_HANDS :: 4;
    } @bitfield

    BoneUpdate :: enum s32 {
        BONE_UPDATE_FULL :: 0;
        BONE_UPDATE_ROTATION_ONLY :: 1;
        BONE_UPDATE_MAX :: 2;
    }
}

XRBodyTracker :: struct {  // 933

        #as using base: OpaqueClass;

    BodyFlags :: enum u64 {
        BODY_FLAG_UPPER_BODY_SUPPORTED :: 1;
        BODY_FLAG_LOWER_BODY_SUPPORTED :: 2;
        BODY_FLAG_HANDS_SUPPORTED :: 4;
    } @bitfield

    Joint :: enum s32 {
        JOINT_ROOT :: 0;
        JOINT_HIPS :: 1;
        JOINT_SPINE :: 2;
        JOINT_CHEST :: 3;
        JOINT_UPPER_CHEST :: 4;
        JOINT_NECK :: 5;
        JOINT_HEAD :: 6;
        JOINT_HEAD_TIP :: 7;
        JOINT_LEFT_SHOULDER :: 8;
        JOINT_LEFT_UPPER_ARM :: 9;
        JOINT_LEFT_LOWER_ARM :: 10;
        JOINT_RIGHT_SHOULDER :: 11;
        JOINT_RIGHT_UPPER_ARM :: 12;
        JOINT_RIGHT_LOWER_ARM :: 13;
        JOINT_LEFT_UPPER_LEG :: 14;
        JOINT_LEFT_LOWER_LEG :: 15;
        JOINT_LEFT_FOOT :: 16;
        JOINT_LEFT_TOES :: 17;
        JOINT_RIGHT_UPPER_LEG :: 18;
        JOINT_RIGHT_LOWER_LEG :: 19;
        JOINT_RIGHT_FOOT :: 20;
        JOINT_RIGHT_TOES :: 21;
        JOINT_LEFT_HAND :: 22;
        JOINT_LEFT_PALM :: 23;
        JOINT_LEFT_WRIST :: 24;
        JOINT_LEFT_THUMB_METACARPAL :: 25;
        JOINT_LEFT_THUMB_PHALANX_PROXIMAL :: 26;
        JOINT_LEFT_THUMB_PHALANX_DISTAL :: 27;
        JOINT_LEFT_THUMB_TIP :: 28;
        JOINT_LEFT_INDEX_FINGER_METACARPAL :: 29;
        JOINT_LEFT_INDEX_FINGER_PHALANX_PROXIMAL :: 30;
        JOINT_LEFT_INDEX_FINGER_PHALANX_INTERMEDIATE :: 31;
        JOINT_LEFT_INDEX_FINGER_PHALANX_DISTAL :: 32;
        JOINT_LEFT_INDEX_FINGER_TIP :: 33;
        JOINT_LEFT_MIDDLE_FINGER_METACARPAL :: 34;
        JOINT_LEFT_MIDDLE_FINGER_PHALANX_PROXIMAL :: 35;
        JOINT_LEFT_MIDDLE_FINGER_PHALANX_INTERMEDIATE :: 36;
        JOINT_LEFT_MIDDLE_FINGER_PHALANX_DISTAL :: 37;
        JOINT_LEFT_MIDDLE_FINGER_TIP :: 38;
        JOINT_LEFT_RING_FINGER_METACARPAL :: 39;
        JOINT_LEFT_RING_FINGER_PHALANX_PROXIMAL :: 40;
        JOINT_LEFT_RING_FINGER_PHALANX_INTERMEDIATE :: 41;
        JOINT_LEFT_RING_FINGER_PHALANX_DISTAL :: 42;
        JOINT_LEFT_RING_FINGER_TIP :: 43;
        JOINT_LEFT_PINKY_FINGER_METACARPAL :: 44;
        JOINT_LEFT_PINKY_FINGER_PHALANX_PROXIMAL :: 45;
        JOINT_LEFT_PINKY_FINGER_PHALANX_INTERMEDIATE :: 46;
        JOINT_LEFT_PINKY_FINGER_PHALANX_DISTAL :: 47;
        JOINT_LEFT_PINKY_FINGER_TIP :: 48;
        JOINT_RIGHT_HAND :: 49;
        JOINT_RIGHT_PALM :: 50;
        JOINT_RIGHT_WRIST :: 51;
        JOINT_RIGHT_THUMB_METACARPAL :: 52;
        JOINT_RIGHT_THUMB_PHALANX_PROXIMAL :: 53;
        JOINT_RIGHT_THUMB_PHALANX_DISTAL :: 54;
        JOINT_RIGHT_THUMB_TIP :: 55;
        JOINT_RIGHT_INDEX_FINGER_METACARPAL :: 56;
        JOINT_RIGHT_INDEX_FINGER_PHALANX_PROXIMAL :: 57;
        JOINT_RIGHT_INDEX_FINGER_PHALANX_INTERMEDIATE :: 58;
        JOINT_RIGHT_INDEX_FINGER_PHALANX_DISTAL :: 59;
        JOINT_RIGHT_INDEX_FINGER_TIP :: 60;
        JOINT_RIGHT_MIDDLE_FINGER_METACARPAL :: 61;
        JOINT_RIGHT_MIDDLE_FINGER_PHALANX_PROXIMAL :: 62;
        JOINT_RIGHT_MIDDLE_FINGER_PHALANX_INTERMEDIATE :: 63;
        JOINT_RIGHT_MIDDLE_FINGER_PHALANX_DISTAL :: 64;
        JOINT_RIGHT_MIDDLE_FINGER_TIP :: 65;
        JOINT_RIGHT_RING_FINGER_METACARPAL :: 66;
        JOINT_RIGHT_RING_FINGER_PHALANX_PROXIMAL :: 67;
        JOINT_RIGHT_RING_FINGER_PHALANX_INTERMEDIATE :: 68;
        JOINT_RIGHT_RING_FINGER_PHALANX_DISTAL :: 69;
        JOINT_RIGHT_RING_FINGER_TIP :: 70;
        JOINT_RIGHT_PINKY_FINGER_METACARPAL :: 71;
        JOINT_RIGHT_PINKY_FINGER_PHALANX_PROXIMAL :: 72;
        JOINT_RIGHT_PINKY_FINGER_PHALANX_INTERMEDIATE :: 73;
        JOINT_RIGHT_PINKY_FINGER_PHALANX_DISTAL :: 74;
        JOINT_RIGHT_PINKY_FINGER_TIP :: 75;
        JOINT_MAX :: 76;
    }

    JointFlags :: enum u64 {
        JOINT_FLAG_ORIENTATION_VALID :: 1;
        JOINT_FLAG_ORIENTATION_TRACKED :: 2;
        JOINT_FLAG_POSITION_VALID :: 4;
        JOINT_FLAG_POSITION_TRACKED :: 8;
    } @bitfield
}

XRCamera3D :: struct { #as using base: OpaqueClass; } // 934

XRController3D :: struct { #as using base: OpaqueClass; } // 935

XRControllerTracker :: struct { #as using base: OpaqueClass; } // 936

XRFaceModifier3D :: struct { #as using base: OpaqueClass; } // 937

XRFaceTracker :: struct {  // 938

        #as using base: OpaqueClass;

    BlendShapeEntry :: enum s32 {
        FT_EYE_LOOK_OUT_RIGHT :: 0;
        FT_EYE_LOOK_IN_RIGHT :: 1;
        FT_EYE_LOOK_UP_RIGHT :: 2;
        FT_EYE_LOOK_DOWN_RIGHT :: 3;
        FT_EYE_LOOK_OUT_LEFT :: 4;
        FT_EYE_LOOK_IN_LEFT :: 5;
        FT_EYE_LOOK_UP_LEFT :: 6;
        FT_EYE_LOOK_DOWN_LEFT :: 7;
        FT_EYE_CLOSED_RIGHT :: 8;
        FT_EYE_CLOSED_LEFT :: 9;
        FT_EYE_SQUINT_RIGHT :: 10;
        FT_EYE_SQUINT_LEFT :: 11;
        FT_EYE_WIDE_RIGHT :: 12;
        FT_EYE_WIDE_LEFT :: 13;
        FT_EYE_DILATION_RIGHT :: 14;
        FT_EYE_DILATION_LEFT :: 15;
        FT_EYE_CONSTRICT_RIGHT :: 16;
        FT_EYE_CONSTRICT_LEFT :: 17;
        FT_BROW_PINCH_RIGHT :: 18;
        FT_BROW_PINCH_LEFT :: 19;
        FT_BROW_LOWERER_RIGHT :: 20;
        FT_BROW_LOWERER_LEFT :: 21;
        FT_BROW_INNER_UP_RIGHT :: 22;
        FT_BROW_INNER_UP_LEFT :: 23;
        FT_BROW_OUTER_UP_RIGHT :: 24;
        FT_BROW_OUTER_UP_LEFT :: 25;
        FT_NOSE_SNEER_RIGHT :: 26;
        FT_NOSE_SNEER_LEFT :: 27;
        FT_NASAL_DILATION_RIGHT :: 28;
        FT_NASAL_DILATION_LEFT :: 29;
        FT_NASAL_CONSTRICT_RIGHT :: 30;
        FT_NASAL_CONSTRICT_LEFT :: 31;
        FT_CHEEK_SQUINT_RIGHT :: 32;
        FT_CHEEK_SQUINT_LEFT :: 33;
        FT_CHEEK_PUFF_RIGHT :: 34;
        FT_CHEEK_PUFF_LEFT :: 35;
        FT_CHEEK_SUCK_RIGHT :: 36;
        FT_CHEEK_SUCK_LEFT :: 37;
        FT_JAW_OPEN :: 38;
        FT_MOUTH_CLOSED :: 39;
        FT_JAW_RIGHT :: 40;
        FT_JAW_LEFT :: 41;
        FT_JAW_FORWARD :: 42;
        FT_JAW_BACKWARD :: 43;
        FT_JAW_CLENCH :: 44;
        FT_JAW_MANDIBLE_RAISE :: 45;
        FT_LIP_SUCK_UPPER_RIGHT :: 46;
        FT_LIP_SUCK_UPPER_LEFT :: 47;
        FT_LIP_SUCK_LOWER_RIGHT :: 48;
        FT_LIP_SUCK_LOWER_LEFT :: 49;
        FT_LIP_SUCK_CORNER_RIGHT :: 50;
        FT_LIP_SUCK_CORNER_LEFT :: 51;
        FT_LIP_FUNNEL_UPPER_RIGHT :: 52;
        FT_LIP_FUNNEL_UPPER_LEFT :: 53;
        FT_LIP_FUNNEL_LOWER_RIGHT :: 54;
        FT_LIP_FUNNEL_LOWER_LEFT :: 55;
        FT_LIP_PUCKER_UPPER_RIGHT :: 56;
        FT_LIP_PUCKER_UPPER_LEFT :: 57;
        FT_LIP_PUCKER_LOWER_RIGHT :: 58;
        FT_LIP_PUCKER_LOWER_LEFT :: 59;
        FT_MOUTH_UPPER_UP_RIGHT :: 60;
        FT_MOUTH_UPPER_UP_LEFT :: 61;
        FT_MOUTH_LOWER_DOWN_RIGHT :: 62;
        FT_MOUTH_LOWER_DOWN_LEFT :: 63;
        FT_MOUTH_UPPER_DEEPEN_RIGHT :: 64;
        FT_MOUTH_UPPER_DEEPEN_LEFT :: 65;
        FT_MOUTH_UPPER_RIGHT :: 66;
        FT_MOUTH_UPPER_LEFT :: 67;
        FT_MOUTH_LOWER_RIGHT :: 68;
        FT_MOUTH_LOWER_LEFT :: 69;
        FT_MOUTH_CORNER_PULL_RIGHT :: 70;
        FT_MOUTH_CORNER_PULL_LEFT :: 71;
        FT_MOUTH_CORNER_SLANT_RIGHT :: 72;
        FT_MOUTH_CORNER_SLANT_LEFT :: 73;
        FT_MOUTH_FROWN_RIGHT :: 74;
        FT_MOUTH_FROWN_LEFT :: 75;
        FT_MOUTH_STRETCH_RIGHT :: 76;
        FT_MOUTH_STRETCH_LEFT :: 77;
        FT_MOUTH_DIMPLE_RIGHT :: 78;
        FT_MOUTH_DIMPLE_LEFT :: 79;
        FT_MOUTH_RAISER_UPPER :: 80;
        FT_MOUTH_RAISER_LOWER :: 81;
        FT_MOUTH_PRESS_RIGHT :: 82;
        FT_MOUTH_PRESS_LEFT :: 83;
        FT_MOUTH_TIGHTENER_RIGHT :: 84;
        FT_MOUTH_TIGHTENER_LEFT :: 85;
        FT_TONGUE_OUT :: 86;
        FT_TONGUE_UP :: 87;
        FT_TONGUE_DOWN :: 88;
        FT_TONGUE_RIGHT :: 89;
        FT_TONGUE_LEFT :: 90;
        FT_TONGUE_ROLL :: 91;
        FT_TONGUE_BLEND_DOWN :: 92;
        FT_TONGUE_CURL_UP :: 93;
        FT_TONGUE_SQUISH :: 94;
        FT_TONGUE_FLAT :: 95;
        FT_TONGUE_TWIST_RIGHT :: 96;
        FT_TONGUE_TWIST_LEFT :: 97;
        FT_SOFT_PALATE_CLOSE :: 98;
        FT_THROAT_SWALLOW :: 99;
        FT_NECK_FLEX_RIGHT :: 100;
        FT_NECK_FLEX_LEFT :: 101;
        FT_EYE_CLOSED :: 102;
        FT_EYE_WIDE :: 103;
        FT_EYE_SQUINT :: 104;
        FT_EYE_DILATION :: 105;
        FT_EYE_CONSTRICT :: 106;
        FT_BROW_DOWN_RIGHT :: 107;
        FT_BROW_DOWN_LEFT :: 108;
        FT_BROW_DOWN :: 109;
        FT_BROW_UP_RIGHT :: 110;
        FT_BROW_UP_LEFT :: 111;
        FT_BROW_UP :: 112;
        FT_NOSE_SNEER :: 113;
        FT_NASAL_DILATION :: 114;
        FT_NASAL_CONSTRICT :: 115;
        FT_CHEEK_PUFF :: 116;
        FT_CHEEK_SUCK :: 117;
        FT_CHEEK_SQUINT :: 118;
        FT_LIP_SUCK_UPPER :: 119;
        FT_LIP_SUCK_LOWER :: 120;
        FT_LIP_SUCK :: 121;
        FT_LIP_FUNNEL_UPPER :: 122;
        FT_LIP_FUNNEL_LOWER :: 123;
        FT_LIP_FUNNEL :: 124;
        FT_LIP_PUCKER_UPPER :: 125;
        FT_LIP_PUCKER_LOWER :: 126;
        FT_LIP_PUCKER :: 127;
        FT_MOUTH_UPPER_UP :: 128;
        FT_MOUTH_LOWER_DOWN :: 129;
        FT_MOUTH_OPEN :: 130;
        FT_MOUTH_RIGHT :: 131;
        FT_MOUTH_LEFT :: 132;
        FT_MOUTH_SMILE_RIGHT :: 133;
        FT_MOUTH_SMILE_LEFT :: 134;
        FT_MOUTH_SMILE :: 135;
        FT_MOUTH_SAD_RIGHT :: 136;
        FT_MOUTH_SAD_LEFT :: 137;
        FT_MOUTH_SAD :: 138;
        FT_MOUTH_STRETCH :: 139;
        FT_MOUTH_DIMPLE :: 140;
        FT_MOUTH_TIGHTENER :: 141;
        FT_MOUTH_PRESS :: 142;
        FT_MAX :: 143;
    }
}

XRHandModifier3D :: struct {  // 939

        #as using base: OpaqueClass;

    BoneUpdate :: enum s32 {
        BONE_UPDATE_FULL :: 0;
        BONE_UPDATE_ROTATION_ONLY :: 1;
        BONE_UPDATE_MAX :: 2;
    }
}

XRHandTracker :: struct {  // 940

        #as using base: OpaqueClass;

    HandTrackingSource :: enum s32 {
        HAND_TRACKING_SOURCE_UNKNOWN :: 0;
        HAND_TRACKING_SOURCE_UNOBSTRUCTED :: 1;
        HAND_TRACKING_SOURCE_CONTROLLER :: 2;
        HAND_TRACKING_SOURCE_NOT_TRACKED :: 3;
        HAND_TRACKING_SOURCE_MAX :: 4;
    }

    HandJoint :: enum s32 {
        HAND_JOINT_PALM :: 0;
        HAND_JOINT_WRIST :: 1;
        HAND_JOINT_THUMB_METACARPAL :: 2;
        HAND_JOINT_THUMB_PHALANX_PROXIMAL :: 3;
        HAND_JOINT_THUMB_PHALANX_DISTAL :: 4;
        HAND_JOINT_THUMB_TIP :: 5;
        HAND_JOINT_INDEX_FINGER_METACARPAL :: 6;
        HAND_JOINT_INDEX_FINGER_PHALANX_PROXIMAL :: 7;
        HAND_JOINT_INDEX_FINGER_PHALANX_INTERMEDIATE :: 8;
        HAND_JOINT_INDEX_FINGER_PHALANX_DISTAL :: 9;
        HAND_JOINT_INDEX_FINGER_TIP :: 10;
        HAND_JOINT_MIDDLE_FINGER_METACARPAL :: 11;
        HAND_JOINT_MIDDLE_FINGER_PHALANX_PROXIMAL :: 12;
        HAND_JOINT_MIDDLE_FINGER_PHALANX_INTERMEDIATE :: 13;
        HAND_JOINT_MIDDLE_FINGER_PHALANX_DISTAL :: 14;
        HAND_JOINT_MIDDLE_FINGER_TIP :: 15;
        HAND_JOINT_RING_FINGER_METACARPAL :: 16;
        HAND_JOINT_RING_FINGER_PHALANX_PROXIMAL :: 17;
        HAND_JOINT_RING_FINGER_PHALANX_INTERMEDIATE :: 18;
        HAND_JOINT_RING_FINGER_PHALANX_DISTAL :: 19;
        HAND_JOINT_RING_FINGER_TIP :: 20;
        HAND_JOINT_PINKY_FINGER_METACARPAL :: 21;
        HAND_JOINT_PINKY_FINGER_PHALANX_PROXIMAL :: 22;
        HAND_JOINT_PINKY_FINGER_PHALANX_INTERMEDIATE :: 23;
        HAND_JOINT_PINKY_FINGER_PHALANX_DISTAL :: 24;
        HAND_JOINT_PINKY_FINGER_TIP :: 25;
        HAND_JOINT_MAX :: 26;
    }

    HandJointFlags :: enum u64 {
        HAND_JOINT_FLAG_ORIENTATION_VALID :: 1;
        HAND_JOINT_FLAG_ORIENTATION_TRACKED :: 2;
        HAND_JOINT_FLAG_POSITION_VALID :: 4;
        HAND_JOINT_FLAG_POSITION_TRACKED :: 8;
        HAND_JOINT_FLAG_LINEAR_VELOCITY_VALID :: 16;
        HAND_JOINT_FLAG_ANGULAR_VELOCITY_VALID :: 32;
    } @bitfield
}

XRInterface :: struct {  // 941

        #as using base: OpaqueClass;

    Capabilities :: enum s32 {
        XR_NONE :: 0;
        XR_MONO :: 1;
        XR_STEREO :: 2;
        XR_QUAD :: 4;
        XR_VR :: 8;
        XR_AR :: 16;
        XR_EXTERNAL :: 32;
    }

    TrackingStatus :: enum s32 {
        XR_NORMAL_TRACKING :: 0;
        XR_EXCESSIVE_MOTION :: 1;
        XR_INSUFFICIENT_FEATURES :: 2;
        XR_UNKNOWN_TRACKING :: 3;
        XR_NOT_TRACKING :: 4;
    }

    PlayAreaMode :: enum s32 {
        XR_PLAY_AREA_UNKNOWN :: 0;
        XR_PLAY_AREA_3DOF :: 1;
        XR_PLAY_AREA_SITTING :: 2;
        XR_PLAY_AREA_ROOMSCALE :: 3;
        XR_PLAY_AREA_STAGE :: 4;
    }

    EnvironmentBlendMode :: enum s32 {
        XR_ENV_BLEND_MODE_OPAQUE :: 0;
        XR_ENV_BLEND_MODE_ADDITIVE :: 1;
        XR_ENV_BLEND_MODE_ALPHA_BLEND :: 2;
    }
}

XRInterfaceExtension :: struct { #as using base: OpaqueClass; } // 942

XRNode3D :: struct { #as using base: OpaqueClass; } // 943

XROrigin3D :: struct { #as using base: OpaqueClass; } // 944

XRPose :: struct {  // 945

        #as using base: OpaqueClass;

    TrackingConfidence :: enum s32 {
        XR_TRACKING_CONFIDENCE_NONE :: 0;
        XR_TRACKING_CONFIDENCE_LOW :: 1;
        XR_TRACKING_CONFIDENCE_HIGH :: 2;
    }
}

XRPositionalTracker :: struct {  // 946

        #as using base: OpaqueClass;

    TrackerHand :: enum s32 {
        TRACKER_HAND_UNKNOWN :: 0;
        TRACKER_HAND_LEFT :: 1;
        TRACKER_HAND_RIGHT :: 2;
        TRACKER_HAND_MAX :: 3;
    }
}

XRServer :: struct {  // 947

        #as using base: OpaqueClass;

    TrackerType :: enum s32 {
        TRACKER_HEAD :: 1;
        TRACKER_CONTROLLER :: 2;
        TRACKER_BASESTATION :: 4;
        TRACKER_ANCHOR :: 8;
        TRACKER_HAND :: 16;
        TRACKER_BODY :: 32;
        TRACKER_FACE :: 64;
        TRACKER_ANY_KNOWN :: 127;
        TRACKER_UNKNOWN :: 128;
        TRACKER_ANY :: 255;
    }

    RotationMode :: enum s32 {
        RESET_FULL_ROTATION :: 0;
        RESET_BUT_KEEP_TILT :: 1;
        DONT_RESET_ROTATION :: 2;
    }
}

XRTracker :: struct { #as using base: OpaqueClass; } // 948

XRVRS :: struct { #as using base: OpaqueClass; } // 949

ZIPPacker :: struct {  // 950

        #as using base: OpaqueClass;

    ZipAppend :: enum s32 {
        APPEND_CREATE :: 0;
        APPEND_CREATEAFTER :: 1;
        APPEND_ADDINZIP :: 2;
    }
}

ZIPReader :: struct { #as using base: OpaqueClass; } // 951

// ====== PROCEDURES ======

start :: (main: *AESContext, mode: AESContext.Mode, key: PackedByteArray) -> Error { call_ret := cast(*Error) sys_call("AESContext", "start", 3122411423, Error, main.p_object, mode, key); return call_ret.*; }  // 0
update :: (main: *AESContext, src: PackedByteArray) -> PackedByteArray { call_ret := cast(*PackedByteArray) sys_call("AESContext", "update", 527836100, PackedByteArray, main.p_object, src); return call_ret.*; }  // 1
get_iv_state :: (main: *AESContext) -> PackedByteArray { call_ret := cast(*PackedByteArray) sys_call("AESContext", "get_iv_state", 2115431945, PackedByteArray, main.p_object); return call_ret.*; }  // 2
finish :: (main: *AESContext) { sys_call("AESContext", "finish", 3218959716, Nil, main.p_object);  }  // 3

get_available_point_id :: (main: *AStar2D) -> int { call_ret := cast(*int) sys_call("AStar2D", "get_available_point_id", 3905245786, int, main.p_object); return call_ret.*; }  // 2
add_point :: (main: *AStar2D, id: int, position: Vector2) { sys_call("AStar2D", "add_point", 4074201818, Nil, main.p_object, id, position);  }  // 3
get_point_position :: (main: *AStar2D, id: int) -> Vector2 { call_ret := cast(*Vector2) sys_call("AStar2D", "get_point_position", 2299179447, Vector2, main.p_object, id); return call_ret.*; }  // 4
set_point_position :: (main: *AStar2D, id: int, position: Vector2) { sys_call("AStar2D", "set_point_position", 163021252, Nil, main.p_object, id, position);  }  // 5
get_point_weight_scale :: (main: *AStar2D, id: int) -> float { call_ret := cast(*float) sys_call("AStar2D", "get_point_weight_scale", 2339986948, float, main.p_object, id); return call_ret.*; }  // 6
set_point_weight_scale :: (main: *AStar2D, id: int, weight_scale: float) { sys_call("AStar2D", "set_point_weight_scale", 1602489585, Nil, main.p_object, id, weight_scale);  }  // 7
remove_point :: (main: *AStar2D, id: int) { sys_call("AStar2D", "remove_point", 1286410249, Nil, main.p_object, id);  }  // 8
has_point :: (main: *AStar2D, id: int) -> bool { call_ret := cast(*bool) sys_call("AStar2D", "has_point", 1116898809, bool, main.p_object, id); return call_ret.*; }  // 9
get_point_connections :: (main: *AStar2D, id: int) -> PackedInt64Array { call_ret := cast(*PackedInt64Array) sys_call("AStar2D", "get_point_connections", 2865087369, PackedInt64Array, main.p_object, id); return call_ret.*; }  // 10
get_point_ids :: (main: *AStar2D) -> PackedInt64Array { call_ret := cast(*PackedInt64Array) sys_call("AStar2D", "get_point_ids", 3851388692, PackedInt64Array, main.p_object); return call_ret.*; }  // 11
set_point_disabled :: (main: *AStar2D, id: int) { sys_call("AStar2D", "set_point_disabled", 972357352, Nil, main.p_object, id);  }  // 12
is_point_disabled :: (main: *AStar2D, id: int) -> bool { call_ret := cast(*bool) sys_call("AStar2D", "is_point_disabled", 1116898809, bool, main.p_object, id); return call_ret.*; }  // 13
connect_points :: (main: *AStar2D, id: int, to_id: int) { sys_call("AStar2D", "connect_points", 3710494224, Nil, main.p_object, id, to_id);  }  // 14
disconnect_points :: (main: *AStar2D, id: int, to_id: int) { sys_call("AStar2D", "disconnect_points", 3710494224, Nil, main.p_object, id, to_id);  }  // 15
are_points_connected :: (main: *AStar2D, id: int, to_id: int) -> bool { call_ret := cast(*bool) sys_call("AStar2D", "are_points_connected", 2288175859, bool, main.p_object, id, to_id); return call_ret.*; }  // 16
get_point_count :: (main: *AStar2D) -> int { call_ret := cast(*int) sys_call("AStar2D", "get_point_count", 3905245786, int, main.p_object); return call_ret.*; }  // 17
get_point_capacity :: (main: *AStar2D) -> int { call_ret := cast(*int) sys_call("AStar2D", "get_point_capacity", 3905245786, int, main.p_object); return call_ret.*; }  // 18
reserve_space :: (main: *AStar2D, num_nodes: int) { sys_call("AStar2D", "reserve_space", 1286410249, Nil, main.p_object, num_nodes);  }  // 19
clear :: (main: *AStar2D) { sys_call("AStar2D", "clear", 3218959716, Nil, main.p_object);  }  // 20
get_closest_point :: (main: *AStar2D, to_position: Vector2) -> int { call_ret := cast(*int) sys_call("AStar2D", "get_closest_point", 2300324924, int, main.p_object, to_position); return call_ret.*; }  // 21
get_closest_position_in_segment :: (main: *AStar2D, to_position: Vector2) -> Vector2 { call_ret := cast(*Vector2) sys_call("AStar2D", "get_closest_position_in_segment", 2656412154, Vector2, main.p_object, to_position); return call_ret.*; }  // 22
get_point_path :: (main: *AStar2D, from_id: int, to_id: int) -> PackedVector2Array { call_ret := cast(*PackedVector2Array) sys_call("AStar2D", "get_point_path", 3427490392, PackedVector2Array, main.p_object, from_id, to_id); return call_ret.*; }  // 23
get_id_path :: (main: *AStar2D, from_id: int, to_id: int) -> PackedInt64Array { call_ret := cast(*PackedInt64Array) sys_call("AStar2D", "get_id_path", 3136199648, PackedInt64Array, main.p_object, from_id, to_id); return call_ret.*; }  // 24

get_available_point_id :: (main: *AStar3D) -> int { call_ret := cast(*int) sys_call("AStar3D", "get_available_point_id", 3905245786, int, main.p_object); return call_ret.*; }  // 2
add_point :: (main: *AStar3D, id: int, position: Vector3) { sys_call("AStar3D", "add_point", 1038703438, Nil, main.p_object, id, position);  }  // 3
get_point_position :: (main: *AStar3D, id: int) -> Vector3 { call_ret := cast(*Vector3) sys_call("AStar3D", "get_point_position", 711720468, Vector3, main.p_object, id); return call_ret.*; }  // 4
set_point_position :: (main: *AStar3D, id: int, position: Vector3) { sys_call("AStar3D", "set_point_position", 1530502735, Nil, main.p_object, id, position);  }  // 5
get_point_weight_scale :: (main: *AStar3D, id: int) -> float { call_ret := cast(*float) sys_call("AStar3D", "get_point_weight_scale", 2339986948, float, main.p_object, id); return call_ret.*; }  // 6
set_point_weight_scale :: (main: *AStar3D, id: int, weight_scale: float) { sys_call("AStar3D", "set_point_weight_scale", 1602489585, Nil, main.p_object, id, weight_scale);  }  // 7
remove_point :: (main: *AStar3D, id: int) { sys_call("AStar3D", "remove_point", 1286410249, Nil, main.p_object, id);  }  // 8
has_point :: (main: *AStar3D, id: int) -> bool { call_ret := cast(*bool) sys_call("AStar3D", "has_point", 1116898809, bool, main.p_object, id); return call_ret.*; }  // 9
get_point_connections :: (main: *AStar3D, id: int) -> PackedInt64Array { call_ret := cast(*PackedInt64Array) sys_call("AStar3D", "get_point_connections", 2865087369, PackedInt64Array, main.p_object, id); return call_ret.*; }  // 10
get_point_ids :: (main: *AStar3D) -> PackedInt64Array { call_ret := cast(*PackedInt64Array) sys_call("AStar3D", "get_point_ids", 3851388692, PackedInt64Array, main.p_object); return call_ret.*; }  // 11
set_point_disabled :: (main: *AStar3D, id: int) { sys_call("AStar3D", "set_point_disabled", 972357352, Nil, main.p_object, id);  }  // 12
is_point_disabled :: (main: *AStar3D, id: int) -> bool { call_ret := cast(*bool) sys_call("AStar3D", "is_point_disabled", 1116898809, bool, main.p_object, id); return call_ret.*; }  // 13
connect_points :: (main: *AStar3D, id: int, to_id: int) { sys_call("AStar3D", "connect_points", 3710494224, Nil, main.p_object, id, to_id);  }  // 14
disconnect_points :: (main: *AStar3D, id: int, to_id: int) { sys_call("AStar3D", "disconnect_points", 3710494224, Nil, main.p_object, id, to_id);  }  // 15
are_points_connected :: (main: *AStar3D, id: int, to_id: int) -> bool { call_ret := cast(*bool) sys_call("AStar3D", "are_points_connected", 2288175859, bool, main.p_object, id, to_id); return call_ret.*; }  // 16
get_point_count :: (main: *AStar3D) -> int { call_ret := cast(*int) sys_call("AStar3D", "get_point_count", 3905245786, int, main.p_object); return call_ret.*; }  // 17
get_point_capacity :: (main: *AStar3D) -> int { call_ret := cast(*int) sys_call("AStar3D", "get_point_capacity", 3905245786, int, main.p_object); return call_ret.*; }  // 18
reserve_space :: (main: *AStar3D, num_nodes: int) { sys_call("AStar3D", "reserve_space", 1286410249, Nil, main.p_object, num_nodes);  }  // 19
clear :: (main: *AStar3D) { sys_call("AStar3D", "clear", 3218959716, Nil, main.p_object);  }  // 20
get_closest_point :: (main: *AStar3D, to_position: Vector3) -> int { call_ret := cast(*int) sys_call("AStar3D", "get_closest_point", 3241074317, int, main.p_object, to_position); return call_ret.*; }  // 21
get_closest_position_in_segment :: (main: *AStar3D, to_position: Vector3) -> Vector3 { call_ret := cast(*Vector3) sys_call("AStar3D", "get_closest_position_in_segment", 192990374, Vector3, main.p_object, to_position); return call_ret.*; }  // 22
get_point_path :: (main: *AStar3D, from_id: int, to_id: int) -> PackedVector3Array { call_ret := cast(*PackedVector3Array) sys_call("AStar3D", "get_point_path", 1562654675, PackedVector3Array, main.p_object, from_id, to_id); return call_ret.*; }  // 23
get_id_path :: (main: *AStar3D, from_id: int, to_id: int) -> PackedInt64Array { call_ret := cast(*PackedInt64Array) sys_call("AStar3D", "get_id_path", 3136199648, PackedInt64Array, main.p_object, from_id, to_id); return call_ret.*; }  // 24

set_region :: (main: *AStarGrid2D, region: Rect2i) { sys_call("AStarGrid2D", "set_region", 1763793166, Nil, main.p_object, region);  }  // 2
get_region :: (main: *AStarGrid2D) -> Rect2i { call_ret := cast(*Rect2i) sys_call("AStarGrid2D", "get_region", 410525958, Rect2i, main.p_object); return call_ret.*; }  // 3
set_size :: (main: *AStarGrid2D, size: Vector2i) { sys_call("AStarGrid2D", "set_size", 1130785943, Nil, main.p_object, size);  }  // 4
get_size :: (main: *AStarGrid2D) -> Vector2i { call_ret := cast(*Vector2i) sys_call("AStarGrid2D", "get_size", 3690982128, Vector2i, main.p_object); return call_ret.*; }  // 5
set_offset :: (main: *AStarGrid2D, offset: Vector2) { sys_call("AStarGrid2D", "set_offset", 743155724, Nil, main.p_object, offset);  }  // 6
get_offset :: (main: *AStarGrid2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("AStarGrid2D", "get_offset", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 7
set_cell_size :: (main: *AStarGrid2D, cell_size: Vector2) { sys_call("AStarGrid2D", "set_cell_size", 743155724, Nil, main.p_object, cell_size);  }  // 8
get_cell_size :: (main: *AStarGrid2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("AStarGrid2D", "get_cell_size", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 9
set_cell_shape :: (main: *AStarGrid2D, cell_shape: AStarGrid2D.CellShape) { sys_call("AStarGrid2D", "set_cell_shape", 4130591146, Nil, main.p_object, cell_shape);  }  // 10
get_cell_shape :: (main: *AStarGrid2D) -> AStarGrid2D.CellShape { call_ret := cast(*AStarGrid2D.CellShape) sys_call("AStarGrid2D", "get_cell_shape", 3293463634, AStarGrid2D.CellShape, main.p_object); return call_ret.*; }  // 11
is_in_bounds :: (main: *AStarGrid2D, x: int, y: int) -> bool { call_ret := cast(*bool) sys_call("AStarGrid2D", "is_in_bounds", 2522259332, bool, main.p_object, x, y); return call_ret.*; }  // 12
is_in_boundsv :: (main: *AStarGrid2D, id: Vector2i) -> bool { call_ret := cast(*bool) sys_call("AStarGrid2D", "is_in_boundsv", 3900751641, bool, main.p_object, id); return call_ret.*; }  // 13
is_dirty :: (main: *AStarGrid2D) -> bool { call_ret := cast(*bool) sys_call("AStarGrid2D", "is_dirty", 36873697, bool, main.p_object); return call_ret.*; }  // 14
update :: (main: *AStarGrid2D) { sys_call("AStarGrid2D", "update", 3218959716, Nil, main.p_object);  }  // 15
set_jumping_enabled :: (main: *AStarGrid2D, enabled: bool) { sys_call("AStarGrid2D", "set_jumping_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 16
is_jumping_enabled :: (main: *AStarGrid2D) -> bool { call_ret := cast(*bool) sys_call("AStarGrid2D", "is_jumping_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 17
set_diagonal_mode :: (main: *AStarGrid2D, mode: AStarGrid2D.DiagonalMode) { sys_call("AStarGrid2D", "set_diagonal_mode", 1017829798, Nil, main.p_object, mode);  }  // 18
get_diagonal_mode :: (main: *AStarGrid2D) -> AStarGrid2D.DiagonalMode { call_ret := cast(*AStarGrid2D.DiagonalMode) sys_call("AStarGrid2D", "get_diagonal_mode", 3129282674, AStarGrid2D.DiagonalMode, main.p_object); return call_ret.*; }  // 19
set_default_compute_heuristic :: (main: *AStarGrid2D, heuristic: AStarGrid2D.Heuristic) { sys_call("AStarGrid2D", "set_default_compute_heuristic", 1044375519, Nil, main.p_object, heuristic);  }  // 20
get_default_compute_heuristic :: (main: *AStarGrid2D) -> AStarGrid2D.Heuristic { call_ret := cast(*AStarGrid2D.Heuristic) sys_call("AStarGrid2D", "get_default_compute_heuristic", 2074731422, AStarGrid2D.Heuristic, main.p_object); return call_ret.*; }  // 21
set_default_estimate_heuristic :: (main: *AStarGrid2D, heuristic: AStarGrid2D.Heuristic) { sys_call("AStarGrid2D", "set_default_estimate_heuristic", 1044375519, Nil, main.p_object, heuristic);  }  // 22
get_default_estimate_heuristic :: (main: *AStarGrid2D) -> AStarGrid2D.Heuristic { call_ret := cast(*AStarGrid2D.Heuristic) sys_call("AStarGrid2D", "get_default_estimate_heuristic", 2074731422, AStarGrid2D.Heuristic, main.p_object); return call_ret.*; }  // 23
set_point_solid :: (main: *AStarGrid2D, id: Vector2i) { sys_call("AStarGrid2D", "set_point_solid", 1765703753, Nil, main.p_object, id);  }  // 24
is_point_solid :: (main: *AStarGrid2D, id: Vector2i) -> bool { call_ret := cast(*bool) sys_call("AStarGrid2D", "is_point_solid", 3900751641, bool, main.p_object, id); return call_ret.*; }  // 25
set_point_weight_scale :: (main: *AStarGrid2D, id: Vector2i, weight_scale: float) { sys_call("AStarGrid2D", "set_point_weight_scale", 2262553149, Nil, main.p_object, id, weight_scale);  }  // 26
get_point_weight_scale :: (main: *AStarGrid2D, id: Vector2i) -> float { call_ret := cast(*float) sys_call("AStarGrid2D", "get_point_weight_scale", 719993801, float, main.p_object, id); return call_ret.*; }  // 27
fill_solid_region :: (main: *AStarGrid2D, region: Rect2i) { sys_call("AStarGrid2D", "fill_solid_region", 2261970063, Nil, main.p_object, region);  }  // 28
fill_weight_scale_region :: (main: *AStarGrid2D, region: Rect2i, weight_scale: float) { sys_call("AStarGrid2D", "fill_weight_scale_region", 2793244083, Nil, main.p_object, region, weight_scale);  }  // 29
clear :: (main: *AStarGrid2D) { sys_call("AStarGrid2D", "clear", 3218959716, Nil, main.p_object);  }  // 30
get_point_position :: (main: *AStarGrid2D, id: Vector2i) -> Vector2 { call_ret := cast(*Vector2) sys_call("AStarGrid2D", "get_point_position", 108438297, Vector2, main.p_object, id); return call_ret.*; }  // 31
get_point_data_in_region :: (main: *AStarGrid2D, region: Rect2i) -> [] Dictionary { call_ret := cast(*[] Dictionary) sys_call("AStarGrid2D", "get_point_data_in_region", 3893818462, [] Dictionary, main.p_object, region); return call_ret.*; }  // 32
get_point_path :: (main: *AStarGrid2D, from_id: Vector2i, to_id: Vector2i) -> PackedVector2Array { call_ret := cast(*PackedVector2Array) sys_call("AStarGrid2D", "get_point_path", 1641925693, PackedVector2Array, main.p_object, from_id, to_id); return call_ret.*; }  // 33
get_id_path :: (main: *AStarGrid2D, from_id: Vector2i, to_id: Vector2i) -> [] Vector2i { call_ret := cast(*[] Vector2i) sys_call("AStarGrid2D", "get_id_path", 1918132273, [] Vector2i, main.p_object, from_id, to_id); return call_ret.*; }  // 34

get_ok_button :: (main: *AcceptDialog) -> *Button { call_ret := cast(*Button) sys_call("AcceptDialog", "get_ok_button", 1856205918, Button, main.p_object); return call_ret; }  // 0
get_label :: (main: *AcceptDialog) -> *Label { call_ret := cast(*Label) sys_call("AcceptDialog", "get_label", 566733104, Label, main.p_object); return call_ret; }  // 1
set_hide_on_ok :: (main: *AcceptDialog, enabled: bool) { sys_call("AcceptDialog", "set_hide_on_ok", 2586408642, Nil, main.p_object, enabled);  }  // 2
get_hide_on_ok :: (main: *AcceptDialog) -> bool { call_ret := cast(*bool) sys_call("AcceptDialog", "get_hide_on_ok", 36873697, bool, main.p_object); return call_ret.*; }  // 3
set_close_on_escape :: (main: *AcceptDialog, enabled: bool) { sys_call("AcceptDialog", "set_close_on_escape", 2586408642, Nil, main.p_object, enabled);  }  // 4
get_close_on_escape :: (main: *AcceptDialog) -> bool { call_ret := cast(*bool) sys_call("AcceptDialog", "get_close_on_escape", 36873697, bool, main.p_object); return call_ret.*; }  // 5
add_button :: (main: *AcceptDialog, text: string) -> *Button { call_ret := cast(*Button) sys_call("AcceptDialog", "add_button", 3328440682, Button, main.p_object, text); return call_ret; }  // 6
add_cancel_button :: (main: *AcceptDialog, name: string) -> *Button { call_ret := cast(*Button) sys_call("AcceptDialog", "add_cancel_button", 242045556, Button, main.p_object, name); return call_ret; }  // 7
remove_button :: (main: *AcceptDialog, button: Button) { sys_call("AcceptDialog", "remove_button", 2068354942, Nil, main.p_object, button);  }  // 8
register_text_enter :: (main: *AcceptDialog, line_edit: LineEdit) { sys_call("AcceptDialog", "register_text_enter", 3714008017, Nil, main.p_object, line_edit);  }  // 9
set_text :: (main: *AcceptDialog, text: string) { sys_call("AcceptDialog", "set_text", 83702148, Nil, main.p_object, text);  }  // 10
get_text :: (main: *AcceptDialog) -> gstring { call_ret := cast(*gstring) sys_call("AcceptDialog", "get_text", 201670096, gstring, main.p_object); return call_ret.*; }  // 11
set_autowrap :: (main: *AcceptDialog, autowrap: bool) { sys_call("AcceptDialog", "set_autowrap", 2586408642, Nil, main.p_object, autowrap);  }  // 12
has_autowrap :: (main: *AcceptDialog) -> bool { call_ret := cast(*bool) sys_call("AcceptDialog", "has_autowrap", 2240911060, bool, main.p_object); return call_ret.*; }  // 13
set_ok_button_text :: (main: *AcceptDialog, text: string) { sys_call("AcceptDialog", "set_ok_button_text", 83702148, Nil, main.p_object, text);  }  // 14
get_ok_button_text :: (main: *AcceptDialog) -> gstring { call_ret := cast(*gstring) sys_call("AcceptDialog", "get_ok_button_text", 201670096, gstring, main.p_object); return call_ret.*; }  // 15

set_sync_to_physics :: (main: *AnimatableBody2D, enable: bool) { sys_call("AnimatableBody2D", "set_sync_to_physics", 2586408642, Nil, main.p_object, enable);  }  // 0
is_sync_to_physics_enabled :: (main: *AnimatableBody2D) -> bool { call_ret := cast(*bool) sys_call("AnimatableBody2D", "is_sync_to_physics_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 1

set_sync_to_physics :: (main: *AnimatableBody3D, enable: bool) { sys_call("AnimatableBody3D", "set_sync_to_physics", 2586408642, Nil, main.p_object, enable);  }  // 0
is_sync_to_physics_enabled :: (main: *AnimatableBody3D) -> bool { call_ret := cast(*bool) sys_call("AnimatableBody3D", "is_sync_to_physics_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 1

set_sprite_frames :: (main: *AnimatedSprite2D, sprite_frames: SpriteFrames) { sys_call("AnimatedSprite2D", "set_sprite_frames", 905781144, Nil, main.p_object, sprite_frames);  }  // 0
get_sprite_frames :: (main: *AnimatedSprite2D) -> *SpriteFrames { call_ret := cast(*SpriteFrames) sys_call("AnimatedSprite2D", "get_sprite_frames", 3804851214, SpriteFrames, main.p_object); return call_ret; }  // 1
set_animation :: (main: *AnimatedSprite2D, name: string) { sys_call("AnimatedSprite2D", "set_animation", 3304788590, Nil, main.p_object, name);  }  // 2
get_animation :: (main: *AnimatedSprite2D) -> StringName { call_ret := cast(*StringName) sys_call("AnimatedSprite2D", "get_animation", 2002593661, StringName, main.p_object); return call_ret.*; }  // 3
set_autoplay :: (main: *AnimatedSprite2D, name: string) { sys_call("AnimatedSprite2D", "set_autoplay", 83702148, Nil, main.p_object, name);  }  // 4
get_autoplay :: (main: *AnimatedSprite2D) -> gstring { call_ret := cast(*gstring) sys_call("AnimatedSprite2D", "get_autoplay", 201670096, gstring, main.p_object); return call_ret.*; }  // 5
is_playing :: (main: *AnimatedSprite2D) -> bool { call_ret := cast(*bool) sys_call("AnimatedSprite2D", "is_playing", 36873697, bool, main.p_object); return call_ret.*; }  // 6
play :: (main: *AnimatedSprite2D) { sys_call("AnimatedSprite2D", "play", 3269405555, Nil, main.p_object);  }  // 7
play_backwards :: (main: *AnimatedSprite2D) { sys_call("AnimatedSprite2D", "play_backwards", 3323268493, Nil, main.p_object);  }  // 8
pause :: (main: *AnimatedSprite2D) { sys_call("AnimatedSprite2D", "pause", 3218959716, Nil, main.p_object);  }  // 9
stop :: (main: *AnimatedSprite2D) { sys_call("AnimatedSprite2D", "stop", 3218959716, Nil, main.p_object);  }  // 10
set_centered :: (main: *AnimatedSprite2D, centered: bool) { sys_call("AnimatedSprite2D", "set_centered", 2586408642, Nil, main.p_object, centered);  }  // 11
is_centered :: (main: *AnimatedSprite2D) -> bool { call_ret := cast(*bool) sys_call("AnimatedSprite2D", "is_centered", 36873697, bool, main.p_object); return call_ret.*; }  // 12
set_offset :: (main: *AnimatedSprite2D, offset: Vector2) { sys_call("AnimatedSprite2D", "set_offset", 743155724, Nil, main.p_object, offset);  }  // 13
get_offset :: (main: *AnimatedSprite2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("AnimatedSprite2D", "get_offset", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 14
set_flip_h :: (main: *AnimatedSprite2D, flip_h: bool) { sys_call("AnimatedSprite2D", "set_flip_h", 2586408642, Nil, main.p_object, flip_h);  }  // 15
is_flipped_h :: (main: *AnimatedSprite2D) -> bool { call_ret := cast(*bool) sys_call("AnimatedSprite2D", "is_flipped_h", 36873697, bool, main.p_object); return call_ret.*; }  // 16
set_flip_v :: (main: *AnimatedSprite2D, flip_v: bool) { sys_call("AnimatedSprite2D", "set_flip_v", 2586408642, Nil, main.p_object, flip_v);  }  // 17
is_flipped_v :: (main: *AnimatedSprite2D) -> bool { call_ret := cast(*bool) sys_call("AnimatedSprite2D", "is_flipped_v", 36873697, bool, main.p_object); return call_ret.*; }  // 18
set_frame :: (main: *AnimatedSprite2D, frame: int) { sys_call("AnimatedSprite2D", "set_frame", 1286410249, Nil, main.p_object, frame);  }  // 19
get_frame :: (main: *AnimatedSprite2D) -> int { call_ret := cast(*int) sys_call("AnimatedSprite2D", "get_frame", 3905245786, int, main.p_object); return call_ret.*; }  // 20
set_frame_progress :: (main: *AnimatedSprite2D, progress: float) { sys_call("AnimatedSprite2D", "set_frame_progress", 373806689, Nil, main.p_object, progress);  }  // 21
get_frame_progress :: (main: *AnimatedSprite2D) -> float { call_ret := cast(*float) sys_call("AnimatedSprite2D", "get_frame_progress", 1740695150, float, main.p_object); return call_ret.*; }  // 22
set_frame_and_progress :: (main: *AnimatedSprite2D, frame: int, progress: float) { sys_call("AnimatedSprite2D", "set_frame_and_progress", 1602489585, Nil, main.p_object, frame, progress);  }  // 23
set_speed_scale :: (main: *AnimatedSprite2D, speed_scale: float) { sys_call("AnimatedSprite2D", "set_speed_scale", 373806689, Nil, main.p_object, speed_scale);  }  // 24
get_speed_scale :: (main: *AnimatedSprite2D) -> float { call_ret := cast(*float) sys_call("AnimatedSprite2D", "get_speed_scale", 1740695150, float, main.p_object); return call_ret.*; }  // 25
get_playing_speed :: (main: *AnimatedSprite2D) -> float { call_ret := cast(*float) sys_call("AnimatedSprite2D", "get_playing_speed", 1740695150, float, main.p_object); return call_ret.*; }  // 26

set_sprite_frames :: (main: *AnimatedSprite3D, sprite_frames: SpriteFrames) { sys_call("AnimatedSprite3D", "set_sprite_frames", 905781144, Nil, main.p_object, sprite_frames);  }  // 0
get_sprite_frames :: (main: *AnimatedSprite3D) -> *SpriteFrames { call_ret := cast(*SpriteFrames) sys_call("AnimatedSprite3D", "get_sprite_frames", 3804851214, SpriteFrames, main.p_object); return call_ret; }  // 1
set_animation :: (main: *AnimatedSprite3D, name: string) { sys_call("AnimatedSprite3D", "set_animation", 3304788590, Nil, main.p_object, name);  }  // 2
get_animation :: (main: *AnimatedSprite3D) -> StringName { call_ret := cast(*StringName) sys_call("AnimatedSprite3D", "get_animation", 2002593661, StringName, main.p_object); return call_ret.*; }  // 3
set_autoplay :: (main: *AnimatedSprite3D, name: string) { sys_call("AnimatedSprite3D", "set_autoplay", 83702148, Nil, main.p_object, name);  }  // 4
get_autoplay :: (main: *AnimatedSprite3D) -> gstring { call_ret := cast(*gstring) sys_call("AnimatedSprite3D", "get_autoplay", 201670096, gstring, main.p_object); return call_ret.*; }  // 5
is_playing :: (main: *AnimatedSprite3D) -> bool { call_ret := cast(*bool) sys_call("AnimatedSprite3D", "is_playing", 36873697, bool, main.p_object); return call_ret.*; }  // 6
play :: (main: *AnimatedSprite3D) { sys_call("AnimatedSprite3D", "play", 3269405555, Nil, main.p_object);  }  // 7
play_backwards :: (main: *AnimatedSprite3D) { sys_call("AnimatedSprite3D", "play_backwards", 3323268493, Nil, main.p_object);  }  // 8
pause :: (main: *AnimatedSprite3D) { sys_call("AnimatedSprite3D", "pause", 3218959716, Nil, main.p_object);  }  // 9
stop :: (main: *AnimatedSprite3D) { sys_call("AnimatedSprite3D", "stop", 3218959716, Nil, main.p_object);  }  // 10
set_frame :: (main: *AnimatedSprite3D, frame: int) { sys_call("AnimatedSprite3D", "set_frame", 1286410249, Nil, main.p_object, frame);  }  // 11
get_frame :: (main: *AnimatedSprite3D) -> int { call_ret := cast(*int) sys_call("AnimatedSprite3D", "get_frame", 3905245786, int, main.p_object); return call_ret.*; }  // 12
set_frame_progress :: (main: *AnimatedSprite3D, progress: float) { sys_call("AnimatedSprite3D", "set_frame_progress", 373806689, Nil, main.p_object, progress);  }  // 13
get_frame_progress :: (main: *AnimatedSprite3D) -> float { call_ret := cast(*float) sys_call("AnimatedSprite3D", "get_frame_progress", 1740695150, float, main.p_object); return call_ret.*; }  // 14
set_frame_and_progress :: (main: *AnimatedSprite3D, frame: int, progress: float) { sys_call("AnimatedSprite3D", "set_frame_and_progress", 1602489585, Nil, main.p_object, frame, progress);  }  // 15
set_speed_scale :: (main: *AnimatedSprite3D, speed_scale: float) { sys_call("AnimatedSprite3D", "set_speed_scale", 373806689, Nil, main.p_object, speed_scale);  }  // 16
get_speed_scale :: (main: *AnimatedSprite3D) -> float { call_ret := cast(*float) sys_call("AnimatedSprite3D", "get_speed_scale", 1740695150, float, main.p_object); return call_ret.*; }  // 17
get_playing_speed :: (main: *AnimatedSprite3D) -> float { call_ret := cast(*float) sys_call("AnimatedSprite3D", "get_playing_speed", 1740695150, float, main.p_object); return call_ret.*; }  // 18

set_frames :: (main: *AnimatedTexture, frames: int) { sys_call("AnimatedTexture", "set_frames", 1286410249, Nil, main.p_object, frames);  }  // 0
get_frames :: (main: *AnimatedTexture) -> int { call_ret := cast(*int) sys_call("AnimatedTexture", "get_frames", 3905245786, int, main.p_object); return call_ret.*; }  // 1
set_current_frame :: (main: *AnimatedTexture, frame: int) { sys_call("AnimatedTexture", "set_current_frame", 1286410249, Nil, main.p_object, frame);  }  // 2
get_current_frame :: (main: *AnimatedTexture) -> int { call_ret := cast(*int) sys_call("AnimatedTexture", "get_current_frame", 3905245786, int, main.p_object); return call_ret.*; }  // 3
set_pause :: (main: *AnimatedTexture, pause: bool) { sys_call("AnimatedTexture", "set_pause", 2586408642, Nil, main.p_object, pause);  }  // 4
get_pause :: (main: *AnimatedTexture) -> bool { call_ret := cast(*bool) sys_call("AnimatedTexture", "get_pause", 36873697, bool, main.p_object); return call_ret.*; }  // 5
set_one_shot :: (main: *AnimatedTexture, one_shot: bool) { sys_call("AnimatedTexture", "set_one_shot", 2586408642, Nil, main.p_object, one_shot);  }  // 6
get_one_shot :: (main: *AnimatedTexture) -> bool { call_ret := cast(*bool) sys_call("AnimatedTexture", "get_one_shot", 36873697, bool, main.p_object); return call_ret.*; }  // 7
set_speed_scale :: (main: *AnimatedTexture, scale: float) { sys_call("AnimatedTexture", "set_speed_scale", 373806689, Nil, main.p_object, scale);  }  // 8
get_speed_scale :: (main: *AnimatedTexture) -> float { call_ret := cast(*float) sys_call("AnimatedTexture", "get_speed_scale", 1740695150, float, main.p_object); return call_ret.*; }  // 9
set_frame_texture :: (main: *AnimatedTexture, frame: int, texture: Texture2D) { sys_call("AnimatedTexture", "set_frame_texture", 666127730, Nil, main.p_object, frame, texture);  }  // 10
get_frame_texture :: (main: *AnimatedTexture, frame: int) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("AnimatedTexture", "get_frame_texture", 3536238170, Texture2D, main.p_object, frame); return call_ret; }  // 11
set_frame_duration :: (main: *AnimatedTexture, frame: int, duration: float) { sys_call("AnimatedTexture", "set_frame_duration", 1602489585, Nil, main.p_object, frame, duration);  }  // 12
get_frame_duration :: (main: *AnimatedTexture, frame: int) -> float { call_ret := cast(*float) sys_call("AnimatedTexture", "get_frame_duration", 2339986948, float, main.p_object, frame); return call_ret.*; }  // 13

add_track :: (main: *Animation, type: Animation.TrackType) -> int { call_ret := cast(*int) sys_call("Animation", "add_track", 3843682357, int, main.p_object, type); return call_ret.*; }  // 0
remove_track :: (main: *Animation, track_idx: int) { sys_call("Animation", "remove_track", 1286410249, Nil, main.p_object, track_idx);  }  // 1
get_track_count :: (main: *Animation) -> int { call_ret := cast(*int) sys_call("Animation", "get_track_count", 3905245786, int, main.p_object); return call_ret.*; }  // 2
track_get_type :: (main: *Animation, track_idx: int) -> Animation.TrackType { call_ret := cast(*Animation.TrackType) sys_call("Animation", "track_get_type", 3445944217, Animation.TrackType, main.p_object, track_idx); return call_ret.*; }  // 3
track_get_path :: (main: *Animation, track_idx: int) -> NodePath { call_ret := cast(*NodePath) sys_call("Animation", "track_get_path", 408788394, NodePath, main.p_object, track_idx); return call_ret.*; }  // 4
track_set_path :: (main: *Animation, track_idx: int, path: string) { sys_call("Animation", "track_set_path", 2761262315, Nil, main.p_object, track_idx, path);  }  // 5
find_track :: (main: *Animation, path: string, type: Animation.TrackType) -> int { call_ret := cast(*int) sys_call("Animation", "find_track", 245376003, int, main.p_object, path, type); return call_ret.*; }  // 6
track_move_up :: (main: *Animation, track_idx: int) { sys_call("Animation", "track_move_up", 1286410249, Nil, main.p_object, track_idx);  }  // 7
track_move_down :: (main: *Animation, track_idx: int) { sys_call("Animation", "track_move_down", 1286410249, Nil, main.p_object, track_idx);  }  // 8
track_move_to :: (main: *Animation, track_idx: int, to_idx: int) { sys_call("Animation", "track_move_to", 3937882851, Nil, main.p_object, track_idx, to_idx);  }  // 9
track_swap :: (main: *Animation, track_idx: int, with_idx: int) { sys_call("Animation", "track_swap", 3937882851, Nil, main.p_object, track_idx, with_idx);  }  // 10
track_set_imported :: (main: *Animation, track_idx: int, imported: bool) { sys_call("Animation", "track_set_imported", 300928843, Nil, main.p_object, track_idx, imported);  }  // 11
track_is_imported :: (main: *Animation, track_idx: int) -> bool { call_ret := cast(*bool) sys_call("Animation", "track_is_imported", 1116898809, bool, main.p_object, track_idx); return call_ret.*; }  // 12
track_set_enabled :: (main: *Animation, track_idx: int, enabled: bool) { sys_call("Animation", "track_set_enabled", 300928843, Nil, main.p_object, track_idx, enabled);  }  // 13
track_is_enabled :: (main: *Animation, track_idx: int) -> bool { call_ret := cast(*bool) sys_call("Animation", "track_is_enabled", 1116898809, bool, main.p_object, track_idx); return call_ret.*; }  // 14
position_track_insert_key :: (main: *Animation, track_idx: int, time: float, position: Vector3) -> int { call_ret := cast(*int) sys_call("Animation", "position_track_insert_key", 2540608232, int, main.p_object, track_idx, time, position); return call_ret.*; }  // 15
rotation_track_insert_key :: (main: *Animation, track_idx: int, time: float, rotation: Quaternion) -> int { call_ret := cast(*int) sys_call("Animation", "rotation_track_insert_key", 4165004800, int, main.p_object, track_idx, time, rotation); return call_ret.*; }  // 16
scale_track_insert_key :: (main: *Animation, track_idx: int, time: float, scale: Vector3) -> int { call_ret := cast(*int) sys_call("Animation", "scale_track_insert_key", 2540608232, int, main.p_object, track_idx, time, scale); return call_ret.*; }  // 17
blend_shape_track_insert_key :: (main: *Animation, track_idx: int, time: float, amount: float) -> int { call_ret := cast(*int) sys_call("Animation", "blend_shape_track_insert_key", 1534913637, int, main.p_object, track_idx, time, amount); return call_ret.*; }  // 18
position_track_interpolate :: (main: *Animation, track_idx: int, time_sec: float) -> Vector3 { call_ret := cast(*Vector3) sys_call("Animation", "position_track_interpolate", 3530011197, Vector3, main.p_object, track_idx, time_sec); return call_ret.*; }  // 19
rotation_track_interpolate :: (main: *Animation, track_idx: int, time_sec: float) -> Quaternion { call_ret := cast(*Quaternion) sys_call("Animation", "rotation_track_interpolate", 2915876792, Quaternion, main.p_object, track_idx, time_sec); return call_ret.*; }  // 20
scale_track_interpolate :: (main: *Animation, track_idx: int, time_sec: float) -> Vector3 { call_ret := cast(*Vector3) sys_call("Animation", "scale_track_interpolate", 3530011197, Vector3, main.p_object, track_idx, time_sec); return call_ret.*; }  // 21
blend_shape_track_interpolate :: (main: *Animation, track_idx: int, time_sec: float) -> float { call_ret := cast(*float) sys_call("Animation", "blend_shape_track_interpolate", 2482365182, float, main.p_object, track_idx, time_sec); return call_ret.*; }  // 22
track_insert_key :: (main: *Animation, track_idx: int, time: float, key: Variant) -> int { call_ret := cast(*int) sys_call("Animation", "track_insert_key", 808952278, int, main.p_object, track_idx, time, key); return call_ret.*; }  // 23
track_remove_key :: (main: *Animation, track_idx: int, key_idx: int) { sys_call("Animation", "track_remove_key", 3937882851, Nil, main.p_object, track_idx, key_idx);  }  // 24
track_remove_key_at_time :: (main: *Animation, track_idx: int, time: float) { sys_call("Animation", "track_remove_key_at_time", 1602489585, Nil, main.p_object, track_idx, time);  }  // 25
track_set_key_value :: (main: *Animation, track_idx: int, key: int, value: Variant) { sys_call("Animation", "track_set_key_value", 2060538656, Nil, main.p_object, track_idx, key, value);  }  // 26
track_set_key_transition :: (main: *Animation, track_idx: int, key_idx: int, transition: float) { sys_call("Animation", "track_set_key_transition", 3506521499, Nil, main.p_object, track_idx, key_idx, transition);  }  // 27
track_set_key_time :: (main: *Animation, track_idx: int, key_idx: int, time: float) { sys_call("Animation", "track_set_key_time", 3506521499, Nil, main.p_object, track_idx, key_idx, time);  }  // 28
track_get_key_transition :: (main: *Animation, track_idx: int, key_idx: int) -> float { call_ret := cast(*float) sys_call("Animation", "track_get_key_transition", 3085491603, float, main.p_object, track_idx, key_idx); return call_ret.*; }  // 29
track_get_key_count :: (main: *Animation, track_idx: int) -> int { call_ret := cast(*int) sys_call("Animation", "track_get_key_count", 923996154, int, main.p_object, track_idx); return call_ret.*; }  // 30
track_get_key_value :: (main: *Animation, track_idx: int, key_idx: int) -> Variant { call_ret := cast(*Variant) sys_call("Animation", "track_get_key_value", 678354945, Variant, main.p_object, track_idx, key_idx); return call_ret.*; }  // 31
track_get_key_time :: (main: *Animation, track_idx: int, key_idx: int) -> float { call_ret := cast(*float) sys_call("Animation", "track_get_key_time", 3085491603, float, main.p_object, track_idx, key_idx); return call_ret.*; }  // 32
track_find_key :: (main: *Animation, track_idx: int, time: float) -> int { call_ret := cast(*int) sys_call("Animation", "track_find_key", 4230953007, int, main.p_object, track_idx, time); return call_ret.*; }  // 33
track_set_interpolation_type :: (main: *Animation, track_idx: int, interpolation: Animation.InterpolationType) { sys_call("Animation", "track_set_interpolation_type", 4112932513, Nil, main.p_object, track_idx, interpolation);  }  // 34
track_get_interpolation_type :: (main: *Animation, track_idx: int) -> Animation.InterpolationType { call_ret := cast(*Animation.InterpolationType) sys_call("Animation", "track_get_interpolation_type", 1530756894, Animation.InterpolationType, main.p_object, track_idx); return call_ret.*; }  // 35
track_set_interpolation_loop_wrap :: (main: *Animation, track_idx: int, interpolation: bool) { sys_call("Animation", "track_set_interpolation_loop_wrap", 300928843, Nil, main.p_object, track_idx, interpolation);  }  // 36
track_get_interpolation_loop_wrap :: (main: *Animation, track_idx: int) -> bool { call_ret := cast(*bool) sys_call("Animation", "track_get_interpolation_loop_wrap", 1116898809, bool, main.p_object, track_idx); return call_ret.*; }  // 37
track_is_compressed :: (main: *Animation, track_idx: int) -> bool { call_ret := cast(*bool) sys_call("Animation", "track_is_compressed", 1116898809, bool, main.p_object, track_idx); return call_ret.*; }  // 38
value_track_set_update_mode :: (main: *Animation, track_idx: int, mode: Animation.UpdateMode) { sys_call("Animation", "value_track_set_update_mode", 2854058312, Nil, main.p_object, track_idx, mode);  }  // 39
value_track_get_update_mode :: (main: *Animation, track_idx: int) -> Animation.UpdateMode { call_ret := cast(*Animation.UpdateMode) sys_call("Animation", "value_track_get_update_mode", 1440326473, Animation.UpdateMode, main.p_object, track_idx); return call_ret.*; }  // 40
value_track_interpolate :: (main: *Animation, track_idx: int, time_sec: float) -> Variant { call_ret := cast(*Variant) sys_call("Animation", "value_track_interpolate", 747269075, Variant, main.p_object, track_idx, time_sec); return call_ret.*; }  // 41
method_track_get_name :: (main: *Animation, track_idx: int, key_idx: int) -> StringName { call_ret := cast(*StringName) sys_call("Animation", "method_track_get_name", 351665558, StringName, main.p_object, track_idx, key_idx); return call_ret.*; }  // 42
method_track_get_params :: (main: *Animation, track_idx: int, key_idx: int) -> Array { call_ret := cast(*Array) sys_call("Animation", "method_track_get_params", 2345056839, Array, main.p_object, track_idx, key_idx); return call_ret.*; }  // 43
bezier_track_insert_key :: (main: *Animation, track_idx: int, time: float, value: float) -> int { call_ret := cast(*int) sys_call("Animation", "bezier_track_insert_key", 3656773645, int, main.p_object, track_idx, time, value); return call_ret.*; }  // 44
bezier_track_set_key_value :: (main: *Animation, track_idx: int, key_idx: int, value: float) { sys_call("Animation", "bezier_track_set_key_value", 3506521499, Nil, main.p_object, track_idx, key_idx, value);  }  // 45
bezier_track_set_key_in_handle :: (main: *Animation, track_idx: int, key_idx: int, in_handle: Vector2) { sys_call("Animation", "bezier_track_set_key_in_handle", 1719223284, Nil, main.p_object, track_idx, key_idx, in_handle);  }  // 46
bezier_track_set_key_out_handle :: (main: *Animation, track_idx: int, key_idx: int, out_handle: Vector2) { sys_call("Animation", "bezier_track_set_key_out_handle", 1719223284, Nil, main.p_object, track_idx, key_idx, out_handle);  }  // 47
bezier_track_get_key_value :: (main: *Animation, track_idx: int, key_idx: int) -> float { call_ret := cast(*float) sys_call("Animation", "bezier_track_get_key_value", 3085491603, float, main.p_object, track_idx, key_idx); return call_ret.*; }  // 48
bezier_track_get_key_in_handle :: (main: *Animation, track_idx: int, key_idx: int) -> Vector2 { call_ret := cast(*Vector2) sys_call("Animation", "bezier_track_get_key_in_handle", 3016396712, Vector2, main.p_object, track_idx, key_idx); return call_ret.*; }  // 49
bezier_track_get_key_out_handle :: (main: *Animation, track_idx: int, key_idx: int) -> Vector2 { call_ret := cast(*Vector2) sys_call("Animation", "bezier_track_get_key_out_handle", 3016396712, Vector2, main.p_object, track_idx, key_idx); return call_ret.*; }  // 50
bezier_track_interpolate :: (main: *Animation, track_idx: int, time: float) -> float { call_ret := cast(*float) sys_call("Animation", "bezier_track_interpolate", 1900462983, float, main.p_object, track_idx, time); return call_ret.*; }  // 51
audio_track_insert_key :: (main: *Animation, track_idx: int, time: float, stream: Resource) -> int { call_ret := cast(*int) sys_call("Animation", "audio_track_insert_key", 4021027286, int, main.p_object, track_idx, time, stream); return call_ret.*; }  // 52
audio_track_set_key_stream :: (main: *Animation, track_idx: int, key_idx: int, stream: Resource) { sys_call("Animation", "audio_track_set_key_stream", 3886397084, Nil, main.p_object, track_idx, key_idx, stream);  }  // 53
audio_track_set_key_start_offset :: (main: *Animation, track_idx: int, key_idx: int, offset: float) { sys_call("Animation", "audio_track_set_key_start_offset", 3506521499, Nil, main.p_object, track_idx, key_idx, offset);  }  // 54
audio_track_set_key_end_offset :: (main: *Animation, track_idx: int, key_idx: int, offset: float) { sys_call("Animation", "audio_track_set_key_end_offset", 3506521499, Nil, main.p_object, track_idx, key_idx, offset);  }  // 55
audio_track_get_key_stream :: (main: *Animation, track_idx: int, key_idx: int) -> *Resource { call_ret := cast(*Resource) sys_call("Animation", "audio_track_get_key_stream", 635277205, Resource, main.p_object, track_idx, key_idx); return call_ret; }  // 56
audio_track_get_key_start_offset :: (main: *Animation, track_idx: int, key_idx: int) -> float { call_ret := cast(*float) sys_call("Animation", "audio_track_get_key_start_offset", 3085491603, float, main.p_object, track_idx, key_idx); return call_ret.*; }  // 57
audio_track_get_key_end_offset :: (main: *Animation, track_idx: int, key_idx: int) -> float { call_ret := cast(*float) sys_call("Animation", "audio_track_get_key_end_offset", 3085491603, float, main.p_object, track_idx, key_idx); return call_ret.*; }  // 58
audio_track_set_use_blend :: (main: *Animation, track_idx: int, enable: bool) { sys_call("Animation", "audio_track_set_use_blend", 300928843, Nil, main.p_object, track_idx, enable);  }  // 59
audio_track_is_use_blend :: (main: *Animation, track_idx: int) -> bool { call_ret := cast(*bool) sys_call("Animation", "audio_track_is_use_blend", 1116898809, bool, main.p_object, track_idx); return call_ret.*; }  // 60
animation_track_insert_key :: (main: *Animation, track_idx: int, time: float, animation: string) -> int { call_ret := cast(*int) sys_call("Animation", "animation_track_insert_key", 158676774, int, main.p_object, track_idx, time, animation); return call_ret.*; }  // 61
animation_track_set_key_animation :: (main: *Animation, track_idx: int, key_idx: int, animation: string) { sys_call("Animation", "animation_track_set_key_animation", 117615382, Nil, main.p_object, track_idx, key_idx, animation);  }  // 62
animation_track_get_key_animation :: (main: *Animation, track_idx: int, key_idx: int) -> StringName { call_ret := cast(*StringName) sys_call("Animation", "animation_track_get_key_animation", 351665558, StringName, main.p_object, track_idx, key_idx); return call_ret.*; }  // 63
add_marker :: (main: *Animation, name: string, time: float) { sys_call("Animation", "add_marker", 4135858297, Nil, main.p_object, name, time);  }  // 64
remove_marker :: (main: *Animation, name: string) { sys_call("Animation", "remove_marker", 3304788590, Nil, main.p_object, name);  }  // 65
has_marker :: (main: *Animation, name: string) -> bool { call_ret := cast(*bool) sys_call("Animation", "has_marker", 2619796661, bool, main.p_object, name); return call_ret.*; }  // 66
get_marker_at_time :: (main: *Animation, time: float) -> StringName { call_ret := cast(*StringName) sys_call("Animation", "get_marker_at_time", 4079494655, StringName, main.p_object, time); return call_ret.*; }  // 67
get_next_marker :: (main: *Animation, time: float) -> StringName { call_ret := cast(*StringName) sys_call("Animation", "get_next_marker", 4079494655, StringName, main.p_object, time); return call_ret.*; }  // 68
get_prev_marker :: (main: *Animation, time: float) -> StringName { call_ret := cast(*StringName) sys_call("Animation", "get_prev_marker", 4079494655, StringName, main.p_object, time); return call_ret.*; }  // 69
get_marker_time :: (main: *Animation, name: string) -> float { call_ret := cast(*float) sys_call("Animation", "get_marker_time", 2349060816, float, main.p_object, name); return call_ret.*; }  // 70
get_marker_names :: (main: *Animation) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("Animation", "get_marker_names", 1139954409, PackedStringArray, main.p_object); return call_ret.*; }  // 71
get_marker_color :: (main: *Animation, name: string) -> Color { call_ret := cast(*Color) sys_call("Animation", "get_marker_color", 3742943038, Color, main.p_object, name); return call_ret.*; }  // 72
set_marker_color :: (main: *Animation, name: string, color: Color) { sys_call("Animation", "set_marker_color", 4260178595, Nil, main.p_object, name, color);  }  // 73
set_length :: (main: *Animation, time_sec: float) { sys_call("Animation", "set_length", 373806689, Nil, main.p_object, time_sec);  }  // 74
get_length :: (main: *Animation) -> float { call_ret := cast(*float) sys_call("Animation", "get_length", 1740695150, float, main.p_object); return call_ret.*; }  // 75
set_loop_mode :: (main: *Animation, loop_mode: Animation.LoopMode) { sys_call("Animation", "set_loop_mode", 3155355575, Nil, main.p_object, loop_mode);  }  // 76
get_loop_mode :: (main: *Animation) -> Animation.LoopMode { call_ret := cast(*Animation.LoopMode) sys_call("Animation", "get_loop_mode", 1988889481, Animation.LoopMode, main.p_object); return call_ret.*; }  // 77
set_step :: (main: *Animation, size_sec: float) { sys_call("Animation", "set_step", 373806689, Nil, main.p_object, size_sec);  }  // 78
get_step :: (main: *Animation) -> float { call_ret := cast(*float) sys_call("Animation", "get_step", 1740695150, float, main.p_object); return call_ret.*; }  // 79
clear :: (main: *Animation) { sys_call("Animation", "clear", 3218959716, Nil, main.p_object);  }  // 80
copy_track :: (main: *Animation, track_idx: int, to_animation: Animation) { sys_call("Animation", "copy_track", 148001024, Nil, main.p_object, track_idx, to_animation);  }  // 81
optimize :: (main: *Animation) { sys_call("Animation", "optimize", 3303583852, Nil, main.p_object);  }  // 82
compress :: (main: *Animation) { sys_call("Animation", "compress", 3608408117, Nil, main.p_object);  }  // 83
is_capture_included :: (main: *Animation) -> bool { call_ret := cast(*bool) sys_call("Animation", "is_capture_included", 36873697, bool, main.p_object); return call_ret.*; }  // 84

add_animation :: (main: *AnimationLibrary, name: string, animation: Animation) -> Error { call_ret := cast(*Error) sys_call("AnimationLibrary", "add_animation", 1811855551, Error, main.p_object, name, animation); return call_ret.*; }  // 0
remove_animation :: (main: *AnimationLibrary, name: string) { sys_call("AnimationLibrary", "remove_animation", 3304788590, Nil, main.p_object, name);  }  // 1
rename_animation :: (main: *AnimationLibrary, name: string, newname: string) { sys_call("AnimationLibrary", "rename_animation", 3740211285, Nil, main.p_object, name, newname);  }  // 2
has_animation :: (main: *AnimationLibrary, name: string) -> bool { call_ret := cast(*bool) sys_call("AnimationLibrary", "has_animation", 2619796661, bool, main.p_object, name); return call_ret.*; }  // 3
get_animation :: (main: *AnimationLibrary, name: string) -> *Animation { call_ret := cast(*Animation) sys_call("AnimationLibrary", "get_animation", 2933122410, Animation, main.p_object, name); return call_ret; }  // 4
get_animation_list :: (main: *AnimationLibrary) -> [] StringName { call_ret := cast(*[] StringName) sys_call("AnimationLibrary", "get_animation_list", 3995934104, [] StringName, main.p_object); return call_ret.*; }  // 5
get_animation_list_size :: (main: *AnimationLibrary) -> int { call_ret := cast(*int) sys_call("AnimationLibrary", "get_animation_list_size", 3905245786, int, main.p_object); return call_ret.*; }  // 6

add_animation_library :: (main: *AnimationMixer, name: string, library: AnimationLibrary) -> Error { call_ret := cast(*Error) sys_call("AnimationMixer", "add_animation_library", 618909818, Error, main.p_object, name, library); return call_ret.*; }  // 1
remove_animation_library :: (main: *AnimationMixer, name: string) { sys_call("AnimationMixer", "remove_animation_library", 3304788590, Nil, main.p_object, name);  }  // 2
rename_animation_library :: (main: *AnimationMixer, name: string, newname: string) { sys_call("AnimationMixer", "rename_animation_library", 3740211285, Nil, main.p_object, name, newname);  }  // 3
has_animation_library :: (main: *AnimationMixer, name: string) -> bool { call_ret := cast(*bool) sys_call("AnimationMixer", "has_animation_library", 2619796661, bool, main.p_object, name); return call_ret.*; }  // 4
get_animation_library :: (main: *AnimationMixer, name: string) -> *AnimationLibrary { call_ret := cast(*AnimationLibrary) sys_call("AnimationMixer", "get_animation_library", 147342321, AnimationLibrary, main.p_object, name); return call_ret; }  // 5
get_animation_library_list :: (main: *AnimationMixer) -> [] StringName { call_ret := cast(*[] StringName) sys_call("AnimationMixer", "get_animation_library_list", 3995934104, [] StringName, main.p_object); return call_ret.*; }  // 6
has_animation :: (main: *AnimationMixer, name: string) -> bool { call_ret := cast(*bool) sys_call("AnimationMixer", "has_animation", 2619796661, bool, main.p_object, name); return call_ret.*; }  // 7
get_animation :: (main: *AnimationMixer, name: string) -> *Animation { call_ret := cast(*Animation) sys_call("AnimationMixer", "get_animation", 2933122410, Animation, main.p_object, name); return call_ret; }  // 8
get_animation_list :: (main: *AnimationMixer) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("AnimationMixer", "get_animation_list", 1139954409, PackedStringArray, main.p_object); return call_ret.*; }  // 9
set_active :: (main: *AnimationMixer, active: bool) { sys_call("AnimationMixer", "set_active", 2586408642, Nil, main.p_object, active);  }  // 10
is_active :: (main: *AnimationMixer) -> bool { call_ret := cast(*bool) sys_call("AnimationMixer", "is_active", 36873697, bool, main.p_object); return call_ret.*; }  // 11
set_deterministic :: (main: *AnimationMixer, deterministic: bool) { sys_call("AnimationMixer", "set_deterministic", 2586408642, Nil, main.p_object, deterministic);  }  // 12
is_deterministic :: (main: *AnimationMixer) -> bool { call_ret := cast(*bool) sys_call("AnimationMixer", "is_deterministic", 36873697, bool, main.p_object); return call_ret.*; }  // 13
set_root_node :: (main: *AnimationMixer, path: string) { sys_call("AnimationMixer", "set_root_node", 1348162250, Nil, main.p_object, path);  }  // 14
get_root_node :: (main: *AnimationMixer) -> NodePath { call_ret := cast(*NodePath) sys_call("AnimationMixer", "get_root_node", 4075236667, NodePath, main.p_object); return call_ret.*; }  // 15
set_callback_mode_process :: (main: *AnimationMixer, mode: AnimationMixer.AnimationCallbackModeProcess) { sys_call("AnimationMixer", "set_callback_mode_process", 2153733086, Nil, main.p_object, mode);  }  // 16
get_callback_mode_process :: (main: *AnimationMixer) -> AnimationMixer.AnimationCallbackModeProcess { call_ret := cast(*AnimationMixer.AnimationCallbackModeProcess) sys_call("AnimationMixer", "get_callback_mode_process", 1394468472, AnimationMixer.AnimationCallbackModeProcess, main.p_object); return call_ret.*; }  // 17
set_callback_mode_method :: (main: *AnimationMixer, mode: AnimationMixer.AnimationCallbackModeMethod) { sys_call("AnimationMixer", "set_callback_mode_method", 742218271, Nil, main.p_object, mode);  }  // 18
get_callback_mode_method :: (main: *AnimationMixer) -> AnimationMixer.AnimationCallbackModeMethod { call_ret := cast(*AnimationMixer.AnimationCallbackModeMethod) sys_call("AnimationMixer", "get_callback_mode_method", 489449656, AnimationMixer.AnimationCallbackModeMethod, main.p_object); return call_ret.*; }  // 19
set_callback_mode_discrete :: (main: *AnimationMixer, mode: AnimationMixer.AnimationCallbackModeDiscrete) { sys_call("AnimationMixer", "set_callback_mode_discrete", 1998944670, Nil, main.p_object, mode);  }  // 20
get_callback_mode_discrete :: (main: *AnimationMixer) -> AnimationMixer.AnimationCallbackModeDiscrete { call_ret := cast(*AnimationMixer.AnimationCallbackModeDiscrete) sys_call("AnimationMixer", "get_callback_mode_discrete", 3493168860, AnimationMixer.AnimationCallbackModeDiscrete, main.p_object); return call_ret.*; }  // 21
set_audio_max_polyphony :: (main: *AnimationMixer, max_polyphony: int) { sys_call("AnimationMixer", "set_audio_max_polyphony", 1286410249, Nil, main.p_object, max_polyphony);  }  // 22
get_audio_max_polyphony :: (main: *AnimationMixer) -> int { call_ret := cast(*int) sys_call("AnimationMixer", "get_audio_max_polyphony", 3905245786, int, main.p_object); return call_ret.*; }  // 23
set_root_motion_track :: (main: *AnimationMixer, path: string) { sys_call("AnimationMixer", "set_root_motion_track", 1348162250, Nil, main.p_object, path);  }  // 24
get_root_motion_track :: (main: *AnimationMixer) -> NodePath { call_ret := cast(*NodePath) sys_call("AnimationMixer", "get_root_motion_track", 4075236667, NodePath, main.p_object); return call_ret.*; }  // 25
set_root_motion_local :: (main: *AnimationMixer, enabled: bool) { sys_call("AnimationMixer", "set_root_motion_local", 2586408642, Nil, main.p_object, enabled);  }  // 26
is_root_motion_local :: (main: *AnimationMixer) -> bool { call_ret := cast(*bool) sys_call("AnimationMixer", "is_root_motion_local", 36873697, bool, main.p_object); return call_ret.*; }  // 27
get_root_motion_position :: (main: *AnimationMixer) -> Vector3 { call_ret := cast(*Vector3) sys_call("AnimationMixer", "get_root_motion_position", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 28
get_root_motion_rotation :: (main: *AnimationMixer) -> Quaternion { call_ret := cast(*Quaternion) sys_call("AnimationMixer", "get_root_motion_rotation", 1222331677, Quaternion, main.p_object); return call_ret.*; }  // 29
get_root_motion_scale :: (main: *AnimationMixer) -> Vector3 { call_ret := cast(*Vector3) sys_call("AnimationMixer", "get_root_motion_scale", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 30
get_root_motion_position_accumulator :: (main: *AnimationMixer) -> Vector3 { call_ret := cast(*Vector3) sys_call("AnimationMixer", "get_root_motion_position_accumulator", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 31
get_root_motion_rotation_accumulator :: (main: *AnimationMixer) -> Quaternion { call_ret := cast(*Quaternion) sys_call("AnimationMixer", "get_root_motion_rotation_accumulator", 1222331677, Quaternion, main.p_object); return call_ret.*; }  // 32
get_root_motion_scale_accumulator :: (main: *AnimationMixer) -> Vector3 { call_ret := cast(*Vector3) sys_call("AnimationMixer", "get_root_motion_scale_accumulator", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 33
clear_caches :: (main: *AnimationMixer) { sys_call("AnimationMixer", "clear_caches", 3218959716, Nil, main.p_object);  }  // 34
advance :: (main: *AnimationMixer, delta: float) { sys_call("AnimationMixer", "advance", 373806689, Nil, main.p_object, delta);  }  // 35
capture :: (main: *AnimationMixer, name: string, duration: float) { sys_call("AnimationMixer", "capture", 1333632127, Nil, main.p_object, name, duration);  }  // 36
set_reset_on_save_enabled :: (main: *AnimationMixer, enabled: bool) { sys_call("AnimationMixer", "set_reset_on_save_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 37
is_reset_on_save_enabled :: (main: *AnimationMixer) -> bool { call_ret := cast(*bool) sys_call("AnimationMixer", "is_reset_on_save_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 38
find_animation :: (main: *AnimationMixer, animation: Animation) -> StringName { call_ret := cast(*StringName) sys_call("AnimationMixer", "find_animation", 1559484580, StringName, main.p_object, animation); return call_ret.*; }  // 39
find_animation_library :: (main: *AnimationMixer, animation: Animation) -> StringName { call_ret := cast(*StringName) sys_call("AnimationMixer", "find_animation_library", 1559484580, StringName, main.p_object, animation); return call_ret.*; }  // 40

add_input :: (main: *AnimationNode, name: string) -> bool { call_ret := cast(*bool) sys_call("AnimationNode", "add_input", 2323990056, bool, main.p_object, name); return call_ret.*; }  // 8
remove_input :: (main: *AnimationNode, index: int) { sys_call("AnimationNode", "remove_input", 1286410249, Nil, main.p_object, index);  }  // 9
set_input_name :: (main: *AnimationNode, input: int, name: string) -> bool { call_ret := cast(*bool) sys_call("AnimationNode", "set_input_name", 215573526, bool, main.p_object, input, name); return call_ret.*; }  // 10
get_input_name :: (main: *AnimationNode, input: int) -> gstring { call_ret := cast(*gstring) sys_call("AnimationNode", "get_input_name", 844755477, gstring, main.p_object, input); return call_ret.*; }  // 11
get_input_count :: (main: *AnimationNode) -> int { call_ret := cast(*int) sys_call("AnimationNode", "get_input_count", 3905245786, int, main.p_object); return call_ret.*; }  // 12
find_input :: (main: *AnimationNode, name: string) -> int { call_ret := cast(*int) sys_call("AnimationNode", "find_input", 1321353865, int, main.p_object, name); return call_ret.*; }  // 13
set_filter_path :: (main: *AnimationNode, path: string, enable: bool) { sys_call("AnimationNode", "set_filter_path", 3868023870, Nil, main.p_object, path, enable);  }  // 14
is_path_filtered :: (main: *AnimationNode, path: string) -> bool { call_ret := cast(*bool) sys_call("AnimationNode", "is_path_filtered", 861721659, bool, main.p_object, path); return call_ret.*; }  // 15
set_filter_enabled :: (main: *AnimationNode, enable: bool) { sys_call("AnimationNode", "set_filter_enabled", 2586408642, Nil, main.p_object, enable);  }  // 16
is_filter_enabled :: (main: *AnimationNode) -> bool { call_ret := cast(*bool) sys_call("AnimationNode", "is_filter_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 17
get_processing_animation_tree_instance_id :: (main: *AnimationNode) -> int { call_ret := cast(*int) sys_call("AnimationNode", "get_processing_animation_tree_instance_id", 3905245786, int, main.p_object); return call_ret.*; }  // 18
is_process_testing :: (main: *AnimationNode) -> bool { call_ret := cast(*bool) sys_call("AnimationNode", "is_process_testing", 36873697, bool, main.p_object); return call_ret.*; }  // 19
blend_animation :: (main: *AnimationNode, animation: string, time: float, delta: float, seeked: bool, is_external_seeking: bool, blend: float) { sys_call("AnimationNode", "blend_animation", 1630801826, Nil, main.p_object, animation, time, delta, seeked, is_external_seeking, blend);  }  // 20
blend_node :: (main: *AnimationNode, name: string, node: AnimationNode, time: float, seek: bool, is_external_seeking: bool, blend: float) -> float { call_ret := cast(*float) sys_call("AnimationNode", "blend_node", 1746075988, float, main.p_object, name, node, time, seek, is_external_seeking, blend); return call_ret.*; }  // 21
blend_input :: (main: *AnimationNode, input_index: int, time: float, seek: bool, is_external_seeking: bool, blend: float) -> float { call_ret := cast(*float) sys_call("AnimationNode", "blend_input", 1361527350, float, main.p_object, input_index, time, seek, is_external_seeking, blend); return call_ret.*; }  // 22
set_parameter :: (main: *AnimationNode, name: string, value: Variant) { sys_call("AnimationNode", "set_parameter", 3776071444, Nil, main.p_object, name, value);  }  // 23
get_parameter :: (main: *AnimationNode, name: string) -> Variant { call_ret := cast(*Variant) sys_call("AnimationNode", "get_parameter", 2760726917, Variant, main.p_object, name); return call_ret.*; }  // 24



set_animation :: (main: *AnimationNodeAnimation, name: string) { sys_call("AnimationNodeAnimation", "set_animation", 3304788590, Nil, main.p_object, name);  }  // 0
get_animation :: (main: *AnimationNodeAnimation) -> StringName { call_ret := cast(*StringName) sys_call("AnimationNodeAnimation", "get_animation", 2002593661, StringName, main.p_object); return call_ret.*; }  // 1
set_play_mode :: (main: *AnimationNodeAnimation, mode: AnimationNodeAnimation.PlayMode) { sys_call("AnimationNodeAnimation", "set_play_mode", 3347718873, Nil, main.p_object, mode);  }  // 2
get_play_mode :: (main: *AnimationNodeAnimation) -> AnimationNodeAnimation.PlayMode { call_ret := cast(*AnimationNodeAnimation.PlayMode) sys_call("AnimationNodeAnimation", "get_play_mode", 2061244637, AnimationNodeAnimation.PlayMode, main.p_object); return call_ret.*; }  // 3
set_advance_on_start :: (main: *AnimationNodeAnimation, advance_on_start: bool) { sys_call("AnimationNodeAnimation", "set_advance_on_start", 2586408642, Nil, main.p_object, advance_on_start);  }  // 4
is_advance_on_start :: (main: *AnimationNodeAnimation) -> bool { call_ret := cast(*bool) sys_call("AnimationNodeAnimation", "is_advance_on_start", 36873697, bool, main.p_object); return call_ret.*; }  // 5
set_use_custom_timeline :: (main: *AnimationNodeAnimation, use_custom_timeline: bool) { sys_call("AnimationNodeAnimation", "set_use_custom_timeline", 2586408642, Nil, main.p_object, use_custom_timeline);  }  // 6
is_using_custom_timeline :: (main: *AnimationNodeAnimation) -> bool { call_ret := cast(*bool) sys_call("AnimationNodeAnimation", "is_using_custom_timeline", 36873697, bool, main.p_object); return call_ret.*; }  // 7
set_timeline_length :: (main: *AnimationNodeAnimation, timeline_length: float) { sys_call("AnimationNodeAnimation", "set_timeline_length", 373806689, Nil, main.p_object, timeline_length);  }  // 8
get_timeline_length :: (main: *AnimationNodeAnimation) -> float { call_ret := cast(*float) sys_call("AnimationNodeAnimation", "get_timeline_length", 1740695150, float, main.p_object); return call_ret.*; }  // 9
set_stretch_time_scale :: (main: *AnimationNodeAnimation, stretch_time_scale: bool) { sys_call("AnimationNodeAnimation", "set_stretch_time_scale", 2586408642, Nil, main.p_object, stretch_time_scale);  }  // 10
is_stretching_time_scale :: (main: *AnimationNodeAnimation) -> bool { call_ret := cast(*bool) sys_call("AnimationNodeAnimation", "is_stretching_time_scale", 36873697, bool, main.p_object); return call_ret.*; }  // 11
set_start_offset :: (main: *AnimationNodeAnimation, start_offset: float) { sys_call("AnimationNodeAnimation", "set_start_offset", 373806689, Nil, main.p_object, start_offset);  }  // 12
get_start_offset :: (main: *AnimationNodeAnimation) -> float { call_ret := cast(*float) sys_call("AnimationNodeAnimation", "get_start_offset", 1740695150, float, main.p_object); return call_ret.*; }  // 13
set_loop_mode :: (main: *AnimationNodeAnimation, loop_mode: Animation.LoopMode) { sys_call("AnimationNodeAnimation", "set_loop_mode", 3155355575, Nil, main.p_object, loop_mode);  }  // 14
get_loop_mode :: (main: *AnimationNodeAnimation) -> Animation.LoopMode { call_ret := cast(*Animation.LoopMode) sys_call("AnimationNodeAnimation", "get_loop_mode", 1988889481, Animation.LoopMode, main.p_object); return call_ret.*; }  // 15



add_blend_point :: (main: *AnimationNodeBlendSpace1D, node: AnimationRootNode, pos: float) { sys_call("AnimationNodeBlendSpace1D", "add_blend_point", 285050433, Nil, main.p_object, node, pos);  }  // 0
set_blend_point_position :: (main: *AnimationNodeBlendSpace1D, point: int, pos: float) { sys_call("AnimationNodeBlendSpace1D", "set_blend_point_position", 1602489585, Nil, main.p_object, point, pos);  }  // 1
get_blend_point_position :: (main: *AnimationNodeBlendSpace1D, point: int) -> float { call_ret := cast(*float) sys_call("AnimationNodeBlendSpace1D", "get_blend_point_position", 2339986948, float, main.p_object, point); return call_ret.*; }  // 2
set_blend_point_node :: (main: *AnimationNodeBlendSpace1D, point: int, node: AnimationRootNode) { sys_call("AnimationNodeBlendSpace1D", "set_blend_point_node", 4240341528, Nil, main.p_object, point, node);  }  // 3
get_blend_point_node :: (main: *AnimationNodeBlendSpace1D, point: int) -> *AnimationRootNode { call_ret := cast(*AnimationRootNode) sys_call("AnimationNodeBlendSpace1D", "get_blend_point_node", 665599029, AnimationRootNode, main.p_object, point); return call_ret; }  // 4
remove_blend_point :: (main: *AnimationNodeBlendSpace1D, point: int) { sys_call("AnimationNodeBlendSpace1D", "remove_blend_point", 1286410249, Nil, main.p_object, point);  }  // 5
get_blend_point_count :: (main: *AnimationNodeBlendSpace1D) -> int { call_ret := cast(*int) sys_call("AnimationNodeBlendSpace1D", "get_blend_point_count", 3905245786, int, main.p_object); return call_ret.*; }  // 6
set_min_space :: (main: *AnimationNodeBlendSpace1D, min_space: float) { sys_call("AnimationNodeBlendSpace1D", "set_min_space", 373806689, Nil, main.p_object, min_space);  }  // 7
get_min_space :: (main: *AnimationNodeBlendSpace1D) -> float { call_ret := cast(*float) sys_call("AnimationNodeBlendSpace1D", "get_min_space", 1740695150, float, main.p_object); return call_ret.*; }  // 8
set_max_space :: (main: *AnimationNodeBlendSpace1D, max_space: float) { sys_call("AnimationNodeBlendSpace1D", "set_max_space", 373806689, Nil, main.p_object, max_space);  }  // 9
get_max_space :: (main: *AnimationNodeBlendSpace1D) -> float { call_ret := cast(*float) sys_call("AnimationNodeBlendSpace1D", "get_max_space", 1740695150, float, main.p_object); return call_ret.*; }  // 10
set_snap :: (main: *AnimationNodeBlendSpace1D, snap: float) { sys_call("AnimationNodeBlendSpace1D", "set_snap", 373806689, Nil, main.p_object, snap);  }  // 11
get_snap :: (main: *AnimationNodeBlendSpace1D) -> float { call_ret := cast(*float) sys_call("AnimationNodeBlendSpace1D", "get_snap", 1740695150, float, main.p_object); return call_ret.*; }  // 12
set_value_label :: (main: *AnimationNodeBlendSpace1D, text: string) { sys_call("AnimationNodeBlendSpace1D", "set_value_label", 83702148, Nil, main.p_object, text);  }  // 13
get_value_label :: (main: *AnimationNodeBlendSpace1D) -> gstring { call_ret := cast(*gstring) sys_call("AnimationNodeBlendSpace1D", "get_value_label", 201670096, gstring, main.p_object); return call_ret.*; }  // 14
set_blend_mode :: (main: *AnimationNodeBlendSpace1D, mode: AnimationNodeBlendSpace1D.BlendMode) { sys_call("AnimationNodeBlendSpace1D", "set_blend_mode", 2600869457, Nil, main.p_object, mode);  }  // 15
get_blend_mode :: (main: *AnimationNodeBlendSpace1D) -> AnimationNodeBlendSpace1D.BlendMode { call_ret := cast(*AnimationNodeBlendSpace1D.BlendMode) sys_call("AnimationNodeBlendSpace1D", "get_blend_mode", 1547667849, AnimationNodeBlendSpace1D.BlendMode, main.p_object); return call_ret.*; }  // 16
set_use_sync :: (main: *AnimationNodeBlendSpace1D, enable: bool) { sys_call("AnimationNodeBlendSpace1D", "set_use_sync", 2586408642, Nil, main.p_object, enable);  }  // 17
is_using_sync :: (main: *AnimationNodeBlendSpace1D) -> bool { call_ret := cast(*bool) sys_call("AnimationNodeBlendSpace1D", "is_using_sync", 36873697, bool, main.p_object); return call_ret.*; }  // 18

add_blend_point :: (main: *AnimationNodeBlendSpace2D, node: AnimationRootNode, pos: Vector2) { sys_call("AnimationNodeBlendSpace2D", "add_blend_point", 402261981, Nil, main.p_object, node, pos);  }  // 0
set_blend_point_position :: (main: *AnimationNodeBlendSpace2D, point: int, pos: Vector2) { sys_call("AnimationNodeBlendSpace2D", "set_blend_point_position", 163021252, Nil, main.p_object, point, pos);  }  // 1
get_blend_point_position :: (main: *AnimationNodeBlendSpace2D, point: int) -> Vector2 { call_ret := cast(*Vector2) sys_call("AnimationNodeBlendSpace2D", "get_blend_point_position", 2299179447, Vector2, main.p_object, point); return call_ret.*; }  // 2
set_blend_point_node :: (main: *AnimationNodeBlendSpace2D, point: int, node: AnimationRootNode) { sys_call("AnimationNodeBlendSpace2D", "set_blend_point_node", 4240341528, Nil, main.p_object, point, node);  }  // 3
get_blend_point_node :: (main: *AnimationNodeBlendSpace2D, point: int) -> *AnimationRootNode { call_ret := cast(*AnimationRootNode) sys_call("AnimationNodeBlendSpace2D", "get_blend_point_node", 665599029, AnimationRootNode, main.p_object, point); return call_ret; }  // 4
remove_blend_point :: (main: *AnimationNodeBlendSpace2D, point: int) { sys_call("AnimationNodeBlendSpace2D", "remove_blend_point", 1286410249, Nil, main.p_object, point);  }  // 5
get_blend_point_count :: (main: *AnimationNodeBlendSpace2D) -> int { call_ret := cast(*int) sys_call("AnimationNodeBlendSpace2D", "get_blend_point_count", 3905245786, int, main.p_object); return call_ret.*; }  // 6
add_triangle :: (main: *AnimationNodeBlendSpace2D, x: int, y: int, z: int) { sys_call("AnimationNodeBlendSpace2D", "add_triangle", 753017335, Nil, main.p_object, x, y, z);  }  // 7
get_triangle_point :: (main: *AnimationNodeBlendSpace2D, triangle: int, point: int) -> int { call_ret := cast(*int) sys_call("AnimationNodeBlendSpace2D", "get_triangle_point", 50157827, int, main.p_object, triangle, point); return call_ret.*; }  // 8
remove_triangle :: (main: *AnimationNodeBlendSpace2D, triangle: int) { sys_call("AnimationNodeBlendSpace2D", "remove_triangle", 1286410249, Nil, main.p_object, triangle);  }  // 9
get_triangle_count :: (main: *AnimationNodeBlendSpace2D) -> int { call_ret := cast(*int) sys_call("AnimationNodeBlendSpace2D", "get_triangle_count", 3905245786, int, main.p_object); return call_ret.*; }  // 10
set_min_space :: (main: *AnimationNodeBlendSpace2D, min_space: Vector2) { sys_call("AnimationNodeBlendSpace2D", "set_min_space", 743155724, Nil, main.p_object, min_space);  }  // 11
get_min_space :: (main: *AnimationNodeBlendSpace2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("AnimationNodeBlendSpace2D", "get_min_space", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 12
set_max_space :: (main: *AnimationNodeBlendSpace2D, max_space: Vector2) { sys_call("AnimationNodeBlendSpace2D", "set_max_space", 743155724, Nil, main.p_object, max_space);  }  // 13
get_max_space :: (main: *AnimationNodeBlendSpace2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("AnimationNodeBlendSpace2D", "get_max_space", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 14
set_snap :: (main: *AnimationNodeBlendSpace2D, snap: Vector2) { sys_call("AnimationNodeBlendSpace2D", "set_snap", 743155724, Nil, main.p_object, snap);  }  // 15
get_snap :: (main: *AnimationNodeBlendSpace2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("AnimationNodeBlendSpace2D", "get_snap", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 16
set_x_label :: (main: *AnimationNodeBlendSpace2D, text: string) { sys_call("AnimationNodeBlendSpace2D", "set_x_label", 83702148, Nil, main.p_object, text);  }  // 17
get_x_label :: (main: *AnimationNodeBlendSpace2D) -> gstring { call_ret := cast(*gstring) sys_call("AnimationNodeBlendSpace2D", "get_x_label", 201670096, gstring, main.p_object); return call_ret.*; }  // 18
set_y_label :: (main: *AnimationNodeBlendSpace2D, text: string) { sys_call("AnimationNodeBlendSpace2D", "set_y_label", 83702148, Nil, main.p_object, text);  }  // 19
get_y_label :: (main: *AnimationNodeBlendSpace2D) -> gstring { call_ret := cast(*gstring) sys_call("AnimationNodeBlendSpace2D", "get_y_label", 201670096, gstring, main.p_object); return call_ret.*; }  // 20
set_auto_triangles :: (main: *AnimationNodeBlendSpace2D, enable: bool) { sys_call("AnimationNodeBlendSpace2D", "set_auto_triangles", 2586408642, Nil, main.p_object, enable);  }  // 21
get_auto_triangles :: (main: *AnimationNodeBlendSpace2D) -> bool { call_ret := cast(*bool) sys_call("AnimationNodeBlendSpace2D", "get_auto_triangles", 36873697, bool, main.p_object); return call_ret.*; }  // 22
set_blend_mode :: (main: *AnimationNodeBlendSpace2D, mode: AnimationNodeBlendSpace2D.BlendMode) { sys_call("AnimationNodeBlendSpace2D", "set_blend_mode", 81193520, Nil, main.p_object, mode);  }  // 23
get_blend_mode :: (main: *AnimationNodeBlendSpace2D) -> AnimationNodeBlendSpace2D.BlendMode { call_ret := cast(*AnimationNodeBlendSpace2D.BlendMode) sys_call("AnimationNodeBlendSpace2D", "get_blend_mode", 1398433632, AnimationNodeBlendSpace2D.BlendMode, main.p_object); return call_ret.*; }  // 24
set_use_sync :: (main: *AnimationNodeBlendSpace2D, enable: bool) { sys_call("AnimationNodeBlendSpace2D", "set_use_sync", 2586408642, Nil, main.p_object, enable);  }  // 25
is_using_sync :: (main: *AnimationNodeBlendSpace2D) -> bool { call_ret := cast(*bool) sys_call("AnimationNodeBlendSpace2D", "is_using_sync", 36873697, bool, main.p_object); return call_ret.*; }  // 26

add_node :: (main: *AnimationNodeBlendTree, name: string, node: AnimationNode) { sys_call("AnimationNodeBlendTree", "add_node", 1980270704, Nil, main.p_object, name, node);  }  // 0
get_node :: (main: *AnimationNodeBlendTree, name: string) -> *AnimationNode { call_ret := cast(*AnimationNode) sys_call("AnimationNodeBlendTree", "get_node", 625644256, AnimationNode, main.p_object, name); return call_ret; }  // 1
remove_node :: (main: *AnimationNodeBlendTree, name: string) { sys_call("AnimationNodeBlendTree", "remove_node", 3304788590, Nil, main.p_object, name);  }  // 2
rename_node :: (main: *AnimationNodeBlendTree, name: string, new_name: string) { sys_call("AnimationNodeBlendTree", "rename_node", 3740211285, Nil, main.p_object, name, new_name);  }  // 3
has_node :: (main: *AnimationNodeBlendTree, name: string) -> bool { call_ret := cast(*bool) sys_call("AnimationNodeBlendTree", "has_node", 2619796661, bool, main.p_object, name); return call_ret.*; }  // 4
connect_node :: (main: *AnimationNodeBlendTree, input_node: string, input_index: int, output_node: string) { sys_call("AnimationNodeBlendTree", "connect_node", 2168001410, Nil, main.p_object, input_node, input_index, output_node);  }  // 5
disconnect_node :: (main: *AnimationNodeBlendTree, input_node: string, input_index: int) { sys_call("AnimationNodeBlendTree", "disconnect_node", 2415702435, Nil, main.p_object, input_node, input_index);  }  // 6
set_node_position :: (main: *AnimationNodeBlendTree, name: string, position: Vector2) { sys_call("AnimationNodeBlendTree", "set_node_position", 1999414630, Nil, main.p_object, name, position);  }  // 7
get_node_position :: (main: *AnimationNodeBlendTree, name: string) -> Vector2 { call_ret := cast(*Vector2) sys_call("AnimationNodeBlendTree", "get_node_position", 3100822709, Vector2, main.p_object, name); return call_ret.*; }  // 8
set_graph_offset :: (main: *AnimationNodeBlendTree, offset: Vector2) { sys_call("AnimationNodeBlendTree", "set_graph_offset", 743155724, Nil, main.p_object, offset);  }  // 9
get_graph_offset :: (main: *AnimationNodeBlendTree) -> Vector2 { call_ret := cast(*Vector2) sys_call("AnimationNodeBlendTree", "get_graph_offset", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 10

is_looping :: (main: *AnimationNodeExtension, node_info: PackedFloat32Array) -> bool { call_ret := cast(*bool) sys_call("AnimationNodeExtension", "is_looping", 2035584311, bool, main.p_object, node_info); return call_ret.*; }  // 1
get_remaining_time :: (main: *AnimationNodeExtension, node_info: PackedFloat32Array, break_loop: bool) -> float { call_ret := cast(*float) sys_call("AnimationNodeExtension", "get_remaining_time", 2851904656, float, main.p_object, node_info, break_loop); return call_ret.*; }  // 2

set_fadein_time :: (main: *AnimationNodeOneShot, time: float) { sys_call("AnimationNodeOneShot", "set_fadein_time", 373806689, Nil, main.p_object, time);  }  // 0
get_fadein_time :: (main: *AnimationNodeOneShot) -> float { call_ret := cast(*float) sys_call("AnimationNodeOneShot", "get_fadein_time", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_fadein_curve :: (main: *AnimationNodeOneShot, curve: Curve) { sys_call("AnimationNodeOneShot", "set_fadein_curve", 270443179, Nil, main.p_object, curve);  }  // 2
get_fadein_curve :: (main: *AnimationNodeOneShot) -> *Curve { call_ret := cast(*Curve) sys_call("AnimationNodeOneShot", "get_fadein_curve", 2460114913, Curve, main.p_object); return call_ret; }  // 3
set_fadeout_time :: (main: *AnimationNodeOneShot, time: float) { sys_call("AnimationNodeOneShot", "set_fadeout_time", 373806689, Nil, main.p_object, time);  }  // 4
get_fadeout_time :: (main: *AnimationNodeOneShot) -> float { call_ret := cast(*float) sys_call("AnimationNodeOneShot", "get_fadeout_time", 1740695150, float, main.p_object); return call_ret.*; }  // 5
set_fadeout_curve :: (main: *AnimationNodeOneShot, curve: Curve) { sys_call("AnimationNodeOneShot", "set_fadeout_curve", 270443179, Nil, main.p_object, curve);  }  // 6
get_fadeout_curve :: (main: *AnimationNodeOneShot) -> *Curve { call_ret := cast(*Curve) sys_call("AnimationNodeOneShot", "get_fadeout_curve", 2460114913, Curve, main.p_object); return call_ret; }  // 7
set_break_loop_at_end :: (main: *AnimationNodeOneShot, enable: bool) { sys_call("AnimationNodeOneShot", "set_break_loop_at_end", 2586408642, Nil, main.p_object, enable);  }  // 8
is_loop_broken_at_end :: (main: *AnimationNodeOneShot) -> bool { call_ret := cast(*bool) sys_call("AnimationNodeOneShot", "is_loop_broken_at_end", 36873697, bool, main.p_object); return call_ret.*; }  // 9
set_autorestart :: (main: *AnimationNodeOneShot, active: bool) { sys_call("AnimationNodeOneShot", "set_autorestart", 2586408642, Nil, main.p_object, active);  }  // 10
has_autorestart :: (main: *AnimationNodeOneShot) -> bool { call_ret := cast(*bool) sys_call("AnimationNodeOneShot", "has_autorestart", 36873697, bool, main.p_object); return call_ret.*; }  // 11
set_autorestart_delay :: (main: *AnimationNodeOneShot, time: float) { sys_call("AnimationNodeOneShot", "set_autorestart_delay", 373806689, Nil, main.p_object, time);  }  // 12
get_autorestart_delay :: (main: *AnimationNodeOneShot) -> float { call_ret := cast(*float) sys_call("AnimationNodeOneShot", "get_autorestart_delay", 1740695150, float, main.p_object); return call_ret.*; }  // 13
set_autorestart_random_delay :: (main: *AnimationNodeOneShot, time: float) { sys_call("AnimationNodeOneShot", "set_autorestart_random_delay", 373806689, Nil, main.p_object, time);  }  // 14
get_autorestart_random_delay :: (main: *AnimationNodeOneShot) -> float { call_ret := cast(*float) sys_call("AnimationNodeOneShot", "get_autorestart_random_delay", 1740695150, float, main.p_object); return call_ret.*; }  // 15
set_mix_mode :: (main: *AnimationNodeOneShot, mode: AnimationNodeOneShot.MixMode) { sys_call("AnimationNodeOneShot", "set_mix_mode", 1018899799, Nil, main.p_object, mode);  }  // 16
get_mix_mode :: (main: *AnimationNodeOneShot) -> AnimationNodeOneShot.MixMode { call_ret := cast(*AnimationNodeOneShot.MixMode) sys_call("AnimationNodeOneShot", "get_mix_mode", 3076550526, AnimationNodeOneShot.MixMode, main.p_object); return call_ret.*; }  // 17


add_node :: (main: *AnimationNodeStateMachine, name: string, node: AnimationNode) { sys_call("AnimationNodeStateMachine", "add_node", 1980270704, Nil, main.p_object, name, node);  }  // 0
replace_node :: (main: *AnimationNodeStateMachine, name: string, node: AnimationNode) { sys_call("AnimationNodeStateMachine", "replace_node", 2559412862, Nil, main.p_object, name, node);  }  // 1
get_node :: (main: *AnimationNodeStateMachine, name: string) -> *AnimationNode { call_ret := cast(*AnimationNode) sys_call("AnimationNodeStateMachine", "get_node", 625644256, AnimationNode, main.p_object, name); return call_ret; }  // 2
remove_node :: (main: *AnimationNodeStateMachine, name: string) { sys_call("AnimationNodeStateMachine", "remove_node", 3304788590, Nil, main.p_object, name);  }  // 3
rename_node :: (main: *AnimationNodeStateMachine, name: string, new_name: string) { sys_call("AnimationNodeStateMachine", "rename_node", 3740211285, Nil, main.p_object, name, new_name);  }  // 4
has_node :: (main: *AnimationNodeStateMachine, name: string) -> bool { call_ret := cast(*bool) sys_call("AnimationNodeStateMachine", "has_node", 2619796661, bool, main.p_object, name); return call_ret.*; }  // 5
get_node_name :: (main: *AnimationNodeStateMachine, node: AnimationNode) -> StringName { call_ret := cast(*StringName) sys_call("AnimationNodeStateMachine", "get_node_name", 739213945, StringName, main.p_object, node); return call_ret.*; }  // 6
set_node_position :: (main: *AnimationNodeStateMachine, name: string, position: Vector2) { sys_call("AnimationNodeStateMachine", "set_node_position", 1999414630, Nil, main.p_object, name, position);  }  // 7
get_node_position :: (main: *AnimationNodeStateMachine, name: string) -> Vector2 { call_ret := cast(*Vector2) sys_call("AnimationNodeStateMachine", "get_node_position", 3100822709, Vector2, main.p_object, name); return call_ret.*; }  // 8
has_transition :: (main: *AnimationNodeStateMachine, from: string, to: string) -> bool { call_ret := cast(*bool) sys_call("AnimationNodeStateMachine", "has_transition", 471820014, bool, main.p_object, from, to); return call_ret.*; }  // 9
add_transition :: (main: *AnimationNodeStateMachine, from: string, to: string, transition: AnimationNodeStateMachineTransition) { sys_call("AnimationNodeStateMachine", "add_transition", 795486887, Nil, main.p_object, from, to, transition);  }  // 10
get_transition :: (main: *AnimationNodeStateMachine, idx: int) -> *AnimationNodeStateMachineTransition { call_ret := cast(*AnimationNodeStateMachineTransition) sys_call("AnimationNodeStateMachine", "get_transition", 4192381260, AnimationNodeStateMachineTransition, main.p_object, idx); return call_ret; }  // 11
get_transition_from :: (main: *AnimationNodeStateMachine, idx: int) -> StringName { call_ret := cast(*StringName) sys_call("AnimationNodeStateMachine", "get_transition_from", 659327637, StringName, main.p_object, idx); return call_ret.*; }  // 12
get_transition_to :: (main: *AnimationNodeStateMachine, idx: int) -> StringName { call_ret := cast(*StringName) sys_call("AnimationNodeStateMachine", "get_transition_to", 659327637, StringName, main.p_object, idx); return call_ret.*; }  // 13
get_transition_count :: (main: *AnimationNodeStateMachine) -> int { call_ret := cast(*int) sys_call("AnimationNodeStateMachine", "get_transition_count", 3905245786, int, main.p_object); return call_ret.*; }  // 14
remove_transition_by_index :: (main: *AnimationNodeStateMachine, idx: int) { sys_call("AnimationNodeStateMachine", "remove_transition_by_index", 1286410249, Nil, main.p_object, idx);  }  // 15
remove_transition :: (main: *AnimationNodeStateMachine, from: string, to: string) { sys_call("AnimationNodeStateMachine", "remove_transition", 3740211285, Nil, main.p_object, from, to);  }  // 16
set_graph_offset :: (main: *AnimationNodeStateMachine, offset: Vector2) { sys_call("AnimationNodeStateMachine", "set_graph_offset", 743155724, Nil, main.p_object, offset);  }  // 17
get_graph_offset :: (main: *AnimationNodeStateMachine) -> Vector2 { call_ret := cast(*Vector2) sys_call("AnimationNodeStateMachine", "get_graph_offset", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 18
set_state_machine_type :: (main: *AnimationNodeStateMachine, state_machine_type: AnimationNodeStateMachine.StateMachineType) { sys_call("AnimationNodeStateMachine", "set_state_machine_type", 2584759088, Nil, main.p_object, state_machine_type);  }  // 19
get_state_machine_type :: (main: *AnimationNodeStateMachine) -> AnimationNodeStateMachine.StateMachineType { call_ret := cast(*AnimationNodeStateMachine.StateMachineType) sys_call("AnimationNodeStateMachine", "get_state_machine_type", 1140726469, AnimationNodeStateMachine.StateMachineType, main.p_object); return call_ret.*; }  // 20
set_allow_transition_to_self :: (main: *AnimationNodeStateMachine, enable: bool) { sys_call("AnimationNodeStateMachine", "set_allow_transition_to_self", 2586408642, Nil, main.p_object, enable);  }  // 21
is_allow_transition_to_self :: (main: *AnimationNodeStateMachine) -> bool { call_ret := cast(*bool) sys_call("AnimationNodeStateMachine", "is_allow_transition_to_self", 36873697, bool, main.p_object); return call_ret.*; }  // 22
set_reset_ends :: (main: *AnimationNodeStateMachine, enable: bool) { sys_call("AnimationNodeStateMachine", "set_reset_ends", 2586408642, Nil, main.p_object, enable);  }  // 23
are_ends_reset :: (main: *AnimationNodeStateMachine) -> bool { call_ret := cast(*bool) sys_call("AnimationNodeStateMachine", "are_ends_reset", 36873697, bool, main.p_object); return call_ret.*; }  // 24

travel :: (main: *AnimationNodeStateMachinePlayback, to_node: string) { sys_call("AnimationNodeStateMachinePlayback", "travel", 3823612587, Nil, main.p_object, to_node);  }  // 0
start :: (main: *AnimationNodeStateMachinePlayback, node: string) { sys_call("AnimationNodeStateMachinePlayback", "start", 3823612587, Nil, main.p_object, node);  }  // 1
next :: (main: *AnimationNodeStateMachinePlayback) { sys_call("AnimationNodeStateMachinePlayback", "next", 3218959716, Nil, main.p_object);  }  // 2
stop :: (main: *AnimationNodeStateMachinePlayback) { sys_call("AnimationNodeStateMachinePlayback", "stop", 3218959716, Nil, main.p_object);  }  // 3
is_playing :: (main: *AnimationNodeStateMachinePlayback) -> bool { call_ret := cast(*bool) sys_call("AnimationNodeStateMachinePlayback", "is_playing", 36873697, bool, main.p_object); return call_ret.*; }  // 4
get_current_node :: (main: *AnimationNodeStateMachinePlayback) -> StringName { call_ret := cast(*StringName) sys_call("AnimationNodeStateMachinePlayback", "get_current_node", 2002593661, StringName, main.p_object); return call_ret.*; }  // 5
get_current_play_position :: (main: *AnimationNodeStateMachinePlayback) -> float { call_ret := cast(*float) sys_call("AnimationNodeStateMachinePlayback", "get_current_play_position", 1740695150, float, main.p_object); return call_ret.*; }  // 6
get_current_length :: (main: *AnimationNodeStateMachinePlayback) -> float { call_ret := cast(*float) sys_call("AnimationNodeStateMachinePlayback", "get_current_length", 1740695150, float, main.p_object); return call_ret.*; }  // 7
get_fading_from_node :: (main: *AnimationNodeStateMachinePlayback) -> StringName { call_ret := cast(*StringName) sys_call("AnimationNodeStateMachinePlayback", "get_fading_from_node", 2002593661, StringName, main.p_object); return call_ret.*; }  // 8
get_travel_path :: (main: *AnimationNodeStateMachinePlayback) -> [] StringName { call_ret := cast(*[] StringName) sys_call("AnimationNodeStateMachinePlayback", "get_travel_path", 3995934104, [] StringName, main.p_object); return call_ret.*; }  // 9

set_switch_mode :: (main: *AnimationNodeStateMachineTransition, mode: AnimationNodeStateMachineTransition.SwitchMode) { sys_call("AnimationNodeStateMachineTransition", "set_switch_mode", 2074906633, Nil, main.p_object, mode);  }  // 0
get_switch_mode :: (main: *AnimationNodeStateMachineTransition) -> AnimationNodeStateMachineTransition.SwitchMode { call_ret := cast(*AnimationNodeStateMachineTransition.SwitchMode) sys_call("AnimationNodeStateMachineTransition", "get_switch_mode", 2138562085, AnimationNodeStateMachineTransition.SwitchMode, main.p_object); return call_ret.*; }  // 1
set_advance_mode :: (main: *AnimationNodeStateMachineTransition, mode: AnimationNodeStateMachineTransition.AdvanceMode) { sys_call("AnimationNodeStateMachineTransition", "set_advance_mode", 1210869868, Nil, main.p_object, mode);  }  // 2
get_advance_mode :: (main: *AnimationNodeStateMachineTransition) -> AnimationNodeStateMachineTransition.AdvanceMode { call_ret := cast(*AnimationNodeStateMachineTransition.AdvanceMode) sys_call("AnimationNodeStateMachineTransition", "get_advance_mode", 61101689, AnimationNodeStateMachineTransition.AdvanceMode, main.p_object); return call_ret.*; }  // 3
set_advance_condition :: (main: *AnimationNodeStateMachineTransition, name: string) { sys_call("AnimationNodeStateMachineTransition", "set_advance_condition", 3304788590, Nil, main.p_object, name);  }  // 4
get_advance_condition :: (main: *AnimationNodeStateMachineTransition) -> StringName { call_ret := cast(*StringName) sys_call("AnimationNodeStateMachineTransition", "get_advance_condition", 2002593661, StringName, main.p_object); return call_ret.*; }  // 5
set_xfade_time :: (main: *AnimationNodeStateMachineTransition, secs: float) { sys_call("AnimationNodeStateMachineTransition", "set_xfade_time", 373806689, Nil, main.p_object, secs);  }  // 6
get_xfade_time :: (main: *AnimationNodeStateMachineTransition) -> float { call_ret := cast(*float) sys_call("AnimationNodeStateMachineTransition", "get_xfade_time", 1740695150, float, main.p_object); return call_ret.*; }  // 7
set_xfade_curve :: (main: *AnimationNodeStateMachineTransition, curve: Curve) { sys_call("AnimationNodeStateMachineTransition", "set_xfade_curve", 270443179, Nil, main.p_object, curve);  }  // 8
get_xfade_curve :: (main: *AnimationNodeStateMachineTransition) -> *Curve { call_ret := cast(*Curve) sys_call("AnimationNodeStateMachineTransition", "get_xfade_curve", 2460114913, Curve, main.p_object); return call_ret; }  // 9
set_break_loop_at_end :: (main: *AnimationNodeStateMachineTransition, enable: bool) { sys_call("AnimationNodeStateMachineTransition", "set_break_loop_at_end", 2586408642, Nil, main.p_object, enable);  }  // 10
is_loop_broken_at_end :: (main: *AnimationNodeStateMachineTransition) -> bool { call_ret := cast(*bool) sys_call("AnimationNodeStateMachineTransition", "is_loop_broken_at_end", 36873697, bool, main.p_object); return call_ret.*; }  // 11
set_reset :: (main: *AnimationNodeStateMachineTransition, reset: bool) { sys_call("AnimationNodeStateMachineTransition", "set_reset", 2586408642, Nil, main.p_object, reset);  }  // 12
is_reset :: (main: *AnimationNodeStateMachineTransition) -> bool { call_ret := cast(*bool) sys_call("AnimationNodeStateMachineTransition", "is_reset", 36873697, bool, main.p_object); return call_ret.*; }  // 13
set_priority :: (main: *AnimationNodeStateMachineTransition, priority: int) { sys_call("AnimationNodeStateMachineTransition", "set_priority", 1286410249, Nil, main.p_object, priority);  }  // 14
get_priority :: (main: *AnimationNodeStateMachineTransition) -> int { call_ret := cast(*int) sys_call("AnimationNodeStateMachineTransition", "get_priority", 3905245786, int, main.p_object); return call_ret.*; }  // 15
set_advance_expression :: (main: *AnimationNodeStateMachineTransition, text: string) { sys_call("AnimationNodeStateMachineTransition", "set_advance_expression", 83702148, Nil, main.p_object, text);  }  // 16
get_advance_expression :: (main: *AnimationNodeStateMachineTransition) -> gstring { call_ret := cast(*gstring) sys_call("AnimationNodeStateMachineTransition", "get_advance_expression", 201670096, gstring, main.p_object); return call_ret.*; }  // 17


set_use_sync :: (main: *AnimationNodeSync, enable: bool) { sys_call("AnimationNodeSync", "set_use_sync", 2586408642, Nil, main.p_object, enable);  }  // 0
is_using_sync :: (main: *AnimationNodeSync) -> bool { call_ret := cast(*bool) sys_call("AnimationNodeSync", "is_using_sync", 36873697, bool, main.p_object); return call_ret.*; }  // 1


set_explicit_elapse :: (main: *AnimationNodeTimeSeek, enable: bool) { sys_call("AnimationNodeTimeSeek", "set_explicit_elapse", 2586408642, Nil, main.p_object, enable);  }  // 0
is_explicit_elapse :: (main: *AnimationNodeTimeSeek) -> bool { call_ret := cast(*bool) sys_call("AnimationNodeTimeSeek", "is_explicit_elapse", 36873697, bool, main.p_object); return call_ret.*; }  // 1

set_input_count :: (main: *AnimationNodeTransition, input_count: int) { sys_call("AnimationNodeTransition", "set_input_count", 1286410249, Nil, main.p_object, input_count);  }  // 0
set_input_as_auto_advance :: (main: *AnimationNodeTransition, input: int, enable: bool) { sys_call("AnimationNodeTransition", "set_input_as_auto_advance", 300928843, Nil, main.p_object, input, enable);  }  // 1
is_input_set_as_auto_advance :: (main: *AnimationNodeTransition, input: int) -> bool { call_ret := cast(*bool) sys_call("AnimationNodeTransition", "is_input_set_as_auto_advance", 1116898809, bool, main.p_object, input); return call_ret.*; }  // 2
set_input_break_loop_at_end :: (main: *AnimationNodeTransition, input: int, enable: bool) { sys_call("AnimationNodeTransition", "set_input_break_loop_at_end", 300928843, Nil, main.p_object, input, enable);  }  // 3
is_input_loop_broken_at_end :: (main: *AnimationNodeTransition, input: int) -> bool { call_ret := cast(*bool) sys_call("AnimationNodeTransition", "is_input_loop_broken_at_end", 1116898809, bool, main.p_object, input); return call_ret.*; }  // 4
set_input_reset :: (main: *AnimationNodeTransition, input: int, enable: bool) { sys_call("AnimationNodeTransition", "set_input_reset", 300928843, Nil, main.p_object, input, enable);  }  // 5
is_input_reset :: (main: *AnimationNodeTransition, input: int) -> bool { call_ret := cast(*bool) sys_call("AnimationNodeTransition", "is_input_reset", 1116898809, bool, main.p_object, input); return call_ret.*; }  // 6
set_xfade_time :: (main: *AnimationNodeTransition, time: float) { sys_call("AnimationNodeTransition", "set_xfade_time", 373806689, Nil, main.p_object, time);  }  // 7
get_xfade_time :: (main: *AnimationNodeTransition) -> float { call_ret := cast(*float) sys_call("AnimationNodeTransition", "get_xfade_time", 1740695150, float, main.p_object); return call_ret.*; }  // 8
set_xfade_curve :: (main: *AnimationNodeTransition, curve: Curve) { sys_call("AnimationNodeTransition", "set_xfade_curve", 270443179, Nil, main.p_object, curve);  }  // 9
get_xfade_curve :: (main: *AnimationNodeTransition) -> *Curve { call_ret := cast(*Curve) sys_call("AnimationNodeTransition", "get_xfade_curve", 2460114913, Curve, main.p_object); return call_ret; }  // 10
set_allow_transition_to_self :: (main: *AnimationNodeTransition, enable: bool) { sys_call("AnimationNodeTransition", "set_allow_transition_to_self", 2586408642, Nil, main.p_object, enable);  }  // 11
is_allow_transition_to_self :: (main: *AnimationNodeTransition) -> bool { call_ret := cast(*bool) sys_call("AnimationNodeTransition", "is_allow_transition_to_self", 36873697, bool, main.p_object); return call_ret.*; }  // 12

animation_set_next :: (main: *AnimationPlayer, animation_from: string, animation_to: string) { sys_call("AnimationPlayer", "animation_set_next", 3740211285, Nil, main.p_object, animation_from, animation_to);  }  // 0
animation_get_next :: (main: *AnimationPlayer, animation_from: string) -> StringName { call_ret := cast(*StringName) sys_call("AnimationPlayer", "animation_get_next", 1965194235, StringName, main.p_object, animation_from); return call_ret.*; }  // 1
set_blend_time :: (main: *AnimationPlayer, animation_from: string, animation_to: string, sec: float) { sys_call("AnimationPlayer", "set_blend_time", 3231131886, Nil, main.p_object, animation_from, animation_to, sec);  }  // 2
get_blend_time :: (main: *AnimationPlayer, animation_from: string, animation_to: string) -> float { call_ret := cast(*float) sys_call("AnimationPlayer", "get_blend_time", 1958752504, float, main.p_object, animation_from, animation_to); return call_ret.*; }  // 3
set_default_blend_time :: (main: *AnimationPlayer, sec: float) { sys_call("AnimationPlayer", "set_default_blend_time", 373806689, Nil, main.p_object, sec);  }  // 4
get_default_blend_time :: (main: *AnimationPlayer) -> float { call_ret := cast(*float) sys_call("AnimationPlayer", "get_default_blend_time", 1740695150, float, main.p_object); return call_ret.*; }  // 5
set_auto_capture :: (main: *AnimationPlayer, auto_capture: bool) { sys_call("AnimationPlayer", "set_auto_capture", 2586408642, Nil, main.p_object, auto_capture);  }  // 6
is_auto_capture :: (main: *AnimationPlayer) -> bool { call_ret := cast(*bool) sys_call("AnimationPlayer", "is_auto_capture", 36873697, bool, main.p_object); return call_ret.*; }  // 7
set_auto_capture_duration :: (main: *AnimationPlayer, auto_capture_duration: float) { sys_call("AnimationPlayer", "set_auto_capture_duration", 373806689, Nil, main.p_object, auto_capture_duration);  }  // 8
get_auto_capture_duration :: (main: *AnimationPlayer) -> float { call_ret := cast(*float) sys_call("AnimationPlayer", "get_auto_capture_duration", 1740695150, float, main.p_object); return call_ret.*; }  // 9
set_auto_capture_transition_type :: (main: *AnimationPlayer, auto_capture_transition_type: Tween.TransitionType) { sys_call("AnimationPlayer", "set_auto_capture_transition_type", 1058637742, Nil, main.p_object, auto_capture_transition_type);  }  // 10
get_auto_capture_transition_type :: (main: *AnimationPlayer) -> Tween.TransitionType { call_ret := cast(*Tween.TransitionType) sys_call("AnimationPlayer", "get_auto_capture_transition_type", 3842314528, Tween.TransitionType, main.p_object); return call_ret.*; }  // 11
set_auto_capture_ease_type :: (main: *AnimationPlayer, auto_capture_ease_type: Tween.EaseType) { sys_call("AnimationPlayer", "set_auto_capture_ease_type", 1208105857, Nil, main.p_object, auto_capture_ease_type);  }  // 12
get_auto_capture_ease_type :: (main: *AnimationPlayer) -> Tween.EaseType { call_ret := cast(*Tween.EaseType) sys_call("AnimationPlayer", "get_auto_capture_ease_type", 631880200, Tween.EaseType, main.p_object); return call_ret.*; }  // 13
play :: (main: *AnimationPlayer) { sys_call("AnimationPlayer", "play", 3118260607, Nil, main.p_object);  }  // 14
play_section_with_markers :: (main: *AnimationPlayer) { sys_call("AnimationPlayer", "play_section_with_markers", 1421431412, Nil, main.p_object);  }  // 15
play_section :: (main: *AnimationPlayer) { sys_call("AnimationPlayer", "play_section", 284774635, Nil, main.p_object);  }  // 16
play_backwards :: (main: *AnimationPlayer) { sys_call("AnimationPlayer", "play_backwards", 2787282401, Nil, main.p_object);  }  // 17
play_section_with_markers_backwards :: (main: *AnimationPlayer) { sys_call("AnimationPlayer", "play_section_with_markers_backwards", 910195100, Nil, main.p_object);  }  // 18
play_section_backwards :: (main: *AnimationPlayer) { sys_call("AnimationPlayer", "play_section_backwards", 831955981, Nil, main.p_object);  }  // 19
play_with_capture :: (main: *AnimationPlayer) { sys_call("AnimationPlayer", "play_with_capture", 1572969103, Nil, main.p_object);  }  // 20
pause :: (main: *AnimationPlayer) { sys_call("AnimationPlayer", "pause", 3218959716, Nil, main.p_object);  }  // 21
stop :: (main: *AnimationPlayer) { sys_call("AnimationPlayer", "stop", 107499316, Nil, main.p_object);  }  // 22
is_playing :: (main: *AnimationPlayer) -> bool { call_ret := cast(*bool) sys_call("AnimationPlayer", "is_playing", 36873697, bool, main.p_object); return call_ret.*; }  // 23
set_current_animation :: (main: *AnimationPlayer, animation: string) { sys_call("AnimationPlayer", "set_current_animation", 83702148, Nil, main.p_object, animation);  }  // 24
get_current_animation :: (main: *AnimationPlayer) -> gstring { call_ret := cast(*gstring) sys_call("AnimationPlayer", "get_current_animation", 201670096, gstring, main.p_object); return call_ret.*; }  // 25
set_assigned_animation :: (main: *AnimationPlayer, animation: string) { sys_call("AnimationPlayer", "set_assigned_animation", 83702148, Nil, main.p_object, animation);  }  // 26
get_assigned_animation :: (main: *AnimationPlayer) -> gstring { call_ret := cast(*gstring) sys_call("AnimationPlayer", "get_assigned_animation", 201670096, gstring, main.p_object); return call_ret.*; }  // 27
queue :: (main: *AnimationPlayer, name: string) { sys_call("AnimationPlayer", "queue", 3304788590, Nil, main.p_object, name);  }  // 28
get_queue :: (main: *AnimationPlayer) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("AnimationPlayer", "get_queue", 2981934095, PackedStringArray, main.p_object); return call_ret.*; }  // 29
clear_queue :: (main: *AnimationPlayer) { sys_call("AnimationPlayer", "clear_queue", 3218959716, Nil, main.p_object);  }  // 30
set_speed_scale :: (main: *AnimationPlayer, speed: float) { sys_call("AnimationPlayer", "set_speed_scale", 373806689, Nil, main.p_object, speed);  }  // 31
get_speed_scale :: (main: *AnimationPlayer) -> float { call_ret := cast(*float) sys_call("AnimationPlayer", "get_speed_scale", 1740695150, float, main.p_object); return call_ret.*; }  // 32
get_playing_speed :: (main: *AnimationPlayer) -> float { call_ret := cast(*float) sys_call("AnimationPlayer", "get_playing_speed", 1740695150, float, main.p_object); return call_ret.*; }  // 33
set_autoplay :: (main: *AnimationPlayer, name: string) { sys_call("AnimationPlayer", "set_autoplay", 83702148, Nil, main.p_object, name);  }  // 34
get_autoplay :: (main: *AnimationPlayer) -> gstring { call_ret := cast(*gstring) sys_call("AnimationPlayer", "get_autoplay", 201670096, gstring, main.p_object); return call_ret.*; }  // 35
set_movie_quit_on_finish_enabled :: (main: *AnimationPlayer, enabled: bool) { sys_call("AnimationPlayer", "set_movie_quit_on_finish_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 36
is_movie_quit_on_finish_enabled :: (main: *AnimationPlayer) -> bool { call_ret := cast(*bool) sys_call("AnimationPlayer", "is_movie_quit_on_finish_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 37
get_current_animation_position :: (main: *AnimationPlayer) -> float { call_ret := cast(*float) sys_call("AnimationPlayer", "get_current_animation_position", 1740695150, float, main.p_object); return call_ret.*; }  // 38
get_current_animation_length :: (main: *AnimationPlayer) -> float { call_ret := cast(*float) sys_call("AnimationPlayer", "get_current_animation_length", 1740695150, float, main.p_object); return call_ret.*; }  // 39
set_section_with_markers :: (main: *AnimationPlayer) { sys_call("AnimationPlayer", "set_section_with_markers", 794792241, Nil, main.p_object);  }  // 40
set_section :: (main: *AnimationPlayer) { sys_call("AnimationPlayer", "set_section", 3749779719, Nil, main.p_object);  }  // 41
reset_section :: (main: *AnimationPlayer) { sys_call("AnimationPlayer", "reset_section", 3218959716, Nil, main.p_object);  }  // 42
get_section_start_time :: (main: *AnimationPlayer) -> float { call_ret := cast(*float) sys_call("AnimationPlayer", "get_section_start_time", 1740695150, float, main.p_object); return call_ret.*; }  // 43
get_section_end_time :: (main: *AnimationPlayer) -> float { call_ret := cast(*float) sys_call("AnimationPlayer", "get_section_end_time", 1740695150, float, main.p_object); return call_ret.*; }  // 44
has_section :: (main: *AnimationPlayer) -> bool { call_ret := cast(*bool) sys_call("AnimationPlayer", "has_section", 36873697, bool, main.p_object); return call_ret.*; }  // 45
seek :: (main: *AnimationPlayer, seconds: float) { sys_call("AnimationPlayer", "seek", 1807872683, Nil, main.p_object, seconds);  }  // 46
set_process_callback :: (main: *AnimationPlayer, mode: AnimationPlayer.AnimationProcessCallback) { sys_call("AnimationPlayer", "set_process_callback", 1663839457, Nil, main.p_object, mode);  }  // 47
get_process_callback :: (main: *AnimationPlayer) -> AnimationPlayer.AnimationProcessCallback { call_ret := cast(*AnimationPlayer.AnimationProcessCallback) sys_call("AnimationPlayer", "get_process_callback", 4207496604, AnimationPlayer.AnimationProcessCallback, main.p_object); return call_ret.*; }  // 48
set_method_call_mode :: (main: *AnimationPlayer, mode: AnimationPlayer.AnimationMethodCallMode) { sys_call("AnimationPlayer", "set_method_call_mode", 3413514846, Nil, main.p_object, mode);  }  // 49
get_method_call_mode :: (main: *AnimationPlayer) -> AnimationPlayer.AnimationMethodCallMode { call_ret := cast(*AnimationPlayer.AnimationMethodCallMode) sys_call("AnimationPlayer", "get_method_call_mode", 3583380054, AnimationPlayer.AnimationMethodCallMode, main.p_object); return call_ret.*; }  // 50
set_root :: (main: *AnimationPlayer, path: string) { sys_call("AnimationPlayer", "set_root", 1348162250, Nil, main.p_object, path);  }  // 51
get_root :: (main: *AnimationPlayer) -> NodePath { call_ret := cast(*NodePath) sys_call("AnimationPlayer", "get_root", 4075236667, NodePath, main.p_object); return call_ret.*; }  // 52


set_tree_root :: (main: *AnimationTree, animation_node: AnimationRootNode) { sys_call("AnimationTree", "set_tree_root", 2581683800, Nil, main.p_object, animation_node);  }  // 0
get_tree_root :: (main: *AnimationTree) -> *AnimationRootNode { call_ret := cast(*AnimationRootNode) sys_call("AnimationTree", "get_tree_root", 4110384712, AnimationRootNode, main.p_object); return call_ret; }  // 1
set_advance_expression_base_node :: (main: *AnimationTree, path: string) { sys_call("AnimationTree", "set_advance_expression_base_node", 1348162250, Nil, main.p_object, path);  }  // 2
get_advance_expression_base_node :: (main: *AnimationTree) -> NodePath { call_ret := cast(*NodePath) sys_call("AnimationTree", "get_advance_expression_base_node", 4075236667, NodePath, main.p_object); return call_ret.*; }  // 3
set_animation_player :: (main: *AnimationTree, path: string) { sys_call("AnimationTree", "set_animation_player", 1348162250, Nil, main.p_object, path);  }  // 4
get_animation_player :: (main: *AnimationTree) -> NodePath { call_ret := cast(*NodePath) sys_call("AnimationTree", "get_animation_player", 4075236667, NodePath, main.p_object); return call_ret.*; }  // 5
set_process_callback :: (main: *AnimationTree, mode: AnimationTree.AnimationProcessCallback) { sys_call("AnimationTree", "set_process_callback", 1723352826, Nil, main.p_object, mode);  }  // 6
get_process_callback :: (main: *AnimationTree) -> AnimationTree.AnimationProcessCallback { call_ret := cast(*AnimationTree.AnimationProcessCallback) sys_call("AnimationTree", "get_process_callback", 891317132, AnimationTree.AnimationProcessCallback, main.p_object); return call_ret.*; }  // 7

set_gravity_space_override_mode :: (main: *Area2D, space_override_mode: Area2D.SpaceOverride) { sys_call("Area2D", "set_gravity_space_override_mode", 2879900038, Nil, main.p_object, space_override_mode);  }  // 0
get_gravity_space_override_mode :: (main: *Area2D) -> Area2D.SpaceOverride { call_ret := cast(*Area2D.SpaceOverride) sys_call("Area2D", "get_gravity_space_override_mode", 3990256304, Area2D.SpaceOverride, main.p_object); return call_ret.*; }  // 1
set_gravity_is_point :: (main: *Area2D, enable: bool) { sys_call("Area2D", "set_gravity_is_point", 2586408642, Nil, main.p_object, enable);  }  // 2
is_gravity_a_point :: (main: *Area2D) -> bool { call_ret := cast(*bool) sys_call("Area2D", "is_gravity_a_point", 36873697, bool, main.p_object); return call_ret.*; }  // 3
set_gravity_point_unit_distance :: (main: *Area2D, distance_scale: float) { sys_call("Area2D", "set_gravity_point_unit_distance", 373806689, Nil, main.p_object, distance_scale);  }  // 4
get_gravity_point_unit_distance :: (main: *Area2D) -> float { call_ret := cast(*float) sys_call("Area2D", "get_gravity_point_unit_distance", 1740695150, float, main.p_object); return call_ret.*; }  // 5
set_gravity_point_center :: (main: *Area2D, center: Vector2) { sys_call("Area2D", "set_gravity_point_center", 743155724, Nil, main.p_object, center);  }  // 6
get_gravity_point_center :: (main: *Area2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("Area2D", "get_gravity_point_center", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 7
set_gravity_direction :: (main: *Area2D, direction: Vector2) { sys_call("Area2D", "set_gravity_direction", 743155724, Nil, main.p_object, direction);  }  // 8
get_gravity_direction :: (main: *Area2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("Area2D", "get_gravity_direction", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 9
set_gravity :: (main: *Area2D, gravity: float) { sys_call("Area2D", "set_gravity", 373806689, Nil, main.p_object, gravity);  }  // 10
get_gravity :: (main: *Area2D) -> float { call_ret := cast(*float) sys_call("Area2D", "get_gravity", 1740695150, float, main.p_object); return call_ret.*; }  // 11
set_linear_damp_space_override_mode :: (main: *Area2D, space_override_mode: Area2D.SpaceOverride) { sys_call("Area2D", "set_linear_damp_space_override_mode", 2879900038, Nil, main.p_object, space_override_mode);  }  // 12
get_linear_damp_space_override_mode :: (main: *Area2D) -> Area2D.SpaceOverride { call_ret := cast(*Area2D.SpaceOverride) sys_call("Area2D", "get_linear_damp_space_override_mode", 3990256304, Area2D.SpaceOverride, main.p_object); return call_ret.*; }  // 13
set_angular_damp_space_override_mode :: (main: *Area2D, space_override_mode: Area2D.SpaceOverride) { sys_call("Area2D", "set_angular_damp_space_override_mode", 2879900038, Nil, main.p_object, space_override_mode);  }  // 14
get_angular_damp_space_override_mode :: (main: *Area2D) -> Area2D.SpaceOverride { call_ret := cast(*Area2D.SpaceOverride) sys_call("Area2D", "get_angular_damp_space_override_mode", 3990256304, Area2D.SpaceOverride, main.p_object); return call_ret.*; }  // 15
set_linear_damp :: (main: *Area2D, linear_damp: float) { sys_call("Area2D", "set_linear_damp", 373806689, Nil, main.p_object, linear_damp);  }  // 16
get_linear_damp :: (main: *Area2D) -> float { call_ret := cast(*float) sys_call("Area2D", "get_linear_damp", 1740695150, float, main.p_object); return call_ret.*; }  // 17
set_angular_damp :: (main: *Area2D, angular_damp: float) { sys_call("Area2D", "set_angular_damp", 373806689, Nil, main.p_object, angular_damp);  }  // 18
get_angular_damp :: (main: *Area2D) -> float { call_ret := cast(*float) sys_call("Area2D", "get_angular_damp", 1740695150, float, main.p_object); return call_ret.*; }  // 19
set_priority :: (main: *Area2D, priority: int) { sys_call("Area2D", "set_priority", 1286410249, Nil, main.p_object, priority);  }  // 20
get_priority :: (main: *Area2D) -> int { call_ret := cast(*int) sys_call("Area2D", "get_priority", 3905245786, int, main.p_object); return call_ret.*; }  // 21
set_monitoring :: (main: *Area2D, enable: bool) { sys_call("Area2D", "set_monitoring", 2586408642, Nil, main.p_object, enable);  }  // 22
is_monitoring :: (main: *Area2D) -> bool { call_ret := cast(*bool) sys_call("Area2D", "is_monitoring", 36873697, bool, main.p_object); return call_ret.*; }  // 23
set_monitorable :: (main: *Area2D, enable: bool) { sys_call("Area2D", "set_monitorable", 2586408642, Nil, main.p_object, enable);  }  // 24
is_monitorable :: (main: *Area2D) -> bool { call_ret := cast(*bool) sys_call("Area2D", "is_monitorable", 36873697, bool, main.p_object); return call_ret.*; }  // 25
get_overlapping_bodies :: (main: *Area2D) -> [] Node2D { call_ret := cast(*[] Node2D) sys_call("Area2D", "get_overlapping_bodies", 3995934104, [] Node2D, main.p_object); return call_ret.*; }  // 26
get_overlapping_areas :: (main: *Area2D) -> [] Area2D { call_ret := cast(*[] Area2D) sys_call("Area2D", "get_overlapping_areas", 3995934104, [] Area2D, main.p_object); return call_ret.*; }  // 27
has_overlapping_bodies :: (main: *Area2D) -> bool { call_ret := cast(*bool) sys_call("Area2D", "has_overlapping_bodies", 36873697, bool, main.p_object); return call_ret.*; }  // 28
has_overlapping_areas :: (main: *Area2D) -> bool { call_ret := cast(*bool) sys_call("Area2D", "has_overlapping_areas", 36873697, bool, main.p_object); return call_ret.*; }  // 29
overlaps_body :: (main: *Area2D, body: Node) -> bool { call_ret := cast(*bool) sys_call("Area2D", "overlaps_body", 3093956946, bool, main.p_object, body); return call_ret.*; }  // 30
overlaps_area :: (main: *Area2D, area: Node) -> bool { call_ret := cast(*bool) sys_call("Area2D", "overlaps_area", 3093956946, bool, main.p_object, area); return call_ret.*; }  // 31
set_audio_bus_name :: (main: *Area2D, name: string) { sys_call("Area2D", "set_audio_bus_name", 3304788590, Nil, main.p_object, name);  }  // 32
get_audio_bus_name :: (main: *Area2D) -> StringName { call_ret := cast(*StringName) sys_call("Area2D", "get_audio_bus_name", 2002593661, StringName, main.p_object); return call_ret.*; }  // 33
set_audio_bus_override :: (main: *Area2D, enable: bool) { sys_call("Area2D", "set_audio_bus_override", 2586408642, Nil, main.p_object, enable);  }  // 34
is_overriding_audio_bus :: (main: *Area2D) -> bool { call_ret := cast(*bool) sys_call("Area2D", "is_overriding_audio_bus", 36873697, bool, main.p_object); return call_ret.*; }  // 35

set_gravity_space_override_mode :: (main: *Area3D, space_override_mode: Area3D.SpaceOverride) { sys_call("Area3D", "set_gravity_space_override_mode", 2311433571, Nil, main.p_object, space_override_mode);  }  // 0
get_gravity_space_override_mode :: (main: *Area3D) -> Area3D.SpaceOverride { call_ret := cast(*Area3D.SpaceOverride) sys_call("Area3D", "get_gravity_space_override_mode", 958191869, Area3D.SpaceOverride, main.p_object); return call_ret.*; }  // 1
set_gravity_is_point :: (main: *Area3D, enable: bool) { sys_call("Area3D", "set_gravity_is_point", 2586408642, Nil, main.p_object, enable);  }  // 2
is_gravity_a_point :: (main: *Area3D) -> bool { call_ret := cast(*bool) sys_call("Area3D", "is_gravity_a_point", 36873697, bool, main.p_object); return call_ret.*; }  // 3
set_gravity_point_unit_distance :: (main: *Area3D, distance_scale: float) { sys_call("Area3D", "set_gravity_point_unit_distance", 373806689, Nil, main.p_object, distance_scale);  }  // 4
get_gravity_point_unit_distance :: (main: *Area3D) -> float { call_ret := cast(*float) sys_call("Area3D", "get_gravity_point_unit_distance", 1740695150, float, main.p_object); return call_ret.*; }  // 5
set_gravity_point_center :: (main: *Area3D, center: Vector3) { sys_call("Area3D", "set_gravity_point_center", 3460891852, Nil, main.p_object, center);  }  // 6
get_gravity_point_center :: (main: *Area3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("Area3D", "get_gravity_point_center", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 7
set_gravity_direction :: (main: *Area3D, direction: Vector3) { sys_call("Area3D", "set_gravity_direction", 3460891852, Nil, main.p_object, direction);  }  // 8
get_gravity_direction :: (main: *Area3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("Area3D", "get_gravity_direction", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 9
set_gravity :: (main: *Area3D, gravity: float) { sys_call("Area3D", "set_gravity", 373806689, Nil, main.p_object, gravity);  }  // 10
get_gravity :: (main: *Area3D) -> float { call_ret := cast(*float) sys_call("Area3D", "get_gravity", 1740695150, float, main.p_object); return call_ret.*; }  // 11
set_linear_damp_space_override_mode :: (main: *Area3D, space_override_mode: Area3D.SpaceOverride) { sys_call("Area3D", "set_linear_damp_space_override_mode", 2311433571, Nil, main.p_object, space_override_mode);  }  // 12
get_linear_damp_space_override_mode :: (main: *Area3D) -> Area3D.SpaceOverride { call_ret := cast(*Area3D.SpaceOverride) sys_call("Area3D", "get_linear_damp_space_override_mode", 958191869, Area3D.SpaceOverride, main.p_object); return call_ret.*; }  // 13
set_angular_damp_space_override_mode :: (main: *Area3D, space_override_mode: Area3D.SpaceOverride) { sys_call("Area3D", "set_angular_damp_space_override_mode", 2311433571, Nil, main.p_object, space_override_mode);  }  // 14
get_angular_damp_space_override_mode :: (main: *Area3D) -> Area3D.SpaceOverride { call_ret := cast(*Area3D.SpaceOverride) sys_call("Area3D", "get_angular_damp_space_override_mode", 958191869, Area3D.SpaceOverride, main.p_object); return call_ret.*; }  // 15
set_angular_damp :: (main: *Area3D, angular_damp: float) { sys_call("Area3D", "set_angular_damp", 373806689, Nil, main.p_object, angular_damp);  }  // 16
get_angular_damp :: (main: *Area3D) -> float { call_ret := cast(*float) sys_call("Area3D", "get_angular_damp", 1740695150, float, main.p_object); return call_ret.*; }  // 17
set_linear_damp :: (main: *Area3D, linear_damp: float) { sys_call("Area3D", "set_linear_damp", 373806689, Nil, main.p_object, linear_damp);  }  // 18
get_linear_damp :: (main: *Area3D) -> float { call_ret := cast(*float) sys_call("Area3D", "get_linear_damp", 1740695150, float, main.p_object); return call_ret.*; }  // 19
set_priority :: (main: *Area3D, priority: int) { sys_call("Area3D", "set_priority", 1286410249, Nil, main.p_object, priority);  }  // 20
get_priority :: (main: *Area3D) -> int { call_ret := cast(*int) sys_call("Area3D", "get_priority", 3905245786, int, main.p_object); return call_ret.*; }  // 21
set_wind_force_magnitude :: (main: *Area3D, wind_force_magnitude: float) { sys_call("Area3D", "set_wind_force_magnitude", 373806689, Nil, main.p_object, wind_force_magnitude);  }  // 22
get_wind_force_magnitude :: (main: *Area3D) -> float { call_ret := cast(*float) sys_call("Area3D", "get_wind_force_magnitude", 1740695150, float, main.p_object); return call_ret.*; }  // 23
set_wind_attenuation_factor :: (main: *Area3D, wind_attenuation_factor: float) { sys_call("Area3D", "set_wind_attenuation_factor", 373806689, Nil, main.p_object, wind_attenuation_factor);  }  // 24
get_wind_attenuation_factor :: (main: *Area3D) -> float { call_ret := cast(*float) sys_call("Area3D", "get_wind_attenuation_factor", 1740695150, float, main.p_object); return call_ret.*; }  // 25
set_wind_source_path :: (main: *Area3D, wind_source_path: string) { sys_call("Area3D", "set_wind_source_path", 1348162250, Nil, main.p_object, wind_source_path);  }  // 26
get_wind_source_path :: (main: *Area3D) -> NodePath { call_ret := cast(*NodePath) sys_call("Area3D", "get_wind_source_path", 4075236667, NodePath, main.p_object); return call_ret.*; }  // 27
set_monitorable :: (main: *Area3D, enable: bool) { sys_call("Area3D", "set_monitorable", 2586408642, Nil, main.p_object, enable);  }  // 28
is_monitorable :: (main: *Area3D) -> bool { call_ret := cast(*bool) sys_call("Area3D", "is_monitorable", 36873697, bool, main.p_object); return call_ret.*; }  // 29
set_monitoring :: (main: *Area3D, enable: bool) { sys_call("Area3D", "set_monitoring", 2586408642, Nil, main.p_object, enable);  }  // 30
is_monitoring :: (main: *Area3D) -> bool { call_ret := cast(*bool) sys_call("Area3D", "is_monitoring", 36873697, bool, main.p_object); return call_ret.*; }  // 31
get_overlapping_bodies :: (main: *Area3D) -> [] Node3D { call_ret := cast(*[] Node3D) sys_call("Area3D", "get_overlapping_bodies", 3995934104, [] Node3D, main.p_object); return call_ret.*; }  // 32
get_overlapping_areas :: (main: *Area3D) -> [] Area3D { call_ret := cast(*[] Area3D) sys_call("Area3D", "get_overlapping_areas", 3995934104, [] Area3D, main.p_object); return call_ret.*; }  // 33
has_overlapping_bodies :: (main: *Area3D) -> bool { call_ret := cast(*bool) sys_call("Area3D", "has_overlapping_bodies", 36873697, bool, main.p_object); return call_ret.*; }  // 34
has_overlapping_areas :: (main: *Area3D) -> bool { call_ret := cast(*bool) sys_call("Area3D", "has_overlapping_areas", 36873697, bool, main.p_object); return call_ret.*; }  // 35
overlaps_body :: (main: *Area3D, body: Node) -> bool { call_ret := cast(*bool) sys_call("Area3D", "overlaps_body", 3093956946, bool, main.p_object, body); return call_ret.*; }  // 36
overlaps_area :: (main: *Area3D, area: Node) -> bool { call_ret := cast(*bool) sys_call("Area3D", "overlaps_area", 3093956946, bool, main.p_object, area); return call_ret.*; }  // 37
set_audio_bus_override :: (main: *Area3D, enable: bool) { sys_call("Area3D", "set_audio_bus_override", 2586408642, Nil, main.p_object, enable);  }  // 38
is_overriding_audio_bus :: (main: *Area3D) -> bool { call_ret := cast(*bool) sys_call("Area3D", "is_overriding_audio_bus", 36873697, bool, main.p_object); return call_ret.*; }  // 39
set_audio_bus_name :: (main: *Area3D, name: string) { sys_call("Area3D", "set_audio_bus_name", 3304788590, Nil, main.p_object, name);  }  // 40
get_audio_bus_name :: (main: *Area3D) -> StringName { call_ret := cast(*StringName) sys_call("Area3D", "get_audio_bus_name", 2002593661, StringName, main.p_object); return call_ret.*; }  // 41
set_use_reverb_bus :: (main: *Area3D, enable: bool) { sys_call("Area3D", "set_use_reverb_bus", 2586408642, Nil, main.p_object, enable);  }  // 42
is_using_reverb_bus :: (main: *Area3D) -> bool { call_ret := cast(*bool) sys_call("Area3D", "is_using_reverb_bus", 36873697, bool, main.p_object); return call_ret.*; }  // 43
set_reverb_bus_name :: (main: *Area3D, name: string) { sys_call("Area3D", "set_reverb_bus_name", 3304788590, Nil, main.p_object, name);  }  // 44
get_reverb_bus_name :: (main: *Area3D) -> StringName { call_ret := cast(*StringName) sys_call("Area3D", "get_reverb_bus_name", 2002593661, StringName, main.p_object); return call_ret.*; }  // 45
set_reverb_amount :: (main: *Area3D, amount: float) { sys_call("Area3D", "set_reverb_amount", 373806689, Nil, main.p_object, amount);  }  // 46
get_reverb_amount :: (main: *Area3D) -> float { call_ret := cast(*float) sys_call("Area3D", "get_reverb_amount", 1740695150, float, main.p_object); return call_ret.*; }  // 47
set_reverb_uniformity :: (main: *Area3D, amount: float) { sys_call("Area3D", "set_reverb_uniformity", 373806689, Nil, main.p_object, amount);  }  // 48
get_reverb_uniformity :: (main: *Area3D) -> float { call_ret := cast(*float) sys_call("Area3D", "get_reverb_uniformity", 1740695150, float, main.p_object); return call_ret.*; }  // 49

add_blend_shape :: (main: *ArrayMesh, name: string) { sys_call("ArrayMesh", "add_blend_shape", 3304788590, Nil, main.p_object, name);  }  // 0
get_blend_shape_count :: (main: *ArrayMesh) -> int { call_ret := cast(*int) sys_call("ArrayMesh", "get_blend_shape_count", 3905245786, int, main.p_object); return call_ret.*; }  // 1
get_blend_shape_name :: (main: *ArrayMesh, index: int) -> StringName { call_ret := cast(*StringName) sys_call("ArrayMesh", "get_blend_shape_name", 659327637, StringName, main.p_object, index); return call_ret.*; }  // 2
set_blend_shape_name :: (main: *ArrayMesh, index: int, name: string) { sys_call("ArrayMesh", "set_blend_shape_name", 3780747571, Nil, main.p_object, index, name);  }  // 3
clear_blend_shapes :: (main: *ArrayMesh) { sys_call("ArrayMesh", "clear_blend_shapes", 3218959716, Nil, main.p_object);  }  // 4
set_blend_shape_mode :: (main: *ArrayMesh, mode: Mesh.BlendShapeMode) { sys_call("ArrayMesh", "set_blend_shape_mode", 227983991, Nil, main.p_object, mode);  }  // 5
get_blend_shape_mode :: (main: *ArrayMesh) -> Mesh.BlendShapeMode { call_ret := cast(*Mesh.BlendShapeMode) sys_call("ArrayMesh", "get_blend_shape_mode", 836485024, Mesh.BlendShapeMode, main.p_object); return call_ret.*; }  // 6
add_surface_from_arrays :: (main: *ArrayMesh, primitive: Mesh.PrimitiveType, arrays: Array) { sys_call("ArrayMesh", "add_surface_from_arrays", 1796411378, Nil, main.p_object, primitive, arrays);  }  // 7
clear_surfaces :: (main: *ArrayMesh) { sys_call("ArrayMesh", "clear_surfaces", 3218959716, Nil, main.p_object);  }  // 8
surface_remove :: (main: *ArrayMesh, surf_idx: int) { sys_call("ArrayMesh", "surface_remove", 1286410249, Nil, main.p_object, surf_idx);  }  // 9
surface_update_vertex_region :: (main: *ArrayMesh, surf_idx: int, offset: int, data: PackedByteArray) { sys_call("ArrayMesh", "surface_update_vertex_region", 3837166854, Nil, main.p_object, surf_idx, offset, data);  }  // 10
surface_update_attribute_region :: (main: *ArrayMesh, surf_idx: int, offset: int, data: PackedByteArray) { sys_call("ArrayMesh", "surface_update_attribute_region", 3837166854, Nil, main.p_object, surf_idx, offset, data);  }  // 11
surface_update_skin_region :: (main: *ArrayMesh, surf_idx: int, offset: int, data: PackedByteArray) { sys_call("ArrayMesh", "surface_update_skin_region", 3837166854, Nil, main.p_object, surf_idx, offset, data);  }  // 12
surface_get_array_len :: (main: *ArrayMesh, surf_idx: int) -> int { call_ret := cast(*int) sys_call("ArrayMesh", "surface_get_array_len", 923996154, int, main.p_object, surf_idx); return call_ret.*; }  // 13
surface_get_array_index_len :: (main: *ArrayMesh, surf_idx: int) -> int { call_ret := cast(*int) sys_call("ArrayMesh", "surface_get_array_index_len", 923996154, int, main.p_object, surf_idx); return call_ret.*; }  // 14
surface_get_format :: (main: *ArrayMesh, surf_idx: int) -> Mesh.ArrayFormat { call_ret := cast(*Mesh.ArrayFormat) sys_call("ArrayMesh", "surface_get_format", 3718287884, Mesh.ArrayFormat, main.p_object, surf_idx); return call_ret.*; }  // 15
surface_get_primitive_type :: (main: *ArrayMesh, surf_idx: int) -> Mesh.PrimitiveType { call_ret := cast(*Mesh.PrimitiveType) sys_call("ArrayMesh", "surface_get_primitive_type", 4141943888, Mesh.PrimitiveType, main.p_object, surf_idx); return call_ret.*; }  // 16
surface_find_by_name :: (main: *ArrayMesh, name: string) -> int { call_ret := cast(*int) sys_call("ArrayMesh", "surface_find_by_name", 1321353865, int, main.p_object, name); return call_ret.*; }  // 17
surface_set_name :: (main: *ArrayMesh, surf_idx: int, name: string) { sys_call("ArrayMesh", "surface_set_name", 501894301, Nil, main.p_object, surf_idx, name);  }  // 18
surface_get_name :: (main: *ArrayMesh, surf_idx: int) -> gstring { call_ret := cast(*gstring) sys_call("ArrayMesh", "surface_get_name", 844755477, gstring, main.p_object, surf_idx); return call_ret.*; }  // 19
regen_normal_maps :: (main: *ArrayMesh) { sys_call("ArrayMesh", "regen_normal_maps", 3218959716, Nil, main.p_object);  }  // 20
lightmap_unwrap :: (main: *ArrayMesh, transform: Transform3D, texel_size: float) -> Error { call_ret := cast(*Error) sys_call("ArrayMesh", "lightmap_unwrap", 1476641071, Error, main.p_object, transform, texel_size); return call_ret.*; }  // 21
set_custom_aabb :: (main: *ArrayMesh, aabb: AABB) { sys_call("ArrayMesh", "set_custom_aabb", 259215842, Nil, main.p_object, aabb);  }  // 22
get_custom_aabb :: (main: *ArrayMesh) -> AABB { call_ret := cast(*AABB) sys_call("ArrayMesh", "get_custom_aabb", 1068685055, AABB, main.p_object); return call_ret.*; }  // 23
set_shadow_mesh :: (main: *ArrayMesh, mesh: ArrayMesh) { sys_call("ArrayMesh", "set_shadow_mesh", 3377897901, Nil, main.p_object, mesh);  }  // 24
get_shadow_mesh :: (main: *ArrayMesh) -> *ArrayMesh { call_ret := cast(*ArrayMesh) sys_call("ArrayMesh", "get_shadow_mesh", 3206942465, ArrayMesh, main.p_object); return call_ret; }  // 25

set_arrays :: (main: *ArrayOccluder3D, vertices: PackedVector3Array, indices: PackedInt32Array) { sys_call("ArrayOccluder3D", "set_arrays", 3233972621, Nil, main.p_object, vertices, indices);  }  // 0
set_vertices :: (main: *ArrayOccluder3D, vertices: PackedVector3Array) { sys_call("ArrayOccluder3D", "set_vertices", 334873810, Nil, main.p_object, vertices);  }  // 1
set_indices :: (main: *ArrayOccluder3D, indices: PackedInt32Array) { sys_call("ArrayOccluder3D", "set_indices", 3614634198, Nil, main.p_object, indices);  }  // 2

set_ratio :: (main: *AspectRatioContainer, ratio: float) { sys_call("AspectRatioContainer", "set_ratio", 373806689, Nil, main.p_object, ratio);  }  // 0
get_ratio :: (main: *AspectRatioContainer) -> float { call_ret := cast(*float) sys_call("AspectRatioContainer", "get_ratio", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_stretch_mode :: (main: *AspectRatioContainer, stretch_mode: AspectRatioContainer.StretchMode) { sys_call("AspectRatioContainer", "set_stretch_mode", 1876743467, Nil, main.p_object, stretch_mode);  }  // 2
get_stretch_mode :: (main: *AspectRatioContainer) -> AspectRatioContainer.StretchMode { call_ret := cast(*AspectRatioContainer.StretchMode) sys_call("AspectRatioContainer", "get_stretch_mode", 3416449033, AspectRatioContainer.StretchMode, main.p_object); return call_ret.*; }  // 3
set_alignment_horizontal :: (main: *AspectRatioContainer, alignment_horizontal: AspectRatioContainer.AlignmentMode) { sys_call("AspectRatioContainer", "set_alignment_horizontal", 2147829016, Nil, main.p_object, alignment_horizontal);  }  // 4
get_alignment_horizontal :: (main: *AspectRatioContainer) -> AspectRatioContainer.AlignmentMode { call_ret := cast(*AspectRatioContainer.AlignmentMode) sys_call("AspectRatioContainer", "get_alignment_horizontal", 3838875429, AspectRatioContainer.AlignmentMode, main.p_object); return call_ret.*; }  // 5
set_alignment_vertical :: (main: *AspectRatioContainer, alignment_vertical: AspectRatioContainer.AlignmentMode) { sys_call("AspectRatioContainer", "set_alignment_vertical", 2147829016, Nil, main.p_object, alignment_vertical);  }  // 6
get_alignment_vertical :: (main: *AspectRatioContainer) -> AspectRatioContainer.AlignmentMode { call_ret := cast(*AspectRatioContainer.AlignmentMode) sys_call("AspectRatioContainer", "get_alignment_vertical", 3838875429, AspectRatioContainer.AlignmentMode, main.p_object); return call_ret.*; }  // 7

set_atlas :: (main: *AtlasTexture, atlas: Texture2D) { sys_call("AtlasTexture", "set_atlas", 4051416890, Nil, main.p_object, atlas);  }  // 0
get_atlas :: (main: *AtlasTexture) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("AtlasTexture", "get_atlas", 3635182373, Texture2D, main.p_object); return call_ret; }  // 1
set_region :: (main: *AtlasTexture, region: Rect2) { sys_call("AtlasTexture", "set_region", 2046264180, Nil, main.p_object, region);  }  // 2
get_region :: (main: *AtlasTexture) -> Rect2 { call_ret := cast(*Rect2) sys_call("AtlasTexture", "get_region", 1639390495, Rect2, main.p_object); return call_ret.*; }  // 3
set_margin :: (main: *AtlasTexture, margin: Rect2) { sys_call("AtlasTexture", "set_margin", 2046264180, Nil, main.p_object, margin);  }  // 4
get_margin :: (main: *AtlasTexture) -> Rect2 { call_ret := cast(*Rect2) sys_call("AtlasTexture", "get_margin", 1639390495, Rect2, main.p_object); return call_ret.*; }  // 5
set_filter_clip :: (main: *AtlasTexture, enable: bool) { sys_call("AtlasTexture", "set_filter_clip", 2586408642, Nil, main.p_object, enable);  }  // 6
has_filter_clip :: (main: *AtlasTexture) -> bool { call_ret := cast(*bool) sys_call("AtlasTexture", "has_filter_clip", 36873697, bool, main.p_object); return call_ret.*; }  // 7



set_volume_db :: (main: *AudioEffectAmplify, volume: float) { sys_call("AudioEffectAmplify", "set_volume_db", 373806689, Nil, main.p_object, volume);  }  // 0
get_volume_db :: (main: *AudioEffectAmplify) -> float { call_ret := cast(*float) sys_call("AudioEffectAmplify", "get_volume_db", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_volume_linear :: (main: *AudioEffectAmplify, volume: float) { sys_call("AudioEffectAmplify", "set_volume_linear", 373806689, Nil, main.p_object, volume);  }  // 2
get_volume_linear :: (main: *AudioEffectAmplify) -> float { call_ret := cast(*float) sys_call("AudioEffectAmplify", "get_volume_linear", 1740695150, float, main.p_object); return call_ret.*; }  // 3



can_get_buffer :: (main: *AudioEffectCapture, frames: int) -> bool { call_ret := cast(*bool) sys_call("AudioEffectCapture", "can_get_buffer", 1116898809, bool, main.p_object, frames); return call_ret.*; }  // 0
get_buffer :: (main: *AudioEffectCapture, frames: int) -> PackedVector2Array { call_ret := cast(*PackedVector2Array) sys_call("AudioEffectCapture", "get_buffer", 2649534757, PackedVector2Array, main.p_object, frames); return call_ret.*; }  // 1
clear_buffer :: (main: *AudioEffectCapture) { sys_call("AudioEffectCapture", "clear_buffer", 3218959716, Nil, main.p_object);  }  // 2
set_buffer_length :: (main: *AudioEffectCapture, buffer_length_seconds: float) { sys_call("AudioEffectCapture", "set_buffer_length", 373806689, Nil, main.p_object, buffer_length_seconds);  }  // 3
get_buffer_length :: (main: *AudioEffectCapture) -> float { call_ret := cast(*float) sys_call("AudioEffectCapture", "get_buffer_length", 191475506, float, main.p_object); return call_ret.*; }  // 4
get_frames_available :: (main: *AudioEffectCapture) -> int { call_ret := cast(*int) sys_call("AudioEffectCapture", "get_frames_available", 3905245786, int, main.p_object); return call_ret.*; }  // 5
get_discarded_frames :: (main: *AudioEffectCapture) -> int { call_ret := cast(*int) sys_call("AudioEffectCapture", "get_discarded_frames", 3905245786, int, main.p_object); return call_ret.*; }  // 6
get_buffer_length_frames :: (main: *AudioEffectCapture) -> int { call_ret := cast(*int) sys_call("AudioEffectCapture", "get_buffer_length_frames", 3905245786, int, main.p_object); return call_ret.*; }  // 7
get_pushed_frames :: (main: *AudioEffectCapture) -> int { call_ret := cast(*int) sys_call("AudioEffectCapture", "get_pushed_frames", 3905245786, int, main.p_object); return call_ret.*; }  // 8

set_voice_count :: (main: *AudioEffectChorus, voices: int) { sys_call("AudioEffectChorus", "set_voice_count", 1286410249, Nil, main.p_object, voices);  }  // 0
get_voice_count :: (main: *AudioEffectChorus) -> int { call_ret := cast(*int) sys_call("AudioEffectChorus", "get_voice_count", 3905245786, int, main.p_object); return call_ret.*; }  // 1
set_voice_delay_ms :: (main: *AudioEffectChorus, voice_idx: int, delay_ms: float) { sys_call("AudioEffectChorus", "set_voice_delay_ms", 1602489585, Nil, main.p_object, voice_idx, delay_ms);  }  // 2
get_voice_delay_ms :: (main: *AudioEffectChorus, voice_idx: int) -> float { call_ret := cast(*float) sys_call("AudioEffectChorus", "get_voice_delay_ms", 2339986948, float, main.p_object, voice_idx); return call_ret.*; }  // 3
set_voice_rate_hz :: (main: *AudioEffectChorus, voice_idx: int, rate_hz: float) { sys_call("AudioEffectChorus", "set_voice_rate_hz", 1602489585, Nil, main.p_object, voice_idx, rate_hz);  }  // 4
get_voice_rate_hz :: (main: *AudioEffectChorus, voice_idx: int) -> float { call_ret := cast(*float) sys_call("AudioEffectChorus", "get_voice_rate_hz", 2339986948, float, main.p_object, voice_idx); return call_ret.*; }  // 5
set_voice_depth_ms :: (main: *AudioEffectChorus, voice_idx: int, depth_ms: float) { sys_call("AudioEffectChorus", "set_voice_depth_ms", 1602489585, Nil, main.p_object, voice_idx, depth_ms);  }  // 6
get_voice_depth_ms :: (main: *AudioEffectChorus, voice_idx: int) -> float { call_ret := cast(*float) sys_call("AudioEffectChorus", "get_voice_depth_ms", 2339986948, float, main.p_object, voice_idx); return call_ret.*; }  // 7
set_voice_level_db :: (main: *AudioEffectChorus, voice_idx: int, level_db: float) { sys_call("AudioEffectChorus", "set_voice_level_db", 1602489585, Nil, main.p_object, voice_idx, level_db);  }  // 8
get_voice_level_db :: (main: *AudioEffectChorus, voice_idx: int) -> float { call_ret := cast(*float) sys_call("AudioEffectChorus", "get_voice_level_db", 2339986948, float, main.p_object, voice_idx); return call_ret.*; }  // 9
set_voice_cutoff_hz :: (main: *AudioEffectChorus, voice_idx: int, cutoff_hz: float) { sys_call("AudioEffectChorus", "set_voice_cutoff_hz", 1602489585, Nil, main.p_object, voice_idx, cutoff_hz);  }  // 10
get_voice_cutoff_hz :: (main: *AudioEffectChorus, voice_idx: int) -> float { call_ret := cast(*float) sys_call("AudioEffectChorus", "get_voice_cutoff_hz", 2339986948, float, main.p_object, voice_idx); return call_ret.*; }  // 11
set_voice_pan :: (main: *AudioEffectChorus, voice_idx: int, pan: float) { sys_call("AudioEffectChorus", "set_voice_pan", 1602489585, Nil, main.p_object, voice_idx, pan);  }  // 12
get_voice_pan :: (main: *AudioEffectChorus, voice_idx: int) -> float { call_ret := cast(*float) sys_call("AudioEffectChorus", "get_voice_pan", 2339986948, float, main.p_object, voice_idx); return call_ret.*; }  // 13
set_wet :: (main: *AudioEffectChorus, amount: float) { sys_call("AudioEffectChorus", "set_wet", 373806689, Nil, main.p_object, amount);  }  // 14
get_wet :: (main: *AudioEffectChorus) -> float { call_ret := cast(*float) sys_call("AudioEffectChorus", "get_wet", 1740695150, float, main.p_object); return call_ret.*; }  // 15
set_dry :: (main: *AudioEffectChorus, amount: float) { sys_call("AudioEffectChorus", "set_dry", 373806689, Nil, main.p_object, amount);  }  // 16
get_dry :: (main: *AudioEffectChorus) -> float { call_ret := cast(*float) sys_call("AudioEffectChorus", "get_dry", 1740695150, float, main.p_object); return call_ret.*; }  // 17

set_threshold :: (main: *AudioEffectCompressor, threshold: float) { sys_call("AudioEffectCompressor", "set_threshold", 373806689, Nil, main.p_object, threshold);  }  // 0
get_threshold :: (main: *AudioEffectCompressor) -> float { call_ret := cast(*float) sys_call("AudioEffectCompressor", "get_threshold", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_ratio :: (main: *AudioEffectCompressor, ratio: float) { sys_call("AudioEffectCompressor", "set_ratio", 373806689, Nil, main.p_object, ratio);  }  // 2
get_ratio :: (main: *AudioEffectCompressor) -> float { call_ret := cast(*float) sys_call("AudioEffectCompressor", "get_ratio", 1740695150, float, main.p_object); return call_ret.*; }  // 3
set_gain :: (main: *AudioEffectCompressor, gain: float) { sys_call("AudioEffectCompressor", "set_gain", 373806689, Nil, main.p_object, gain);  }  // 4
get_gain :: (main: *AudioEffectCompressor) -> float { call_ret := cast(*float) sys_call("AudioEffectCompressor", "get_gain", 1740695150, float, main.p_object); return call_ret.*; }  // 5
set_attack_us :: (main: *AudioEffectCompressor, attack_us: float) { sys_call("AudioEffectCompressor", "set_attack_us", 373806689, Nil, main.p_object, attack_us);  }  // 6
get_attack_us :: (main: *AudioEffectCompressor) -> float { call_ret := cast(*float) sys_call("AudioEffectCompressor", "get_attack_us", 1740695150, float, main.p_object); return call_ret.*; }  // 7
set_release_ms :: (main: *AudioEffectCompressor, release_ms: float) { sys_call("AudioEffectCompressor", "set_release_ms", 373806689, Nil, main.p_object, release_ms);  }  // 8
get_release_ms :: (main: *AudioEffectCompressor) -> float { call_ret := cast(*float) sys_call("AudioEffectCompressor", "get_release_ms", 1740695150, float, main.p_object); return call_ret.*; }  // 9
set_mix :: (main: *AudioEffectCompressor, mix: float) { sys_call("AudioEffectCompressor", "set_mix", 373806689, Nil, main.p_object, mix);  }  // 10
get_mix :: (main: *AudioEffectCompressor) -> float { call_ret := cast(*float) sys_call("AudioEffectCompressor", "get_mix", 1740695150, float, main.p_object); return call_ret.*; }  // 11
set_sidechain :: (main: *AudioEffectCompressor, sidechain: string) { sys_call("AudioEffectCompressor", "set_sidechain", 3304788590, Nil, main.p_object, sidechain);  }  // 12
get_sidechain :: (main: *AudioEffectCompressor) -> StringName { call_ret := cast(*StringName) sys_call("AudioEffectCompressor", "get_sidechain", 2002593661, StringName, main.p_object); return call_ret.*; }  // 13

set_dry :: (main: *AudioEffectDelay, amount: float) { sys_call("AudioEffectDelay", "set_dry", 373806689, Nil, main.p_object, amount);  }  // 0
get_dry :: (main: *AudioEffectDelay) -> float { call_ret := cast(*float) sys_call("AudioEffectDelay", "get_dry", 191475506, float, main.p_object); return call_ret.*; }  // 1
set_tap1_active :: (main: *AudioEffectDelay, amount: bool) { sys_call("AudioEffectDelay", "set_tap1_active", 2586408642, Nil, main.p_object, amount);  }  // 2
is_tap1_active :: (main: *AudioEffectDelay) -> bool { call_ret := cast(*bool) sys_call("AudioEffectDelay", "is_tap1_active", 36873697, bool, main.p_object); return call_ret.*; }  // 3
set_tap1_delay_ms :: (main: *AudioEffectDelay, amount: float) { sys_call("AudioEffectDelay", "set_tap1_delay_ms", 373806689, Nil, main.p_object, amount);  }  // 4
get_tap1_delay_ms :: (main: *AudioEffectDelay) -> float { call_ret := cast(*float) sys_call("AudioEffectDelay", "get_tap1_delay_ms", 1740695150, float, main.p_object); return call_ret.*; }  // 5
set_tap1_level_db :: (main: *AudioEffectDelay, amount: float) { sys_call("AudioEffectDelay", "set_tap1_level_db", 373806689, Nil, main.p_object, amount);  }  // 6
get_tap1_level_db :: (main: *AudioEffectDelay) -> float { call_ret := cast(*float) sys_call("AudioEffectDelay", "get_tap1_level_db", 1740695150, float, main.p_object); return call_ret.*; }  // 7
set_tap1_pan :: (main: *AudioEffectDelay, amount: float) { sys_call("AudioEffectDelay", "set_tap1_pan", 373806689, Nil, main.p_object, amount);  }  // 8
get_tap1_pan :: (main: *AudioEffectDelay) -> float { call_ret := cast(*float) sys_call("AudioEffectDelay", "get_tap1_pan", 1740695150, float, main.p_object); return call_ret.*; }  // 9
set_tap2_active :: (main: *AudioEffectDelay, amount: bool) { sys_call("AudioEffectDelay", "set_tap2_active", 2586408642, Nil, main.p_object, amount);  }  // 10
is_tap2_active :: (main: *AudioEffectDelay) -> bool { call_ret := cast(*bool) sys_call("AudioEffectDelay", "is_tap2_active", 36873697, bool, main.p_object); return call_ret.*; }  // 11
set_tap2_delay_ms :: (main: *AudioEffectDelay, amount: float) { sys_call("AudioEffectDelay", "set_tap2_delay_ms", 373806689, Nil, main.p_object, amount);  }  // 12
get_tap2_delay_ms :: (main: *AudioEffectDelay) -> float { call_ret := cast(*float) sys_call("AudioEffectDelay", "get_tap2_delay_ms", 1740695150, float, main.p_object); return call_ret.*; }  // 13
set_tap2_level_db :: (main: *AudioEffectDelay, amount: float) { sys_call("AudioEffectDelay", "set_tap2_level_db", 373806689, Nil, main.p_object, amount);  }  // 14
get_tap2_level_db :: (main: *AudioEffectDelay) -> float { call_ret := cast(*float) sys_call("AudioEffectDelay", "get_tap2_level_db", 1740695150, float, main.p_object); return call_ret.*; }  // 15
set_tap2_pan :: (main: *AudioEffectDelay, amount: float) { sys_call("AudioEffectDelay", "set_tap2_pan", 373806689, Nil, main.p_object, amount);  }  // 16
get_tap2_pan :: (main: *AudioEffectDelay) -> float { call_ret := cast(*float) sys_call("AudioEffectDelay", "get_tap2_pan", 1740695150, float, main.p_object); return call_ret.*; }  // 17
set_feedback_active :: (main: *AudioEffectDelay, amount: bool) { sys_call("AudioEffectDelay", "set_feedback_active", 2586408642, Nil, main.p_object, amount);  }  // 18
is_feedback_active :: (main: *AudioEffectDelay) -> bool { call_ret := cast(*bool) sys_call("AudioEffectDelay", "is_feedback_active", 36873697, bool, main.p_object); return call_ret.*; }  // 19
set_feedback_delay_ms :: (main: *AudioEffectDelay, amount: float) { sys_call("AudioEffectDelay", "set_feedback_delay_ms", 373806689, Nil, main.p_object, amount);  }  // 20
get_feedback_delay_ms :: (main: *AudioEffectDelay) -> float { call_ret := cast(*float) sys_call("AudioEffectDelay", "get_feedback_delay_ms", 1740695150, float, main.p_object); return call_ret.*; }  // 21
set_feedback_level_db :: (main: *AudioEffectDelay, amount: float) { sys_call("AudioEffectDelay", "set_feedback_level_db", 373806689, Nil, main.p_object, amount);  }  // 22
get_feedback_level_db :: (main: *AudioEffectDelay) -> float { call_ret := cast(*float) sys_call("AudioEffectDelay", "get_feedback_level_db", 1740695150, float, main.p_object); return call_ret.*; }  // 23
set_feedback_lowpass :: (main: *AudioEffectDelay, amount: float) { sys_call("AudioEffectDelay", "set_feedback_lowpass", 373806689, Nil, main.p_object, amount);  }  // 24
get_feedback_lowpass :: (main: *AudioEffectDelay) -> float { call_ret := cast(*float) sys_call("AudioEffectDelay", "get_feedback_lowpass", 1740695150, float, main.p_object); return call_ret.*; }  // 25

set_mode :: (main: *AudioEffectDistortion, mode: AudioEffectDistortion.Mode) { sys_call("AudioEffectDistortion", "set_mode", 1314744793, Nil, main.p_object, mode);  }  // 0
get_mode :: (main: *AudioEffectDistortion) -> AudioEffectDistortion.Mode { call_ret := cast(*AudioEffectDistortion.Mode) sys_call("AudioEffectDistortion", "get_mode", 809118343, AudioEffectDistortion.Mode, main.p_object); return call_ret.*; }  // 1
set_pre_gain :: (main: *AudioEffectDistortion, pre_gain: float) { sys_call("AudioEffectDistortion", "set_pre_gain", 373806689, Nil, main.p_object, pre_gain);  }  // 2
get_pre_gain :: (main: *AudioEffectDistortion) -> float { call_ret := cast(*float) sys_call("AudioEffectDistortion", "get_pre_gain", 1740695150, float, main.p_object); return call_ret.*; }  // 3
set_keep_hf_hz :: (main: *AudioEffectDistortion, keep_hf_hz: float) { sys_call("AudioEffectDistortion", "set_keep_hf_hz", 373806689, Nil, main.p_object, keep_hf_hz);  }  // 4
get_keep_hf_hz :: (main: *AudioEffectDistortion) -> float { call_ret := cast(*float) sys_call("AudioEffectDistortion", "get_keep_hf_hz", 1740695150, float, main.p_object); return call_ret.*; }  // 5
set_drive :: (main: *AudioEffectDistortion, drive: float) { sys_call("AudioEffectDistortion", "set_drive", 373806689, Nil, main.p_object, drive);  }  // 6
get_drive :: (main: *AudioEffectDistortion) -> float { call_ret := cast(*float) sys_call("AudioEffectDistortion", "get_drive", 1740695150, float, main.p_object); return call_ret.*; }  // 7
set_post_gain :: (main: *AudioEffectDistortion, post_gain: float) { sys_call("AudioEffectDistortion", "set_post_gain", 373806689, Nil, main.p_object, post_gain);  }  // 8
get_post_gain :: (main: *AudioEffectDistortion) -> float { call_ret := cast(*float) sys_call("AudioEffectDistortion", "get_post_gain", 1740695150, float, main.p_object); return call_ret.*; }  // 9

set_band_gain_db :: (main: *AudioEffectEQ, band_idx: int, volume_db: float) { sys_call("AudioEffectEQ", "set_band_gain_db", 1602489585, Nil, main.p_object, band_idx, volume_db);  }  // 0
get_band_gain_db :: (main: *AudioEffectEQ, band_idx: int) -> float { call_ret := cast(*float) sys_call("AudioEffectEQ", "get_band_gain_db", 2339986948, float, main.p_object, band_idx); return call_ret.*; }  // 1
get_band_count :: (main: *AudioEffectEQ) -> int { call_ret := cast(*int) sys_call("AudioEffectEQ", "get_band_count", 3905245786, int, main.p_object); return call_ret.*; }  // 2




set_cutoff :: (main: *AudioEffectFilter, freq: float) { sys_call("AudioEffectFilter", "set_cutoff", 373806689, Nil, main.p_object, freq);  }  // 0
get_cutoff :: (main: *AudioEffectFilter) -> float { call_ret := cast(*float) sys_call("AudioEffectFilter", "get_cutoff", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_resonance :: (main: *AudioEffectFilter, amount: float) { sys_call("AudioEffectFilter", "set_resonance", 373806689, Nil, main.p_object, amount);  }  // 2
get_resonance :: (main: *AudioEffectFilter) -> float { call_ret := cast(*float) sys_call("AudioEffectFilter", "get_resonance", 1740695150, float, main.p_object); return call_ret.*; }  // 3
set_gain :: (main: *AudioEffectFilter, amount: float) { sys_call("AudioEffectFilter", "set_gain", 373806689, Nil, main.p_object, amount);  }  // 4
get_gain :: (main: *AudioEffectFilter) -> float { call_ret := cast(*float) sys_call("AudioEffectFilter", "get_gain", 1740695150, float, main.p_object); return call_ret.*; }  // 5
set_db :: (main: *AudioEffectFilter, amount: AudioEffectFilter.FilterDB) { sys_call("AudioEffectFilter", "set_db", 771740901, Nil, main.p_object, amount);  }  // 6
get_db :: (main: *AudioEffectFilter) -> AudioEffectFilter.FilterDB { call_ret := cast(*AudioEffectFilter.FilterDB) sys_call("AudioEffectFilter", "get_db", 3981721890, AudioEffectFilter.FilterDB, main.p_object); return call_ret.*; }  // 7

set_ceiling_db :: (main: *AudioEffectHardLimiter, ceiling: float) { sys_call("AudioEffectHardLimiter", "set_ceiling_db", 373806689, Nil, main.p_object, ceiling);  }  // 0
get_ceiling_db :: (main: *AudioEffectHardLimiter) -> float { call_ret := cast(*float) sys_call("AudioEffectHardLimiter", "get_ceiling_db", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_pre_gain_db :: (main: *AudioEffectHardLimiter, p_pre_gain: float) { sys_call("AudioEffectHardLimiter", "set_pre_gain_db", 373806689, Nil, main.p_object, p_pre_gain);  }  // 2
get_pre_gain_db :: (main: *AudioEffectHardLimiter) -> float { call_ret := cast(*float) sys_call("AudioEffectHardLimiter", "get_pre_gain_db", 1740695150, float, main.p_object); return call_ret.*; }  // 3
set_release :: (main: *AudioEffectHardLimiter, p_release: float) { sys_call("AudioEffectHardLimiter", "set_release", 373806689, Nil, main.p_object, p_release);  }  // 4
get_release :: (main: *AudioEffectHardLimiter) -> float { call_ret := cast(*float) sys_call("AudioEffectHardLimiter", "get_release", 1740695150, float, main.p_object); return call_ret.*; }  // 5




set_ceiling_db :: (main: *AudioEffectLimiter, ceiling: float) { sys_call("AudioEffectLimiter", "set_ceiling_db", 373806689, Nil, main.p_object, ceiling);  }  // 0
get_ceiling_db :: (main: *AudioEffectLimiter) -> float { call_ret := cast(*float) sys_call("AudioEffectLimiter", "get_ceiling_db", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_threshold_db :: (main: *AudioEffectLimiter, threshold: float) { sys_call("AudioEffectLimiter", "set_threshold_db", 373806689, Nil, main.p_object, threshold);  }  // 2
get_threshold_db :: (main: *AudioEffectLimiter) -> float { call_ret := cast(*float) sys_call("AudioEffectLimiter", "get_threshold_db", 1740695150, float, main.p_object); return call_ret.*; }  // 3
set_soft_clip_db :: (main: *AudioEffectLimiter, soft_clip: float) { sys_call("AudioEffectLimiter", "set_soft_clip_db", 373806689, Nil, main.p_object, soft_clip);  }  // 4
get_soft_clip_db :: (main: *AudioEffectLimiter) -> float { call_ret := cast(*float) sys_call("AudioEffectLimiter", "get_soft_clip_db", 1740695150, float, main.p_object); return call_ret.*; }  // 5
set_soft_clip_ratio :: (main: *AudioEffectLimiter, soft_clip: float) { sys_call("AudioEffectLimiter", "set_soft_clip_ratio", 373806689, Nil, main.p_object, soft_clip);  }  // 6
get_soft_clip_ratio :: (main: *AudioEffectLimiter) -> float { call_ret := cast(*float) sys_call("AudioEffectLimiter", "get_soft_clip_ratio", 1740695150, float, main.p_object); return call_ret.*; }  // 7




set_pan :: (main: *AudioEffectPanner, cpanume: float) { sys_call("AudioEffectPanner", "set_pan", 373806689, Nil, main.p_object, cpanume);  }  // 0
get_pan :: (main: *AudioEffectPanner) -> float { call_ret := cast(*float) sys_call("AudioEffectPanner", "get_pan", 1740695150, float, main.p_object); return call_ret.*; }  // 1

set_range_min_hz :: (main: *AudioEffectPhaser, hz: float) { sys_call("AudioEffectPhaser", "set_range_min_hz", 373806689, Nil, main.p_object, hz);  }  // 0
get_range_min_hz :: (main: *AudioEffectPhaser) -> float { call_ret := cast(*float) sys_call("AudioEffectPhaser", "get_range_min_hz", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_range_max_hz :: (main: *AudioEffectPhaser, hz: float) { sys_call("AudioEffectPhaser", "set_range_max_hz", 373806689, Nil, main.p_object, hz);  }  // 2
get_range_max_hz :: (main: *AudioEffectPhaser) -> float { call_ret := cast(*float) sys_call("AudioEffectPhaser", "get_range_max_hz", 1740695150, float, main.p_object); return call_ret.*; }  // 3
set_rate_hz :: (main: *AudioEffectPhaser, hz: float) { sys_call("AudioEffectPhaser", "set_rate_hz", 373806689, Nil, main.p_object, hz);  }  // 4
get_rate_hz :: (main: *AudioEffectPhaser) -> float { call_ret := cast(*float) sys_call("AudioEffectPhaser", "get_rate_hz", 1740695150, float, main.p_object); return call_ret.*; }  // 5
set_feedback :: (main: *AudioEffectPhaser, fbk: float) { sys_call("AudioEffectPhaser", "set_feedback", 373806689, Nil, main.p_object, fbk);  }  // 6
get_feedback :: (main: *AudioEffectPhaser) -> float { call_ret := cast(*float) sys_call("AudioEffectPhaser", "get_feedback", 1740695150, float, main.p_object); return call_ret.*; }  // 7
set_depth :: (main: *AudioEffectPhaser, depth: float) { sys_call("AudioEffectPhaser", "set_depth", 373806689, Nil, main.p_object, depth);  }  // 8
get_depth :: (main: *AudioEffectPhaser) -> float { call_ret := cast(*float) sys_call("AudioEffectPhaser", "get_depth", 1740695150, float, main.p_object); return call_ret.*; }  // 9

set_pitch_scale :: (main: *AudioEffectPitchShift, rate: float) { sys_call("AudioEffectPitchShift", "set_pitch_scale", 373806689, Nil, main.p_object, rate);  }  // 0
get_pitch_scale :: (main: *AudioEffectPitchShift) -> float { call_ret := cast(*float) sys_call("AudioEffectPitchShift", "get_pitch_scale", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_oversampling :: (main: *AudioEffectPitchShift, amount: int) { sys_call("AudioEffectPitchShift", "set_oversampling", 1286410249, Nil, main.p_object, amount);  }  // 2
get_oversampling :: (main: *AudioEffectPitchShift) -> int { call_ret := cast(*int) sys_call("AudioEffectPitchShift", "get_oversampling", 3905245786, int, main.p_object); return call_ret.*; }  // 3
set_fft_size :: (main: *AudioEffectPitchShift, size: AudioEffectPitchShift.FFTSize) { sys_call("AudioEffectPitchShift", "set_fft_size", 2323518741, Nil, main.p_object, size);  }  // 4
get_fft_size :: (main: *AudioEffectPitchShift) -> AudioEffectPitchShift.FFTSize { call_ret := cast(*AudioEffectPitchShift.FFTSize) sys_call("AudioEffectPitchShift", "get_fft_size", 2361246789, AudioEffectPitchShift.FFTSize, main.p_object); return call_ret.*; }  // 5

set_recording_active :: (main: *AudioEffectRecord, record: bool) { sys_call("AudioEffectRecord", "set_recording_active", 2586408642, Nil, main.p_object, record);  }  // 0
is_recording_active :: (main: *AudioEffectRecord) -> bool { call_ret := cast(*bool) sys_call("AudioEffectRecord", "is_recording_active", 36873697, bool, main.p_object); return call_ret.*; }  // 1
set_format :: (main: *AudioEffectRecord, format: AudioStreamWAV.Format) { sys_call("AudioEffectRecord", "set_format", 60648488, Nil, main.p_object, format);  }  // 2
get_format :: (main: *AudioEffectRecord) -> AudioStreamWAV.Format { call_ret := cast(*AudioStreamWAV.Format) sys_call("AudioEffectRecord", "get_format", 3151724922, AudioStreamWAV.Format, main.p_object); return call_ret.*; }  // 3
get_recording :: (main: *AudioEffectRecord) -> *AudioStreamWAV { call_ret := cast(*AudioStreamWAV) sys_call("AudioEffectRecord", "get_recording", 2964110865, AudioStreamWAV, main.p_object); return call_ret; }  // 4

set_predelay_msec :: (main: *AudioEffectReverb, msec: float) { sys_call("AudioEffectReverb", "set_predelay_msec", 373806689, Nil, main.p_object, msec);  }  // 0
get_predelay_msec :: (main: *AudioEffectReverb) -> float { call_ret := cast(*float) sys_call("AudioEffectReverb", "get_predelay_msec", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_predelay_feedback :: (main: *AudioEffectReverb, feedback: float) { sys_call("AudioEffectReverb", "set_predelay_feedback", 373806689, Nil, main.p_object, feedback);  }  // 2
get_predelay_feedback :: (main: *AudioEffectReverb) -> float { call_ret := cast(*float) sys_call("AudioEffectReverb", "get_predelay_feedback", 1740695150, float, main.p_object); return call_ret.*; }  // 3
set_room_size :: (main: *AudioEffectReverb, size: float) { sys_call("AudioEffectReverb", "set_room_size", 373806689, Nil, main.p_object, size);  }  // 4
get_room_size :: (main: *AudioEffectReverb) -> float { call_ret := cast(*float) sys_call("AudioEffectReverb", "get_room_size", 1740695150, float, main.p_object); return call_ret.*; }  // 5
set_damping :: (main: *AudioEffectReverb, amount: float) { sys_call("AudioEffectReverb", "set_damping", 373806689, Nil, main.p_object, amount);  }  // 6
get_damping :: (main: *AudioEffectReverb) -> float { call_ret := cast(*float) sys_call("AudioEffectReverb", "get_damping", 1740695150, float, main.p_object); return call_ret.*; }  // 7
set_spread :: (main: *AudioEffectReverb, amount: float) { sys_call("AudioEffectReverb", "set_spread", 373806689, Nil, main.p_object, amount);  }  // 8
get_spread :: (main: *AudioEffectReverb) -> float { call_ret := cast(*float) sys_call("AudioEffectReverb", "get_spread", 1740695150, float, main.p_object); return call_ret.*; }  // 9
set_dry :: (main: *AudioEffectReverb, amount: float) { sys_call("AudioEffectReverb", "set_dry", 373806689, Nil, main.p_object, amount);  }  // 10
get_dry :: (main: *AudioEffectReverb) -> float { call_ret := cast(*float) sys_call("AudioEffectReverb", "get_dry", 1740695150, float, main.p_object); return call_ret.*; }  // 11
set_wet :: (main: *AudioEffectReverb, amount: float) { sys_call("AudioEffectReverb", "set_wet", 373806689, Nil, main.p_object, amount);  }  // 12
get_wet :: (main: *AudioEffectReverb) -> float { call_ret := cast(*float) sys_call("AudioEffectReverb", "get_wet", 1740695150, float, main.p_object); return call_ret.*; }  // 13
set_hpf :: (main: *AudioEffectReverb, amount: float) { sys_call("AudioEffectReverb", "set_hpf", 373806689, Nil, main.p_object, amount);  }  // 14
get_hpf :: (main: *AudioEffectReverb) -> float { call_ret := cast(*float) sys_call("AudioEffectReverb", "get_hpf", 1740695150, float, main.p_object); return call_ret.*; }  // 15

set_buffer_length :: (main: *AudioEffectSpectrumAnalyzer, seconds: float) { sys_call("AudioEffectSpectrumAnalyzer", "set_buffer_length", 373806689, Nil, main.p_object, seconds);  }  // 0
get_buffer_length :: (main: *AudioEffectSpectrumAnalyzer) -> float { call_ret := cast(*float) sys_call("AudioEffectSpectrumAnalyzer", "get_buffer_length", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_tap_back_pos :: (main: *AudioEffectSpectrumAnalyzer, seconds: float) { sys_call("AudioEffectSpectrumAnalyzer", "set_tap_back_pos", 373806689, Nil, main.p_object, seconds);  }  // 2
get_tap_back_pos :: (main: *AudioEffectSpectrumAnalyzer) -> float { call_ret := cast(*float) sys_call("AudioEffectSpectrumAnalyzer", "get_tap_back_pos", 1740695150, float, main.p_object); return call_ret.*; }  // 3
set_fft_size :: (main: *AudioEffectSpectrumAnalyzer, size: AudioEffectSpectrumAnalyzer.FFTSize) { sys_call("AudioEffectSpectrumAnalyzer", "set_fft_size", 1202879215, Nil, main.p_object, size);  }  // 4
get_fft_size :: (main: *AudioEffectSpectrumAnalyzer) -> AudioEffectSpectrumAnalyzer.FFTSize { call_ret := cast(*AudioEffectSpectrumAnalyzer.FFTSize) sys_call("AudioEffectSpectrumAnalyzer", "get_fft_size", 3925405343, AudioEffectSpectrumAnalyzer.FFTSize, main.p_object); return call_ret.*; }  // 5

get_magnitude_for_frequency_range :: (main: *AudioEffectSpectrumAnalyzerInstance, from_hz: float, to_hz: float) -> Vector2 { call_ret := cast(*Vector2) sys_call("AudioEffectSpectrumAnalyzerInstance", "get_magnitude_for_frequency_range", 797993915, Vector2, main.p_object, from_hz, to_hz); return call_ret.*; }  // 0

set_pan_pullout :: (main: *AudioEffectStereoEnhance, amount: float) { sys_call("AudioEffectStereoEnhance", "set_pan_pullout", 373806689, Nil, main.p_object, amount);  }  // 0
get_pan_pullout :: (main: *AudioEffectStereoEnhance) -> float { call_ret := cast(*float) sys_call("AudioEffectStereoEnhance", "get_pan_pullout", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_time_pullout :: (main: *AudioEffectStereoEnhance, amount: float) { sys_call("AudioEffectStereoEnhance", "set_time_pullout", 373806689, Nil, main.p_object, amount);  }  // 2
get_time_pullout :: (main: *AudioEffectStereoEnhance) -> float { call_ret := cast(*float) sys_call("AudioEffectStereoEnhance", "get_time_pullout", 1740695150, float, main.p_object); return call_ret.*; }  // 3
set_surround :: (main: *AudioEffectStereoEnhance, amount: float) { sys_call("AudioEffectStereoEnhance", "set_surround", 373806689, Nil, main.p_object, amount);  }  // 4
get_surround :: (main: *AudioEffectStereoEnhance) -> float { call_ret := cast(*float) sys_call("AudioEffectStereoEnhance", "get_surround", 1740695150, float, main.p_object); return call_ret.*; }  // 5

make_current :: (main: *AudioListener2D) { sys_call("AudioListener2D", "make_current", 3218959716, Nil, main.p_object);  }  // 0
clear_current :: (main: *AudioListener2D) { sys_call("AudioListener2D", "clear_current", 3218959716, Nil, main.p_object);  }  // 1
is_current :: (main: *AudioListener2D) -> bool { call_ret := cast(*bool) sys_call("AudioListener2D", "is_current", 36873697, bool, main.p_object); return call_ret.*; }  // 2

make_current :: (main: *AudioListener3D) { sys_call("AudioListener3D", "make_current", 3218959716, Nil, main.p_object);  }  // 0
clear_current :: (main: *AudioListener3D) { sys_call("AudioListener3D", "clear_current", 3218959716, Nil, main.p_object);  }  // 1
is_current :: (main: *AudioListener3D) -> bool { call_ret := cast(*bool) sys_call("AudioListener3D", "is_current", 36873697, bool, main.p_object); return call_ret.*; }  // 2
get_listener_transform :: (main: *AudioListener3D) -> Transform3D { call_ret := cast(*Transform3D) sys_call("AudioListener3D", "get_listener_transform", 3229777777, Transform3D, main.p_object); return call_ret.*; }  // 3



set_bus_count :: (main: *AudioServer, amount: int) { sys_call("AudioServer", "set_bus_count", 1286410249, Nil, main.p_object, amount);  }  // 0
get_bus_count :: (main: *AudioServer) -> int { call_ret := cast(*int) sys_call("AudioServer", "get_bus_count", 3905245786, int, main.p_object); return call_ret.*; }  // 1
remove_bus :: (main: *AudioServer, index: int) { sys_call("AudioServer", "remove_bus", 1286410249, Nil, main.p_object, index);  }  // 2
add_bus :: (main: *AudioServer) { sys_call("AudioServer", "add_bus", 1025054187, Nil, main.p_object);  }  // 3
move_bus :: (main: *AudioServer, index: int, to_index: int) { sys_call("AudioServer", "move_bus", 3937882851, Nil, main.p_object, index, to_index);  }  // 4
set_bus_name :: (main: *AudioServer, bus_idx: int, name: string) { sys_call("AudioServer", "set_bus_name", 501894301, Nil, main.p_object, bus_idx, name);  }  // 5
get_bus_name :: (main: *AudioServer, bus_idx: int) -> gstring { call_ret := cast(*gstring) sys_call("AudioServer", "get_bus_name", 844755477, gstring, main.p_object, bus_idx); return call_ret.*; }  // 6
get_bus_index :: (main: *AudioServer, bus_name: string) -> int { call_ret := cast(*int) sys_call("AudioServer", "get_bus_index", 2458036349, int, main.p_object, bus_name); return call_ret.*; }  // 7
get_bus_channels :: (main: *AudioServer, bus_idx: int) -> int { call_ret := cast(*int) sys_call("AudioServer", "get_bus_channels", 923996154, int, main.p_object, bus_idx); return call_ret.*; }  // 8
set_bus_volume_db :: (main: *AudioServer, bus_idx: int, volume_db: float) { sys_call("AudioServer", "set_bus_volume_db", 1602489585, Nil, main.p_object, bus_idx, volume_db);  }  // 9
get_bus_volume_db :: (main: *AudioServer, bus_idx: int) -> float { call_ret := cast(*float) sys_call("AudioServer", "get_bus_volume_db", 2339986948, float, main.p_object, bus_idx); return call_ret.*; }  // 10
set_bus_volume_linear :: (main: *AudioServer, bus_idx: int, volume_linear: float) { sys_call("AudioServer", "set_bus_volume_linear", 1602489585, Nil, main.p_object, bus_idx, volume_linear);  }  // 11
get_bus_volume_linear :: (main: *AudioServer, bus_idx: int) -> float { call_ret := cast(*float) sys_call("AudioServer", "get_bus_volume_linear", 2339986948, float, main.p_object, bus_idx); return call_ret.*; }  // 12
set_bus_send :: (main: *AudioServer, bus_idx: int, send: string) { sys_call("AudioServer", "set_bus_send", 3780747571, Nil, main.p_object, bus_idx, send);  }  // 13
get_bus_send :: (main: *AudioServer, bus_idx: int) -> StringName { call_ret := cast(*StringName) sys_call("AudioServer", "get_bus_send", 659327637, StringName, main.p_object, bus_idx); return call_ret.*; }  // 14
set_bus_solo :: (main: *AudioServer, bus_idx: int, enable: bool) { sys_call("AudioServer", "set_bus_solo", 300928843, Nil, main.p_object, bus_idx, enable);  }  // 15
is_bus_solo :: (main: *AudioServer, bus_idx: int) -> bool { call_ret := cast(*bool) sys_call("AudioServer", "is_bus_solo", 1116898809, bool, main.p_object, bus_idx); return call_ret.*; }  // 16
set_bus_mute :: (main: *AudioServer, bus_idx: int, enable: bool) { sys_call("AudioServer", "set_bus_mute", 300928843, Nil, main.p_object, bus_idx, enable);  }  // 17
is_bus_mute :: (main: *AudioServer, bus_idx: int) -> bool { call_ret := cast(*bool) sys_call("AudioServer", "is_bus_mute", 1116898809, bool, main.p_object, bus_idx); return call_ret.*; }  // 18
set_bus_bypass_effects :: (main: *AudioServer, bus_idx: int, enable: bool) { sys_call("AudioServer", "set_bus_bypass_effects", 300928843, Nil, main.p_object, bus_idx, enable);  }  // 19
is_bus_bypassing_effects :: (main: *AudioServer, bus_idx: int) -> bool { call_ret := cast(*bool) sys_call("AudioServer", "is_bus_bypassing_effects", 1116898809, bool, main.p_object, bus_idx); return call_ret.*; }  // 20
add_bus_effect :: (main: *AudioServer, bus_idx: int, effect: AudioEffect) { sys_call("AudioServer", "add_bus_effect", 4068819785, Nil, main.p_object, bus_idx, effect);  }  // 21
remove_bus_effect :: (main: *AudioServer, bus_idx: int, effect_idx: int) { sys_call("AudioServer", "remove_bus_effect", 3937882851, Nil, main.p_object, bus_idx, effect_idx);  }  // 22
get_bus_effect_count :: (main: *AudioServer, bus_idx: int) -> int { call_ret := cast(*int) sys_call("AudioServer", "get_bus_effect_count", 3744713108, int, main.p_object, bus_idx); return call_ret.*; }  // 23
get_bus_effect :: (main: *AudioServer, bus_idx: int, effect_idx: int) -> *AudioEffect { call_ret := cast(*AudioEffect) sys_call("AudioServer", "get_bus_effect", 726064442, AudioEffect, main.p_object, bus_idx, effect_idx); return call_ret; }  // 24
get_bus_effect_instance :: (main: *AudioServer, bus_idx: int, effect_idx: int) -> *AudioEffectInstance { call_ret := cast(*AudioEffectInstance) sys_call("AudioServer", "get_bus_effect_instance", 1829771234, AudioEffectInstance, main.p_object, bus_idx, effect_idx); return call_ret; }  // 25
swap_bus_effects :: (main: *AudioServer, bus_idx: int, effect_idx: int, by_effect_idx: int) { sys_call("AudioServer", "swap_bus_effects", 1649997291, Nil, main.p_object, bus_idx, effect_idx, by_effect_idx);  }  // 26
set_bus_effect_enabled :: (main: *AudioServer, bus_idx: int, effect_idx: int, enabled: bool) { sys_call("AudioServer", "set_bus_effect_enabled", 1383440665, Nil, main.p_object, bus_idx, effect_idx, enabled);  }  // 27
is_bus_effect_enabled :: (main: *AudioServer, bus_idx: int, effect_idx: int) -> bool { call_ret := cast(*bool) sys_call("AudioServer", "is_bus_effect_enabled", 2522259332, bool, main.p_object, bus_idx, effect_idx); return call_ret.*; }  // 28
get_bus_peak_volume_left_db :: (main: *AudioServer, bus_idx: int, channel: int) -> float { call_ret := cast(*float) sys_call("AudioServer", "get_bus_peak_volume_left_db", 3085491603, float, main.p_object, bus_idx, channel); return call_ret.*; }  // 29
get_bus_peak_volume_right_db :: (main: *AudioServer, bus_idx: int, channel: int) -> float { call_ret := cast(*float) sys_call("AudioServer", "get_bus_peak_volume_right_db", 3085491603, float, main.p_object, bus_idx, channel); return call_ret.*; }  // 30
set_playback_speed_scale :: (main: *AudioServer, scale: float) { sys_call("AudioServer", "set_playback_speed_scale", 373806689, Nil, main.p_object, scale);  }  // 31
get_playback_speed_scale :: (main: *AudioServer) -> float { call_ret := cast(*float) sys_call("AudioServer", "get_playback_speed_scale", 1740695150, float, main.p_object); return call_ret.*; }  // 32
lock :: (main: *AudioServer) { sys_call("AudioServer", "lock", 3218959716, Nil, main.p_object);  }  // 33
unlock :: (main: *AudioServer) { sys_call("AudioServer", "unlock", 3218959716, Nil, main.p_object);  }  // 34
get_speaker_mode :: (main: *AudioServer) -> AudioServer.SpeakerMode { call_ret := cast(*AudioServer.SpeakerMode) sys_call("AudioServer", "get_speaker_mode", 2549190337, AudioServer.SpeakerMode, main.p_object); return call_ret.*; }  // 35
get_mix_rate :: (main: *AudioServer) -> float { call_ret := cast(*float) sys_call("AudioServer", "get_mix_rate", 1740695150, float, main.p_object); return call_ret.*; }  // 36
get_input_mix_rate :: (main: *AudioServer) -> float { call_ret := cast(*float) sys_call("AudioServer", "get_input_mix_rate", 1740695150, float, main.p_object); return call_ret.*; }  // 37
get_driver_name :: (main: *AudioServer) -> gstring { call_ret := cast(*gstring) sys_call("AudioServer", "get_driver_name", 201670096, gstring, main.p_object); return call_ret.*; }  // 38
get_output_device_list :: (main: *AudioServer) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("AudioServer", "get_output_device_list", 2981934095, PackedStringArray, main.p_object); return call_ret.*; }  // 39
get_output_device :: (main: *AudioServer) -> gstring { call_ret := cast(*gstring) sys_call("AudioServer", "get_output_device", 2841200299, gstring, main.p_object); return call_ret.*; }  // 40
set_output_device :: (main: *AudioServer, name: string) { sys_call("AudioServer", "set_output_device", 83702148, Nil, main.p_object, name);  }  // 41
get_time_to_next_mix :: (main: *AudioServer) -> float { call_ret := cast(*float) sys_call("AudioServer", "get_time_to_next_mix", 1740695150, float, main.p_object); return call_ret.*; }  // 42
get_time_since_last_mix :: (main: *AudioServer) -> float { call_ret := cast(*float) sys_call("AudioServer", "get_time_since_last_mix", 1740695150, float, main.p_object); return call_ret.*; }  // 43
get_output_latency :: (main: *AudioServer) -> float { call_ret := cast(*float) sys_call("AudioServer", "get_output_latency", 1740695150, float, main.p_object); return call_ret.*; }  // 44
get_input_device_list :: (main: *AudioServer) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("AudioServer", "get_input_device_list", 2981934095, PackedStringArray, main.p_object); return call_ret.*; }  // 45
get_input_device :: (main: *AudioServer) -> gstring { call_ret := cast(*gstring) sys_call("AudioServer", "get_input_device", 2841200299, gstring, main.p_object); return call_ret.*; }  // 46
set_input_device :: (main: *AudioServer, name: string) { sys_call("AudioServer", "set_input_device", 83702148, Nil, main.p_object, name);  }  // 47
set_bus_layout :: (main: *AudioServer, bus_layout: AudioBusLayout) { sys_call("AudioServer", "set_bus_layout", 3319058824, Nil, main.p_object, bus_layout);  }  // 48
generate_bus_layout :: (main: *AudioServer) -> *AudioBusLayout { call_ret := cast(*AudioBusLayout) sys_call("AudioServer", "generate_bus_layout", 3769973890, AudioBusLayout, main.p_object); return call_ret; }  // 49
set_enable_tagging_used_audio_streams :: (main: *AudioServer, enable: bool) { sys_call("AudioServer", "set_enable_tagging_used_audio_streams", 2586408642, Nil, main.p_object, enable);  }  // 50
is_stream_registered_as_sample :: (main: *AudioServer, stream: AudioStream) -> bool { call_ret := cast(*bool) sys_call("AudioServer", "is_stream_registered_as_sample", 500225754, bool, main.p_object, stream); return call_ret.*; }  // 51
register_stream_as_sample :: (main: *AudioServer, stream: AudioStream) { sys_call("AudioServer", "register_stream_as_sample", 2210767741, Nil, main.p_object, stream);  }  // 52

get_length :: (main: *AudioStream) -> float { call_ret := cast(*float) sys_call("AudioStream", "get_length", 1740695150, float, main.p_object); return call_ret.*; }  // 9
is_monophonic :: (main: *AudioStream) -> bool { call_ret := cast(*bool) sys_call("AudioStream", "is_monophonic", 36873697, bool, main.p_object); return call_ret.*; }  // 10
instantiate_playback :: (main: *AudioStream) -> *AudioStreamPlayback { call_ret := cast(*AudioStreamPlayback) sys_call("AudioStream", "instantiate_playback", 210135309, AudioStreamPlayback, main.p_object); return call_ret; }  // 11
can_be_sampled :: (main: *AudioStream) -> bool { call_ret := cast(*bool) sys_call("AudioStream", "can_be_sampled", 36873697, bool, main.p_object); return call_ret.*; }  // 12
generate_sample :: (main: *AudioStream) -> *AudioSample { call_ret := cast(*AudioSample) sys_call("AudioStream", "generate_sample", 2646048999, AudioSample, main.p_object); return call_ret; }  // 13
is_meta_stream :: (main: *AudioStream) -> bool { call_ret := cast(*bool) sys_call("AudioStream", "is_meta_stream", 36873697, bool, main.p_object); return call_ret.*; }  // 14

set_mix_rate :: (main: *AudioStreamGenerator, hz: float) { sys_call("AudioStreamGenerator", "set_mix_rate", 373806689, Nil, main.p_object, hz);  }  // 0
get_mix_rate :: (main: *AudioStreamGenerator) -> float { call_ret := cast(*float) sys_call("AudioStreamGenerator", "get_mix_rate", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_mix_rate_mode :: (main: *AudioStreamGenerator, mode: AudioStreamGenerator.AudioStreamGeneratorMixRate) { sys_call("AudioStreamGenerator", "set_mix_rate_mode", 3354885803, Nil, main.p_object, mode);  }  // 2
get_mix_rate_mode :: (main: *AudioStreamGenerator) -> AudioStreamGenerator.AudioStreamGeneratorMixRate { call_ret := cast(*AudioStreamGenerator.AudioStreamGeneratorMixRate) sys_call("AudioStreamGenerator", "get_mix_rate_mode", 3537132591, AudioStreamGenerator.AudioStreamGeneratorMixRate, main.p_object); return call_ret.*; }  // 3
set_buffer_length :: (main: *AudioStreamGenerator, seconds: float) { sys_call("AudioStreamGenerator", "set_buffer_length", 373806689, Nil, main.p_object, seconds);  }  // 4
get_buffer_length :: (main: *AudioStreamGenerator) -> float { call_ret := cast(*float) sys_call("AudioStreamGenerator", "get_buffer_length", 1740695150, float, main.p_object); return call_ret.*; }  // 5

push_frame :: (main: *AudioStreamGeneratorPlayback, frame: Vector2) -> bool { call_ret := cast(*bool) sys_call("AudioStreamGeneratorPlayback", "push_frame", 3975407249, bool, main.p_object, frame); return call_ret.*; }  // 0
can_push_buffer :: (main: *AudioStreamGeneratorPlayback, amount: int) -> bool { call_ret := cast(*bool) sys_call("AudioStreamGeneratorPlayback", "can_push_buffer", 1116898809, bool, main.p_object, amount); return call_ret.*; }  // 1
push_buffer :: (main: *AudioStreamGeneratorPlayback, frames: PackedVector2Array) -> bool { call_ret := cast(*bool) sys_call("AudioStreamGeneratorPlayback", "push_buffer", 1361156557, bool, main.p_object, frames); return call_ret.*; }  // 2
get_frames_available :: (main: *AudioStreamGeneratorPlayback) -> int { call_ret := cast(*int) sys_call("AudioStreamGeneratorPlayback", "get_frames_available", 3905245786, int, main.p_object); return call_ret.*; }  // 3
get_skips :: (main: *AudioStreamGeneratorPlayback) -> int { call_ret := cast(*int) sys_call("AudioStreamGeneratorPlayback", "get_skips", 3905245786, int, main.p_object); return call_ret.*; }  // 4
clear_buffer :: (main: *AudioStreamGeneratorPlayback) { sys_call("AudioStreamGeneratorPlayback", "clear_buffer", 3218959716, Nil, main.p_object);  }  // 5

set_clip_count :: (main: *AudioStreamInteractive, clip_count: int) { sys_call("AudioStreamInteractive", "set_clip_count", 1286410249, Nil, main.p_object, clip_count);  }  // 0
get_clip_count :: (main: *AudioStreamInteractive) -> int { call_ret := cast(*int) sys_call("AudioStreamInteractive", "get_clip_count", 3905245786, int, main.p_object); return call_ret.*; }  // 1
set_initial_clip :: (main: *AudioStreamInteractive, clip_index: int) { sys_call("AudioStreamInteractive", "set_initial_clip", 1286410249, Nil, main.p_object, clip_index);  }  // 2
get_initial_clip :: (main: *AudioStreamInteractive) -> int { call_ret := cast(*int) sys_call("AudioStreamInteractive", "get_initial_clip", 3905245786, int, main.p_object); return call_ret.*; }  // 3
set_clip_name :: (main: *AudioStreamInteractive, clip_index: int, name: string) { sys_call("AudioStreamInteractive", "set_clip_name", 3780747571, Nil, main.p_object, clip_index, name);  }  // 4
get_clip_name :: (main: *AudioStreamInteractive, clip_index: int) -> StringName { call_ret := cast(*StringName) sys_call("AudioStreamInteractive", "get_clip_name", 659327637, StringName, main.p_object, clip_index); return call_ret.*; }  // 5
set_clip_stream :: (main: *AudioStreamInteractive, clip_index: int, stream: AudioStream) { sys_call("AudioStreamInteractive", "set_clip_stream", 111075094, Nil, main.p_object, clip_index, stream);  }  // 6
get_clip_stream :: (main: *AudioStreamInteractive, clip_index: int) -> *AudioStream { call_ret := cast(*AudioStream) sys_call("AudioStreamInteractive", "get_clip_stream", 2739380747, AudioStream, main.p_object, clip_index); return call_ret; }  // 7
set_clip_auto_advance :: (main: *AudioStreamInteractive, clip_index: int, mode: AudioStreamInteractive.AutoAdvanceMode) { sys_call("AudioStreamInteractive", "set_clip_auto_advance", 57217598, Nil, main.p_object, clip_index, mode);  }  // 8
get_clip_auto_advance :: (main: *AudioStreamInteractive, clip_index: int) -> AudioStreamInteractive.AutoAdvanceMode { call_ret := cast(*AudioStreamInteractive.AutoAdvanceMode) sys_call("AudioStreamInteractive", "get_clip_auto_advance", 1778634807, AudioStreamInteractive.AutoAdvanceMode, main.p_object, clip_index); return call_ret.*; }  // 9
set_clip_auto_advance_next_clip :: (main: *AudioStreamInteractive, clip_index: int, auto_advance_next_clip: int) { sys_call("AudioStreamInteractive", "set_clip_auto_advance_next_clip", 3937882851, Nil, main.p_object, clip_index, auto_advance_next_clip);  }  // 10
get_clip_auto_advance_next_clip :: (main: *AudioStreamInteractive, clip_index: int) -> int { call_ret := cast(*int) sys_call("AudioStreamInteractive", "get_clip_auto_advance_next_clip", 923996154, int, main.p_object, clip_index); return call_ret.*; }  // 11
add_transition :: (main: *AudioStreamInteractive, from_clip: int, to_clip: int, from_time: AudioStreamInteractive.TransitionFromTime, to_time: AudioStreamInteractive.TransitionToTime, fade_mode: AudioStreamInteractive.FadeMode, fade_beats: float) { sys_call("AudioStreamInteractive", "add_transition", 1630280552, Nil, main.p_object, from_clip, to_clip, from_time, to_time, fade_mode, fade_beats);  }  // 12
has_transition :: (main: *AudioStreamInteractive, from_clip: int, to_clip: int) -> bool { call_ret := cast(*bool) sys_call("AudioStreamInteractive", "has_transition", 2522259332, bool, main.p_object, from_clip, to_clip); return call_ret.*; }  // 13
erase_transition :: (main: *AudioStreamInteractive, from_clip: int, to_clip: int) { sys_call("AudioStreamInteractive", "erase_transition", 3937882851, Nil, main.p_object, from_clip, to_clip);  }  // 14
get_transition_list :: (main: *AudioStreamInteractive) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("AudioStreamInteractive", "get_transition_list", 1930428628, PackedInt32Array, main.p_object); return call_ret.*; }  // 15
get_transition_from_time :: (main: *AudioStreamInteractive, from_clip: int, to_clip: int) -> AudioStreamInteractive.TransitionFromTime { call_ret := cast(*AudioStreamInteractive.TransitionFromTime) sys_call("AudioStreamInteractive", "get_transition_from_time", 3453338158, AudioStreamInteractive.TransitionFromTime, main.p_object, from_clip, to_clip); return call_ret.*; }  // 16
get_transition_to_time :: (main: *AudioStreamInteractive, from_clip: int, to_clip: int) -> AudioStreamInteractive.TransitionToTime { call_ret := cast(*AudioStreamInteractive.TransitionToTime) sys_call("AudioStreamInteractive", "get_transition_to_time", 1369651373, AudioStreamInteractive.TransitionToTime, main.p_object, from_clip, to_clip); return call_ret.*; }  // 17
get_transition_fade_mode :: (main: *AudioStreamInteractive, from_clip: int, to_clip: int) -> AudioStreamInteractive.FadeMode { call_ret := cast(*AudioStreamInteractive.FadeMode) sys_call("AudioStreamInteractive", "get_transition_fade_mode", 4065396087, AudioStreamInteractive.FadeMode, main.p_object, from_clip, to_clip); return call_ret.*; }  // 18
get_transition_fade_beats :: (main: *AudioStreamInteractive, from_clip: int, to_clip: int) -> float { call_ret := cast(*float) sys_call("AudioStreamInteractive", "get_transition_fade_beats", 3085491603, float, main.p_object, from_clip, to_clip); return call_ret.*; }  // 19
is_transition_using_filler_clip :: (main: *AudioStreamInteractive, from_clip: int, to_clip: int) -> bool { call_ret := cast(*bool) sys_call("AudioStreamInteractive", "is_transition_using_filler_clip", 2522259332, bool, main.p_object, from_clip, to_clip); return call_ret.*; }  // 20
get_transition_filler_clip :: (main: *AudioStreamInteractive, from_clip: int, to_clip: int) -> int { call_ret := cast(*int) sys_call("AudioStreamInteractive", "get_transition_filler_clip", 3175239445, int, main.p_object, from_clip, to_clip); return call_ret.*; }  // 21
is_transition_holding_previous :: (main: *AudioStreamInteractive, from_clip: int, to_clip: int) -> bool { call_ret := cast(*bool) sys_call("AudioStreamInteractive", "is_transition_holding_previous", 2522259332, bool, main.p_object, from_clip, to_clip); return call_ret.*; }  // 22

load_from_buffer :: (main: *AudioStreamMP3, stream_data: PackedByteArray) -> *AudioStreamMP3 { call_ret := cast(*AudioStreamMP3) sys_call("AudioStreamMP3", "load_from_buffer", 1674970313, AudioStreamMP3, main.p_object, stream_data); return call_ret; }  // 0
load_from_file :: (main: *AudioStreamMP3, path: string) -> *AudioStreamMP3 { call_ret := cast(*AudioStreamMP3) sys_call("AudioStreamMP3", "load_from_file", 4238362998, AudioStreamMP3, main.p_object, path); return call_ret; }  // 1
set_data :: (main: *AudioStreamMP3, data: PackedByteArray) { sys_call("AudioStreamMP3", "set_data", 2971499966, Nil, main.p_object, data);  }  // 2
get_data :: (main: *AudioStreamMP3) -> PackedByteArray { call_ret := cast(*PackedByteArray) sys_call("AudioStreamMP3", "get_data", 2362200018, PackedByteArray, main.p_object); return call_ret.*; }  // 3
set_loop :: (main: *AudioStreamMP3, enable: bool) { sys_call("AudioStreamMP3", "set_loop", 2586408642, Nil, main.p_object, enable);  }  // 4
has_loop :: (main: *AudioStreamMP3) -> bool { call_ret := cast(*bool) sys_call("AudioStreamMP3", "has_loop", 36873697, bool, main.p_object); return call_ret.*; }  // 5
set_loop_offset :: (main: *AudioStreamMP3, seconds: float) { sys_call("AudioStreamMP3", "set_loop_offset", 373806689, Nil, main.p_object, seconds);  }  // 6
get_loop_offset :: (main: *AudioStreamMP3) -> float { call_ret := cast(*float) sys_call("AudioStreamMP3", "get_loop_offset", 1740695150, float, main.p_object); return call_ret.*; }  // 7
set_bpm :: (main: *AudioStreamMP3, bpm: float) { sys_call("AudioStreamMP3", "set_bpm", 373806689, Nil, main.p_object, bpm);  }  // 8
get_bpm :: (main: *AudioStreamMP3) -> float { call_ret := cast(*float) sys_call("AudioStreamMP3", "get_bpm", 1740695150, float, main.p_object); return call_ret.*; }  // 9
set_beat_count :: (main: *AudioStreamMP3, count: int) { sys_call("AudioStreamMP3", "set_beat_count", 1286410249, Nil, main.p_object, count);  }  // 10
get_beat_count :: (main: *AudioStreamMP3) -> int { call_ret := cast(*int) sys_call("AudioStreamMP3", "get_beat_count", 3905245786, int, main.p_object); return call_ret.*; }  // 11
set_bar_beats :: (main: *AudioStreamMP3, count: int) { sys_call("AudioStreamMP3", "set_bar_beats", 1286410249, Nil, main.p_object, count);  }  // 12
get_bar_beats :: (main: *AudioStreamMP3) -> int { call_ret := cast(*int) sys_call("AudioStreamMP3", "get_bar_beats", 3905245786, int, main.p_object); return call_ret.*; }  // 13


load_from_buffer :: (main: *AudioStreamOggVorbis, stream_data: PackedByteArray) -> *AudioStreamOggVorbis { call_ret := cast(*AudioStreamOggVorbis) sys_call("AudioStreamOggVorbis", "load_from_buffer", 354904730, AudioStreamOggVorbis, main.p_object, stream_data); return call_ret; }  // 0
load_from_file :: (main: *AudioStreamOggVorbis, path: string) -> *AudioStreamOggVorbis { call_ret := cast(*AudioStreamOggVorbis) sys_call("AudioStreamOggVorbis", "load_from_file", 797568536, AudioStreamOggVorbis, main.p_object, path); return call_ret; }  // 1
set_packet_sequence :: (main: *AudioStreamOggVorbis, packet_sequence: OggPacketSequence) { sys_call("AudioStreamOggVorbis", "set_packet_sequence", 438882457, Nil, main.p_object, packet_sequence);  }  // 2
get_packet_sequence :: (main: *AudioStreamOggVorbis) -> *OggPacketSequence { call_ret := cast(*OggPacketSequence) sys_call("AudioStreamOggVorbis", "get_packet_sequence", 2801636033, OggPacketSequence, main.p_object); return call_ret; }  // 3
set_loop :: (main: *AudioStreamOggVorbis, enable: bool) { sys_call("AudioStreamOggVorbis", "set_loop", 2586408642, Nil, main.p_object, enable);  }  // 4
has_loop :: (main: *AudioStreamOggVorbis) -> bool { call_ret := cast(*bool) sys_call("AudioStreamOggVorbis", "has_loop", 36873697, bool, main.p_object); return call_ret.*; }  // 5
set_loop_offset :: (main: *AudioStreamOggVorbis, seconds: float) { sys_call("AudioStreamOggVorbis", "set_loop_offset", 373806689, Nil, main.p_object, seconds);  }  // 6
get_loop_offset :: (main: *AudioStreamOggVorbis) -> float { call_ret := cast(*float) sys_call("AudioStreamOggVorbis", "get_loop_offset", 1740695150, float, main.p_object); return call_ret.*; }  // 7
set_bpm :: (main: *AudioStreamOggVorbis, bpm: float) { sys_call("AudioStreamOggVorbis", "set_bpm", 373806689, Nil, main.p_object, bpm);  }  // 8
get_bpm :: (main: *AudioStreamOggVorbis) -> float { call_ret := cast(*float) sys_call("AudioStreamOggVorbis", "get_bpm", 1740695150, float, main.p_object); return call_ret.*; }  // 9
set_beat_count :: (main: *AudioStreamOggVorbis, count: int) { sys_call("AudioStreamOggVorbis", "set_beat_count", 1286410249, Nil, main.p_object, count);  }  // 10
get_beat_count :: (main: *AudioStreamOggVorbis) -> int { call_ret := cast(*int) sys_call("AudioStreamOggVorbis", "get_beat_count", 3905245786, int, main.p_object); return call_ret.*; }  // 11
set_bar_beats :: (main: *AudioStreamOggVorbis, count: int) { sys_call("AudioStreamOggVorbis", "set_bar_beats", 1286410249, Nil, main.p_object, count);  }  // 12
get_bar_beats :: (main: *AudioStreamOggVorbis) -> int { call_ret := cast(*int) sys_call("AudioStreamOggVorbis", "get_bar_beats", 3905245786, int, main.p_object); return call_ret.*; }  // 13

set_sample_playback :: (main: *AudioStreamPlayback, playback_sample: AudioSamplePlayback) { sys_call("AudioStreamPlayback", "set_sample_playback", 3195455091, Nil, main.p_object, playback_sample);  }  // 10
get_sample_playback :: (main: *AudioStreamPlayback) -> *AudioSamplePlayback { call_ret := cast(*AudioSamplePlayback) sys_call("AudioStreamPlayback", "get_sample_playback", 3482738536, AudioSamplePlayback, main.p_object); return call_ret; }  // 11
mix_audio :: (main: *AudioStreamPlayback, rate_scale: float, frames: int) -> PackedVector2Array { call_ret := cast(*PackedVector2Array) sys_call("AudioStreamPlayback", "mix_audio", 3341291446, PackedVector2Array, main.p_object, rate_scale, frames); return call_ret.*; }  // 12
start :: (main: *AudioStreamPlayback) { sys_call("AudioStreamPlayback", "start", 1958160172, Nil, main.p_object);  }  // 13
seek :: (main: *AudioStreamPlayback) { sys_call("AudioStreamPlayback", "seek", 1958160172, Nil, main.p_object);  }  // 14
stop :: (main: *AudioStreamPlayback) { sys_call("AudioStreamPlayback", "stop", 3218959716, Nil, main.p_object);  }  // 15
get_loop_count :: (main: *AudioStreamPlayback) -> int { call_ret := cast(*int) sys_call("AudioStreamPlayback", "get_loop_count", 3905245786, int, main.p_object); return call_ret.*; }  // 16
get_playback_position :: (main: *AudioStreamPlayback) -> float { call_ret := cast(*float) sys_call("AudioStreamPlayback", "get_playback_position", 1740695150, float, main.p_object); return call_ret.*; }  // 17
is_playing :: (main: *AudioStreamPlayback) -> bool { call_ret := cast(*bool) sys_call("AudioStreamPlayback", "is_playing", 36873697, bool, main.p_object); return call_ret.*; }  // 18

switch_to_clip_by_name :: (main: *AudioStreamPlaybackInteractive, clip_name: string) { sys_call("AudioStreamPlaybackInteractive", "switch_to_clip_by_name", 3304788590, Nil, main.p_object, clip_name);  }  // 0
switch_to_clip :: (main: *AudioStreamPlaybackInteractive, clip_index: int) { sys_call("AudioStreamPlaybackInteractive", "switch_to_clip", 1286410249, Nil, main.p_object, clip_index);  }  // 1
get_current_clip_index :: (main: *AudioStreamPlaybackInteractive) -> int { call_ret := cast(*int) sys_call("AudioStreamPlaybackInteractive", "get_current_clip_index", 3905245786, int, main.p_object); return call_ret.*; }  // 2



play_stream :: (main: *AudioStreamPlaybackPolyphonic, stream: AudioStream) -> int { call_ret := cast(*int) sys_call("AudioStreamPlaybackPolyphonic", "play_stream", 1846744803, int, main.p_object, stream); return call_ret.*; }  // 0
set_stream_volume :: (main: *AudioStreamPlaybackPolyphonic, stream: int, volume_db: float) { sys_call("AudioStreamPlaybackPolyphonic", "set_stream_volume", 1602489585, Nil, main.p_object, stream, volume_db);  }  // 1
set_stream_pitch_scale :: (main: *AudioStreamPlaybackPolyphonic, stream: int, pitch_scale: float) { sys_call("AudioStreamPlaybackPolyphonic", "set_stream_pitch_scale", 1602489585, Nil, main.p_object, stream, pitch_scale);  }  // 2
is_stream_playing :: (main: *AudioStreamPlaybackPolyphonic, stream: int) -> bool { call_ret := cast(*bool) sys_call("AudioStreamPlaybackPolyphonic", "is_stream_playing", 1116898809, bool, main.p_object, stream); return call_ret.*; }  // 3
stop_stream :: (main: *AudioStreamPlaybackPolyphonic, stream: int) { sys_call("AudioStreamPlaybackPolyphonic", "stop_stream", 1286410249, Nil, main.p_object, stream);  }  // 4

begin_resample :: (main: *AudioStreamPlaybackResampled) { sys_call("AudioStreamPlaybackResampled", "begin_resample", 3218959716, Nil, main.p_object);  }  // 2


set_stream :: (main: *AudioStreamPlayer, stream: AudioStream) { sys_call("AudioStreamPlayer", "set_stream", 2210767741, Nil, main.p_object, stream);  }  // 0
get_stream :: (main: *AudioStreamPlayer) -> *AudioStream { call_ret := cast(*AudioStream) sys_call("AudioStreamPlayer", "get_stream", 160907539, AudioStream, main.p_object); return call_ret; }  // 1
set_volume_db :: (main: *AudioStreamPlayer, volume_db: float) { sys_call("AudioStreamPlayer", "set_volume_db", 373806689, Nil, main.p_object, volume_db);  }  // 2
get_volume_db :: (main: *AudioStreamPlayer) -> float { call_ret := cast(*float) sys_call("AudioStreamPlayer", "get_volume_db", 1740695150, float, main.p_object); return call_ret.*; }  // 3
set_volume_linear :: (main: *AudioStreamPlayer, volume_linear: float) { sys_call("AudioStreamPlayer", "set_volume_linear", 373806689, Nil, main.p_object, volume_linear);  }  // 4
get_volume_linear :: (main: *AudioStreamPlayer) -> float { call_ret := cast(*float) sys_call("AudioStreamPlayer", "get_volume_linear", 1740695150, float, main.p_object); return call_ret.*; }  // 5
set_pitch_scale :: (main: *AudioStreamPlayer, pitch_scale: float) { sys_call("AudioStreamPlayer", "set_pitch_scale", 373806689, Nil, main.p_object, pitch_scale);  }  // 6
get_pitch_scale :: (main: *AudioStreamPlayer) -> float { call_ret := cast(*float) sys_call("AudioStreamPlayer", "get_pitch_scale", 1740695150, float, main.p_object); return call_ret.*; }  // 7
play :: (main: *AudioStreamPlayer) { sys_call("AudioStreamPlayer", "play", 1958160172, Nil, main.p_object);  }  // 8
seek :: (main: *AudioStreamPlayer, to_position: float) { sys_call("AudioStreamPlayer", "seek", 373806689, Nil, main.p_object, to_position);  }  // 9
stop :: (main: *AudioStreamPlayer) { sys_call("AudioStreamPlayer", "stop", 3218959716, Nil, main.p_object);  }  // 10
is_playing :: (main: *AudioStreamPlayer) -> bool { call_ret := cast(*bool) sys_call("AudioStreamPlayer", "is_playing", 36873697, bool, main.p_object); return call_ret.*; }  // 11
get_playback_position :: (main: *AudioStreamPlayer) -> float { call_ret := cast(*float) sys_call("AudioStreamPlayer", "get_playback_position", 191475506, float, main.p_object); return call_ret.*; }  // 12
set_bus :: (main: *AudioStreamPlayer, bus: string) { sys_call("AudioStreamPlayer", "set_bus", 3304788590, Nil, main.p_object, bus);  }  // 13
get_bus :: (main: *AudioStreamPlayer) -> StringName { call_ret := cast(*StringName) sys_call("AudioStreamPlayer", "get_bus", 2002593661, StringName, main.p_object); return call_ret.*; }  // 14
set_autoplay :: (main: *AudioStreamPlayer, enable: bool) { sys_call("AudioStreamPlayer", "set_autoplay", 2586408642, Nil, main.p_object, enable);  }  // 15
is_autoplay_enabled :: (main: *AudioStreamPlayer) -> bool { call_ret := cast(*bool) sys_call("AudioStreamPlayer", "is_autoplay_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 16
set_mix_target :: (main: *AudioStreamPlayer, mix_target: AudioStreamPlayer.MixTarget) { sys_call("AudioStreamPlayer", "set_mix_target", 2300306138, Nil, main.p_object, mix_target);  }  // 17
get_mix_target :: (main: *AudioStreamPlayer) -> AudioStreamPlayer.MixTarget { call_ret := cast(*AudioStreamPlayer.MixTarget) sys_call("AudioStreamPlayer", "get_mix_target", 172807476, AudioStreamPlayer.MixTarget, main.p_object); return call_ret.*; }  // 18
set_playing :: (main: *AudioStreamPlayer, enable: bool) { sys_call("AudioStreamPlayer", "set_playing", 2586408642, Nil, main.p_object, enable);  }  // 19
set_stream_paused :: (main: *AudioStreamPlayer, pause: bool) { sys_call("AudioStreamPlayer", "set_stream_paused", 2586408642, Nil, main.p_object, pause);  }  // 20
get_stream_paused :: (main: *AudioStreamPlayer) -> bool { call_ret := cast(*bool) sys_call("AudioStreamPlayer", "get_stream_paused", 36873697, bool, main.p_object); return call_ret.*; }  // 21
set_max_polyphony :: (main: *AudioStreamPlayer, max_polyphony: int) { sys_call("AudioStreamPlayer", "set_max_polyphony", 1286410249, Nil, main.p_object, max_polyphony);  }  // 22
get_max_polyphony :: (main: *AudioStreamPlayer) -> int { call_ret := cast(*int) sys_call("AudioStreamPlayer", "get_max_polyphony", 3905245786, int, main.p_object); return call_ret.*; }  // 23
has_stream_playback :: (main: *AudioStreamPlayer) -> bool { call_ret := cast(*bool) sys_call("AudioStreamPlayer", "has_stream_playback", 2240911060, bool, main.p_object); return call_ret.*; }  // 24
get_stream_playback :: (main: *AudioStreamPlayer) -> *AudioStreamPlayback { call_ret := cast(*AudioStreamPlayback) sys_call("AudioStreamPlayer", "get_stream_playback", 210135309, AudioStreamPlayback, main.p_object); return call_ret; }  // 25
set_playback_type :: (main: *AudioStreamPlayer, playback_type: AudioServer.PlaybackType) { sys_call("AudioStreamPlayer", "set_playback_type", 725473817, Nil, main.p_object, playback_type);  }  // 26
get_playback_type :: (main: *AudioStreamPlayer) -> AudioServer.PlaybackType { call_ret := cast(*AudioServer.PlaybackType) sys_call("AudioStreamPlayer", "get_playback_type", 4011264623, AudioServer.PlaybackType, main.p_object); return call_ret.*; }  // 27

set_stream :: (main: *AudioStreamPlayer2D, stream: AudioStream) { sys_call("AudioStreamPlayer2D", "set_stream", 2210767741, Nil, main.p_object, stream);  }  // 0
get_stream :: (main: *AudioStreamPlayer2D) -> *AudioStream { call_ret := cast(*AudioStream) sys_call("AudioStreamPlayer2D", "get_stream", 160907539, AudioStream, main.p_object); return call_ret; }  // 1
set_volume_db :: (main: *AudioStreamPlayer2D, volume_db: float) { sys_call("AudioStreamPlayer2D", "set_volume_db", 373806689, Nil, main.p_object, volume_db);  }  // 2
get_volume_db :: (main: *AudioStreamPlayer2D) -> float { call_ret := cast(*float) sys_call("AudioStreamPlayer2D", "get_volume_db", 1740695150, float, main.p_object); return call_ret.*; }  // 3
set_volume_linear :: (main: *AudioStreamPlayer2D, volume_linear: float) { sys_call("AudioStreamPlayer2D", "set_volume_linear", 373806689, Nil, main.p_object, volume_linear);  }  // 4
get_volume_linear :: (main: *AudioStreamPlayer2D) -> float { call_ret := cast(*float) sys_call("AudioStreamPlayer2D", "get_volume_linear", 1740695150, float, main.p_object); return call_ret.*; }  // 5
set_pitch_scale :: (main: *AudioStreamPlayer2D, pitch_scale: float) { sys_call("AudioStreamPlayer2D", "set_pitch_scale", 373806689, Nil, main.p_object, pitch_scale);  }  // 6
get_pitch_scale :: (main: *AudioStreamPlayer2D) -> float { call_ret := cast(*float) sys_call("AudioStreamPlayer2D", "get_pitch_scale", 1740695150, float, main.p_object); return call_ret.*; }  // 7
play :: (main: *AudioStreamPlayer2D) { sys_call("AudioStreamPlayer2D", "play", 1958160172, Nil, main.p_object);  }  // 8
seek :: (main: *AudioStreamPlayer2D, to_position: float) { sys_call("AudioStreamPlayer2D", "seek", 373806689, Nil, main.p_object, to_position);  }  // 9
stop :: (main: *AudioStreamPlayer2D) { sys_call("AudioStreamPlayer2D", "stop", 3218959716, Nil, main.p_object);  }  // 10
is_playing :: (main: *AudioStreamPlayer2D) -> bool { call_ret := cast(*bool) sys_call("AudioStreamPlayer2D", "is_playing", 36873697, bool, main.p_object); return call_ret.*; }  // 11
get_playback_position :: (main: *AudioStreamPlayer2D) -> float { call_ret := cast(*float) sys_call("AudioStreamPlayer2D", "get_playback_position", 191475506, float, main.p_object); return call_ret.*; }  // 12
set_bus :: (main: *AudioStreamPlayer2D, bus: string) { sys_call("AudioStreamPlayer2D", "set_bus", 3304788590, Nil, main.p_object, bus);  }  // 13
get_bus :: (main: *AudioStreamPlayer2D) -> StringName { call_ret := cast(*StringName) sys_call("AudioStreamPlayer2D", "get_bus", 2002593661, StringName, main.p_object); return call_ret.*; }  // 14
set_autoplay :: (main: *AudioStreamPlayer2D, enable: bool) { sys_call("AudioStreamPlayer2D", "set_autoplay", 2586408642, Nil, main.p_object, enable);  }  // 15
is_autoplay_enabled :: (main: *AudioStreamPlayer2D) -> bool { call_ret := cast(*bool) sys_call("AudioStreamPlayer2D", "is_autoplay_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 16
set_playing :: (main: *AudioStreamPlayer2D, enable: bool) { sys_call("AudioStreamPlayer2D", "set_playing", 2586408642, Nil, main.p_object, enable);  }  // 17
set_max_distance :: (main: *AudioStreamPlayer2D, pixels: float) { sys_call("AudioStreamPlayer2D", "set_max_distance", 373806689, Nil, main.p_object, pixels);  }  // 18
get_max_distance :: (main: *AudioStreamPlayer2D) -> float { call_ret := cast(*float) sys_call("AudioStreamPlayer2D", "get_max_distance", 1740695150, float, main.p_object); return call_ret.*; }  // 19
set_attenuation :: (main: *AudioStreamPlayer2D, curve: float) { sys_call("AudioStreamPlayer2D", "set_attenuation", 373806689, Nil, main.p_object, curve);  }  // 20
get_attenuation :: (main: *AudioStreamPlayer2D) -> float { call_ret := cast(*float) sys_call("AudioStreamPlayer2D", "get_attenuation", 1740695150, float, main.p_object); return call_ret.*; }  // 21
set_area_mask :: (main: *AudioStreamPlayer2D, mask: int) { sys_call("AudioStreamPlayer2D", "set_area_mask", 1286410249, Nil, main.p_object, mask);  }  // 22
get_area_mask :: (main: *AudioStreamPlayer2D) -> int { call_ret := cast(*int) sys_call("AudioStreamPlayer2D", "get_area_mask", 3905245786, int, main.p_object); return call_ret.*; }  // 23
set_stream_paused :: (main: *AudioStreamPlayer2D, pause: bool) { sys_call("AudioStreamPlayer2D", "set_stream_paused", 2586408642, Nil, main.p_object, pause);  }  // 24
get_stream_paused :: (main: *AudioStreamPlayer2D) -> bool { call_ret := cast(*bool) sys_call("AudioStreamPlayer2D", "get_stream_paused", 36873697, bool, main.p_object); return call_ret.*; }  // 25
set_max_polyphony :: (main: *AudioStreamPlayer2D, max_polyphony: int) { sys_call("AudioStreamPlayer2D", "set_max_polyphony", 1286410249, Nil, main.p_object, max_polyphony);  }  // 26
get_max_polyphony :: (main: *AudioStreamPlayer2D) -> int { call_ret := cast(*int) sys_call("AudioStreamPlayer2D", "get_max_polyphony", 3905245786, int, main.p_object); return call_ret.*; }  // 27
set_panning_strength :: (main: *AudioStreamPlayer2D, panning_strength: float) { sys_call("AudioStreamPlayer2D", "set_panning_strength", 373806689, Nil, main.p_object, panning_strength);  }  // 28
get_panning_strength :: (main: *AudioStreamPlayer2D) -> float { call_ret := cast(*float) sys_call("AudioStreamPlayer2D", "get_panning_strength", 1740695150, float, main.p_object); return call_ret.*; }  // 29
has_stream_playback :: (main: *AudioStreamPlayer2D) -> bool { call_ret := cast(*bool) sys_call("AudioStreamPlayer2D", "has_stream_playback", 2240911060, bool, main.p_object); return call_ret.*; }  // 30
get_stream_playback :: (main: *AudioStreamPlayer2D) -> *AudioStreamPlayback { call_ret := cast(*AudioStreamPlayback) sys_call("AudioStreamPlayer2D", "get_stream_playback", 210135309, AudioStreamPlayback, main.p_object); return call_ret; }  // 31
set_playback_type :: (main: *AudioStreamPlayer2D, playback_type: AudioServer.PlaybackType) { sys_call("AudioStreamPlayer2D", "set_playback_type", 725473817, Nil, main.p_object, playback_type);  }  // 32
get_playback_type :: (main: *AudioStreamPlayer2D) -> AudioServer.PlaybackType { call_ret := cast(*AudioServer.PlaybackType) sys_call("AudioStreamPlayer2D", "get_playback_type", 4011264623, AudioServer.PlaybackType, main.p_object); return call_ret.*; }  // 33

set_stream :: (main: *AudioStreamPlayer3D, stream: AudioStream) { sys_call("AudioStreamPlayer3D", "set_stream", 2210767741, Nil, main.p_object, stream);  }  // 0
get_stream :: (main: *AudioStreamPlayer3D) -> *AudioStream { call_ret := cast(*AudioStream) sys_call("AudioStreamPlayer3D", "get_stream", 160907539, AudioStream, main.p_object); return call_ret; }  // 1
set_volume_db :: (main: *AudioStreamPlayer3D, volume_db: float) { sys_call("AudioStreamPlayer3D", "set_volume_db", 373806689, Nil, main.p_object, volume_db);  }  // 2
get_volume_db :: (main: *AudioStreamPlayer3D) -> float { call_ret := cast(*float) sys_call("AudioStreamPlayer3D", "get_volume_db", 1740695150, float, main.p_object); return call_ret.*; }  // 3
set_volume_linear :: (main: *AudioStreamPlayer3D, volume_linear: float) { sys_call("AudioStreamPlayer3D", "set_volume_linear", 373806689, Nil, main.p_object, volume_linear);  }  // 4
get_volume_linear :: (main: *AudioStreamPlayer3D) -> float { call_ret := cast(*float) sys_call("AudioStreamPlayer3D", "get_volume_linear", 1740695150, float, main.p_object); return call_ret.*; }  // 5
set_unit_size :: (main: *AudioStreamPlayer3D, unit_size: float) { sys_call("AudioStreamPlayer3D", "set_unit_size", 373806689, Nil, main.p_object, unit_size);  }  // 6
get_unit_size :: (main: *AudioStreamPlayer3D) -> float { call_ret := cast(*float) sys_call("AudioStreamPlayer3D", "get_unit_size", 1740695150, float, main.p_object); return call_ret.*; }  // 7
set_max_db :: (main: *AudioStreamPlayer3D, max_db: float) { sys_call("AudioStreamPlayer3D", "set_max_db", 373806689, Nil, main.p_object, max_db);  }  // 8
get_max_db :: (main: *AudioStreamPlayer3D) -> float { call_ret := cast(*float) sys_call("AudioStreamPlayer3D", "get_max_db", 1740695150, float, main.p_object); return call_ret.*; }  // 9
set_pitch_scale :: (main: *AudioStreamPlayer3D, pitch_scale: float) { sys_call("AudioStreamPlayer3D", "set_pitch_scale", 373806689, Nil, main.p_object, pitch_scale);  }  // 10
get_pitch_scale :: (main: *AudioStreamPlayer3D) -> float { call_ret := cast(*float) sys_call("AudioStreamPlayer3D", "get_pitch_scale", 1740695150, float, main.p_object); return call_ret.*; }  // 11
play :: (main: *AudioStreamPlayer3D) { sys_call("AudioStreamPlayer3D", "play", 1958160172, Nil, main.p_object);  }  // 12
seek :: (main: *AudioStreamPlayer3D, to_position: float) { sys_call("AudioStreamPlayer3D", "seek", 373806689, Nil, main.p_object, to_position);  }  // 13
stop :: (main: *AudioStreamPlayer3D) { sys_call("AudioStreamPlayer3D", "stop", 3218959716, Nil, main.p_object);  }  // 14
is_playing :: (main: *AudioStreamPlayer3D) -> bool { call_ret := cast(*bool) sys_call("AudioStreamPlayer3D", "is_playing", 36873697, bool, main.p_object); return call_ret.*; }  // 15
get_playback_position :: (main: *AudioStreamPlayer3D) -> float { call_ret := cast(*float) sys_call("AudioStreamPlayer3D", "get_playback_position", 191475506, float, main.p_object); return call_ret.*; }  // 16
set_bus :: (main: *AudioStreamPlayer3D, bus: string) { sys_call("AudioStreamPlayer3D", "set_bus", 3304788590, Nil, main.p_object, bus);  }  // 17
get_bus :: (main: *AudioStreamPlayer3D) -> StringName { call_ret := cast(*StringName) sys_call("AudioStreamPlayer3D", "get_bus", 2002593661, StringName, main.p_object); return call_ret.*; }  // 18
set_autoplay :: (main: *AudioStreamPlayer3D, enable: bool) { sys_call("AudioStreamPlayer3D", "set_autoplay", 2586408642, Nil, main.p_object, enable);  }  // 19
is_autoplay_enabled :: (main: *AudioStreamPlayer3D) -> bool { call_ret := cast(*bool) sys_call("AudioStreamPlayer3D", "is_autoplay_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 20
set_playing :: (main: *AudioStreamPlayer3D, enable: bool) { sys_call("AudioStreamPlayer3D", "set_playing", 2586408642, Nil, main.p_object, enable);  }  // 21
set_max_distance :: (main: *AudioStreamPlayer3D, meters: float) { sys_call("AudioStreamPlayer3D", "set_max_distance", 373806689, Nil, main.p_object, meters);  }  // 22
get_max_distance :: (main: *AudioStreamPlayer3D) -> float { call_ret := cast(*float) sys_call("AudioStreamPlayer3D", "get_max_distance", 1740695150, float, main.p_object); return call_ret.*; }  // 23
set_area_mask :: (main: *AudioStreamPlayer3D, mask: int) { sys_call("AudioStreamPlayer3D", "set_area_mask", 1286410249, Nil, main.p_object, mask);  }  // 24
get_area_mask :: (main: *AudioStreamPlayer3D) -> int { call_ret := cast(*int) sys_call("AudioStreamPlayer3D", "get_area_mask", 3905245786, int, main.p_object); return call_ret.*; }  // 25
set_emission_angle :: (main: *AudioStreamPlayer3D, degrees: float) { sys_call("AudioStreamPlayer3D", "set_emission_angle", 373806689, Nil, main.p_object, degrees);  }  // 26
get_emission_angle :: (main: *AudioStreamPlayer3D) -> float { call_ret := cast(*float) sys_call("AudioStreamPlayer3D", "get_emission_angle", 1740695150, float, main.p_object); return call_ret.*; }  // 27
set_emission_angle_enabled :: (main: *AudioStreamPlayer3D, enabled: bool) { sys_call("AudioStreamPlayer3D", "set_emission_angle_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 28
is_emission_angle_enabled :: (main: *AudioStreamPlayer3D) -> bool { call_ret := cast(*bool) sys_call("AudioStreamPlayer3D", "is_emission_angle_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 29
set_emission_angle_filter_attenuation_db :: (main: *AudioStreamPlayer3D, db: float) { sys_call("AudioStreamPlayer3D", "set_emission_angle_filter_attenuation_db", 373806689, Nil, main.p_object, db);  }  // 30
get_emission_angle_filter_attenuation_db :: (main: *AudioStreamPlayer3D) -> float { call_ret := cast(*float) sys_call("AudioStreamPlayer3D", "get_emission_angle_filter_attenuation_db", 1740695150, float, main.p_object); return call_ret.*; }  // 31
set_attenuation_filter_cutoff_hz :: (main: *AudioStreamPlayer3D, degrees: float) { sys_call("AudioStreamPlayer3D", "set_attenuation_filter_cutoff_hz", 373806689, Nil, main.p_object, degrees);  }  // 32
get_attenuation_filter_cutoff_hz :: (main: *AudioStreamPlayer3D) -> float { call_ret := cast(*float) sys_call("AudioStreamPlayer3D", "get_attenuation_filter_cutoff_hz", 1740695150, float, main.p_object); return call_ret.*; }  // 33
set_attenuation_filter_db :: (main: *AudioStreamPlayer3D, db: float) { sys_call("AudioStreamPlayer3D", "set_attenuation_filter_db", 373806689, Nil, main.p_object, db);  }  // 34
get_attenuation_filter_db :: (main: *AudioStreamPlayer3D) -> float { call_ret := cast(*float) sys_call("AudioStreamPlayer3D", "get_attenuation_filter_db", 1740695150, float, main.p_object); return call_ret.*; }  // 35
set_attenuation_model :: (main: *AudioStreamPlayer3D, model: AudioStreamPlayer3D.AttenuationModel) { sys_call("AudioStreamPlayer3D", "set_attenuation_model", 2988086229, Nil, main.p_object, model);  }  // 36
get_attenuation_model :: (main: *AudioStreamPlayer3D) -> AudioStreamPlayer3D.AttenuationModel { call_ret := cast(*AudioStreamPlayer3D.AttenuationModel) sys_call("AudioStreamPlayer3D", "get_attenuation_model", 3035106060, AudioStreamPlayer3D.AttenuationModel, main.p_object); return call_ret.*; }  // 37
set_doppler_tracking :: (main: *AudioStreamPlayer3D, mode: AudioStreamPlayer3D.DopplerTracking) { sys_call("AudioStreamPlayer3D", "set_doppler_tracking", 3968161450, Nil, main.p_object, mode);  }  // 38
get_doppler_tracking :: (main: *AudioStreamPlayer3D) -> AudioStreamPlayer3D.DopplerTracking { call_ret := cast(*AudioStreamPlayer3D.DopplerTracking) sys_call("AudioStreamPlayer3D", "get_doppler_tracking", 1702418664, AudioStreamPlayer3D.DopplerTracking, main.p_object); return call_ret.*; }  // 39
set_stream_paused :: (main: *AudioStreamPlayer3D, pause: bool) { sys_call("AudioStreamPlayer3D", "set_stream_paused", 2586408642, Nil, main.p_object, pause);  }  // 40
get_stream_paused :: (main: *AudioStreamPlayer3D) -> bool { call_ret := cast(*bool) sys_call("AudioStreamPlayer3D", "get_stream_paused", 36873697, bool, main.p_object); return call_ret.*; }  // 41
set_max_polyphony :: (main: *AudioStreamPlayer3D, max_polyphony: int) { sys_call("AudioStreamPlayer3D", "set_max_polyphony", 1286410249, Nil, main.p_object, max_polyphony);  }  // 42
get_max_polyphony :: (main: *AudioStreamPlayer3D) -> int { call_ret := cast(*int) sys_call("AudioStreamPlayer3D", "get_max_polyphony", 3905245786, int, main.p_object); return call_ret.*; }  // 43
set_panning_strength :: (main: *AudioStreamPlayer3D, panning_strength: float) { sys_call("AudioStreamPlayer3D", "set_panning_strength", 373806689, Nil, main.p_object, panning_strength);  }  // 44
get_panning_strength :: (main: *AudioStreamPlayer3D) -> float { call_ret := cast(*float) sys_call("AudioStreamPlayer3D", "get_panning_strength", 1740695150, float, main.p_object); return call_ret.*; }  // 45
has_stream_playback :: (main: *AudioStreamPlayer3D) -> bool { call_ret := cast(*bool) sys_call("AudioStreamPlayer3D", "has_stream_playback", 2240911060, bool, main.p_object); return call_ret.*; }  // 46
get_stream_playback :: (main: *AudioStreamPlayer3D) -> *AudioStreamPlayback { call_ret := cast(*AudioStreamPlayback) sys_call("AudioStreamPlayer3D", "get_stream_playback", 210135309, AudioStreamPlayback, main.p_object); return call_ret; }  // 47
set_playback_type :: (main: *AudioStreamPlayer3D, playback_type: AudioServer.PlaybackType) { sys_call("AudioStreamPlayer3D", "set_playback_type", 725473817, Nil, main.p_object, playback_type);  }  // 48
get_playback_type :: (main: *AudioStreamPlayer3D) -> AudioServer.PlaybackType { call_ret := cast(*AudioServer.PlaybackType) sys_call("AudioStreamPlayer3D", "get_playback_type", 4011264623, AudioServer.PlaybackType, main.p_object); return call_ret.*; }  // 49

set_stream_count :: (main: *AudioStreamPlaylist, stream_count: int) { sys_call("AudioStreamPlaylist", "set_stream_count", 1286410249, Nil, main.p_object, stream_count);  }  // 0
get_stream_count :: (main: *AudioStreamPlaylist) -> int { call_ret := cast(*int) sys_call("AudioStreamPlaylist", "get_stream_count", 3905245786, int, main.p_object); return call_ret.*; }  // 1
get_bpm :: (main: *AudioStreamPlaylist) -> float { call_ret := cast(*float) sys_call("AudioStreamPlaylist", "get_bpm", 1740695150, float, main.p_object); return call_ret.*; }  // 2
set_list_stream :: (main: *AudioStreamPlaylist, stream_index: int, audio_stream: AudioStream) { sys_call("AudioStreamPlaylist", "set_list_stream", 111075094, Nil, main.p_object, stream_index, audio_stream);  }  // 3
get_list_stream :: (main: *AudioStreamPlaylist, stream_index: int) -> *AudioStream { call_ret := cast(*AudioStream) sys_call("AudioStreamPlaylist", "get_list_stream", 2739380747, AudioStream, main.p_object, stream_index); return call_ret; }  // 4
set_shuffle :: (main: *AudioStreamPlaylist, shuffle: bool) { sys_call("AudioStreamPlaylist", "set_shuffle", 2586408642, Nil, main.p_object, shuffle);  }  // 5
get_shuffle :: (main: *AudioStreamPlaylist) -> bool { call_ret := cast(*bool) sys_call("AudioStreamPlaylist", "get_shuffle", 36873697, bool, main.p_object); return call_ret.*; }  // 6
set_fade_time :: (main: *AudioStreamPlaylist, dec: float) { sys_call("AudioStreamPlaylist", "set_fade_time", 373806689, Nil, main.p_object, dec);  }  // 7
get_fade_time :: (main: *AudioStreamPlaylist) -> float { call_ret := cast(*float) sys_call("AudioStreamPlaylist", "get_fade_time", 1740695150, float, main.p_object); return call_ret.*; }  // 8
set_loop :: (main: *AudioStreamPlaylist, loop: bool) { sys_call("AudioStreamPlaylist", "set_loop", 2586408642, Nil, main.p_object, loop);  }  // 9
has_loop :: (main: *AudioStreamPlaylist) -> bool { call_ret := cast(*bool) sys_call("AudioStreamPlaylist", "has_loop", 36873697, bool, main.p_object); return call_ret.*; }  // 10

set_polyphony :: (main: *AudioStreamPolyphonic, voices: int) { sys_call("AudioStreamPolyphonic", "set_polyphony", 1286410249, Nil, main.p_object, voices);  }  // 0
get_polyphony :: (main: *AudioStreamPolyphonic) -> int { call_ret := cast(*int) sys_call("AudioStreamPolyphonic", "get_polyphony", 3905245786, int, main.p_object); return call_ret.*; }  // 1

add_stream :: (main: *AudioStreamRandomizer, index: int, stream: AudioStream) { sys_call("AudioStreamRandomizer", "add_stream", 1892018854, Nil, main.p_object, index, stream);  }  // 0
move_stream :: (main: *AudioStreamRandomizer, index_from: int, index_to: int) { sys_call("AudioStreamRandomizer", "move_stream", 3937882851, Nil, main.p_object, index_from, index_to);  }  // 1
remove_stream :: (main: *AudioStreamRandomizer, index: int) { sys_call("AudioStreamRandomizer", "remove_stream", 1286410249, Nil, main.p_object, index);  }  // 2
set_stream :: (main: *AudioStreamRandomizer, index: int, stream: AudioStream) { sys_call("AudioStreamRandomizer", "set_stream", 111075094, Nil, main.p_object, index, stream);  }  // 3
get_stream :: (main: *AudioStreamRandomizer, index: int) -> *AudioStream { call_ret := cast(*AudioStream) sys_call("AudioStreamRandomizer", "get_stream", 2739380747, AudioStream, main.p_object, index); return call_ret; }  // 4
set_stream_probability_weight :: (main: *AudioStreamRandomizer, index: int, weight: float) { sys_call("AudioStreamRandomizer", "set_stream_probability_weight", 1602489585, Nil, main.p_object, index, weight);  }  // 5
get_stream_probability_weight :: (main: *AudioStreamRandomizer, index: int) -> float { call_ret := cast(*float) sys_call("AudioStreamRandomizer", "get_stream_probability_weight", 2339986948, float, main.p_object, index); return call_ret.*; }  // 6
set_streams_count :: (main: *AudioStreamRandomizer, count: int) { sys_call("AudioStreamRandomizer", "set_streams_count", 1286410249, Nil, main.p_object, count);  }  // 7
get_streams_count :: (main: *AudioStreamRandomizer) -> int { call_ret := cast(*int) sys_call("AudioStreamRandomizer", "get_streams_count", 3905245786, int, main.p_object); return call_ret.*; }  // 8
set_random_pitch :: (main: *AudioStreamRandomizer, scale: float) { sys_call("AudioStreamRandomizer", "set_random_pitch", 373806689, Nil, main.p_object, scale);  }  // 9
get_random_pitch :: (main: *AudioStreamRandomizer) -> float { call_ret := cast(*float) sys_call("AudioStreamRandomizer", "get_random_pitch", 1740695150, float, main.p_object); return call_ret.*; }  // 10
set_random_volume_offset_db :: (main: *AudioStreamRandomizer, db_offset: float) { sys_call("AudioStreamRandomizer", "set_random_volume_offset_db", 373806689, Nil, main.p_object, db_offset);  }  // 11
get_random_volume_offset_db :: (main: *AudioStreamRandomizer) -> float { call_ret := cast(*float) sys_call("AudioStreamRandomizer", "get_random_volume_offset_db", 1740695150, float, main.p_object); return call_ret.*; }  // 12
set_playback_mode :: (main: *AudioStreamRandomizer, mode: AudioStreamRandomizer.PlaybackMode) { sys_call("AudioStreamRandomizer", "set_playback_mode", 3950967023, Nil, main.p_object, mode);  }  // 13
get_playback_mode :: (main: *AudioStreamRandomizer) -> AudioStreamRandomizer.PlaybackMode { call_ret := cast(*AudioStreamRandomizer.PlaybackMode) sys_call("AudioStreamRandomizer", "get_playback_mode", 3943055077, AudioStreamRandomizer.PlaybackMode, main.p_object); return call_ret.*; }  // 14

set_stream_count :: (main: *AudioStreamSynchronized, stream_count: int) { sys_call("AudioStreamSynchronized", "set_stream_count", 1286410249, Nil, main.p_object, stream_count);  }  // 0
get_stream_count :: (main: *AudioStreamSynchronized) -> int { call_ret := cast(*int) sys_call("AudioStreamSynchronized", "get_stream_count", 3905245786, int, main.p_object); return call_ret.*; }  // 1
set_sync_stream :: (main: *AudioStreamSynchronized, stream_index: int, audio_stream: AudioStream) { sys_call("AudioStreamSynchronized", "set_sync_stream", 111075094, Nil, main.p_object, stream_index, audio_stream);  }  // 2
get_sync_stream :: (main: *AudioStreamSynchronized, stream_index: int) -> *AudioStream { call_ret := cast(*AudioStream) sys_call("AudioStreamSynchronized", "get_sync_stream", 2739380747, AudioStream, main.p_object, stream_index); return call_ret; }  // 3
set_sync_stream_volume :: (main: *AudioStreamSynchronized, stream_index: int, volume_db: float) { sys_call("AudioStreamSynchronized", "set_sync_stream_volume", 1602489585, Nil, main.p_object, stream_index, volume_db);  }  // 4
get_sync_stream_volume :: (main: *AudioStreamSynchronized, stream_index: int) -> float { call_ret := cast(*float) sys_call("AudioStreamSynchronized", "get_sync_stream_volume", 2339986948, float, main.p_object, stream_index); return call_ret.*; }  // 5

load_from_buffer :: (main: *AudioStreamWAV, stream_data: PackedByteArray) -> *AudioStreamWAV { call_ret := cast(*AudioStreamWAV) sys_call("AudioStreamWAV", "load_from_buffer", 4266838938, AudioStreamWAV, main.p_object, stream_data); return call_ret; }  // 0
load_from_file :: (main: *AudioStreamWAV, path: string) -> *AudioStreamWAV { call_ret := cast(*AudioStreamWAV) sys_call("AudioStreamWAV", "load_from_file", 4015802384, AudioStreamWAV, main.p_object, path); return call_ret; }  // 1
set_data :: (main: *AudioStreamWAV, data: PackedByteArray) { sys_call("AudioStreamWAV", "set_data", 2971499966, Nil, main.p_object, data);  }  // 2
get_data :: (main: *AudioStreamWAV) -> PackedByteArray { call_ret := cast(*PackedByteArray) sys_call("AudioStreamWAV", "get_data", 2362200018, PackedByteArray, main.p_object); return call_ret.*; }  // 3
set_format :: (main: *AudioStreamWAV, format: AudioStreamWAV.Format) { sys_call("AudioStreamWAV", "set_format", 60648488, Nil, main.p_object, format);  }  // 4
get_format :: (main: *AudioStreamWAV) -> AudioStreamWAV.Format { call_ret := cast(*AudioStreamWAV.Format) sys_call("AudioStreamWAV", "get_format", 3151724922, AudioStreamWAV.Format, main.p_object); return call_ret.*; }  // 5
set_loop_mode :: (main: *AudioStreamWAV, loop_mode: AudioStreamWAV.LoopMode) { sys_call("AudioStreamWAV", "set_loop_mode", 2444882972, Nil, main.p_object, loop_mode);  }  // 6
get_loop_mode :: (main: *AudioStreamWAV) -> AudioStreamWAV.LoopMode { call_ret := cast(*AudioStreamWAV.LoopMode) sys_call("AudioStreamWAV", "get_loop_mode", 393560655, AudioStreamWAV.LoopMode, main.p_object); return call_ret.*; }  // 7
set_loop_begin :: (main: *AudioStreamWAV, loop_begin: int) { sys_call("AudioStreamWAV", "set_loop_begin", 1286410249, Nil, main.p_object, loop_begin);  }  // 8
get_loop_begin :: (main: *AudioStreamWAV) -> int { call_ret := cast(*int) sys_call("AudioStreamWAV", "get_loop_begin", 3905245786, int, main.p_object); return call_ret.*; }  // 9
set_loop_end :: (main: *AudioStreamWAV, loop_end: int) { sys_call("AudioStreamWAV", "set_loop_end", 1286410249, Nil, main.p_object, loop_end);  }  // 10
get_loop_end :: (main: *AudioStreamWAV) -> int { call_ret := cast(*int) sys_call("AudioStreamWAV", "get_loop_end", 3905245786, int, main.p_object); return call_ret.*; }  // 11
set_mix_rate :: (main: *AudioStreamWAV, mix_rate: int) { sys_call("AudioStreamWAV", "set_mix_rate", 1286410249, Nil, main.p_object, mix_rate);  }  // 12
get_mix_rate :: (main: *AudioStreamWAV) -> int { call_ret := cast(*int) sys_call("AudioStreamWAV", "get_mix_rate", 3905245786, int, main.p_object); return call_ret.*; }  // 13
set_stereo :: (main: *AudioStreamWAV, stereo: bool) { sys_call("AudioStreamWAV", "set_stereo", 2586408642, Nil, main.p_object, stereo);  }  // 14
is_stereo :: (main: *AudioStreamWAV) -> bool { call_ret := cast(*bool) sys_call("AudioStreamWAV", "is_stereo", 36873697, bool, main.p_object); return call_ret.*; }  // 15
save_to_wav :: (main: *AudioStreamWAV, path: string) -> Error { call_ret := cast(*Error) sys_call("AudioStreamWAV", "save_to_wav", 166001499, Error, main.p_object, path); return call_ret.*; }  // 16

set_rect :: (main: *BackBufferCopy, rect: Rect2) { sys_call("BackBufferCopy", "set_rect", 2046264180, Nil, main.p_object, rect);  }  // 0
get_rect :: (main: *BackBufferCopy) -> Rect2 { call_ret := cast(*Rect2) sys_call("BackBufferCopy", "get_rect", 1639390495, Rect2, main.p_object); return call_ret.*; }  // 1
set_copy_mode :: (main: *BackBufferCopy, copy_mode: BackBufferCopy.CopyMode) { sys_call("BackBufferCopy", "set_copy_mode", 1713538590, Nil, main.p_object, copy_mode);  }  // 2
get_copy_mode :: (main: *BackBufferCopy) -> BackBufferCopy.CopyMode { call_ret := cast(*BackBufferCopy.CopyMode) sys_call("BackBufferCopy", "get_copy_mode", 3271169440, BackBufferCopy.CopyMode, main.p_object); return call_ret.*; }  // 3

set_pressed :: (main: *BaseButton, pressed: bool) { sys_call("BaseButton", "set_pressed", 2586408642, Nil, main.p_object, pressed);  }  // 2
is_pressed :: (main: *BaseButton) -> bool { call_ret := cast(*bool) sys_call("BaseButton", "is_pressed", 36873697, bool, main.p_object); return call_ret.*; }  // 3
set_pressed_no_signal :: (main: *BaseButton, pressed: bool) { sys_call("BaseButton", "set_pressed_no_signal", 2586408642, Nil, main.p_object, pressed);  }  // 4
is_hovered :: (main: *BaseButton) -> bool { call_ret := cast(*bool) sys_call("BaseButton", "is_hovered", 36873697, bool, main.p_object); return call_ret.*; }  // 5
set_toggle_mode :: (main: *BaseButton, enabled: bool) { sys_call("BaseButton", "set_toggle_mode", 2586408642, Nil, main.p_object, enabled);  }  // 6
is_toggle_mode :: (main: *BaseButton) -> bool { call_ret := cast(*bool) sys_call("BaseButton", "is_toggle_mode", 36873697, bool, main.p_object); return call_ret.*; }  // 7
set_shortcut_in_tooltip :: (main: *BaseButton, enabled: bool) { sys_call("BaseButton", "set_shortcut_in_tooltip", 2586408642, Nil, main.p_object, enabled);  }  // 8
is_shortcut_in_tooltip_enabled :: (main: *BaseButton) -> bool { call_ret := cast(*bool) sys_call("BaseButton", "is_shortcut_in_tooltip_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 9
set_disabled :: (main: *BaseButton, disabled: bool) { sys_call("BaseButton", "set_disabled", 2586408642, Nil, main.p_object, disabled);  }  // 10
is_disabled :: (main: *BaseButton) -> bool { call_ret := cast(*bool) sys_call("BaseButton", "is_disabled", 36873697, bool, main.p_object); return call_ret.*; }  // 11
set_action_mode :: (main: *BaseButton, mode: BaseButton.ActionMode) { sys_call("BaseButton", "set_action_mode", 1985162088, Nil, main.p_object, mode);  }  // 12
get_action_mode :: (main: *BaseButton) -> BaseButton.ActionMode { call_ret := cast(*BaseButton.ActionMode) sys_call("BaseButton", "get_action_mode", 2589712189, BaseButton.ActionMode, main.p_object); return call_ret.*; }  // 13
set_button_mask :: (main: *BaseButton, mask: MouseButtonMask) { sys_call("BaseButton", "set_button_mask", 3950145251, Nil, main.p_object, mask);  }  // 14
get_button_mask :: (main: *BaseButton) -> MouseButtonMask { call_ret := cast(*MouseButtonMask) sys_call("BaseButton", "get_button_mask", 2512161324, MouseButtonMask, main.p_object); return call_ret.*; }  // 15
get_draw_mode :: (main: *BaseButton) -> BaseButton.DrawMode { call_ret := cast(*BaseButton.DrawMode) sys_call("BaseButton", "get_draw_mode", 2492721305, BaseButton.DrawMode, main.p_object); return call_ret.*; }  // 16
set_keep_pressed_outside :: (main: *BaseButton, enabled: bool) { sys_call("BaseButton", "set_keep_pressed_outside", 2586408642, Nil, main.p_object, enabled);  }  // 17
is_keep_pressed_outside :: (main: *BaseButton) -> bool { call_ret := cast(*bool) sys_call("BaseButton", "is_keep_pressed_outside", 36873697, bool, main.p_object); return call_ret.*; }  // 18
set_shortcut_feedback :: (main: *BaseButton, enabled: bool) { sys_call("BaseButton", "set_shortcut_feedback", 2586408642, Nil, main.p_object, enabled);  }  // 19
is_shortcut_feedback :: (main: *BaseButton) -> bool { call_ret := cast(*bool) sys_call("BaseButton", "is_shortcut_feedback", 36873697, bool, main.p_object); return call_ret.*; }  // 20
set_shortcut :: (main: *BaseButton, shortcut: Shortcut) { sys_call("BaseButton", "set_shortcut", 857163497, Nil, main.p_object, shortcut);  }  // 21
get_shortcut :: (main: *BaseButton) -> *Shortcut { call_ret := cast(*Shortcut) sys_call("BaseButton", "get_shortcut", 3415666916, Shortcut, main.p_object); return call_ret; }  // 22
set_button_group :: (main: *BaseButton, button_group: ButtonGroup) { sys_call("BaseButton", "set_button_group", 1794463739, Nil, main.p_object, button_group);  }  // 23
get_button_group :: (main: *BaseButton) -> *ButtonGroup { call_ret := cast(*ButtonGroup) sys_call("BaseButton", "get_button_group", 281644053, ButtonGroup, main.p_object); return call_ret; }  // 24

set_albedo :: (main: *BaseMaterial3D, albedo: Color) { sys_call("BaseMaterial3D", "set_albedo", 2920490490, Nil, main.p_object, albedo);  }  // 0
get_albedo :: (main: *BaseMaterial3D) -> Color { call_ret := cast(*Color) sys_call("BaseMaterial3D", "get_albedo", 3444240500, Color, main.p_object); return call_ret.*; }  // 1
set_transparency :: (main: *BaseMaterial3D, transparency: BaseMaterial3D.Transparency) { sys_call("BaseMaterial3D", "set_transparency", 3435651667, Nil, main.p_object, transparency);  }  // 2
get_transparency :: (main: *BaseMaterial3D) -> BaseMaterial3D.Transparency { call_ret := cast(*BaseMaterial3D.Transparency) sys_call("BaseMaterial3D", "get_transparency", 990903061, BaseMaterial3D.Transparency, main.p_object); return call_ret.*; }  // 3
set_alpha_antialiasing :: (main: *BaseMaterial3D, alpha_aa: BaseMaterial3D.AlphaAntiAliasing) { sys_call("BaseMaterial3D", "set_alpha_antialiasing", 3212649852, Nil, main.p_object, alpha_aa);  }  // 4
get_alpha_antialiasing :: (main: *BaseMaterial3D) -> BaseMaterial3D.AlphaAntiAliasing { call_ret := cast(*BaseMaterial3D.AlphaAntiAliasing) sys_call("BaseMaterial3D", "get_alpha_antialiasing", 2889939400, BaseMaterial3D.AlphaAntiAliasing, main.p_object); return call_ret.*; }  // 5
set_alpha_antialiasing_edge :: (main: *BaseMaterial3D, edge: float) { sys_call("BaseMaterial3D", "set_alpha_antialiasing_edge", 373806689, Nil, main.p_object, edge);  }  // 6
get_alpha_antialiasing_edge :: (main: *BaseMaterial3D) -> float { call_ret := cast(*float) sys_call("BaseMaterial3D", "get_alpha_antialiasing_edge", 1740695150, float, main.p_object); return call_ret.*; }  // 7
set_shading_mode :: (main: *BaseMaterial3D, shading_mode: BaseMaterial3D.ShadingMode) { sys_call("BaseMaterial3D", "set_shading_mode", 3368750322, Nil, main.p_object, shading_mode);  }  // 8
get_shading_mode :: (main: *BaseMaterial3D) -> BaseMaterial3D.ShadingMode { call_ret := cast(*BaseMaterial3D.ShadingMode) sys_call("BaseMaterial3D", "get_shading_mode", 2132070559, BaseMaterial3D.ShadingMode, main.p_object); return call_ret.*; }  // 9
set_specular :: (main: *BaseMaterial3D, specular: float) { sys_call("BaseMaterial3D", "set_specular", 373806689, Nil, main.p_object, specular);  }  // 10
get_specular :: (main: *BaseMaterial3D) -> float { call_ret := cast(*float) sys_call("BaseMaterial3D", "get_specular", 1740695150, float, main.p_object); return call_ret.*; }  // 11
set_metallic :: (main: *BaseMaterial3D, metallic: float) { sys_call("BaseMaterial3D", "set_metallic", 373806689, Nil, main.p_object, metallic);  }  // 12
get_metallic :: (main: *BaseMaterial3D) -> float { call_ret := cast(*float) sys_call("BaseMaterial3D", "get_metallic", 1740695150, float, main.p_object); return call_ret.*; }  // 13
set_roughness :: (main: *BaseMaterial3D, roughness: float) { sys_call("BaseMaterial3D", "set_roughness", 373806689, Nil, main.p_object, roughness);  }  // 14
get_roughness :: (main: *BaseMaterial3D) -> float { call_ret := cast(*float) sys_call("BaseMaterial3D", "get_roughness", 1740695150, float, main.p_object); return call_ret.*; }  // 15
set_emission :: (main: *BaseMaterial3D, emission: Color) { sys_call("BaseMaterial3D", "set_emission", 2920490490, Nil, main.p_object, emission);  }  // 16
get_emission :: (main: *BaseMaterial3D) -> Color { call_ret := cast(*Color) sys_call("BaseMaterial3D", "get_emission", 3444240500, Color, main.p_object); return call_ret.*; }  // 17
set_emission_energy_multiplier :: (main: *BaseMaterial3D, emission_energy_multiplier: float) { sys_call("BaseMaterial3D", "set_emission_energy_multiplier", 373806689, Nil, main.p_object, emission_energy_multiplier);  }  // 18
get_emission_energy_multiplier :: (main: *BaseMaterial3D) -> float { call_ret := cast(*float) sys_call("BaseMaterial3D", "get_emission_energy_multiplier", 1740695150, float, main.p_object); return call_ret.*; }  // 19
set_emission_intensity :: (main: *BaseMaterial3D, emission_energy_multiplier: float) { sys_call("BaseMaterial3D", "set_emission_intensity", 373806689, Nil, main.p_object, emission_energy_multiplier);  }  // 20
get_emission_intensity :: (main: *BaseMaterial3D) -> float { call_ret := cast(*float) sys_call("BaseMaterial3D", "get_emission_intensity", 1740695150, float, main.p_object); return call_ret.*; }  // 21
set_normal_scale :: (main: *BaseMaterial3D, normal_scale: float) { sys_call("BaseMaterial3D", "set_normal_scale", 373806689, Nil, main.p_object, normal_scale);  }  // 22
get_normal_scale :: (main: *BaseMaterial3D) -> float { call_ret := cast(*float) sys_call("BaseMaterial3D", "get_normal_scale", 1740695150, float, main.p_object); return call_ret.*; }  // 23
set_rim :: (main: *BaseMaterial3D, rim: float) { sys_call("BaseMaterial3D", "set_rim", 373806689, Nil, main.p_object, rim);  }  // 24
get_rim :: (main: *BaseMaterial3D) -> float { call_ret := cast(*float) sys_call("BaseMaterial3D", "get_rim", 1740695150, float, main.p_object); return call_ret.*; }  // 25
set_rim_tint :: (main: *BaseMaterial3D, rim_tint: float) { sys_call("BaseMaterial3D", "set_rim_tint", 373806689, Nil, main.p_object, rim_tint);  }  // 26
get_rim_tint :: (main: *BaseMaterial3D) -> float { call_ret := cast(*float) sys_call("BaseMaterial3D", "get_rim_tint", 1740695150, float, main.p_object); return call_ret.*; }  // 27
set_clearcoat :: (main: *BaseMaterial3D, clearcoat: float) { sys_call("BaseMaterial3D", "set_clearcoat", 373806689, Nil, main.p_object, clearcoat);  }  // 28
get_clearcoat :: (main: *BaseMaterial3D) -> float { call_ret := cast(*float) sys_call("BaseMaterial3D", "get_clearcoat", 1740695150, float, main.p_object); return call_ret.*; }  // 29
set_clearcoat_roughness :: (main: *BaseMaterial3D, clearcoat_roughness: float) { sys_call("BaseMaterial3D", "set_clearcoat_roughness", 373806689, Nil, main.p_object, clearcoat_roughness);  }  // 30
get_clearcoat_roughness :: (main: *BaseMaterial3D) -> float { call_ret := cast(*float) sys_call("BaseMaterial3D", "get_clearcoat_roughness", 1740695150, float, main.p_object); return call_ret.*; }  // 31
set_anisotropy :: (main: *BaseMaterial3D, anisotropy: float) { sys_call("BaseMaterial3D", "set_anisotropy", 373806689, Nil, main.p_object, anisotropy);  }  // 32
get_anisotropy :: (main: *BaseMaterial3D) -> float { call_ret := cast(*float) sys_call("BaseMaterial3D", "get_anisotropy", 1740695150, float, main.p_object); return call_ret.*; }  // 33
set_heightmap_scale :: (main: *BaseMaterial3D, heightmap_scale: float) { sys_call("BaseMaterial3D", "set_heightmap_scale", 373806689, Nil, main.p_object, heightmap_scale);  }  // 34
get_heightmap_scale :: (main: *BaseMaterial3D) -> float { call_ret := cast(*float) sys_call("BaseMaterial3D", "get_heightmap_scale", 1740695150, float, main.p_object); return call_ret.*; }  // 35
set_subsurface_scattering_strength :: (main: *BaseMaterial3D, strength: float) { sys_call("BaseMaterial3D", "set_subsurface_scattering_strength", 373806689, Nil, main.p_object, strength);  }  // 36
get_subsurface_scattering_strength :: (main: *BaseMaterial3D) -> float { call_ret := cast(*float) sys_call("BaseMaterial3D", "get_subsurface_scattering_strength", 1740695150, float, main.p_object); return call_ret.*; }  // 37
set_transmittance_color :: (main: *BaseMaterial3D, color: Color) { sys_call("BaseMaterial3D", "set_transmittance_color", 2920490490, Nil, main.p_object, color);  }  // 38
get_transmittance_color :: (main: *BaseMaterial3D) -> Color { call_ret := cast(*Color) sys_call("BaseMaterial3D", "get_transmittance_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 39
set_transmittance_depth :: (main: *BaseMaterial3D, depth: float) { sys_call("BaseMaterial3D", "set_transmittance_depth", 373806689, Nil, main.p_object, depth);  }  // 40
get_transmittance_depth :: (main: *BaseMaterial3D) -> float { call_ret := cast(*float) sys_call("BaseMaterial3D", "get_transmittance_depth", 1740695150, float, main.p_object); return call_ret.*; }  // 41
set_transmittance_boost :: (main: *BaseMaterial3D, boost: float) { sys_call("BaseMaterial3D", "set_transmittance_boost", 373806689, Nil, main.p_object, boost);  }  // 42
get_transmittance_boost :: (main: *BaseMaterial3D) -> float { call_ret := cast(*float) sys_call("BaseMaterial3D", "get_transmittance_boost", 1740695150, float, main.p_object); return call_ret.*; }  // 43
set_backlight :: (main: *BaseMaterial3D, backlight: Color) { sys_call("BaseMaterial3D", "set_backlight", 2920490490, Nil, main.p_object, backlight);  }  // 44
get_backlight :: (main: *BaseMaterial3D) -> Color { call_ret := cast(*Color) sys_call("BaseMaterial3D", "get_backlight", 3444240500, Color, main.p_object); return call_ret.*; }  // 45
set_refraction :: (main: *BaseMaterial3D, refraction: float) { sys_call("BaseMaterial3D", "set_refraction", 373806689, Nil, main.p_object, refraction);  }  // 46
get_refraction :: (main: *BaseMaterial3D) -> float { call_ret := cast(*float) sys_call("BaseMaterial3D", "get_refraction", 1740695150, float, main.p_object); return call_ret.*; }  // 47
set_point_size :: (main: *BaseMaterial3D, point_size: float) { sys_call("BaseMaterial3D", "set_point_size", 373806689, Nil, main.p_object, point_size);  }  // 48
get_point_size :: (main: *BaseMaterial3D) -> float { call_ret := cast(*float) sys_call("BaseMaterial3D", "get_point_size", 1740695150, float, main.p_object); return call_ret.*; }  // 49
set_detail_uv :: (main: *BaseMaterial3D, detail_uv: BaseMaterial3D.DetailUV) { sys_call("BaseMaterial3D", "set_detail_uv", 456801921, Nil, main.p_object, detail_uv);  }  // 50
get_detail_uv :: (main: *BaseMaterial3D) -> BaseMaterial3D.DetailUV { call_ret := cast(*BaseMaterial3D.DetailUV) sys_call("BaseMaterial3D", "get_detail_uv", 2306920512, BaseMaterial3D.DetailUV, main.p_object); return call_ret.*; }  // 51
set_blend_mode :: (main: *BaseMaterial3D, blend_mode: BaseMaterial3D.BlendMode) { sys_call("BaseMaterial3D", "set_blend_mode", 2830186259, Nil, main.p_object, blend_mode);  }  // 52
get_blend_mode :: (main: *BaseMaterial3D) -> BaseMaterial3D.BlendMode { call_ret := cast(*BaseMaterial3D.BlendMode) sys_call("BaseMaterial3D", "get_blend_mode", 4022690962, BaseMaterial3D.BlendMode, main.p_object); return call_ret.*; }  // 53
set_depth_draw_mode :: (main: *BaseMaterial3D, depth_draw_mode: BaseMaterial3D.DepthDrawMode) { sys_call("BaseMaterial3D", "set_depth_draw_mode", 1456584748, Nil, main.p_object, depth_draw_mode);  }  // 54
get_depth_draw_mode :: (main: *BaseMaterial3D) -> BaseMaterial3D.DepthDrawMode { call_ret := cast(*BaseMaterial3D.DepthDrawMode) sys_call("BaseMaterial3D", "get_depth_draw_mode", 2578197639, BaseMaterial3D.DepthDrawMode, main.p_object); return call_ret.*; }  // 55
set_cull_mode :: (main: *BaseMaterial3D, cull_mode: BaseMaterial3D.CullMode) { sys_call("BaseMaterial3D", "set_cull_mode", 2338909218, Nil, main.p_object, cull_mode);  }  // 56
get_cull_mode :: (main: *BaseMaterial3D) -> BaseMaterial3D.CullMode { call_ret := cast(*BaseMaterial3D.CullMode) sys_call("BaseMaterial3D", "get_cull_mode", 1941499586, BaseMaterial3D.CullMode, main.p_object); return call_ret.*; }  // 57
set_diffuse_mode :: (main: *BaseMaterial3D, diffuse_mode: BaseMaterial3D.DiffuseMode) { sys_call("BaseMaterial3D", "set_diffuse_mode", 1045299638, Nil, main.p_object, diffuse_mode);  }  // 58
get_diffuse_mode :: (main: *BaseMaterial3D) -> BaseMaterial3D.DiffuseMode { call_ret := cast(*BaseMaterial3D.DiffuseMode) sys_call("BaseMaterial3D", "get_diffuse_mode", 3973617136, BaseMaterial3D.DiffuseMode, main.p_object); return call_ret.*; }  // 59
set_specular_mode :: (main: *BaseMaterial3D, specular_mode: BaseMaterial3D.SpecularMode) { sys_call("BaseMaterial3D", "set_specular_mode", 584737147, Nil, main.p_object, specular_mode);  }  // 60
get_specular_mode :: (main: *BaseMaterial3D) -> BaseMaterial3D.SpecularMode { call_ret := cast(*BaseMaterial3D.SpecularMode) sys_call("BaseMaterial3D", "get_specular_mode", 2569953298, BaseMaterial3D.SpecularMode, main.p_object); return call_ret.*; }  // 61
set_flag :: (main: *BaseMaterial3D, flag: BaseMaterial3D.Flags, enable: bool) { sys_call("BaseMaterial3D", "set_flag", 3070159527, Nil, main.p_object, flag, enable);  }  // 62
get_flag :: (main: *BaseMaterial3D, flag: BaseMaterial3D.Flags) -> bool { call_ret := cast(*bool) sys_call("BaseMaterial3D", "get_flag", 1286410065, bool, main.p_object, flag); return call_ret.*; }  // 63
set_texture_filter :: (main: *BaseMaterial3D, mode: BaseMaterial3D.TextureFilter) { sys_call("BaseMaterial3D", "set_texture_filter", 22904437, Nil, main.p_object, mode);  }  // 64
get_texture_filter :: (main: *BaseMaterial3D) -> BaseMaterial3D.TextureFilter { call_ret := cast(*BaseMaterial3D.TextureFilter) sys_call("BaseMaterial3D", "get_texture_filter", 3289213076, BaseMaterial3D.TextureFilter, main.p_object); return call_ret.*; }  // 65
set_feature :: (main: *BaseMaterial3D, feature: BaseMaterial3D.Feature, enable: bool) { sys_call("BaseMaterial3D", "set_feature", 2819288693, Nil, main.p_object, feature, enable);  }  // 66
get_feature :: (main: *BaseMaterial3D, feature: BaseMaterial3D.Feature) -> bool { call_ret := cast(*bool) sys_call("BaseMaterial3D", "get_feature", 1965241794, bool, main.p_object, feature); return call_ret.*; }  // 67
set_texture :: (main: *BaseMaterial3D, param: BaseMaterial3D.TextureParam, texture: Texture2D) { sys_call("BaseMaterial3D", "set_texture", 464208135, Nil, main.p_object, param, texture);  }  // 68
get_texture :: (main: *BaseMaterial3D, param: BaseMaterial3D.TextureParam) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("BaseMaterial3D", "get_texture", 329605813, Texture2D, main.p_object, param); return call_ret; }  // 69
set_detail_blend_mode :: (main: *BaseMaterial3D, detail_blend_mode: BaseMaterial3D.BlendMode) { sys_call("BaseMaterial3D", "set_detail_blend_mode", 2830186259, Nil, main.p_object, detail_blend_mode);  }  // 70
get_detail_blend_mode :: (main: *BaseMaterial3D) -> BaseMaterial3D.BlendMode { call_ret := cast(*BaseMaterial3D.BlendMode) sys_call("BaseMaterial3D", "get_detail_blend_mode", 4022690962, BaseMaterial3D.BlendMode, main.p_object); return call_ret.*; }  // 71
set_uv1_scale :: (main: *BaseMaterial3D, scale: Vector3) { sys_call("BaseMaterial3D", "set_uv1_scale", 3460891852, Nil, main.p_object, scale);  }  // 72
get_uv1_scale :: (main: *BaseMaterial3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("BaseMaterial3D", "get_uv1_scale", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 73
set_uv1_offset :: (main: *BaseMaterial3D, offset: Vector3) { sys_call("BaseMaterial3D", "set_uv1_offset", 3460891852, Nil, main.p_object, offset);  }  // 74
get_uv1_offset :: (main: *BaseMaterial3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("BaseMaterial3D", "get_uv1_offset", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 75
set_uv1_triplanar_blend_sharpness :: (main: *BaseMaterial3D, sharpness: float) { sys_call("BaseMaterial3D", "set_uv1_triplanar_blend_sharpness", 373806689, Nil, main.p_object, sharpness);  }  // 76
get_uv1_triplanar_blend_sharpness :: (main: *BaseMaterial3D) -> float { call_ret := cast(*float) sys_call("BaseMaterial3D", "get_uv1_triplanar_blend_sharpness", 1740695150, float, main.p_object); return call_ret.*; }  // 77
set_uv2_scale :: (main: *BaseMaterial3D, scale: Vector3) { sys_call("BaseMaterial3D", "set_uv2_scale", 3460891852, Nil, main.p_object, scale);  }  // 78
get_uv2_scale :: (main: *BaseMaterial3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("BaseMaterial3D", "get_uv2_scale", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 79
set_uv2_offset :: (main: *BaseMaterial3D, offset: Vector3) { sys_call("BaseMaterial3D", "set_uv2_offset", 3460891852, Nil, main.p_object, offset);  }  // 80
get_uv2_offset :: (main: *BaseMaterial3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("BaseMaterial3D", "get_uv2_offset", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 81
set_uv2_triplanar_blend_sharpness :: (main: *BaseMaterial3D, sharpness: float) { sys_call("BaseMaterial3D", "set_uv2_triplanar_blend_sharpness", 373806689, Nil, main.p_object, sharpness);  }  // 82
get_uv2_triplanar_blend_sharpness :: (main: *BaseMaterial3D) -> float { call_ret := cast(*float) sys_call("BaseMaterial3D", "get_uv2_triplanar_blend_sharpness", 1740695150, float, main.p_object); return call_ret.*; }  // 83
set_billboard_mode :: (main: *BaseMaterial3D, mode: BaseMaterial3D.BillboardMode) { sys_call("BaseMaterial3D", "set_billboard_mode", 4202036497, Nil, main.p_object, mode);  }  // 84
get_billboard_mode :: (main: *BaseMaterial3D) -> BaseMaterial3D.BillboardMode { call_ret := cast(*BaseMaterial3D.BillboardMode) sys_call("BaseMaterial3D", "get_billboard_mode", 1283840139, BaseMaterial3D.BillboardMode, main.p_object); return call_ret.*; }  // 85
set_particles_anim_h_frames :: (main: *BaseMaterial3D, frames: int) { sys_call("BaseMaterial3D", "set_particles_anim_h_frames", 1286410249, Nil, main.p_object, frames);  }  // 86
get_particles_anim_h_frames :: (main: *BaseMaterial3D) -> int { call_ret := cast(*int) sys_call("BaseMaterial3D", "get_particles_anim_h_frames", 3905245786, int, main.p_object); return call_ret.*; }  // 87
set_particles_anim_v_frames :: (main: *BaseMaterial3D, frames: int) { sys_call("BaseMaterial3D", "set_particles_anim_v_frames", 1286410249, Nil, main.p_object, frames);  }  // 88
get_particles_anim_v_frames :: (main: *BaseMaterial3D) -> int { call_ret := cast(*int) sys_call("BaseMaterial3D", "get_particles_anim_v_frames", 3905245786, int, main.p_object); return call_ret.*; }  // 89
set_particles_anim_loop :: (main: *BaseMaterial3D, loop: bool) { sys_call("BaseMaterial3D", "set_particles_anim_loop", 2586408642, Nil, main.p_object, loop);  }  // 90
get_particles_anim_loop :: (main: *BaseMaterial3D) -> bool { call_ret := cast(*bool) sys_call("BaseMaterial3D", "get_particles_anim_loop", 36873697, bool, main.p_object); return call_ret.*; }  // 91
set_heightmap_deep_parallax :: (main: *BaseMaterial3D, enable: bool) { sys_call("BaseMaterial3D", "set_heightmap_deep_parallax", 2586408642, Nil, main.p_object, enable);  }  // 92
is_heightmap_deep_parallax_enabled :: (main: *BaseMaterial3D) -> bool { call_ret := cast(*bool) sys_call("BaseMaterial3D", "is_heightmap_deep_parallax_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 93
set_heightmap_deep_parallax_min_layers :: (main: *BaseMaterial3D, layer: int) { sys_call("BaseMaterial3D", "set_heightmap_deep_parallax_min_layers", 1286410249, Nil, main.p_object, layer);  }  // 94
get_heightmap_deep_parallax_min_layers :: (main: *BaseMaterial3D) -> int { call_ret := cast(*int) sys_call("BaseMaterial3D", "get_heightmap_deep_parallax_min_layers", 3905245786, int, main.p_object); return call_ret.*; }  // 95
set_heightmap_deep_parallax_max_layers :: (main: *BaseMaterial3D, layer: int) { sys_call("BaseMaterial3D", "set_heightmap_deep_parallax_max_layers", 1286410249, Nil, main.p_object, layer);  }  // 96
get_heightmap_deep_parallax_max_layers :: (main: *BaseMaterial3D) -> int { call_ret := cast(*int) sys_call("BaseMaterial3D", "get_heightmap_deep_parallax_max_layers", 3905245786, int, main.p_object); return call_ret.*; }  // 97
set_heightmap_deep_parallax_flip_tangent :: (main: *BaseMaterial3D, flip: bool) { sys_call("BaseMaterial3D", "set_heightmap_deep_parallax_flip_tangent", 2586408642, Nil, main.p_object, flip);  }  // 98
get_heightmap_deep_parallax_flip_tangent :: (main: *BaseMaterial3D) -> bool { call_ret := cast(*bool) sys_call("BaseMaterial3D", "get_heightmap_deep_parallax_flip_tangent", 36873697, bool, main.p_object); return call_ret.*; }  // 99
set_heightmap_deep_parallax_flip_binormal :: (main: *BaseMaterial3D, flip: bool) { sys_call("BaseMaterial3D", "set_heightmap_deep_parallax_flip_binormal", 2586408642, Nil, main.p_object, flip);  }  // 100
get_heightmap_deep_parallax_flip_binormal :: (main: *BaseMaterial3D) -> bool { call_ret := cast(*bool) sys_call("BaseMaterial3D", "get_heightmap_deep_parallax_flip_binormal", 36873697, bool, main.p_object); return call_ret.*; }  // 101
set_grow :: (main: *BaseMaterial3D, amount: float) { sys_call("BaseMaterial3D", "set_grow", 373806689, Nil, main.p_object, amount);  }  // 102
get_grow :: (main: *BaseMaterial3D) -> float { call_ret := cast(*float) sys_call("BaseMaterial3D", "get_grow", 1740695150, float, main.p_object); return call_ret.*; }  // 103
set_emission_operator :: (main: *BaseMaterial3D, _operator: BaseMaterial3D.EmissionOperator) { sys_call("BaseMaterial3D", "set_emission_operator", 3825128922, Nil, main.p_object, _operator);  }  // 104
get_emission_operator :: (main: *BaseMaterial3D) -> BaseMaterial3D.EmissionOperator { call_ret := cast(*BaseMaterial3D.EmissionOperator) sys_call("BaseMaterial3D", "get_emission_operator", 974205018, BaseMaterial3D.EmissionOperator, main.p_object); return call_ret.*; }  // 105
set_ao_light_affect :: (main: *BaseMaterial3D, amount: float) { sys_call("BaseMaterial3D", "set_ao_light_affect", 373806689, Nil, main.p_object, amount);  }  // 106
get_ao_light_affect :: (main: *BaseMaterial3D) -> float { call_ret := cast(*float) sys_call("BaseMaterial3D", "get_ao_light_affect", 1740695150, float, main.p_object); return call_ret.*; }  // 107
set_alpha_scissor_threshold :: (main: *BaseMaterial3D, threshold: float) { sys_call("BaseMaterial3D", "set_alpha_scissor_threshold", 373806689, Nil, main.p_object, threshold);  }  // 108
get_alpha_scissor_threshold :: (main: *BaseMaterial3D) -> float { call_ret := cast(*float) sys_call("BaseMaterial3D", "get_alpha_scissor_threshold", 1740695150, float, main.p_object); return call_ret.*; }  // 109
set_alpha_hash_scale :: (main: *BaseMaterial3D, threshold: float) { sys_call("BaseMaterial3D", "set_alpha_hash_scale", 373806689, Nil, main.p_object, threshold);  }  // 110
get_alpha_hash_scale :: (main: *BaseMaterial3D) -> float { call_ret := cast(*float) sys_call("BaseMaterial3D", "get_alpha_hash_scale", 1740695150, float, main.p_object); return call_ret.*; }  // 111
set_grow_enabled :: (main: *BaseMaterial3D, enable: bool) { sys_call("BaseMaterial3D", "set_grow_enabled", 2586408642, Nil, main.p_object, enable);  }  // 112
is_grow_enabled :: (main: *BaseMaterial3D) -> bool { call_ret := cast(*bool) sys_call("BaseMaterial3D", "is_grow_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 113
set_metallic_texture_channel :: (main: *BaseMaterial3D, channel: BaseMaterial3D.TextureChannel) { sys_call("BaseMaterial3D", "set_metallic_texture_channel", 744167988, Nil, main.p_object, channel);  }  // 114
get_metallic_texture_channel :: (main: *BaseMaterial3D) -> BaseMaterial3D.TextureChannel { call_ret := cast(*BaseMaterial3D.TextureChannel) sys_call("BaseMaterial3D", "get_metallic_texture_channel", 568133867, BaseMaterial3D.TextureChannel, main.p_object); return call_ret.*; }  // 115
set_roughness_texture_channel :: (main: *BaseMaterial3D, channel: BaseMaterial3D.TextureChannel) { sys_call("BaseMaterial3D", "set_roughness_texture_channel", 744167988, Nil, main.p_object, channel);  }  // 116
get_roughness_texture_channel :: (main: *BaseMaterial3D) -> BaseMaterial3D.TextureChannel { call_ret := cast(*BaseMaterial3D.TextureChannel) sys_call("BaseMaterial3D", "get_roughness_texture_channel", 568133867, BaseMaterial3D.TextureChannel, main.p_object); return call_ret.*; }  // 117
set_ao_texture_channel :: (main: *BaseMaterial3D, channel: BaseMaterial3D.TextureChannel) { sys_call("BaseMaterial3D", "set_ao_texture_channel", 744167988, Nil, main.p_object, channel);  }  // 118
get_ao_texture_channel :: (main: *BaseMaterial3D) -> BaseMaterial3D.TextureChannel { call_ret := cast(*BaseMaterial3D.TextureChannel) sys_call("BaseMaterial3D", "get_ao_texture_channel", 568133867, BaseMaterial3D.TextureChannel, main.p_object); return call_ret.*; }  // 119
set_refraction_texture_channel :: (main: *BaseMaterial3D, channel: BaseMaterial3D.TextureChannel) { sys_call("BaseMaterial3D", "set_refraction_texture_channel", 744167988, Nil, main.p_object, channel);  }  // 120
get_refraction_texture_channel :: (main: *BaseMaterial3D) -> BaseMaterial3D.TextureChannel { call_ret := cast(*BaseMaterial3D.TextureChannel) sys_call("BaseMaterial3D", "get_refraction_texture_channel", 568133867, BaseMaterial3D.TextureChannel, main.p_object); return call_ret.*; }  // 121
set_proximity_fade_enabled :: (main: *BaseMaterial3D, enabled: bool) { sys_call("BaseMaterial3D", "set_proximity_fade_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 122
is_proximity_fade_enabled :: (main: *BaseMaterial3D) -> bool { call_ret := cast(*bool) sys_call("BaseMaterial3D", "is_proximity_fade_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 123
set_proximity_fade_distance :: (main: *BaseMaterial3D, distance: float) { sys_call("BaseMaterial3D", "set_proximity_fade_distance", 373806689, Nil, main.p_object, distance);  }  // 124
get_proximity_fade_distance :: (main: *BaseMaterial3D) -> float { call_ret := cast(*float) sys_call("BaseMaterial3D", "get_proximity_fade_distance", 1740695150, float, main.p_object); return call_ret.*; }  // 125
set_msdf_pixel_range :: (main: *BaseMaterial3D, range: float) { sys_call("BaseMaterial3D", "set_msdf_pixel_range", 373806689, Nil, main.p_object, range);  }  // 126
get_msdf_pixel_range :: (main: *BaseMaterial3D) -> float { call_ret := cast(*float) sys_call("BaseMaterial3D", "get_msdf_pixel_range", 1740695150, float, main.p_object); return call_ret.*; }  // 127
set_msdf_outline_size :: (main: *BaseMaterial3D, size: float) { sys_call("BaseMaterial3D", "set_msdf_outline_size", 373806689, Nil, main.p_object, size);  }  // 128
get_msdf_outline_size :: (main: *BaseMaterial3D) -> float { call_ret := cast(*float) sys_call("BaseMaterial3D", "get_msdf_outline_size", 1740695150, float, main.p_object); return call_ret.*; }  // 129
set_distance_fade :: (main: *BaseMaterial3D, mode: BaseMaterial3D.DistanceFadeMode) { sys_call("BaseMaterial3D", "set_distance_fade", 1379478617, Nil, main.p_object, mode);  }  // 130
get_distance_fade :: (main: *BaseMaterial3D) -> BaseMaterial3D.DistanceFadeMode { call_ret := cast(*BaseMaterial3D.DistanceFadeMode) sys_call("BaseMaterial3D", "get_distance_fade", 2694575734, BaseMaterial3D.DistanceFadeMode, main.p_object); return call_ret.*; }  // 131
set_distance_fade_max_distance :: (main: *BaseMaterial3D, distance: float) { sys_call("BaseMaterial3D", "set_distance_fade_max_distance", 373806689, Nil, main.p_object, distance);  }  // 132
get_distance_fade_max_distance :: (main: *BaseMaterial3D) -> float { call_ret := cast(*float) sys_call("BaseMaterial3D", "get_distance_fade_max_distance", 1740695150, float, main.p_object); return call_ret.*; }  // 133
set_distance_fade_min_distance :: (main: *BaseMaterial3D, distance: float) { sys_call("BaseMaterial3D", "set_distance_fade_min_distance", 373806689, Nil, main.p_object, distance);  }  // 134
get_distance_fade_min_distance :: (main: *BaseMaterial3D) -> float { call_ret := cast(*float) sys_call("BaseMaterial3D", "get_distance_fade_min_distance", 1740695150, float, main.p_object); return call_ret.*; }  // 135

create :: (main: *BitMap, size: Vector2i) { sys_call("BitMap", "create", 1130785943, Nil, main.p_object, size);  }  // 0
create_from_image_alpha :: (main: *BitMap, image: Image) { sys_call("BitMap", "create_from_image_alpha", 106271684, Nil, main.p_object, image);  }  // 1
set_bitv :: (main: *BitMap, position: Vector2i, bit: bool) { sys_call("BitMap", "set_bitv", 4153096796, Nil, main.p_object, position, bit);  }  // 2
set_bit :: (main: *BitMap, x: int, y: int, bit: bool) { sys_call("BitMap", "set_bit", 1383440665, Nil, main.p_object, x, y, bit);  }  // 3
get_bitv :: (main: *BitMap, position: Vector2i) -> bool { call_ret := cast(*bool) sys_call("BitMap", "get_bitv", 3900751641, bool, main.p_object, position); return call_ret.*; }  // 4
get_bit :: (main: *BitMap, x: int, y: int) -> bool { call_ret := cast(*bool) sys_call("BitMap", "get_bit", 2522259332, bool, main.p_object, x, y); return call_ret.*; }  // 5
set_bit_rect :: (main: *BitMap, rect: Rect2i, bit: bool) { sys_call("BitMap", "set_bit_rect", 472162941, Nil, main.p_object, rect, bit);  }  // 6
get_true_bit_count :: (main: *BitMap) -> int { call_ret := cast(*int) sys_call("BitMap", "get_true_bit_count", 3905245786, int, main.p_object); return call_ret.*; }  // 7
get_size :: (main: *BitMap) -> Vector2i { call_ret := cast(*Vector2i) sys_call("BitMap", "get_size", 3690982128, Vector2i, main.p_object); return call_ret.*; }  // 8
resize :: (main: *BitMap, new_size: Vector2i) { sys_call("BitMap", "resize", 1130785943, Nil, main.p_object, new_size);  }  // 9
grow_mask :: (main: *BitMap, pixels: int, rect: Rect2i) { sys_call("BitMap", "grow_mask", 3317281434, Nil, main.p_object, pixels, rect);  }  // 10
convert_to_image :: (main: *BitMap) -> *Image { call_ret := cast(*Image) sys_call("BitMap", "convert_to_image", 4190603485, Image, main.p_object); return call_ret; }  // 11
opaque_to_polygons :: (main: *BitMap, rect: Rect2i) -> [] PackedVector2Array { call_ret := cast(*[] PackedVector2Array) sys_call("BitMap", "opaque_to_polygons", 48478126, [] PackedVector2Array, main.p_object, rect); return call_ret.*; }  // 12

set_rest :: (main: *Bone2D, rest: Transform2D) { sys_call("Bone2D", "set_rest", 2761652528, Nil, main.p_object, rest);  }  // 0
get_rest :: (main: *Bone2D) -> Transform2D { call_ret := cast(*Transform2D) sys_call("Bone2D", "get_rest", 3814499831, Transform2D, main.p_object); return call_ret.*; }  // 1
apply_rest :: (main: *Bone2D) { sys_call("Bone2D", "apply_rest", 3218959716, Nil, main.p_object);  }  // 2
get_skeleton_rest :: (main: *Bone2D) -> Transform2D { call_ret := cast(*Transform2D) sys_call("Bone2D", "get_skeleton_rest", 3814499831, Transform2D, main.p_object); return call_ret.*; }  // 3
get_index_in_skeleton :: (main: *Bone2D) -> int { call_ret := cast(*int) sys_call("Bone2D", "get_index_in_skeleton", 3905245786, int, main.p_object); return call_ret.*; }  // 4
set_autocalculate_length_and_angle :: (main: *Bone2D, auto_calculate: bool) { sys_call("Bone2D", "set_autocalculate_length_and_angle", 2586408642, Nil, main.p_object, auto_calculate);  }  // 5
get_autocalculate_length_and_angle :: (main: *Bone2D) -> bool { call_ret := cast(*bool) sys_call("Bone2D", "get_autocalculate_length_and_angle", 36873697, bool, main.p_object); return call_ret.*; }  // 6
set_length :: (main: *Bone2D, length: float) { sys_call("Bone2D", "set_length", 373806689, Nil, main.p_object, length);  }  // 7
get_length :: (main: *Bone2D) -> float { call_ret := cast(*float) sys_call("Bone2D", "get_length", 1740695150, float, main.p_object); return call_ret.*; }  // 8
set_bone_angle :: (main: *Bone2D, angle: float) { sys_call("Bone2D", "set_bone_angle", 373806689, Nil, main.p_object, angle);  }  // 9
get_bone_angle :: (main: *Bone2D) -> float { call_ret := cast(*float) sys_call("Bone2D", "get_bone_angle", 1740695150, float, main.p_object); return call_ret.*; }  // 10

get_skeleton :: (main: *BoneAttachment3D) -> *Skeleton3D { call_ret := cast(*Skeleton3D) sys_call("BoneAttachment3D", "get_skeleton", 1814733083, Skeleton3D, main.p_object); return call_ret; }  // 0
set_bone_name :: (main: *BoneAttachment3D, bone_name: string) { sys_call("BoneAttachment3D", "set_bone_name", 83702148, Nil, main.p_object, bone_name);  }  // 1
get_bone_name :: (main: *BoneAttachment3D) -> gstring { call_ret := cast(*gstring) sys_call("BoneAttachment3D", "get_bone_name", 201670096, gstring, main.p_object); return call_ret.*; }  // 2
set_bone_idx :: (main: *BoneAttachment3D, bone_idx: int) { sys_call("BoneAttachment3D", "set_bone_idx", 1286410249, Nil, main.p_object, bone_idx);  }  // 3
get_bone_idx :: (main: *BoneAttachment3D) -> int { call_ret := cast(*int) sys_call("BoneAttachment3D", "get_bone_idx", 3905245786, int, main.p_object); return call_ret.*; }  // 4
on_skeleton_update :: (main: *BoneAttachment3D) { sys_call("BoneAttachment3D", "on_skeleton_update", 3218959716, Nil, main.p_object);  }  // 5
set_override_pose :: (main: *BoneAttachment3D, override_pose: bool) { sys_call("BoneAttachment3D", "set_override_pose", 2586408642, Nil, main.p_object, override_pose);  }  // 6
get_override_pose :: (main: *BoneAttachment3D) -> bool { call_ret := cast(*bool) sys_call("BoneAttachment3D", "get_override_pose", 36873697, bool, main.p_object); return call_ret.*; }  // 7
set_use_external_skeleton :: (main: *BoneAttachment3D, use_external_skeleton: bool) { sys_call("BoneAttachment3D", "set_use_external_skeleton", 2586408642, Nil, main.p_object, use_external_skeleton);  }  // 8
get_use_external_skeleton :: (main: *BoneAttachment3D) -> bool { call_ret := cast(*bool) sys_call("BoneAttachment3D", "get_use_external_skeleton", 36873697, bool, main.p_object); return call_ret.*; }  // 9
set_external_skeleton :: (main: *BoneAttachment3D, external_skeleton: string) { sys_call("BoneAttachment3D", "set_external_skeleton", 1348162250, Nil, main.p_object, external_skeleton);  }  // 10
get_external_skeleton :: (main: *BoneAttachment3D) -> NodePath { call_ret := cast(*NodePath) sys_call("BoneAttachment3D", "get_external_skeleton", 4075236667, NodePath, main.p_object); return call_ret.*; }  // 11

get_profile :: (main: *BoneMap) -> *SkeletonProfile { call_ret := cast(*SkeletonProfile) sys_call("BoneMap", "get_profile", 4291782652, SkeletonProfile, main.p_object); return call_ret; }  // 0
set_profile :: (main: *BoneMap, profile: SkeletonProfile) { sys_call("BoneMap", "set_profile", 3870374136, Nil, main.p_object, profile);  }  // 1
get_skeleton_bone_name :: (main: *BoneMap, profile_bone_name: string) -> StringName { call_ret := cast(*StringName) sys_call("BoneMap", "get_skeleton_bone_name", 1965194235, StringName, main.p_object, profile_bone_name); return call_ret.*; }  // 2
set_skeleton_bone_name :: (main: *BoneMap, profile_bone_name: string, skeleton_bone_name: string) { sys_call("BoneMap", "set_skeleton_bone_name", 3740211285, Nil, main.p_object, profile_bone_name, skeleton_bone_name);  }  // 3
find_profile_bone_name :: (main: *BoneMap, skeleton_bone_name: string) -> StringName { call_ret := cast(*StringName) sys_call("BoneMap", "find_profile_bone_name", 1965194235, StringName, main.p_object, skeleton_bone_name); return call_ret.*; }  // 4

add_spacer :: (main: *BoxContainer, begin: bool) -> *Control { call_ret := cast(*Control) sys_call("BoxContainer", "add_spacer", 1326660695, Control, main.p_object, begin); return call_ret; }  // 0
set_alignment :: (main: *BoxContainer, alignment: BoxContainer.AlignmentMode) { sys_call("BoxContainer", "set_alignment", 2456745134, Nil, main.p_object, alignment);  }  // 1
get_alignment :: (main: *BoxContainer) -> BoxContainer.AlignmentMode { call_ret := cast(*BoxContainer.AlignmentMode) sys_call("BoxContainer", "get_alignment", 1915476527, BoxContainer.AlignmentMode, main.p_object); return call_ret.*; }  // 2
set_vertical :: (main: *BoxContainer, vertical: bool) { sys_call("BoxContainer", "set_vertical", 2586408642, Nil, main.p_object, vertical);  }  // 3
is_vertical :: (main: *BoxContainer) -> bool { call_ret := cast(*bool) sys_call("BoxContainer", "is_vertical", 36873697, bool, main.p_object); return call_ret.*; }  // 4

set_size :: (main: *BoxMesh, size: Vector3) { sys_call("BoxMesh", "set_size", 3460891852, Nil, main.p_object, size);  }  // 0
get_size :: (main: *BoxMesh) -> Vector3 { call_ret := cast(*Vector3) sys_call("BoxMesh", "get_size", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 1
set_subdivide_width :: (main: *BoxMesh, subdivide: int) { sys_call("BoxMesh", "set_subdivide_width", 1286410249, Nil, main.p_object, subdivide);  }  // 2
get_subdivide_width :: (main: *BoxMesh) -> int { call_ret := cast(*int) sys_call("BoxMesh", "get_subdivide_width", 3905245786, int, main.p_object); return call_ret.*; }  // 3
set_subdivide_height :: (main: *BoxMesh, divisions: int) { sys_call("BoxMesh", "set_subdivide_height", 1286410249, Nil, main.p_object, divisions);  }  // 4
get_subdivide_height :: (main: *BoxMesh) -> int { call_ret := cast(*int) sys_call("BoxMesh", "get_subdivide_height", 3905245786, int, main.p_object); return call_ret.*; }  // 5
set_subdivide_depth :: (main: *BoxMesh, divisions: int) { sys_call("BoxMesh", "set_subdivide_depth", 1286410249, Nil, main.p_object, divisions);  }  // 6
get_subdivide_depth :: (main: *BoxMesh) -> int { call_ret := cast(*int) sys_call("BoxMesh", "get_subdivide_depth", 3905245786, int, main.p_object); return call_ret.*; }  // 7

set_size :: (main: *BoxOccluder3D, size: Vector3) { sys_call("BoxOccluder3D", "set_size", 3460891852, Nil, main.p_object, size);  }  // 0
get_size :: (main: *BoxOccluder3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("BoxOccluder3D", "get_size", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 1

set_size :: (main: *BoxShape3D, size: Vector3) { sys_call("BoxShape3D", "set_size", 3460891852, Nil, main.p_object, size);  }  // 0
get_size :: (main: *BoxShape3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("BoxShape3D", "get_size", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 1

set_text :: (main: *Button, text: string) { sys_call("Button", "set_text", 83702148, Nil, main.p_object, text);  }  // 0
get_text :: (main: *Button) -> gstring { call_ret := cast(*gstring) sys_call("Button", "get_text", 201670096, gstring, main.p_object); return call_ret.*; }  // 1
set_text_overrun_behavior :: (main: *Button, overrun_behavior: TextServer.OverrunBehavior) { sys_call("Button", "set_text_overrun_behavior", 1008890932, Nil, main.p_object, overrun_behavior);  }  // 2
get_text_overrun_behavior :: (main: *Button) -> TextServer.OverrunBehavior { call_ret := cast(*TextServer.OverrunBehavior) sys_call("Button", "get_text_overrun_behavior", 3779142101, TextServer.OverrunBehavior, main.p_object); return call_ret.*; }  // 3
set_autowrap_mode :: (main: *Button, autowrap_mode: TextServer.AutowrapMode) { sys_call("Button", "set_autowrap_mode", 3289138044, Nil, main.p_object, autowrap_mode);  }  // 4
get_autowrap_mode :: (main: *Button) -> TextServer.AutowrapMode { call_ret := cast(*TextServer.AutowrapMode) sys_call("Button", "get_autowrap_mode", 1549071663, TextServer.AutowrapMode, main.p_object); return call_ret.*; }  // 5
set_text_direction :: (main: *Button, direction: Control.TextDirection) { sys_call("Button", "set_text_direction", 119160795, Nil, main.p_object, direction);  }  // 6
get_text_direction :: (main: *Button) -> Control.TextDirection { call_ret := cast(*Control.TextDirection) sys_call("Button", "get_text_direction", 797257663, Control.TextDirection, main.p_object); return call_ret.*; }  // 7
set_language :: (main: *Button, language: string) { sys_call("Button", "set_language", 83702148, Nil, main.p_object, language);  }  // 8
get_language :: (main: *Button) -> gstring { call_ret := cast(*gstring) sys_call("Button", "get_language", 201670096, gstring, main.p_object); return call_ret.*; }  // 9
set_button_icon :: (main: *Button, texture: Texture2D) { sys_call("Button", "set_button_icon", 4051416890, Nil, main.p_object, texture);  }  // 10
get_button_icon :: (main: *Button) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("Button", "get_button_icon", 3635182373, Texture2D, main.p_object); return call_ret; }  // 11
set_flat :: (main: *Button, enabled: bool) { sys_call("Button", "set_flat", 2586408642, Nil, main.p_object, enabled);  }  // 12
is_flat :: (main: *Button) -> bool { call_ret := cast(*bool) sys_call("Button", "is_flat", 36873697, bool, main.p_object); return call_ret.*; }  // 13
set_clip_text :: (main: *Button, enabled: bool) { sys_call("Button", "set_clip_text", 2586408642, Nil, main.p_object, enabled);  }  // 14
get_clip_text :: (main: *Button) -> bool { call_ret := cast(*bool) sys_call("Button", "get_clip_text", 36873697, bool, main.p_object); return call_ret.*; }  // 15
set_text_alignment :: (main: *Button, alignment: HorizontalAlignment) { sys_call("Button", "set_text_alignment", 2312603777, Nil, main.p_object, alignment);  }  // 16
get_text_alignment :: (main: *Button) -> HorizontalAlignment { call_ret := cast(*HorizontalAlignment) sys_call("Button", "get_text_alignment", 341400642, HorizontalAlignment, main.p_object); return call_ret.*; }  // 17
set_icon_alignment :: (main: *Button, icon_alignment: HorizontalAlignment) { sys_call("Button", "set_icon_alignment", 2312603777, Nil, main.p_object, icon_alignment);  }  // 18
get_icon_alignment :: (main: *Button) -> HorizontalAlignment { call_ret := cast(*HorizontalAlignment) sys_call("Button", "get_icon_alignment", 341400642, HorizontalAlignment, main.p_object); return call_ret.*; }  // 19
set_vertical_icon_alignment :: (main: *Button, vertical_icon_alignment: VerticalAlignment) { sys_call("Button", "set_vertical_icon_alignment", 1796458609, Nil, main.p_object, vertical_icon_alignment);  }  // 20
get_vertical_icon_alignment :: (main: *Button) -> VerticalAlignment { call_ret := cast(*VerticalAlignment) sys_call("Button", "get_vertical_icon_alignment", 3274884059, VerticalAlignment, main.p_object); return call_ret.*; }  // 21
set_expand_icon :: (main: *Button, enabled: bool) { sys_call("Button", "set_expand_icon", 2586408642, Nil, main.p_object, enabled);  }  // 22
is_expand_icon :: (main: *Button) -> bool { call_ret := cast(*bool) sys_call("Button", "is_expand_icon", 36873697, bool, main.p_object); return call_ret.*; }  // 23

get_pressed_button :: (main: *ButtonGroup) -> *BaseButton { call_ret := cast(*BaseButton) sys_call("ButtonGroup", "get_pressed_button", 3886434893, BaseButton, main.p_object); return call_ret; }  // 0
get_buttons :: (main: *ButtonGroup) -> [] BaseButton { call_ret := cast(*[] BaseButton) sys_call("ButtonGroup", "get_buttons", 2915620761, [] BaseButton, main.p_object); return call_ret.*; }  // 1
set_allow_unpress :: (main: *ButtonGroup, enabled: bool) { sys_call("ButtonGroup", "set_allow_unpress", 2586408642, Nil, main.p_object, enabled);  }  // 2
is_allow_unpress :: (main: *ButtonGroup) -> bool { call_ret := cast(*bool) sys_call("ButtonGroup", "is_allow_unpress", 2240911060, bool, main.p_object); return call_ret.*; }  // 3

set_emitting :: (main: *CPUParticles2D, emitting: bool) { sys_call("CPUParticles2D", "set_emitting", 2586408642, Nil, main.p_object, emitting);  }  // 0
set_amount :: (main: *CPUParticles2D, amount: int) { sys_call("CPUParticles2D", "set_amount", 1286410249, Nil, main.p_object, amount);  }  // 1
set_lifetime :: (main: *CPUParticles2D, secs: float) { sys_call("CPUParticles2D", "set_lifetime", 373806689, Nil, main.p_object, secs);  }  // 2
set_one_shot :: (main: *CPUParticles2D, enable: bool) { sys_call("CPUParticles2D", "set_one_shot", 2586408642, Nil, main.p_object, enable);  }  // 3
set_pre_process_time :: (main: *CPUParticles2D, secs: float) { sys_call("CPUParticles2D", "set_pre_process_time", 373806689, Nil, main.p_object, secs);  }  // 4
set_explosiveness_ratio :: (main: *CPUParticles2D, ratio: float) { sys_call("CPUParticles2D", "set_explosiveness_ratio", 373806689, Nil, main.p_object, ratio);  }  // 5
set_randomness_ratio :: (main: *CPUParticles2D, ratio: float) { sys_call("CPUParticles2D", "set_randomness_ratio", 373806689, Nil, main.p_object, ratio);  }  // 6
set_lifetime_randomness :: (main: *CPUParticles2D, random: float) { sys_call("CPUParticles2D", "set_lifetime_randomness", 373806689, Nil, main.p_object, random);  }  // 7
set_use_local_coordinates :: (main: *CPUParticles2D, enable: bool) { sys_call("CPUParticles2D", "set_use_local_coordinates", 2586408642, Nil, main.p_object, enable);  }  // 8
set_fixed_fps :: (main: *CPUParticles2D, fps: int) { sys_call("CPUParticles2D", "set_fixed_fps", 1286410249, Nil, main.p_object, fps);  }  // 9
set_fractional_delta :: (main: *CPUParticles2D, enable: bool) { sys_call("CPUParticles2D", "set_fractional_delta", 2586408642, Nil, main.p_object, enable);  }  // 10
set_speed_scale :: (main: *CPUParticles2D, scale: float) { sys_call("CPUParticles2D", "set_speed_scale", 373806689, Nil, main.p_object, scale);  }  // 11
request_particles_process :: (main: *CPUParticles2D, process_time: float) { sys_call("CPUParticles2D", "request_particles_process", 373806689, Nil, main.p_object, process_time);  }  // 12
is_emitting :: (main: *CPUParticles2D) -> bool { call_ret := cast(*bool) sys_call("CPUParticles2D", "is_emitting", 36873697, bool, main.p_object); return call_ret.*; }  // 13
get_amount :: (main: *CPUParticles2D) -> int { call_ret := cast(*int) sys_call("CPUParticles2D", "get_amount", 3905245786, int, main.p_object); return call_ret.*; }  // 14
get_lifetime :: (main: *CPUParticles2D) -> float { call_ret := cast(*float) sys_call("CPUParticles2D", "get_lifetime", 1740695150, float, main.p_object); return call_ret.*; }  // 15
get_one_shot :: (main: *CPUParticles2D) -> bool { call_ret := cast(*bool) sys_call("CPUParticles2D", "get_one_shot", 36873697, bool, main.p_object); return call_ret.*; }  // 16
get_pre_process_time :: (main: *CPUParticles2D) -> float { call_ret := cast(*float) sys_call("CPUParticles2D", "get_pre_process_time", 1740695150, float, main.p_object); return call_ret.*; }  // 17
get_explosiveness_ratio :: (main: *CPUParticles2D) -> float { call_ret := cast(*float) sys_call("CPUParticles2D", "get_explosiveness_ratio", 1740695150, float, main.p_object); return call_ret.*; }  // 18
get_randomness_ratio :: (main: *CPUParticles2D) -> float { call_ret := cast(*float) sys_call("CPUParticles2D", "get_randomness_ratio", 1740695150, float, main.p_object); return call_ret.*; }  // 19
get_lifetime_randomness :: (main: *CPUParticles2D) -> float { call_ret := cast(*float) sys_call("CPUParticles2D", "get_lifetime_randomness", 1740695150, float, main.p_object); return call_ret.*; }  // 20
get_use_local_coordinates :: (main: *CPUParticles2D) -> bool { call_ret := cast(*bool) sys_call("CPUParticles2D", "get_use_local_coordinates", 36873697, bool, main.p_object); return call_ret.*; }  // 21
get_fixed_fps :: (main: *CPUParticles2D) -> int { call_ret := cast(*int) sys_call("CPUParticles2D", "get_fixed_fps", 3905245786, int, main.p_object); return call_ret.*; }  // 22
get_fractional_delta :: (main: *CPUParticles2D) -> bool { call_ret := cast(*bool) sys_call("CPUParticles2D", "get_fractional_delta", 36873697, bool, main.p_object); return call_ret.*; }  // 23
get_speed_scale :: (main: *CPUParticles2D) -> float { call_ret := cast(*float) sys_call("CPUParticles2D", "get_speed_scale", 1740695150, float, main.p_object); return call_ret.*; }  // 24
set_use_fixed_seed :: (main: *CPUParticles2D, use_fixed_seed: bool) { sys_call("CPUParticles2D", "set_use_fixed_seed", 2586408642, Nil, main.p_object, use_fixed_seed);  }  // 25
get_use_fixed_seed :: (main: *CPUParticles2D) -> bool { call_ret := cast(*bool) sys_call("CPUParticles2D", "get_use_fixed_seed", 36873697, bool, main.p_object); return call_ret.*; }  // 26
set_seed :: (main: *CPUParticles2D, seed: int) { sys_call("CPUParticles2D", "set_seed", 1286410249, Nil, main.p_object, seed);  }  // 27
get_seed :: (main: *CPUParticles2D) -> int { call_ret := cast(*int) sys_call("CPUParticles2D", "get_seed", 3905245786, int, main.p_object); return call_ret.*; }  // 28
set_draw_order :: (main: *CPUParticles2D, order: CPUParticles2D.DrawOrder) { sys_call("CPUParticles2D", "set_draw_order", 4183193490, Nil, main.p_object, order);  }  // 29
get_draw_order :: (main: *CPUParticles2D) -> CPUParticles2D.DrawOrder { call_ret := cast(*CPUParticles2D.DrawOrder) sys_call("CPUParticles2D", "get_draw_order", 1668655735, CPUParticles2D.DrawOrder, main.p_object); return call_ret.*; }  // 30
set_texture :: (main: *CPUParticles2D, texture: Texture2D) { sys_call("CPUParticles2D", "set_texture", 4051416890, Nil, main.p_object, texture);  }  // 31
get_texture :: (main: *CPUParticles2D) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("CPUParticles2D", "get_texture", 3635182373, Texture2D, main.p_object); return call_ret; }  // 32
restart :: (main: *CPUParticles2D) { sys_call("CPUParticles2D", "restart", 107499316, Nil, main.p_object);  }  // 33
set_direction :: (main: *CPUParticles2D, direction: Vector2) { sys_call("CPUParticles2D", "set_direction", 743155724, Nil, main.p_object, direction);  }  // 34
get_direction :: (main: *CPUParticles2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("CPUParticles2D", "get_direction", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 35
set_spread :: (main: *CPUParticles2D, spread: float) { sys_call("CPUParticles2D", "set_spread", 373806689, Nil, main.p_object, spread);  }  // 36
get_spread :: (main: *CPUParticles2D) -> float { call_ret := cast(*float) sys_call("CPUParticles2D", "get_spread", 1740695150, float, main.p_object); return call_ret.*; }  // 37
set_param_min :: (main: *CPUParticles2D, param: CPUParticles2D.Parameter, value: float) { sys_call("CPUParticles2D", "set_param_min", 3320615296, Nil, main.p_object, param, value);  }  // 38
get_param_min :: (main: *CPUParticles2D, param: CPUParticles2D.Parameter) -> float { call_ret := cast(*float) sys_call("CPUParticles2D", "get_param_min", 2038050600, float, main.p_object, param); return call_ret.*; }  // 39
set_param_max :: (main: *CPUParticles2D, param: CPUParticles2D.Parameter, value: float) { sys_call("CPUParticles2D", "set_param_max", 3320615296, Nil, main.p_object, param, value);  }  // 40
get_param_max :: (main: *CPUParticles2D, param: CPUParticles2D.Parameter) -> float { call_ret := cast(*float) sys_call("CPUParticles2D", "get_param_max", 2038050600, float, main.p_object, param); return call_ret.*; }  // 41
set_param_curve :: (main: *CPUParticles2D, param: CPUParticles2D.Parameter, curve: Curve) { sys_call("CPUParticles2D", "set_param_curve", 2959350143, Nil, main.p_object, param, curve);  }  // 42
get_param_curve :: (main: *CPUParticles2D, param: CPUParticles2D.Parameter) -> *Curve { call_ret := cast(*Curve) sys_call("CPUParticles2D", "get_param_curve", 2603158474, Curve, main.p_object, param); return call_ret; }  // 43
set_color :: (main: *CPUParticles2D, color: Color) { sys_call("CPUParticles2D", "set_color", 2920490490, Nil, main.p_object, color);  }  // 44
get_color :: (main: *CPUParticles2D) -> Color { call_ret := cast(*Color) sys_call("CPUParticles2D", "get_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 45
set_color_ramp :: (main: *CPUParticles2D, ramp: Gradient) { sys_call("CPUParticles2D", "set_color_ramp", 2756054477, Nil, main.p_object, ramp);  }  // 46
get_color_ramp :: (main: *CPUParticles2D) -> *Gradient { call_ret := cast(*Gradient) sys_call("CPUParticles2D", "get_color_ramp", 132272999, Gradient, main.p_object); return call_ret; }  // 47
set_color_initial_ramp :: (main: *CPUParticles2D, ramp: Gradient) { sys_call("CPUParticles2D", "set_color_initial_ramp", 2756054477, Nil, main.p_object, ramp);  }  // 48
get_color_initial_ramp :: (main: *CPUParticles2D) -> *Gradient { call_ret := cast(*Gradient) sys_call("CPUParticles2D", "get_color_initial_ramp", 132272999, Gradient, main.p_object); return call_ret; }  // 49
set_particle_flag :: (main: *CPUParticles2D, particle_flag: CPUParticles2D.ParticleFlags, enable: bool) { sys_call("CPUParticles2D", "set_particle_flag", 4178137949, Nil, main.p_object, particle_flag, enable);  }  // 50
get_particle_flag :: (main: *CPUParticles2D, particle_flag: CPUParticles2D.ParticleFlags) -> bool { call_ret := cast(*bool) sys_call("CPUParticles2D", "get_particle_flag", 2829976507, bool, main.p_object, particle_flag); return call_ret.*; }  // 51
set_emission_shape :: (main: *CPUParticles2D, shape: CPUParticles2D.EmissionShape) { sys_call("CPUParticles2D", "set_emission_shape", 393763892, Nil, main.p_object, shape);  }  // 52
get_emission_shape :: (main: *CPUParticles2D) -> CPUParticles2D.EmissionShape { call_ret := cast(*CPUParticles2D.EmissionShape) sys_call("CPUParticles2D", "get_emission_shape", 1740246024, CPUParticles2D.EmissionShape, main.p_object); return call_ret.*; }  // 53
set_emission_sphere_radius :: (main: *CPUParticles2D, radius: float) { sys_call("CPUParticles2D", "set_emission_sphere_radius", 373806689, Nil, main.p_object, radius);  }  // 54
get_emission_sphere_radius :: (main: *CPUParticles2D) -> float { call_ret := cast(*float) sys_call("CPUParticles2D", "get_emission_sphere_radius", 1740695150, float, main.p_object); return call_ret.*; }  // 55
set_emission_rect_extents :: (main: *CPUParticles2D, extents: Vector2) { sys_call("CPUParticles2D", "set_emission_rect_extents", 743155724, Nil, main.p_object, extents);  }  // 56
get_emission_rect_extents :: (main: *CPUParticles2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("CPUParticles2D", "get_emission_rect_extents", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 57
set_emission_points :: (main: *CPUParticles2D, array: PackedVector2Array) { sys_call("CPUParticles2D", "set_emission_points", 1509147220, Nil, main.p_object, array);  }  // 58
get_emission_points :: (main: *CPUParticles2D) -> PackedVector2Array { call_ret := cast(*PackedVector2Array) sys_call("CPUParticles2D", "get_emission_points", 2961356807, PackedVector2Array, main.p_object); return call_ret.*; }  // 59
set_emission_normals :: (main: *CPUParticles2D, array: PackedVector2Array) { sys_call("CPUParticles2D", "set_emission_normals", 1509147220, Nil, main.p_object, array);  }  // 60
get_emission_normals :: (main: *CPUParticles2D) -> PackedVector2Array { call_ret := cast(*PackedVector2Array) sys_call("CPUParticles2D", "get_emission_normals", 2961356807, PackedVector2Array, main.p_object); return call_ret.*; }  // 61
set_emission_colors :: (main: *CPUParticles2D, array: PackedColorArray) { sys_call("CPUParticles2D", "set_emission_colors", 3546319833, Nil, main.p_object, array);  }  // 62
get_emission_colors :: (main: *CPUParticles2D) -> PackedColorArray { call_ret := cast(*PackedColorArray) sys_call("CPUParticles2D", "get_emission_colors", 1392750486, PackedColorArray, main.p_object); return call_ret.*; }  // 63
get_gravity :: (main: *CPUParticles2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("CPUParticles2D", "get_gravity", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 64
set_gravity :: (main: *CPUParticles2D, accel_vec: Vector2) { sys_call("CPUParticles2D", "set_gravity", 743155724, Nil, main.p_object, accel_vec);  }  // 65
get_split_scale :: (main: *CPUParticles2D) -> bool { call_ret := cast(*bool) sys_call("CPUParticles2D", "get_split_scale", 2240911060, bool, main.p_object); return call_ret.*; }  // 66
set_split_scale :: (main: *CPUParticles2D, split_scale: bool) { sys_call("CPUParticles2D", "set_split_scale", 2586408642, Nil, main.p_object, split_scale);  }  // 67
get_scale_curve_x :: (main: *CPUParticles2D) -> *Curve { call_ret := cast(*Curve) sys_call("CPUParticles2D", "get_scale_curve_x", 2460114913, Curve, main.p_object); return call_ret; }  // 68
set_scale_curve_x :: (main: *CPUParticles2D, scale_curve: Curve) { sys_call("CPUParticles2D", "set_scale_curve_x", 270443179, Nil, main.p_object, scale_curve);  }  // 69
get_scale_curve_y :: (main: *CPUParticles2D) -> *Curve { call_ret := cast(*Curve) sys_call("CPUParticles2D", "get_scale_curve_y", 2460114913, Curve, main.p_object); return call_ret; }  // 70
set_scale_curve_y :: (main: *CPUParticles2D, scale_curve: Curve) { sys_call("CPUParticles2D", "set_scale_curve_y", 270443179, Nil, main.p_object, scale_curve);  }  // 71
convert_from_particles :: (main: *CPUParticles2D, particles: Node) { sys_call("CPUParticles2D", "convert_from_particles", 1078189570, Nil, main.p_object, particles);  }  // 72

set_emitting :: (main: *CPUParticles3D, emitting: bool) { sys_call("CPUParticles3D", "set_emitting", 2586408642, Nil, main.p_object, emitting);  }  // 0
set_amount :: (main: *CPUParticles3D, amount: int) { sys_call("CPUParticles3D", "set_amount", 1286410249, Nil, main.p_object, amount);  }  // 1
set_lifetime :: (main: *CPUParticles3D, secs: float) { sys_call("CPUParticles3D", "set_lifetime", 373806689, Nil, main.p_object, secs);  }  // 2
set_one_shot :: (main: *CPUParticles3D, enable: bool) { sys_call("CPUParticles3D", "set_one_shot", 2586408642, Nil, main.p_object, enable);  }  // 3
set_pre_process_time :: (main: *CPUParticles3D, secs: float) { sys_call("CPUParticles3D", "set_pre_process_time", 373806689, Nil, main.p_object, secs);  }  // 4
set_explosiveness_ratio :: (main: *CPUParticles3D, ratio: float) { sys_call("CPUParticles3D", "set_explosiveness_ratio", 373806689, Nil, main.p_object, ratio);  }  // 5
set_randomness_ratio :: (main: *CPUParticles3D, ratio: float) { sys_call("CPUParticles3D", "set_randomness_ratio", 373806689, Nil, main.p_object, ratio);  }  // 6
set_visibility_aabb :: (main: *CPUParticles3D, aabb: AABB) { sys_call("CPUParticles3D", "set_visibility_aabb", 259215842, Nil, main.p_object, aabb);  }  // 7
set_lifetime_randomness :: (main: *CPUParticles3D, random: float) { sys_call("CPUParticles3D", "set_lifetime_randomness", 373806689, Nil, main.p_object, random);  }  // 8
set_use_local_coordinates :: (main: *CPUParticles3D, enable: bool) { sys_call("CPUParticles3D", "set_use_local_coordinates", 2586408642, Nil, main.p_object, enable);  }  // 9
set_fixed_fps :: (main: *CPUParticles3D, fps: int) { sys_call("CPUParticles3D", "set_fixed_fps", 1286410249, Nil, main.p_object, fps);  }  // 10
set_fractional_delta :: (main: *CPUParticles3D, enable: bool) { sys_call("CPUParticles3D", "set_fractional_delta", 2586408642, Nil, main.p_object, enable);  }  // 11
set_speed_scale :: (main: *CPUParticles3D, scale: float) { sys_call("CPUParticles3D", "set_speed_scale", 373806689, Nil, main.p_object, scale);  }  // 12
is_emitting :: (main: *CPUParticles3D) -> bool { call_ret := cast(*bool) sys_call("CPUParticles3D", "is_emitting", 36873697, bool, main.p_object); return call_ret.*; }  // 13
get_amount :: (main: *CPUParticles3D) -> int { call_ret := cast(*int) sys_call("CPUParticles3D", "get_amount", 3905245786, int, main.p_object); return call_ret.*; }  // 14
get_lifetime :: (main: *CPUParticles3D) -> float { call_ret := cast(*float) sys_call("CPUParticles3D", "get_lifetime", 1740695150, float, main.p_object); return call_ret.*; }  // 15
get_one_shot :: (main: *CPUParticles3D) -> bool { call_ret := cast(*bool) sys_call("CPUParticles3D", "get_one_shot", 36873697, bool, main.p_object); return call_ret.*; }  // 16
get_pre_process_time :: (main: *CPUParticles3D) -> float { call_ret := cast(*float) sys_call("CPUParticles3D", "get_pre_process_time", 1740695150, float, main.p_object); return call_ret.*; }  // 17
get_explosiveness_ratio :: (main: *CPUParticles3D) -> float { call_ret := cast(*float) sys_call("CPUParticles3D", "get_explosiveness_ratio", 1740695150, float, main.p_object); return call_ret.*; }  // 18
get_randomness_ratio :: (main: *CPUParticles3D) -> float { call_ret := cast(*float) sys_call("CPUParticles3D", "get_randomness_ratio", 1740695150, float, main.p_object); return call_ret.*; }  // 19
get_visibility_aabb :: (main: *CPUParticles3D) -> AABB { call_ret := cast(*AABB) sys_call("CPUParticles3D", "get_visibility_aabb", 1068685055, AABB, main.p_object); return call_ret.*; }  // 20
get_lifetime_randomness :: (main: *CPUParticles3D) -> float { call_ret := cast(*float) sys_call("CPUParticles3D", "get_lifetime_randomness", 1740695150, float, main.p_object); return call_ret.*; }  // 21
get_use_local_coordinates :: (main: *CPUParticles3D) -> bool { call_ret := cast(*bool) sys_call("CPUParticles3D", "get_use_local_coordinates", 36873697, bool, main.p_object); return call_ret.*; }  // 22
get_fixed_fps :: (main: *CPUParticles3D) -> int { call_ret := cast(*int) sys_call("CPUParticles3D", "get_fixed_fps", 3905245786, int, main.p_object); return call_ret.*; }  // 23
get_fractional_delta :: (main: *CPUParticles3D) -> bool { call_ret := cast(*bool) sys_call("CPUParticles3D", "get_fractional_delta", 36873697, bool, main.p_object); return call_ret.*; }  // 24
get_speed_scale :: (main: *CPUParticles3D) -> float { call_ret := cast(*float) sys_call("CPUParticles3D", "get_speed_scale", 1740695150, float, main.p_object); return call_ret.*; }  // 25
set_draw_order :: (main: *CPUParticles3D, order: CPUParticles3D.DrawOrder) { sys_call("CPUParticles3D", "set_draw_order", 1427401774, Nil, main.p_object, order);  }  // 26
get_draw_order :: (main: *CPUParticles3D) -> CPUParticles3D.DrawOrder { call_ret := cast(*CPUParticles3D.DrawOrder) sys_call("CPUParticles3D", "get_draw_order", 1321900776, CPUParticles3D.DrawOrder, main.p_object); return call_ret.*; }  // 27
set_mesh :: (main: *CPUParticles3D, mesh: Mesh) { sys_call("CPUParticles3D", "set_mesh", 194775623, Nil, main.p_object, mesh);  }  // 28
get_mesh :: (main: *CPUParticles3D) -> *Mesh { call_ret := cast(*Mesh) sys_call("CPUParticles3D", "get_mesh", 1808005922, Mesh, main.p_object); return call_ret; }  // 29
set_use_fixed_seed :: (main: *CPUParticles3D, use_fixed_seed: bool) { sys_call("CPUParticles3D", "set_use_fixed_seed", 2586408642, Nil, main.p_object, use_fixed_seed);  }  // 30
get_use_fixed_seed :: (main: *CPUParticles3D) -> bool { call_ret := cast(*bool) sys_call("CPUParticles3D", "get_use_fixed_seed", 36873697, bool, main.p_object); return call_ret.*; }  // 31
set_seed :: (main: *CPUParticles3D, seed: int) { sys_call("CPUParticles3D", "set_seed", 1286410249, Nil, main.p_object, seed);  }  // 32
get_seed :: (main: *CPUParticles3D) -> int { call_ret := cast(*int) sys_call("CPUParticles3D", "get_seed", 3905245786, int, main.p_object); return call_ret.*; }  // 33
restart :: (main: *CPUParticles3D) { sys_call("CPUParticles3D", "restart", 107499316, Nil, main.p_object);  }  // 34
request_particles_process :: (main: *CPUParticles3D, process_time: float) { sys_call("CPUParticles3D", "request_particles_process", 373806689, Nil, main.p_object, process_time);  }  // 35
capture_aabb :: (main: *CPUParticles3D) -> AABB { call_ret := cast(*AABB) sys_call("CPUParticles3D", "capture_aabb", 1068685055, AABB, main.p_object); return call_ret.*; }  // 36
set_direction :: (main: *CPUParticles3D, direction: Vector3) { sys_call("CPUParticles3D", "set_direction", 3460891852, Nil, main.p_object, direction);  }  // 37
get_direction :: (main: *CPUParticles3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("CPUParticles3D", "get_direction", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 38
set_spread :: (main: *CPUParticles3D, degrees: float) { sys_call("CPUParticles3D", "set_spread", 373806689, Nil, main.p_object, degrees);  }  // 39
get_spread :: (main: *CPUParticles3D) -> float { call_ret := cast(*float) sys_call("CPUParticles3D", "get_spread", 1740695150, float, main.p_object); return call_ret.*; }  // 40
set_flatness :: (main: *CPUParticles3D, amount: float) { sys_call("CPUParticles3D", "set_flatness", 373806689, Nil, main.p_object, amount);  }  // 41
get_flatness :: (main: *CPUParticles3D) -> float { call_ret := cast(*float) sys_call("CPUParticles3D", "get_flatness", 1740695150, float, main.p_object); return call_ret.*; }  // 42
set_param_min :: (main: *CPUParticles3D, param: CPUParticles3D.Parameter, value: float) { sys_call("CPUParticles3D", "set_param_min", 557936109, Nil, main.p_object, param, value);  }  // 43
get_param_min :: (main: *CPUParticles3D, param: CPUParticles3D.Parameter) -> float { call_ret := cast(*float) sys_call("CPUParticles3D", "get_param_min", 597646162, float, main.p_object, param); return call_ret.*; }  // 44
set_param_max :: (main: *CPUParticles3D, param: CPUParticles3D.Parameter, value: float) { sys_call("CPUParticles3D", "set_param_max", 557936109, Nil, main.p_object, param, value);  }  // 45
get_param_max :: (main: *CPUParticles3D, param: CPUParticles3D.Parameter) -> float { call_ret := cast(*float) sys_call("CPUParticles3D", "get_param_max", 597646162, float, main.p_object, param); return call_ret.*; }  // 46
set_param_curve :: (main: *CPUParticles3D, param: CPUParticles3D.Parameter, curve: Curve) { sys_call("CPUParticles3D", "set_param_curve", 4044142537, Nil, main.p_object, param, curve);  }  // 47
get_param_curve :: (main: *CPUParticles3D, param: CPUParticles3D.Parameter) -> *Curve { call_ret := cast(*Curve) sys_call("CPUParticles3D", "get_param_curve", 4132790277, Curve, main.p_object, param); return call_ret; }  // 48
set_color :: (main: *CPUParticles3D, color: Color) { sys_call("CPUParticles3D", "set_color", 2920490490, Nil, main.p_object, color);  }  // 49
get_color :: (main: *CPUParticles3D) -> Color { call_ret := cast(*Color) sys_call("CPUParticles3D", "get_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 50
set_color_ramp :: (main: *CPUParticles3D, ramp: Gradient) { sys_call("CPUParticles3D", "set_color_ramp", 2756054477, Nil, main.p_object, ramp);  }  // 51
get_color_ramp :: (main: *CPUParticles3D) -> *Gradient { call_ret := cast(*Gradient) sys_call("CPUParticles3D", "get_color_ramp", 132272999, Gradient, main.p_object); return call_ret; }  // 52
set_color_initial_ramp :: (main: *CPUParticles3D, ramp: Gradient) { sys_call("CPUParticles3D", "set_color_initial_ramp", 2756054477, Nil, main.p_object, ramp);  }  // 53
get_color_initial_ramp :: (main: *CPUParticles3D) -> *Gradient { call_ret := cast(*Gradient) sys_call("CPUParticles3D", "get_color_initial_ramp", 132272999, Gradient, main.p_object); return call_ret; }  // 54
set_particle_flag :: (main: *CPUParticles3D, particle_flag: CPUParticles3D.ParticleFlags, enable: bool) { sys_call("CPUParticles3D", "set_particle_flag", 3515406498, Nil, main.p_object, particle_flag, enable);  }  // 55
get_particle_flag :: (main: *CPUParticles3D, particle_flag: CPUParticles3D.ParticleFlags) -> bool { call_ret := cast(*bool) sys_call("CPUParticles3D", "get_particle_flag", 2845201987, bool, main.p_object, particle_flag); return call_ret.*; }  // 56
set_emission_shape :: (main: *CPUParticles3D, shape: CPUParticles3D.EmissionShape) { sys_call("CPUParticles3D", "set_emission_shape", 491823814, Nil, main.p_object, shape);  }  // 57
get_emission_shape :: (main: *CPUParticles3D) -> CPUParticles3D.EmissionShape { call_ret := cast(*CPUParticles3D.EmissionShape) sys_call("CPUParticles3D", "get_emission_shape", 2961454842, CPUParticles3D.EmissionShape, main.p_object); return call_ret.*; }  // 58
set_emission_sphere_radius :: (main: *CPUParticles3D, radius: float) { sys_call("CPUParticles3D", "set_emission_sphere_radius", 373806689, Nil, main.p_object, radius);  }  // 59
get_emission_sphere_radius :: (main: *CPUParticles3D) -> float { call_ret := cast(*float) sys_call("CPUParticles3D", "get_emission_sphere_radius", 1740695150, float, main.p_object); return call_ret.*; }  // 60
set_emission_box_extents :: (main: *CPUParticles3D, extents: Vector3) { sys_call("CPUParticles3D", "set_emission_box_extents", 3460891852, Nil, main.p_object, extents);  }  // 61
get_emission_box_extents :: (main: *CPUParticles3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("CPUParticles3D", "get_emission_box_extents", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 62
set_emission_points :: (main: *CPUParticles3D, array: PackedVector3Array) { sys_call("CPUParticles3D", "set_emission_points", 334873810, Nil, main.p_object, array);  }  // 63
get_emission_points :: (main: *CPUParticles3D) -> PackedVector3Array { call_ret := cast(*PackedVector3Array) sys_call("CPUParticles3D", "get_emission_points", 497664490, PackedVector3Array, main.p_object); return call_ret.*; }  // 64
set_emission_normals :: (main: *CPUParticles3D, array: PackedVector3Array) { sys_call("CPUParticles3D", "set_emission_normals", 334873810, Nil, main.p_object, array);  }  // 65
get_emission_normals :: (main: *CPUParticles3D) -> PackedVector3Array { call_ret := cast(*PackedVector3Array) sys_call("CPUParticles3D", "get_emission_normals", 497664490, PackedVector3Array, main.p_object); return call_ret.*; }  // 66
set_emission_colors :: (main: *CPUParticles3D, array: PackedColorArray) { sys_call("CPUParticles3D", "set_emission_colors", 3546319833, Nil, main.p_object, array);  }  // 67
get_emission_colors :: (main: *CPUParticles3D) -> PackedColorArray { call_ret := cast(*PackedColorArray) sys_call("CPUParticles3D", "get_emission_colors", 1392750486, PackedColorArray, main.p_object); return call_ret.*; }  // 68
set_emission_ring_axis :: (main: *CPUParticles3D, axis: Vector3) { sys_call("CPUParticles3D", "set_emission_ring_axis", 3460891852, Nil, main.p_object, axis);  }  // 69
get_emission_ring_axis :: (main: *CPUParticles3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("CPUParticles3D", "get_emission_ring_axis", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 70
set_emission_ring_height :: (main: *CPUParticles3D, height: float) { sys_call("CPUParticles3D", "set_emission_ring_height", 373806689, Nil, main.p_object, height);  }  // 71
get_emission_ring_height :: (main: *CPUParticles3D) -> float { call_ret := cast(*float) sys_call("CPUParticles3D", "get_emission_ring_height", 1740695150, float, main.p_object); return call_ret.*; }  // 72
set_emission_ring_radius :: (main: *CPUParticles3D, radius: float) { sys_call("CPUParticles3D", "set_emission_ring_radius", 373806689, Nil, main.p_object, radius);  }  // 73
get_emission_ring_radius :: (main: *CPUParticles3D) -> float { call_ret := cast(*float) sys_call("CPUParticles3D", "get_emission_ring_radius", 1740695150, float, main.p_object); return call_ret.*; }  // 74
set_emission_ring_inner_radius :: (main: *CPUParticles3D, inner_radius: float) { sys_call("CPUParticles3D", "set_emission_ring_inner_radius", 373806689, Nil, main.p_object, inner_radius);  }  // 75
get_emission_ring_inner_radius :: (main: *CPUParticles3D) -> float { call_ret := cast(*float) sys_call("CPUParticles3D", "get_emission_ring_inner_radius", 1740695150, float, main.p_object); return call_ret.*; }  // 76
set_emission_ring_cone_angle :: (main: *CPUParticles3D, cone_angle: float) { sys_call("CPUParticles3D", "set_emission_ring_cone_angle", 373806689, Nil, main.p_object, cone_angle);  }  // 77
get_emission_ring_cone_angle :: (main: *CPUParticles3D) -> float { call_ret := cast(*float) sys_call("CPUParticles3D", "get_emission_ring_cone_angle", 1740695150, float, main.p_object); return call_ret.*; }  // 78
get_gravity :: (main: *CPUParticles3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("CPUParticles3D", "get_gravity", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 79
set_gravity :: (main: *CPUParticles3D, accel_vec: Vector3) { sys_call("CPUParticles3D", "set_gravity", 3460891852, Nil, main.p_object, accel_vec);  }  // 80
get_split_scale :: (main: *CPUParticles3D) -> bool { call_ret := cast(*bool) sys_call("CPUParticles3D", "get_split_scale", 2240911060, bool, main.p_object); return call_ret.*; }  // 81
set_split_scale :: (main: *CPUParticles3D, split_scale: bool) { sys_call("CPUParticles3D", "set_split_scale", 2586408642, Nil, main.p_object, split_scale);  }  // 82
get_scale_curve_x :: (main: *CPUParticles3D) -> *Curve { call_ret := cast(*Curve) sys_call("CPUParticles3D", "get_scale_curve_x", 2460114913, Curve, main.p_object); return call_ret; }  // 83
set_scale_curve_x :: (main: *CPUParticles3D, scale_curve: Curve) { sys_call("CPUParticles3D", "set_scale_curve_x", 270443179, Nil, main.p_object, scale_curve);  }  // 84
get_scale_curve_y :: (main: *CPUParticles3D) -> *Curve { call_ret := cast(*Curve) sys_call("CPUParticles3D", "get_scale_curve_y", 2460114913, Curve, main.p_object); return call_ret; }  // 85
set_scale_curve_y :: (main: *CPUParticles3D, scale_curve: Curve) { sys_call("CPUParticles3D", "set_scale_curve_y", 270443179, Nil, main.p_object, scale_curve);  }  // 86
get_scale_curve_z :: (main: *CPUParticles3D) -> *Curve { call_ret := cast(*Curve) sys_call("CPUParticles3D", "get_scale_curve_z", 2460114913, Curve, main.p_object); return call_ret; }  // 87
set_scale_curve_z :: (main: *CPUParticles3D, scale_curve: Curve) { sys_call("CPUParticles3D", "set_scale_curve_z", 270443179, Nil, main.p_object, scale_curve);  }  // 88
convert_from_particles :: (main: *CPUParticles3D, particles: Node) { sys_call("CPUParticles3D", "convert_from_particles", 1078189570, Nil, main.p_object, particles);  }  // 89

set_size :: (main: *CSGBox3D, size: Vector3) { sys_call("CSGBox3D", "set_size", 3460891852, Nil, main.p_object, size);  }  // 0
get_size :: (main: *CSGBox3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("CSGBox3D", "get_size", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 1
set_material :: (main: *CSGBox3D, material: Material) { sys_call("CSGBox3D", "set_material", 2757459619, Nil, main.p_object, material);  }  // 2
get_material :: (main: *CSGBox3D) -> *Material { call_ret := cast(*Material) sys_call("CSGBox3D", "get_material", 5934680, Material, main.p_object); return call_ret; }  // 3


set_radius :: (main: *CSGCylinder3D, radius: float) { sys_call("CSGCylinder3D", "set_radius", 373806689, Nil, main.p_object, radius);  }  // 0
get_radius :: (main: *CSGCylinder3D) -> float { call_ret := cast(*float) sys_call("CSGCylinder3D", "get_radius", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_height :: (main: *CSGCylinder3D, height: float) { sys_call("CSGCylinder3D", "set_height", 373806689, Nil, main.p_object, height);  }  // 2
get_height :: (main: *CSGCylinder3D) -> float { call_ret := cast(*float) sys_call("CSGCylinder3D", "get_height", 1740695150, float, main.p_object); return call_ret.*; }  // 3
set_sides :: (main: *CSGCylinder3D, sides: int) { sys_call("CSGCylinder3D", "set_sides", 1286410249, Nil, main.p_object, sides);  }  // 4
get_sides :: (main: *CSGCylinder3D) -> int { call_ret := cast(*int) sys_call("CSGCylinder3D", "get_sides", 3905245786, int, main.p_object); return call_ret.*; }  // 5
set_cone :: (main: *CSGCylinder3D, cone: bool) { sys_call("CSGCylinder3D", "set_cone", 2586408642, Nil, main.p_object, cone);  }  // 6
is_cone :: (main: *CSGCylinder3D) -> bool { call_ret := cast(*bool) sys_call("CSGCylinder3D", "is_cone", 36873697, bool, main.p_object); return call_ret.*; }  // 7
set_material :: (main: *CSGCylinder3D, material: Material) { sys_call("CSGCylinder3D", "set_material", 2757459619, Nil, main.p_object, material);  }  // 8
get_material :: (main: *CSGCylinder3D) -> *Material { call_ret := cast(*Material) sys_call("CSGCylinder3D", "get_material", 5934680, Material, main.p_object); return call_ret; }  // 9
set_smooth_faces :: (main: *CSGCylinder3D, smooth_faces: bool) { sys_call("CSGCylinder3D", "set_smooth_faces", 2586408642, Nil, main.p_object, smooth_faces);  }  // 10
get_smooth_faces :: (main: *CSGCylinder3D) -> bool { call_ret := cast(*bool) sys_call("CSGCylinder3D", "get_smooth_faces", 36873697, bool, main.p_object); return call_ret.*; }  // 11

set_mesh :: (main: *CSGMesh3D, mesh: Mesh) { sys_call("CSGMesh3D", "set_mesh", 194775623, Nil, main.p_object, mesh);  }  // 0
get_mesh :: (main: *CSGMesh3D) -> *Mesh { call_ret := cast(*Mesh) sys_call("CSGMesh3D", "get_mesh", 4081188045, Mesh, main.p_object); return call_ret; }  // 1
set_material :: (main: *CSGMesh3D, material: Material) { sys_call("CSGMesh3D", "set_material", 2757459619, Nil, main.p_object, material);  }  // 2
get_material :: (main: *CSGMesh3D) -> *Material { call_ret := cast(*Material) sys_call("CSGMesh3D", "get_material", 5934680, Material, main.p_object); return call_ret; }  // 3

set_polygon :: (main: *CSGPolygon3D, polygon: PackedVector2Array) { sys_call("CSGPolygon3D", "set_polygon", 1509147220, Nil, main.p_object, polygon);  }  // 0
get_polygon :: (main: *CSGPolygon3D) -> PackedVector2Array { call_ret := cast(*PackedVector2Array) sys_call("CSGPolygon3D", "get_polygon", 2961356807, PackedVector2Array, main.p_object); return call_ret.*; }  // 1
set_mode :: (main: *CSGPolygon3D, mode: CSGPolygon3D.Mode) { sys_call("CSGPolygon3D", "set_mode", 3158377035, Nil, main.p_object, mode);  }  // 2
get_mode :: (main: *CSGPolygon3D) -> CSGPolygon3D.Mode { call_ret := cast(*CSGPolygon3D.Mode) sys_call("CSGPolygon3D", "get_mode", 1201612222, CSGPolygon3D.Mode, main.p_object); return call_ret.*; }  // 3
set_depth :: (main: *CSGPolygon3D, depth: float) { sys_call("CSGPolygon3D", "set_depth", 373806689, Nil, main.p_object, depth);  }  // 4
get_depth :: (main: *CSGPolygon3D) -> float { call_ret := cast(*float) sys_call("CSGPolygon3D", "get_depth", 1740695150, float, main.p_object); return call_ret.*; }  // 5
set_spin_degrees :: (main: *CSGPolygon3D, degrees: float) { sys_call("CSGPolygon3D", "set_spin_degrees", 373806689, Nil, main.p_object, degrees);  }  // 6
get_spin_degrees :: (main: *CSGPolygon3D) -> float { call_ret := cast(*float) sys_call("CSGPolygon3D", "get_spin_degrees", 1740695150, float, main.p_object); return call_ret.*; }  // 7
set_spin_sides :: (main: *CSGPolygon3D, spin_sides: int) { sys_call("CSGPolygon3D", "set_spin_sides", 1286410249, Nil, main.p_object, spin_sides);  }  // 8
get_spin_sides :: (main: *CSGPolygon3D) -> int { call_ret := cast(*int) sys_call("CSGPolygon3D", "get_spin_sides", 3905245786, int, main.p_object); return call_ret.*; }  // 9
set_path_node :: (main: *CSGPolygon3D, path: string) { sys_call("CSGPolygon3D", "set_path_node", 1348162250, Nil, main.p_object, path);  }  // 10
get_path_node :: (main: *CSGPolygon3D) -> NodePath { call_ret := cast(*NodePath) sys_call("CSGPolygon3D", "get_path_node", 4075236667, NodePath, main.p_object); return call_ret.*; }  // 11
set_path_interval_type :: (main: *CSGPolygon3D, interval_type: CSGPolygon3D.PathIntervalType) { sys_call("CSGPolygon3D", "set_path_interval_type", 3744240707, Nil, main.p_object, interval_type);  }  // 12
get_path_interval_type :: (main: *CSGPolygon3D) -> CSGPolygon3D.PathIntervalType { call_ret := cast(*CSGPolygon3D.PathIntervalType) sys_call("CSGPolygon3D", "get_path_interval_type", 3434618397, CSGPolygon3D.PathIntervalType, main.p_object); return call_ret.*; }  // 13
set_path_interval :: (main: *CSGPolygon3D, interval: float) { sys_call("CSGPolygon3D", "set_path_interval", 373806689, Nil, main.p_object, interval);  }  // 14
get_path_interval :: (main: *CSGPolygon3D) -> float { call_ret := cast(*float) sys_call("CSGPolygon3D", "get_path_interval", 1740695150, float, main.p_object); return call_ret.*; }  // 15
set_path_simplify_angle :: (main: *CSGPolygon3D, degrees: float) { sys_call("CSGPolygon3D", "set_path_simplify_angle", 373806689, Nil, main.p_object, degrees);  }  // 16
get_path_simplify_angle :: (main: *CSGPolygon3D) -> float { call_ret := cast(*float) sys_call("CSGPolygon3D", "get_path_simplify_angle", 1740695150, float, main.p_object); return call_ret.*; }  // 17
set_path_rotation :: (main: *CSGPolygon3D, path_rotation: CSGPolygon3D.PathRotation) { sys_call("CSGPolygon3D", "set_path_rotation", 1412947288, Nil, main.p_object, path_rotation);  }  // 18
get_path_rotation :: (main: *CSGPolygon3D) -> CSGPolygon3D.PathRotation { call_ret := cast(*CSGPolygon3D.PathRotation) sys_call("CSGPolygon3D", "get_path_rotation", 647219346, CSGPolygon3D.PathRotation, main.p_object); return call_ret.*; }  // 19
set_path_rotation_accurate :: (main: *CSGPolygon3D, enable: bool) { sys_call("CSGPolygon3D", "set_path_rotation_accurate", 2586408642, Nil, main.p_object, enable);  }  // 20
get_path_rotation_accurate :: (main: *CSGPolygon3D) -> bool { call_ret := cast(*bool) sys_call("CSGPolygon3D", "get_path_rotation_accurate", 36873697, bool, main.p_object); return call_ret.*; }  // 21
set_path_local :: (main: *CSGPolygon3D, enable: bool) { sys_call("CSGPolygon3D", "set_path_local", 2586408642, Nil, main.p_object, enable);  }  // 22
is_path_local :: (main: *CSGPolygon3D) -> bool { call_ret := cast(*bool) sys_call("CSGPolygon3D", "is_path_local", 36873697, bool, main.p_object); return call_ret.*; }  // 23
set_path_continuous_u :: (main: *CSGPolygon3D, enable: bool) { sys_call("CSGPolygon3D", "set_path_continuous_u", 2586408642, Nil, main.p_object, enable);  }  // 24
is_path_continuous_u :: (main: *CSGPolygon3D) -> bool { call_ret := cast(*bool) sys_call("CSGPolygon3D", "is_path_continuous_u", 36873697, bool, main.p_object); return call_ret.*; }  // 25
set_path_u_distance :: (main: *CSGPolygon3D, distance: float) { sys_call("CSGPolygon3D", "set_path_u_distance", 373806689, Nil, main.p_object, distance);  }  // 26
get_path_u_distance :: (main: *CSGPolygon3D) -> float { call_ret := cast(*float) sys_call("CSGPolygon3D", "get_path_u_distance", 1740695150, float, main.p_object); return call_ret.*; }  // 27
set_path_joined :: (main: *CSGPolygon3D, enable: bool) { sys_call("CSGPolygon3D", "set_path_joined", 2586408642, Nil, main.p_object, enable);  }  // 28
is_path_joined :: (main: *CSGPolygon3D) -> bool { call_ret := cast(*bool) sys_call("CSGPolygon3D", "is_path_joined", 36873697, bool, main.p_object); return call_ret.*; }  // 29
set_material :: (main: *CSGPolygon3D, material: Material) { sys_call("CSGPolygon3D", "set_material", 2757459619, Nil, main.p_object, material);  }  // 30
get_material :: (main: *CSGPolygon3D) -> *Material { call_ret := cast(*Material) sys_call("CSGPolygon3D", "get_material", 5934680, Material, main.p_object); return call_ret; }  // 31
set_smooth_faces :: (main: *CSGPolygon3D, smooth_faces: bool) { sys_call("CSGPolygon3D", "set_smooth_faces", 2586408642, Nil, main.p_object, smooth_faces);  }  // 32
get_smooth_faces :: (main: *CSGPolygon3D) -> bool { call_ret := cast(*bool) sys_call("CSGPolygon3D", "get_smooth_faces", 36873697, bool, main.p_object); return call_ret.*; }  // 33

set_flip_faces :: (main: *CSGPrimitive3D, flip_faces: bool) { sys_call("CSGPrimitive3D", "set_flip_faces", 2586408642, Nil, main.p_object, flip_faces);  }  // 0
get_flip_faces :: (main: *CSGPrimitive3D) -> bool { call_ret := cast(*bool) sys_call("CSGPrimitive3D", "get_flip_faces", 2240911060, bool, main.p_object); return call_ret.*; }  // 1

is_root_shape :: (main: *CSGShape3D) -> bool { call_ret := cast(*bool) sys_call("CSGShape3D", "is_root_shape", 36873697, bool, main.p_object); return call_ret.*; }  // 0
set_operation :: (main: *CSGShape3D, operation: CSGShape3D.Operation) { sys_call("CSGShape3D", "set_operation", 811425055, Nil, main.p_object, operation);  }  // 1
get_operation :: (main: *CSGShape3D) -> CSGShape3D.Operation { call_ret := cast(*CSGShape3D.Operation) sys_call("CSGShape3D", "get_operation", 2662425879, CSGShape3D.Operation, main.p_object); return call_ret.*; }  // 2
set_snap :: (main: *CSGShape3D, snap: float) { sys_call("CSGShape3D", "set_snap", 373806689, Nil, main.p_object, snap);  }  // 3
get_snap :: (main: *CSGShape3D) -> float { call_ret := cast(*float) sys_call("CSGShape3D", "get_snap", 1740695150, float, main.p_object); return call_ret.*; }  // 4
set_use_collision :: (main: *CSGShape3D, operation: bool) { sys_call("CSGShape3D", "set_use_collision", 2586408642, Nil, main.p_object, operation);  }  // 5
is_using_collision :: (main: *CSGShape3D) -> bool { call_ret := cast(*bool) sys_call("CSGShape3D", "is_using_collision", 36873697, bool, main.p_object); return call_ret.*; }  // 6
set_collision_layer :: (main: *CSGShape3D, layer: int) { sys_call("CSGShape3D", "set_collision_layer", 1286410249, Nil, main.p_object, layer);  }  // 7
get_collision_layer :: (main: *CSGShape3D) -> int { call_ret := cast(*int) sys_call("CSGShape3D", "get_collision_layer", 3905245786, int, main.p_object); return call_ret.*; }  // 8
set_collision_mask :: (main: *CSGShape3D, mask: int) { sys_call("CSGShape3D", "set_collision_mask", 1286410249, Nil, main.p_object, mask);  }  // 9
get_collision_mask :: (main: *CSGShape3D) -> int { call_ret := cast(*int) sys_call("CSGShape3D", "get_collision_mask", 3905245786, int, main.p_object); return call_ret.*; }  // 10
set_collision_mask_value :: (main: *CSGShape3D, layer_number: int, value: bool) { sys_call("CSGShape3D", "set_collision_mask_value", 300928843, Nil, main.p_object, layer_number, value);  }  // 11
get_collision_mask_value :: (main: *CSGShape3D, layer_number: int) -> bool { call_ret := cast(*bool) sys_call("CSGShape3D", "get_collision_mask_value", 1116898809, bool, main.p_object, layer_number); return call_ret.*; }  // 12
set_collision_layer_value :: (main: *CSGShape3D, layer_number: int, value: bool) { sys_call("CSGShape3D", "set_collision_layer_value", 300928843, Nil, main.p_object, layer_number, value);  }  // 13
get_collision_layer_value :: (main: *CSGShape3D, layer_number: int) -> bool { call_ret := cast(*bool) sys_call("CSGShape3D", "get_collision_layer_value", 1116898809, bool, main.p_object, layer_number); return call_ret.*; }  // 14
set_collision_priority :: (main: *CSGShape3D, priority: float) { sys_call("CSGShape3D", "set_collision_priority", 373806689, Nil, main.p_object, priority);  }  // 15
get_collision_priority :: (main: *CSGShape3D) -> float { call_ret := cast(*float) sys_call("CSGShape3D", "get_collision_priority", 1740695150, float, main.p_object); return call_ret.*; }  // 16
set_calculate_tangents :: (main: *CSGShape3D, enabled: bool) { sys_call("CSGShape3D", "set_calculate_tangents", 2586408642, Nil, main.p_object, enabled);  }  // 17
is_calculating_tangents :: (main: *CSGShape3D) -> bool { call_ret := cast(*bool) sys_call("CSGShape3D", "is_calculating_tangents", 36873697, bool, main.p_object); return call_ret.*; }  // 18
get_meshes :: (main: *CSGShape3D) -> Array { call_ret := cast(*Array) sys_call("CSGShape3D", "get_meshes", 3995934104, Array, main.p_object); return call_ret.*; }  // 19
bake_static_mesh :: (main: *CSGShape3D) -> *ArrayMesh { call_ret := cast(*ArrayMesh) sys_call("CSGShape3D", "bake_static_mesh", 1605880883, ArrayMesh, main.p_object); return call_ret; }  // 20
bake_collision_shape :: (main: *CSGShape3D) -> *ConcavePolygonShape3D { call_ret := cast(*ConcavePolygonShape3D) sys_call("CSGShape3D", "bake_collision_shape", 36102322, ConcavePolygonShape3D, main.p_object); return call_ret; }  // 21

set_radius :: (main: *CSGSphere3D, radius: float) { sys_call("CSGSphere3D", "set_radius", 373806689, Nil, main.p_object, radius);  }  // 0
get_radius :: (main: *CSGSphere3D) -> float { call_ret := cast(*float) sys_call("CSGSphere3D", "get_radius", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_radial_segments :: (main: *CSGSphere3D, radial_segments: int) { sys_call("CSGSphere3D", "set_radial_segments", 1286410249, Nil, main.p_object, radial_segments);  }  // 2
get_radial_segments :: (main: *CSGSphere3D) -> int { call_ret := cast(*int) sys_call("CSGSphere3D", "get_radial_segments", 3905245786, int, main.p_object); return call_ret.*; }  // 3
set_rings :: (main: *CSGSphere3D, rings: int) { sys_call("CSGSphere3D", "set_rings", 1286410249, Nil, main.p_object, rings);  }  // 4
get_rings :: (main: *CSGSphere3D) -> int { call_ret := cast(*int) sys_call("CSGSphere3D", "get_rings", 3905245786, int, main.p_object); return call_ret.*; }  // 5
set_smooth_faces :: (main: *CSGSphere3D, smooth_faces: bool) { sys_call("CSGSphere3D", "set_smooth_faces", 2586408642, Nil, main.p_object, smooth_faces);  }  // 6
get_smooth_faces :: (main: *CSGSphere3D) -> bool { call_ret := cast(*bool) sys_call("CSGSphere3D", "get_smooth_faces", 36873697, bool, main.p_object); return call_ret.*; }  // 7
set_material :: (main: *CSGSphere3D, material: Material) { sys_call("CSGSphere3D", "set_material", 2757459619, Nil, main.p_object, material);  }  // 8
get_material :: (main: *CSGSphere3D) -> *Material { call_ret := cast(*Material) sys_call("CSGSphere3D", "get_material", 5934680, Material, main.p_object); return call_ret; }  // 9

set_inner_radius :: (main: *CSGTorus3D, radius: float) { sys_call("CSGTorus3D", "set_inner_radius", 373806689, Nil, main.p_object, radius);  }  // 0
get_inner_radius :: (main: *CSGTorus3D) -> float { call_ret := cast(*float) sys_call("CSGTorus3D", "get_inner_radius", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_outer_radius :: (main: *CSGTorus3D, radius: float) { sys_call("CSGTorus3D", "set_outer_radius", 373806689, Nil, main.p_object, radius);  }  // 2
get_outer_radius :: (main: *CSGTorus3D) -> float { call_ret := cast(*float) sys_call("CSGTorus3D", "get_outer_radius", 1740695150, float, main.p_object); return call_ret.*; }  // 3
set_sides :: (main: *CSGTorus3D, sides: int) { sys_call("CSGTorus3D", "set_sides", 1286410249, Nil, main.p_object, sides);  }  // 4
get_sides :: (main: *CSGTorus3D) -> int { call_ret := cast(*int) sys_call("CSGTorus3D", "get_sides", 3905245786, int, main.p_object); return call_ret.*; }  // 5
set_ring_sides :: (main: *CSGTorus3D, sides: int) { sys_call("CSGTorus3D", "set_ring_sides", 1286410249, Nil, main.p_object, sides);  }  // 6
get_ring_sides :: (main: *CSGTorus3D) -> int { call_ret := cast(*int) sys_call("CSGTorus3D", "get_ring_sides", 3905245786, int, main.p_object); return call_ret.*; }  // 7
set_material :: (main: *CSGTorus3D, material: Material) { sys_call("CSGTorus3D", "set_material", 2757459619, Nil, main.p_object, material);  }  // 8
get_material :: (main: *CSGTorus3D) -> *Material { call_ret := cast(*Material) sys_call("CSGTorus3D", "get_material", 5934680, Material, main.p_object); return call_ret; }  // 9
set_smooth_faces :: (main: *CSGTorus3D, smooth_faces: bool) { sys_call("CSGTorus3D", "set_smooth_faces", 2586408642, Nil, main.p_object, smooth_faces);  }  // 10
get_smooth_faces :: (main: *CSGTorus3D) -> bool { call_ret := cast(*bool) sys_call("CSGTorus3D", "get_smooth_faces", 36873697, bool, main.p_object); return call_ret.*; }  // 11

set_delay :: (main: *CallbackTweener, delay: float) -> *CallbackTweener { call_ret := cast(*CallbackTweener) sys_call("CallbackTweener", "set_delay", 3008182292, CallbackTweener, main.p_object, delay); return call_ret; }  // 0

set_offset :: (main: *Camera2D, offset: Vector2) { sys_call("Camera2D", "set_offset", 743155724, Nil, main.p_object, offset);  }  // 0
get_offset :: (main: *Camera2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("Camera2D", "get_offset", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 1
set_anchor_mode :: (main: *Camera2D, anchor_mode: Camera2D.AnchorMode) { sys_call("Camera2D", "set_anchor_mode", 2050398218, Nil, main.p_object, anchor_mode);  }  // 2
get_anchor_mode :: (main: *Camera2D) -> Camera2D.AnchorMode { call_ret := cast(*Camera2D.AnchorMode) sys_call("Camera2D", "get_anchor_mode", 155978067, Camera2D.AnchorMode, main.p_object); return call_ret.*; }  // 3
set_ignore_rotation :: (main: *Camera2D, ignore: bool) { sys_call("Camera2D", "set_ignore_rotation", 2586408642, Nil, main.p_object, ignore);  }  // 4
is_ignoring_rotation :: (main: *Camera2D) -> bool { call_ret := cast(*bool) sys_call("Camera2D", "is_ignoring_rotation", 36873697, bool, main.p_object); return call_ret.*; }  // 5
set_process_callback :: (main: *Camera2D, mode: Camera2D.Camera2DProcessCallback) { sys_call("Camera2D", "set_process_callback", 4201947462, Nil, main.p_object, mode);  }  // 6
get_process_callback :: (main: *Camera2D) -> Camera2D.Camera2DProcessCallback { call_ret := cast(*Camera2D.Camera2DProcessCallback) sys_call("Camera2D", "get_process_callback", 2325344499, Camera2D.Camera2DProcessCallback, main.p_object); return call_ret.*; }  // 7
set_enabled :: (main: *Camera2D, enabled: bool) { sys_call("Camera2D", "set_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 8
is_enabled :: (main: *Camera2D) -> bool { call_ret := cast(*bool) sys_call("Camera2D", "is_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 9
make_current :: (main: *Camera2D) { sys_call("Camera2D", "make_current", 3218959716, Nil, main.p_object);  }  // 10
is_current :: (main: *Camera2D) -> bool { call_ret := cast(*bool) sys_call("Camera2D", "is_current", 36873697, bool, main.p_object); return call_ret.*; }  // 11
set_limit :: (main: *Camera2D, margin: Side, limit: int) { sys_call("Camera2D", "set_limit", 437707142, Nil, main.p_object, margin, limit);  }  // 12
get_limit :: (main: *Camera2D, margin: Side) -> int { call_ret := cast(*int) sys_call("Camera2D", "get_limit", 1983885014, int, main.p_object, margin); return call_ret.*; }  // 13
set_limit_smoothing_enabled :: (main: *Camera2D, limit_smoothing_enabled: bool) { sys_call("Camera2D", "set_limit_smoothing_enabled", 2586408642, Nil, main.p_object, limit_smoothing_enabled);  }  // 14
is_limit_smoothing_enabled :: (main: *Camera2D) -> bool { call_ret := cast(*bool) sys_call("Camera2D", "is_limit_smoothing_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 15
set_drag_vertical_enabled :: (main: *Camera2D, enabled: bool) { sys_call("Camera2D", "set_drag_vertical_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 16
is_drag_vertical_enabled :: (main: *Camera2D) -> bool { call_ret := cast(*bool) sys_call("Camera2D", "is_drag_vertical_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 17
set_drag_horizontal_enabled :: (main: *Camera2D, enabled: bool) { sys_call("Camera2D", "set_drag_horizontal_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 18
is_drag_horizontal_enabled :: (main: *Camera2D) -> bool { call_ret := cast(*bool) sys_call("Camera2D", "is_drag_horizontal_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 19
set_drag_vertical_offset :: (main: *Camera2D, offset: float) { sys_call("Camera2D", "set_drag_vertical_offset", 373806689, Nil, main.p_object, offset);  }  // 20
get_drag_vertical_offset :: (main: *Camera2D) -> float { call_ret := cast(*float) sys_call("Camera2D", "get_drag_vertical_offset", 1740695150, float, main.p_object); return call_ret.*; }  // 21
set_drag_horizontal_offset :: (main: *Camera2D, offset: float) { sys_call("Camera2D", "set_drag_horizontal_offset", 373806689, Nil, main.p_object, offset);  }  // 22
get_drag_horizontal_offset :: (main: *Camera2D) -> float { call_ret := cast(*float) sys_call("Camera2D", "get_drag_horizontal_offset", 1740695150, float, main.p_object); return call_ret.*; }  // 23
set_drag_margin :: (main: *Camera2D, margin: Side, drag_margin: float) { sys_call("Camera2D", "set_drag_margin", 4290182280, Nil, main.p_object, margin, drag_margin);  }  // 24
get_drag_margin :: (main: *Camera2D, margin: Side) -> float { call_ret := cast(*float) sys_call("Camera2D", "get_drag_margin", 2869120046, float, main.p_object, margin); return call_ret.*; }  // 25
get_target_position :: (main: *Camera2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("Camera2D", "get_target_position", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 26
get_screen_center_position :: (main: *Camera2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("Camera2D", "get_screen_center_position", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 27
set_zoom :: (main: *Camera2D, zoom: Vector2) { sys_call("Camera2D", "set_zoom", 743155724, Nil, main.p_object, zoom);  }  // 28
get_zoom :: (main: *Camera2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("Camera2D", "get_zoom", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 29
set_custom_viewport :: (main: *Camera2D, viewport: Node) { sys_call("Camera2D", "set_custom_viewport", 1078189570, Nil, main.p_object, viewport);  }  // 30
get_custom_viewport :: (main: *Camera2D) -> *Node { call_ret := cast(*Node) sys_call("Camera2D", "get_custom_viewport", 3160264692, Node, main.p_object); return call_ret; }  // 31
set_position_smoothing_speed :: (main: *Camera2D, position_smoothing_speed: float) { sys_call("Camera2D", "set_position_smoothing_speed", 373806689, Nil, main.p_object, position_smoothing_speed);  }  // 32
get_position_smoothing_speed :: (main: *Camera2D) -> float { call_ret := cast(*float) sys_call("Camera2D", "get_position_smoothing_speed", 1740695150, float, main.p_object); return call_ret.*; }  // 33
set_position_smoothing_enabled :: (main: *Camera2D, position_smoothing_speed: bool) { sys_call("Camera2D", "set_position_smoothing_enabled", 2586408642, Nil, main.p_object, position_smoothing_speed);  }  // 34
is_position_smoothing_enabled :: (main: *Camera2D) -> bool { call_ret := cast(*bool) sys_call("Camera2D", "is_position_smoothing_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 35
set_rotation_smoothing_enabled :: (main: *Camera2D, enabled: bool) { sys_call("Camera2D", "set_rotation_smoothing_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 36
is_rotation_smoothing_enabled :: (main: *Camera2D) -> bool { call_ret := cast(*bool) sys_call("Camera2D", "is_rotation_smoothing_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 37
set_rotation_smoothing_speed :: (main: *Camera2D, speed: float) { sys_call("Camera2D", "set_rotation_smoothing_speed", 373806689, Nil, main.p_object, speed);  }  // 38
get_rotation_smoothing_speed :: (main: *Camera2D) -> float { call_ret := cast(*float) sys_call("Camera2D", "get_rotation_smoothing_speed", 1740695150, float, main.p_object); return call_ret.*; }  // 39
force_update_scroll :: (main: *Camera2D) { sys_call("Camera2D", "force_update_scroll", 3218959716, Nil, main.p_object);  }  // 40
reset_smoothing :: (main: *Camera2D) { sys_call("Camera2D", "reset_smoothing", 3218959716, Nil, main.p_object);  }  // 41
align :: (main: *Camera2D) { sys_call("Camera2D", "align", 3218959716, Nil, main.p_object);  }  // 42
set_screen_drawing_enabled :: (main: *Camera2D, screen_drawing_enabled: bool) { sys_call("Camera2D", "set_screen_drawing_enabled", 2586408642, Nil, main.p_object, screen_drawing_enabled);  }  // 43
is_screen_drawing_enabled :: (main: *Camera2D) -> bool { call_ret := cast(*bool) sys_call("Camera2D", "is_screen_drawing_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 44
set_limit_drawing_enabled :: (main: *Camera2D, limit_drawing_enabled: bool) { sys_call("Camera2D", "set_limit_drawing_enabled", 2586408642, Nil, main.p_object, limit_drawing_enabled);  }  // 45
is_limit_drawing_enabled :: (main: *Camera2D) -> bool { call_ret := cast(*bool) sys_call("Camera2D", "is_limit_drawing_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 46
set_margin_drawing_enabled :: (main: *Camera2D, margin_drawing_enabled: bool) { sys_call("Camera2D", "set_margin_drawing_enabled", 2586408642, Nil, main.p_object, margin_drawing_enabled);  }  // 47
is_margin_drawing_enabled :: (main: *Camera2D) -> bool { call_ret := cast(*bool) sys_call("Camera2D", "is_margin_drawing_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 48

project_ray_normal :: (main: *Camera3D, screen_point: Vector2) -> Vector3 { call_ret := cast(*Vector3) sys_call("Camera3D", "project_ray_normal", 1718073306, Vector3, main.p_object, screen_point); return call_ret.*; }  // 0
project_local_ray_normal :: (main: *Camera3D, screen_point: Vector2) -> Vector3 { call_ret := cast(*Vector3) sys_call("Camera3D", "project_local_ray_normal", 1718073306, Vector3, main.p_object, screen_point); return call_ret.*; }  // 1
project_ray_origin :: (main: *Camera3D, screen_point: Vector2) -> Vector3 { call_ret := cast(*Vector3) sys_call("Camera3D", "project_ray_origin", 1718073306, Vector3, main.p_object, screen_point); return call_ret.*; }  // 2
unproject_position :: (main: *Camera3D, world_point: Vector3) -> Vector2 { call_ret := cast(*Vector2) sys_call("Camera3D", "unproject_position", 3758901831, Vector2, main.p_object, world_point); return call_ret.*; }  // 3
is_position_behind :: (main: *Camera3D, world_point: Vector3) -> bool { call_ret := cast(*bool) sys_call("Camera3D", "is_position_behind", 3108956480, bool, main.p_object, world_point); return call_ret.*; }  // 4
project_position :: (main: *Camera3D, screen_point: Vector2, z_depth: float) -> Vector3 { call_ret := cast(*Vector3) sys_call("Camera3D", "project_position", 2171975744, Vector3, main.p_object, screen_point, z_depth); return call_ret.*; }  // 5
set_perspective :: (main: *Camera3D, fov: float, z_near: float, z_far: float) { sys_call("Camera3D", "set_perspective", 2385087082, Nil, main.p_object, fov, z_near, z_far);  }  // 6
set_orthogonal :: (main: *Camera3D, size: float, z_near: float, z_far: float) { sys_call("Camera3D", "set_orthogonal", 2385087082, Nil, main.p_object, size, z_near, z_far);  }  // 7
set_frustum :: (main: *Camera3D, size: float, offset: Vector2, z_near: float, z_far: float) { sys_call("Camera3D", "set_frustum", 354890663, Nil, main.p_object, size, offset, z_near, z_far);  }  // 8
make_current :: (main: *Camera3D) { sys_call("Camera3D", "make_current", 3218959716, Nil, main.p_object);  }  // 9
clear_current :: (main: *Camera3D) { sys_call("Camera3D", "clear_current", 3216645846, Nil, main.p_object);  }  // 10
set_current :: (main: *Camera3D, enabled: bool) { sys_call("Camera3D", "set_current", 2586408642, Nil, main.p_object, enabled);  }  // 11
is_current :: (main: *Camera3D) -> bool { call_ret := cast(*bool) sys_call("Camera3D", "is_current", 36873697, bool, main.p_object); return call_ret.*; }  // 12
get_camera_transform :: (main: *Camera3D) -> Transform3D { call_ret := cast(*Transform3D) sys_call("Camera3D", "get_camera_transform", 3229777777, Transform3D, main.p_object); return call_ret.*; }  // 13
get_camera_projection :: (main: *Camera3D) -> Projection { call_ret := cast(*Projection) sys_call("Camera3D", "get_camera_projection", 2910717950, Projection, main.p_object); return call_ret.*; }  // 14
get_fov :: (main: *Camera3D) -> float { call_ret := cast(*float) sys_call("Camera3D", "get_fov", 1740695150, float, main.p_object); return call_ret.*; }  // 15
get_frustum_offset :: (main: *Camera3D) -> Vector2 { call_ret := cast(*Vector2) sys_call("Camera3D", "get_frustum_offset", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 16
get_size :: (main: *Camera3D) -> float { call_ret := cast(*float) sys_call("Camera3D", "get_size", 1740695150, float, main.p_object); return call_ret.*; }  // 17
get_far :: (main: *Camera3D) -> float { call_ret := cast(*float) sys_call("Camera3D", "get_far", 1740695150, float, main.p_object); return call_ret.*; }  // 18
get_near :: (main: *Camera3D) -> float { call_ret := cast(*float) sys_call("Camera3D", "get_near", 1740695150, float, main.p_object); return call_ret.*; }  // 19
set_fov :: (main: *Camera3D, fov: float) { sys_call("Camera3D", "set_fov", 373806689, Nil, main.p_object, fov);  }  // 20
set_frustum_offset :: (main: *Camera3D, offset: Vector2) { sys_call("Camera3D", "set_frustum_offset", 743155724, Nil, main.p_object, offset);  }  // 21
set_size :: (main: *Camera3D, size: float) { sys_call("Camera3D", "set_size", 373806689, Nil, main.p_object, size);  }  // 22
set_far :: (main: *Camera3D, far: float) { sys_call("Camera3D", "set_far", 373806689, Nil, main.p_object, far);  }  // 23
set_near :: (main: *Camera3D, near: float) { sys_call("Camera3D", "set_near", 373806689, Nil, main.p_object, near);  }  // 24
get_projection :: (main: *Camera3D) -> Camera3D.ProjectionType { call_ret := cast(*Camera3D.ProjectionType) sys_call("Camera3D", "get_projection", 2624185235, Camera3D.ProjectionType, main.p_object); return call_ret.*; }  // 25
set_projection :: (main: *Camera3D, mode: Camera3D.ProjectionType) { sys_call("Camera3D", "set_projection", 4218540108, Nil, main.p_object, mode);  }  // 26
set_h_offset :: (main: *Camera3D, offset: float) { sys_call("Camera3D", "set_h_offset", 373806689, Nil, main.p_object, offset);  }  // 27
get_h_offset :: (main: *Camera3D) -> float { call_ret := cast(*float) sys_call("Camera3D", "get_h_offset", 1740695150, float, main.p_object); return call_ret.*; }  // 28
set_v_offset :: (main: *Camera3D, offset: float) { sys_call("Camera3D", "set_v_offset", 373806689, Nil, main.p_object, offset);  }  // 29
get_v_offset :: (main: *Camera3D) -> float { call_ret := cast(*float) sys_call("Camera3D", "get_v_offset", 1740695150, float, main.p_object); return call_ret.*; }  // 30
set_cull_mask :: (main: *Camera3D, mask: int) { sys_call("Camera3D", "set_cull_mask", 1286410249, Nil, main.p_object, mask);  }  // 31
get_cull_mask :: (main: *Camera3D) -> int { call_ret := cast(*int) sys_call("Camera3D", "get_cull_mask", 3905245786, int, main.p_object); return call_ret.*; }  // 32
set_environment :: (main: *Camera3D, env: Environment) { sys_call("Camera3D", "set_environment", 4143518816, Nil, main.p_object, env);  }  // 33
get_environment :: (main: *Camera3D) -> *Environment { call_ret := cast(*Environment) sys_call("Camera3D", "get_environment", 3082064660, Environment, main.p_object); return call_ret; }  // 34
set_attributes :: (main: *Camera3D, env: CameraAttributes) { sys_call("Camera3D", "set_attributes", 2817810567, Nil, main.p_object, env);  }  // 35
get_attributes :: (main: *Camera3D) -> *CameraAttributes { call_ret := cast(*CameraAttributes) sys_call("Camera3D", "get_attributes", 3921283215, CameraAttributes, main.p_object); return call_ret; }  // 36
set_compositor :: (main: *Camera3D, compositor: Compositor) { sys_call("Camera3D", "set_compositor", 1586754307, Nil, main.p_object, compositor);  }  // 37
get_compositor :: (main: *Camera3D) -> *Compositor { call_ret := cast(*Compositor) sys_call("Camera3D", "get_compositor", 3647707413, Compositor, main.p_object); return call_ret; }  // 38
set_keep_aspect_mode :: (main: *Camera3D, mode: Camera3D.KeepAspect) { sys_call("Camera3D", "set_keep_aspect_mode", 1740651252, Nil, main.p_object, mode);  }  // 39
get_keep_aspect_mode :: (main: *Camera3D) -> Camera3D.KeepAspect { call_ret := cast(*Camera3D.KeepAspect) sys_call("Camera3D", "get_keep_aspect_mode", 2790278316, Camera3D.KeepAspect, main.p_object); return call_ret.*; }  // 40
set_doppler_tracking :: (main: *Camera3D, mode: Camera3D.DopplerTracking) { sys_call("Camera3D", "set_doppler_tracking", 3109431270, Nil, main.p_object, mode);  }  // 41
get_doppler_tracking :: (main: *Camera3D) -> Camera3D.DopplerTracking { call_ret := cast(*Camera3D.DopplerTracking) sys_call("Camera3D", "get_doppler_tracking", 1584483649, Camera3D.DopplerTracking, main.p_object); return call_ret.*; }  // 42
get_frustum :: (main: *Camera3D) -> [] Plane { call_ret := cast(*[] Plane) sys_call("Camera3D", "get_frustum", 3995934104, [] Plane, main.p_object); return call_ret.*; }  // 43
is_position_in_frustum :: (main: *Camera3D, world_point: Vector3) -> bool { call_ret := cast(*bool) sys_call("Camera3D", "is_position_in_frustum", 3108956480, bool, main.p_object, world_point); return call_ret.*; }  // 44
get_camera_rid :: (main: *Camera3D) -> RID { call_ret := cast(*RID) sys_call("Camera3D", "get_camera_rid", 2944877500, RID, main.p_object); return call_ret.*; }  // 45
get_pyramid_shape_rid :: (main: *Camera3D) -> RID { call_ret := cast(*RID) sys_call("Camera3D", "get_pyramid_shape_rid", 529393457, RID, main.p_object); return call_ret.*; }  // 46
set_cull_mask_value :: (main: *Camera3D, layer_number: int, value: bool) { sys_call("Camera3D", "set_cull_mask_value", 300928843, Nil, main.p_object, layer_number, value);  }  // 47
get_cull_mask_value :: (main: *Camera3D, layer_number: int) -> bool { call_ret := cast(*bool) sys_call("Camera3D", "get_cull_mask_value", 1116898809, bool, main.p_object, layer_number); return call_ret.*; }  // 48

set_exposure_multiplier :: (main: *CameraAttributes, multiplier: float) { sys_call("CameraAttributes", "set_exposure_multiplier", 373806689, Nil, main.p_object, multiplier);  }  // 0
get_exposure_multiplier :: (main: *CameraAttributes) -> float { call_ret := cast(*float) sys_call("CameraAttributes", "get_exposure_multiplier", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_exposure_sensitivity :: (main: *CameraAttributes, sensitivity: float) { sys_call("CameraAttributes", "set_exposure_sensitivity", 373806689, Nil, main.p_object, sensitivity);  }  // 2
get_exposure_sensitivity :: (main: *CameraAttributes) -> float { call_ret := cast(*float) sys_call("CameraAttributes", "get_exposure_sensitivity", 1740695150, float, main.p_object); return call_ret.*; }  // 3
set_auto_exposure_enabled :: (main: *CameraAttributes, enabled: bool) { sys_call("CameraAttributes", "set_auto_exposure_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 4
is_auto_exposure_enabled :: (main: *CameraAttributes) -> bool { call_ret := cast(*bool) sys_call("CameraAttributes", "is_auto_exposure_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 5
set_auto_exposure_speed :: (main: *CameraAttributes, exposure_speed: float) { sys_call("CameraAttributes", "set_auto_exposure_speed", 373806689, Nil, main.p_object, exposure_speed);  }  // 6
get_auto_exposure_speed :: (main: *CameraAttributes) -> float { call_ret := cast(*float) sys_call("CameraAttributes", "get_auto_exposure_speed", 1740695150, float, main.p_object); return call_ret.*; }  // 7
set_auto_exposure_scale :: (main: *CameraAttributes, exposure_grey: float) { sys_call("CameraAttributes", "set_auto_exposure_scale", 373806689, Nil, main.p_object, exposure_grey);  }  // 8
get_auto_exposure_scale :: (main: *CameraAttributes) -> float { call_ret := cast(*float) sys_call("CameraAttributes", "get_auto_exposure_scale", 1740695150, float, main.p_object); return call_ret.*; }  // 9

set_aperture :: (main: *CameraAttributesPhysical, aperture: float) { sys_call("CameraAttributesPhysical", "set_aperture", 373806689, Nil, main.p_object, aperture);  }  // 0
get_aperture :: (main: *CameraAttributesPhysical) -> float { call_ret := cast(*float) sys_call("CameraAttributesPhysical", "get_aperture", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_shutter_speed :: (main: *CameraAttributesPhysical, shutter_speed: float) { sys_call("CameraAttributesPhysical", "set_shutter_speed", 373806689, Nil, main.p_object, shutter_speed);  }  // 2
get_shutter_speed :: (main: *CameraAttributesPhysical) -> float { call_ret := cast(*float) sys_call("CameraAttributesPhysical", "get_shutter_speed", 1740695150, float, main.p_object); return call_ret.*; }  // 3
set_focal_length :: (main: *CameraAttributesPhysical, focal_length: float) { sys_call("CameraAttributesPhysical", "set_focal_length", 373806689, Nil, main.p_object, focal_length);  }  // 4
get_focal_length :: (main: *CameraAttributesPhysical) -> float { call_ret := cast(*float) sys_call("CameraAttributesPhysical", "get_focal_length", 1740695150, float, main.p_object); return call_ret.*; }  // 5
set_focus_distance :: (main: *CameraAttributesPhysical, focus_distance: float) { sys_call("CameraAttributesPhysical", "set_focus_distance", 373806689, Nil, main.p_object, focus_distance);  }  // 6
get_focus_distance :: (main: *CameraAttributesPhysical) -> float { call_ret := cast(*float) sys_call("CameraAttributesPhysical", "get_focus_distance", 1740695150, float, main.p_object); return call_ret.*; }  // 7
set_near :: (main: *CameraAttributesPhysical, near: float) { sys_call("CameraAttributesPhysical", "set_near", 373806689, Nil, main.p_object, near);  }  // 8
get_near :: (main: *CameraAttributesPhysical) -> float { call_ret := cast(*float) sys_call("CameraAttributesPhysical", "get_near", 1740695150, float, main.p_object); return call_ret.*; }  // 9
set_far :: (main: *CameraAttributesPhysical, far: float) { sys_call("CameraAttributesPhysical", "set_far", 373806689, Nil, main.p_object, far);  }  // 10
get_far :: (main: *CameraAttributesPhysical) -> float { call_ret := cast(*float) sys_call("CameraAttributesPhysical", "get_far", 1740695150, float, main.p_object); return call_ret.*; }  // 11
get_fov :: (main: *CameraAttributesPhysical) -> float { call_ret := cast(*float) sys_call("CameraAttributesPhysical", "get_fov", 1740695150, float, main.p_object); return call_ret.*; }  // 12
set_auto_exposure_max_exposure_value :: (main: *CameraAttributesPhysical, exposure_value_max: float) { sys_call("CameraAttributesPhysical", "set_auto_exposure_max_exposure_value", 373806689, Nil, main.p_object, exposure_value_max);  }  // 13
get_auto_exposure_max_exposure_value :: (main: *CameraAttributesPhysical) -> float { call_ret := cast(*float) sys_call("CameraAttributesPhysical", "get_auto_exposure_max_exposure_value", 1740695150, float, main.p_object); return call_ret.*; }  // 14
set_auto_exposure_min_exposure_value :: (main: *CameraAttributesPhysical, exposure_value_min: float) { sys_call("CameraAttributesPhysical", "set_auto_exposure_min_exposure_value", 373806689, Nil, main.p_object, exposure_value_min);  }  // 15
get_auto_exposure_min_exposure_value :: (main: *CameraAttributesPhysical) -> float { call_ret := cast(*float) sys_call("CameraAttributesPhysical", "get_auto_exposure_min_exposure_value", 1740695150, float, main.p_object); return call_ret.*; }  // 16

set_dof_blur_far_enabled :: (main: *CameraAttributesPractical, enabled: bool) { sys_call("CameraAttributesPractical", "set_dof_blur_far_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 0
is_dof_blur_far_enabled :: (main: *CameraAttributesPractical) -> bool { call_ret := cast(*bool) sys_call("CameraAttributesPractical", "is_dof_blur_far_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 1
set_dof_blur_far_distance :: (main: *CameraAttributesPractical, distance: float) { sys_call("CameraAttributesPractical", "set_dof_blur_far_distance", 373806689, Nil, main.p_object, distance);  }  // 2
get_dof_blur_far_distance :: (main: *CameraAttributesPractical) -> float { call_ret := cast(*float) sys_call("CameraAttributesPractical", "get_dof_blur_far_distance", 1740695150, float, main.p_object); return call_ret.*; }  // 3
set_dof_blur_far_transition :: (main: *CameraAttributesPractical, distance: float) { sys_call("CameraAttributesPractical", "set_dof_blur_far_transition", 373806689, Nil, main.p_object, distance);  }  // 4
get_dof_blur_far_transition :: (main: *CameraAttributesPractical) -> float { call_ret := cast(*float) sys_call("CameraAttributesPractical", "get_dof_blur_far_transition", 1740695150, float, main.p_object); return call_ret.*; }  // 5
set_dof_blur_near_enabled :: (main: *CameraAttributesPractical, enabled: bool) { sys_call("CameraAttributesPractical", "set_dof_blur_near_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 6
is_dof_blur_near_enabled :: (main: *CameraAttributesPractical) -> bool { call_ret := cast(*bool) sys_call("CameraAttributesPractical", "is_dof_blur_near_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 7
set_dof_blur_near_distance :: (main: *CameraAttributesPractical, distance: float) { sys_call("CameraAttributesPractical", "set_dof_blur_near_distance", 373806689, Nil, main.p_object, distance);  }  // 8
get_dof_blur_near_distance :: (main: *CameraAttributesPractical) -> float { call_ret := cast(*float) sys_call("CameraAttributesPractical", "get_dof_blur_near_distance", 1740695150, float, main.p_object); return call_ret.*; }  // 9
set_dof_blur_near_transition :: (main: *CameraAttributesPractical, distance: float) { sys_call("CameraAttributesPractical", "set_dof_blur_near_transition", 373806689, Nil, main.p_object, distance);  }  // 10
get_dof_blur_near_transition :: (main: *CameraAttributesPractical) -> float { call_ret := cast(*float) sys_call("CameraAttributesPractical", "get_dof_blur_near_transition", 1740695150, float, main.p_object); return call_ret.*; }  // 11
set_dof_blur_amount :: (main: *CameraAttributesPractical, amount: float) { sys_call("CameraAttributesPractical", "set_dof_blur_amount", 373806689, Nil, main.p_object, amount);  }  // 12
get_dof_blur_amount :: (main: *CameraAttributesPractical) -> float { call_ret := cast(*float) sys_call("CameraAttributesPractical", "get_dof_blur_amount", 1740695150, float, main.p_object); return call_ret.*; }  // 13
set_auto_exposure_max_sensitivity :: (main: *CameraAttributesPractical, max_sensitivity: float) { sys_call("CameraAttributesPractical", "set_auto_exposure_max_sensitivity", 373806689, Nil, main.p_object, max_sensitivity);  }  // 14
get_auto_exposure_max_sensitivity :: (main: *CameraAttributesPractical) -> float { call_ret := cast(*float) sys_call("CameraAttributesPractical", "get_auto_exposure_max_sensitivity", 1740695150, float, main.p_object); return call_ret.*; }  // 15
set_auto_exposure_min_sensitivity :: (main: *CameraAttributesPractical, min_sensitivity: float) { sys_call("CameraAttributesPractical", "set_auto_exposure_min_sensitivity", 373806689, Nil, main.p_object, min_sensitivity);  }  // 16
get_auto_exposure_min_sensitivity :: (main: *CameraAttributesPractical) -> float { call_ret := cast(*float) sys_call("CameraAttributesPractical", "get_auto_exposure_min_sensitivity", 1740695150, float, main.p_object); return call_ret.*; }  // 17

get_id :: (main: *CameraFeed) -> int { call_ret := cast(*int) sys_call("CameraFeed", "get_id", 3905245786, int, main.p_object); return call_ret.*; }  // 2
is_active :: (main: *CameraFeed) -> bool { call_ret := cast(*bool) sys_call("CameraFeed", "is_active", 36873697, bool, main.p_object); return call_ret.*; }  // 3
set_active :: (main: *CameraFeed, active: bool) { sys_call("CameraFeed", "set_active", 2586408642, Nil, main.p_object, active);  }  // 4
get_name :: (main: *CameraFeed) -> gstring { call_ret := cast(*gstring) sys_call("CameraFeed", "get_name", 201670096, gstring, main.p_object); return call_ret.*; }  // 5
set_name :: (main: *CameraFeed, name: string) { sys_call("CameraFeed", "set_name", 83702148, Nil, main.p_object, name);  }  // 6
get_position :: (main: *CameraFeed) -> CameraFeed.FeedPosition { call_ret := cast(*CameraFeed.FeedPosition) sys_call("CameraFeed", "get_position", 2711679033, CameraFeed.FeedPosition, main.p_object); return call_ret.*; }  // 7
set_position :: (main: *CameraFeed, position: CameraFeed.FeedPosition) { sys_call("CameraFeed", "set_position", 611162623, Nil, main.p_object, position);  }  // 8
get_transform :: (main: *CameraFeed) -> Transform2D { call_ret := cast(*Transform2D) sys_call("CameraFeed", "get_transform", 3814499831, Transform2D, main.p_object); return call_ret.*; }  // 9
set_transform :: (main: *CameraFeed, transform: Transform2D) { sys_call("CameraFeed", "set_transform", 2761652528, Nil, main.p_object, transform);  }  // 10
set_rgb_image :: (main: *CameraFeed, rgb_image: Image) { sys_call("CameraFeed", "set_rgb_image", 532598488, Nil, main.p_object, rgb_image);  }  // 11
set_ycbcr_image :: (main: *CameraFeed, ycbcr_image: Image) { sys_call("CameraFeed", "set_ycbcr_image", 532598488, Nil, main.p_object, ycbcr_image);  }  // 12
set_external :: (main: *CameraFeed, width: int, height: int) { sys_call("CameraFeed", "set_external", 3937882851, Nil, main.p_object, width, height);  }  // 13
get_texture_tex_id :: (main: *CameraFeed, feed_image_type: CameraServer.FeedImage) -> int { call_ret := cast(*int) sys_call("CameraFeed", "get_texture_tex_id", 1135699418, int, main.p_object, feed_image_type); return call_ret.*; }  // 14
get_datatype :: (main: *CameraFeed) -> CameraFeed.FeedDataType { call_ret := cast(*CameraFeed.FeedDataType) sys_call("CameraFeed", "get_datatype", 1477782850, CameraFeed.FeedDataType, main.p_object); return call_ret.*; }  // 15
get_formats :: (main: *CameraFeed) -> Array { call_ret := cast(*Array) sys_call("CameraFeed", "get_formats", 3995934104, Array, main.p_object); return call_ret.*; }  // 16
set_format :: (main: *CameraFeed, index: int, parameters: Dictionary) -> bool { call_ret := cast(*bool) sys_call("CameraFeed", "set_format", 31872775, bool, main.p_object, index, parameters); return call_ret.*; }  // 17

get_feed :: (main: *CameraServer, index: int) -> *CameraFeed { call_ret := cast(*CameraFeed) sys_call("CameraServer", "get_feed", 361927068, CameraFeed, main.p_object, index); return call_ret; }  // 0
get_feed_count :: (main: *CameraServer) -> int { call_ret := cast(*int) sys_call("CameraServer", "get_feed_count", 2455072627, int, main.p_object); return call_ret.*; }  // 1
feeds :: (main: *CameraServer) -> [] CameraFeed { call_ret := cast(*[] CameraFeed) sys_call("CameraServer", "feeds", 2915620761, [] CameraFeed, main.p_object); return call_ret.*; }  // 2
add_feed :: (main: *CameraServer, feed: CameraFeed) { sys_call("CameraServer", "add_feed", 3204782488, Nil, main.p_object, feed);  }  // 3
remove_feed :: (main: *CameraServer, feed: CameraFeed) { sys_call("CameraServer", "remove_feed", 3204782488, Nil, main.p_object, feed);  }  // 4

set_camera_feed_id :: (main: *CameraTexture, feed_id: int) { sys_call("CameraTexture", "set_camera_feed_id", 1286410249, Nil, main.p_object, feed_id);  }  // 0
get_camera_feed_id :: (main: *CameraTexture) -> int { call_ret := cast(*int) sys_call("CameraTexture", "get_camera_feed_id", 3905245786, int, main.p_object); return call_ret.*; }  // 1
set_which_feed :: (main: *CameraTexture, which_feed: CameraServer.FeedImage) { sys_call("CameraTexture", "set_which_feed", 1595299230, Nil, main.p_object, which_feed);  }  // 2
get_which_feed :: (main: *CameraTexture) -> CameraServer.FeedImage { call_ret := cast(*CameraServer.FeedImage) sys_call("CameraTexture", "get_which_feed", 91039457, CameraServer.FeedImage, main.p_object); return call_ret.*; }  // 3
set_camera_active :: (main: *CameraTexture, active: bool) { sys_call("CameraTexture", "set_camera_active", 2586408642, Nil, main.p_object, active);  }  // 4
get_camera_active :: (main: *CameraTexture) -> bool { call_ret := cast(*bool) sys_call("CameraTexture", "get_camera_active", 36873697, bool, main.p_object); return call_ret.*; }  // 5

set_fit_margin :: (main: *CanvasGroup, fit_margin: float) { sys_call("CanvasGroup", "set_fit_margin", 373806689, Nil, main.p_object, fit_margin);  }  // 0
get_fit_margin :: (main: *CanvasGroup) -> float { call_ret := cast(*float) sys_call("CanvasGroup", "get_fit_margin", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_clear_margin :: (main: *CanvasGroup, clear_margin: float) { sys_call("CanvasGroup", "set_clear_margin", 373806689, Nil, main.p_object, clear_margin);  }  // 2
get_clear_margin :: (main: *CanvasGroup) -> float { call_ret := cast(*float) sys_call("CanvasGroup", "get_clear_margin", 1740695150, float, main.p_object); return call_ret.*; }  // 3
set_use_mipmaps :: (main: *CanvasGroup, use_mipmaps: bool) { sys_call("CanvasGroup", "set_use_mipmaps", 2586408642, Nil, main.p_object, use_mipmaps);  }  // 4
is_using_mipmaps :: (main: *CanvasGroup) -> bool { call_ret := cast(*bool) sys_call("CanvasGroup", "is_using_mipmaps", 36873697, bool, main.p_object); return call_ret.*; }  // 5

get_canvas_item :: (main: *CanvasItem) -> RID { call_ret := cast(*RID) sys_call("CanvasItem", "get_canvas_item", 2944877500, RID, main.p_object); return call_ret.*; }  // 1
set_visible :: (main: *CanvasItem, visible: bool) { sys_call("CanvasItem", "set_visible", 2586408642, Nil, main.p_object, visible);  }  // 2
is_visible :: (main: *CanvasItem) -> bool { call_ret := cast(*bool) sys_call("CanvasItem", "is_visible", 36873697, bool, main.p_object); return call_ret.*; }  // 3
is_visible_in_tree :: (main: *CanvasItem) -> bool { call_ret := cast(*bool) sys_call("CanvasItem", "is_visible_in_tree", 36873697, bool, main.p_object); return call_ret.*; }  // 4
show :: (main: *CanvasItem) { sys_call("CanvasItem", "show", 3218959716, Nil, main.p_object);  }  // 5
hide :: (main: *CanvasItem) { sys_call("CanvasItem", "hide", 3218959716, Nil, main.p_object);  }  // 6
queue_redraw :: (main: *CanvasItem) { sys_call("CanvasItem", "queue_redraw", 3218959716, Nil, main.p_object);  }  // 7
move_to_front :: (main: *CanvasItem) { sys_call("CanvasItem", "move_to_front", 3218959716, Nil, main.p_object);  }  // 8
set_as_top_level :: (main: *CanvasItem, enable: bool) { sys_call("CanvasItem", "set_as_top_level", 2586408642, Nil, main.p_object, enable);  }  // 9
is_set_as_top_level :: (main: *CanvasItem) -> bool { call_ret := cast(*bool) sys_call("CanvasItem", "is_set_as_top_level", 36873697, bool, main.p_object); return call_ret.*; }  // 10
set_light_mask :: (main: *CanvasItem, light_mask: int) { sys_call("CanvasItem", "set_light_mask", 1286410249, Nil, main.p_object, light_mask);  }  // 11
get_light_mask :: (main: *CanvasItem) -> int { call_ret := cast(*int) sys_call("CanvasItem", "get_light_mask", 3905245786, int, main.p_object); return call_ret.*; }  // 12
set_modulate :: (main: *CanvasItem, modulate: Color) { sys_call("CanvasItem", "set_modulate", 2920490490, Nil, main.p_object, modulate);  }  // 13
get_modulate :: (main: *CanvasItem) -> Color { call_ret := cast(*Color) sys_call("CanvasItem", "get_modulate", 3444240500, Color, main.p_object); return call_ret.*; }  // 14
set_self_modulate :: (main: *CanvasItem, self_modulate: Color) { sys_call("CanvasItem", "set_self_modulate", 2920490490, Nil, main.p_object, self_modulate);  }  // 15
get_self_modulate :: (main: *CanvasItem) -> Color { call_ret := cast(*Color) sys_call("CanvasItem", "get_self_modulate", 3444240500, Color, main.p_object); return call_ret.*; }  // 16
set_z_index :: (main: *CanvasItem, z_index: int) { sys_call("CanvasItem", "set_z_index", 1286410249, Nil, main.p_object, z_index);  }  // 17
get_z_index :: (main: *CanvasItem) -> int { call_ret := cast(*int) sys_call("CanvasItem", "get_z_index", 3905245786, int, main.p_object); return call_ret.*; }  // 18
set_z_as_relative :: (main: *CanvasItem, enable: bool) { sys_call("CanvasItem", "set_z_as_relative", 2586408642, Nil, main.p_object, enable);  }  // 19
is_z_relative :: (main: *CanvasItem) -> bool { call_ret := cast(*bool) sys_call("CanvasItem", "is_z_relative", 36873697, bool, main.p_object); return call_ret.*; }  // 20
set_y_sort_enabled :: (main: *CanvasItem, enabled: bool) { sys_call("CanvasItem", "set_y_sort_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 21
is_y_sort_enabled :: (main: *CanvasItem) -> bool { call_ret := cast(*bool) sys_call("CanvasItem", "is_y_sort_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 22
set_draw_behind_parent :: (main: *CanvasItem, enable: bool) { sys_call("CanvasItem", "set_draw_behind_parent", 2586408642, Nil, main.p_object, enable);  }  // 23
is_draw_behind_parent_enabled :: (main: *CanvasItem) -> bool { call_ret := cast(*bool) sys_call("CanvasItem", "is_draw_behind_parent_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 24
draw_line :: (main: *CanvasItem, from: Vector2, to: Vector2, color: Color) { sys_call("CanvasItem", "draw_line", 1562330099, Nil, main.p_object, from, to, color);  }  // 25
draw_dashed_line :: (main: *CanvasItem, from: Vector2, to: Vector2, color: Color) { sys_call("CanvasItem", "draw_dashed_line", 3653831622, Nil, main.p_object, from, to, color);  }  // 26
draw_polyline :: (main: *CanvasItem, points: PackedVector2Array, color: Color) { sys_call("CanvasItem", "draw_polyline", 3797364428, Nil, main.p_object, points, color);  }  // 27
draw_polyline_colors :: (main: *CanvasItem, points: PackedVector2Array, colors: PackedColorArray) { sys_call("CanvasItem", "draw_polyline_colors", 2311979562, Nil, main.p_object, points, colors);  }  // 28
draw_arc :: (main: *CanvasItem, center: Vector2, radius: float, start_angle: float, end_angle: float, point_count: int, color: Color) { sys_call("CanvasItem", "draw_arc", 4140652635, Nil, main.p_object, center, radius, start_angle, end_angle, point_count, color);  }  // 29
draw_multiline :: (main: *CanvasItem, points: PackedVector2Array, color: Color) { sys_call("CanvasItem", "draw_multiline", 3797364428, Nil, main.p_object, points, color);  }  // 30
draw_multiline_colors :: (main: *CanvasItem, points: PackedVector2Array, colors: PackedColorArray) { sys_call("CanvasItem", "draw_multiline_colors", 2311979562, Nil, main.p_object, points, colors);  }  // 31
draw_rect :: (main: *CanvasItem, rect: Rect2, color: Color) { sys_call("CanvasItem", "draw_rect", 2773573813, Nil, main.p_object, rect, color);  }  // 32
draw_circle :: (main: *CanvasItem, position: Vector2, radius: float, color: Color) { sys_call("CanvasItem", "draw_circle", 3153026596, Nil, main.p_object, position, radius, color);  }  // 33
draw_texture :: (main: *CanvasItem, texture: Texture2D, position: Vector2) { sys_call("CanvasItem", "draw_texture", 520200117, Nil, main.p_object, texture, position);  }  // 34
draw_texture_rect :: (main: *CanvasItem, texture: Texture2D, rect: Rect2, tile: bool) { sys_call("CanvasItem", "draw_texture_rect", 3832805018, Nil, main.p_object, texture, rect, tile);  }  // 35
draw_texture_rect_region :: (main: *CanvasItem, texture: Texture2D, rect: Rect2, src_rect: Rect2) { sys_call("CanvasItem", "draw_texture_rect_region", 3883821411, Nil, main.p_object, texture, rect, src_rect);  }  // 36
draw_msdf_texture_rect_region :: (main: *CanvasItem, texture: Texture2D, rect: Rect2, src_rect: Rect2) { sys_call("CanvasItem", "draw_msdf_texture_rect_region", 4219163252, Nil, main.p_object, texture, rect, src_rect);  }  // 37
draw_lcd_texture_rect_region :: (main: *CanvasItem, texture: Texture2D, rect: Rect2, src_rect: Rect2) { sys_call("CanvasItem", "draw_lcd_texture_rect_region", 3212350954, Nil, main.p_object, texture, rect, src_rect);  }  // 38
draw_style_box :: (main: *CanvasItem, style_box: StyleBox, rect: Rect2) { sys_call("CanvasItem", "draw_style_box", 388176283, Nil, main.p_object, style_box, rect);  }  // 39
draw_primitive :: (main: *CanvasItem, points: PackedVector2Array, colors: PackedColorArray, uvs: PackedVector2Array) { sys_call("CanvasItem", "draw_primitive", 3288481815, Nil, main.p_object, points, colors, uvs);  }  // 40
draw_polygon :: (main: *CanvasItem, points: PackedVector2Array, colors: PackedColorArray) { sys_call("CanvasItem", "draw_polygon", 974537912, Nil, main.p_object, points, colors);  }  // 41
draw_colored_polygon :: (main: *CanvasItem, points: PackedVector2Array, color: Color) { sys_call("CanvasItem", "draw_colored_polygon", 15245644, Nil, main.p_object, points, color);  }  // 42
draw_string :: (main: *CanvasItem, font: Font, pos: Vector2, text: string) { sys_call("CanvasItem", "draw_string", 728290553, Nil, main.p_object, font, pos, text);  }  // 43
draw_multiline_string :: (main: *CanvasItem, font: Font, pos: Vector2, text: string) { sys_call("CanvasItem", "draw_multiline_string", 1927038192, Nil, main.p_object, font, pos, text);  }  // 44
draw_string_outline :: (main: *CanvasItem, font: Font, pos: Vector2, text: string) { sys_call("CanvasItem", "draw_string_outline", 340562381, Nil, main.p_object, font, pos, text);  }  // 45
draw_multiline_string_outline :: (main: *CanvasItem, font: Font, pos: Vector2, text: string) { sys_call("CanvasItem", "draw_multiline_string_outline", 1912318525, Nil, main.p_object, font, pos, text);  }  // 46
draw_char :: (main: *CanvasItem, font: Font, pos: Vector2, char: string) { sys_call("CanvasItem", "draw_char", 3339793283, Nil, main.p_object, font, pos, char);  }  // 47
draw_char_outline :: (main: *CanvasItem, font: Font, pos: Vector2, char: string) { sys_call("CanvasItem", "draw_char_outline", 3302344391, Nil, main.p_object, font, pos, char);  }  // 48
draw_mesh :: (main: *CanvasItem, mesh: Mesh, texture: Texture2D) { sys_call("CanvasItem", "draw_mesh", 153818295, Nil, main.p_object, mesh, texture);  }  // 49
draw_multimesh :: (main: *CanvasItem, multimesh: MultiMesh, texture: Texture2D) { sys_call("CanvasItem", "draw_multimesh", 937992368, Nil, main.p_object, multimesh, texture);  }  // 50
draw_set_transform :: (main: *CanvasItem, position: Vector2) { sys_call("CanvasItem", "draw_set_transform", 288975085, Nil, main.p_object, position);  }  // 51
draw_set_transform_matrix :: (main: *CanvasItem, xform: Transform2D) { sys_call("CanvasItem", "draw_set_transform_matrix", 2761652528, Nil, main.p_object, xform);  }  // 52
draw_animation_slice :: (main: *CanvasItem, animation_length: float, slice_begin: float, slice_end: float) { sys_call("CanvasItem", "draw_animation_slice", 3112831842, Nil, main.p_object, animation_length, slice_begin, slice_end);  }  // 53
draw_end_animation :: (main: *CanvasItem) { sys_call("CanvasItem", "draw_end_animation", 3218959716, Nil, main.p_object);  }  // 54
get_transform :: (main: *CanvasItem) -> Transform2D { call_ret := cast(*Transform2D) sys_call("CanvasItem", "get_transform", 3814499831, Transform2D, main.p_object); return call_ret.*; }  // 55
get_global_transform :: (main: *CanvasItem) -> Transform2D { call_ret := cast(*Transform2D) sys_call("CanvasItem", "get_global_transform", 3814499831, Transform2D, main.p_object); return call_ret.*; }  // 56
get_global_transform_with_canvas :: (main: *CanvasItem) -> Transform2D { call_ret := cast(*Transform2D) sys_call("CanvasItem", "get_global_transform_with_canvas", 3814499831, Transform2D, main.p_object); return call_ret.*; }  // 57
get_viewport_transform :: (main: *CanvasItem) -> Transform2D { call_ret := cast(*Transform2D) sys_call("CanvasItem", "get_viewport_transform", 3814499831, Transform2D, main.p_object); return call_ret.*; }  // 58
get_viewport_rect :: (main: *CanvasItem) -> Rect2 { call_ret := cast(*Rect2) sys_call("CanvasItem", "get_viewport_rect", 1639390495, Rect2, main.p_object); return call_ret.*; }  // 59
get_canvas_transform :: (main: *CanvasItem) -> Transform2D { call_ret := cast(*Transform2D) sys_call("CanvasItem", "get_canvas_transform", 3814499831, Transform2D, main.p_object); return call_ret.*; }  // 60
get_screen_transform :: (main: *CanvasItem) -> Transform2D { call_ret := cast(*Transform2D) sys_call("CanvasItem", "get_screen_transform", 3814499831, Transform2D, main.p_object); return call_ret.*; }  // 61
get_local_mouse_position :: (main: *CanvasItem) -> Vector2 { call_ret := cast(*Vector2) sys_call("CanvasItem", "get_local_mouse_position", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 62
get_global_mouse_position :: (main: *CanvasItem) -> Vector2 { call_ret := cast(*Vector2) sys_call("CanvasItem", "get_global_mouse_position", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 63
get_canvas :: (main: *CanvasItem) -> RID { call_ret := cast(*RID) sys_call("CanvasItem", "get_canvas", 2944877500, RID, main.p_object); return call_ret.*; }  // 64
get_canvas_layer_node :: (main: *CanvasItem) -> *CanvasLayer { call_ret := cast(*CanvasLayer) sys_call("CanvasItem", "get_canvas_layer_node", 2602762519, CanvasLayer, main.p_object); return call_ret; }  // 65
get_world_2d :: (main: *CanvasItem) -> *World2D { call_ret := cast(*World2D) sys_call("CanvasItem", "get_world_2d", 2339128592, World2D, main.p_object); return call_ret; }  // 66
set_material :: (main: *CanvasItem, material: Material) { sys_call("CanvasItem", "set_material", 2757459619, Nil, main.p_object, material);  }  // 67
get_material :: (main: *CanvasItem) -> *Material { call_ret := cast(*Material) sys_call("CanvasItem", "get_material", 5934680, Material, main.p_object); return call_ret; }  // 68
set_instance_shader_parameter :: (main: *CanvasItem, name: string, value: Variant) { sys_call("CanvasItem", "set_instance_shader_parameter", 3776071444, Nil, main.p_object, name, value);  }  // 69
get_instance_shader_parameter :: (main: *CanvasItem, name: string) -> Variant { call_ret := cast(*Variant) sys_call("CanvasItem", "get_instance_shader_parameter", 2760726917, Variant, main.p_object, name); return call_ret.*; }  // 70
set_use_parent_material :: (main: *CanvasItem, enable: bool) { sys_call("CanvasItem", "set_use_parent_material", 2586408642, Nil, main.p_object, enable);  }  // 71
get_use_parent_material :: (main: *CanvasItem) -> bool { call_ret := cast(*bool) sys_call("CanvasItem", "get_use_parent_material", 36873697, bool, main.p_object); return call_ret.*; }  // 72
set_notify_local_transform :: (main: *CanvasItem, enable: bool) { sys_call("CanvasItem", "set_notify_local_transform", 2586408642, Nil, main.p_object, enable);  }  // 73
is_local_transform_notification_enabled :: (main: *CanvasItem) -> bool { call_ret := cast(*bool) sys_call("CanvasItem", "is_local_transform_notification_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 74
set_notify_transform :: (main: *CanvasItem, enable: bool) { sys_call("CanvasItem", "set_notify_transform", 2586408642, Nil, main.p_object, enable);  }  // 75
is_transform_notification_enabled :: (main: *CanvasItem) -> bool { call_ret := cast(*bool) sys_call("CanvasItem", "is_transform_notification_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 76
force_update_transform :: (main: *CanvasItem) { sys_call("CanvasItem", "force_update_transform", 3218959716, Nil, main.p_object);  }  // 77
make_canvas_position_local :: (main: *CanvasItem, viewport_point: Vector2) -> Vector2 { call_ret := cast(*Vector2) sys_call("CanvasItem", "make_canvas_position_local", 2656412154, Vector2, main.p_object, viewport_point); return call_ret.*; }  // 78
make_input_local :: (main: *CanvasItem, event: InputEvent) -> *InputEvent { call_ret := cast(*InputEvent) sys_call("CanvasItem", "make_input_local", 811130057, InputEvent, main.p_object, event); return call_ret; }  // 79
set_visibility_layer :: (main: *CanvasItem, layer: int) { sys_call("CanvasItem", "set_visibility_layer", 1286410249, Nil, main.p_object, layer);  }  // 80
get_visibility_layer :: (main: *CanvasItem) -> int { call_ret := cast(*int) sys_call("CanvasItem", "get_visibility_layer", 3905245786, int, main.p_object); return call_ret.*; }  // 81
set_visibility_layer_bit :: (main: *CanvasItem, layer: int, enabled: bool) { sys_call("CanvasItem", "set_visibility_layer_bit", 300928843, Nil, main.p_object, layer, enabled);  }  // 82
get_visibility_layer_bit :: (main: *CanvasItem, layer: int) -> bool { call_ret := cast(*bool) sys_call("CanvasItem", "get_visibility_layer_bit", 1116898809, bool, main.p_object, layer); return call_ret.*; }  // 83
set_texture_filter :: (main: *CanvasItem, mode: CanvasItem.TextureFilter) { sys_call("CanvasItem", "set_texture_filter", 1037999706, Nil, main.p_object, mode);  }  // 84
get_texture_filter :: (main: *CanvasItem) -> CanvasItem.TextureFilter { call_ret := cast(*CanvasItem.TextureFilter) sys_call("CanvasItem", "get_texture_filter", 121960042, CanvasItem.TextureFilter, main.p_object); return call_ret.*; }  // 85
set_texture_repeat :: (main: *CanvasItem, mode: CanvasItem.TextureRepeat) { sys_call("CanvasItem", "set_texture_repeat", 1716472974, Nil, main.p_object, mode);  }  // 86
get_texture_repeat :: (main: *CanvasItem) -> CanvasItem.TextureRepeat { call_ret := cast(*CanvasItem.TextureRepeat) sys_call("CanvasItem", "get_texture_repeat", 2667158319, CanvasItem.TextureRepeat, main.p_object); return call_ret.*; }  // 87
set_clip_children_mode :: (main: *CanvasItem, mode: CanvasItem.ClipChildrenMode) { sys_call("CanvasItem", "set_clip_children_mode", 1319393776, Nil, main.p_object, mode);  }  // 88
get_clip_children_mode :: (main: *CanvasItem) -> CanvasItem.ClipChildrenMode { call_ret := cast(*CanvasItem.ClipChildrenMode) sys_call("CanvasItem", "get_clip_children_mode", 3581808349, CanvasItem.ClipChildrenMode, main.p_object); return call_ret.*; }  // 89

set_blend_mode :: (main: *CanvasItemMaterial, blend_mode: CanvasItemMaterial.BlendMode) { sys_call("CanvasItemMaterial", "set_blend_mode", 1786054936, Nil, main.p_object, blend_mode);  }  // 0
get_blend_mode :: (main: *CanvasItemMaterial) -> CanvasItemMaterial.BlendMode { call_ret := cast(*CanvasItemMaterial.BlendMode) sys_call("CanvasItemMaterial", "get_blend_mode", 3318684035, CanvasItemMaterial.BlendMode, main.p_object); return call_ret.*; }  // 1
set_light_mode :: (main: *CanvasItemMaterial, light_mode: CanvasItemMaterial.LightMode) { sys_call("CanvasItemMaterial", "set_light_mode", 628074070, Nil, main.p_object, light_mode);  }  // 2
get_light_mode :: (main: *CanvasItemMaterial) -> CanvasItemMaterial.LightMode { call_ret := cast(*CanvasItemMaterial.LightMode) sys_call("CanvasItemMaterial", "get_light_mode", 3863292382, CanvasItemMaterial.LightMode, main.p_object); return call_ret.*; }  // 3
set_particles_animation :: (main: *CanvasItemMaterial, particles_anim: bool) { sys_call("CanvasItemMaterial", "set_particles_animation", 2586408642, Nil, main.p_object, particles_anim);  }  // 4
get_particles_animation :: (main: *CanvasItemMaterial) -> bool { call_ret := cast(*bool) sys_call("CanvasItemMaterial", "get_particles_animation", 36873697, bool, main.p_object); return call_ret.*; }  // 5
set_particles_anim_h_frames :: (main: *CanvasItemMaterial, frames: int) { sys_call("CanvasItemMaterial", "set_particles_anim_h_frames", 1286410249, Nil, main.p_object, frames);  }  // 6
get_particles_anim_h_frames :: (main: *CanvasItemMaterial) -> int { call_ret := cast(*int) sys_call("CanvasItemMaterial", "get_particles_anim_h_frames", 3905245786, int, main.p_object); return call_ret.*; }  // 7
set_particles_anim_v_frames :: (main: *CanvasItemMaterial, frames: int) { sys_call("CanvasItemMaterial", "set_particles_anim_v_frames", 1286410249, Nil, main.p_object, frames);  }  // 8
get_particles_anim_v_frames :: (main: *CanvasItemMaterial) -> int { call_ret := cast(*int) sys_call("CanvasItemMaterial", "get_particles_anim_v_frames", 3905245786, int, main.p_object); return call_ret.*; }  // 9
set_particles_anim_loop :: (main: *CanvasItemMaterial, loop: bool) { sys_call("CanvasItemMaterial", "set_particles_anim_loop", 2586408642, Nil, main.p_object, loop);  }  // 10
get_particles_anim_loop :: (main: *CanvasItemMaterial) -> bool { call_ret := cast(*bool) sys_call("CanvasItemMaterial", "get_particles_anim_loop", 36873697, bool, main.p_object); return call_ret.*; }  // 11

set_layer :: (main: *CanvasLayer, layer: int) { sys_call("CanvasLayer", "set_layer", 1286410249, Nil, main.p_object, layer);  }  // 0
get_layer :: (main: *CanvasLayer) -> int { call_ret := cast(*int) sys_call("CanvasLayer", "get_layer", 3905245786, int, main.p_object); return call_ret.*; }  // 1
set_visible :: (main: *CanvasLayer, visible: bool) { sys_call("CanvasLayer", "set_visible", 2586408642, Nil, main.p_object, visible);  }  // 2
is_visible :: (main: *CanvasLayer) -> bool { call_ret := cast(*bool) sys_call("CanvasLayer", "is_visible", 36873697, bool, main.p_object); return call_ret.*; }  // 3
show :: (main: *CanvasLayer) { sys_call("CanvasLayer", "show", 3218959716, Nil, main.p_object);  }  // 4
hide :: (main: *CanvasLayer) { sys_call("CanvasLayer", "hide", 3218959716, Nil, main.p_object);  }  // 5
set_transform :: (main: *CanvasLayer, transform: Transform2D) { sys_call("CanvasLayer", "set_transform", 2761652528, Nil, main.p_object, transform);  }  // 6
get_transform :: (main: *CanvasLayer) -> Transform2D { call_ret := cast(*Transform2D) sys_call("CanvasLayer", "get_transform", 3814499831, Transform2D, main.p_object); return call_ret.*; }  // 7
get_final_transform :: (main: *CanvasLayer) -> Transform2D { call_ret := cast(*Transform2D) sys_call("CanvasLayer", "get_final_transform", 3814499831, Transform2D, main.p_object); return call_ret.*; }  // 8
set_offset :: (main: *CanvasLayer, offset: Vector2) { sys_call("CanvasLayer", "set_offset", 743155724, Nil, main.p_object, offset);  }  // 9
get_offset :: (main: *CanvasLayer) -> Vector2 { call_ret := cast(*Vector2) sys_call("CanvasLayer", "get_offset", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 10
set_rotation :: (main: *CanvasLayer, radians: float) { sys_call("CanvasLayer", "set_rotation", 373806689, Nil, main.p_object, radians);  }  // 11
get_rotation :: (main: *CanvasLayer) -> float { call_ret := cast(*float) sys_call("CanvasLayer", "get_rotation", 1740695150, float, main.p_object); return call_ret.*; }  // 12
set_scale :: (main: *CanvasLayer, scale: Vector2) { sys_call("CanvasLayer", "set_scale", 743155724, Nil, main.p_object, scale);  }  // 13
get_scale :: (main: *CanvasLayer) -> Vector2 { call_ret := cast(*Vector2) sys_call("CanvasLayer", "get_scale", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 14
set_follow_viewport :: (main: *CanvasLayer, enable: bool) { sys_call("CanvasLayer", "set_follow_viewport", 2586408642, Nil, main.p_object, enable);  }  // 15
is_following_viewport :: (main: *CanvasLayer) -> bool { call_ret := cast(*bool) sys_call("CanvasLayer", "is_following_viewport", 36873697, bool, main.p_object); return call_ret.*; }  // 16
set_follow_viewport_scale :: (main: *CanvasLayer, scale: float) { sys_call("CanvasLayer", "set_follow_viewport_scale", 373806689, Nil, main.p_object, scale);  }  // 17
get_follow_viewport_scale :: (main: *CanvasLayer) -> float { call_ret := cast(*float) sys_call("CanvasLayer", "get_follow_viewport_scale", 1740695150, float, main.p_object); return call_ret.*; }  // 18
set_custom_viewport :: (main: *CanvasLayer, viewport: Node) { sys_call("CanvasLayer", "set_custom_viewport", 1078189570, Nil, main.p_object, viewport);  }  // 19
get_custom_viewport :: (main: *CanvasLayer) -> *Node { call_ret := cast(*Node) sys_call("CanvasLayer", "get_custom_viewport", 3160264692, Node, main.p_object); return call_ret; }  // 20
get_canvas :: (main: *CanvasLayer) -> RID { call_ret := cast(*RID) sys_call("CanvasLayer", "get_canvas", 2944877500, RID, main.p_object); return call_ret.*; }  // 21

set_color :: (main: *CanvasModulate, color: Color) { sys_call("CanvasModulate", "set_color", 2920490490, Nil, main.p_object, color);  }  // 0
get_color :: (main: *CanvasModulate) -> Color { call_ret := cast(*Color) sys_call("CanvasModulate", "get_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 1

set_diffuse_texture :: (main: *CanvasTexture, texture: Texture2D) { sys_call("CanvasTexture", "set_diffuse_texture", 4051416890, Nil, main.p_object, texture);  }  // 0
get_diffuse_texture :: (main: *CanvasTexture) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("CanvasTexture", "get_diffuse_texture", 3635182373, Texture2D, main.p_object); return call_ret; }  // 1
set_normal_texture :: (main: *CanvasTexture, texture: Texture2D) { sys_call("CanvasTexture", "set_normal_texture", 4051416890, Nil, main.p_object, texture);  }  // 2
get_normal_texture :: (main: *CanvasTexture) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("CanvasTexture", "get_normal_texture", 3635182373, Texture2D, main.p_object); return call_ret; }  // 3
set_specular_texture :: (main: *CanvasTexture, texture: Texture2D) { sys_call("CanvasTexture", "set_specular_texture", 4051416890, Nil, main.p_object, texture);  }  // 4
get_specular_texture :: (main: *CanvasTexture) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("CanvasTexture", "get_specular_texture", 3635182373, Texture2D, main.p_object); return call_ret; }  // 5
set_specular_color :: (main: *CanvasTexture, color: Color) { sys_call("CanvasTexture", "set_specular_color", 2920490490, Nil, main.p_object, color);  }  // 6
get_specular_color :: (main: *CanvasTexture) -> Color { call_ret := cast(*Color) sys_call("CanvasTexture", "get_specular_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 7
set_specular_shininess :: (main: *CanvasTexture, shininess: float) { sys_call("CanvasTexture", "set_specular_shininess", 373806689, Nil, main.p_object, shininess);  }  // 8
get_specular_shininess :: (main: *CanvasTexture) -> float { call_ret := cast(*float) sys_call("CanvasTexture", "get_specular_shininess", 1740695150, float, main.p_object); return call_ret.*; }  // 9
set_texture_filter :: (main: *CanvasTexture, filter: CanvasItem.TextureFilter) { sys_call("CanvasTexture", "set_texture_filter", 1037999706, Nil, main.p_object, filter);  }  // 10
get_texture_filter :: (main: *CanvasTexture) -> CanvasItem.TextureFilter { call_ret := cast(*CanvasItem.TextureFilter) sys_call("CanvasTexture", "get_texture_filter", 121960042, CanvasItem.TextureFilter, main.p_object); return call_ret.*; }  // 11
set_texture_repeat :: (main: *CanvasTexture, repeat: CanvasItem.TextureRepeat) { sys_call("CanvasTexture", "set_texture_repeat", 1716472974, Nil, main.p_object, repeat);  }  // 12
get_texture_repeat :: (main: *CanvasTexture) -> CanvasItem.TextureRepeat { call_ret := cast(*CanvasItem.TextureRepeat) sys_call("CanvasTexture", "get_texture_repeat", 2667158319, CanvasItem.TextureRepeat, main.p_object); return call_ret.*; }  // 13

set_radius :: (main: *CapsuleMesh, radius: float) { sys_call("CapsuleMesh", "set_radius", 373806689, Nil, main.p_object, radius);  }  // 0
get_radius :: (main: *CapsuleMesh) -> float { call_ret := cast(*float) sys_call("CapsuleMesh", "get_radius", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_height :: (main: *CapsuleMesh, height: float) { sys_call("CapsuleMesh", "set_height", 373806689, Nil, main.p_object, height);  }  // 2
get_height :: (main: *CapsuleMesh) -> float { call_ret := cast(*float) sys_call("CapsuleMesh", "get_height", 1740695150, float, main.p_object); return call_ret.*; }  // 3
set_radial_segments :: (main: *CapsuleMesh, segments: int) { sys_call("CapsuleMesh", "set_radial_segments", 1286410249, Nil, main.p_object, segments);  }  // 4
get_radial_segments :: (main: *CapsuleMesh) -> int { call_ret := cast(*int) sys_call("CapsuleMesh", "get_radial_segments", 3905245786, int, main.p_object); return call_ret.*; }  // 5
set_rings :: (main: *CapsuleMesh, rings: int) { sys_call("CapsuleMesh", "set_rings", 1286410249, Nil, main.p_object, rings);  }  // 6
get_rings :: (main: *CapsuleMesh) -> int { call_ret := cast(*int) sys_call("CapsuleMesh", "get_rings", 3905245786, int, main.p_object); return call_ret.*; }  // 7

set_radius :: (main: *CapsuleShape2D, radius: float) { sys_call("CapsuleShape2D", "set_radius", 373806689, Nil, main.p_object, radius);  }  // 0
get_radius :: (main: *CapsuleShape2D) -> float { call_ret := cast(*float) sys_call("CapsuleShape2D", "get_radius", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_height :: (main: *CapsuleShape2D, height: float) { sys_call("CapsuleShape2D", "set_height", 373806689, Nil, main.p_object, height);  }  // 2
get_height :: (main: *CapsuleShape2D) -> float { call_ret := cast(*float) sys_call("CapsuleShape2D", "get_height", 1740695150, float, main.p_object); return call_ret.*; }  // 3

set_radius :: (main: *CapsuleShape3D, radius: float) { sys_call("CapsuleShape3D", "set_radius", 373806689, Nil, main.p_object, radius);  }  // 0
get_radius :: (main: *CapsuleShape3D) -> float { call_ret := cast(*float) sys_call("CapsuleShape3D", "get_radius", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_height :: (main: *CapsuleShape3D, height: float) { sys_call("CapsuleShape3D", "set_height", 373806689, Nil, main.p_object, height);  }  // 2
get_height :: (main: *CapsuleShape3D) -> float { call_ret := cast(*float) sys_call("CapsuleShape3D", "get_height", 1740695150, float, main.p_object); return call_ret.*; }  // 3

set_use_top_left :: (main: *CenterContainer, enable: bool) { sys_call("CenterContainer", "set_use_top_left", 2586408642, Nil, main.p_object, enable);  }  // 0
is_using_top_left :: (main: *CenterContainer) -> bool { call_ret := cast(*bool) sys_call("CenterContainer", "is_using_top_left", 36873697, bool, main.p_object); return call_ret.*; }  // 1

get_transform :: (main: *CharFXTransform) -> Transform2D { call_ret := cast(*Transform2D) sys_call("CharFXTransform", "get_transform", 3761352769, Transform2D, main.p_object); return call_ret.*; }  // 0
set_transform :: (main: *CharFXTransform, transform: Transform2D) { sys_call("CharFXTransform", "set_transform", 2761652528, Nil, main.p_object, transform);  }  // 1
get_range :: (main: *CharFXTransform) -> Vector2i { call_ret := cast(*Vector2i) sys_call("CharFXTransform", "get_range", 2741790807, Vector2i, main.p_object); return call_ret.*; }  // 2
set_range :: (main: *CharFXTransform, range: Vector2i) { sys_call("CharFXTransform", "set_range", 1130785943, Nil, main.p_object, range);  }  // 3
get_elapsed_time :: (main: *CharFXTransform) -> float { call_ret := cast(*float) sys_call("CharFXTransform", "get_elapsed_time", 191475506, float, main.p_object); return call_ret.*; }  // 4
set_elapsed_time :: (main: *CharFXTransform, time: float) { sys_call("CharFXTransform", "set_elapsed_time", 373806689, Nil, main.p_object, time);  }  // 5
is_visible :: (main: *CharFXTransform) -> bool { call_ret := cast(*bool) sys_call("CharFXTransform", "is_visible", 2240911060, bool, main.p_object); return call_ret.*; }  // 6
set_visibility :: (main: *CharFXTransform, visibility: bool) { sys_call("CharFXTransform", "set_visibility", 2586408642, Nil, main.p_object, visibility);  }  // 7
is_outline :: (main: *CharFXTransform) -> bool { call_ret := cast(*bool) sys_call("CharFXTransform", "is_outline", 2240911060, bool, main.p_object); return call_ret.*; }  // 8
set_outline :: (main: *CharFXTransform, outline: bool) { sys_call("CharFXTransform", "set_outline", 2586408642, Nil, main.p_object, outline);  }  // 9
get_offset :: (main: *CharFXTransform) -> Vector2 { call_ret := cast(*Vector2) sys_call("CharFXTransform", "get_offset", 1497962370, Vector2, main.p_object); return call_ret.*; }  // 10
set_offset :: (main: *CharFXTransform, offset: Vector2) { sys_call("CharFXTransform", "set_offset", 743155724, Nil, main.p_object, offset);  }  // 11
get_color :: (main: *CharFXTransform) -> Color { call_ret := cast(*Color) sys_call("CharFXTransform", "get_color", 3200896285, Color, main.p_object); return call_ret.*; }  // 12
set_color :: (main: *CharFXTransform, color: Color) { sys_call("CharFXTransform", "set_color", 2920490490, Nil, main.p_object, color);  }  // 13
get_environment :: (main: *CharFXTransform) -> Dictionary { call_ret := cast(*Dictionary) sys_call("CharFXTransform", "get_environment", 2382534195, Dictionary, main.p_object); return call_ret.*; }  // 14
set_environment :: (main: *CharFXTransform, environment: Dictionary) { sys_call("CharFXTransform", "set_environment", 4155329257, Nil, main.p_object, environment);  }  // 15
get_glyph_index :: (main: *CharFXTransform) -> int { call_ret := cast(*int) sys_call("CharFXTransform", "get_glyph_index", 3905245786, int, main.p_object); return call_ret.*; }  // 16
set_glyph_index :: (main: *CharFXTransform, glyph_index: int) { sys_call("CharFXTransform", "set_glyph_index", 1286410249, Nil, main.p_object, glyph_index);  }  // 17
get_relative_index :: (main: *CharFXTransform) -> int { call_ret := cast(*int) sys_call("CharFXTransform", "get_relative_index", 3905245786, int, main.p_object); return call_ret.*; }  // 18
set_relative_index :: (main: *CharFXTransform, relative_index: int) { sys_call("CharFXTransform", "set_relative_index", 1286410249, Nil, main.p_object, relative_index);  }  // 19
get_glyph_count :: (main: *CharFXTransform) -> int { call_ret := cast(*int) sys_call("CharFXTransform", "get_glyph_count", 3905245786, int, main.p_object); return call_ret.*; }  // 20
set_glyph_count :: (main: *CharFXTransform, glyph_count: int) { sys_call("CharFXTransform", "set_glyph_count", 1286410249, Nil, main.p_object, glyph_count);  }  // 21
get_glyph_flags :: (main: *CharFXTransform) -> int { call_ret := cast(*int) sys_call("CharFXTransform", "get_glyph_flags", 3905245786, int, main.p_object); return call_ret.*; }  // 22
set_glyph_flags :: (main: *CharFXTransform, glyph_flags: int) { sys_call("CharFXTransform", "set_glyph_flags", 1286410249, Nil, main.p_object, glyph_flags);  }  // 23
get_font :: (main: *CharFXTransform) -> RID { call_ret := cast(*RID) sys_call("CharFXTransform", "get_font", 2944877500, RID, main.p_object); return call_ret.*; }  // 24
set_font :: (main: *CharFXTransform, font: RID) { sys_call("CharFXTransform", "set_font", 2722037293, Nil, main.p_object, font);  }  // 25

move_and_slide :: (main: *CharacterBody2D) -> bool { call_ret := cast(*bool) sys_call("CharacterBody2D", "move_and_slide", 2240911060, bool, main.p_object); return call_ret.*; }  // 0
apply_floor_snap :: (main: *CharacterBody2D) { sys_call("CharacterBody2D", "apply_floor_snap", 3218959716, Nil, main.p_object);  }  // 1
set_velocity :: (main: *CharacterBody2D, velocity: Vector2) { sys_call("CharacterBody2D", "set_velocity", 743155724, Nil, main.p_object, velocity);  }  // 2
get_velocity :: (main: *CharacterBody2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("CharacterBody2D", "get_velocity", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 3
set_safe_margin :: (main: *CharacterBody2D, margin: float) { sys_call("CharacterBody2D", "set_safe_margin", 373806689, Nil, main.p_object, margin);  }  // 4
get_safe_margin :: (main: *CharacterBody2D) -> float { call_ret := cast(*float) sys_call("CharacterBody2D", "get_safe_margin", 1740695150, float, main.p_object); return call_ret.*; }  // 5
is_floor_stop_on_slope_enabled :: (main: *CharacterBody2D) -> bool { call_ret := cast(*bool) sys_call("CharacterBody2D", "is_floor_stop_on_slope_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 6
set_floor_stop_on_slope_enabled :: (main: *CharacterBody2D, enabled: bool) { sys_call("CharacterBody2D", "set_floor_stop_on_slope_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 7
set_floor_constant_speed_enabled :: (main: *CharacterBody2D, enabled: bool) { sys_call("CharacterBody2D", "set_floor_constant_speed_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 8
is_floor_constant_speed_enabled :: (main: *CharacterBody2D) -> bool { call_ret := cast(*bool) sys_call("CharacterBody2D", "is_floor_constant_speed_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 9
set_floor_block_on_wall_enabled :: (main: *CharacterBody2D, enabled: bool) { sys_call("CharacterBody2D", "set_floor_block_on_wall_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 10
is_floor_block_on_wall_enabled :: (main: *CharacterBody2D) -> bool { call_ret := cast(*bool) sys_call("CharacterBody2D", "is_floor_block_on_wall_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 11
set_slide_on_ceiling_enabled :: (main: *CharacterBody2D, enabled: bool) { sys_call("CharacterBody2D", "set_slide_on_ceiling_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 12
is_slide_on_ceiling_enabled :: (main: *CharacterBody2D) -> bool { call_ret := cast(*bool) sys_call("CharacterBody2D", "is_slide_on_ceiling_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 13
set_platform_floor_layers :: (main: *CharacterBody2D, exclude_layer: int) { sys_call("CharacterBody2D", "set_platform_floor_layers", 1286410249, Nil, main.p_object, exclude_layer);  }  // 14
get_platform_floor_layers :: (main: *CharacterBody2D) -> int { call_ret := cast(*int) sys_call("CharacterBody2D", "get_platform_floor_layers", 3905245786, int, main.p_object); return call_ret.*; }  // 15
set_platform_wall_layers :: (main: *CharacterBody2D, exclude_layer: int) { sys_call("CharacterBody2D", "set_platform_wall_layers", 1286410249, Nil, main.p_object, exclude_layer);  }  // 16
get_platform_wall_layers :: (main: *CharacterBody2D) -> int { call_ret := cast(*int) sys_call("CharacterBody2D", "get_platform_wall_layers", 3905245786, int, main.p_object); return call_ret.*; }  // 17
get_max_slides :: (main: *CharacterBody2D) -> int { call_ret := cast(*int) sys_call("CharacterBody2D", "get_max_slides", 3905245786, int, main.p_object); return call_ret.*; }  // 18
set_max_slides :: (main: *CharacterBody2D, max_slides: int) { sys_call("CharacterBody2D", "set_max_slides", 1286410249, Nil, main.p_object, max_slides);  }  // 19
get_floor_max_angle :: (main: *CharacterBody2D) -> float { call_ret := cast(*float) sys_call("CharacterBody2D", "get_floor_max_angle", 1740695150, float, main.p_object); return call_ret.*; }  // 20
set_floor_max_angle :: (main: *CharacterBody2D, radians: float) { sys_call("CharacterBody2D", "set_floor_max_angle", 373806689, Nil, main.p_object, radians);  }  // 21
get_floor_snap_length :: (main: *CharacterBody2D) -> float { call_ret := cast(*float) sys_call("CharacterBody2D", "get_floor_snap_length", 191475506, float, main.p_object); return call_ret.*; }  // 22
set_floor_snap_length :: (main: *CharacterBody2D, floor_snap_length: float) { sys_call("CharacterBody2D", "set_floor_snap_length", 373806689, Nil, main.p_object, floor_snap_length);  }  // 23
get_wall_min_slide_angle :: (main: *CharacterBody2D) -> float { call_ret := cast(*float) sys_call("CharacterBody2D", "get_wall_min_slide_angle", 1740695150, float, main.p_object); return call_ret.*; }  // 24
set_wall_min_slide_angle :: (main: *CharacterBody2D, radians: float) { sys_call("CharacterBody2D", "set_wall_min_slide_angle", 373806689, Nil, main.p_object, radians);  }  // 25
get_up_direction :: (main: *CharacterBody2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("CharacterBody2D", "get_up_direction", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 26
set_up_direction :: (main: *CharacterBody2D, up_direction: Vector2) { sys_call("CharacterBody2D", "set_up_direction", 743155724, Nil, main.p_object, up_direction);  }  // 27
set_motion_mode :: (main: *CharacterBody2D, mode: CharacterBody2D.MotionMode) { sys_call("CharacterBody2D", "set_motion_mode", 1224392233, Nil, main.p_object, mode);  }  // 28
get_motion_mode :: (main: *CharacterBody2D) -> CharacterBody2D.MotionMode { call_ret := cast(*CharacterBody2D.MotionMode) sys_call("CharacterBody2D", "get_motion_mode", 1160151236, CharacterBody2D.MotionMode, main.p_object); return call_ret.*; }  // 29
set_platform_on_leave :: (main: *CharacterBody2D, on_leave_apply_velocity: CharacterBody2D.PlatformOnLeave) { sys_call("CharacterBody2D", "set_platform_on_leave", 2423324375, Nil, main.p_object, on_leave_apply_velocity);  }  // 30
get_platform_on_leave :: (main: *CharacterBody2D) -> CharacterBody2D.PlatformOnLeave { call_ret := cast(*CharacterBody2D.PlatformOnLeave) sys_call("CharacterBody2D", "get_platform_on_leave", 4054324341, CharacterBody2D.PlatformOnLeave, main.p_object); return call_ret.*; }  // 31
is_on_floor :: (main: *CharacterBody2D) -> bool { call_ret := cast(*bool) sys_call("CharacterBody2D", "is_on_floor", 36873697, bool, main.p_object); return call_ret.*; }  // 32
is_on_floor_only :: (main: *CharacterBody2D) -> bool { call_ret := cast(*bool) sys_call("CharacterBody2D", "is_on_floor_only", 36873697, bool, main.p_object); return call_ret.*; }  // 33
is_on_ceiling :: (main: *CharacterBody2D) -> bool { call_ret := cast(*bool) sys_call("CharacterBody2D", "is_on_ceiling", 36873697, bool, main.p_object); return call_ret.*; }  // 34
is_on_ceiling_only :: (main: *CharacterBody2D) -> bool { call_ret := cast(*bool) sys_call("CharacterBody2D", "is_on_ceiling_only", 36873697, bool, main.p_object); return call_ret.*; }  // 35
is_on_wall :: (main: *CharacterBody2D) -> bool { call_ret := cast(*bool) sys_call("CharacterBody2D", "is_on_wall", 36873697, bool, main.p_object); return call_ret.*; }  // 36
is_on_wall_only :: (main: *CharacterBody2D) -> bool { call_ret := cast(*bool) sys_call("CharacterBody2D", "is_on_wall_only", 36873697, bool, main.p_object); return call_ret.*; }  // 37
get_floor_normal :: (main: *CharacterBody2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("CharacterBody2D", "get_floor_normal", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 38
get_wall_normal :: (main: *CharacterBody2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("CharacterBody2D", "get_wall_normal", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 39
get_last_motion :: (main: *CharacterBody2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("CharacterBody2D", "get_last_motion", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 40
get_position_delta :: (main: *CharacterBody2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("CharacterBody2D", "get_position_delta", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 41
get_real_velocity :: (main: *CharacterBody2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("CharacterBody2D", "get_real_velocity", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 42
get_floor_angle :: (main: *CharacterBody2D) -> float { call_ret := cast(*float) sys_call("CharacterBody2D", "get_floor_angle", 2841063350, float, main.p_object); return call_ret.*; }  // 43
get_platform_velocity :: (main: *CharacterBody2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("CharacterBody2D", "get_platform_velocity", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 44
get_slide_collision_count :: (main: *CharacterBody2D) -> int { call_ret := cast(*int) sys_call("CharacterBody2D", "get_slide_collision_count", 3905245786, int, main.p_object); return call_ret.*; }  // 45
get_slide_collision :: (main: *CharacterBody2D, slide_idx: int) -> *KinematicCollision2D { call_ret := cast(*KinematicCollision2D) sys_call("CharacterBody2D", "get_slide_collision", 860659811, KinematicCollision2D, main.p_object, slide_idx); return call_ret; }  // 46
get_last_slide_collision :: (main: *CharacterBody2D) -> *KinematicCollision2D { call_ret := cast(*KinematicCollision2D) sys_call("CharacterBody2D", "get_last_slide_collision", 2161834755, KinematicCollision2D, main.p_object); return call_ret; }  // 47

move_and_slide :: (main: *CharacterBody3D) -> bool { call_ret := cast(*bool) sys_call("CharacterBody3D", "move_and_slide", 2240911060, bool, main.p_object); return call_ret.*; }  // 0
apply_floor_snap :: (main: *CharacterBody3D) { sys_call("CharacterBody3D", "apply_floor_snap", 3218959716, Nil, main.p_object);  }  // 1
set_velocity :: (main: *CharacterBody3D, velocity: Vector3) { sys_call("CharacterBody3D", "set_velocity", 3460891852, Nil, main.p_object, velocity);  }  // 2
get_velocity :: (main: *CharacterBody3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("CharacterBody3D", "get_velocity", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 3
set_safe_margin :: (main: *CharacterBody3D, margin: float) { sys_call("CharacterBody3D", "set_safe_margin", 373806689, Nil, main.p_object, margin);  }  // 4
get_safe_margin :: (main: *CharacterBody3D) -> float { call_ret := cast(*float) sys_call("CharacterBody3D", "get_safe_margin", 1740695150, float, main.p_object); return call_ret.*; }  // 5
is_floor_stop_on_slope_enabled :: (main: *CharacterBody3D) -> bool { call_ret := cast(*bool) sys_call("CharacterBody3D", "is_floor_stop_on_slope_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 6
set_floor_stop_on_slope_enabled :: (main: *CharacterBody3D, enabled: bool) { sys_call("CharacterBody3D", "set_floor_stop_on_slope_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 7
set_floor_constant_speed_enabled :: (main: *CharacterBody3D, enabled: bool) { sys_call("CharacterBody3D", "set_floor_constant_speed_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 8
is_floor_constant_speed_enabled :: (main: *CharacterBody3D) -> bool { call_ret := cast(*bool) sys_call("CharacterBody3D", "is_floor_constant_speed_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 9
set_floor_block_on_wall_enabled :: (main: *CharacterBody3D, enabled: bool) { sys_call("CharacterBody3D", "set_floor_block_on_wall_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 10
is_floor_block_on_wall_enabled :: (main: *CharacterBody3D) -> bool { call_ret := cast(*bool) sys_call("CharacterBody3D", "is_floor_block_on_wall_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 11
set_slide_on_ceiling_enabled :: (main: *CharacterBody3D, enabled: bool) { sys_call("CharacterBody3D", "set_slide_on_ceiling_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 12
is_slide_on_ceiling_enabled :: (main: *CharacterBody3D) -> bool { call_ret := cast(*bool) sys_call("CharacterBody3D", "is_slide_on_ceiling_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 13
set_platform_floor_layers :: (main: *CharacterBody3D, exclude_layer: int) { sys_call("CharacterBody3D", "set_platform_floor_layers", 1286410249, Nil, main.p_object, exclude_layer);  }  // 14
get_platform_floor_layers :: (main: *CharacterBody3D) -> int { call_ret := cast(*int) sys_call("CharacterBody3D", "get_platform_floor_layers", 3905245786, int, main.p_object); return call_ret.*; }  // 15
set_platform_wall_layers :: (main: *CharacterBody3D, exclude_layer: int) { sys_call("CharacterBody3D", "set_platform_wall_layers", 1286410249, Nil, main.p_object, exclude_layer);  }  // 16
get_platform_wall_layers :: (main: *CharacterBody3D) -> int { call_ret := cast(*int) sys_call("CharacterBody3D", "get_platform_wall_layers", 3905245786, int, main.p_object); return call_ret.*; }  // 17
get_max_slides :: (main: *CharacterBody3D) -> int { call_ret := cast(*int) sys_call("CharacterBody3D", "get_max_slides", 3905245786, int, main.p_object); return call_ret.*; }  // 18
set_max_slides :: (main: *CharacterBody3D, max_slides: int) { sys_call("CharacterBody3D", "set_max_slides", 1286410249, Nil, main.p_object, max_slides);  }  // 19
get_floor_max_angle :: (main: *CharacterBody3D) -> float { call_ret := cast(*float) sys_call("CharacterBody3D", "get_floor_max_angle", 1740695150, float, main.p_object); return call_ret.*; }  // 20
set_floor_max_angle :: (main: *CharacterBody3D, radians: float) { sys_call("CharacterBody3D", "set_floor_max_angle", 373806689, Nil, main.p_object, radians);  }  // 21
get_floor_snap_length :: (main: *CharacterBody3D) -> float { call_ret := cast(*float) sys_call("CharacterBody3D", "get_floor_snap_length", 191475506, float, main.p_object); return call_ret.*; }  // 22
set_floor_snap_length :: (main: *CharacterBody3D, floor_snap_length: float) { sys_call("CharacterBody3D", "set_floor_snap_length", 373806689, Nil, main.p_object, floor_snap_length);  }  // 23
get_wall_min_slide_angle :: (main: *CharacterBody3D) -> float { call_ret := cast(*float) sys_call("CharacterBody3D", "get_wall_min_slide_angle", 1740695150, float, main.p_object); return call_ret.*; }  // 24
set_wall_min_slide_angle :: (main: *CharacterBody3D, radians: float) { sys_call("CharacterBody3D", "set_wall_min_slide_angle", 373806689, Nil, main.p_object, radians);  }  // 25
get_up_direction :: (main: *CharacterBody3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("CharacterBody3D", "get_up_direction", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 26
set_up_direction :: (main: *CharacterBody3D, up_direction: Vector3) { sys_call("CharacterBody3D", "set_up_direction", 3460891852, Nil, main.p_object, up_direction);  }  // 27
set_motion_mode :: (main: *CharacterBody3D, mode: CharacterBody3D.MotionMode) { sys_call("CharacterBody3D", "set_motion_mode", 2690739026, Nil, main.p_object, mode);  }  // 28
get_motion_mode :: (main: *CharacterBody3D) -> CharacterBody3D.MotionMode { call_ret := cast(*CharacterBody3D.MotionMode) sys_call("CharacterBody3D", "get_motion_mode", 3529553604, CharacterBody3D.MotionMode, main.p_object); return call_ret.*; }  // 29
set_platform_on_leave :: (main: *CharacterBody3D, on_leave_apply_velocity: CharacterBody3D.PlatformOnLeave) { sys_call("CharacterBody3D", "set_platform_on_leave", 1459986142, Nil, main.p_object, on_leave_apply_velocity);  }  // 30
get_platform_on_leave :: (main: *CharacterBody3D) -> CharacterBody3D.PlatformOnLeave { call_ret := cast(*CharacterBody3D.PlatformOnLeave) sys_call("CharacterBody3D", "get_platform_on_leave", 996491171, CharacterBody3D.PlatformOnLeave, main.p_object); return call_ret.*; }  // 31
is_on_floor :: (main: *CharacterBody3D) -> bool { call_ret := cast(*bool) sys_call("CharacterBody3D", "is_on_floor", 36873697, bool, main.p_object); return call_ret.*; }  // 32
is_on_floor_only :: (main: *CharacterBody3D) -> bool { call_ret := cast(*bool) sys_call("CharacterBody3D", "is_on_floor_only", 36873697, bool, main.p_object); return call_ret.*; }  // 33
is_on_ceiling :: (main: *CharacterBody3D) -> bool { call_ret := cast(*bool) sys_call("CharacterBody3D", "is_on_ceiling", 36873697, bool, main.p_object); return call_ret.*; }  // 34
is_on_ceiling_only :: (main: *CharacterBody3D) -> bool { call_ret := cast(*bool) sys_call("CharacterBody3D", "is_on_ceiling_only", 36873697, bool, main.p_object); return call_ret.*; }  // 35
is_on_wall :: (main: *CharacterBody3D) -> bool { call_ret := cast(*bool) sys_call("CharacterBody3D", "is_on_wall", 36873697, bool, main.p_object); return call_ret.*; }  // 36
is_on_wall_only :: (main: *CharacterBody3D) -> bool { call_ret := cast(*bool) sys_call("CharacterBody3D", "is_on_wall_only", 36873697, bool, main.p_object); return call_ret.*; }  // 37
get_floor_normal :: (main: *CharacterBody3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("CharacterBody3D", "get_floor_normal", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 38
get_wall_normal :: (main: *CharacterBody3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("CharacterBody3D", "get_wall_normal", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 39
get_last_motion :: (main: *CharacterBody3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("CharacterBody3D", "get_last_motion", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 40
get_position_delta :: (main: *CharacterBody3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("CharacterBody3D", "get_position_delta", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 41
get_real_velocity :: (main: *CharacterBody3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("CharacterBody3D", "get_real_velocity", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 42
get_floor_angle :: (main: *CharacterBody3D) -> float { call_ret := cast(*float) sys_call("CharacterBody3D", "get_floor_angle", 2906300789, float, main.p_object); return call_ret.*; }  // 43
get_platform_velocity :: (main: *CharacterBody3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("CharacterBody3D", "get_platform_velocity", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 44
get_platform_angular_velocity :: (main: *CharacterBody3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("CharacterBody3D", "get_platform_angular_velocity", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 45
get_slide_collision_count :: (main: *CharacterBody3D) -> int { call_ret := cast(*int) sys_call("CharacterBody3D", "get_slide_collision_count", 3905245786, int, main.p_object); return call_ret.*; }  // 46
get_slide_collision :: (main: *CharacterBody3D, slide_idx: int) -> *KinematicCollision3D { call_ret := cast(*KinematicCollision3D) sys_call("CharacterBody3D", "get_slide_collision", 107003663, KinematicCollision3D, main.p_object, slide_idx); return call_ret; }  // 47
get_last_slide_collision :: (main: *CharacterBody3D) -> *KinematicCollision3D { call_ret := cast(*KinematicCollision3D) sys_call("CharacterBody3D", "get_last_slide_collision", 186875014, KinematicCollision3D, main.p_object); return call_ret; }  // 48



set_radius :: (main: *CircleShape2D, radius: float) { sys_call("CircleShape2D", "set_radius", 373806689, Nil, main.p_object, radius);  }  // 0
get_radius :: (main: *CircleShape2D) -> float { call_ret := cast(*float) sys_call("CircleShape2D", "get_radius", 1740695150, float, main.p_object); return call_ret.*; }  // 1

get_class_list :: (main: *ClassDB) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("ClassDB", "get_class_list", 1139954409, PackedStringArray, main.p_object); return call_ret.*; }  // 0
get_inheriters_from_class :: (main: *ClassDB, class: string) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("ClassDB", "get_inheriters_from_class", 1761182771, PackedStringArray, main.p_object, class); return call_ret.*; }  // 1
get_parent_class :: (main: *ClassDB, class: string) -> StringName { call_ret := cast(*StringName) sys_call("ClassDB", "get_parent_class", 1965194235, StringName, main.p_object, class); return call_ret.*; }  // 2
class_exists :: (main: *ClassDB, class: string) -> bool { call_ret := cast(*bool) sys_call("ClassDB", "class_exists", 2619796661, bool, main.p_object, class); return call_ret.*; }  // 3
is_parent_class :: (main: *ClassDB, class: string, inherits: string) -> bool { call_ret := cast(*bool) sys_call("ClassDB", "is_parent_class", 471820014, bool, main.p_object, class, inherits); return call_ret.*; }  // 4
can_instantiate :: (main: *ClassDB, class: string) -> bool { call_ret := cast(*bool) sys_call("ClassDB", "can_instantiate", 2619796661, bool, main.p_object, class); return call_ret.*; }  // 5
instantiate :: (main: *ClassDB, class: string) -> Variant { call_ret := cast(*Variant) sys_call("ClassDB", "instantiate", 2760726917, Variant, main.p_object, class); return call_ret.*; }  // 6
class_get_api_type :: (main: *ClassDB, class: string) -> ClassDB.APIType { call_ret := cast(*ClassDB.APIType) sys_call("ClassDB", "class_get_api_type", 2475317043, ClassDB.APIType, main.p_object, class); return call_ret.*; }  // 7
class_has_signal :: (main: *ClassDB, class: string, signal: string) -> bool { call_ret := cast(*bool) sys_call("ClassDB", "class_has_signal", 471820014, bool, main.p_object, class, signal); return call_ret.*; }  // 8
class_get_signal :: (main: *ClassDB, class: string, signal: string) -> Dictionary { call_ret := cast(*Dictionary) sys_call("ClassDB", "class_get_signal", 3061114238, Dictionary, main.p_object, class, signal); return call_ret.*; }  // 9
class_get_signal_list :: (main: *ClassDB, class: string) -> [] Dictionary { call_ret := cast(*[] Dictionary) sys_call("ClassDB", "class_get_signal_list", 3504980660, [] Dictionary, main.p_object, class); return call_ret.*; }  // 10
class_get_property_list :: (main: *ClassDB, class: string) -> [] Dictionary { call_ret := cast(*[] Dictionary) sys_call("ClassDB", "class_get_property_list", 3504980660, [] Dictionary, main.p_object, class); return call_ret.*; }  // 11
class_get_property_getter :: (main: *ClassDB, class: string, property: string) -> StringName { call_ret := cast(*StringName) sys_call("ClassDB", "class_get_property_getter", 3770832642, StringName, main.p_object, class, property); return call_ret.*; }  // 12
class_get_property_setter :: (main: *ClassDB, class: string, property: string) -> StringName { call_ret := cast(*StringName) sys_call("ClassDB", "class_get_property_setter", 3770832642, StringName, main.p_object, class, property); return call_ret.*; }  // 13
class_get_property :: (main: *ClassDB, object: Object, property: string) -> Variant { call_ret := cast(*Variant) sys_call("ClassDB", "class_get_property", 2498641674, Variant, main.p_object, object, property); return call_ret.*; }  // 14
class_set_property :: (main: *ClassDB, object: Object, property: string, value: Variant) -> Error { call_ret := cast(*Error) sys_call("ClassDB", "class_set_property", 1690314931, Error, main.p_object, object, property, value); return call_ret.*; }  // 15
class_get_property_default_value :: (main: *ClassDB, class: string, property: string) -> Variant { call_ret := cast(*Variant) sys_call("ClassDB", "class_get_property_default_value", 2718203076, Variant, main.p_object, class, property); return call_ret.*; }  // 16
class_has_method :: (main: *ClassDB, class: string, method: string) -> bool { call_ret := cast(*bool) sys_call("ClassDB", "class_has_method", 3860701026, bool, main.p_object, class, method); return call_ret.*; }  // 17
class_get_method_argument_count :: (main: *ClassDB, class: string, method: string) -> int { call_ret := cast(*int) sys_call("ClassDB", "class_get_method_argument_count", 3885694822, int, main.p_object, class, method); return call_ret.*; }  // 18
class_get_method_list :: (main: *ClassDB, class: string) -> [] Dictionary { call_ret := cast(*[] Dictionary) sys_call("ClassDB", "class_get_method_list", 3504980660, [] Dictionary, main.p_object, class); return call_ret.*; }  // 19
class_call_static :: (main: *ClassDB, class: string, method: string) -> Variant { call_ret := cast(*Variant) sys_call("ClassDB", "class_call_static", 3344196419, Variant, main.p_object, class, method); return call_ret.*; }  // 20
class_get_integer_constant_list :: (main: *ClassDB, class: string) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("ClassDB", "class_get_integer_constant_list", 3031669221, PackedStringArray, main.p_object, class); return call_ret.*; }  // 21
class_has_integer_constant :: (main: *ClassDB, class: string, name: string) -> bool { call_ret := cast(*bool) sys_call("ClassDB", "class_has_integer_constant", 471820014, bool, main.p_object, class, name); return call_ret.*; }  // 22
class_get_integer_constant :: (main: *ClassDB, class: string, name: string) -> int { call_ret := cast(*int) sys_call("ClassDB", "class_get_integer_constant", 2419549490, int, main.p_object, class, name); return call_ret.*; }  // 23
class_has_enum :: (main: *ClassDB, class: string, name: string) -> bool { call_ret := cast(*bool) sys_call("ClassDB", "class_has_enum", 3860701026, bool, main.p_object, class, name); return call_ret.*; }  // 24
class_get_enum_list :: (main: *ClassDB, class: string) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("ClassDB", "class_get_enum_list", 3031669221, PackedStringArray, main.p_object, class); return call_ret.*; }  // 25
class_get_enum_constants :: (main: *ClassDB, class: string, _enum: string) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("ClassDB", "class_get_enum_constants", 661528303, PackedStringArray, main.p_object, class, _enum); return call_ret.*; }  // 26
class_get_integer_constant_enum :: (main: *ClassDB, class: string, name: string) -> StringName { call_ret := cast(*StringName) sys_call("ClassDB", "class_get_integer_constant_enum", 2457504236, StringName, main.p_object, class, name); return call_ret.*; }  // 27
is_class_enum_bitfield :: (main: *ClassDB, class: string, _enum: string) -> bool { call_ret := cast(*bool) sys_call("ClassDB", "is_class_enum_bitfield", 3860701026, bool, main.p_object, class, _enum); return call_ret.*; }  // 28
is_class_enabled :: (main: *ClassDB, class: string) -> bool { call_ret := cast(*bool) sys_call("ClassDB", "is_class_enabled", 2619796661, bool, main.p_object, class); return call_ret.*; }  // 29

set_indent_size :: (main: *CodeEdit, size: int) { sys_call("CodeEdit", "set_indent_size", 1286410249, Nil, main.p_object, size);  }  // 3
get_indent_size :: (main: *CodeEdit) -> int { call_ret := cast(*int) sys_call("CodeEdit", "get_indent_size", 3905245786, int, main.p_object); return call_ret.*; }  // 4
set_indent_using_spaces :: (main: *CodeEdit, use_spaces: bool) { sys_call("CodeEdit", "set_indent_using_spaces", 2586408642, Nil, main.p_object, use_spaces);  }  // 5
is_indent_using_spaces :: (main: *CodeEdit) -> bool { call_ret := cast(*bool) sys_call("CodeEdit", "is_indent_using_spaces", 36873697, bool, main.p_object); return call_ret.*; }  // 6
set_auto_indent_enabled :: (main: *CodeEdit, enable: bool) { sys_call("CodeEdit", "set_auto_indent_enabled", 2586408642, Nil, main.p_object, enable);  }  // 7
is_auto_indent_enabled :: (main: *CodeEdit) -> bool { call_ret := cast(*bool) sys_call("CodeEdit", "is_auto_indent_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 8
set_auto_indent_prefixes :: (main: *CodeEdit, prefixes: [] string) { sys_call("CodeEdit", "set_auto_indent_prefixes", 381264803, Nil, main.p_object, prefixes);  }  // 9
get_auto_indent_prefixes :: (main: *CodeEdit) -> [] gstring { call_ret := cast(*[] gstring) sys_call("CodeEdit", "get_auto_indent_prefixes", 3995934104, [] gstring, main.p_object); return call_ret.*; }  // 10
do_indent :: (main: *CodeEdit) { sys_call("CodeEdit", "do_indent", 3218959716, Nil, main.p_object);  }  // 11
indent_lines :: (main: *CodeEdit) { sys_call("CodeEdit", "indent_lines", 3218959716, Nil, main.p_object);  }  // 12
unindent_lines :: (main: *CodeEdit) { sys_call("CodeEdit", "unindent_lines", 3218959716, Nil, main.p_object);  }  // 13
convert_indent :: (main: *CodeEdit) { sys_call("CodeEdit", "convert_indent", 423910286, Nil, main.p_object);  }  // 14
set_auto_brace_completion_enabled :: (main: *CodeEdit, enable: bool) { sys_call("CodeEdit", "set_auto_brace_completion_enabled", 2586408642, Nil, main.p_object, enable);  }  // 15
is_auto_brace_completion_enabled :: (main: *CodeEdit) -> bool { call_ret := cast(*bool) sys_call("CodeEdit", "is_auto_brace_completion_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 16
set_highlight_matching_braces_enabled :: (main: *CodeEdit, enable: bool) { sys_call("CodeEdit", "set_highlight_matching_braces_enabled", 2586408642, Nil, main.p_object, enable);  }  // 17
is_highlight_matching_braces_enabled :: (main: *CodeEdit) -> bool { call_ret := cast(*bool) sys_call("CodeEdit", "is_highlight_matching_braces_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 18
add_auto_brace_completion_pair :: (main: *CodeEdit, start_key: string, end_key: string) { sys_call("CodeEdit", "add_auto_brace_completion_pair", 3186203200, Nil, main.p_object, start_key, end_key);  }  // 19
set_auto_brace_completion_pairs :: (main: *CodeEdit, pairs: Dictionary) { sys_call("CodeEdit", "set_auto_brace_completion_pairs", 4155329257, Nil, main.p_object, pairs);  }  // 20
get_auto_brace_completion_pairs :: (main: *CodeEdit) -> Dictionary { call_ret := cast(*Dictionary) sys_call("CodeEdit", "get_auto_brace_completion_pairs", 3102165223, Dictionary, main.p_object); return call_ret.*; }  // 21
has_auto_brace_completion_open_key :: (main: *CodeEdit, open_key: string) -> bool { call_ret := cast(*bool) sys_call("CodeEdit", "has_auto_brace_completion_open_key", 3927539163, bool, main.p_object, open_key); return call_ret.*; }  // 22
has_auto_brace_completion_close_key :: (main: *CodeEdit, close_key: string) -> bool { call_ret := cast(*bool) sys_call("CodeEdit", "has_auto_brace_completion_close_key", 3927539163, bool, main.p_object, close_key); return call_ret.*; }  // 23
get_auto_brace_completion_close_key :: (main: *CodeEdit, open_key: string) -> gstring { call_ret := cast(*gstring) sys_call("CodeEdit", "get_auto_brace_completion_close_key", 3135753539, gstring, main.p_object, open_key); return call_ret.*; }  // 24
set_draw_breakpoints_gutter :: (main: *CodeEdit, enable: bool) { sys_call("CodeEdit", "set_draw_breakpoints_gutter", 2586408642, Nil, main.p_object, enable);  }  // 25
is_drawing_breakpoints_gutter :: (main: *CodeEdit) -> bool { call_ret := cast(*bool) sys_call("CodeEdit", "is_drawing_breakpoints_gutter", 36873697, bool, main.p_object); return call_ret.*; }  // 26
set_draw_bookmarks_gutter :: (main: *CodeEdit, enable: bool) { sys_call("CodeEdit", "set_draw_bookmarks_gutter", 2586408642, Nil, main.p_object, enable);  }  // 27
is_drawing_bookmarks_gutter :: (main: *CodeEdit) -> bool { call_ret := cast(*bool) sys_call("CodeEdit", "is_drawing_bookmarks_gutter", 36873697, bool, main.p_object); return call_ret.*; }  // 28
set_draw_executing_lines_gutter :: (main: *CodeEdit, enable: bool) { sys_call("CodeEdit", "set_draw_executing_lines_gutter", 2586408642, Nil, main.p_object, enable);  }  // 29
is_drawing_executing_lines_gutter :: (main: *CodeEdit) -> bool { call_ret := cast(*bool) sys_call("CodeEdit", "is_drawing_executing_lines_gutter", 36873697, bool, main.p_object); return call_ret.*; }  // 30
set_line_as_breakpoint :: (main: *CodeEdit, line: int, breakpointed: bool) { sys_call("CodeEdit", "set_line_as_breakpoint", 300928843, Nil, main.p_object, line, breakpointed);  }  // 31
is_line_breakpointed :: (main: *CodeEdit, line: int) -> bool { call_ret := cast(*bool) sys_call("CodeEdit", "is_line_breakpointed", 1116898809, bool, main.p_object, line); return call_ret.*; }  // 32
clear_breakpointed_lines :: (main: *CodeEdit) { sys_call("CodeEdit", "clear_breakpointed_lines", 3218959716, Nil, main.p_object);  }  // 33
get_breakpointed_lines :: (main: *CodeEdit) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("CodeEdit", "get_breakpointed_lines", 1930428628, PackedInt32Array, main.p_object); return call_ret.*; }  // 34
set_line_as_bookmarked :: (main: *CodeEdit, line: int, bookmarked: bool) { sys_call("CodeEdit", "set_line_as_bookmarked", 300928843, Nil, main.p_object, line, bookmarked);  }  // 35
is_line_bookmarked :: (main: *CodeEdit, line: int) -> bool { call_ret := cast(*bool) sys_call("CodeEdit", "is_line_bookmarked", 1116898809, bool, main.p_object, line); return call_ret.*; }  // 36
clear_bookmarked_lines :: (main: *CodeEdit) { sys_call("CodeEdit", "clear_bookmarked_lines", 3218959716, Nil, main.p_object);  }  // 37
get_bookmarked_lines :: (main: *CodeEdit) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("CodeEdit", "get_bookmarked_lines", 1930428628, PackedInt32Array, main.p_object); return call_ret.*; }  // 38
set_line_as_executing :: (main: *CodeEdit, line: int, executing: bool) { sys_call("CodeEdit", "set_line_as_executing", 300928843, Nil, main.p_object, line, executing);  }  // 39
is_line_executing :: (main: *CodeEdit, line: int) -> bool { call_ret := cast(*bool) sys_call("CodeEdit", "is_line_executing", 1116898809, bool, main.p_object, line); return call_ret.*; }  // 40
clear_executing_lines :: (main: *CodeEdit) { sys_call("CodeEdit", "clear_executing_lines", 3218959716, Nil, main.p_object);  }  // 41
get_executing_lines :: (main: *CodeEdit) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("CodeEdit", "get_executing_lines", 1930428628, PackedInt32Array, main.p_object); return call_ret.*; }  // 42
set_draw_line_numbers :: (main: *CodeEdit, enable: bool) { sys_call("CodeEdit", "set_draw_line_numbers", 2586408642, Nil, main.p_object, enable);  }  // 43
is_draw_line_numbers_enabled :: (main: *CodeEdit) -> bool { call_ret := cast(*bool) sys_call("CodeEdit", "is_draw_line_numbers_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 44
set_line_numbers_zero_padded :: (main: *CodeEdit, enable: bool) { sys_call("CodeEdit", "set_line_numbers_zero_padded", 2586408642, Nil, main.p_object, enable);  }  // 45
is_line_numbers_zero_padded :: (main: *CodeEdit) -> bool { call_ret := cast(*bool) sys_call("CodeEdit", "is_line_numbers_zero_padded", 36873697, bool, main.p_object); return call_ret.*; }  // 46
set_draw_fold_gutter :: (main: *CodeEdit, enable: bool) { sys_call("CodeEdit", "set_draw_fold_gutter", 2586408642, Nil, main.p_object, enable);  }  // 47
is_drawing_fold_gutter :: (main: *CodeEdit) -> bool { call_ret := cast(*bool) sys_call("CodeEdit", "is_drawing_fold_gutter", 36873697, bool, main.p_object); return call_ret.*; }  // 48
set_line_folding_enabled :: (main: *CodeEdit, enabled: bool) { sys_call("CodeEdit", "set_line_folding_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 49
is_line_folding_enabled :: (main: *CodeEdit) -> bool { call_ret := cast(*bool) sys_call("CodeEdit", "is_line_folding_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 50
can_fold_line :: (main: *CodeEdit, line: int) -> bool { call_ret := cast(*bool) sys_call("CodeEdit", "can_fold_line", 1116898809, bool, main.p_object, line); return call_ret.*; }  // 51
fold_line :: (main: *CodeEdit, line: int) { sys_call("CodeEdit", "fold_line", 1286410249, Nil, main.p_object, line);  }  // 52
unfold_line :: (main: *CodeEdit, line: int) { sys_call("CodeEdit", "unfold_line", 1286410249, Nil, main.p_object, line);  }  // 53
fold_all_lines :: (main: *CodeEdit) { sys_call("CodeEdit", "fold_all_lines", 3218959716, Nil, main.p_object);  }  // 54
unfold_all_lines :: (main: *CodeEdit) { sys_call("CodeEdit", "unfold_all_lines", 3218959716, Nil, main.p_object);  }  // 55
toggle_foldable_line :: (main: *CodeEdit, line: int) { sys_call("CodeEdit", "toggle_foldable_line", 1286410249, Nil, main.p_object, line);  }  // 56
toggle_foldable_lines_at_carets :: (main: *CodeEdit) { sys_call("CodeEdit", "toggle_foldable_lines_at_carets", 3218959716, Nil, main.p_object);  }  // 57
is_line_folded :: (main: *CodeEdit, line: int) -> bool { call_ret := cast(*bool) sys_call("CodeEdit", "is_line_folded", 1116898809, bool, main.p_object, line); return call_ret.*; }  // 58
get_folded_lines :: (main: *CodeEdit) -> [] int { call_ret := cast(*[] int) sys_call("CodeEdit", "get_folded_lines", 3995934104, [] int, main.p_object); return call_ret.*; }  // 59
create_code_region :: (main: *CodeEdit) { sys_call("CodeEdit", "create_code_region", 3218959716, Nil, main.p_object);  }  // 60
get_code_region_start_tag :: (main: *CodeEdit) -> gstring { call_ret := cast(*gstring) sys_call("CodeEdit", "get_code_region_start_tag", 201670096, gstring, main.p_object); return call_ret.*; }  // 61
get_code_region_end_tag :: (main: *CodeEdit) -> gstring { call_ret := cast(*gstring) sys_call("CodeEdit", "get_code_region_end_tag", 201670096, gstring, main.p_object); return call_ret.*; }  // 62
set_code_region_tags :: (main: *CodeEdit) { sys_call("CodeEdit", "set_code_region_tags", 708800718, Nil, main.p_object);  }  // 63
is_line_code_region_start :: (main: *CodeEdit, line: int) -> bool { call_ret := cast(*bool) sys_call("CodeEdit", "is_line_code_region_start", 1116898809, bool, main.p_object, line); return call_ret.*; }  // 64
is_line_code_region_end :: (main: *CodeEdit, line: int) -> bool { call_ret := cast(*bool) sys_call("CodeEdit", "is_line_code_region_end", 1116898809, bool, main.p_object, line); return call_ret.*; }  // 65
add_string_delimiter :: (main: *CodeEdit, start_key: string, end_key: string) { sys_call("CodeEdit", "add_string_delimiter", 3146098955, Nil, main.p_object, start_key, end_key);  }  // 66
remove_string_delimiter :: (main: *CodeEdit, start_key: string) { sys_call("CodeEdit", "remove_string_delimiter", 83702148, Nil, main.p_object, start_key);  }  // 67
has_string_delimiter :: (main: *CodeEdit, start_key: string) -> bool { call_ret := cast(*bool) sys_call("CodeEdit", "has_string_delimiter", 3927539163, bool, main.p_object, start_key); return call_ret.*; }  // 68
set_string_delimiters :: (main: *CodeEdit, string_delimiters: [] string) { sys_call("CodeEdit", "set_string_delimiters", 381264803, Nil, main.p_object, string_delimiters);  }  // 69
clear_string_delimiters :: (main: *CodeEdit) { sys_call("CodeEdit", "clear_string_delimiters", 3218959716, Nil, main.p_object);  }  // 70
get_string_delimiters :: (main: *CodeEdit) -> [] gstring { call_ret := cast(*[] gstring) sys_call("CodeEdit", "get_string_delimiters", 3995934104, [] gstring, main.p_object); return call_ret.*; }  // 71
is_in_string :: (main: *CodeEdit, line: int) -> int { call_ret := cast(*int) sys_call("CodeEdit", "is_in_string", 688195400, int, main.p_object, line); return call_ret.*; }  // 72
add_comment_delimiter :: (main: *CodeEdit, start_key: string, end_key: string) { sys_call("CodeEdit", "add_comment_delimiter", 3146098955, Nil, main.p_object, start_key, end_key);  }  // 73
remove_comment_delimiter :: (main: *CodeEdit, start_key: string) { sys_call("CodeEdit", "remove_comment_delimiter", 83702148, Nil, main.p_object, start_key);  }  // 74
has_comment_delimiter :: (main: *CodeEdit, start_key: string) -> bool { call_ret := cast(*bool) sys_call("CodeEdit", "has_comment_delimiter", 3927539163, bool, main.p_object, start_key); return call_ret.*; }  // 75
set_comment_delimiters :: (main: *CodeEdit, comment_delimiters: [] string) { sys_call("CodeEdit", "set_comment_delimiters", 381264803, Nil, main.p_object, comment_delimiters);  }  // 76
clear_comment_delimiters :: (main: *CodeEdit) { sys_call("CodeEdit", "clear_comment_delimiters", 3218959716, Nil, main.p_object);  }  // 77
get_comment_delimiters :: (main: *CodeEdit) -> [] gstring { call_ret := cast(*[] gstring) sys_call("CodeEdit", "get_comment_delimiters", 3995934104, [] gstring, main.p_object); return call_ret.*; }  // 78
is_in_comment :: (main: *CodeEdit, line: int) -> int { call_ret := cast(*int) sys_call("CodeEdit", "is_in_comment", 688195400, int, main.p_object, line); return call_ret.*; }  // 79
get_delimiter_start_key :: (main: *CodeEdit, delimiter_index: int) -> gstring { call_ret := cast(*gstring) sys_call("CodeEdit", "get_delimiter_start_key", 844755477, gstring, main.p_object, delimiter_index); return call_ret.*; }  // 80
get_delimiter_end_key :: (main: *CodeEdit, delimiter_index: int) -> gstring { call_ret := cast(*gstring) sys_call("CodeEdit", "get_delimiter_end_key", 844755477, gstring, main.p_object, delimiter_index); return call_ret.*; }  // 81
get_delimiter_start_position :: (main: *CodeEdit, line: int, column: int) -> Vector2 { call_ret := cast(*Vector2) sys_call("CodeEdit", "get_delimiter_start_position", 3016396712, Vector2, main.p_object, line, column); return call_ret.*; }  // 82
get_delimiter_end_position :: (main: *CodeEdit, line: int, column: int) -> Vector2 { call_ret := cast(*Vector2) sys_call("CodeEdit", "get_delimiter_end_position", 3016396712, Vector2, main.p_object, line, column); return call_ret.*; }  // 83
set_code_hint :: (main: *CodeEdit, code_hint: string) { sys_call("CodeEdit", "set_code_hint", 83702148, Nil, main.p_object, code_hint);  }  // 84
set_code_hint_draw_below :: (main: *CodeEdit, draw_below: bool) { sys_call("CodeEdit", "set_code_hint_draw_below", 2586408642, Nil, main.p_object, draw_below);  }  // 85
get_text_for_code_completion :: (main: *CodeEdit) -> gstring { call_ret := cast(*gstring) sys_call("CodeEdit", "get_text_for_code_completion", 201670096, gstring, main.p_object); return call_ret.*; }  // 86
request_code_completion :: (main: *CodeEdit) { sys_call("CodeEdit", "request_code_completion", 107499316, Nil, main.p_object);  }  // 87
add_code_completion_option :: (main: *CodeEdit, type: CodeEdit.CodeCompletionKind, display_text: string, insert_text: string) { sys_call("CodeEdit", "add_code_completion_option", 3944379502, Nil, main.p_object, type, display_text, insert_text);  }  // 88
update_code_completion_options :: (main: *CodeEdit, force: bool) { sys_call("CodeEdit", "update_code_completion_options", 2586408642, Nil, main.p_object, force);  }  // 89
get_code_completion_options :: (main: *CodeEdit) -> [] Dictionary { call_ret := cast(*[] Dictionary) sys_call("CodeEdit", "get_code_completion_options", 3995934104, [] Dictionary, main.p_object); return call_ret.*; }  // 90
get_code_completion_option :: (main: *CodeEdit, index: int) -> Dictionary { call_ret := cast(*Dictionary) sys_call("CodeEdit", "get_code_completion_option", 3485342025, Dictionary, main.p_object, index); return call_ret.*; }  // 91
get_code_completion_selected_index :: (main: *CodeEdit) -> int { call_ret := cast(*int) sys_call("CodeEdit", "get_code_completion_selected_index", 3905245786, int, main.p_object); return call_ret.*; }  // 92
set_code_completion_selected_index :: (main: *CodeEdit, index: int) { sys_call("CodeEdit", "set_code_completion_selected_index", 1286410249, Nil, main.p_object, index);  }  // 93
confirm_code_completion :: (main: *CodeEdit) { sys_call("CodeEdit", "confirm_code_completion", 107499316, Nil, main.p_object);  }  // 94
cancel_code_completion :: (main: *CodeEdit) { sys_call("CodeEdit", "cancel_code_completion", 3218959716, Nil, main.p_object);  }  // 95
set_code_completion_enabled :: (main: *CodeEdit, enable: bool) { sys_call("CodeEdit", "set_code_completion_enabled", 2586408642, Nil, main.p_object, enable);  }  // 96
is_code_completion_enabled :: (main: *CodeEdit) -> bool { call_ret := cast(*bool) sys_call("CodeEdit", "is_code_completion_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 97
set_code_completion_prefixes :: (main: *CodeEdit, prefixes: [] string) { sys_call("CodeEdit", "set_code_completion_prefixes", 381264803, Nil, main.p_object, prefixes);  }  // 98
get_code_completion_prefixes :: (main: *CodeEdit) -> [] gstring { call_ret := cast(*[] gstring) sys_call("CodeEdit", "get_code_completion_prefixes", 3995934104, [] gstring, main.p_object); return call_ret.*; }  // 99
set_line_length_guidelines :: (main: *CodeEdit, guideline_columns: [] int) { sys_call("CodeEdit", "set_line_length_guidelines", 381264803, Nil, main.p_object, guideline_columns);  }  // 100
get_line_length_guidelines :: (main: *CodeEdit) -> [] int { call_ret := cast(*[] int) sys_call("CodeEdit", "get_line_length_guidelines", 3995934104, [] int, main.p_object); return call_ret.*; }  // 101
set_symbol_lookup_on_click_enabled :: (main: *CodeEdit, enable: bool) { sys_call("CodeEdit", "set_symbol_lookup_on_click_enabled", 2586408642, Nil, main.p_object, enable);  }  // 102
is_symbol_lookup_on_click_enabled :: (main: *CodeEdit) -> bool { call_ret := cast(*bool) sys_call("CodeEdit", "is_symbol_lookup_on_click_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 103
get_text_for_symbol_lookup :: (main: *CodeEdit) -> gstring { call_ret := cast(*gstring) sys_call("CodeEdit", "get_text_for_symbol_lookup", 201670096, gstring, main.p_object); return call_ret.*; }  // 104
get_text_with_cursor_char :: (main: *CodeEdit, line: int, column: int) -> gstring { call_ret := cast(*gstring) sys_call("CodeEdit", "get_text_with_cursor_char", 1391810591, gstring, main.p_object, line, column); return call_ret.*; }  // 105
set_symbol_lookup_word_as_valid :: (main: *CodeEdit, valid: bool) { sys_call("CodeEdit", "set_symbol_lookup_word_as_valid", 2586408642, Nil, main.p_object, valid);  }  // 106
set_symbol_tooltip_on_hover_enabled :: (main: *CodeEdit, enable: bool) { sys_call("CodeEdit", "set_symbol_tooltip_on_hover_enabled", 2586408642, Nil, main.p_object, enable);  }  // 107
is_symbol_tooltip_on_hover_enabled :: (main: *CodeEdit) -> bool { call_ret := cast(*bool) sys_call("CodeEdit", "is_symbol_tooltip_on_hover_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 108
move_lines_up :: (main: *CodeEdit) { sys_call("CodeEdit", "move_lines_up", 3218959716, Nil, main.p_object);  }  // 109
move_lines_down :: (main: *CodeEdit) { sys_call("CodeEdit", "move_lines_down", 3218959716, Nil, main.p_object);  }  // 110
delete_lines :: (main: *CodeEdit) { sys_call("CodeEdit", "delete_lines", 3218959716, Nil, main.p_object);  }  // 111
duplicate_selection :: (main: *CodeEdit) { sys_call("CodeEdit", "duplicate_selection", 3218959716, Nil, main.p_object);  }  // 112
duplicate_lines :: (main: *CodeEdit) { sys_call("CodeEdit", "duplicate_lines", 3218959716, Nil, main.p_object);  }  // 113

add_keyword_color :: (main: *CodeHighlighter, keyword: string, color: Color) { sys_call("CodeHighlighter", "add_keyword_color", 1636512886, Nil, main.p_object, keyword, color);  }  // 0
remove_keyword_color :: (main: *CodeHighlighter, keyword: string) { sys_call("CodeHighlighter", "remove_keyword_color", 83702148, Nil, main.p_object, keyword);  }  // 1
has_keyword_color :: (main: *CodeHighlighter, keyword: string) -> bool { call_ret := cast(*bool) sys_call("CodeHighlighter", "has_keyword_color", 3927539163, bool, main.p_object, keyword); return call_ret.*; }  // 2
get_keyword_color :: (main: *CodeHighlighter, keyword: string) -> Color { call_ret := cast(*Color) sys_call("CodeHighlighter", "get_keyword_color", 3855908743, Color, main.p_object, keyword); return call_ret.*; }  // 3
set_keyword_colors :: (main: *CodeHighlighter, keywords: Dictionary) { sys_call("CodeHighlighter", "set_keyword_colors", 4155329257, Nil, main.p_object, keywords);  }  // 4
clear_keyword_colors :: (main: *CodeHighlighter) { sys_call("CodeHighlighter", "clear_keyword_colors", 3218959716, Nil, main.p_object);  }  // 5
get_keyword_colors :: (main: *CodeHighlighter) -> Dictionary { call_ret := cast(*Dictionary) sys_call("CodeHighlighter", "get_keyword_colors", 3102165223, Dictionary, main.p_object); return call_ret.*; }  // 6
add_member_keyword_color :: (main: *CodeHighlighter, member_keyword: string, color: Color) { sys_call("CodeHighlighter", "add_member_keyword_color", 1636512886, Nil, main.p_object, member_keyword, color);  }  // 7
remove_member_keyword_color :: (main: *CodeHighlighter, member_keyword: string) { sys_call("CodeHighlighter", "remove_member_keyword_color", 83702148, Nil, main.p_object, member_keyword);  }  // 8
has_member_keyword_color :: (main: *CodeHighlighter, member_keyword: string) -> bool { call_ret := cast(*bool) sys_call("CodeHighlighter", "has_member_keyword_color", 3927539163, bool, main.p_object, member_keyword); return call_ret.*; }  // 9
get_member_keyword_color :: (main: *CodeHighlighter, member_keyword: string) -> Color { call_ret := cast(*Color) sys_call("CodeHighlighter", "get_member_keyword_color", 3855908743, Color, main.p_object, member_keyword); return call_ret.*; }  // 10
set_member_keyword_colors :: (main: *CodeHighlighter, member_keyword: Dictionary) { sys_call("CodeHighlighter", "set_member_keyword_colors", 4155329257, Nil, main.p_object, member_keyword);  }  // 11
clear_member_keyword_colors :: (main: *CodeHighlighter) { sys_call("CodeHighlighter", "clear_member_keyword_colors", 3218959716, Nil, main.p_object);  }  // 12
get_member_keyword_colors :: (main: *CodeHighlighter) -> Dictionary { call_ret := cast(*Dictionary) sys_call("CodeHighlighter", "get_member_keyword_colors", 3102165223, Dictionary, main.p_object); return call_ret.*; }  // 13
add_color_region :: (main: *CodeHighlighter, start_key: string, end_key: string, color: Color) { sys_call("CodeHighlighter", "add_color_region", 2924977451, Nil, main.p_object, start_key, end_key, color);  }  // 14
remove_color_region :: (main: *CodeHighlighter, start_key: string) { sys_call("CodeHighlighter", "remove_color_region", 83702148, Nil, main.p_object, start_key);  }  // 15
has_color_region :: (main: *CodeHighlighter, start_key: string) -> bool { call_ret := cast(*bool) sys_call("CodeHighlighter", "has_color_region", 3927539163, bool, main.p_object, start_key); return call_ret.*; }  // 16
set_color_regions :: (main: *CodeHighlighter, color_regions: Dictionary) { sys_call("CodeHighlighter", "set_color_regions", 4155329257, Nil, main.p_object, color_regions);  }  // 17
clear_color_regions :: (main: *CodeHighlighter) { sys_call("CodeHighlighter", "clear_color_regions", 3218959716, Nil, main.p_object);  }  // 18
get_color_regions :: (main: *CodeHighlighter) -> Dictionary { call_ret := cast(*Dictionary) sys_call("CodeHighlighter", "get_color_regions", 3102165223, Dictionary, main.p_object); return call_ret.*; }  // 19
set_function_color :: (main: *CodeHighlighter, color: Color) { sys_call("CodeHighlighter", "set_function_color", 2920490490, Nil, main.p_object, color);  }  // 20
get_function_color :: (main: *CodeHighlighter) -> Color { call_ret := cast(*Color) sys_call("CodeHighlighter", "get_function_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 21
set_number_color :: (main: *CodeHighlighter, color: Color) { sys_call("CodeHighlighter", "set_number_color", 2920490490, Nil, main.p_object, color);  }  // 22
get_number_color :: (main: *CodeHighlighter) -> Color { call_ret := cast(*Color) sys_call("CodeHighlighter", "get_number_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 23
set_symbol_color :: (main: *CodeHighlighter, color: Color) { sys_call("CodeHighlighter", "set_symbol_color", 2920490490, Nil, main.p_object, color);  }  // 24
get_symbol_color :: (main: *CodeHighlighter) -> Color { call_ret := cast(*Color) sys_call("CodeHighlighter", "get_symbol_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 25
set_member_variable_color :: (main: *CodeHighlighter, color: Color) { sys_call("CodeHighlighter", "set_member_variable_color", 2920490490, Nil, main.p_object, color);  }  // 26
get_member_variable_color :: (main: *CodeHighlighter) -> Color { call_ret := cast(*Color) sys_call("CodeHighlighter", "get_member_variable_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 27

get_rid :: (main: *CollisionObject2D) -> RID { call_ret := cast(*RID) sys_call("CollisionObject2D", "get_rid", 2944877500, RID, main.p_object); return call_ret.*; }  // 5
set_collision_layer :: (main: *CollisionObject2D, layer: int) { sys_call("CollisionObject2D", "set_collision_layer", 1286410249, Nil, main.p_object, layer);  }  // 6
get_collision_layer :: (main: *CollisionObject2D) -> int { call_ret := cast(*int) sys_call("CollisionObject2D", "get_collision_layer", 3905245786, int, main.p_object); return call_ret.*; }  // 7
set_collision_mask :: (main: *CollisionObject2D, mask: int) { sys_call("CollisionObject2D", "set_collision_mask", 1286410249, Nil, main.p_object, mask);  }  // 8
get_collision_mask :: (main: *CollisionObject2D) -> int { call_ret := cast(*int) sys_call("CollisionObject2D", "get_collision_mask", 3905245786, int, main.p_object); return call_ret.*; }  // 9
set_collision_layer_value :: (main: *CollisionObject2D, layer_number: int, value: bool) { sys_call("CollisionObject2D", "set_collision_layer_value", 300928843, Nil, main.p_object, layer_number, value);  }  // 10
get_collision_layer_value :: (main: *CollisionObject2D, layer_number: int) -> bool { call_ret := cast(*bool) sys_call("CollisionObject2D", "get_collision_layer_value", 1116898809, bool, main.p_object, layer_number); return call_ret.*; }  // 11
set_collision_mask_value :: (main: *CollisionObject2D, layer_number: int, value: bool) { sys_call("CollisionObject2D", "set_collision_mask_value", 300928843, Nil, main.p_object, layer_number, value);  }  // 12
get_collision_mask_value :: (main: *CollisionObject2D, layer_number: int) -> bool { call_ret := cast(*bool) sys_call("CollisionObject2D", "get_collision_mask_value", 1116898809, bool, main.p_object, layer_number); return call_ret.*; }  // 13
set_collision_priority :: (main: *CollisionObject2D, priority: float) { sys_call("CollisionObject2D", "set_collision_priority", 373806689, Nil, main.p_object, priority);  }  // 14
get_collision_priority :: (main: *CollisionObject2D) -> float { call_ret := cast(*float) sys_call("CollisionObject2D", "get_collision_priority", 1740695150, float, main.p_object); return call_ret.*; }  // 15
set_disable_mode :: (main: *CollisionObject2D, mode: CollisionObject2D.DisableMode) { sys_call("CollisionObject2D", "set_disable_mode", 1919204045, Nil, main.p_object, mode);  }  // 16
get_disable_mode :: (main: *CollisionObject2D) -> CollisionObject2D.DisableMode { call_ret := cast(*CollisionObject2D.DisableMode) sys_call("CollisionObject2D", "get_disable_mode", 3172846349, CollisionObject2D.DisableMode, main.p_object); return call_ret.*; }  // 17
set_pickable :: (main: *CollisionObject2D, enabled: bool) { sys_call("CollisionObject2D", "set_pickable", 2586408642, Nil, main.p_object, enabled);  }  // 18
is_pickable :: (main: *CollisionObject2D) -> bool { call_ret := cast(*bool) sys_call("CollisionObject2D", "is_pickable", 36873697, bool, main.p_object); return call_ret.*; }  // 19
create_shape_owner :: (main: *CollisionObject2D, owner: Object) -> int { call_ret := cast(*int) sys_call("CollisionObject2D", "create_shape_owner", 3429307534, int, main.p_object, owner); return call_ret.*; }  // 20
remove_shape_owner :: (main: *CollisionObject2D, owner_id: int) { sys_call("CollisionObject2D", "remove_shape_owner", 1286410249, Nil, main.p_object, owner_id);  }  // 21
get_shape_owners :: (main: *CollisionObject2D) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("CollisionObject2D", "get_shape_owners", 969006518, PackedInt32Array, main.p_object); return call_ret.*; }  // 22
shape_owner_set_transform :: (main: *CollisionObject2D, owner_id: int, transform: Transform2D) { sys_call("CollisionObject2D", "shape_owner_set_transform", 30160968, Nil, main.p_object, owner_id, transform);  }  // 23
shape_owner_get_transform :: (main: *CollisionObject2D, owner_id: int) -> Transform2D { call_ret := cast(*Transform2D) sys_call("CollisionObject2D", "shape_owner_get_transform", 3836996910, Transform2D, main.p_object, owner_id); return call_ret.*; }  // 24
shape_owner_get_owner :: (main: *CollisionObject2D, owner_id: int) -> *Object { call_ret := cast(*Object) sys_call("CollisionObject2D", "shape_owner_get_owner", 3332903315, Object, main.p_object, owner_id); return call_ret; }  // 25
shape_owner_set_disabled :: (main: *CollisionObject2D, owner_id: int, disabled: bool) { sys_call("CollisionObject2D", "shape_owner_set_disabled", 300928843, Nil, main.p_object, owner_id, disabled);  }  // 26
is_shape_owner_disabled :: (main: *CollisionObject2D, owner_id: int) -> bool { call_ret := cast(*bool) sys_call("CollisionObject2D", "is_shape_owner_disabled", 1116898809, bool, main.p_object, owner_id); return call_ret.*; }  // 27
shape_owner_set_one_way_collision :: (main: *CollisionObject2D, owner_id: int, enable: bool) { sys_call("CollisionObject2D", "shape_owner_set_one_way_collision", 300928843, Nil, main.p_object, owner_id, enable);  }  // 28
is_shape_owner_one_way_collision_enabled :: (main: *CollisionObject2D, owner_id: int) -> bool { call_ret := cast(*bool) sys_call("CollisionObject2D", "is_shape_owner_one_way_collision_enabled", 1116898809, bool, main.p_object, owner_id); return call_ret.*; }  // 29
shape_owner_set_one_way_collision_margin :: (main: *CollisionObject2D, owner_id: int, margin: float) { sys_call("CollisionObject2D", "shape_owner_set_one_way_collision_margin", 1602489585, Nil, main.p_object, owner_id, margin);  }  // 30
get_shape_owner_one_way_collision_margin :: (main: *CollisionObject2D, owner_id: int) -> float { call_ret := cast(*float) sys_call("CollisionObject2D", "get_shape_owner_one_way_collision_margin", 2339986948, float, main.p_object, owner_id); return call_ret.*; }  // 31
shape_owner_add_shape :: (main: *CollisionObject2D, owner_id: int, shape: Shape2D) { sys_call("CollisionObject2D", "shape_owner_add_shape", 2077425081, Nil, main.p_object, owner_id, shape);  }  // 32
shape_owner_get_shape_count :: (main: *CollisionObject2D, owner_id: int) -> int { call_ret := cast(*int) sys_call("CollisionObject2D", "shape_owner_get_shape_count", 923996154, int, main.p_object, owner_id); return call_ret.*; }  // 33
shape_owner_get_shape :: (main: *CollisionObject2D, owner_id: int, shape_id: int) -> *Shape2D { call_ret := cast(*Shape2D) sys_call("CollisionObject2D", "shape_owner_get_shape", 3106725749, Shape2D, main.p_object, owner_id, shape_id); return call_ret; }  // 34
shape_owner_get_shape_index :: (main: *CollisionObject2D, owner_id: int, shape_id: int) -> int { call_ret := cast(*int) sys_call("CollisionObject2D", "shape_owner_get_shape_index", 3175239445, int, main.p_object, owner_id, shape_id); return call_ret.*; }  // 35
shape_owner_remove_shape :: (main: *CollisionObject2D, owner_id: int, shape_id: int) { sys_call("CollisionObject2D", "shape_owner_remove_shape", 3937882851, Nil, main.p_object, owner_id, shape_id);  }  // 36
shape_owner_clear_shapes :: (main: *CollisionObject2D, owner_id: int) { sys_call("CollisionObject2D", "shape_owner_clear_shapes", 1286410249, Nil, main.p_object, owner_id);  }  // 37
shape_find_owner :: (main: *CollisionObject2D, shape_index: int) -> int { call_ret := cast(*int) sys_call("CollisionObject2D", "shape_find_owner", 923996154, int, main.p_object, shape_index); return call_ret.*; }  // 38

set_collision_layer :: (main: *CollisionObject3D, layer: int) { sys_call("CollisionObject3D", "set_collision_layer", 1286410249, Nil, main.p_object, layer);  }  // 3
get_collision_layer :: (main: *CollisionObject3D) -> int { call_ret := cast(*int) sys_call("CollisionObject3D", "get_collision_layer", 3905245786, int, main.p_object); return call_ret.*; }  // 4
set_collision_mask :: (main: *CollisionObject3D, mask: int) { sys_call("CollisionObject3D", "set_collision_mask", 1286410249, Nil, main.p_object, mask);  }  // 5
get_collision_mask :: (main: *CollisionObject3D) -> int { call_ret := cast(*int) sys_call("CollisionObject3D", "get_collision_mask", 3905245786, int, main.p_object); return call_ret.*; }  // 6
set_collision_layer_value :: (main: *CollisionObject3D, layer_number: int, value: bool) { sys_call("CollisionObject3D", "set_collision_layer_value", 300928843, Nil, main.p_object, layer_number, value);  }  // 7
get_collision_layer_value :: (main: *CollisionObject3D, layer_number: int) -> bool { call_ret := cast(*bool) sys_call("CollisionObject3D", "get_collision_layer_value", 1116898809, bool, main.p_object, layer_number); return call_ret.*; }  // 8
set_collision_mask_value :: (main: *CollisionObject3D, layer_number: int, value: bool) { sys_call("CollisionObject3D", "set_collision_mask_value", 300928843, Nil, main.p_object, layer_number, value);  }  // 9
get_collision_mask_value :: (main: *CollisionObject3D, layer_number: int) -> bool { call_ret := cast(*bool) sys_call("CollisionObject3D", "get_collision_mask_value", 1116898809, bool, main.p_object, layer_number); return call_ret.*; }  // 10
set_collision_priority :: (main: *CollisionObject3D, priority: float) { sys_call("CollisionObject3D", "set_collision_priority", 373806689, Nil, main.p_object, priority);  }  // 11
get_collision_priority :: (main: *CollisionObject3D) -> float { call_ret := cast(*float) sys_call("CollisionObject3D", "get_collision_priority", 1740695150, float, main.p_object); return call_ret.*; }  // 12
set_disable_mode :: (main: *CollisionObject3D, mode: CollisionObject3D.DisableMode) { sys_call("CollisionObject3D", "set_disable_mode", 1623620376, Nil, main.p_object, mode);  }  // 13
get_disable_mode :: (main: *CollisionObject3D) -> CollisionObject3D.DisableMode { call_ret := cast(*CollisionObject3D.DisableMode) sys_call("CollisionObject3D", "get_disable_mode", 410164780, CollisionObject3D.DisableMode, main.p_object); return call_ret.*; }  // 14
set_ray_pickable :: (main: *CollisionObject3D, ray_pickable: bool) { sys_call("CollisionObject3D", "set_ray_pickable", 2586408642, Nil, main.p_object, ray_pickable);  }  // 15
is_ray_pickable :: (main: *CollisionObject3D) -> bool { call_ret := cast(*bool) sys_call("CollisionObject3D", "is_ray_pickable", 36873697, bool, main.p_object); return call_ret.*; }  // 16
set_capture_input_on_drag :: (main: *CollisionObject3D, enable: bool) { sys_call("CollisionObject3D", "set_capture_input_on_drag", 2586408642, Nil, main.p_object, enable);  }  // 17
get_capture_input_on_drag :: (main: *CollisionObject3D) -> bool { call_ret := cast(*bool) sys_call("CollisionObject3D", "get_capture_input_on_drag", 36873697, bool, main.p_object); return call_ret.*; }  // 18
get_rid :: (main: *CollisionObject3D) -> RID { call_ret := cast(*RID) sys_call("CollisionObject3D", "get_rid", 2944877500, RID, main.p_object); return call_ret.*; }  // 19
create_shape_owner :: (main: *CollisionObject3D, owner: Object) -> int { call_ret := cast(*int) sys_call("CollisionObject3D", "create_shape_owner", 3429307534, int, main.p_object, owner); return call_ret.*; }  // 20
remove_shape_owner :: (main: *CollisionObject3D, owner_id: int) { sys_call("CollisionObject3D", "remove_shape_owner", 1286410249, Nil, main.p_object, owner_id);  }  // 21
get_shape_owners :: (main: *CollisionObject3D) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("CollisionObject3D", "get_shape_owners", 969006518, PackedInt32Array, main.p_object); return call_ret.*; }  // 22
shape_owner_set_transform :: (main: *CollisionObject3D, owner_id: int, transform: Transform3D) { sys_call("CollisionObject3D", "shape_owner_set_transform", 3616898986, Nil, main.p_object, owner_id, transform);  }  // 23
shape_owner_get_transform :: (main: *CollisionObject3D, owner_id: int) -> Transform3D { call_ret := cast(*Transform3D) sys_call("CollisionObject3D", "shape_owner_get_transform", 1965739696, Transform3D, main.p_object, owner_id); return call_ret.*; }  // 24
shape_owner_get_owner :: (main: *CollisionObject3D, owner_id: int) -> *Object { call_ret := cast(*Object) sys_call("CollisionObject3D", "shape_owner_get_owner", 3332903315, Object, main.p_object, owner_id); return call_ret; }  // 25
shape_owner_set_disabled :: (main: *CollisionObject3D, owner_id: int, disabled: bool) { sys_call("CollisionObject3D", "shape_owner_set_disabled", 300928843, Nil, main.p_object, owner_id, disabled);  }  // 26
is_shape_owner_disabled :: (main: *CollisionObject3D, owner_id: int) -> bool { call_ret := cast(*bool) sys_call("CollisionObject3D", "is_shape_owner_disabled", 1116898809, bool, main.p_object, owner_id); return call_ret.*; }  // 27
shape_owner_add_shape :: (main: *CollisionObject3D, owner_id: int, shape: Shape3D) { sys_call("CollisionObject3D", "shape_owner_add_shape", 2566676345, Nil, main.p_object, owner_id, shape);  }  // 28
shape_owner_get_shape_count :: (main: *CollisionObject3D, owner_id: int) -> int { call_ret := cast(*int) sys_call("CollisionObject3D", "shape_owner_get_shape_count", 923996154, int, main.p_object, owner_id); return call_ret.*; }  // 29
shape_owner_get_shape :: (main: *CollisionObject3D, owner_id: int, shape_id: int) -> *Shape3D { call_ret := cast(*Shape3D) sys_call("CollisionObject3D", "shape_owner_get_shape", 4015519174, Shape3D, main.p_object, owner_id, shape_id); return call_ret; }  // 30
shape_owner_get_shape_index :: (main: *CollisionObject3D, owner_id: int, shape_id: int) -> int { call_ret := cast(*int) sys_call("CollisionObject3D", "shape_owner_get_shape_index", 3175239445, int, main.p_object, owner_id, shape_id); return call_ret.*; }  // 31
shape_owner_remove_shape :: (main: *CollisionObject3D, owner_id: int, shape_id: int) { sys_call("CollisionObject3D", "shape_owner_remove_shape", 3937882851, Nil, main.p_object, owner_id, shape_id);  }  // 32
shape_owner_clear_shapes :: (main: *CollisionObject3D, owner_id: int) { sys_call("CollisionObject3D", "shape_owner_clear_shapes", 1286410249, Nil, main.p_object, owner_id);  }  // 33
shape_find_owner :: (main: *CollisionObject3D, shape_index: int) -> int { call_ret := cast(*int) sys_call("CollisionObject3D", "shape_find_owner", 923996154, int, main.p_object, shape_index); return call_ret.*; }  // 34

set_polygon :: (main: *CollisionPolygon2D, polygon: PackedVector2Array) { sys_call("CollisionPolygon2D", "set_polygon", 1509147220, Nil, main.p_object, polygon);  }  // 0
get_polygon :: (main: *CollisionPolygon2D) -> PackedVector2Array { call_ret := cast(*PackedVector2Array) sys_call("CollisionPolygon2D", "get_polygon", 2961356807, PackedVector2Array, main.p_object); return call_ret.*; }  // 1
set_build_mode :: (main: *CollisionPolygon2D, build_mode: CollisionPolygon2D.BuildMode) { sys_call("CollisionPolygon2D", "set_build_mode", 2780803135, Nil, main.p_object, build_mode);  }  // 2
get_build_mode :: (main: *CollisionPolygon2D) -> CollisionPolygon2D.BuildMode { call_ret := cast(*CollisionPolygon2D.BuildMode) sys_call("CollisionPolygon2D", "get_build_mode", 3044948800, CollisionPolygon2D.BuildMode, main.p_object); return call_ret.*; }  // 3
set_disabled :: (main: *CollisionPolygon2D, disabled: bool) { sys_call("CollisionPolygon2D", "set_disabled", 2586408642, Nil, main.p_object, disabled);  }  // 4
is_disabled :: (main: *CollisionPolygon2D) -> bool { call_ret := cast(*bool) sys_call("CollisionPolygon2D", "is_disabled", 36873697, bool, main.p_object); return call_ret.*; }  // 5
set_one_way_collision :: (main: *CollisionPolygon2D, enabled: bool) { sys_call("CollisionPolygon2D", "set_one_way_collision", 2586408642, Nil, main.p_object, enabled);  }  // 6
is_one_way_collision_enabled :: (main: *CollisionPolygon2D) -> bool { call_ret := cast(*bool) sys_call("CollisionPolygon2D", "is_one_way_collision_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 7
set_one_way_collision_margin :: (main: *CollisionPolygon2D, margin: float) { sys_call("CollisionPolygon2D", "set_one_way_collision_margin", 373806689, Nil, main.p_object, margin);  }  // 8
get_one_way_collision_margin :: (main: *CollisionPolygon2D) -> float { call_ret := cast(*float) sys_call("CollisionPolygon2D", "get_one_way_collision_margin", 1740695150, float, main.p_object); return call_ret.*; }  // 9

set_depth :: (main: *CollisionPolygon3D, depth: float) { sys_call("CollisionPolygon3D", "set_depth", 373806689, Nil, main.p_object, depth);  }  // 0
get_depth :: (main: *CollisionPolygon3D) -> float { call_ret := cast(*float) sys_call("CollisionPolygon3D", "get_depth", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_polygon :: (main: *CollisionPolygon3D, polygon: PackedVector2Array) { sys_call("CollisionPolygon3D", "set_polygon", 1509147220, Nil, main.p_object, polygon);  }  // 2
get_polygon :: (main: *CollisionPolygon3D) -> PackedVector2Array { call_ret := cast(*PackedVector2Array) sys_call("CollisionPolygon3D", "get_polygon", 2961356807, PackedVector2Array, main.p_object); return call_ret.*; }  // 3
set_disabled :: (main: *CollisionPolygon3D, disabled: bool) { sys_call("CollisionPolygon3D", "set_disabled", 2586408642, Nil, main.p_object, disabled);  }  // 4
is_disabled :: (main: *CollisionPolygon3D) -> bool { call_ret := cast(*bool) sys_call("CollisionPolygon3D", "is_disabled", 36873697, bool, main.p_object); return call_ret.*; }  // 5
set_debug_color :: (main: *CollisionPolygon3D, color: Color) { sys_call("CollisionPolygon3D", "set_debug_color", 2920490490, Nil, main.p_object, color);  }  // 6
get_debug_color :: (main: *CollisionPolygon3D) -> Color { call_ret := cast(*Color) sys_call("CollisionPolygon3D", "get_debug_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 7
set_enable_debug_fill :: (main: *CollisionPolygon3D, enable: bool) { sys_call("CollisionPolygon3D", "set_enable_debug_fill", 2586408642, Nil, main.p_object, enable);  }  // 8
get_enable_debug_fill :: (main: *CollisionPolygon3D) -> bool { call_ret := cast(*bool) sys_call("CollisionPolygon3D", "get_enable_debug_fill", 36873697, bool, main.p_object); return call_ret.*; }  // 9
set_margin :: (main: *CollisionPolygon3D, margin: float) { sys_call("CollisionPolygon3D", "set_margin", 373806689, Nil, main.p_object, margin);  }  // 10
get_margin :: (main: *CollisionPolygon3D) -> float { call_ret := cast(*float) sys_call("CollisionPolygon3D", "get_margin", 1740695150, float, main.p_object); return call_ret.*; }  // 11

set_shape :: (main: *CollisionShape2D, shape: Shape2D) { sys_call("CollisionShape2D", "set_shape", 771364740, Nil, main.p_object, shape);  }  // 0
get_shape :: (main: *CollisionShape2D) -> *Shape2D { call_ret := cast(*Shape2D) sys_call("CollisionShape2D", "get_shape", 522005891, Shape2D, main.p_object); return call_ret; }  // 1
set_disabled :: (main: *CollisionShape2D, disabled: bool) { sys_call("CollisionShape2D", "set_disabled", 2586408642, Nil, main.p_object, disabled);  }  // 2
is_disabled :: (main: *CollisionShape2D) -> bool { call_ret := cast(*bool) sys_call("CollisionShape2D", "is_disabled", 36873697, bool, main.p_object); return call_ret.*; }  // 3
set_one_way_collision :: (main: *CollisionShape2D, enabled: bool) { sys_call("CollisionShape2D", "set_one_way_collision", 2586408642, Nil, main.p_object, enabled);  }  // 4
is_one_way_collision_enabled :: (main: *CollisionShape2D) -> bool { call_ret := cast(*bool) sys_call("CollisionShape2D", "is_one_way_collision_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 5
set_one_way_collision_margin :: (main: *CollisionShape2D, margin: float) { sys_call("CollisionShape2D", "set_one_way_collision_margin", 373806689, Nil, main.p_object, margin);  }  // 6
get_one_way_collision_margin :: (main: *CollisionShape2D) -> float { call_ret := cast(*float) sys_call("CollisionShape2D", "get_one_way_collision_margin", 1740695150, float, main.p_object); return call_ret.*; }  // 7
set_debug_color :: (main: *CollisionShape2D, color: Color) { sys_call("CollisionShape2D", "set_debug_color", 2920490490, Nil, main.p_object, color);  }  // 8
get_debug_color :: (main: *CollisionShape2D) -> Color { call_ret := cast(*Color) sys_call("CollisionShape2D", "get_debug_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 9

resource_changed :: (main: *CollisionShape3D, resource: Resource) { sys_call("CollisionShape3D", "resource_changed", 968641751, Nil, main.p_object, resource);  }  // 0
set_shape :: (main: *CollisionShape3D, shape: Shape3D) { sys_call("CollisionShape3D", "set_shape", 1549710052, Nil, main.p_object, shape);  }  // 1
get_shape :: (main: *CollisionShape3D) -> *Shape3D { call_ret := cast(*Shape3D) sys_call("CollisionShape3D", "get_shape", 3214262478, Shape3D, main.p_object); return call_ret; }  // 2
set_disabled :: (main: *CollisionShape3D, enable: bool) { sys_call("CollisionShape3D", "set_disabled", 2586408642, Nil, main.p_object, enable);  }  // 3
is_disabled :: (main: *CollisionShape3D) -> bool { call_ret := cast(*bool) sys_call("CollisionShape3D", "is_disabled", 36873697, bool, main.p_object); return call_ret.*; }  // 4
make_convex_from_siblings :: (main: *CollisionShape3D) { sys_call("CollisionShape3D", "make_convex_from_siblings", 3218959716, Nil, main.p_object);  }  // 5
set_debug_color :: (main: *CollisionShape3D, color: Color) { sys_call("CollisionShape3D", "set_debug_color", 2920490490, Nil, main.p_object, color);  }  // 6
get_debug_color :: (main: *CollisionShape3D) -> Color { call_ret := cast(*Color) sys_call("CollisionShape3D", "get_debug_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 7
set_enable_debug_fill :: (main: *CollisionShape3D, enable: bool) { sys_call("CollisionShape3D", "set_enable_debug_fill", 2586408642, Nil, main.p_object, enable);  }  // 8
get_enable_debug_fill :: (main: *CollisionShape3D) -> bool { call_ret := cast(*bool) sys_call("CollisionShape3D", "get_enable_debug_fill", 36873697, bool, main.p_object); return call_ret.*; }  // 9

set_colors :: (main: *ColorPalette, colors: PackedColorArray) { sys_call("ColorPalette", "set_colors", 3546319833, Nil, main.p_object, colors);  }  // 0
get_colors :: (main: *ColorPalette) -> PackedColorArray { call_ret := cast(*PackedColorArray) sys_call("ColorPalette", "get_colors", 1392750486, PackedColorArray, main.p_object); return call_ret.*; }  // 1

set_pick_color :: (main: *ColorPicker, color: Color) { sys_call("ColorPicker", "set_pick_color", 2920490490, Nil, main.p_object, color);  }  // 0
get_pick_color :: (main: *ColorPicker) -> Color { call_ret := cast(*Color) sys_call("ColorPicker", "get_pick_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 1
set_deferred_mode :: (main: *ColorPicker, mode: bool) { sys_call("ColorPicker", "set_deferred_mode", 2586408642, Nil, main.p_object, mode);  }  // 2
is_deferred_mode :: (main: *ColorPicker) -> bool { call_ret := cast(*bool) sys_call("ColorPicker", "is_deferred_mode", 36873697, bool, main.p_object); return call_ret.*; }  // 3
set_color_mode :: (main: *ColorPicker, color_mode: ColorPicker.ColorModeType) { sys_call("ColorPicker", "set_color_mode", 1579114136, Nil, main.p_object, color_mode);  }  // 4
get_color_mode :: (main: *ColorPicker) -> ColorPicker.ColorModeType { call_ret := cast(*ColorPicker.ColorModeType) sys_call("ColorPicker", "get_color_mode", 392907674, ColorPicker.ColorModeType, main.p_object); return call_ret.*; }  // 5
set_edit_alpha :: (main: *ColorPicker, show: bool) { sys_call("ColorPicker", "set_edit_alpha", 2586408642, Nil, main.p_object, show);  }  // 6
is_editing_alpha :: (main: *ColorPicker) -> bool { call_ret := cast(*bool) sys_call("ColorPicker", "is_editing_alpha", 36873697, bool, main.p_object); return call_ret.*; }  // 7
set_can_add_swatches :: (main: *ColorPicker, enabled: bool) { sys_call("ColorPicker", "set_can_add_swatches", 2586408642, Nil, main.p_object, enabled);  }  // 8
are_swatches_enabled :: (main: *ColorPicker) -> bool { call_ret := cast(*bool) sys_call("ColorPicker", "are_swatches_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 9
set_presets_visible :: (main: *ColorPicker, visible: bool) { sys_call("ColorPicker", "set_presets_visible", 2586408642, Nil, main.p_object, visible);  }  // 10
are_presets_visible :: (main: *ColorPicker) -> bool { call_ret := cast(*bool) sys_call("ColorPicker", "are_presets_visible", 36873697, bool, main.p_object); return call_ret.*; }  // 11
set_modes_visible :: (main: *ColorPicker, visible: bool) { sys_call("ColorPicker", "set_modes_visible", 2586408642, Nil, main.p_object, visible);  }  // 12
are_modes_visible :: (main: *ColorPicker) -> bool { call_ret := cast(*bool) sys_call("ColorPicker", "are_modes_visible", 36873697, bool, main.p_object); return call_ret.*; }  // 13
set_sampler_visible :: (main: *ColorPicker, visible: bool) { sys_call("ColorPicker", "set_sampler_visible", 2586408642, Nil, main.p_object, visible);  }  // 14
is_sampler_visible :: (main: *ColorPicker) -> bool { call_ret := cast(*bool) sys_call("ColorPicker", "is_sampler_visible", 36873697, bool, main.p_object); return call_ret.*; }  // 15
set_sliders_visible :: (main: *ColorPicker, visible: bool) { sys_call("ColorPicker", "set_sliders_visible", 2586408642, Nil, main.p_object, visible);  }  // 16
are_sliders_visible :: (main: *ColorPicker) -> bool { call_ret := cast(*bool) sys_call("ColorPicker", "are_sliders_visible", 36873697, bool, main.p_object); return call_ret.*; }  // 17
set_hex_visible :: (main: *ColorPicker, visible: bool) { sys_call("ColorPicker", "set_hex_visible", 2586408642, Nil, main.p_object, visible);  }  // 18
is_hex_visible :: (main: *ColorPicker) -> bool { call_ret := cast(*bool) sys_call("ColorPicker", "is_hex_visible", 36873697, bool, main.p_object); return call_ret.*; }  // 19
add_preset :: (main: *ColorPicker, color: Color) { sys_call("ColorPicker", "add_preset", 2920490490, Nil, main.p_object, color);  }  // 20
erase_preset :: (main: *ColorPicker, color: Color) { sys_call("ColorPicker", "erase_preset", 2920490490, Nil, main.p_object, color);  }  // 21
get_presets :: (main: *ColorPicker) -> PackedColorArray { call_ret := cast(*PackedColorArray) sys_call("ColorPicker", "get_presets", 1392750486, PackedColorArray, main.p_object); return call_ret.*; }  // 22
add_recent_preset :: (main: *ColorPicker, color: Color) { sys_call("ColorPicker", "add_recent_preset", 2920490490, Nil, main.p_object, color);  }  // 23
erase_recent_preset :: (main: *ColorPicker, color: Color) { sys_call("ColorPicker", "erase_recent_preset", 2920490490, Nil, main.p_object, color);  }  // 24
get_recent_presets :: (main: *ColorPicker) -> PackedColorArray { call_ret := cast(*PackedColorArray) sys_call("ColorPicker", "get_recent_presets", 1392750486, PackedColorArray, main.p_object); return call_ret.*; }  // 25
set_picker_shape :: (main: *ColorPicker, shape: ColorPicker.PickerShapeType) { sys_call("ColorPicker", "set_picker_shape", 3981373861, Nil, main.p_object, shape);  }  // 26
get_picker_shape :: (main: *ColorPicker) -> ColorPicker.PickerShapeType { call_ret := cast(*ColorPicker.PickerShapeType) sys_call("ColorPicker", "get_picker_shape", 1143229889, ColorPicker.PickerShapeType, main.p_object); return call_ret.*; }  // 27

set_pick_color :: (main: *ColorPickerButton, color: Color) { sys_call("ColorPickerButton", "set_pick_color", 2920490490, Nil, main.p_object, color);  }  // 0
get_pick_color :: (main: *ColorPickerButton) -> Color { call_ret := cast(*Color) sys_call("ColorPickerButton", "get_pick_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 1
get_picker :: (main: *ColorPickerButton) -> *ColorPicker { call_ret := cast(*ColorPicker) sys_call("ColorPickerButton", "get_picker", 331835996, ColorPicker, main.p_object); return call_ret; }  // 2
get_popup :: (main: *ColorPickerButton) -> *PopupPanel { call_ret := cast(*PopupPanel) sys_call("ColorPickerButton", "get_popup", 1322440207, PopupPanel, main.p_object); return call_ret; }  // 3
set_edit_alpha :: (main: *ColorPickerButton, show: bool) { sys_call("ColorPickerButton", "set_edit_alpha", 2586408642, Nil, main.p_object, show);  }  // 4
is_editing_alpha :: (main: *ColorPickerButton) -> bool { call_ret := cast(*bool) sys_call("ColorPickerButton", "is_editing_alpha", 36873697, bool, main.p_object); return call_ret.*; }  // 5

set_color :: (main: *ColorRect, color: Color) { sys_call("ColorRect", "set_color", 2920490490, Nil, main.p_object, color);  }  // 0
get_color :: (main: *ColorRect) -> Color { call_ret := cast(*Color) sys_call("ColorRect", "get_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 1

set_compositor_effects :: (main: *Compositor, compositor_effects: [] CompositorEffect) { sys_call("Compositor", "set_compositor_effects", 381264803, Nil, main.p_object, compositor_effects);  }  // 0
get_compositor_effects :: (main: *Compositor) -> [] CompositorEffect { call_ret := cast(*[] CompositorEffect) sys_call("Compositor", "get_compositor_effects", 3995934104, [] CompositorEffect, main.p_object); return call_ret.*; }  // 1

set_enabled :: (main: *CompositorEffect, enabled: bool) { sys_call("CompositorEffect", "set_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 1
get_enabled :: (main: *CompositorEffect) -> bool { call_ret := cast(*bool) sys_call("CompositorEffect", "get_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 2
set_effect_callback_type :: (main: *CompositorEffect, effect_callback_type: CompositorEffect.EffectCallbackType) { sys_call("CompositorEffect", "set_effect_callback_type", 1390728419, Nil, main.p_object, effect_callback_type);  }  // 3
get_effect_callback_type :: (main: *CompositorEffect) -> CompositorEffect.EffectCallbackType { call_ret := cast(*CompositorEffect.EffectCallbackType) sys_call("CompositorEffect", "get_effect_callback_type", 1221912590, CompositorEffect.EffectCallbackType, main.p_object); return call_ret.*; }  // 4
set_access_resolved_color :: (main: *CompositorEffect, enable: bool) { sys_call("CompositorEffect", "set_access_resolved_color", 2586408642, Nil, main.p_object, enable);  }  // 5
get_access_resolved_color :: (main: *CompositorEffect) -> bool { call_ret := cast(*bool) sys_call("CompositorEffect", "get_access_resolved_color", 36873697, bool, main.p_object); return call_ret.*; }  // 6
set_access_resolved_depth :: (main: *CompositorEffect, enable: bool) { sys_call("CompositorEffect", "set_access_resolved_depth", 2586408642, Nil, main.p_object, enable);  }  // 7
get_access_resolved_depth :: (main: *CompositorEffect) -> bool { call_ret := cast(*bool) sys_call("CompositorEffect", "get_access_resolved_depth", 36873697, bool, main.p_object); return call_ret.*; }  // 8
set_needs_motion_vectors :: (main: *CompositorEffect, enable: bool) { sys_call("CompositorEffect", "set_needs_motion_vectors", 2586408642, Nil, main.p_object, enable);  }  // 9
get_needs_motion_vectors :: (main: *CompositorEffect) -> bool { call_ret := cast(*bool) sys_call("CompositorEffect", "get_needs_motion_vectors", 36873697, bool, main.p_object); return call_ret.*; }  // 10
set_needs_normal_roughness :: (main: *CompositorEffect, enable: bool) { sys_call("CompositorEffect", "set_needs_normal_roughness", 2586408642, Nil, main.p_object, enable);  }  // 11
get_needs_normal_roughness :: (main: *CompositorEffect) -> bool { call_ret := cast(*bool) sys_call("CompositorEffect", "get_needs_normal_roughness", 36873697, bool, main.p_object); return call_ret.*; }  // 12
set_needs_separate_specular :: (main: *CompositorEffect, enable: bool) { sys_call("CompositorEffect", "set_needs_separate_specular", 2586408642, Nil, main.p_object, enable);  }  // 13
get_needs_separate_specular :: (main: *CompositorEffect) -> bool { call_ret := cast(*bool) sys_call("CompositorEffect", "get_needs_separate_specular", 36873697, bool, main.p_object); return call_ret.*; }  // 14



load :: (main: *CompressedTexture2D, path: string) -> Error { call_ret := cast(*Error) sys_call("CompressedTexture2D", "load", 166001499, Error, main.p_object, path); return call_ret.*; }  // 0
get_load_path :: (main: *CompressedTexture2D) -> gstring { call_ret := cast(*gstring) sys_call("CompressedTexture2D", "get_load_path", 201670096, gstring, main.p_object); return call_ret.*; }  // 1


load :: (main: *CompressedTexture3D, path: string) -> Error { call_ret := cast(*Error) sys_call("CompressedTexture3D", "load", 166001499, Error, main.p_object, path); return call_ret.*; }  // 0
get_load_path :: (main: *CompressedTexture3D) -> gstring { call_ret := cast(*gstring) sys_call("CompressedTexture3D", "get_load_path", 201670096, gstring, main.p_object); return call_ret.*; }  // 1

load :: (main: *CompressedTextureLayered, path: string) -> Error { call_ret := cast(*Error) sys_call("CompressedTextureLayered", "load", 166001499, Error, main.p_object, path); return call_ret.*; }  // 0
get_load_path :: (main: *CompressedTextureLayered) -> gstring { call_ret := cast(*gstring) sys_call("CompressedTextureLayered", "get_load_path", 201670096, gstring, main.p_object); return call_ret.*; }  // 1

set_segments :: (main: *ConcavePolygonShape2D, segments: PackedVector2Array) { sys_call("ConcavePolygonShape2D", "set_segments", 1509147220, Nil, main.p_object, segments);  }  // 0
get_segments :: (main: *ConcavePolygonShape2D) -> PackedVector2Array { call_ret := cast(*PackedVector2Array) sys_call("ConcavePolygonShape2D", "get_segments", 2961356807, PackedVector2Array, main.p_object); return call_ret.*; }  // 1

set_faces :: (main: *ConcavePolygonShape3D, faces: PackedVector3Array) { sys_call("ConcavePolygonShape3D", "set_faces", 334873810, Nil, main.p_object, faces);  }  // 0
get_faces :: (main: *ConcavePolygonShape3D) -> PackedVector3Array { call_ret := cast(*PackedVector3Array) sys_call("ConcavePolygonShape3D", "get_faces", 497664490, PackedVector3Array, main.p_object); return call_ret.*; }  // 1
set_backface_collision_enabled :: (main: *ConcavePolygonShape3D, enabled: bool) { sys_call("ConcavePolygonShape3D", "set_backface_collision_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 2
is_backface_collision_enabled :: (main: *ConcavePolygonShape3D) -> bool { call_ret := cast(*bool) sys_call("ConcavePolygonShape3D", "is_backface_collision_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 3

set_param :: (main: *ConeTwistJoint3D, param: ConeTwistJoint3D.Param, value: float) { sys_call("ConeTwistJoint3D", "set_param", 1062470226, Nil, main.p_object, param, value);  }  // 0
get_param :: (main: *ConeTwistJoint3D, param: ConeTwistJoint3D.Param) -> float { call_ret := cast(*float) sys_call("ConeTwistJoint3D", "get_param", 2928790850, float, main.p_object, param); return call_ret.*; }  // 1

set_value :: (main: *ConfigFile, section: string, key: string, value: Variant) { sys_call("ConfigFile", "set_value", 2504492430, Nil, main.p_object, section, key, value);  }  // 0
get_value :: (main: *ConfigFile, section: string, key: string) -> Variant { call_ret := cast(*Variant) sys_call("ConfigFile", "get_value", 89809366, Variant, main.p_object, section, key); return call_ret.*; }  // 1
has_section :: (main: *ConfigFile, section: string) -> bool { call_ret := cast(*bool) sys_call("ConfigFile", "has_section", 3927539163, bool, main.p_object, section); return call_ret.*; }  // 2
has_section_key :: (main: *ConfigFile, section: string, key: string) -> bool { call_ret := cast(*bool) sys_call("ConfigFile", "has_section_key", 820780508, bool, main.p_object, section, key); return call_ret.*; }  // 3
get_sections :: (main: *ConfigFile) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("ConfigFile", "get_sections", 1139954409, PackedStringArray, main.p_object); return call_ret.*; }  // 4
get_section_keys :: (main: *ConfigFile, section: string) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("ConfigFile", "get_section_keys", 4291131558, PackedStringArray, main.p_object, section); return call_ret.*; }  // 5
erase_section :: (main: *ConfigFile, section: string) { sys_call("ConfigFile", "erase_section", 83702148, Nil, main.p_object, section);  }  // 6
erase_section_key :: (main: *ConfigFile, section: string, key: string) { sys_call("ConfigFile", "erase_section_key", 3186203200, Nil, main.p_object, section, key);  }  // 7
load :: (main: *ConfigFile, path: string) -> Error { call_ret := cast(*Error) sys_call("ConfigFile", "load", 166001499, Error, main.p_object, path); return call_ret.*; }  // 8
parse :: (main: *ConfigFile, data: string) -> Error { call_ret := cast(*Error) sys_call("ConfigFile", "parse", 166001499, Error, main.p_object, data); return call_ret.*; }  // 9
save :: (main: *ConfigFile, path: string) -> Error { call_ret := cast(*Error) sys_call("ConfigFile", "save", 166001499, Error, main.p_object, path); return call_ret.*; }  // 10
encode_to_text :: (main: *ConfigFile) -> gstring { call_ret := cast(*gstring) sys_call("ConfigFile", "encode_to_text", 201670096, gstring, main.p_object); return call_ret.*; }  // 11
load_encrypted :: (main: *ConfigFile, path: string, key: PackedByteArray) -> Error { call_ret := cast(*Error) sys_call("ConfigFile", "load_encrypted", 887037711, Error, main.p_object, path, key); return call_ret.*; }  // 12
load_encrypted_pass :: (main: *ConfigFile, path: string, password: string) -> Error { call_ret := cast(*Error) sys_call("ConfigFile", "load_encrypted_pass", 852856452, Error, main.p_object, path, password); return call_ret.*; }  // 13
save_encrypted :: (main: *ConfigFile, path: string, key: PackedByteArray) -> Error { call_ret := cast(*Error) sys_call("ConfigFile", "save_encrypted", 887037711, Error, main.p_object, path, key); return call_ret.*; }  // 14
save_encrypted_pass :: (main: *ConfigFile, path: string, password: string) -> Error { call_ret := cast(*Error) sys_call("ConfigFile", "save_encrypted_pass", 852856452, Error, main.p_object, path, password); return call_ret.*; }  // 15
clear :: (main: *ConfigFile) { sys_call("ConfigFile", "clear", 3218959716, Nil, main.p_object);  }  // 16

get_cancel_button :: (main: *ConfirmationDialog) -> *Button { call_ret := cast(*Button) sys_call("ConfirmationDialog", "get_cancel_button", 1856205918, Button, main.p_object); return call_ret; }  // 0
set_cancel_button_text :: (main: *ConfirmationDialog, text: string) { sys_call("ConfirmationDialog", "set_cancel_button_text", 83702148, Nil, main.p_object, text);  }  // 1
get_cancel_button_text :: (main: *ConfirmationDialog) -> gstring { call_ret := cast(*gstring) sys_call("ConfirmationDialog", "get_cancel_button_text", 201670096, gstring, main.p_object); return call_ret.*; }  // 2

queue_sort :: (main: *Container) { sys_call("Container", "queue_sort", 3218959716, Nil, main.p_object);  }  // 2
fit_child_in_rect :: (main: *Container, child: Control, rect: Rect2) { sys_call("Container", "fit_child_in_rect", 1993438598, Nil, main.p_object, child, rect);  }  // 3

accept_event :: (main: *Control) { sys_call("Control", "accept_event", 3218959716, Nil, main.p_object);  }  // 9
get_minimum_size :: (main: *Control) -> Vector2 { call_ret := cast(*Vector2) sys_call("Control", "get_minimum_size", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 10
get_combined_minimum_size :: (main: *Control) -> Vector2 { call_ret := cast(*Vector2) sys_call("Control", "get_combined_minimum_size", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 11
set_anchors_preset :: (main: *Control, preset: Control.LayoutPreset) { sys_call("Control", "set_anchors_preset", 509135270, Nil, main.p_object, preset);  }  // 12
set_offsets_preset :: (main: *Control, preset: Control.LayoutPreset) { sys_call("Control", "set_offsets_preset", 3724524307, Nil, main.p_object, preset);  }  // 13
set_anchors_and_offsets_preset :: (main: *Control, preset: Control.LayoutPreset) { sys_call("Control", "set_anchors_and_offsets_preset", 3724524307, Nil, main.p_object, preset);  }  // 14
set_anchor :: (main: *Control, side: Side, anchor: float) { sys_call("Control", "set_anchor", 2302782885, Nil, main.p_object, side, anchor);  }  // 15
get_anchor :: (main: *Control, side: Side) -> float { call_ret := cast(*float) sys_call("Control", "get_anchor", 2869120046, float, main.p_object, side); return call_ret.*; }  // 16
set_offset :: (main: *Control, side: Side, offset: float) { sys_call("Control", "set_offset", 4290182280, Nil, main.p_object, side, offset);  }  // 17
get_offset :: (main: *Control, offset: Side) -> float { call_ret := cast(*float) sys_call("Control", "get_offset", 2869120046, float, main.p_object, offset); return call_ret.*; }  // 18
set_anchor_and_offset :: (main: *Control, side: Side, anchor: float, offset: float) { sys_call("Control", "set_anchor_and_offset", 4031722181, Nil, main.p_object, side, anchor, offset);  }  // 19
set_begin :: (main: *Control, position: Vector2) { sys_call("Control", "set_begin", 743155724, Nil, main.p_object, position);  }  // 20
set_end :: (main: *Control, position: Vector2) { sys_call("Control", "set_end", 743155724, Nil, main.p_object, position);  }  // 21
set_position :: (main: *Control, position: Vector2) { sys_call("Control", "set_position", 2436320129, Nil, main.p_object, position);  }  // 22
set_size :: (main: *Control, size: Vector2) { sys_call("Control", "set_size", 2436320129, Nil, main.p_object, size);  }  // 23
reset_size :: (main: *Control) { sys_call("Control", "reset_size", 3218959716, Nil, main.p_object);  }  // 24
set_custom_minimum_size :: (main: *Control, size: Vector2) { sys_call("Control", "set_custom_minimum_size", 743155724, Nil, main.p_object, size);  }  // 25
set_global_position :: (main: *Control, position: Vector2) { sys_call("Control", "set_global_position", 2436320129, Nil, main.p_object, position);  }  // 26
set_rotation :: (main: *Control, radians: float) { sys_call("Control", "set_rotation", 373806689, Nil, main.p_object, radians);  }  // 27
set_rotation_degrees :: (main: *Control, degrees: float) { sys_call("Control", "set_rotation_degrees", 373806689, Nil, main.p_object, degrees);  }  // 28
set_scale :: (main: *Control, scale: Vector2) { sys_call("Control", "set_scale", 743155724, Nil, main.p_object, scale);  }  // 29
set_pivot_offset :: (main: *Control, pivot_offset: Vector2) { sys_call("Control", "set_pivot_offset", 743155724, Nil, main.p_object, pivot_offset);  }  // 30
get_begin :: (main: *Control) -> Vector2 { call_ret := cast(*Vector2) sys_call("Control", "get_begin", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 31
get_end :: (main: *Control) -> Vector2 { call_ret := cast(*Vector2) sys_call("Control", "get_end", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 32
get_position :: (main: *Control) -> Vector2 { call_ret := cast(*Vector2) sys_call("Control", "get_position", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 33
get_size :: (main: *Control) -> Vector2 { call_ret := cast(*Vector2) sys_call("Control", "get_size", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 34
get_rotation :: (main: *Control) -> float { call_ret := cast(*float) sys_call("Control", "get_rotation", 1740695150, float, main.p_object); return call_ret.*; }  // 35
get_rotation_degrees :: (main: *Control) -> float { call_ret := cast(*float) sys_call("Control", "get_rotation_degrees", 1740695150, float, main.p_object); return call_ret.*; }  // 36
get_scale :: (main: *Control) -> Vector2 { call_ret := cast(*Vector2) sys_call("Control", "get_scale", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 37
get_pivot_offset :: (main: *Control) -> Vector2 { call_ret := cast(*Vector2) sys_call("Control", "get_pivot_offset", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 38
get_custom_minimum_size :: (main: *Control) -> Vector2 { call_ret := cast(*Vector2) sys_call("Control", "get_custom_minimum_size", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 39
get_parent_area_size :: (main: *Control) -> Vector2 { call_ret := cast(*Vector2) sys_call("Control", "get_parent_area_size", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 40
get_global_position :: (main: *Control) -> Vector2 { call_ret := cast(*Vector2) sys_call("Control", "get_global_position", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 41
get_screen_position :: (main: *Control) -> Vector2 { call_ret := cast(*Vector2) sys_call("Control", "get_screen_position", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 42
get_rect :: (main: *Control) -> Rect2 { call_ret := cast(*Rect2) sys_call("Control", "get_rect", 1639390495, Rect2, main.p_object); return call_ret.*; }  // 43
get_global_rect :: (main: *Control) -> Rect2 { call_ret := cast(*Rect2) sys_call("Control", "get_global_rect", 1639390495, Rect2, main.p_object); return call_ret.*; }  // 44
set_focus_mode :: (main: *Control, mode: Control.FocusMode) { sys_call("Control", "set_focus_mode", 3232914922, Nil, main.p_object, mode);  }  // 45
get_focus_mode :: (main: *Control) -> Control.FocusMode { call_ret := cast(*Control.FocusMode) sys_call("Control", "get_focus_mode", 2132829277, Control.FocusMode, main.p_object); return call_ret.*; }  // 46
has_focus :: (main: *Control) -> bool { call_ret := cast(*bool) sys_call("Control", "has_focus", 36873697, bool, main.p_object); return call_ret.*; }  // 47
grab_focus :: (main: *Control) { sys_call("Control", "grab_focus", 3218959716, Nil, main.p_object);  }  // 48
release_focus :: (main: *Control) { sys_call("Control", "release_focus", 3218959716, Nil, main.p_object);  }  // 49
find_prev_valid_focus :: (main: *Control) -> *Control { call_ret := cast(*Control) sys_call("Control", "find_prev_valid_focus", 2783021301, Control, main.p_object); return call_ret; }  // 50
find_next_valid_focus :: (main: *Control) -> *Control { call_ret := cast(*Control) sys_call("Control", "find_next_valid_focus", 2783021301, Control, main.p_object); return call_ret; }  // 51
find_valid_focus_neighbor :: (main: *Control, side: Side) -> *Control { call_ret := cast(*Control) sys_call("Control", "find_valid_focus_neighbor", 1543910170, Control, main.p_object, side); return call_ret; }  // 52
set_h_size_flags :: (main: *Control, flags: Control.SizeFlags) { sys_call("Control", "set_h_size_flags", 394851643, Nil, main.p_object, flags);  }  // 53
get_h_size_flags :: (main: *Control) -> Control.SizeFlags { call_ret := cast(*Control.SizeFlags) sys_call("Control", "get_h_size_flags", 3781367401, Control.SizeFlags, main.p_object); return call_ret.*; }  // 54
set_stretch_ratio :: (main: *Control, ratio: float) { sys_call("Control", "set_stretch_ratio", 373806689, Nil, main.p_object, ratio);  }  // 55
get_stretch_ratio :: (main: *Control) -> float { call_ret := cast(*float) sys_call("Control", "get_stretch_ratio", 1740695150, float, main.p_object); return call_ret.*; }  // 56
set_v_size_flags :: (main: *Control, flags: Control.SizeFlags) { sys_call("Control", "set_v_size_flags", 394851643, Nil, main.p_object, flags);  }  // 57
get_v_size_flags :: (main: *Control) -> Control.SizeFlags { call_ret := cast(*Control.SizeFlags) sys_call("Control", "get_v_size_flags", 3781367401, Control.SizeFlags, main.p_object); return call_ret.*; }  // 58
set_theme :: (main: *Control, theme: Theme) { sys_call("Control", "set_theme", 2326690814, Nil, main.p_object, theme);  }  // 59
get_theme :: (main: *Control) -> *Theme { call_ret := cast(*Theme) sys_call("Control", "get_theme", 3846893731, Theme, main.p_object); return call_ret; }  // 60
set_theme_type_variation :: (main: *Control, theme_type: string) { sys_call("Control", "set_theme_type_variation", 3304788590, Nil, main.p_object, theme_type);  }  // 61
get_theme_type_variation :: (main: *Control) -> StringName { call_ret := cast(*StringName) sys_call("Control", "get_theme_type_variation", 2002593661, StringName, main.p_object); return call_ret.*; }  // 62
begin_bulk_theme_override :: (main: *Control) { sys_call("Control", "begin_bulk_theme_override", 3218959716, Nil, main.p_object);  }  // 63
end_bulk_theme_override :: (main: *Control) { sys_call("Control", "end_bulk_theme_override", 3218959716, Nil, main.p_object);  }  // 64
add_theme_icon_override :: (main: *Control, name: string, texture: Texture2D) { sys_call("Control", "add_theme_icon_override", 1373065600, Nil, main.p_object, name, texture);  }  // 65
add_theme_stylebox_override :: (main: *Control, name: string, stylebox: StyleBox) { sys_call("Control", "add_theme_stylebox_override", 4188838905, Nil, main.p_object, name, stylebox);  }  // 66
add_theme_font_override :: (main: *Control, name: string, font: Font) { sys_call("Control", "add_theme_font_override", 3518018674, Nil, main.p_object, name, font);  }  // 67
add_theme_font_size_override :: (main: *Control, name: string, font_size: int) { sys_call("Control", "add_theme_font_size_override", 2415702435, Nil, main.p_object, name, font_size);  }  // 68
add_theme_color_override :: (main: *Control, name: string, color: Color) { sys_call("Control", "add_theme_color_override", 4260178595, Nil, main.p_object, name, color);  }  // 69
add_theme_constant_override :: (main: *Control, name: string, constant: int) { sys_call("Control", "add_theme_constant_override", 2415702435, Nil, main.p_object, name, constant);  }  // 70
remove_theme_icon_override :: (main: *Control, name: string) { sys_call("Control", "remove_theme_icon_override", 3304788590, Nil, main.p_object, name);  }  // 71
remove_theme_stylebox_override :: (main: *Control, name: string) { sys_call("Control", "remove_theme_stylebox_override", 3304788590, Nil, main.p_object, name);  }  // 72
remove_theme_font_override :: (main: *Control, name: string) { sys_call("Control", "remove_theme_font_override", 3304788590, Nil, main.p_object, name);  }  // 73
remove_theme_font_size_override :: (main: *Control, name: string) { sys_call("Control", "remove_theme_font_size_override", 3304788590, Nil, main.p_object, name);  }  // 74
remove_theme_color_override :: (main: *Control, name: string) { sys_call("Control", "remove_theme_color_override", 3304788590, Nil, main.p_object, name);  }  // 75
remove_theme_constant_override :: (main: *Control, name: string) { sys_call("Control", "remove_theme_constant_override", 3304788590, Nil, main.p_object, name);  }  // 76
get_theme_icon :: (main: *Control, name: string) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("Control", "get_theme_icon", 3163973443, Texture2D, main.p_object, name); return call_ret; }  // 77
get_theme_stylebox :: (main: *Control, name: string) -> *StyleBox { call_ret := cast(*StyleBox) sys_call("Control", "get_theme_stylebox", 604739069, StyleBox, main.p_object, name); return call_ret; }  // 78
get_theme_font :: (main: *Control, name: string) -> *Font { call_ret := cast(*Font) sys_call("Control", "get_theme_font", 2826986490, Font, main.p_object, name); return call_ret; }  // 79
get_theme_font_size :: (main: *Control, name: string) -> int { call_ret := cast(*int) sys_call("Control", "get_theme_font_size", 1327056374, int, main.p_object, name); return call_ret.*; }  // 80
get_theme_color :: (main: *Control, name: string) -> Color { call_ret := cast(*Color) sys_call("Control", "get_theme_color", 2798751242, Color, main.p_object, name); return call_ret.*; }  // 81
get_theme_constant :: (main: *Control, name: string) -> int { call_ret := cast(*int) sys_call("Control", "get_theme_constant", 1327056374, int, main.p_object, name); return call_ret.*; }  // 82
has_theme_icon_override :: (main: *Control, name: string) -> bool { call_ret := cast(*bool) sys_call("Control", "has_theme_icon_override", 2619796661, bool, main.p_object, name); return call_ret.*; }  // 83
has_theme_stylebox_override :: (main: *Control, name: string) -> bool { call_ret := cast(*bool) sys_call("Control", "has_theme_stylebox_override", 2619796661, bool, main.p_object, name); return call_ret.*; }  // 84
has_theme_font_override :: (main: *Control, name: string) -> bool { call_ret := cast(*bool) sys_call("Control", "has_theme_font_override", 2619796661, bool, main.p_object, name); return call_ret.*; }  // 85
has_theme_font_size_override :: (main: *Control, name: string) -> bool { call_ret := cast(*bool) sys_call("Control", "has_theme_font_size_override", 2619796661, bool, main.p_object, name); return call_ret.*; }  // 86
has_theme_color_override :: (main: *Control, name: string) -> bool { call_ret := cast(*bool) sys_call("Control", "has_theme_color_override", 2619796661, bool, main.p_object, name); return call_ret.*; }  // 87
has_theme_constant_override :: (main: *Control, name: string) -> bool { call_ret := cast(*bool) sys_call("Control", "has_theme_constant_override", 2619796661, bool, main.p_object, name); return call_ret.*; }  // 88
has_theme_icon :: (main: *Control, name: string) -> bool { call_ret := cast(*bool) sys_call("Control", "has_theme_icon", 866386512, bool, main.p_object, name); return call_ret.*; }  // 89
has_theme_stylebox :: (main: *Control, name: string) -> bool { call_ret := cast(*bool) sys_call("Control", "has_theme_stylebox", 866386512, bool, main.p_object, name); return call_ret.*; }  // 90
has_theme_font :: (main: *Control, name: string) -> bool { call_ret := cast(*bool) sys_call("Control", "has_theme_font", 866386512, bool, main.p_object, name); return call_ret.*; }  // 91
has_theme_font_size :: (main: *Control, name: string) -> bool { call_ret := cast(*bool) sys_call("Control", "has_theme_font_size", 866386512, bool, main.p_object, name); return call_ret.*; }  // 92
has_theme_color :: (main: *Control, name: string) -> bool { call_ret := cast(*bool) sys_call("Control", "has_theme_color", 866386512, bool, main.p_object, name); return call_ret.*; }  // 93
has_theme_constant :: (main: *Control, name: string) -> bool { call_ret := cast(*bool) sys_call("Control", "has_theme_constant", 866386512, bool, main.p_object, name); return call_ret.*; }  // 94
get_theme_default_base_scale :: (main: *Control) -> float { call_ret := cast(*float) sys_call("Control", "get_theme_default_base_scale", 1740695150, float, main.p_object); return call_ret.*; }  // 95
get_theme_default_font :: (main: *Control) -> *Font { call_ret := cast(*Font) sys_call("Control", "get_theme_default_font", 3229501585, Font, main.p_object); return call_ret; }  // 96
get_theme_default_font_size :: (main: *Control) -> int { call_ret := cast(*int) sys_call("Control", "get_theme_default_font_size", 3905245786, int, main.p_object); return call_ret.*; }  // 97
get_parent_control :: (main: *Control) -> *Control { call_ret := cast(*Control) sys_call("Control", "get_parent_control", 2783021301, Control, main.p_object); return call_ret; }  // 98
set_h_grow_direction :: (main: *Control, direction: Control.GrowDirection) { sys_call("Control", "set_h_grow_direction", 2022385301, Nil, main.p_object, direction);  }  // 99
get_h_grow_direction :: (main: *Control) -> Control.GrowDirection { call_ret := cast(*Control.GrowDirection) sys_call("Control", "get_h_grow_direction", 3635610155, Control.GrowDirection, main.p_object); return call_ret.*; }  // 100
set_v_grow_direction :: (main: *Control, direction: Control.GrowDirection) { sys_call("Control", "set_v_grow_direction", 2022385301, Nil, main.p_object, direction);  }  // 101
get_v_grow_direction :: (main: *Control) -> Control.GrowDirection { call_ret := cast(*Control.GrowDirection) sys_call("Control", "get_v_grow_direction", 3635610155, Control.GrowDirection, main.p_object); return call_ret.*; }  // 102
set_tooltip_auto_translate_mode :: (main: *Control, mode: Node.AutoTranslateMode) { sys_call("Control", "set_tooltip_auto_translate_mode", 776149714, Nil, main.p_object, mode);  }  // 103
get_tooltip_auto_translate_mode :: (main: *Control) -> Node.AutoTranslateMode { call_ret := cast(*Node.AutoTranslateMode) sys_call("Control", "get_tooltip_auto_translate_mode", 2498906432, Node.AutoTranslateMode, main.p_object); return call_ret.*; }  // 104
set_tooltip_text :: (main: *Control, hint: string) { sys_call("Control", "set_tooltip_text", 83702148, Nil, main.p_object, hint);  }  // 105
get_tooltip_text :: (main: *Control) -> gstring { call_ret := cast(*gstring) sys_call("Control", "get_tooltip_text", 201670096, gstring, main.p_object); return call_ret.*; }  // 106
get_tooltip :: (main: *Control) -> gstring { call_ret := cast(*gstring) sys_call("Control", "get_tooltip", 2895288280, gstring, main.p_object); return call_ret.*; }  // 107
set_default_cursor_shape :: (main: *Control, shape: Control.CursorShape) { sys_call("Control", "set_default_cursor_shape", 217062046, Nil, main.p_object, shape);  }  // 108
get_default_cursor_shape :: (main: *Control) -> Control.CursorShape { call_ret := cast(*Control.CursorShape) sys_call("Control", "get_default_cursor_shape", 2359535750, Control.CursorShape, main.p_object); return call_ret.*; }  // 109
get_cursor_shape :: (main: *Control) -> Control.CursorShape { call_ret := cast(*Control.CursorShape) sys_call("Control", "get_cursor_shape", 1395773853, Control.CursorShape, main.p_object); return call_ret.*; }  // 110
set_focus_neighbor :: (main: *Control, side: Side, neighbor: string) { sys_call("Control", "set_focus_neighbor", 2024461774, Nil, main.p_object, side, neighbor);  }  // 111
get_focus_neighbor :: (main: *Control, side: Side) -> NodePath { call_ret := cast(*NodePath) sys_call("Control", "get_focus_neighbor", 2757935761, NodePath, main.p_object, side); return call_ret.*; }  // 112
set_focus_next :: (main: *Control, next: string) { sys_call("Control", "set_focus_next", 1348162250, Nil, main.p_object, next);  }  // 113
get_focus_next :: (main: *Control) -> NodePath { call_ret := cast(*NodePath) sys_call("Control", "get_focus_next", 4075236667, NodePath, main.p_object); return call_ret.*; }  // 114
set_focus_previous :: (main: *Control, previous: string) { sys_call("Control", "set_focus_previous", 1348162250, Nil, main.p_object, previous);  }  // 115
get_focus_previous :: (main: *Control) -> NodePath { call_ret := cast(*NodePath) sys_call("Control", "get_focus_previous", 4075236667, NodePath, main.p_object); return call_ret.*; }  // 116
force_drag :: (main: *Control, data: Variant, preview: Control) { sys_call("Control", "force_drag", 3191844692, Nil, main.p_object, data, preview);  }  // 117
set_mouse_filter :: (main: *Control, filter: Control.MouseFilter) { sys_call("Control", "set_mouse_filter", 3891156122, Nil, main.p_object, filter);  }  // 118
get_mouse_filter :: (main: *Control) -> Control.MouseFilter { call_ret := cast(*Control.MouseFilter) sys_call("Control", "get_mouse_filter", 1572545674, Control.MouseFilter, main.p_object); return call_ret.*; }  // 119
set_force_pass_scroll_events :: (main: *Control, force_pass_scroll_events: bool) { sys_call("Control", "set_force_pass_scroll_events", 2586408642, Nil, main.p_object, force_pass_scroll_events);  }  // 120
is_force_pass_scroll_events :: (main: *Control) -> bool { call_ret := cast(*bool) sys_call("Control", "is_force_pass_scroll_events", 36873697, bool, main.p_object); return call_ret.*; }  // 121
set_clip_contents :: (main: *Control, enable: bool) { sys_call("Control", "set_clip_contents", 2586408642, Nil, main.p_object, enable);  }  // 122
is_clipping_contents :: (main: *Control) -> bool { call_ret := cast(*bool) sys_call("Control", "is_clipping_contents", 2240911060, bool, main.p_object); return call_ret.*; }  // 123
grab_click_focus :: (main: *Control) { sys_call("Control", "grab_click_focus", 3218959716, Nil, main.p_object);  }  // 124
set_drag_forwarding :: (main: *Control, drag_func: Callable, can_drop_func: Callable, drop_func: Callable) { sys_call("Control", "set_drag_forwarding", 1076571380, Nil, main.p_object, drag_func, can_drop_func, drop_func);  }  // 125
set_drag_preview :: (main: *Control, control: Control) { sys_call("Control", "set_drag_preview", 1496901182, Nil, main.p_object, control);  }  // 126
is_drag_successful :: (main: *Control) -> bool { call_ret := cast(*bool) sys_call("Control", "is_drag_successful", 36873697, bool, main.p_object); return call_ret.*; }  // 127
warp_mouse :: (main: *Control, position: Vector2) { sys_call("Control", "warp_mouse", 743155724, Nil, main.p_object, position);  }  // 128
set_shortcut_context :: (main: *Control, node: Node) { sys_call("Control", "set_shortcut_context", 1078189570, Nil, main.p_object, node);  }  // 129
get_shortcut_context :: (main: *Control) -> *Node { call_ret := cast(*Node) sys_call("Control", "get_shortcut_context", 3160264692, Node, main.p_object); return call_ret; }  // 130
update_minimum_size :: (main: *Control) { sys_call("Control", "update_minimum_size", 3218959716, Nil, main.p_object);  }  // 131
set_layout_direction :: (main: *Control, direction: Control.LayoutDirection) { sys_call("Control", "set_layout_direction", 3310692370, Nil, main.p_object, direction);  }  // 132
get_layout_direction :: (main: *Control) -> Control.LayoutDirection { call_ret := cast(*Control.LayoutDirection) sys_call("Control", "get_layout_direction", 1546772008, Control.LayoutDirection, main.p_object); return call_ret.*; }  // 133
is_layout_rtl :: (main: *Control) -> bool { call_ret := cast(*bool) sys_call("Control", "is_layout_rtl", 36873697, bool, main.p_object); return call_ret.*; }  // 134
set_auto_translate :: (main: *Control, enable: bool) { sys_call("Control", "set_auto_translate", 2586408642, Nil, main.p_object, enable);  }  // 135
is_auto_translating :: (main: *Control) -> bool { call_ret := cast(*bool) sys_call("Control", "is_auto_translating", 36873697, bool, main.p_object); return call_ret.*; }  // 136
set_localize_numeral_system :: (main: *Control, enable: bool) { sys_call("Control", "set_localize_numeral_system", 2586408642, Nil, main.p_object, enable);  }  // 137
is_localizing_numeral_system :: (main: *Control) -> bool { call_ret := cast(*bool) sys_call("Control", "is_localizing_numeral_system", 36873697, bool, main.p_object); return call_ret.*; }  // 138

set_point_cloud :: (main: *ConvexPolygonShape2D, point_cloud: PackedVector2Array) { sys_call("ConvexPolygonShape2D", "set_point_cloud", 1509147220, Nil, main.p_object, point_cloud);  }  // 0
set_points :: (main: *ConvexPolygonShape2D, points: PackedVector2Array) { sys_call("ConvexPolygonShape2D", "set_points", 1509147220, Nil, main.p_object, points);  }  // 1
get_points :: (main: *ConvexPolygonShape2D) -> PackedVector2Array { call_ret := cast(*PackedVector2Array) sys_call("ConvexPolygonShape2D", "get_points", 2961356807, PackedVector2Array, main.p_object); return call_ret.*; }  // 2

set_points :: (main: *ConvexPolygonShape3D, points: PackedVector3Array) { sys_call("ConvexPolygonShape3D", "set_points", 334873810, Nil, main.p_object, points);  }  // 0
get_points :: (main: *ConvexPolygonShape3D) -> PackedVector3Array { call_ret := cast(*PackedVector3Array) sys_call("ConvexPolygonShape3D", "get_points", 497664490, PackedVector3Array, main.p_object); return call_ret.*; }  // 1

generate_random_bytes :: (main: *Crypto, size: int) -> PackedByteArray { call_ret := cast(*PackedByteArray) sys_call("Crypto", "generate_random_bytes", 47165747, PackedByteArray, main.p_object, size); return call_ret.*; }  // 0
generate_rsa :: (main: *Crypto, size: int) -> *CryptoKey { call_ret := cast(*CryptoKey) sys_call("Crypto", "generate_rsa", 1237515462, CryptoKey, main.p_object, size); return call_ret; }  // 1
generate_self_signed_certificate :: (main: *Crypto, key: CryptoKey) -> *X509Certificate { call_ret := cast(*X509Certificate) sys_call("Crypto", "generate_self_signed_certificate", 492266173, X509Certificate, main.p_object, key); return call_ret; }  // 2
sign :: (main: *Crypto, hash_type: HashingContext.HashType, hash: PackedByteArray, key: CryptoKey) -> PackedByteArray { call_ret := cast(*PackedByteArray) sys_call("Crypto", "sign", 1673662703, PackedByteArray, main.p_object, hash_type, hash, key); return call_ret.*; }  // 3
verify :: (main: *Crypto, hash_type: HashingContext.HashType, hash: PackedByteArray, signature: PackedByteArray, key: CryptoKey) -> bool { call_ret := cast(*bool) sys_call("Crypto", "verify", 2805902225, bool, main.p_object, hash_type, hash, signature, key); return call_ret.*; }  // 4
encrypt :: (main: *Crypto, key: CryptoKey, plaintext: PackedByteArray) -> PackedByteArray { call_ret := cast(*PackedByteArray) sys_call("Crypto", "encrypt", 2361793670, PackedByteArray, main.p_object, key, plaintext); return call_ret.*; }  // 5
decrypt :: (main: *Crypto, key: CryptoKey, ciphertext: PackedByteArray) -> PackedByteArray { call_ret := cast(*PackedByteArray) sys_call("Crypto", "decrypt", 2361793670, PackedByteArray, main.p_object, key, ciphertext); return call_ret.*; }  // 6
hmac_digest :: (main: *Crypto, hash_type: HashingContext.HashType, key: PackedByteArray, msg: PackedByteArray) -> PackedByteArray { call_ret := cast(*PackedByteArray) sys_call("Crypto", "hmac_digest", 2368951203, PackedByteArray, main.p_object, hash_type, key, msg); return call_ret.*; }  // 7
constant_time_compare :: (main: *Crypto, trusted: PackedByteArray, received: PackedByteArray) -> bool { call_ret := cast(*bool) sys_call("Crypto", "constant_time_compare", 1024142237, bool, main.p_object, trusted, received); return call_ret.*; }  // 8

save :: (main: *CryptoKey, path: string) -> Error { call_ret := cast(*Error) sys_call("CryptoKey", "save", 885841341, Error, main.p_object, path); return call_ret.*; }  // 0
load :: (main: *CryptoKey, path: string) -> Error { call_ret := cast(*Error) sys_call("CryptoKey", "load", 885841341, Error, main.p_object, path); return call_ret.*; }  // 1
is_public_only :: (main: *CryptoKey) -> bool { call_ret := cast(*bool) sys_call("CryptoKey", "is_public_only", 36873697, bool, main.p_object); return call_ret.*; }  // 2
save_to_string :: (main: *CryptoKey) -> gstring { call_ret := cast(*gstring) sys_call("CryptoKey", "save_to_string", 32795936, gstring, main.p_object); return call_ret.*; }  // 3
load_from_string :: (main: *CryptoKey, string_key: string) -> Error { call_ret := cast(*Error) sys_call("CryptoKey", "load_from_string", 885841341, Error, main.p_object, string_key); return call_ret.*; }  // 4

create_placeholder :: (main: *Cubemap) -> *Resource { call_ret := cast(*Resource) sys_call("Cubemap", "create_placeholder", 121922552, Resource, main.p_object); return call_ret; }  // 0

create_placeholder :: (main: *CubemapArray) -> *Resource { call_ret := cast(*Resource) sys_call("CubemapArray", "create_placeholder", 121922552, Resource, main.p_object); return call_ret; }  // 0

get_point_count :: (main: *Curve) -> int { call_ret := cast(*int) sys_call("Curve", "get_point_count", 3905245786, int, main.p_object); return call_ret.*; }  // 0
set_point_count :: (main: *Curve, count: int) { sys_call("Curve", "set_point_count", 1286410249, Nil, main.p_object, count);  }  // 1
add_point :: (main: *Curve, position: Vector2) -> int { call_ret := cast(*int) sys_call("Curve", "add_point", 434072736, int, main.p_object, position); return call_ret.*; }  // 2
remove_point :: (main: *Curve, index: int) { sys_call("Curve", "remove_point", 1286410249, Nil, main.p_object, index);  }  // 3
clear_points :: (main: *Curve) { sys_call("Curve", "clear_points", 3218959716, Nil, main.p_object);  }  // 4
get_point_position :: (main: *Curve, index: int) -> Vector2 { call_ret := cast(*Vector2) sys_call("Curve", "get_point_position", 2299179447, Vector2, main.p_object, index); return call_ret.*; }  // 5
set_point_value :: (main: *Curve, index: int, y: float) { sys_call("Curve", "set_point_value", 1602489585, Nil, main.p_object, index, y);  }  // 6
set_point_offset :: (main: *Curve, index: int, offset: float) -> int { call_ret := cast(*int) sys_call("Curve", "set_point_offset", 3780573764, int, main.p_object, index, offset); return call_ret.*; }  // 7
sample :: (main: *Curve, offset: float) -> float { call_ret := cast(*float) sys_call("Curve", "sample", 3919130443, float, main.p_object, offset); return call_ret.*; }  // 8
sample_baked :: (main: *Curve, offset: float) -> float { call_ret := cast(*float) sys_call("Curve", "sample_baked", 3919130443, float, main.p_object, offset); return call_ret.*; }  // 9
get_point_left_tangent :: (main: *Curve, index: int) -> float { call_ret := cast(*float) sys_call("Curve", "get_point_left_tangent", 2339986948, float, main.p_object, index); return call_ret.*; }  // 10
get_point_right_tangent :: (main: *Curve, index: int) -> float { call_ret := cast(*float) sys_call("Curve", "get_point_right_tangent", 2339986948, float, main.p_object, index); return call_ret.*; }  // 11
get_point_left_mode :: (main: *Curve, index: int) -> Curve.TangentMode { call_ret := cast(*Curve.TangentMode) sys_call("Curve", "get_point_left_mode", 426950354, Curve.TangentMode, main.p_object, index); return call_ret.*; }  // 12
get_point_right_mode :: (main: *Curve, index: int) -> Curve.TangentMode { call_ret := cast(*Curve.TangentMode) sys_call("Curve", "get_point_right_mode", 426950354, Curve.TangentMode, main.p_object, index); return call_ret.*; }  // 13
set_point_left_tangent :: (main: *Curve, index: int, tangent: float) { sys_call("Curve", "set_point_left_tangent", 1602489585, Nil, main.p_object, index, tangent);  }  // 14
set_point_right_tangent :: (main: *Curve, index: int, tangent: float) { sys_call("Curve", "set_point_right_tangent", 1602489585, Nil, main.p_object, index, tangent);  }  // 15
set_point_left_mode :: (main: *Curve, index: int, mode: Curve.TangentMode) { sys_call("Curve", "set_point_left_mode", 1217242874, Nil, main.p_object, index, mode);  }  // 16
set_point_right_mode :: (main: *Curve, index: int, mode: Curve.TangentMode) { sys_call("Curve", "set_point_right_mode", 1217242874, Nil, main.p_object, index, mode);  }  // 17
get_min_value :: (main: *Curve) -> float { call_ret := cast(*float) sys_call("Curve", "get_min_value", 1740695150, float, main.p_object); return call_ret.*; }  // 18
set_min_value :: (main: *Curve, min: float) { sys_call("Curve", "set_min_value", 373806689, Nil, main.p_object, min);  }  // 19
get_max_value :: (main: *Curve) -> float { call_ret := cast(*float) sys_call("Curve", "get_max_value", 1740695150, float, main.p_object); return call_ret.*; }  // 20
set_max_value :: (main: *Curve, max: float) { sys_call("Curve", "set_max_value", 373806689, Nil, main.p_object, max);  }  // 21
get_value_range :: (main: *Curve) -> float { call_ret := cast(*float) sys_call("Curve", "get_value_range", 1740695150, float, main.p_object); return call_ret.*; }  // 22
get_min_domain :: (main: *Curve) -> float { call_ret := cast(*float) sys_call("Curve", "get_min_domain", 1740695150, float, main.p_object); return call_ret.*; }  // 23
set_min_domain :: (main: *Curve, min: float) { sys_call("Curve", "set_min_domain", 373806689, Nil, main.p_object, min);  }  // 24
get_max_domain :: (main: *Curve) -> float { call_ret := cast(*float) sys_call("Curve", "get_max_domain", 1740695150, float, main.p_object); return call_ret.*; }  // 25
set_max_domain :: (main: *Curve, max: float) { sys_call("Curve", "set_max_domain", 373806689, Nil, main.p_object, max);  }  // 26
get_domain_range :: (main: *Curve) -> float { call_ret := cast(*float) sys_call("Curve", "get_domain_range", 1740695150, float, main.p_object); return call_ret.*; }  // 27
clean_dupes :: (main: *Curve) { sys_call("Curve", "clean_dupes", 3218959716, Nil, main.p_object);  }  // 28
bake :: (main: *Curve) { sys_call("Curve", "bake", 3218959716, Nil, main.p_object);  }  // 29
get_bake_resolution :: (main: *Curve) -> int { call_ret := cast(*int) sys_call("Curve", "get_bake_resolution", 3905245786, int, main.p_object); return call_ret.*; }  // 30
set_bake_resolution :: (main: *Curve, resolution: int) { sys_call("Curve", "set_bake_resolution", 1286410249, Nil, main.p_object, resolution);  }  // 31

get_point_count :: (main: *Curve2D) -> int { call_ret := cast(*int) sys_call("Curve2D", "get_point_count", 3905245786, int, main.p_object); return call_ret.*; }  // 0
set_point_count :: (main: *Curve2D, count: int) { sys_call("Curve2D", "set_point_count", 1286410249, Nil, main.p_object, count);  }  // 1
add_point :: (main: *Curve2D, position: Vector2) { sys_call("Curve2D", "add_point", 4175465202, Nil, main.p_object, position);  }  // 2
set_point_position :: (main: *Curve2D, idx: int, position: Vector2) { sys_call("Curve2D", "set_point_position", 163021252, Nil, main.p_object, idx, position);  }  // 3
get_point_position :: (main: *Curve2D, idx: int) -> Vector2 { call_ret := cast(*Vector2) sys_call("Curve2D", "get_point_position", 2299179447, Vector2, main.p_object, idx); return call_ret.*; }  // 4
set_point_in :: (main: *Curve2D, idx: int, position: Vector2) { sys_call("Curve2D", "set_point_in", 163021252, Nil, main.p_object, idx, position);  }  // 5
get_point_in :: (main: *Curve2D, idx: int) -> Vector2 { call_ret := cast(*Vector2) sys_call("Curve2D", "get_point_in", 2299179447, Vector2, main.p_object, idx); return call_ret.*; }  // 6
set_point_out :: (main: *Curve2D, idx: int, position: Vector2) { sys_call("Curve2D", "set_point_out", 163021252, Nil, main.p_object, idx, position);  }  // 7
get_point_out :: (main: *Curve2D, idx: int) -> Vector2 { call_ret := cast(*Vector2) sys_call("Curve2D", "get_point_out", 2299179447, Vector2, main.p_object, idx); return call_ret.*; }  // 8
remove_point :: (main: *Curve2D, idx: int) { sys_call("Curve2D", "remove_point", 1286410249, Nil, main.p_object, idx);  }  // 9
clear_points :: (main: *Curve2D) { sys_call("Curve2D", "clear_points", 3218959716, Nil, main.p_object);  }  // 10
sample :: (main: *Curve2D, idx: int, t: float) -> Vector2 { call_ret := cast(*Vector2) sys_call("Curve2D", "sample", 26514310, Vector2, main.p_object, idx, t); return call_ret.*; }  // 11
samplef :: (main: *Curve2D, fofs: float) -> Vector2 { call_ret := cast(*Vector2) sys_call("Curve2D", "samplef", 3588506812, Vector2, main.p_object, fofs); return call_ret.*; }  // 12
set_bake_interval :: (main: *Curve2D, distance: float) { sys_call("Curve2D", "set_bake_interval", 373806689, Nil, main.p_object, distance);  }  // 13
get_bake_interval :: (main: *Curve2D) -> float { call_ret := cast(*float) sys_call("Curve2D", "get_bake_interval", 1740695150, float, main.p_object); return call_ret.*; }  // 14
get_baked_length :: (main: *Curve2D) -> float { call_ret := cast(*float) sys_call("Curve2D", "get_baked_length", 1740695150, float, main.p_object); return call_ret.*; }  // 15
sample_baked :: (main: *Curve2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("Curve2D", "sample_baked", 3464257706, Vector2, main.p_object); return call_ret.*; }  // 16
sample_baked_with_rotation :: (main: *Curve2D) -> Transform2D { call_ret := cast(*Transform2D) sys_call("Curve2D", "sample_baked_with_rotation", 3296056341, Transform2D, main.p_object); return call_ret.*; }  // 17
get_baked_points :: (main: *Curve2D) -> PackedVector2Array { call_ret := cast(*PackedVector2Array) sys_call("Curve2D", "get_baked_points", 2961356807, PackedVector2Array, main.p_object); return call_ret.*; }  // 18
get_closest_point :: (main: *Curve2D, to_point: Vector2) -> Vector2 { call_ret := cast(*Vector2) sys_call("Curve2D", "get_closest_point", 2656412154, Vector2, main.p_object, to_point); return call_ret.*; }  // 19
get_closest_offset :: (main: *Curve2D, to_point: Vector2) -> float { call_ret := cast(*float) sys_call("Curve2D", "get_closest_offset", 2276447920, float, main.p_object, to_point); return call_ret.*; }  // 20
tessellate :: (main: *Curve2D) -> PackedVector2Array { call_ret := cast(*PackedVector2Array) sys_call("Curve2D", "tessellate", 958145977, PackedVector2Array, main.p_object); return call_ret.*; }  // 21
tessellate_even_length :: (main: *Curve2D) -> PackedVector2Array { call_ret := cast(*PackedVector2Array) sys_call("Curve2D", "tessellate_even_length", 2319761637, PackedVector2Array, main.p_object); return call_ret.*; }  // 22

get_point_count :: (main: *Curve3D) -> int { call_ret := cast(*int) sys_call("Curve3D", "get_point_count", 3905245786, int, main.p_object); return call_ret.*; }  // 0
set_point_count :: (main: *Curve3D, count: int) { sys_call("Curve3D", "set_point_count", 1286410249, Nil, main.p_object, count);  }  // 1
add_point :: (main: *Curve3D, position: Vector3) { sys_call("Curve3D", "add_point", 2931053748, Nil, main.p_object, position);  }  // 2
set_point_position :: (main: *Curve3D, idx: int, position: Vector3) { sys_call("Curve3D", "set_point_position", 1530502735, Nil, main.p_object, idx, position);  }  // 3
get_point_position :: (main: *Curve3D, idx: int) -> Vector3 { call_ret := cast(*Vector3) sys_call("Curve3D", "get_point_position", 711720468, Vector3, main.p_object, idx); return call_ret.*; }  // 4
set_point_tilt :: (main: *Curve3D, idx: int, tilt: float) { sys_call("Curve3D", "set_point_tilt", 1602489585, Nil, main.p_object, idx, tilt);  }  // 5
get_point_tilt :: (main: *Curve3D, idx: int) -> float { call_ret := cast(*float) sys_call("Curve3D", "get_point_tilt", 2339986948, float, main.p_object, idx); return call_ret.*; }  // 6
set_point_in :: (main: *Curve3D, idx: int, position: Vector3) { sys_call("Curve3D", "set_point_in", 1530502735, Nil, main.p_object, idx, position);  }  // 7
get_point_in :: (main: *Curve3D, idx: int) -> Vector3 { call_ret := cast(*Vector3) sys_call("Curve3D", "get_point_in", 711720468, Vector3, main.p_object, idx); return call_ret.*; }  // 8
set_point_out :: (main: *Curve3D, idx: int, position: Vector3) { sys_call("Curve3D", "set_point_out", 1530502735, Nil, main.p_object, idx, position);  }  // 9
get_point_out :: (main: *Curve3D, idx: int) -> Vector3 { call_ret := cast(*Vector3) sys_call("Curve3D", "get_point_out", 711720468, Vector3, main.p_object, idx); return call_ret.*; }  // 10
remove_point :: (main: *Curve3D, idx: int) { sys_call("Curve3D", "remove_point", 1286410249, Nil, main.p_object, idx);  }  // 11
clear_points :: (main: *Curve3D) { sys_call("Curve3D", "clear_points", 3218959716, Nil, main.p_object);  }  // 12
sample :: (main: *Curve3D, idx: int, t: float) -> Vector3 { call_ret := cast(*Vector3) sys_call("Curve3D", "sample", 3285246857, Vector3, main.p_object, idx, t); return call_ret.*; }  // 13
samplef :: (main: *Curve3D, fofs: float) -> Vector3 { call_ret := cast(*Vector3) sys_call("Curve3D", "samplef", 2553580215, Vector3, main.p_object, fofs); return call_ret.*; }  // 14
set_closed :: (main: *Curve3D, closed: bool) { sys_call("Curve3D", "set_closed", 2586408642, Nil, main.p_object, closed);  }  // 15
is_closed :: (main: *Curve3D) -> bool { call_ret := cast(*bool) sys_call("Curve3D", "is_closed", 36873697, bool, main.p_object); return call_ret.*; }  // 16
set_bake_interval :: (main: *Curve3D, distance: float) { sys_call("Curve3D", "set_bake_interval", 373806689, Nil, main.p_object, distance);  }  // 17
get_bake_interval :: (main: *Curve3D) -> float { call_ret := cast(*float) sys_call("Curve3D", "get_bake_interval", 1740695150, float, main.p_object); return call_ret.*; }  // 18
set_up_vector_enabled :: (main: *Curve3D, enable: bool) { sys_call("Curve3D", "set_up_vector_enabled", 2586408642, Nil, main.p_object, enable);  }  // 19
is_up_vector_enabled :: (main: *Curve3D) -> bool { call_ret := cast(*bool) sys_call("Curve3D", "is_up_vector_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 20
get_baked_length :: (main: *Curve3D) -> float { call_ret := cast(*float) sys_call("Curve3D", "get_baked_length", 1740695150, float, main.p_object); return call_ret.*; }  // 21
sample_baked :: (main: *Curve3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("Curve3D", "sample_baked", 1350085894, Vector3, main.p_object); return call_ret.*; }  // 22
sample_baked_with_rotation :: (main: *Curve3D) -> Transform3D { call_ret := cast(*Transform3D) sys_call("Curve3D", "sample_baked_with_rotation", 1939359131, Transform3D, main.p_object); return call_ret.*; }  // 23
sample_baked_up_vector :: (main: *Curve3D, offset: float) -> Vector3 { call_ret := cast(*Vector3) sys_call("Curve3D", "sample_baked_up_vector", 1362627031, Vector3, main.p_object, offset); return call_ret.*; }  // 24
get_baked_points :: (main: *Curve3D) -> PackedVector3Array { call_ret := cast(*PackedVector3Array) sys_call("Curve3D", "get_baked_points", 497664490, PackedVector3Array, main.p_object); return call_ret.*; }  // 25
get_baked_tilts :: (main: *Curve3D) -> PackedFloat32Array { call_ret := cast(*PackedFloat32Array) sys_call("Curve3D", "get_baked_tilts", 675695659, PackedFloat32Array, main.p_object); return call_ret.*; }  // 26
get_baked_up_vectors :: (main: *Curve3D) -> PackedVector3Array { call_ret := cast(*PackedVector3Array) sys_call("Curve3D", "get_baked_up_vectors", 497664490, PackedVector3Array, main.p_object); return call_ret.*; }  // 27
get_closest_point :: (main: *Curve3D, to_point: Vector3) -> Vector3 { call_ret := cast(*Vector3) sys_call("Curve3D", "get_closest_point", 192990374, Vector3, main.p_object, to_point); return call_ret.*; }  // 28
get_closest_offset :: (main: *Curve3D, to_point: Vector3) -> float { call_ret := cast(*float) sys_call("Curve3D", "get_closest_offset", 1109078154, float, main.p_object, to_point); return call_ret.*; }  // 29
tessellate :: (main: *Curve3D) -> PackedVector3Array { call_ret := cast(*PackedVector3Array) sys_call("Curve3D", "tessellate", 1519759391, PackedVector3Array, main.p_object); return call_ret.*; }  // 30
tessellate_even_length :: (main: *Curve3D) -> PackedVector3Array { call_ret := cast(*PackedVector3Array) sys_call("Curve3D", "tessellate_even_length", 133237049, PackedVector3Array, main.p_object); return call_ret.*; }  // 31

set_width :: (main: *CurveTexture, width: int) { sys_call("CurveTexture", "set_width", 1286410249, Nil, main.p_object, width);  }  // 0
set_curve :: (main: *CurveTexture, curve: Curve) { sys_call("CurveTexture", "set_curve", 270443179, Nil, main.p_object, curve);  }  // 1
get_curve :: (main: *CurveTexture) -> *Curve { call_ret := cast(*Curve) sys_call("CurveTexture", "get_curve", 2460114913, Curve, main.p_object); return call_ret; }  // 2
set_texture_mode :: (main: *CurveTexture, texture_mode: CurveTexture.TextureMode) { sys_call("CurveTexture", "set_texture_mode", 1321955367, Nil, main.p_object, texture_mode);  }  // 3
get_texture_mode :: (main: *CurveTexture) -> CurveTexture.TextureMode { call_ret := cast(*CurveTexture.TextureMode) sys_call("CurveTexture", "get_texture_mode", 715756376, CurveTexture.TextureMode, main.p_object); return call_ret.*; }  // 4

set_width :: (main: *CurveXYZTexture, width: int) { sys_call("CurveXYZTexture", "set_width", 1286410249, Nil, main.p_object, width);  }  // 0
set_curve_x :: (main: *CurveXYZTexture, curve: Curve) { sys_call("CurveXYZTexture", "set_curve_x", 270443179, Nil, main.p_object, curve);  }  // 1
get_curve_x :: (main: *CurveXYZTexture) -> *Curve { call_ret := cast(*Curve) sys_call("CurveXYZTexture", "get_curve_x", 2460114913, Curve, main.p_object); return call_ret; }  // 2
set_curve_y :: (main: *CurveXYZTexture, curve: Curve) { sys_call("CurveXYZTexture", "set_curve_y", 270443179, Nil, main.p_object, curve);  }  // 3
get_curve_y :: (main: *CurveXYZTexture) -> *Curve { call_ret := cast(*Curve) sys_call("CurveXYZTexture", "get_curve_y", 2460114913, Curve, main.p_object); return call_ret; }  // 4
set_curve_z :: (main: *CurveXYZTexture, curve: Curve) { sys_call("CurveXYZTexture", "set_curve_z", 270443179, Nil, main.p_object, curve);  }  // 5
get_curve_z :: (main: *CurveXYZTexture) -> *Curve { call_ret := cast(*Curve) sys_call("CurveXYZTexture", "get_curve_z", 2460114913, Curve, main.p_object); return call_ret; }  // 6

set_top_radius :: (main: *CylinderMesh, radius: float) { sys_call("CylinderMesh", "set_top_radius", 373806689, Nil, main.p_object, radius);  }  // 0
get_top_radius :: (main: *CylinderMesh) -> float { call_ret := cast(*float) sys_call("CylinderMesh", "get_top_radius", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_bottom_radius :: (main: *CylinderMesh, radius: float) { sys_call("CylinderMesh", "set_bottom_radius", 373806689, Nil, main.p_object, radius);  }  // 2
get_bottom_radius :: (main: *CylinderMesh) -> float { call_ret := cast(*float) sys_call("CylinderMesh", "get_bottom_radius", 1740695150, float, main.p_object); return call_ret.*; }  // 3
set_height :: (main: *CylinderMesh, height: float) { sys_call("CylinderMesh", "set_height", 373806689, Nil, main.p_object, height);  }  // 4
get_height :: (main: *CylinderMesh) -> float { call_ret := cast(*float) sys_call("CylinderMesh", "get_height", 1740695150, float, main.p_object); return call_ret.*; }  // 5
set_radial_segments :: (main: *CylinderMesh, segments: int) { sys_call("CylinderMesh", "set_radial_segments", 1286410249, Nil, main.p_object, segments);  }  // 6
get_radial_segments :: (main: *CylinderMesh) -> int { call_ret := cast(*int) sys_call("CylinderMesh", "get_radial_segments", 3905245786, int, main.p_object); return call_ret.*; }  // 7
set_rings :: (main: *CylinderMesh, rings: int) { sys_call("CylinderMesh", "set_rings", 1286410249, Nil, main.p_object, rings);  }  // 8
get_rings :: (main: *CylinderMesh) -> int { call_ret := cast(*int) sys_call("CylinderMesh", "get_rings", 3905245786, int, main.p_object); return call_ret.*; }  // 9
set_cap_top :: (main: *CylinderMesh, cap_top: bool) { sys_call("CylinderMesh", "set_cap_top", 2586408642, Nil, main.p_object, cap_top);  }  // 10
is_cap_top :: (main: *CylinderMesh) -> bool { call_ret := cast(*bool) sys_call("CylinderMesh", "is_cap_top", 36873697, bool, main.p_object); return call_ret.*; }  // 11
set_cap_bottom :: (main: *CylinderMesh, cap_bottom: bool) { sys_call("CylinderMesh", "set_cap_bottom", 2586408642, Nil, main.p_object, cap_bottom);  }  // 12
is_cap_bottom :: (main: *CylinderMesh) -> bool { call_ret := cast(*bool) sys_call("CylinderMesh", "is_cap_bottom", 36873697, bool, main.p_object); return call_ret.*; }  // 13

set_radius :: (main: *CylinderShape3D, radius: float) { sys_call("CylinderShape3D", "set_radius", 373806689, Nil, main.p_object, radius);  }  // 0
get_radius :: (main: *CylinderShape3D) -> float { call_ret := cast(*float) sys_call("CylinderShape3D", "get_radius", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_height :: (main: *CylinderShape3D, height: float) { sys_call("CylinderShape3D", "set_height", 373806689, Nil, main.p_object, height);  }  // 2
get_height :: (main: *CylinderShape3D) -> float { call_ret := cast(*float) sys_call("CylinderShape3D", "get_height", 1740695150, float, main.p_object); return call_ret.*; }  // 3

setup :: (main: *DTLSServer, server_options: TLSOptions) -> Error { call_ret := cast(*Error) sys_call("DTLSServer", "setup", 1262296096, Error, main.p_object, server_options); return call_ret.*; }  // 0
take_connection :: (main: *DTLSServer, udp_peer: PacketPeerUDP) -> *PacketPeerDTLS { call_ret := cast(*PacketPeerDTLS) sys_call("DTLSServer", "take_connection", 3946580474, PacketPeerDTLS, main.p_object, udp_peer); return call_ret; }  // 1

set_length :: (main: *DampedSpringJoint2D, length: float) { sys_call("DampedSpringJoint2D", "set_length", 373806689, Nil, main.p_object, length);  }  // 0
get_length :: (main: *DampedSpringJoint2D) -> float { call_ret := cast(*float) sys_call("DampedSpringJoint2D", "get_length", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_rest_length :: (main: *DampedSpringJoint2D, rest_length: float) { sys_call("DampedSpringJoint2D", "set_rest_length", 373806689, Nil, main.p_object, rest_length);  }  // 2
get_rest_length :: (main: *DampedSpringJoint2D) -> float { call_ret := cast(*float) sys_call("DampedSpringJoint2D", "get_rest_length", 1740695150, float, main.p_object); return call_ret.*; }  // 3
set_stiffness :: (main: *DampedSpringJoint2D, stiffness: float) { sys_call("DampedSpringJoint2D", "set_stiffness", 373806689, Nil, main.p_object, stiffness);  }  // 4
get_stiffness :: (main: *DampedSpringJoint2D) -> float { call_ret := cast(*float) sys_call("DampedSpringJoint2D", "get_stiffness", 1740695150, float, main.p_object); return call_ret.*; }  // 5
set_damping :: (main: *DampedSpringJoint2D, damping: float) { sys_call("DampedSpringJoint2D", "set_damping", 373806689, Nil, main.p_object, damping);  }  // 6
get_damping :: (main: *DampedSpringJoint2D) -> float { call_ret := cast(*float) sys_call("DampedSpringJoint2D", "get_damping", 1740695150, float, main.p_object); return call_ret.*; }  // 7

set_size :: (main: *Decal, size: Vector3) { sys_call("Decal", "set_size", 3460891852, Nil, main.p_object, size);  }  // 0
get_size :: (main: *Decal) -> Vector3 { call_ret := cast(*Vector3) sys_call("Decal", "get_size", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 1
set_texture :: (main: *Decal, type: Decal.DecalTexture, texture: Texture2D) { sys_call("Decal", "set_texture", 2086764391, Nil, main.p_object, type, texture);  }  // 2
get_texture :: (main: *Decal, type: Decal.DecalTexture) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("Decal", "get_texture", 3244119503, Texture2D, main.p_object, type); return call_ret; }  // 3
set_emission_energy :: (main: *Decal, energy: float) { sys_call("Decal", "set_emission_energy", 373806689, Nil, main.p_object, energy);  }  // 4
get_emission_energy :: (main: *Decal) -> float { call_ret := cast(*float) sys_call("Decal", "get_emission_energy", 1740695150, float, main.p_object); return call_ret.*; }  // 5
set_albedo_mix :: (main: *Decal, energy: float) { sys_call("Decal", "set_albedo_mix", 373806689, Nil, main.p_object, energy);  }  // 6
get_albedo_mix :: (main: *Decal) -> float { call_ret := cast(*float) sys_call("Decal", "get_albedo_mix", 1740695150, float, main.p_object); return call_ret.*; }  // 7
set_modulate :: (main: *Decal, color: Color) { sys_call("Decal", "set_modulate", 2920490490, Nil, main.p_object, color);  }  // 8
get_modulate :: (main: *Decal) -> Color { call_ret := cast(*Color) sys_call("Decal", "get_modulate", 3444240500, Color, main.p_object); return call_ret.*; }  // 9
set_upper_fade :: (main: *Decal, fade: float) { sys_call("Decal", "set_upper_fade", 373806689, Nil, main.p_object, fade);  }  // 10
get_upper_fade :: (main: *Decal) -> float { call_ret := cast(*float) sys_call("Decal", "get_upper_fade", 1740695150, float, main.p_object); return call_ret.*; }  // 11
set_lower_fade :: (main: *Decal, fade: float) { sys_call("Decal", "set_lower_fade", 373806689, Nil, main.p_object, fade);  }  // 12
get_lower_fade :: (main: *Decal) -> float { call_ret := cast(*float) sys_call("Decal", "get_lower_fade", 1740695150, float, main.p_object); return call_ret.*; }  // 13
set_normal_fade :: (main: *Decal, fade: float) { sys_call("Decal", "set_normal_fade", 373806689, Nil, main.p_object, fade);  }  // 14
get_normal_fade :: (main: *Decal) -> float { call_ret := cast(*float) sys_call("Decal", "get_normal_fade", 1740695150, float, main.p_object); return call_ret.*; }  // 15
set_enable_distance_fade :: (main: *Decal, enable: bool) { sys_call("Decal", "set_enable_distance_fade", 2586408642, Nil, main.p_object, enable);  }  // 16
is_distance_fade_enabled :: (main: *Decal) -> bool { call_ret := cast(*bool) sys_call("Decal", "is_distance_fade_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 17
set_distance_fade_begin :: (main: *Decal, distance: float) { sys_call("Decal", "set_distance_fade_begin", 373806689, Nil, main.p_object, distance);  }  // 18
get_distance_fade_begin :: (main: *Decal) -> float { call_ret := cast(*float) sys_call("Decal", "get_distance_fade_begin", 1740695150, float, main.p_object); return call_ret.*; }  // 19
set_distance_fade_length :: (main: *Decal, distance: float) { sys_call("Decal", "set_distance_fade_length", 373806689, Nil, main.p_object, distance);  }  // 20
get_distance_fade_length :: (main: *Decal) -> float { call_ret := cast(*float) sys_call("Decal", "get_distance_fade_length", 1740695150, float, main.p_object); return call_ret.*; }  // 21
set_cull_mask :: (main: *Decal, mask: int) { sys_call("Decal", "set_cull_mask", 1286410249, Nil, main.p_object, mask);  }  // 22
get_cull_mask :: (main: *Decal) -> int { call_ret := cast(*int) sys_call("Decal", "get_cull_mask", 3905245786, int, main.p_object); return call_ret.*; }  // 23

open :: (main: *DirAccess, path: string) -> *DirAccess { call_ret := cast(*DirAccess) sys_call("DirAccess", "open", 1923528528, DirAccess, main.p_object, path); return call_ret; }  // 0
get_open_error :: (main: *DirAccess) -> Error { call_ret := cast(*Error) sys_call("DirAccess", "get_open_error", 166280745, Error, main.p_object); return call_ret.*; }  // 1
create_temp :: (main: *DirAccess) -> *DirAccess { call_ret := cast(*DirAccess) sys_call("DirAccess", "create_temp", 812913566, DirAccess, main.p_object); return call_ret; }  // 2
list_dir_begin :: (main: *DirAccess) -> Error { call_ret := cast(*Error) sys_call("DirAccess", "list_dir_begin", 166280745, Error, main.p_object); return call_ret.*; }  // 3
get_next :: (main: *DirAccess) -> gstring { call_ret := cast(*gstring) sys_call("DirAccess", "get_next", 2841200299, gstring, main.p_object); return call_ret.*; }  // 4
current_is_dir :: (main: *DirAccess) -> bool { call_ret := cast(*bool) sys_call("DirAccess", "current_is_dir", 36873697, bool, main.p_object); return call_ret.*; }  // 5
list_dir_end :: (main: *DirAccess) { sys_call("DirAccess", "list_dir_end", 3218959716, Nil, main.p_object);  }  // 6
get_files :: (main: *DirAccess) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("DirAccess", "get_files", 2981934095, PackedStringArray, main.p_object); return call_ret.*; }  // 7
get_files_at :: (main: *DirAccess, path: string) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("DirAccess", "get_files_at", 3538744774, PackedStringArray, main.p_object, path); return call_ret.*; }  // 8
get_directories :: (main: *DirAccess) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("DirAccess", "get_directories", 2981934095, PackedStringArray, main.p_object); return call_ret.*; }  // 9
get_directories_at :: (main: *DirAccess, path: string) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("DirAccess", "get_directories_at", 3538744774, PackedStringArray, main.p_object, path); return call_ret.*; }  // 10
get_drive_count :: (main: *DirAccess) -> int { call_ret := cast(*int) sys_call("DirAccess", "get_drive_count", 2455072627, int, main.p_object); return call_ret.*; }  // 11
get_drive_name :: (main: *DirAccess, idx: int) -> gstring { call_ret := cast(*gstring) sys_call("DirAccess", "get_drive_name", 990163283, gstring, main.p_object, idx); return call_ret.*; }  // 12
get_current_drive :: (main: *DirAccess) -> int { call_ret := cast(*int) sys_call("DirAccess", "get_current_drive", 2455072627, int, main.p_object); return call_ret.*; }  // 13
change_dir :: (main: *DirAccess, to_dir: string) -> Error { call_ret := cast(*Error) sys_call("DirAccess", "change_dir", 166001499, Error, main.p_object, to_dir); return call_ret.*; }  // 14
get_current_dir :: (main: *DirAccess) -> gstring { call_ret := cast(*gstring) sys_call("DirAccess", "get_current_dir", 1287308131, gstring, main.p_object); return call_ret.*; }  // 15
make_dir :: (main: *DirAccess, path: string) -> Error { call_ret := cast(*Error) sys_call("DirAccess", "make_dir", 166001499, Error, main.p_object, path); return call_ret.*; }  // 16
make_dir_absolute :: (main: *DirAccess, path: string) -> Error { call_ret := cast(*Error) sys_call("DirAccess", "make_dir_absolute", 166001499, Error, main.p_object, path); return call_ret.*; }  // 17
make_dir_recursive :: (main: *DirAccess, path: string) -> Error { call_ret := cast(*Error) sys_call("DirAccess", "make_dir_recursive", 166001499, Error, main.p_object, path); return call_ret.*; }  // 18
make_dir_recursive_absolute :: (main: *DirAccess, path: string) -> Error { call_ret := cast(*Error) sys_call("DirAccess", "make_dir_recursive_absolute", 166001499, Error, main.p_object, path); return call_ret.*; }  // 19
file_exists :: (main: *DirAccess, path: string) -> bool { call_ret := cast(*bool) sys_call("DirAccess", "file_exists", 2323990056, bool, main.p_object, path); return call_ret.*; }  // 20
dir_exists :: (main: *DirAccess, path: string) -> bool { call_ret := cast(*bool) sys_call("DirAccess", "dir_exists", 2323990056, bool, main.p_object, path); return call_ret.*; }  // 21
dir_exists_absolute :: (main: *DirAccess, path: string) -> bool { call_ret := cast(*bool) sys_call("DirAccess", "dir_exists_absolute", 2323990056, bool, main.p_object, path); return call_ret.*; }  // 22
get_space_left :: (main: *DirAccess) -> int { call_ret := cast(*int) sys_call("DirAccess", "get_space_left", 2455072627, int, main.p_object); return call_ret.*; }  // 23
copy :: (main: *DirAccess, from: string, to: string) -> Error { call_ret := cast(*Error) sys_call("DirAccess", "copy", 1063198817, Error, main.p_object, from, to); return call_ret.*; }  // 24
copy_absolute :: (main: *DirAccess, from: string, to: string) -> Error { call_ret := cast(*Error) sys_call("DirAccess", "copy_absolute", 1063198817, Error, main.p_object, from, to); return call_ret.*; }  // 25
rename :: (main: *DirAccess, from: string, to: string) -> Error { call_ret := cast(*Error) sys_call("DirAccess", "rename", 852856452, Error, main.p_object, from, to); return call_ret.*; }  // 26
rename_absolute :: (main: *DirAccess, from: string, to: string) -> Error { call_ret := cast(*Error) sys_call("DirAccess", "rename_absolute", 852856452, Error, main.p_object, from, to); return call_ret.*; }  // 27
_remove :: (main: *DirAccess, path: string) -> Error { call_ret := cast(*Error) sys_call("DirAccess", "_remove", 166001499, Error, main.p_object, path); return call_ret.*; }  // 28
remove_absolute :: (main: *DirAccess, path: string) -> Error { call_ret := cast(*Error) sys_call("DirAccess", "remove_absolute", 166001499, Error, main.p_object, path); return call_ret.*; }  // 29
is_link :: (main: *DirAccess, path: string) -> bool { call_ret := cast(*bool) sys_call("DirAccess", "is_link", 2323990056, bool, main.p_object, path); return call_ret.*; }  // 30
read_link :: (main: *DirAccess, path: string) -> gstring { call_ret := cast(*gstring) sys_call("DirAccess", "read_link", 1703090593, gstring, main.p_object, path); return call_ret.*; }  // 31
create_link :: (main: *DirAccess, source: string, target: string) -> Error { call_ret := cast(*Error) sys_call("DirAccess", "create_link", 852856452, Error, main.p_object, source, target); return call_ret.*; }  // 32
is_bundle :: (main: *DirAccess, path: string) -> bool { call_ret := cast(*bool) sys_call("DirAccess", "is_bundle", 3927539163, bool, main.p_object, path); return call_ret.*; }  // 33
set_include_navigational :: (main: *DirAccess, enable: bool) { sys_call("DirAccess", "set_include_navigational", 2586408642, Nil, main.p_object, enable);  }  // 34
get_include_navigational :: (main: *DirAccess) -> bool { call_ret := cast(*bool) sys_call("DirAccess", "get_include_navigational", 36873697, bool, main.p_object); return call_ret.*; }  // 35
set_include_hidden :: (main: *DirAccess, enable: bool) { sys_call("DirAccess", "set_include_hidden", 2586408642, Nil, main.p_object, enable);  }  // 36
get_include_hidden :: (main: *DirAccess) -> bool { call_ret := cast(*bool) sys_call("DirAccess", "get_include_hidden", 36873697, bool, main.p_object); return call_ret.*; }  // 37
is_case_sensitive :: (main: *DirAccess, path: string) -> bool { call_ret := cast(*bool) sys_call("DirAccess", "is_case_sensitive", 3927539163, bool, main.p_object, path); return call_ret.*; }  // 38

set_max_distance :: (main: *DirectionalLight2D, pixels: float) { sys_call("DirectionalLight2D", "set_max_distance", 373806689, Nil, main.p_object, pixels);  }  // 0
get_max_distance :: (main: *DirectionalLight2D) -> float { call_ret := cast(*float) sys_call("DirectionalLight2D", "get_max_distance", 1740695150, float, main.p_object); return call_ret.*; }  // 1

set_shadow_mode :: (main: *DirectionalLight3D, mode: DirectionalLight3D.ShadowMode) { sys_call("DirectionalLight3D", "set_shadow_mode", 1261211726, Nil, main.p_object, mode);  }  // 0
get_shadow_mode :: (main: *DirectionalLight3D) -> DirectionalLight3D.ShadowMode { call_ret := cast(*DirectionalLight3D.ShadowMode) sys_call("DirectionalLight3D", "get_shadow_mode", 2765228544, DirectionalLight3D.ShadowMode, main.p_object); return call_ret.*; }  // 1
set_blend_splits :: (main: *DirectionalLight3D, enabled: bool) { sys_call("DirectionalLight3D", "set_blend_splits", 2586408642, Nil, main.p_object, enabled);  }  // 2
is_blend_splits_enabled :: (main: *DirectionalLight3D) -> bool { call_ret := cast(*bool) sys_call("DirectionalLight3D", "is_blend_splits_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 3
set_sky_mode :: (main: *DirectionalLight3D, mode: DirectionalLight3D.SkyMode) { sys_call("DirectionalLight3D", "set_sky_mode", 2691194817, Nil, main.p_object, mode);  }  // 4
get_sky_mode :: (main: *DirectionalLight3D) -> DirectionalLight3D.SkyMode { call_ret := cast(*DirectionalLight3D.SkyMode) sys_call("DirectionalLight3D", "get_sky_mode", 3819982774, DirectionalLight3D.SkyMode, main.p_object); return call_ret.*; }  // 5

has_feature :: (main: *DisplayServer, feature: DisplayServer.Feature) -> bool { call_ret := cast(*bool) sys_call("DisplayServer", "has_feature", 334065950, bool, main.p_object, feature); return call_ret.*; }  // 0
get_name :: (main: *DisplayServer) -> gstring { call_ret := cast(*gstring) sys_call("DisplayServer", "get_name", 201670096, gstring, main.p_object); return call_ret.*; }  // 1
help_set_search_callbacks :: (main: *DisplayServer, search_callback: Callable, action_callback: Callable) { sys_call("DisplayServer", "help_set_search_callbacks", 1687350599, Nil, main.p_object, search_callback, action_callback);  }  // 2
global_menu_set_popup_callbacks :: (main: *DisplayServer, menu_root: string, open_callback: Callable, close_callback: Callable) { sys_call("DisplayServer", "global_menu_set_popup_callbacks", 3893727526, Nil, main.p_object, menu_root, open_callback, close_callback);  }  // 3
global_menu_add_submenu_item :: (main: *DisplayServer, menu_root: string, label: string, submenu: string) -> int { call_ret := cast(*int) sys_call("DisplayServer", "global_menu_add_submenu_item", 2828985934, int, main.p_object, menu_root, label, submenu); return call_ret.*; }  // 4
global_menu_add_item :: (main: *DisplayServer, menu_root: string, label: string) -> int { call_ret := cast(*int) sys_call("DisplayServer", "global_menu_add_item", 3616842746, int, main.p_object, menu_root, label); return call_ret.*; }  // 5
global_menu_add_check_item :: (main: *DisplayServer, menu_root: string, label: string) -> int { call_ret := cast(*int) sys_call("DisplayServer", "global_menu_add_check_item", 3616842746, int, main.p_object, menu_root, label); return call_ret.*; }  // 6
global_menu_add_icon_item :: (main: *DisplayServer, menu_root: string, icon: Texture2D, label: string) -> int { call_ret := cast(*int) sys_call("DisplayServer", "global_menu_add_icon_item", 3867083847, int, main.p_object, menu_root, icon, label); return call_ret.*; }  // 7
global_menu_add_icon_check_item :: (main: *DisplayServer, menu_root: string, icon: Texture2D, label: string) -> int { call_ret := cast(*int) sys_call("DisplayServer", "global_menu_add_icon_check_item", 3867083847, int, main.p_object, menu_root, icon, label); return call_ret.*; }  // 8
global_menu_add_radio_check_item :: (main: *DisplayServer, menu_root: string, label: string) -> int { call_ret := cast(*int) sys_call("DisplayServer", "global_menu_add_radio_check_item", 3616842746, int, main.p_object, menu_root, label); return call_ret.*; }  // 9
global_menu_add_icon_radio_check_item :: (main: *DisplayServer, menu_root: string, icon: Texture2D, label: string) -> int { call_ret := cast(*int) sys_call("DisplayServer", "global_menu_add_icon_radio_check_item", 3867083847, int, main.p_object, menu_root, icon, label); return call_ret.*; }  // 10
global_menu_add_multistate_item :: (main: *DisplayServer, menu_root: string, label: string, max_states: int, default_state: int) -> int { call_ret := cast(*int) sys_call("DisplayServer", "global_menu_add_multistate_item", 3297554655, int, main.p_object, menu_root, label, max_states, default_state); return call_ret.*; }  // 11
global_menu_add_separator :: (main: *DisplayServer, menu_root: string) -> int { call_ret := cast(*int) sys_call("DisplayServer", "global_menu_add_separator", 3214812433, int, main.p_object, menu_root); return call_ret.*; }  // 12
global_menu_get_item_index_from_text :: (main: *DisplayServer, menu_root: string, text: string) -> int { call_ret := cast(*int) sys_call("DisplayServer", "global_menu_get_item_index_from_text", 2878152881, int, main.p_object, menu_root, text); return call_ret.*; }  // 13
global_menu_get_item_index_from_tag :: (main: *DisplayServer, menu_root: string, tag: Variant) -> int { call_ret := cast(*int) sys_call("DisplayServer", "global_menu_get_item_index_from_tag", 2941063483, int, main.p_object, menu_root, tag); return call_ret.*; }  // 14
global_menu_is_item_checked :: (main: *DisplayServer, menu_root: string, idx: int) -> bool { call_ret := cast(*bool) sys_call("DisplayServer", "global_menu_is_item_checked", 3511468594, bool, main.p_object, menu_root, idx); return call_ret.*; }  // 15
global_menu_is_item_checkable :: (main: *DisplayServer, menu_root: string, idx: int) -> bool { call_ret := cast(*bool) sys_call("DisplayServer", "global_menu_is_item_checkable", 3511468594, bool, main.p_object, menu_root, idx); return call_ret.*; }  // 16
global_menu_is_item_radio_checkable :: (main: *DisplayServer, menu_root: string, idx: int) -> bool { call_ret := cast(*bool) sys_call("DisplayServer", "global_menu_is_item_radio_checkable", 3511468594, bool, main.p_object, menu_root, idx); return call_ret.*; }  // 17
global_menu_get_item_callback :: (main: *DisplayServer, menu_root: string, idx: int) -> Callable { call_ret := cast(*Callable) sys_call("DisplayServer", "global_menu_get_item_callback", 748666903, Callable, main.p_object, menu_root, idx); return call_ret.*; }  // 18
global_menu_get_item_key_callback :: (main: *DisplayServer, menu_root: string, idx: int) -> Callable { call_ret := cast(*Callable) sys_call("DisplayServer", "global_menu_get_item_key_callback", 748666903, Callable, main.p_object, menu_root, idx); return call_ret.*; }  // 19
global_menu_get_item_tag :: (main: *DisplayServer, menu_root: string, idx: int) -> Variant { call_ret := cast(*Variant) sys_call("DisplayServer", "global_menu_get_item_tag", 330672633, Variant, main.p_object, menu_root, idx); return call_ret.*; }  // 20
global_menu_get_item_text :: (main: *DisplayServer, menu_root: string, idx: int) -> gstring { call_ret := cast(*gstring) sys_call("DisplayServer", "global_menu_get_item_text", 591067909, gstring, main.p_object, menu_root, idx); return call_ret.*; }  // 21
global_menu_get_item_submenu :: (main: *DisplayServer, menu_root: string, idx: int) -> gstring { call_ret := cast(*gstring) sys_call("DisplayServer", "global_menu_get_item_submenu", 591067909, gstring, main.p_object, menu_root, idx); return call_ret.*; }  // 22
global_menu_get_item_accelerator :: (main: *DisplayServer, menu_root: string, idx: int) -> Key { call_ret := cast(*Key) sys_call("DisplayServer", "global_menu_get_item_accelerator", 936065394, Key, main.p_object, menu_root, idx); return call_ret.*; }  // 23
global_menu_is_item_disabled :: (main: *DisplayServer, menu_root: string, idx: int) -> bool { call_ret := cast(*bool) sys_call("DisplayServer", "global_menu_is_item_disabled", 3511468594, bool, main.p_object, menu_root, idx); return call_ret.*; }  // 24
global_menu_is_item_hidden :: (main: *DisplayServer, menu_root: string, idx: int) -> bool { call_ret := cast(*bool) sys_call("DisplayServer", "global_menu_is_item_hidden", 3511468594, bool, main.p_object, menu_root, idx); return call_ret.*; }  // 25
global_menu_get_item_tooltip :: (main: *DisplayServer, menu_root: string, idx: int) -> gstring { call_ret := cast(*gstring) sys_call("DisplayServer", "global_menu_get_item_tooltip", 591067909, gstring, main.p_object, menu_root, idx); return call_ret.*; }  // 26
global_menu_get_item_state :: (main: *DisplayServer, menu_root: string, idx: int) -> int { call_ret := cast(*int) sys_call("DisplayServer", "global_menu_get_item_state", 3422818498, int, main.p_object, menu_root, idx); return call_ret.*; }  // 27
global_menu_get_item_max_states :: (main: *DisplayServer, menu_root: string, idx: int) -> int { call_ret := cast(*int) sys_call("DisplayServer", "global_menu_get_item_max_states", 3422818498, int, main.p_object, menu_root, idx); return call_ret.*; }  // 28
global_menu_get_item_icon :: (main: *DisplayServer, menu_root: string, idx: int) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("DisplayServer", "global_menu_get_item_icon", 3591713183, Texture2D, main.p_object, menu_root, idx); return call_ret; }  // 29
global_menu_get_item_indentation_level :: (main: *DisplayServer, menu_root: string, idx: int) -> int { call_ret := cast(*int) sys_call("DisplayServer", "global_menu_get_item_indentation_level", 3422818498, int, main.p_object, menu_root, idx); return call_ret.*; }  // 30
global_menu_set_item_checked :: (main: *DisplayServer, menu_root: string, idx: int, checked: bool) { sys_call("DisplayServer", "global_menu_set_item_checked", 4108344793, Nil, main.p_object, menu_root, idx, checked);  }  // 31
global_menu_set_item_checkable :: (main: *DisplayServer, menu_root: string, idx: int, checkable: bool) { sys_call("DisplayServer", "global_menu_set_item_checkable", 4108344793, Nil, main.p_object, menu_root, idx, checkable);  }  // 32
global_menu_set_item_radio_checkable :: (main: *DisplayServer, menu_root: string, idx: int, checkable: bool) { sys_call("DisplayServer", "global_menu_set_item_radio_checkable", 4108344793, Nil, main.p_object, menu_root, idx, checkable);  }  // 33
global_menu_set_item_callback :: (main: *DisplayServer, menu_root: string, idx: int, callback: Callable) { sys_call("DisplayServer", "global_menu_set_item_callback", 3809915389, Nil, main.p_object, menu_root, idx, callback);  }  // 34
global_menu_set_item_hover_callbacks :: (main: *DisplayServer, menu_root: string, idx: int, callback: Callable) { sys_call("DisplayServer", "global_menu_set_item_hover_callbacks", 3809915389, Nil, main.p_object, menu_root, idx, callback);  }  // 35
global_menu_set_item_key_callback :: (main: *DisplayServer, menu_root: string, idx: int, key_callback: Callable) { sys_call("DisplayServer", "global_menu_set_item_key_callback", 3809915389, Nil, main.p_object, menu_root, idx, key_callback);  }  // 36
global_menu_set_item_tag :: (main: *DisplayServer, menu_root: string, idx: int, tag: Variant) { sys_call("DisplayServer", "global_menu_set_item_tag", 453659863, Nil, main.p_object, menu_root, idx, tag);  }  // 37
global_menu_set_item_text :: (main: *DisplayServer, menu_root: string, idx: int, text: string) { sys_call("DisplayServer", "global_menu_set_item_text", 965966136, Nil, main.p_object, menu_root, idx, text);  }  // 38
global_menu_set_item_submenu :: (main: *DisplayServer, menu_root: string, idx: int, submenu: string) { sys_call("DisplayServer", "global_menu_set_item_submenu", 965966136, Nil, main.p_object, menu_root, idx, submenu);  }  // 39
global_menu_set_item_accelerator :: (main: *DisplayServer, menu_root: string, idx: int, keycode: Key) { sys_call("DisplayServer", "global_menu_set_item_accelerator", 566943293, Nil, main.p_object, menu_root, idx, keycode);  }  // 40
global_menu_set_item_disabled :: (main: *DisplayServer, menu_root: string, idx: int, disabled: bool) { sys_call("DisplayServer", "global_menu_set_item_disabled", 4108344793, Nil, main.p_object, menu_root, idx, disabled);  }  // 41
global_menu_set_item_hidden :: (main: *DisplayServer, menu_root: string, idx: int, hidden: bool) { sys_call("DisplayServer", "global_menu_set_item_hidden", 4108344793, Nil, main.p_object, menu_root, idx, hidden);  }  // 42
global_menu_set_item_tooltip :: (main: *DisplayServer, menu_root: string, idx: int, tooltip: string) { sys_call("DisplayServer", "global_menu_set_item_tooltip", 965966136, Nil, main.p_object, menu_root, idx, tooltip);  }  // 43
global_menu_set_item_state :: (main: *DisplayServer, menu_root: string, idx: int, state: int) { sys_call("DisplayServer", "global_menu_set_item_state", 3474840532, Nil, main.p_object, menu_root, idx, state);  }  // 44
global_menu_set_item_max_states :: (main: *DisplayServer, menu_root: string, idx: int, max_states: int) { sys_call("DisplayServer", "global_menu_set_item_max_states", 3474840532, Nil, main.p_object, menu_root, idx, max_states);  }  // 45
global_menu_set_item_icon :: (main: *DisplayServer, menu_root: string, idx: int, icon: Texture2D) { sys_call("DisplayServer", "global_menu_set_item_icon", 3201338066, Nil, main.p_object, menu_root, idx, icon);  }  // 46
global_menu_set_item_indentation_level :: (main: *DisplayServer, menu_root: string, idx: int, level: int) { sys_call("DisplayServer", "global_menu_set_item_indentation_level", 3474840532, Nil, main.p_object, menu_root, idx, level);  }  // 47
global_menu_get_item_count :: (main: *DisplayServer, menu_root: string) -> int { call_ret := cast(*int) sys_call("DisplayServer", "global_menu_get_item_count", 1321353865, int, main.p_object, menu_root); return call_ret.*; }  // 48
global_menu_remove_item :: (main: *DisplayServer, menu_root: string, idx: int) { sys_call("DisplayServer", "global_menu_remove_item", 2956805083, Nil, main.p_object, menu_root, idx);  }  // 49
global_menu_clear :: (main: *DisplayServer, menu_root: string) { sys_call("DisplayServer", "global_menu_clear", 83702148, Nil, main.p_object, menu_root);  }  // 50
global_menu_get_system_menu_roots :: (main: *DisplayServer) -> Dictionary { call_ret := cast(*Dictionary) sys_call("DisplayServer", "global_menu_get_system_menu_roots", 3102165223, Dictionary, main.p_object); return call_ret.*; }  // 51
tts_is_speaking :: (main: *DisplayServer) -> bool { call_ret := cast(*bool) sys_call("DisplayServer", "tts_is_speaking", 36873697, bool, main.p_object); return call_ret.*; }  // 52
tts_is_paused :: (main: *DisplayServer) -> bool { call_ret := cast(*bool) sys_call("DisplayServer", "tts_is_paused", 36873697, bool, main.p_object); return call_ret.*; }  // 53
tts_get_voices :: (main: *DisplayServer) -> [] Dictionary { call_ret := cast(*[] Dictionary) sys_call("DisplayServer", "tts_get_voices", 3995934104, [] Dictionary, main.p_object); return call_ret.*; }  // 54
tts_get_voices_for_language :: (main: *DisplayServer, language: string) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("DisplayServer", "tts_get_voices_for_language", 4291131558, PackedStringArray, main.p_object, language); return call_ret.*; }  // 55
tts_speak :: (main: *DisplayServer, text: string, voice: string) { sys_call("DisplayServer", "tts_speak", 903992738, Nil, main.p_object, text, voice);  }  // 56
tts_pause :: (main: *DisplayServer) { sys_call("DisplayServer", "tts_pause", 3218959716, Nil, main.p_object);  }  // 57
tts_resume :: (main: *DisplayServer) { sys_call("DisplayServer", "tts_resume", 3218959716, Nil, main.p_object);  }  // 58
tts_stop :: (main: *DisplayServer) { sys_call("DisplayServer", "tts_stop", 3218959716, Nil, main.p_object);  }  // 59
tts_set_utterance_callback :: (main: *DisplayServer, event: DisplayServer.TTSUtteranceEvent, callable: Callable) { sys_call("DisplayServer", "tts_set_utterance_callback", 109679083, Nil, main.p_object, event, callable);  }  // 60
is_dark_mode_supported :: (main: *DisplayServer) -> bool { call_ret := cast(*bool) sys_call("DisplayServer", "is_dark_mode_supported", 36873697, bool, main.p_object); return call_ret.*; }  // 61
is_dark_mode :: (main: *DisplayServer) -> bool { call_ret := cast(*bool) sys_call("DisplayServer", "is_dark_mode", 36873697, bool, main.p_object); return call_ret.*; }  // 62
get_accent_color :: (main: *DisplayServer) -> Color { call_ret := cast(*Color) sys_call("DisplayServer", "get_accent_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 63
get_base_color :: (main: *DisplayServer) -> Color { call_ret := cast(*Color) sys_call("DisplayServer", "get_base_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 64
set_system_theme_change_callback :: (main: *DisplayServer, callable: Callable) { sys_call("DisplayServer", "set_system_theme_change_callback", 1611583062, Nil, main.p_object, callable);  }  // 65
mouse_set_mode :: (main: *DisplayServer, mouse_mode: DisplayServer.MouseMode) { sys_call("DisplayServer", "mouse_set_mode", 348288463, Nil, main.p_object, mouse_mode);  }  // 66
mouse_get_mode :: (main: *DisplayServer) -> DisplayServer.MouseMode { call_ret := cast(*DisplayServer.MouseMode) sys_call("DisplayServer", "mouse_get_mode", 1353961651, DisplayServer.MouseMode, main.p_object); return call_ret.*; }  // 67
warp_mouse :: (main: *DisplayServer, position: Vector2i) { sys_call("DisplayServer", "warp_mouse", 1130785943, Nil, main.p_object, position);  }  // 68
mouse_get_position :: (main: *DisplayServer) -> Vector2i { call_ret := cast(*Vector2i) sys_call("DisplayServer", "mouse_get_position", 3690982128, Vector2i, main.p_object); return call_ret.*; }  // 69
mouse_get_button_state :: (main: *DisplayServer) -> MouseButtonMask { call_ret := cast(*MouseButtonMask) sys_call("DisplayServer", "mouse_get_button_state", 2512161324, MouseButtonMask, main.p_object); return call_ret.*; }  // 70
clipboard_set :: (main: *DisplayServer, clipboard: string) { sys_call("DisplayServer", "clipboard_set", 83702148, Nil, main.p_object, clipboard);  }  // 71
clipboard_get :: (main: *DisplayServer) -> gstring { call_ret := cast(*gstring) sys_call("DisplayServer", "clipboard_get", 201670096, gstring, main.p_object); return call_ret.*; }  // 72
clipboard_get_image :: (main: *DisplayServer) -> *Image { call_ret := cast(*Image) sys_call("DisplayServer", "clipboard_get_image", 4190603485, Image, main.p_object); return call_ret; }  // 73
clipboard_has :: (main: *DisplayServer) -> bool { call_ret := cast(*bool) sys_call("DisplayServer", "clipboard_has", 36873697, bool, main.p_object); return call_ret.*; }  // 74
clipboard_has_image :: (main: *DisplayServer) -> bool { call_ret := cast(*bool) sys_call("DisplayServer", "clipboard_has_image", 36873697, bool, main.p_object); return call_ret.*; }  // 75
clipboard_set_primary :: (main: *DisplayServer, clipboard_primary: string) { sys_call("DisplayServer", "clipboard_set_primary", 83702148, Nil, main.p_object, clipboard_primary);  }  // 76
clipboard_get_primary :: (main: *DisplayServer) -> gstring { call_ret := cast(*gstring) sys_call("DisplayServer", "clipboard_get_primary", 201670096, gstring, main.p_object); return call_ret.*; }  // 77
get_display_cutouts :: (main: *DisplayServer) -> [] Rect2 { call_ret := cast(*[] Rect2) sys_call("DisplayServer", "get_display_cutouts", 3995934104, [] Rect2, main.p_object); return call_ret.*; }  // 78
get_display_safe_area :: (main: *DisplayServer) -> Rect2i { call_ret := cast(*Rect2i) sys_call("DisplayServer", "get_display_safe_area", 410525958, Rect2i, main.p_object); return call_ret.*; }  // 79
get_screen_count :: (main: *DisplayServer) -> int { call_ret := cast(*int) sys_call("DisplayServer", "get_screen_count", 3905245786, int, main.p_object); return call_ret.*; }  // 80
get_primary_screen :: (main: *DisplayServer) -> int { call_ret := cast(*int) sys_call("DisplayServer", "get_primary_screen", 3905245786, int, main.p_object); return call_ret.*; }  // 81
get_keyboard_focus_screen :: (main: *DisplayServer) -> int { call_ret := cast(*int) sys_call("DisplayServer", "get_keyboard_focus_screen", 3905245786, int, main.p_object); return call_ret.*; }  // 82
get_screen_from_rect :: (main: *DisplayServer, rect: Rect2) -> int { call_ret := cast(*int) sys_call("DisplayServer", "get_screen_from_rect", 741354659, int, main.p_object, rect); return call_ret.*; }  // 83
screen_get_position :: (main: *DisplayServer) -> Vector2i { call_ret := cast(*Vector2i) sys_call("DisplayServer", "screen_get_position", 1725937825, Vector2i, main.p_object); return call_ret.*; }  // 84
screen_get_size :: (main: *DisplayServer) -> Vector2i { call_ret := cast(*Vector2i) sys_call("DisplayServer", "screen_get_size", 1725937825, Vector2i, main.p_object); return call_ret.*; }  // 85
screen_get_usable_rect :: (main: *DisplayServer) -> Rect2i { call_ret := cast(*Rect2i) sys_call("DisplayServer", "screen_get_usable_rect", 2439012528, Rect2i, main.p_object); return call_ret.*; }  // 86
screen_get_dpi :: (main: *DisplayServer) -> int { call_ret := cast(*int) sys_call("DisplayServer", "screen_get_dpi", 181039630, int, main.p_object); return call_ret.*; }  // 87
screen_get_scale :: (main: *DisplayServer) -> float { call_ret := cast(*float) sys_call("DisplayServer", "screen_get_scale", 909105437, float, main.p_object); return call_ret.*; }  // 88
is_touchscreen_available :: (main: *DisplayServer) -> bool { call_ret := cast(*bool) sys_call("DisplayServer", "is_touchscreen_available", 36873697, bool, main.p_object); return call_ret.*; }  // 89
screen_get_max_scale :: (main: *DisplayServer) -> float { call_ret := cast(*float) sys_call("DisplayServer", "screen_get_max_scale", 1740695150, float, main.p_object); return call_ret.*; }  // 90
screen_get_refresh_rate :: (main: *DisplayServer) -> float { call_ret := cast(*float) sys_call("DisplayServer", "screen_get_refresh_rate", 909105437, float, main.p_object); return call_ret.*; }  // 91
screen_get_pixel :: (main: *DisplayServer, position: Vector2i) -> Color { call_ret := cast(*Color) sys_call("DisplayServer", "screen_get_pixel", 1532707496, Color, main.p_object, position); return call_ret.*; }  // 92
screen_get_image :: (main: *DisplayServer) -> *Image { call_ret := cast(*Image) sys_call("DisplayServer", "screen_get_image", 3813388802, Image, main.p_object); return call_ret; }  // 93
screen_get_image_rect :: (main: *DisplayServer, rect: Rect2i) -> *Image { call_ret := cast(*Image) sys_call("DisplayServer", "screen_get_image_rect", 2601441065, Image, main.p_object, rect); return call_ret; }  // 94
screen_set_orientation :: (main: *DisplayServer, orientation: DisplayServer.ScreenOrientation) { sys_call("DisplayServer", "screen_set_orientation", 2211511631, Nil, main.p_object, orientation);  }  // 95
screen_get_orientation :: (main: *DisplayServer) -> DisplayServer.ScreenOrientation { call_ret := cast(*DisplayServer.ScreenOrientation) sys_call("DisplayServer", "screen_get_orientation", 133818562, DisplayServer.ScreenOrientation, main.p_object); return call_ret.*; }  // 96
screen_set_keep_on :: (main: *DisplayServer, enable: bool) { sys_call("DisplayServer", "screen_set_keep_on", 2586408642, Nil, main.p_object, enable);  }  // 97
screen_is_kept_on :: (main: *DisplayServer) -> bool { call_ret := cast(*bool) sys_call("DisplayServer", "screen_is_kept_on", 36873697, bool, main.p_object); return call_ret.*; }  // 98
get_window_list :: (main: *DisplayServer) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("DisplayServer", "get_window_list", 1930428628, PackedInt32Array, main.p_object); return call_ret.*; }  // 99
get_window_at_screen_position :: (main: *DisplayServer, position: Vector2i) -> int { call_ret := cast(*int) sys_call("DisplayServer", "get_window_at_screen_position", 2485466453, int, main.p_object, position); return call_ret.*; }  // 100
window_get_native_handle :: (main: *DisplayServer, handle_type: DisplayServer.HandleType) -> int { call_ret := cast(*int) sys_call("DisplayServer", "window_get_native_handle", 1096425680, int, main.p_object, handle_type); return call_ret.*; }  // 101
window_get_active_popup :: (main: *DisplayServer) -> int { call_ret := cast(*int) sys_call("DisplayServer", "window_get_active_popup", 3905245786, int, main.p_object); return call_ret.*; }  // 102
window_set_popup_safe_rect :: (main: *DisplayServer, window: int, rect: Rect2i) { sys_call("DisplayServer", "window_set_popup_safe_rect", 3317281434, Nil, main.p_object, window, rect);  }  // 103
window_get_popup_safe_rect :: (main: *DisplayServer, window: int) -> Rect2i { call_ret := cast(*Rect2i) sys_call("DisplayServer", "window_get_popup_safe_rect", 2161169500, Rect2i, main.p_object, window); return call_ret.*; }  // 104
window_set_title :: (main: *DisplayServer, title: string) { sys_call("DisplayServer", "window_set_title", 441246282, Nil, main.p_object, title);  }  // 105
window_get_title_size :: (main: *DisplayServer, title: string) -> Vector2i { call_ret := cast(*Vector2i) sys_call("DisplayServer", "window_get_title_size", 2925301799, Vector2i, main.p_object, title); return call_ret.*; }  // 106
window_set_mouse_passthrough :: (main: *DisplayServer, region: PackedVector2Array) { sys_call("DisplayServer", "window_set_mouse_passthrough", 1993637420, Nil, main.p_object, region);  }  // 107
window_get_current_screen :: (main: *DisplayServer) -> int { call_ret := cast(*int) sys_call("DisplayServer", "window_get_current_screen", 1591665591, int, main.p_object); return call_ret.*; }  // 108
window_set_current_screen :: (main: *DisplayServer, screen: int) { sys_call("DisplayServer", "window_set_current_screen", 2230941749, Nil, main.p_object, screen);  }  // 109
window_get_position :: (main: *DisplayServer) -> Vector2i { call_ret := cast(*Vector2i) sys_call("DisplayServer", "window_get_position", 763922886, Vector2i, main.p_object); return call_ret.*; }  // 110
window_get_position_with_decorations :: (main: *DisplayServer) -> Vector2i { call_ret := cast(*Vector2i) sys_call("DisplayServer", "window_get_position_with_decorations", 763922886, Vector2i, main.p_object); return call_ret.*; }  // 111
window_set_position :: (main: *DisplayServer, position: Vector2i) { sys_call("DisplayServer", "window_set_position", 2019273902, Nil, main.p_object, position);  }  // 112
window_get_size :: (main: *DisplayServer) -> Vector2i { call_ret := cast(*Vector2i) sys_call("DisplayServer", "window_get_size", 763922886, Vector2i, main.p_object); return call_ret.*; }  // 113
window_set_size :: (main: *DisplayServer, size: Vector2i) { sys_call("DisplayServer", "window_set_size", 2019273902, Nil, main.p_object, size);  }  // 114
window_set_rect_changed_callback :: (main: *DisplayServer, callback: Callable) { sys_call("DisplayServer", "window_set_rect_changed_callback", 1091192925, Nil, main.p_object, callback);  }  // 115
window_set_window_event_callback :: (main: *DisplayServer, callback: Callable) { sys_call("DisplayServer", "window_set_window_event_callback", 1091192925, Nil, main.p_object, callback);  }  // 116
window_set_input_event_callback :: (main: *DisplayServer, callback: Callable) { sys_call("DisplayServer", "window_set_input_event_callback", 1091192925, Nil, main.p_object, callback);  }  // 117
window_set_input_text_callback :: (main: *DisplayServer, callback: Callable) { sys_call("DisplayServer", "window_set_input_text_callback", 1091192925, Nil, main.p_object, callback);  }  // 118
window_set_drop_files_callback :: (main: *DisplayServer, callback: Callable) { sys_call("DisplayServer", "window_set_drop_files_callback", 1091192925, Nil, main.p_object, callback);  }  // 119
window_get_attached_instance_id :: (main: *DisplayServer) -> int { call_ret := cast(*int) sys_call("DisplayServer", "window_get_attached_instance_id", 1591665591, int, main.p_object); return call_ret.*; }  // 120
window_get_max_size :: (main: *DisplayServer) -> Vector2i { call_ret := cast(*Vector2i) sys_call("DisplayServer", "window_get_max_size", 763922886, Vector2i, main.p_object); return call_ret.*; }  // 121
window_set_max_size :: (main: *DisplayServer, max_size: Vector2i) { sys_call("DisplayServer", "window_set_max_size", 2019273902, Nil, main.p_object, max_size);  }  // 122
window_get_min_size :: (main: *DisplayServer) -> Vector2i { call_ret := cast(*Vector2i) sys_call("DisplayServer", "window_get_min_size", 763922886, Vector2i, main.p_object); return call_ret.*; }  // 123
window_set_min_size :: (main: *DisplayServer, min_size: Vector2i) { sys_call("DisplayServer", "window_set_min_size", 2019273902, Nil, main.p_object, min_size);  }  // 124
window_get_size_with_decorations :: (main: *DisplayServer) -> Vector2i { call_ret := cast(*Vector2i) sys_call("DisplayServer", "window_get_size_with_decorations", 763922886, Vector2i, main.p_object); return call_ret.*; }  // 125
window_get_mode :: (main: *DisplayServer) -> DisplayServer.WindowMode { call_ret := cast(*DisplayServer.WindowMode) sys_call("DisplayServer", "window_get_mode", 2185728461, DisplayServer.WindowMode, main.p_object); return call_ret.*; }  // 126
window_set_mode :: (main: *DisplayServer, mode: DisplayServer.WindowMode) { sys_call("DisplayServer", "window_set_mode", 1319965401, Nil, main.p_object, mode);  }  // 127
window_set_flag :: (main: *DisplayServer, flag: DisplayServer.WindowFlags, enabled: bool) { sys_call("DisplayServer", "window_set_flag", 254894155, Nil, main.p_object, flag, enabled);  }  // 128
window_get_flag :: (main: *DisplayServer, flag: DisplayServer.WindowFlags) -> bool { call_ret := cast(*bool) sys_call("DisplayServer", "window_get_flag", 802816991, bool, main.p_object, flag); return call_ret.*; }  // 129
window_set_window_buttons_offset :: (main: *DisplayServer, offset: Vector2i) { sys_call("DisplayServer", "window_set_window_buttons_offset", 2019273902, Nil, main.p_object, offset);  }  // 130
window_get_safe_title_margins :: (main: *DisplayServer) -> Vector3i { call_ret := cast(*Vector3i) sys_call("DisplayServer", "window_get_safe_title_margins", 2295066620, Vector3i, main.p_object); return call_ret.*; }  // 131
window_request_attention :: (main: *DisplayServer) { sys_call("DisplayServer", "window_request_attention", 1995695955, Nil, main.p_object);  }  // 132
window_move_to_foreground :: (main: *DisplayServer) { sys_call("DisplayServer", "window_move_to_foreground", 1995695955, Nil, main.p_object);  }  // 133
window_is_focused :: (main: *DisplayServer) -> bool { call_ret := cast(*bool) sys_call("DisplayServer", "window_is_focused", 1051549951, bool, main.p_object); return call_ret.*; }  // 134
window_can_draw :: (main: *DisplayServer) -> bool { call_ret := cast(*bool) sys_call("DisplayServer", "window_can_draw", 1051549951, bool, main.p_object); return call_ret.*; }  // 135
window_set_transient :: (main: *DisplayServer, window_id: int, parent_window_id: int) { sys_call("DisplayServer", "window_set_transient", 3937882851, Nil, main.p_object, window_id, parent_window_id);  }  // 136
window_set_exclusive :: (main: *DisplayServer, window_id: int, exclusive: bool) { sys_call("DisplayServer", "window_set_exclusive", 300928843, Nil, main.p_object, window_id, exclusive);  }  // 137
window_set_ime_active :: (main: *DisplayServer, active: bool) { sys_call("DisplayServer", "window_set_ime_active", 1661950165, Nil, main.p_object, active);  }  // 138
window_set_ime_position :: (main: *DisplayServer, position: Vector2i) { sys_call("DisplayServer", "window_set_ime_position", 2019273902, Nil, main.p_object, position);  }  // 139
window_set_vsync_mode :: (main: *DisplayServer, vsync_mode: DisplayServer.VSyncMode) { sys_call("DisplayServer", "window_set_vsync_mode", 2179333492, Nil, main.p_object, vsync_mode);  }  // 140
window_get_vsync_mode :: (main: *DisplayServer) -> DisplayServer.VSyncMode { call_ret := cast(*DisplayServer.VSyncMode) sys_call("DisplayServer", "window_get_vsync_mode", 578873795, DisplayServer.VSyncMode, main.p_object); return call_ret.*; }  // 141
window_is_maximize_allowed :: (main: *DisplayServer) -> bool { call_ret := cast(*bool) sys_call("DisplayServer", "window_is_maximize_allowed", 1051549951, bool, main.p_object); return call_ret.*; }  // 142
window_maximize_on_title_dbl_click :: (main: *DisplayServer) -> bool { call_ret := cast(*bool) sys_call("DisplayServer", "window_maximize_on_title_dbl_click", 36873697, bool, main.p_object); return call_ret.*; }  // 143
window_minimize_on_title_dbl_click :: (main: *DisplayServer) -> bool { call_ret := cast(*bool) sys_call("DisplayServer", "window_minimize_on_title_dbl_click", 36873697, bool, main.p_object); return call_ret.*; }  // 144
window_start_drag :: (main: *DisplayServer) { sys_call("DisplayServer", "window_start_drag", 1995695955, Nil, main.p_object);  }  // 145
window_start_resize :: (main: *DisplayServer, edge: DisplayServer.WindowResizeEdge) { sys_call("DisplayServer", "window_start_resize", 4009722312, Nil, main.p_object, edge);  }  // 146
ime_get_selection :: (main: *DisplayServer) -> Vector2i { call_ret := cast(*Vector2i) sys_call("DisplayServer", "ime_get_selection", 3690982128, Vector2i, main.p_object); return call_ret.*; }  // 147
ime_get_text :: (main: *DisplayServer) -> gstring { call_ret := cast(*gstring) sys_call("DisplayServer", "ime_get_text", 201670096, gstring, main.p_object); return call_ret.*; }  // 148
virtual_keyboard_show :: (main: *DisplayServer, existing_text: string) { sys_call("DisplayServer", "virtual_keyboard_show", 3042891259, Nil, main.p_object, existing_text);  }  // 149
virtual_keyboard_hide :: (main: *DisplayServer) { sys_call("DisplayServer", "virtual_keyboard_hide", 3218959716, Nil, main.p_object);  }  // 150
virtual_keyboard_get_height :: (main: *DisplayServer) -> int { call_ret := cast(*int) sys_call("DisplayServer", "virtual_keyboard_get_height", 3905245786, int, main.p_object); return call_ret.*; }  // 151
has_hardware_keyboard :: (main: *DisplayServer) -> bool { call_ret := cast(*bool) sys_call("DisplayServer", "has_hardware_keyboard", 36873697, bool, main.p_object); return call_ret.*; }  // 152
cursor_set_shape :: (main: *DisplayServer, shape: DisplayServer.CursorShape) { sys_call("DisplayServer", "cursor_set_shape", 2026291549, Nil, main.p_object, shape);  }  // 153
cursor_get_shape :: (main: *DisplayServer) -> DisplayServer.CursorShape { call_ret := cast(*DisplayServer.CursorShape) sys_call("DisplayServer", "cursor_get_shape", 1087724927, DisplayServer.CursorShape, main.p_object); return call_ret.*; }  // 154
cursor_set_custom_image :: (main: *DisplayServer, cursor: Resource) { sys_call("DisplayServer", "cursor_set_custom_image", 1816663697, Nil, main.p_object, cursor);  }  // 155
get_swap_cancel_ok :: (main: *DisplayServer) -> bool { call_ret := cast(*bool) sys_call("DisplayServer", "get_swap_cancel_ok", 2240911060, bool, main.p_object); return call_ret.*; }  // 156
enable_for_stealing_focus :: (main: *DisplayServer, process_id: int) { sys_call("DisplayServer", "enable_for_stealing_focus", 1286410249, Nil, main.p_object, process_id);  }  // 157
dialog_show :: (main: *DisplayServer, title: string, description: string, buttons: PackedStringArray, callback: Callable) -> Error { call_ret := cast(*Error) sys_call("DisplayServer", "dialog_show", 4115553226, Error, main.p_object, title, description, buttons, callback); return call_ret.*; }  // 158
dialog_input_text :: (main: *DisplayServer, title: string, description: string, existing_text: string, callback: Callable) -> Error { call_ret := cast(*Error) sys_call("DisplayServer", "dialog_input_text", 3088703427, Error, main.p_object, title, description, existing_text, callback); return call_ret.*; }  // 159
file_dialog_show :: (main: *DisplayServer, title: string, current_directory: string, filename: string, show_hidden: bool, mode: DisplayServer.FileDialogMode, filters: PackedStringArray, callback: Callable) -> Error { call_ret := cast(*Error) sys_call("DisplayServer", "file_dialog_show", 1531299078, Error, main.p_object, title, current_directory, filename, show_hidden, mode, filters, callback); return call_ret.*; }  // 160
file_dialog_with_options_show :: (main: *DisplayServer, title: string, current_directory: string, root: string, filename: string, show_hidden: bool, mode: DisplayServer.FileDialogMode, filters: PackedStringArray, options: [] Dictionary, callback: Callable) -> Error { call_ret := cast(*Error) sys_call("DisplayServer", "file_dialog_with_options_show", 1305318754, Error, main.p_object, title, current_directory, root, filename, show_hidden, mode, filters, options, callback); return call_ret.*; }  // 161
beep :: (main: *DisplayServer) { sys_call("DisplayServer", "beep", 4051624405, Nil, main.p_object);  }  // 162
keyboard_get_layout_count :: (main: *DisplayServer) -> int { call_ret := cast(*int) sys_call("DisplayServer", "keyboard_get_layout_count", 3905245786, int, main.p_object); return call_ret.*; }  // 163
keyboard_get_current_layout :: (main: *DisplayServer) -> int { call_ret := cast(*int) sys_call("DisplayServer", "keyboard_get_current_layout", 3905245786, int, main.p_object); return call_ret.*; }  // 164
keyboard_set_current_layout :: (main: *DisplayServer, index: int) { sys_call("DisplayServer", "keyboard_set_current_layout", 1286410249, Nil, main.p_object, index);  }  // 165
keyboard_get_layout_language :: (main: *DisplayServer, index: int) -> gstring { call_ret := cast(*gstring) sys_call("DisplayServer", "keyboard_get_layout_language", 844755477, gstring, main.p_object, index); return call_ret.*; }  // 166
keyboard_get_layout_name :: (main: *DisplayServer, index: int) -> gstring { call_ret := cast(*gstring) sys_call("DisplayServer", "keyboard_get_layout_name", 844755477, gstring, main.p_object, index); return call_ret.*; }  // 167
keyboard_get_keycode_from_physical :: (main: *DisplayServer, keycode: Key) -> Key { call_ret := cast(*Key) sys_call("DisplayServer", "keyboard_get_keycode_from_physical", 3447613187, Key, main.p_object, keycode); return call_ret.*; }  // 168
keyboard_get_label_from_physical :: (main: *DisplayServer, keycode: Key) -> Key { call_ret := cast(*Key) sys_call("DisplayServer", "keyboard_get_label_from_physical", 3447613187, Key, main.p_object, keycode); return call_ret.*; }  // 169
show_emoji_and_symbol_picker :: (main: *DisplayServer) { sys_call("DisplayServer", "show_emoji_and_symbol_picker", 4051624405, Nil, main.p_object);  }  // 170
process_events :: (main: *DisplayServer) { sys_call("DisplayServer", "process_events", 3218959716, Nil, main.p_object);  }  // 171
force_process_and_drop_events :: (main: *DisplayServer) { sys_call("DisplayServer", "force_process_and_drop_events", 3218959716, Nil, main.p_object);  }  // 172
set_native_icon :: (main: *DisplayServer, filename: string) { sys_call("DisplayServer", "set_native_icon", 83702148, Nil, main.p_object, filename);  }  // 173
set_icon :: (main: *DisplayServer, image: Image) { sys_call("DisplayServer", "set_icon", 532598488, Nil, main.p_object, image);  }  // 174
create_status_indicator :: (main: *DisplayServer, icon: Texture2D, tooltip: string, callback: Callable) -> int { call_ret := cast(*int) sys_call("DisplayServer", "create_status_indicator", 1904285171, int, main.p_object, icon, tooltip, callback); return call_ret.*; }  // 175
status_indicator_set_icon :: (main: *DisplayServer, id: int, icon: Texture2D) { sys_call("DisplayServer", "status_indicator_set_icon", 666127730, Nil, main.p_object, id, icon);  }  // 176
status_indicator_set_tooltip :: (main: *DisplayServer, id: int, tooltip: string) { sys_call("DisplayServer", "status_indicator_set_tooltip", 501894301, Nil, main.p_object, id, tooltip);  }  // 177
status_indicator_set_menu :: (main: *DisplayServer, id: int, menu_rid: RID) { sys_call("DisplayServer", "status_indicator_set_menu", 4040184819, Nil, main.p_object, id, menu_rid);  }  // 178
status_indicator_set_callback :: (main: *DisplayServer, id: int, callback: Callable) { sys_call("DisplayServer", "status_indicator_set_callback", 957362965, Nil, main.p_object, id, callback);  }  // 179
status_indicator_get_rect :: (main: *DisplayServer, id: int) -> Rect2 { call_ret := cast(*Rect2) sys_call("DisplayServer", "status_indicator_get_rect", 3327874267, Rect2, main.p_object, id); return call_ret.*; }  // 180
delete_status_indicator :: (main: *DisplayServer, id: int) { sys_call("DisplayServer", "delete_status_indicator", 1286410249, Nil, main.p_object, id);  }  // 181
tablet_get_driver_count :: (main: *DisplayServer) -> int { call_ret := cast(*int) sys_call("DisplayServer", "tablet_get_driver_count", 3905245786, int, main.p_object); return call_ret.*; }  // 182
tablet_get_driver_name :: (main: *DisplayServer, idx: int) -> gstring { call_ret := cast(*gstring) sys_call("DisplayServer", "tablet_get_driver_name", 844755477, gstring, main.p_object, idx); return call_ret.*; }  // 183
tablet_get_current_driver :: (main: *DisplayServer) -> gstring { call_ret := cast(*gstring) sys_call("DisplayServer", "tablet_get_current_driver", 201670096, gstring, main.p_object); return call_ret.*; }  // 184
tablet_set_current_driver :: (main: *DisplayServer, name: string) { sys_call("DisplayServer", "tablet_set_current_driver", 83702148, Nil, main.p_object, name);  }  // 185
is_window_transparency_available :: (main: *DisplayServer) -> bool { call_ret := cast(*bool) sys_call("DisplayServer", "is_window_transparency_available", 36873697, bool, main.p_object); return call_ret.*; }  // 186
register_additional_output :: (main: *DisplayServer, object: Object) { sys_call("DisplayServer", "register_additional_output", 3975164845, Nil, main.p_object, object);  }  // 187
unregister_additional_output :: (main: *DisplayServer, object: Object) { sys_call("DisplayServer", "unregister_additional_output", 3975164845, Nil, main.p_object, object);  }  // 188
has_additional_outputs :: (main: *DisplayServer) -> bool { call_ret := cast(*bool) sys_call("DisplayServer", "has_additional_outputs", 36873697, bool, main.p_object); return call_ret.*; }  // 189

create_host_bound :: (main: *ENetConnection, bind_address: string, bind_port: int) -> Error { call_ret := cast(*Error) sys_call("ENetConnection", "create_host_bound", 1515002313, Error, main.p_object, bind_address, bind_port); return call_ret.*; }  // 0
create_host :: (main: *ENetConnection) -> Error { call_ret := cast(*Error) sys_call("ENetConnection", "create_host", 117198950, Error, main.p_object); return call_ret.*; }  // 1
destroy :: (main: *ENetConnection) { sys_call("ENetConnection", "destroy", 3218959716, Nil, main.p_object);  }  // 2
connect_to_host :: (main: *ENetConnection, address: string, port: int) -> *ENetPacketPeer { call_ret := cast(*ENetPacketPeer) sys_call("ENetConnection", "connect_to_host", 2171300490, ENetPacketPeer, main.p_object, address, port); return call_ret; }  // 3
service :: (main: *ENetConnection) -> Array { call_ret := cast(*Array) sys_call("ENetConnection", "service", 2402345344, Array, main.p_object); return call_ret.*; }  // 4
flush :: (main: *ENetConnection) { sys_call("ENetConnection", "flush", 3218959716, Nil, main.p_object);  }  // 5
bandwidth_limit :: (main: *ENetConnection) { sys_call("ENetConnection", "bandwidth_limit", 2302169788, Nil, main.p_object);  }  // 6
channel_limit :: (main: *ENetConnection, limit: int) { sys_call("ENetConnection", "channel_limit", 1286410249, Nil, main.p_object, limit);  }  // 7
broadcast :: (main: *ENetConnection, channel: int, packet: PackedByteArray, flags: int) { sys_call("ENetConnection", "broadcast", 2772371345, Nil, main.p_object, channel, packet, flags);  }  // 8
compress :: (main: *ENetConnection, mode: ENetConnection.CompressionMode) { sys_call("ENetConnection", "compress", 2660215187, Nil, main.p_object, mode);  }  // 9
dtls_server_setup :: (main: *ENetConnection, server_options: TLSOptions) -> Error { call_ret := cast(*Error) sys_call("ENetConnection", "dtls_server_setup", 1262296096, Error, main.p_object, server_options); return call_ret.*; }  // 10
dtls_client_setup :: (main: *ENetConnection, hostname: string) -> Error { call_ret := cast(*Error) sys_call("ENetConnection", "dtls_client_setup", 1966198364, Error, main.p_object, hostname); return call_ret.*; }  // 11
refuse_new_connections :: (main: *ENetConnection, refuse: bool) { sys_call("ENetConnection", "refuse_new_connections", 2586408642, Nil, main.p_object, refuse);  }  // 12
pop_statistic :: (main: *ENetConnection, statistic: ENetConnection.HostStatistic) -> float { call_ret := cast(*float) sys_call("ENetConnection", "pop_statistic", 2166904170, float, main.p_object, statistic); return call_ret.*; }  // 13
get_max_channels :: (main: *ENetConnection) -> int { call_ret := cast(*int) sys_call("ENetConnection", "get_max_channels", 3905245786, int, main.p_object); return call_ret.*; }  // 14
get_local_port :: (main: *ENetConnection) -> int { call_ret := cast(*int) sys_call("ENetConnection", "get_local_port", 3905245786, int, main.p_object); return call_ret.*; }  // 15
get_peers :: (main: *ENetConnection) -> [] ENetPacketPeer { call_ret := cast(*[] ENetPacketPeer) sys_call("ENetConnection", "get_peers", 2915620761, [] ENetPacketPeer, main.p_object); return call_ret.*; }  // 16
socket_send :: (main: *ENetConnection, destination_address: string, destination_port: int, packet: PackedByteArray) { sys_call("ENetConnection", "socket_send", 1100646812, Nil, main.p_object, destination_address, destination_port, packet);  }  // 17

create_server :: (main: *ENetMultiplayerPeer, port: int) -> Error { call_ret := cast(*Error) sys_call("ENetMultiplayerPeer", "create_server", 2917761309, Error, main.p_object, port); return call_ret.*; }  // 0
create_client :: (main: *ENetMultiplayerPeer, address: string, port: int) -> Error { call_ret := cast(*Error) sys_call("ENetMultiplayerPeer", "create_client", 2327163476, Error, main.p_object, address, port); return call_ret.*; }  // 1
create_mesh :: (main: *ENetMultiplayerPeer, unique_id: int) -> Error { call_ret := cast(*Error) sys_call("ENetMultiplayerPeer", "create_mesh", 844576869, Error, main.p_object, unique_id); return call_ret.*; }  // 2
add_mesh_peer :: (main: *ENetMultiplayerPeer, peer_id: int, host: ENetConnection) -> Error { call_ret := cast(*Error) sys_call("ENetMultiplayerPeer", "add_mesh_peer", 1293458335, Error, main.p_object, peer_id, host); return call_ret.*; }  // 3
set_bind_ip :: (main: *ENetMultiplayerPeer, ip: string) { sys_call("ENetMultiplayerPeer", "set_bind_ip", 83702148, Nil, main.p_object, ip);  }  // 4
get_host :: (main: *ENetMultiplayerPeer) -> *ENetConnection { call_ret := cast(*ENetConnection) sys_call("ENetMultiplayerPeer", "get_host", 4103238886, ENetConnection, main.p_object); return call_ret; }  // 5
get_peer :: (main: *ENetMultiplayerPeer, id: int) -> *ENetPacketPeer { call_ret := cast(*ENetPacketPeer) sys_call("ENetMultiplayerPeer", "get_peer", 3793311544, ENetPacketPeer, main.p_object, id); return call_ret; }  // 6

peer_disconnect :: (main: *ENetPacketPeer) { sys_call("ENetPacketPeer", "peer_disconnect", 1995695955, Nil, main.p_object);  }  // 0
peer_disconnect_later :: (main: *ENetPacketPeer) { sys_call("ENetPacketPeer", "peer_disconnect_later", 1995695955, Nil, main.p_object);  }  // 1
peer_disconnect_now :: (main: *ENetPacketPeer) { sys_call("ENetPacketPeer", "peer_disconnect_now", 1995695955, Nil, main.p_object);  }  // 2
ping :: (main: *ENetPacketPeer) { sys_call("ENetPacketPeer", "ping", 3218959716, Nil, main.p_object);  }  // 3
ping_interval :: (main: *ENetPacketPeer, ping_interval: int) { sys_call("ENetPacketPeer", "ping_interval", 1286410249, Nil, main.p_object, ping_interval);  }  // 4
reset :: (main: *ENetPacketPeer) { sys_call("ENetPacketPeer", "reset", 3218959716, Nil, main.p_object);  }  // 5
send :: (main: *ENetPacketPeer, channel: int, packet: PackedByteArray, flags: int) -> Error { call_ret := cast(*Error) sys_call("ENetPacketPeer", "send", 120522849, Error, main.p_object, channel, packet, flags); return call_ret.*; }  // 6
throttle_configure :: (main: *ENetPacketPeer, interval: int, acceleration: int, deceleration: int) { sys_call("ENetPacketPeer", "throttle_configure", 1649997291, Nil, main.p_object, interval, acceleration, deceleration);  }  // 7
set_timeout :: (main: *ENetPacketPeer, timeout: int, timeout_min: int, timeout_max: int) { sys_call("ENetPacketPeer", "set_timeout", 1649997291, Nil, main.p_object, timeout, timeout_min, timeout_max);  }  // 8
get_packet_flags :: (main: *ENetPacketPeer) -> int { call_ret := cast(*int) sys_call("ENetPacketPeer", "get_packet_flags", 3905245786, int, main.p_object); return call_ret.*; }  // 9
get_remote_address :: (main: *ENetPacketPeer) -> gstring { call_ret := cast(*gstring) sys_call("ENetPacketPeer", "get_remote_address", 201670096, gstring, main.p_object); return call_ret.*; }  // 10
get_remote_port :: (main: *ENetPacketPeer) -> int { call_ret := cast(*int) sys_call("ENetPacketPeer", "get_remote_port", 3905245786, int, main.p_object); return call_ret.*; }  // 11
get_statistic :: (main: *ENetPacketPeer, statistic: ENetPacketPeer.PeerStatistic) -> float { call_ret := cast(*float) sys_call("ENetPacketPeer", "get_statistic", 1642578323, float, main.p_object, statistic); return call_ret.*; }  // 12
get_state :: (main: *ENetPacketPeer) -> ENetPacketPeer.PeerState { call_ret := cast(*ENetPacketPeer.PeerState) sys_call("ENetPacketPeer", "get_state", 711068532, ENetPacketPeer.PeerState, main.p_object); return call_ret.*; }  // 13
get_channels :: (main: *ENetPacketPeer) -> int { call_ret := cast(*int) sys_call("ENetPacketPeer", "get_channels", 3905245786, int, main.p_object); return call_ret.*; }  // 14
is_active :: (main: *ENetPacketPeer) -> bool { call_ret := cast(*bool) sys_call("ENetPacketPeer", "is_active", 36873697, bool, main.p_object); return call_ret.*; }  // 15

add_command :: (main: *EditorCommandPalette, command_name: string, key_name: string, binded_callable: Callable) { sys_call("EditorCommandPalette", "add_command", 864043298, Nil, main.p_object, command_name, key_name, binded_callable);  }  // 0
remove_command :: (main: *EditorCommandPalette, key_name: string) { sys_call("EditorCommandPalette", "remove_command", 83702148, Nil, main.p_object, key_name);  }  // 1

add_menu_shortcut :: (main: *EditorContextMenuPlugin, shortcut: Shortcut, callback: Callable) { sys_call("EditorContextMenuPlugin", "add_menu_shortcut", 851596305, Nil, main.p_object, shortcut, callback);  }  // 1
add_context_menu_item :: (main: *EditorContextMenuPlugin, name: string, callback: Callable) { sys_call("EditorContextMenuPlugin", "add_context_menu_item", 2748336951, Nil, main.p_object, name, callback);  }  // 2
add_context_menu_item_from_shortcut :: (main: *EditorContextMenuPlugin, name: string, shortcut: Shortcut) { sys_call("EditorContextMenuPlugin", "add_context_menu_item_from_shortcut", 3799546916, Nil, main.p_object, name, shortcut);  }  // 3
add_context_submenu_item :: (main: *EditorContextMenuPlugin, name: string, menu: PopupMenu) { sys_call("EditorContextMenuPlugin", "add_context_submenu_item", 1994674995, Nil, main.p_object, name, menu);  }  // 4

get_session :: (main: *EditorDebuggerPlugin, id: int) -> *EditorDebuggerSession { call_ret := cast(*EditorDebuggerSession) sys_call("EditorDebuggerPlugin", "get_session", 3061968499, EditorDebuggerSession, main.p_object, id); return call_ret; }  // 6
get_sessions :: (main: *EditorDebuggerPlugin) -> Array { call_ret := cast(*Array) sys_call("EditorDebuggerPlugin", "get_sessions", 2915620761, Array, main.p_object); return call_ret.*; }  // 7

send_message :: (main: *EditorDebuggerSession, message: string) { sys_call("EditorDebuggerSession", "send_message", 85656714, Nil, main.p_object, message);  }  // 0
toggle_profiler :: (main: *EditorDebuggerSession, profiler: string, enable: bool) { sys_call("EditorDebuggerSession", "toggle_profiler", 1198443697, Nil, main.p_object, profiler, enable);  }  // 1
is_breaked :: (main: *EditorDebuggerSession) -> bool { call_ret := cast(*bool) sys_call("EditorDebuggerSession", "is_breaked", 2240911060, bool, main.p_object); return call_ret.*; }  // 2
is_debuggable :: (main: *EditorDebuggerSession) -> bool { call_ret := cast(*bool) sys_call("EditorDebuggerSession", "is_debuggable", 2240911060, bool, main.p_object); return call_ret.*; }  // 3
is_active :: (main: *EditorDebuggerSession) -> bool { call_ret := cast(*bool) sys_call("EditorDebuggerSession", "is_active", 2240911060, bool, main.p_object); return call_ret.*; }  // 4
add_session_tab :: (main: *EditorDebuggerSession, control: Control) { sys_call("EditorDebuggerSession", "add_session_tab", 1496901182, Nil, main.p_object, control);  }  // 5
remove_session_tab :: (main: *EditorDebuggerSession, control: Control) { sys_call("EditorDebuggerSession", "remove_session_tab", 1496901182, Nil, main.p_object, control);  }  // 6
set_breakpoint :: (main: *EditorDebuggerSession, path: string, line: int, enabled: bool) { sys_call("EditorDebuggerSession", "set_breakpoint", 4108344793, Nil, main.p_object, path, line, enabled);  }  // 7

get_os_name :: (main: *EditorExportPlatform) -> gstring { call_ret := cast(*gstring) sys_call("EditorExportPlatform", "get_os_name", 201670096, gstring, main.p_object); return call_ret.*; }  // 0
create_preset :: (main: *EditorExportPlatform) -> *EditorExportPreset { call_ret := cast(*EditorExportPreset) sys_call("EditorExportPlatform", "create_preset", 2572397818, EditorExportPreset, main.p_object); return call_ret; }  // 1
find_export_template :: (main: *EditorExportPlatform, template_file_name: string) -> Dictionary { call_ret := cast(*Dictionary) sys_call("EditorExportPlatform", "find_export_template", 2248993622, Dictionary, main.p_object, template_file_name); return call_ret.*; }  // 2
get_current_presets :: (main: *EditorExportPlatform) -> Array { call_ret := cast(*Array) sys_call("EditorExportPlatform", "get_current_presets", 3995934104, Array, main.p_object); return call_ret.*; }  // 3
save_pack :: (main: *EditorExportPlatform, preset: EditorExportPreset, debug: bool, path: string) -> Dictionary { call_ret := cast(*Dictionary) sys_call("EditorExportPlatform", "save_pack", 3420080977, Dictionary, main.p_object, preset, debug, path); return call_ret.*; }  // 4
save_zip :: (main: *EditorExportPlatform, preset: EditorExportPreset, debug: bool, path: string) -> Dictionary { call_ret := cast(*Dictionary) sys_call("EditorExportPlatform", "save_zip", 1485052307, Dictionary, main.p_object, preset, debug, path); return call_ret.*; }  // 5
save_pack_patch :: (main: *EditorExportPlatform, preset: EditorExportPreset, debug: bool, path: string) -> Dictionary { call_ret := cast(*Dictionary) sys_call("EditorExportPlatform", "save_pack_patch", 1485052307, Dictionary, main.p_object, preset, debug, path); return call_ret.*; }  // 6
save_zip_patch :: (main: *EditorExportPlatform, preset: EditorExportPreset, debug: bool, path: string) -> Dictionary { call_ret := cast(*Dictionary) sys_call("EditorExportPlatform", "save_zip_patch", 1485052307, Dictionary, main.p_object, preset, debug, path); return call_ret.*; }  // 7
gen_export_flags :: (main: *EditorExportPlatform, flags: EditorExportPlatform.DebugFlags) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("EditorExportPlatform", "gen_export_flags", 2976483270, PackedStringArray, main.p_object, flags); return call_ret.*; }  // 8
export_project_files :: (main: *EditorExportPlatform, preset: EditorExportPreset, debug: bool, save_cb: Callable) -> Error { call_ret := cast(*Error) sys_call("EditorExportPlatform", "export_project_files", 1063735070, Error, main.p_object, preset, debug, save_cb); return call_ret.*; }  // 9
export_project :: (main: *EditorExportPlatform, preset: EditorExportPreset, debug: bool, path: string) -> Error { call_ret := cast(*Error) sys_call("EditorExportPlatform", "export_project", 3879521245, Error, main.p_object, preset, debug, path); return call_ret.*; }  // 10
export_pack :: (main: *EditorExportPlatform, preset: EditorExportPreset, debug: bool, path: string) -> Error { call_ret := cast(*Error) sys_call("EditorExportPlatform", "export_pack", 3879521245, Error, main.p_object, preset, debug, path); return call_ret.*; }  // 11
export_zip :: (main: *EditorExportPlatform, preset: EditorExportPreset, debug: bool, path: string) -> Error { call_ret := cast(*Error) sys_call("EditorExportPlatform", "export_zip", 3879521245, Error, main.p_object, preset, debug, path); return call_ret.*; }  // 12
export_pack_patch :: (main: *EditorExportPlatform, preset: EditorExportPreset, debug: bool, path: string) -> Error { call_ret := cast(*Error) sys_call("EditorExportPlatform", "export_pack_patch", 608021658, Error, main.p_object, preset, debug, path); return call_ret.*; }  // 13
export_zip_patch :: (main: *EditorExportPlatform, preset: EditorExportPreset, debug: bool, path: string) -> Error { call_ret := cast(*Error) sys_call("EditorExportPlatform", "export_zip_patch", 608021658, Error, main.p_object, preset, debug, path); return call_ret.*; }  // 14
clear_messages :: (main: *EditorExportPlatform) { sys_call("EditorExportPlatform", "clear_messages", 3218959716, Nil, main.p_object);  }  // 15
add_message :: (main: *EditorExportPlatform, type: EditorExportPlatform.ExportMessageType, category: string, message: string) { sys_call("EditorExportPlatform", "add_message", 782767225, Nil, main.p_object, type, category, message);  }  // 16
get_message_count :: (main: *EditorExportPlatform) -> int { call_ret := cast(*int) sys_call("EditorExportPlatform", "get_message_count", 3905245786, int, main.p_object); return call_ret.*; }  // 17
get_message_type :: (main: *EditorExportPlatform, index: int) -> EditorExportPlatform.ExportMessageType { call_ret := cast(*EditorExportPlatform.ExportMessageType) sys_call("EditorExportPlatform", "get_message_type", 2667287293, EditorExportPlatform.ExportMessageType, main.p_object, index); return call_ret.*; }  // 18
get_message_category :: (main: *EditorExportPlatform, index: int) -> gstring { call_ret := cast(*gstring) sys_call("EditorExportPlatform", "get_message_category", 844755477, gstring, main.p_object, index); return call_ret.*; }  // 19
get_message_text :: (main: *EditorExportPlatform, index: int) -> gstring { call_ret := cast(*gstring) sys_call("EditorExportPlatform", "get_message_text", 844755477, gstring, main.p_object, index); return call_ret.*; }  // 20
get_worst_message_type :: (main: *EditorExportPlatform) -> EditorExportPlatform.ExportMessageType { call_ret := cast(*EditorExportPlatform.ExportMessageType) sys_call("EditorExportPlatform", "get_worst_message_type", 2580557466, EditorExportPlatform.ExportMessageType, main.p_object); return call_ret.*; }  // 21
ssh_run_on_remote :: (main: *EditorExportPlatform, host: string, port: string, ssh_arg: PackedStringArray, cmd_args: string) -> Error { call_ret := cast(*Error) sys_call("EditorExportPlatform", "ssh_run_on_remote", 3163734797, Error, main.p_object, host, port, ssh_arg, cmd_args); return call_ret.*; }  // 22
ssh_run_on_remote_no_wait :: (main: *EditorExportPlatform, host: string, port: string, ssh_args: PackedStringArray, cmd_args: string) -> int { call_ret := cast(*int) sys_call("EditorExportPlatform", "ssh_run_on_remote_no_wait", 3606362233, int, main.p_object, host, port, ssh_args, cmd_args); return call_ret.*; }  // 23
ssh_push_to_remote :: (main: *EditorExportPlatform, host: string, port: string, scp_args: PackedStringArray, src_file: string, dst_file: string) -> Error { call_ret := cast(*Error) sys_call("EditorExportPlatform", "ssh_push_to_remote", 218756989, Error, main.p_object, host, port, scp_args, src_file, dst_file); return call_ret.*; }  // 24
get_internal_export_files :: (main: *EditorExportPlatform, preset: EditorExportPreset, debug: bool) -> Dictionary { call_ret := cast(*Dictionary) sys_call("EditorExportPlatform", "get_internal_export_files", 89550086, Dictionary, main.p_object, preset, debug); return call_ret.*; }  // 25
get_forced_export_files :: (main: *EditorExportPlatform) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("EditorExportPlatform", "get_forced_export_files", 2981934095, PackedStringArray, main.p_object); return call_ret.*; }  // 26


set_config_error :: (main: *EditorExportPlatformExtension, error_text: string) { sys_call("EditorExportPlatformExtension", "set_config_error", 3089850668, Nil, main.p_object, error_text);  }  // 30
get_config_error :: (main: *EditorExportPlatformExtension) -> gstring { call_ret := cast(*gstring) sys_call("EditorExportPlatformExtension", "get_config_error", 201670096, gstring, main.p_object); return call_ret.*; }  // 31
set_config_missing_templates :: (main: *EditorExportPlatformExtension, missing_templates: bool) { sys_call("EditorExportPlatformExtension", "set_config_missing_templates", 1695273946, Nil, main.p_object, missing_templates);  }  // 32
get_config_missing_templates :: (main: *EditorExportPlatformExtension) -> bool { call_ret := cast(*bool) sys_call("EditorExportPlatformExtension", "get_config_missing_templates", 36873697, bool, main.p_object); return call_ret.*; }  // 33







add_shared_object :: (main: *EditorExportPlugin, path: string, tags: PackedStringArray, target: string) { sys_call("EditorExportPlugin", "add_shared_object", 3098291045, Nil, main.p_object, path, tags, target);  }  // 24
add_ios_project_static_lib :: (main: *EditorExportPlugin, path: string) { sys_call("EditorExportPlugin", "add_ios_project_static_lib", 83702148, Nil, main.p_object, path);  }  // 25
add_file :: (main: *EditorExportPlugin, path: string, file: PackedByteArray, remap: bool) { sys_call("EditorExportPlugin", "add_file", 527928637, Nil, main.p_object, path, file, remap);  }  // 26
add_ios_framework :: (main: *EditorExportPlugin, path: string) { sys_call("EditorExportPlugin", "add_ios_framework", 83702148, Nil, main.p_object, path);  }  // 27
add_ios_embedded_framework :: (main: *EditorExportPlugin, path: string) { sys_call("EditorExportPlugin", "add_ios_embedded_framework", 83702148, Nil, main.p_object, path);  }  // 28
add_ios_plist_content :: (main: *EditorExportPlugin, plist_content: string) { sys_call("EditorExportPlugin", "add_ios_plist_content", 83702148, Nil, main.p_object, plist_content);  }  // 29
add_ios_linker_flags :: (main: *EditorExportPlugin, flags: string) { sys_call("EditorExportPlugin", "add_ios_linker_flags", 83702148, Nil, main.p_object, flags);  }  // 30
add_ios_bundle_file :: (main: *EditorExportPlugin, path: string) { sys_call("EditorExportPlugin", "add_ios_bundle_file", 83702148, Nil, main.p_object, path);  }  // 31
add_ios_cpp_code :: (main: *EditorExportPlugin, code: string) { sys_call("EditorExportPlugin", "add_ios_cpp_code", 83702148, Nil, main.p_object, code);  }  // 32
add_macos_plugin_file :: (main: *EditorExportPlugin, path: string) { sys_call("EditorExportPlugin", "add_macos_plugin_file", 83702148, Nil, main.p_object, path);  }  // 33
skip :: (main: *EditorExportPlugin) { sys_call("EditorExportPlugin", "skip", 3218959716, Nil, main.p_object);  }  // 34
get_option :: (main: *EditorExportPlugin, name: string) -> Variant { call_ret := cast(*Variant) sys_call("EditorExportPlugin", "get_option", 2760726917, Variant, main.p_object, name); return call_ret.*; }  // 35
get_export_preset :: (main: *EditorExportPlugin) -> *EditorExportPreset { call_ret := cast(*EditorExportPreset) sys_call("EditorExportPlugin", "get_export_preset", 1610607222, EditorExportPreset, main.p_object); return call_ret; }  // 36
get_export_platform :: (main: *EditorExportPlugin) -> *EditorExportPlatform { call_ret := cast(*EditorExportPlatform) sys_call("EditorExportPlugin", "get_export_platform", 282254641, EditorExportPlatform, main.p_object); return call_ret; }  // 37

has :: (main: *EditorExportPreset, property: string) -> bool { call_ret := cast(*bool) sys_call("EditorExportPreset", "has", 2619796661, bool, main.p_object, property); return call_ret.*; }  // 0
get_files_to_export :: (main: *EditorExportPreset) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("EditorExportPreset", "get_files_to_export", 1139954409, PackedStringArray, main.p_object); return call_ret.*; }  // 1
get_customized_files :: (main: *EditorExportPreset) -> Dictionary { call_ret := cast(*Dictionary) sys_call("EditorExportPreset", "get_customized_files", 3102165223, Dictionary, main.p_object); return call_ret.*; }  // 2
get_customized_files_count :: (main: *EditorExportPreset) -> int { call_ret := cast(*int) sys_call("EditorExportPreset", "get_customized_files_count", 3905245786, int, main.p_object); return call_ret.*; }  // 3
has_export_file :: (main: *EditorExportPreset, path: string) -> bool { call_ret := cast(*bool) sys_call("EditorExportPreset", "has_export_file", 2323990056, bool, main.p_object, path); return call_ret.*; }  // 4
get_file_export_mode :: (main: *EditorExportPreset, path: string) -> EditorExportPreset.FileExportMode { call_ret := cast(*EditorExportPreset.FileExportMode) sys_call("EditorExportPreset", "get_file_export_mode", 407825436, EditorExportPreset.FileExportMode, main.p_object, path); return call_ret.*; }  // 5
get_preset_name :: (main: *EditorExportPreset) -> gstring { call_ret := cast(*gstring) sys_call("EditorExportPreset", "get_preset_name", 201670096, gstring, main.p_object); return call_ret.*; }  // 6
is_runnable :: (main: *EditorExportPreset) -> bool { call_ret := cast(*bool) sys_call("EditorExportPreset", "is_runnable", 36873697, bool, main.p_object); return call_ret.*; }  // 7
are_advanced_options_enabled :: (main: *EditorExportPreset) -> bool { call_ret := cast(*bool) sys_call("EditorExportPreset", "are_advanced_options_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 8
is_dedicated_server :: (main: *EditorExportPreset) -> bool { call_ret := cast(*bool) sys_call("EditorExportPreset", "is_dedicated_server", 36873697, bool, main.p_object); return call_ret.*; }  // 9
get_export_filter :: (main: *EditorExportPreset) -> EditorExportPreset.ExportFilter { call_ret := cast(*EditorExportPreset.ExportFilter) sys_call("EditorExportPreset", "get_export_filter", 4227045696, EditorExportPreset.ExportFilter, main.p_object); return call_ret.*; }  // 10
get_include_filter :: (main: *EditorExportPreset) -> gstring { call_ret := cast(*gstring) sys_call("EditorExportPreset", "get_include_filter", 201670096, gstring, main.p_object); return call_ret.*; }  // 11
get_exclude_filter :: (main: *EditorExportPreset) -> gstring { call_ret := cast(*gstring) sys_call("EditorExportPreset", "get_exclude_filter", 201670096, gstring, main.p_object); return call_ret.*; }  // 12
get_custom_features :: (main: *EditorExportPreset) -> gstring { call_ret := cast(*gstring) sys_call("EditorExportPreset", "get_custom_features", 201670096, gstring, main.p_object); return call_ret.*; }  // 13
get_patches :: (main: *EditorExportPreset) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("EditorExportPreset", "get_patches", 1139954409, PackedStringArray, main.p_object); return call_ret.*; }  // 14
get_export_path :: (main: *EditorExportPreset) -> gstring { call_ret := cast(*gstring) sys_call("EditorExportPreset", "get_export_path", 201670096, gstring, main.p_object); return call_ret.*; }  // 15
get_encryption_in_filter :: (main: *EditorExportPreset) -> gstring { call_ret := cast(*gstring) sys_call("EditorExportPreset", "get_encryption_in_filter", 201670096, gstring, main.p_object); return call_ret.*; }  // 16
get_encryption_ex_filter :: (main: *EditorExportPreset) -> gstring { call_ret := cast(*gstring) sys_call("EditorExportPreset", "get_encryption_ex_filter", 201670096, gstring, main.p_object); return call_ret.*; }  // 17
get_encrypt_pck :: (main: *EditorExportPreset) -> bool { call_ret := cast(*bool) sys_call("EditorExportPreset", "get_encrypt_pck", 36873697, bool, main.p_object); return call_ret.*; }  // 18
get_encrypt_directory :: (main: *EditorExportPreset) -> bool { call_ret := cast(*bool) sys_call("EditorExportPreset", "get_encrypt_directory", 36873697, bool, main.p_object); return call_ret.*; }  // 19
get_encryption_key :: (main: *EditorExportPreset) -> gstring { call_ret := cast(*gstring) sys_call("EditorExportPreset", "get_encryption_key", 201670096, gstring, main.p_object); return call_ret.*; }  // 20
get_script_export_mode :: (main: *EditorExportPreset) -> int { call_ret := cast(*int) sys_call("EditorExportPreset", "get_script_export_mode", 3905245786, int, main.p_object); return call_ret.*; }  // 21
get_or_env :: (main: *EditorExportPreset, name: string, env_var: string) -> Variant { call_ret := cast(*Variant) sys_call("EditorExportPreset", "get_or_env", 389838787, Variant, main.p_object, name, env_var); return call_ret.*; }  // 22
get_version :: (main: *EditorExportPreset, name: string, windows_version: bool) -> gstring { call_ret := cast(*gstring) sys_call("EditorExportPreset", "get_version", 1132184663, gstring, main.p_object, name, windows_version); return call_ret.*; }  // 23

set_disable_class :: (main: *EditorFeatureProfile, class_name: string, disable: bool) { sys_call("EditorFeatureProfile", "set_disable_class", 2524380260, Nil, main.p_object, class_name, disable);  }  // 0
is_class_disabled :: (main: *EditorFeatureProfile, class_name: string) -> bool { call_ret := cast(*bool) sys_call("EditorFeatureProfile", "is_class_disabled", 2619796661, bool, main.p_object, class_name); return call_ret.*; }  // 1
set_disable_class_editor :: (main: *EditorFeatureProfile, class_name: string, disable: bool) { sys_call("EditorFeatureProfile", "set_disable_class_editor", 2524380260, Nil, main.p_object, class_name, disable);  }  // 2
is_class_editor_disabled :: (main: *EditorFeatureProfile, class_name: string) -> bool { call_ret := cast(*bool) sys_call("EditorFeatureProfile", "is_class_editor_disabled", 2619796661, bool, main.p_object, class_name); return call_ret.*; }  // 3
set_disable_class_property :: (main: *EditorFeatureProfile, class_name: string, property: string, disable: bool) { sys_call("EditorFeatureProfile", "set_disable_class_property", 865197084, Nil, main.p_object, class_name, property, disable);  }  // 4
is_class_property_disabled :: (main: *EditorFeatureProfile, class_name: string, property: string) -> bool { call_ret := cast(*bool) sys_call("EditorFeatureProfile", "is_class_property_disabled", 471820014, bool, main.p_object, class_name, property); return call_ret.*; }  // 5
set_disable_feature :: (main: *EditorFeatureProfile, feature: EditorFeatureProfile.Feature, disable: bool) { sys_call("EditorFeatureProfile", "set_disable_feature", 1884871044, Nil, main.p_object, feature, disable);  }  // 6
is_feature_disabled :: (main: *EditorFeatureProfile, feature: EditorFeatureProfile.Feature) -> bool { call_ret := cast(*bool) sys_call("EditorFeatureProfile", "is_feature_disabled", 2974403161, bool, main.p_object, feature); return call_ret.*; }  // 7
get_feature_name :: (main: *EditorFeatureProfile, feature: EditorFeatureProfile.Feature) -> gstring { call_ret := cast(*gstring) sys_call("EditorFeatureProfile", "get_feature_name", 3401335809, gstring, main.p_object, feature); return call_ret.*; }  // 8
save_to_file :: (main: *EditorFeatureProfile, path: string) -> Error { call_ret := cast(*Error) sys_call("EditorFeatureProfile", "save_to_file", 166001499, Error, main.p_object, path); return call_ret.*; }  // 9
load_from_file :: (main: *EditorFeatureProfile, path: string) -> Error { call_ret := cast(*Error) sys_call("EditorFeatureProfile", "load_from_file", 166001499, Error, main.p_object, path); return call_ret.*; }  // 10

clear_filters :: (main: *EditorFileDialog) { sys_call("EditorFileDialog", "clear_filters", 3218959716, Nil, main.p_object);  }  // 0
add_filter :: (main: *EditorFileDialog, filter: string) { sys_call("EditorFileDialog", "add_filter", 3388804757, Nil, main.p_object, filter);  }  // 1
set_filters :: (main: *EditorFileDialog, filters: PackedStringArray) { sys_call("EditorFileDialog", "set_filters", 4015028928, Nil, main.p_object, filters);  }  // 2
get_filters :: (main: *EditorFileDialog) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("EditorFileDialog", "get_filters", 1139954409, PackedStringArray, main.p_object); return call_ret.*; }  // 3
get_option_name :: (main: *EditorFileDialog, option: int) -> gstring { call_ret := cast(*gstring) sys_call("EditorFileDialog", "get_option_name", 844755477, gstring, main.p_object, option); return call_ret.*; }  // 4
get_option_values :: (main: *EditorFileDialog, option: int) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("EditorFileDialog", "get_option_values", 647634434, PackedStringArray, main.p_object, option); return call_ret.*; }  // 5
get_option_default :: (main: *EditorFileDialog, option: int) -> int { call_ret := cast(*int) sys_call("EditorFileDialog", "get_option_default", 923996154, int, main.p_object, option); return call_ret.*; }  // 6
set_option_name :: (main: *EditorFileDialog, option: int, name: string) { sys_call("EditorFileDialog", "set_option_name", 501894301, Nil, main.p_object, option, name);  }  // 7
set_option_values :: (main: *EditorFileDialog, option: int, values: PackedStringArray) { sys_call("EditorFileDialog", "set_option_values", 3353661094, Nil, main.p_object, option, values);  }  // 8
set_option_default :: (main: *EditorFileDialog, option: int, default_value_index: int) { sys_call("EditorFileDialog", "set_option_default", 3937882851, Nil, main.p_object, option, default_value_index);  }  // 9
set_option_count :: (main: *EditorFileDialog, count: int) { sys_call("EditorFileDialog", "set_option_count", 1286410249, Nil, main.p_object, count);  }  // 10
get_option_count :: (main: *EditorFileDialog) -> int { call_ret := cast(*int) sys_call("EditorFileDialog", "get_option_count", 3905245786, int, main.p_object); return call_ret.*; }  // 11
add_option :: (main: *EditorFileDialog, name: string, values: PackedStringArray, default_value_index: int) { sys_call("EditorFileDialog", "add_option", 149592325, Nil, main.p_object, name, values, default_value_index);  }  // 12
get_selected_options :: (main: *EditorFileDialog) -> Dictionary { call_ret := cast(*Dictionary) sys_call("EditorFileDialog", "get_selected_options", 3102165223, Dictionary, main.p_object); return call_ret.*; }  // 13
clear_filename_filter :: (main: *EditorFileDialog) { sys_call("EditorFileDialog", "clear_filename_filter", 3218959716, Nil, main.p_object);  }  // 14
set_filename_filter :: (main: *EditorFileDialog, filter: string) { sys_call("EditorFileDialog", "set_filename_filter", 83702148, Nil, main.p_object, filter);  }  // 15
get_filename_filter :: (main: *EditorFileDialog) -> gstring { call_ret := cast(*gstring) sys_call("EditorFileDialog", "get_filename_filter", 201670096, gstring, main.p_object); return call_ret.*; }  // 16
get_current_dir :: (main: *EditorFileDialog) -> gstring { call_ret := cast(*gstring) sys_call("EditorFileDialog", "get_current_dir", 201670096, gstring, main.p_object); return call_ret.*; }  // 17
get_current_file :: (main: *EditorFileDialog) -> gstring { call_ret := cast(*gstring) sys_call("EditorFileDialog", "get_current_file", 201670096, gstring, main.p_object); return call_ret.*; }  // 18
get_current_path :: (main: *EditorFileDialog) -> gstring { call_ret := cast(*gstring) sys_call("EditorFileDialog", "get_current_path", 201670096, gstring, main.p_object); return call_ret.*; }  // 19
set_current_dir :: (main: *EditorFileDialog, dir: string) { sys_call("EditorFileDialog", "set_current_dir", 83702148, Nil, main.p_object, dir);  }  // 20
set_current_file :: (main: *EditorFileDialog, file: string) { sys_call("EditorFileDialog", "set_current_file", 83702148, Nil, main.p_object, file);  }  // 21
set_current_path :: (main: *EditorFileDialog, path: string) { sys_call("EditorFileDialog", "set_current_path", 83702148, Nil, main.p_object, path);  }  // 22
set_file_mode :: (main: *EditorFileDialog, mode: EditorFileDialog.FileMode) { sys_call("EditorFileDialog", "set_file_mode", 274150415, Nil, main.p_object, mode);  }  // 23
get_file_mode :: (main: *EditorFileDialog) -> EditorFileDialog.FileMode { call_ret := cast(*EditorFileDialog.FileMode) sys_call("EditorFileDialog", "get_file_mode", 2681044145, EditorFileDialog.FileMode, main.p_object); return call_ret.*; }  // 24
get_vbox :: (main: *EditorFileDialog) -> *VBoxContainer { call_ret := cast(*VBoxContainer) sys_call("EditorFileDialog", "get_vbox", 915758477, VBoxContainer, main.p_object); return call_ret; }  // 25
get_line_edit :: (main: *EditorFileDialog) -> *LineEdit { call_ret := cast(*LineEdit) sys_call("EditorFileDialog", "get_line_edit", 4071694264, LineEdit, main.p_object); return call_ret; }  // 26
set_access :: (main: *EditorFileDialog, access: EditorFileDialog.Access) { sys_call("EditorFileDialog", "set_access", 3882893764, Nil, main.p_object, access);  }  // 27
get_access :: (main: *EditorFileDialog) -> EditorFileDialog.Access { call_ret := cast(*EditorFileDialog.Access) sys_call("EditorFileDialog", "get_access", 778734016, EditorFileDialog.Access, main.p_object); return call_ret.*; }  // 28
set_show_hidden_files :: (main: *EditorFileDialog, show: bool) { sys_call("EditorFileDialog", "set_show_hidden_files", 2586408642, Nil, main.p_object, show);  }  // 29
is_showing_hidden_files :: (main: *EditorFileDialog) -> bool { call_ret := cast(*bool) sys_call("EditorFileDialog", "is_showing_hidden_files", 36873697, bool, main.p_object); return call_ret.*; }  // 30
set_display_mode :: (main: *EditorFileDialog, mode: EditorFileDialog.DisplayMode) { sys_call("EditorFileDialog", "set_display_mode", 3049004050, Nil, main.p_object, mode);  }  // 31
get_display_mode :: (main: *EditorFileDialog) -> EditorFileDialog.DisplayMode { call_ret := cast(*EditorFileDialog.DisplayMode) sys_call("EditorFileDialog", "get_display_mode", 3517174669, EditorFileDialog.DisplayMode, main.p_object); return call_ret.*; }  // 32
set_disable_overwrite_warning :: (main: *EditorFileDialog, disable: bool) { sys_call("EditorFileDialog", "set_disable_overwrite_warning", 2586408642, Nil, main.p_object, disable);  }  // 33
is_overwrite_warning_disabled :: (main: *EditorFileDialog) -> bool { call_ret := cast(*bool) sys_call("EditorFileDialog", "is_overwrite_warning_disabled", 36873697, bool, main.p_object); return call_ret.*; }  // 34
add_side_menu :: (main: *EditorFileDialog, menu: Control) { sys_call("EditorFileDialog", "add_side_menu", 402368861, Nil, main.p_object, menu);  }  // 35
popup_file_dialog :: (main: *EditorFileDialog) { sys_call("EditorFileDialog", "popup_file_dialog", 3218959716, Nil, main.p_object);  }  // 36
invalidate :: (main: *EditorFileDialog) { sys_call("EditorFileDialog", "invalidate", 3218959716, Nil, main.p_object);  }  // 37

get_filesystem :: (main: *EditorFileSystem) -> *EditorFileSystemDirectory { call_ret := cast(*EditorFileSystemDirectory) sys_call("EditorFileSystem", "get_filesystem", 842323275, EditorFileSystemDirectory, main.p_object); return call_ret; }  // 0
is_scanning :: (main: *EditorFileSystem) -> bool { call_ret := cast(*bool) sys_call("EditorFileSystem", "is_scanning", 36873697, bool, main.p_object); return call_ret.*; }  // 1
get_scanning_progress :: (main: *EditorFileSystem) -> float { call_ret := cast(*float) sys_call("EditorFileSystem", "get_scanning_progress", 1740695150, float, main.p_object); return call_ret.*; }  // 2
scan :: (main: *EditorFileSystem) { sys_call("EditorFileSystem", "scan", 3218959716, Nil, main.p_object);  }  // 3
scan_sources :: (main: *EditorFileSystem) { sys_call("EditorFileSystem", "scan_sources", 3218959716, Nil, main.p_object);  }  // 4
update_file :: (main: *EditorFileSystem, path: string) { sys_call("EditorFileSystem", "update_file", 83702148, Nil, main.p_object, path);  }  // 5
get_filesystem_path :: (main: *EditorFileSystem, path: string) -> *EditorFileSystemDirectory { call_ret := cast(*EditorFileSystemDirectory) sys_call("EditorFileSystem", "get_filesystem_path", 3188521125, EditorFileSystemDirectory, main.p_object, path); return call_ret; }  // 6
get_file_type :: (main: *EditorFileSystem, path: string) -> gstring { call_ret := cast(*gstring) sys_call("EditorFileSystem", "get_file_type", 3135753539, gstring, main.p_object, path); return call_ret.*; }  // 7
reimport_files :: (main: *EditorFileSystem, files: PackedStringArray) { sys_call("EditorFileSystem", "reimport_files", 4015028928, Nil, main.p_object, files);  }  // 8

get_subdir_count :: (main: *EditorFileSystemDirectory) -> int { call_ret := cast(*int) sys_call("EditorFileSystemDirectory", "get_subdir_count", 3905245786, int, main.p_object); return call_ret.*; }  // 0
get_subdir :: (main: *EditorFileSystemDirectory, idx: int) -> *EditorFileSystemDirectory { call_ret := cast(*EditorFileSystemDirectory) sys_call("EditorFileSystemDirectory", "get_subdir", 2330964164, EditorFileSystemDirectory, main.p_object, idx); return call_ret; }  // 1
get_file_count :: (main: *EditorFileSystemDirectory) -> int { call_ret := cast(*int) sys_call("EditorFileSystemDirectory", "get_file_count", 3905245786, int, main.p_object); return call_ret.*; }  // 2
get_file :: (main: *EditorFileSystemDirectory, idx: int) -> gstring { call_ret := cast(*gstring) sys_call("EditorFileSystemDirectory", "get_file", 844755477, gstring, main.p_object, idx); return call_ret.*; }  // 3
get_file_path :: (main: *EditorFileSystemDirectory, idx: int) -> gstring { call_ret := cast(*gstring) sys_call("EditorFileSystemDirectory", "get_file_path", 844755477, gstring, main.p_object, idx); return call_ret.*; }  // 4
get_file_type :: (main: *EditorFileSystemDirectory, idx: int) -> StringName { call_ret := cast(*StringName) sys_call("EditorFileSystemDirectory", "get_file_type", 659327637, StringName, main.p_object, idx); return call_ret.*; }  // 5
get_file_script_class_name :: (main: *EditorFileSystemDirectory, idx: int) -> gstring { call_ret := cast(*gstring) sys_call("EditorFileSystemDirectory", "get_file_script_class_name", 844755477, gstring, main.p_object, idx); return call_ret.*; }  // 6
get_file_script_class_extends :: (main: *EditorFileSystemDirectory, idx: int) -> gstring { call_ret := cast(*gstring) sys_call("EditorFileSystemDirectory", "get_file_script_class_extends", 844755477, gstring, main.p_object, idx); return call_ret.*; }  // 7
get_file_import_is_valid :: (main: *EditorFileSystemDirectory, idx: int) -> bool { call_ret := cast(*bool) sys_call("EditorFileSystemDirectory", "get_file_import_is_valid", 1116898809, bool, main.p_object, idx); return call_ret.*; }  // 8
get_name :: (main: *EditorFileSystemDirectory) -> gstring { call_ret := cast(*gstring) sys_call("EditorFileSystemDirectory", "get_name", 2841200299, gstring, main.p_object); return call_ret.*; }  // 9
get_path :: (main: *EditorFileSystemDirectory) -> gstring { call_ret := cast(*gstring) sys_call("EditorFileSystemDirectory", "get_path", 201670096, gstring, main.p_object); return call_ret.*; }  // 10
get_parent :: (main: *EditorFileSystemDirectory) -> *EditorFileSystemDirectory { call_ret := cast(*EditorFileSystemDirectory) sys_call("EditorFileSystemDirectory", "get_parent", 842323275, EditorFileSystemDirectory, main.p_object); return call_ret; }  // 11
find_file_index :: (main: *EditorFileSystemDirectory, name: string) -> int { call_ret := cast(*int) sys_call("EditorFileSystemDirectory", "find_file_index", 1321353865, int, main.p_object, name); return call_ret.*; }  // 12
find_dir_index :: (main: *EditorFileSystemDirectory, name: string) -> int { call_ret := cast(*int) sys_call("EditorFileSystemDirectory", "find_dir_index", 1321353865, int, main.p_object, name); return call_ret.*; }  // 13


append_import_external_resource :: (main: *EditorImportPlugin, path: string) -> Error { call_ret := cast(*Error) sys_call("EditorImportPlugin", "append_import_external_resource", 320493106, Error, main.p_object, path); return call_ret.*; }  // 14

edit :: (main: *EditorInspector, object: Object) { sys_call("EditorInspector", "edit", 3975164845, Nil, main.p_object, object);  }  // 0
get_selected_path :: (main: *EditorInspector) -> gstring { call_ret := cast(*gstring) sys_call("EditorInspector", "get_selected_path", 201670096, gstring, main.p_object); return call_ret.*; }  // 1
get_edited_object :: (main: *EditorInspector) -> *Object { call_ret := cast(*Object) sys_call("EditorInspector", "get_edited_object", 2050059866, Object, main.p_object); return call_ret; }  // 2
instantiate_property_editor :: (main: *EditorInspector, object: Object, type: Variant_Type, path: string, hint: PropertyHint, hint_text: string, usage: int) -> *EditorProperty { call_ret := cast(*EditorProperty) sys_call("EditorInspector", "instantiate_property_editor", 1429914152, EditorProperty, main.p_object, object, type, path, hint, hint_text, usage); return call_ret; }  // 3

add_custom_control :: (main: *EditorInspectorPlugin, control: Control) { sys_call("EditorInspectorPlugin", "add_custom_control", 1496901182, Nil, main.p_object, control);  }  // 6
add_property_editor :: (main: *EditorInspectorPlugin, property: string, editor: Control) { sys_call("EditorInspectorPlugin", "add_property_editor", 2042698479, Nil, main.p_object, property, editor);  }  // 7
add_property_editor_for_multiple_properties :: (main: *EditorInspectorPlugin, label: string, properties: PackedStringArray, editor: Control) { sys_call("EditorInspectorPlugin", "add_property_editor_for_multiple_properties", 788598683, Nil, main.p_object, label, properties, editor);  }  // 8

restart_editor :: (main: *EditorInterface) { sys_call("EditorInterface", "restart_editor", 3216645846, Nil, main.p_object);  }  // 0
get_command_palette :: (main: *EditorInterface) -> *EditorCommandPalette { call_ret := cast(*EditorCommandPalette) sys_call("EditorInterface", "get_command_palette", 2471163807, EditorCommandPalette, main.p_object); return call_ret; }  // 1
get_resource_filesystem :: (main: *EditorInterface) -> *EditorFileSystem { call_ret := cast(*EditorFileSystem) sys_call("EditorInterface", "get_resource_filesystem", 780151678, EditorFileSystem, main.p_object); return call_ret; }  // 2
get_editor_paths :: (main: *EditorInterface) -> *EditorPaths { call_ret := cast(*EditorPaths) sys_call("EditorInterface", "get_editor_paths", 1595760068, EditorPaths, main.p_object); return call_ret; }  // 3
get_resource_previewer :: (main: *EditorInterface) -> *EditorResourcePreview { call_ret := cast(*EditorResourcePreview) sys_call("EditorInterface", "get_resource_previewer", 943486957, EditorResourcePreview, main.p_object); return call_ret; }  // 4
get_selection :: (main: *EditorInterface) -> *EditorSelection { call_ret := cast(*EditorSelection) sys_call("EditorInterface", "get_selection", 2690272531, EditorSelection, main.p_object); return call_ret; }  // 5
get_editor_settings :: (main: *EditorInterface) -> *EditorSettings { call_ret := cast(*EditorSettings) sys_call("EditorInterface", "get_editor_settings", 4086932459, EditorSettings, main.p_object); return call_ret; }  // 6
get_editor_toaster :: (main: *EditorInterface) -> *EditorToaster { call_ret := cast(*EditorToaster) sys_call("EditorInterface", "get_editor_toaster", 3612675797, EditorToaster, main.p_object); return call_ret; }  // 7
get_editor_undo_redo :: (main: *EditorInterface) -> *EditorUndoRedoManager { call_ret := cast(*EditorUndoRedoManager) sys_call("EditorInterface", "get_editor_undo_redo", 3819628421, EditorUndoRedoManager, main.p_object); return call_ret; }  // 8
make_mesh_previews :: (main: *EditorInterface, meshes: [] Mesh, preview_size: int) -> [] Texture2D { call_ret := cast(*[] Texture2D) sys_call("EditorInterface", "make_mesh_previews", 878078554, [] Texture2D, main.p_object, meshes, preview_size); return call_ret.*; }  // 9
set_plugin_enabled :: (main: *EditorInterface, plugin: string, enabled: bool) { sys_call("EditorInterface", "set_plugin_enabled", 2678287736, Nil, main.p_object, plugin, enabled);  }  // 10
is_plugin_enabled :: (main: *EditorInterface, plugin: string) -> bool { call_ret := cast(*bool) sys_call("EditorInterface", "is_plugin_enabled", 3927539163, bool, main.p_object, plugin); return call_ret.*; }  // 11
get_editor_theme :: (main: *EditorInterface) -> *Theme { call_ret := cast(*Theme) sys_call("EditorInterface", "get_editor_theme", 3846893731, Theme, main.p_object); return call_ret; }  // 12
get_base_control :: (main: *EditorInterface) -> *Control { call_ret := cast(*Control) sys_call("EditorInterface", "get_base_control", 2783021301, Control, main.p_object); return call_ret; }  // 13
get_editor_main_screen :: (main: *EditorInterface) -> *VBoxContainer { call_ret := cast(*VBoxContainer) sys_call("EditorInterface", "get_editor_main_screen", 1706218421, VBoxContainer, main.p_object); return call_ret; }  // 14
get_script_editor :: (main: *EditorInterface) -> *ScriptEditor { call_ret := cast(*ScriptEditor) sys_call("EditorInterface", "get_script_editor", 90868003, ScriptEditor, main.p_object); return call_ret; }  // 15
get_editor_viewport_2d :: (main: *EditorInterface) -> *SubViewport { call_ret := cast(*SubViewport) sys_call("EditorInterface", "get_editor_viewport_2d", 3750751911, SubViewport, main.p_object); return call_ret; }  // 16
get_editor_viewport_3d :: (main: *EditorInterface) -> *SubViewport { call_ret := cast(*SubViewport) sys_call("EditorInterface", "get_editor_viewport_3d", 1970834490, SubViewport, main.p_object); return call_ret; }  // 17
set_main_screen_editor :: (main: *EditorInterface, name: string) { sys_call("EditorInterface", "set_main_screen_editor", 83702148, Nil, main.p_object, name);  }  // 18
set_distraction_free_mode :: (main: *EditorInterface, enter: bool) { sys_call("EditorInterface", "set_distraction_free_mode", 2586408642, Nil, main.p_object, enter);  }  // 19
is_distraction_free_mode_enabled :: (main: *EditorInterface) -> bool { call_ret := cast(*bool) sys_call("EditorInterface", "is_distraction_free_mode_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 20
is_multi_window_enabled :: (main: *EditorInterface) -> bool { call_ret := cast(*bool) sys_call("EditorInterface", "is_multi_window_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 21
get_editor_scale :: (main: *EditorInterface) -> float { call_ret := cast(*float) sys_call("EditorInterface", "get_editor_scale", 1740695150, float, main.p_object); return call_ret.*; }  // 22
popup_dialog :: (main: *EditorInterface, dialog: Window) { sys_call("EditorInterface", "popup_dialog", 2015770942, Nil, main.p_object, dialog);  }  // 23
popup_dialog_centered :: (main: *EditorInterface, dialog: Window) { sys_call("EditorInterface", "popup_dialog_centered", 346557367, Nil, main.p_object, dialog);  }  // 24
popup_dialog_centered_ratio :: (main: *EditorInterface, dialog: Window) { sys_call("EditorInterface", "popup_dialog_centered_ratio", 2093669136, Nil, main.p_object, dialog);  }  // 25
popup_dialog_centered_clamped :: (main: *EditorInterface, dialog: Window) { sys_call("EditorInterface", "popup_dialog_centered_clamped", 3763385571, Nil, main.p_object, dialog);  }  // 26
get_current_feature_profile :: (main: *EditorInterface) -> gstring { call_ret := cast(*gstring) sys_call("EditorInterface", "get_current_feature_profile", 201670096, gstring, main.p_object); return call_ret.*; }  // 27
set_current_feature_profile :: (main: *EditorInterface, profile_name: string) { sys_call("EditorInterface", "set_current_feature_profile", 83702148, Nil, main.p_object, profile_name);  }  // 28
popup_node_selector :: (main: *EditorInterface, callback: Callable) { sys_call("EditorInterface", "popup_node_selector", 2444591477, Nil, main.p_object, callback);  }  // 29
popup_property_selector :: (main: *EditorInterface, object: Object, callback: Callable) { sys_call("EditorInterface", "popup_property_selector", 2955609011, Nil, main.p_object, object, callback);  }  // 30
popup_method_selector :: (main: *EditorInterface, object: Object, callback: Callable) { sys_call("EditorInterface", "popup_method_selector", 3585505226, Nil, main.p_object, object, callback);  }  // 31
popup_quick_open :: (main: *EditorInterface, callback: Callable) { sys_call("EditorInterface", "popup_quick_open", 2271411043, Nil, main.p_object, callback);  }  // 32
popup_create_dialog :: (main: *EditorInterface, callback: Callable) { sys_call("EditorInterface", "popup_create_dialog", 495277124, Nil, main.p_object, callback);  }  // 33
get_file_system_dock :: (main: *EditorInterface) -> *FileSystemDock { call_ret := cast(*FileSystemDock) sys_call("EditorInterface", "get_file_system_dock", 3751012327, FileSystemDock, main.p_object); return call_ret; }  // 34
select_file :: (main: *EditorInterface, file: string) { sys_call("EditorInterface", "select_file", 83702148, Nil, main.p_object, file);  }  // 35
get_selected_paths :: (main: *EditorInterface) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("EditorInterface", "get_selected_paths", 1139954409, PackedStringArray, main.p_object); return call_ret.*; }  // 36
get_current_path :: (main: *EditorInterface) -> gstring { call_ret := cast(*gstring) sys_call("EditorInterface", "get_current_path", 201670096, gstring, main.p_object); return call_ret.*; }  // 37
get_current_directory :: (main: *EditorInterface) -> gstring { call_ret := cast(*gstring) sys_call("EditorInterface", "get_current_directory", 201670096, gstring, main.p_object); return call_ret.*; }  // 38
get_inspector :: (main: *EditorInterface) -> *EditorInspector { call_ret := cast(*EditorInspector) sys_call("EditorInterface", "get_inspector", 3517113938, EditorInspector, main.p_object); return call_ret; }  // 39
inspect_object :: (main: *EditorInterface, object: Object) { sys_call("EditorInterface", "inspect_object", 127962172, Nil, main.p_object, object);  }  // 40
edit_resource :: (main: *EditorInterface, resource: Resource) { sys_call("EditorInterface", "edit_resource", 968641751, Nil, main.p_object, resource);  }  // 41
edit_node :: (main: *EditorInterface, node: Node) { sys_call("EditorInterface", "edit_node", 1078189570, Nil, main.p_object, node);  }  // 42
edit_script :: (main: *EditorInterface, script: Script) { sys_call("EditorInterface", "edit_script", 219829402, Nil, main.p_object, script);  }  // 43
open_scene_from_path :: (main: *EditorInterface, scene_filepath: string) { sys_call("EditorInterface", "open_scene_from_path", 1168363258, Nil, main.p_object, scene_filepath);  }  // 44
reload_scene_from_path :: (main: *EditorInterface, scene_filepath: string) { sys_call("EditorInterface", "reload_scene_from_path", 83702148, Nil, main.p_object, scene_filepath);  }  // 45
get_open_scenes :: (main: *EditorInterface) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("EditorInterface", "get_open_scenes", 1139954409, PackedStringArray, main.p_object); return call_ret.*; }  // 46
get_edited_scene_root :: (main: *EditorInterface) -> *Node { call_ret := cast(*Node) sys_call("EditorInterface", "get_edited_scene_root", 3160264692, Node, main.p_object); return call_ret; }  // 47
save_scene :: (main: *EditorInterface) -> Error { call_ret := cast(*Error) sys_call("EditorInterface", "save_scene", 166280745, Error, main.p_object); return call_ret.*; }  // 48
save_scene_as :: (main: *EditorInterface, path: string) { sys_call("EditorInterface", "save_scene_as", 3647332257, Nil, main.p_object, path);  }  // 49
save_all_scenes :: (main: *EditorInterface) { sys_call("EditorInterface", "save_all_scenes", 3218959716, Nil, main.p_object);  }  // 50
mark_scene_as_unsaved :: (main: *EditorInterface) { sys_call("EditorInterface", "mark_scene_as_unsaved", 3218959716, Nil, main.p_object);  }  // 51
play_main_scene :: (main: *EditorInterface) { sys_call("EditorInterface", "play_main_scene", 3218959716, Nil, main.p_object);  }  // 52
play_current_scene :: (main: *EditorInterface) { sys_call("EditorInterface", "play_current_scene", 3218959716, Nil, main.p_object);  }  // 53
play_custom_scene :: (main: *EditorInterface, scene_filepath: string) { sys_call("EditorInterface", "play_custom_scene", 83702148, Nil, main.p_object, scene_filepath);  }  // 54
stop_playing_scene :: (main: *EditorInterface) { sys_call("EditorInterface", "stop_playing_scene", 3218959716, Nil, main.p_object);  }  // 55
is_playing_scene :: (main: *EditorInterface) -> bool { call_ret := cast(*bool) sys_call("EditorInterface", "is_playing_scene", 36873697, bool, main.p_object); return call_ret.*; }  // 56
get_playing_scene :: (main: *EditorInterface) -> gstring { call_ret := cast(*gstring) sys_call("EditorInterface", "get_playing_scene", 201670096, gstring, main.p_object); return call_ret.*; }  // 57
set_movie_maker_enabled :: (main: *EditorInterface, enabled: bool) { sys_call("EditorInterface", "set_movie_maker_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 58
is_movie_maker_enabled :: (main: *EditorInterface) -> bool { call_ret := cast(*bool) sys_call("EditorInterface", "is_movie_maker_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 59

add_lines :: (main: *EditorNode3DGizmo, lines: PackedVector3Array, material: Material) { sys_call("EditorNode3DGizmo", "add_lines", 2910971437, Nil, main.p_object, lines, material);  }  // 12
add_mesh :: (main: *EditorNode3DGizmo, mesh: Mesh) { sys_call("EditorNode3DGizmo", "add_mesh", 1579955111, Nil, main.p_object, mesh);  }  // 13
add_collision_segments :: (main: *EditorNode3DGizmo, segments: PackedVector3Array) { sys_call("EditorNode3DGizmo", "add_collision_segments", 334873810, Nil, main.p_object, segments);  }  // 14
add_collision_triangles :: (main: *EditorNode3DGizmo, triangles: TriangleMesh) { sys_call("EditorNode3DGizmo", "add_collision_triangles", 54901064, Nil, main.p_object, triangles);  }  // 15
add_unscaled_billboard :: (main: *EditorNode3DGizmo, material: Material) { sys_call("EditorNode3DGizmo", "add_unscaled_billboard", 520007164, Nil, main.p_object, material);  }  // 16
add_handles :: (main: *EditorNode3DGizmo, handles: PackedVector3Array, material: Material, ids: PackedInt32Array) { sys_call("EditorNode3DGizmo", "add_handles", 2254560097, Nil, main.p_object, handles, material, ids);  }  // 17
set_node_3d :: (main: *EditorNode3DGizmo, node: Node) { sys_call("EditorNode3DGizmo", "set_node_3d", 1078189570, Nil, main.p_object, node);  }  // 18
get_node_3d :: (main: *EditorNode3DGizmo) -> *Node3D { call_ret := cast(*Node3D) sys_call("EditorNode3DGizmo", "get_node_3d", 151077316, Node3D, main.p_object); return call_ret; }  // 19
get_plugin :: (main: *EditorNode3DGizmo) -> *EditorNode3DGizmoPlugin { call_ret := cast(*EditorNode3DGizmoPlugin) sys_call("EditorNode3DGizmo", "get_plugin", 4250544552, EditorNode3DGizmoPlugin, main.p_object); return call_ret; }  // 20
clear :: (main: *EditorNode3DGizmo) { sys_call("EditorNode3DGizmo", "clear", 3218959716, Nil, main.p_object);  }  // 21
set_hidden :: (main: *EditorNode3DGizmo, hidden: bool) { sys_call("EditorNode3DGizmo", "set_hidden", 2586408642, Nil, main.p_object, hidden);  }  // 22
is_subgizmo_selected :: (main: *EditorNode3DGizmo, id: int) -> bool { call_ret := cast(*bool) sys_call("EditorNode3DGizmo", "is_subgizmo_selected", 1116898809, bool, main.p_object, id); return call_ret.*; }  // 23
get_subgizmo_selection :: (main: *EditorNode3DGizmo) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("EditorNode3DGizmo", "get_subgizmo_selection", 1930428628, PackedInt32Array, main.p_object); return call_ret.*; }  // 24

create_material :: (main: *EditorNode3DGizmoPlugin, name: string, color: Color) { sys_call("EditorNode3DGizmoPlugin", "create_material", 3486012546, Nil, main.p_object, name, color);  }  // 18
create_icon_material :: (main: *EditorNode3DGizmoPlugin, name: string, texture: Texture2D) { sys_call("EditorNode3DGizmoPlugin", "create_icon_material", 3804976916, Nil, main.p_object, name, texture);  }  // 19
create_handle_material :: (main: *EditorNode3DGizmoPlugin, name: string) { sys_call("EditorNode3DGizmoPlugin", "create_handle_material", 2486475223, Nil, main.p_object, name);  }  // 20
add_material :: (main: *EditorNode3DGizmoPlugin, name: string, material: StandardMaterial3D) { sys_call("EditorNode3DGizmoPlugin", "add_material", 1374068695, Nil, main.p_object, name, material);  }  // 21
get_material :: (main: *EditorNode3DGizmoPlugin, name: string) -> *StandardMaterial3D { call_ret := cast(*StandardMaterial3D) sys_call("EditorNode3DGizmoPlugin", "get_material", 974464017, StandardMaterial3D, main.p_object, name); return call_ret; }  // 22

get_data_dir :: (main: *EditorPaths) -> gstring { call_ret := cast(*gstring) sys_call("EditorPaths", "get_data_dir", 201670096, gstring, main.p_object); return call_ret.*; }  // 0
get_config_dir :: (main: *EditorPaths) -> gstring { call_ret := cast(*gstring) sys_call("EditorPaths", "get_config_dir", 201670096, gstring, main.p_object); return call_ret.*; }  // 1
get_cache_dir :: (main: *EditorPaths) -> gstring { call_ret := cast(*gstring) sys_call("EditorPaths", "get_cache_dir", 201670096, gstring, main.p_object); return call_ret.*; }  // 2
is_self_contained :: (main: *EditorPaths) -> bool { call_ret := cast(*bool) sys_call("EditorPaths", "is_self_contained", 36873697, bool, main.p_object); return call_ret.*; }  // 3
get_self_contained_file :: (main: *EditorPaths) -> gstring { call_ret := cast(*gstring) sys_call("EditorPaths", "get_self_contained_file", 201670096, gstring, main.p_object); return call_ret.*; }  // 4
get_project_settings_dir :: (main: *EditorPaths) -> gstring { call_ret := cast(*gstring) sys_call("EditorPaths", "get_project_settings_dir", 201670096, gstring, main.p_object); return call_ret.*; }  // 5

add_control_to_container :: (main: *EditorPlugin, container: EditorPlugin.CustomControlContainer, control: Control) { sys_call("EditorPlugin", "add_control_to_container", 3092750152, Nil, main.p_object, container, control);  }  // 24
add_control_to_bottom_panel :: (main: *EditorPlugin, control: Control, title: string) -> *Button { call_ret := cast(*Button) sys_call("EditorPlugin", "add_control_to_bottom_panel", 111032269, Button, main.p_object, control, title); return call_ret; }  // 25
add_control_to_dock :: (main: *EditorPlugin, slot: EditorPlugin.DockSlot, control: Control) { sys_call("EditorPlugin", "add_control_to_dock", 2994930786, Nil, main.p_object, slot, control);  }  // 26
remove_control_from_docks :: (main: *EditorPlugin, control: Control) { sys_call("EditorPlugin", "remove_control_from_docks", 1496901182, Nil, main.p_object, control);  }  // 27
remove_control_from_bottom_panel :: (main: *EditorPlugin, control: Control) { sys_call("EditorPlugin", "remove_control_from_bottom_panel", 1496901182, Nil, main.p_object, control);  }  // 28
remove_control_from_container :: (main: *EditorPlugin, container: EditorPlugin.CustomControlContainer, control: Control) { sys_call("EditorPlugin", "remove_control_from_container", 3092750152, Nil, main.p_object, container, control);  }  // 29
set_dock_tab_icon :: (main: *EditorPlugin, control: Control, icon: Texture2D) { sys_call("EditorPlugin", "set_dock_tab_icon", 3450529724, Nil, main.p_object, control, icon);  }  // 30
add_tool_menu_item :: (main: *EditorPlugin, name: string, callable: Callable) { sys_call("EditorPlugin", "add_tool_menu_item", 2137474292, Nil, main.p_object, name, callable);  }  // 31
add_tool_submenu_item :: (main: *EditorPlugin, name: string, submenu: PopupMenu) { sys_call("EditorPlugin", "add_tool_submenu_item", 1019428915, Nil, main.p_object, name, submenu);  }  // 32
remove_tool_menu_item :: (main: *EditorPlugin, name: string) { sys_call("EditorPlugin", "remove_tool_menu_item", 83702148, Nil, main.p_object, name);  }  // 33
get_export_as_menu :: (main: *EditorPlugin) -> *PopupMenu { call_ret := cast(*PopupMenu) sys_call("EditorPlugin", "get_export_as_menu", 1775878644, PopupMenu, main.p_object); return call_ret; }  // 34
add_custom_type :: (main: *EditorPlugin, type: string, base: string, script: Script, icon: Texture2D) { sys_call("EditorPlugin", "add_custom_type", 1986814599, Nil, main.p_object, type, base, script, icon);  }  // 35
remove_custom_type :: (main: *EditorPlugin, type: string) { sys_call("EditorPlugin", "remove_custom_type", 83702148, Nil, main.p_object, type);  }  // 36
add_autoload_singleton :: (main: *EditorPlugin, name: string, path: string) { sys_call("EditorPlugin", "add_autoload_singleton", 3186203200, Nil, main.p_object, name, path);  }  // 37
remove_autoload_singleton :: (main: *EditorPlugin, name: string) { sys_call("EditorPlugin", "remove_autoload_singleton", 83702148, Nil, main.p_object, name);  }  // 38
update_overlays :: (main: *EditorPlugin) -> int { call_ret := cast(*int) sys_call("EditorPlugin", "update_overlays", 3905245786, int, main.p_object); return call_ret.*; }  // 39
make_bottom_panel_item_visible :: (main: *EditorPlugin, item: Control) { sys_call("EditorPlugin", "make_bottom_panel_item_visible", 1496901182, Nil, main.p_object, item);  }  // 40
hide_bottom_panel :: (main: *EditorPlugin) { sys_call("EditorPlugin", "hide_bottom_panel", 3218959716, Nil, main.p_object);  }  // 41
get_undo_redo :: (main: *EditorPlugin) -> *EditorUndoRedoManager { call_ret := cast(*EditorUndoRedoManager) sys_call("EditorPlugin", "get_undo_redo", 773492341, EditorUndoRedoManager, main.p_object); return call_ret; }  // 42
add_undo_redo_inspector_hook_callback :: (main: *EditorPlugin, callable: Callable) { sys_call("EditorPlugin", "add_undo_redo_inspector_hook_callback", 1611583062, Nil, main.p_object, callable);  }  // 43
remove_undo_redo_inspector_hook_callback :: (main: *EditorPlugin, callable: Callable) { sys_call("EditorPlugin", "remove_undo_redo_inspector_hook_callback", 1611583062, Nil, main.p_object, callable);  }  // 44
queue_save_layout :: (main: *EditorPlugin) { sys_call("EditorPlugin", "queue_save_layout", 3218959716, Nil, main.p_object);  }  // 45
add_translation_parser_plugin :: (main: *EditorPlugin, parser: EditorTranslationParserPlugin) { sys_call("EditorPlugin", "add_translation_parser_plugin", 3116463128, Nil, main.p_object, parser);  }  // 46
remove_translation_parser_plugin :: (main: *EditorPlugin, parser: EditorTranslationParserPlugin) { sys_call("EditorPlugin", "remove_translation_parser_plugin", 3116463128, Nil, main.p_object, parser);  }  // 47
add_import_plugin :: (main: *EditorPlugin, importer: EditorImportPlugin) { sys_call("EditorPlugin", "add_import_plugin", 3113975762, Nil, main.p_object, importer);  }  // 48
remove_import_plugin :: (main: *EditorPlugin, importer: EditorImportPlugin) { sys_call("EditorPlugin", "remove_import_plugin", 2312482773, Nil, main.p_object, importer);  }  // 49
add_scene_format_importer_plugin :: (main: *EditorPlugin, scene_format_importer: EditorSceneFormatImporter) { sys_call("EditorPlugin", "add_scene_format_importer_plugin", 2764104752, Nil, main.p_object, scene_format_importer);  }  // 50
remove_scene_format_importer_plugin :: (main: *EditorPlugin, scene_format_importer: EditorSceneFormatImporter) { sys_call("EditorPlugin", "remove_scene_format_importer_plugin", 2637776123, Nil, main.p_object, scene_format_importer);  }  // 51
add_scene_post_import_plugin :: (main: *EditorPlugin, scene_import_plugin: EditorScenePostImportPlugin) { sys_call("EditorPlugin", "add_scene_post_import_plugin", 3492436322, Nil, main.p_object, scene_import_plugin);  }  // 52
remove_scene_post_import_plugin :: (main: *EditorPlugin, scene_import_plugin: EditorScenePostImportPlugin) { sys_call("EditorPlugin", "remove_scene_post_import_plugin", 3045178206, Nil, main.p_object, scene_import_plugin);  }  // 53
add_export_plugin :: (main: *EditorPlugin, plugin: EditorExportPlugin) { sys_call("EditorPlugin", "add_export_plugin", 4095952207, Nil, main.p_object, plugin);  }  // 54
remove_export_plugin :: (main: *EditorPlugin, plugin: EditorExportPlugin) { sys_call("EditorPlugin", "remove_export_plugin", 4095952207, Nil, main.p_object, plugin);  }  // 55
add_export_platform :: (main: *EditorPlugin, platform: EditorExportPlatform) { sys_call("EditorPlugin", "add_export_platform", 3431312373, Nil, main.p_object, platform);  }  // 56
remove_export_platform :: (main: *EditorPlugin, platform: EditorExportPlatform) { sys_call("EditorPlugin", "remove_export_platform", 3431312373, Nil, main.p_object, platform);  }  // 57
add_node_3d_gizmo_plugin :: (main: *EditorPlugin, plugin: EditorNode3DGizmoPlugin) { sys_call("EditorPlugin", "add_node_3d_gizmo_plugin", 1541015022, Nil, main.p_object, plugin);  }  // 58
remove_node_3d_gizmo_plugin :: (main: *EditorPlugin, plugin: EditorNode3DGizmoPlugin) { sys_call("EditorPlugin", "remove_node_3d_gizmo_plugin", 1541015022, Nil, main.p_object, plugin);  }  // 59
add_inspector_plugin :: (main: *EditorPlugin, plugin: EditorInspectorPlugin) { sys_call("EditorPlugin", "add_inspector_plugin", 546395733, Nil, main.p_object, plugin);  }  // 60
remove_inspector_plugin :: (main: *EditorPlugin, plugin: EditorInspectorPlugin) { sys_call("EditorPlugin", "remove_inspector_plugin", 546395733, Nil, main.p_object, plugin);  }  // 61
add_resource_conversion_plugin :: (main: *EditorPlugin, plugin: EditorResourceConversionPlugin) { sys_call("EditorPlugin", "add_resource_conversion_plugin", 2124849111, Nil, main.p_object, plugin);  }  // 62
remove_resource_conversion_plugin :: (main: *EditorPlugin, plugin: EditorResourceConversionPlugin) { sys_call("EditorPlugin", "remove_resource_conversion_plugin", 2124849111, Nil, main.p_object, plugin);  }  // 63
set_input_event_forwarding_always_enabled :: (main: *EditorPlugin) { sys_call("EditorPlugin", "set_input_event_forwarding_always_enabled", 3218959716, Nil, main.p_object);  }  // 64
set_force_draw_over_forwarding_enabled :: (main: *EditorPlugin) { sys_call("EditorPlugin", "set_force_draw_over_forwarding_enabled", 3218959716, Nil, main.p_object);  }  // 65
add_context_menu_plugin :: (main: *EditorPlugin, slot: EditorContextMenuPlugin.ContextMenuSlot, plugin: EditorContextMenuPlugin) { sys_call("EditorPlugin", "add_context_menu_plugin", 1904221872, Nil, main.p_object, slot, plugin);  }  // 66
remove_context_menu_plugin :: (main: *EditorPlugin, plugin: EditorContextMenuPlugin) { sys_call("EditorPlugin", "remove_context_menu_plugin", 2281511854, Nil, main.p_object, plugin);  }  // 67
get_editor_interface :: (main: *EditorPlugin) -> *EditorInterface { call_ret := cast(*EditorInterface) sys_call("EditorPlugin", "get_editor_interface", 4223731786, EditorInterface, main.p_object); return call_ret; }  // 68
get_script_create_dialog :: (main: *EditorPlugin) -> *ScriptCreateDialog { call_ret := cast(*ScriptCreateDialog) sys_call("EditorPlugin", "get_script_create_dialog", 3121871482, ScriptCreateDialog, main.p_object); return call_ret; }  // 69
add_debugger_plugin :: (main: *EditorPlugin, script: EditorDebuggerPlugin) { sys_call("EditorPlugin", "add_debugger_plugin", 3749880309, Nil, main.p_object, script);  }  // 70
remove_debugger_plugin :: (main: *EditorPlugin, script: EditorDebuggerPlugin) { sys_call("EditorPlugin", "remove_debugger_plugin", 3749880309, Nil, main.p_object, script);  }  // 71
get_plugin_version :: (main: *EditorPlugin) -> gstring { call_ret := cast(*gstring) sys_call("EditorPlugin", "get_plugin_version", 201670096, gstring, main.p_object); return call_ret.*; }  // 72

set_label :: (main: *EditorProperty, text: string) { sys_call("EditorProperty", "set_label", 83702148, Nil, main.p_object, text);  }  // 2
get_label :: (main: *EditorProperty) -> gstring { call_ret := cast(*gstring) sys_call("EditorProperty", "get_label", 201670096, gstring, main.p_object); return call_ret.*; }  // 3
set_read_only :: (main: *EditorProperty, read_only: bool) { sys_call("EditorProperty", "set_read_only", 2586408642, Nil, main.p_object, read_only);  }  // 4
is_read_only :: (main: *EditorProperty) -> bool { call_ret := cast(*bool) sys_call("EditorProperty", "is_read_only", 36873697, bool, main.p_object); return call_ret.*; }  // 5
set_draw_label :: (main: *EditorProperty, draw_label: bool) { sys_call("EditorProperty", "set_draw_label", 2586408642, Nil, main.p_object, draw_label);  }  // 6
is_draw_label :: (main: *EditorProperty) -> bool { call_ret := cast(*bool) sys_call("EditorProperty", "is_draw_label", 36873697, bool, main.p_object); return call_ret.*; }  // 7
set_draw_background :: (main: *EditorProperty, draw_background: bool) { sys_call("EditorProperty", "set_draw_background", 2586408642, Nil, main.p_object, draw_background);  }  // 8
is_draw_background :: (main: *EditorProperty) -> bool { call_ret := cast(*bool) sys_call("EditorProperty", "is_draw_background", 36873697, bool, main.p_object); return call_ret.*; }  // 9
set_checkable :: (main: *EditorProperty, checkable: bool) { sys_call("EditorProperty", "set_checkable", 2586408642, Nil, main.p_object, checkable);  }  // 10
is_checkable :: (main: *EditorProperty) -> bool { call_ret := cast(*bool) sys_call("EditorProperty", "is_checkable", 36873697, bool, main.p_object); return call_ret.*; }  // 11
set_checked :: (main: *EditorProperty, checked: bool) { sys_call("EditorProperty", "set_checked", 2586408642, Nil, main.p_object, checked);  }  // 12
is_checked :: (main: *EditorProperty) -> bool { call_ret := cast(*bool) sys_call("EditorProperty", "is_checked", 36873697, bool, main.p_object); return call_ret.*; }  // 13
set_draw_warning :: (main: *EditorProperty, draw_warning: bool) { sys_call("EditorProperty", "set_draw_warning", 2586408642, Nil, main.p_object, draw_warning);  }  // 14
is_draw_warning :: (main: *EditorProperty) -> bool { call_ret := cast(*bool) sys_call("EditorProperty", "is_draw_warning", 36873697, bool, main.p_object); return call_ret.*; }  // 15
set_keying :: (main: *EditorProperty, keying: bool) { sys_call("EditorProperty", "set_keying", 2586408642, Nil, main.p_object, keying);  }  // 16
is_keying :: (main: *EditorProperty) -> bool { call_ret := cast(*bool) sys_call("EditorProperty", "is_keying", 36873697, bool, main.p_object); return call_ret.*; }  // 17
set_deletable :: (main: *EditorProperty, deletable: bool) { sys_call("EditorProperty", "set_deletable", 2586408642, Nil, main.p_object, deletable);  }  // 18
is_deletable :: (main: *EditorProperty) -> bool { call_ret := cast(*bool) sys_call("EditorProperty", "is_deletable", 36873697, bool, main.p_object); return call_ret.*; }  // 19
get_edited_property :: (main: *EditorProperty) -> StringName { call_ret := cast(*StringName) sys_call("EditorProperty", "get_edited_property", 2002593661, StringName, main.p_object); return call_ret.*; }  // 20
get_edited_object :: (main: *EditorProperty) -> *Object { call_ret := cast(*Object) sys_call("EditorProperty", "get_edited_object", 2050059866, Object, main.p_object); return call_ret; }  // 21
update_property :: (main: *EditorProperty) { sys_call("EditorProperty", "update_property", 3218959716, Nil, main.p_object);  }  // 22
add_focusable :: (main: *EditorProperty, control: Control) { sys_call("EditorProperty", "add_focusable", 1496901182, Nil, main.p_object, control);  }  // 23
set_bottom_editor :: (main: *EditorProperty, editor: Control) { sys_call("EditorProperty", "set_bottom_editor", 1496901182, Nil, main.p_object, editor);  }  // 24
set_selectable :: (main: *EditorProperty, selectable: bool) { sys_call("EditorProperty", "set_selectable", 2586408642, Nil, main.p_object, selectable);  }  // 25
is_selectable :: (main: *EditorProperty) -> bool { call_ret := cast(*bool) sys_call("EditorProperty", "is_selectable", 36873697, bool, main.p_object); return call_ret.*; }  // 26
set_use_folding :: (main: *EditorProperty, use_folding: bool) { sys_call("EditorProperty", "set_use_folding", 2586408642, Nil, main.p_object, use_folding);  }  // 27
is_using_folding :: (main: *EditorProperty) -> bool { call_ret := cast(*bool) sys_call("EditorProperty", "is_using_folding", 36873697, bool, main.p_object); return call_ret.*; }  // 28
set_name_split_ratio :: (main: *EditorProperty, ratio: float) { sys_call("EditorProperty", "set_name_split_ratio", 373806689, Nil, main.p_object, ratio);  }  // 29
get_name_split_ratio :: (main: *EditorProperty) -> float { call_ret := cast(*float) sys_call("EditorProperty", "get_name_split_ratio", 1740695150, float, main.p_object); return call_ret.*; }  // 30
deselect :: (main: *EditorProperty) { sys_call("EditorProperty", "deselect", 3218959716, Nil, main.p_object);  }  // 31
is_selected :: (main: *EditorProperty) -> bool { call_ret := cast(*bool) sys_call("EditorProperty", "is_selected", 36873697, bool, main.p_object); return call_ret.*; }  // 32
select :: (main: *EditorProperty) { sys_call("EditorProperty", "select", 1025054187, Nil, main.p_object);  }  // 33
set_object_and_property :: (main: *EditorProperty, object: Object, property: string) { sys_call("EditorProperty", "set_object_and_property", 4157606280, Nil, main.p_object, object, property);  }  // 34
set_label_reference :: (main: *EditorProperty, control: Control) { sys_call("EditorProperty", "set_label_reference", 1496901182, Nil, main.p_object, control);  }  // 35
emit_changed :: (main: *EditorProperty, property: string, value: Variant) { sys_call("EditorProperty", "emit_changed", 1822500399, Nil, main.p_object, property, value);  }  // 36


set_base_type :: (main: *EditorResourcePicker, base_type: string) { sys_call("EditorResourcePicker", "set_base_type", 83702148, Nil, main.p_object, base_type);  }  // 2
get_base_type :: (main: *EditorResourcePicker) -> gstring { call_ret := cast(*gstring) sys_call("EditorResourcePicker", "get_base_type", 201670096, gstring, main.p_object); return call_ret.*; }  // 3
get_allowed_types :: (main: *EditorResourcePicker) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("EditorResourcePicker", "get_allowed_types", 1139954409, PackedStringArray, main.p_object); return call_ret.*; }  // 4
set_edited_resource :: (main: *EditorResourcePicker, resource: Resource) { sys_call("EditorResourcePicker", "set_edited_resource", 968641751, Nil, main.p_object, resource);  }  // 5
get_edited_resource :: (main: *EditorResourcePicker) -> *Resource { call_ret := cast(*Resource) sys_call("EditorResourcePicker", "get_edited_resource", 2674603643, Resource, main.p_object); return call_ret; }  // 6
set_toggle_mode :: (main: *EditorResourcePicker, enable: bool) { sys_call("EditorResourcePicker", "set_toggle_mode", 2586408642, Nil, main.p_object, enable);  }  // 7
is_toggle_mode :: (main: *EditorResourcePicker) -> bool { call_ret := cast(*bool) sys_call("EditorResourcePicker", "is_toggle_mode", 36873697, bool, main.p_object); return call_ret.*; }  // 8
set_toggle_pressed :: (main: *EditorResourcePicker, pressed: bool) { sys_call("EditorResourcePicker", "set_toggle_pressed", 2586408642, Nil, main.p_object, pressed);  }  // 9
set_editable :: (main: *EditorResourcePicker, enable: bool) { sys_call("EditorResourcePicker", "set_editable", 2586408642, Nil, main.p_object, enable);  }  // 10
is_editable :: (main: *EditorResourcePicker) -> bool { call_ret := cast(*bool) sys_call("EditorResourcePicker", "is_editable", 36873697, bool, main.p_object); return call_ret.*; }  // 11

queue_resource_preview :: (main: *EditorResourcePreview, path: string, receiver: Object, receiver_func: string, userdata: Variant) { sys_call("EditorResourcePreview", "queue_resource_preview", 233177534, Nil, main.p_object, path, receiver, receiver_func, userdata);  }  // 0
queue_edited_resource_preview :: (main: *EditorResourcePreview, resource: Resource, receiver: Object, receiver_func: string, userdata: Variant) { sys_call("EditorResourcePreview", "queue_edited_resource_preview", 1608376650, Nil, main.p_object, resource, receiver, receiver_func, userdata);  }  // 1
add_preview_generator :: (main: *EditorResourcePreview, generator: EditorResourcePreviewGenerator) { sys_call("EditorResourcePreview", "add_preview_generator", 332288124, Nil, main.p_object, generator);  }  // 2
remove_preview_generator :: (main: *EditorResourcePreview, generator: EditorResourcePreviewGenerator) { sys_call("EditorResourcePreview", "remove_preview_generator", 332288124, Nil, main.p_object, generator);  }  // 3
check_for_invalidation :: (main: *EditorResourcePreview, path: string) { sys_call("EditorResourcePreview", "check_for_invalidation", 83702148, Nil, main.p_object, path);  }  // 4


request_thumbnail :: (main: *EditorResourceTooltipPlugin, path: string, control: TextureRect) { sys_call("EditorResourceTooltipPlugin", "request_thumbnail", 3245519720, Nil, main.p_object, path, control);  }  // 2

add_import_option :: (main: *EditorSceneFormatImporter, name: string, value: Variant) { sys_call("EditorSceneFormatImporter", "add_import_option", 402577236, Nil, main.p_object, name, value);  }  // 4
add_import_option_advanced :: (main: *EditorSceneFormatImporter, type: Variant_Type, name: string, default_value: Variant) { sys_call("EditorSceneFormatImporter", "add_import_option_advanced", 3674075649, Nil, main.p_object, type, name, default_value);  }  // 5





get_source_file :: (main: *EditorScenePostImport) -> gstring { call_ret := cast(*gstring) sys_call("EditorScenePostImport", "get_source_file", 201670096, gstring, main.p_object); return call_ret.*; }  // 1

get_option_value :: (main: *EditorScenePostImportPlugin, name: string) -> Variant { call_ret := cast(*Variant) sys_call("EditorScenePostImportPlugin", "get_option_value", 2760726917, Variant, main.p_object, name); return call_ret.*; }  // 8
add_import_option :: (main: *EditorScenePostImportPlugin, name: string, value: Variant) { sys_call("EditorScenePostImportPlugin", "add_import_option", 402577236, Nil, main.p_object, name, value);  }  // 9
add_import_option_advanced :: (main: *EditorScenePostImportPlugin, type: Variant_Type, name: string, default_value: Variant) { sys_call("EditorScenePostImportPlugin", "add_import_option_advanced", 3674075649, Nil, main.p_object, type, name, default_value);  }  // 10

add_root_node :: (main: *EditorScript, node: Node) { sys_call("EditorScript", "add_root_node", 1078189570, Nil, main.p_object, node);  }  // 1
get_scene :: (main: *EditorScript) -> *Node { call_ret := cast(*Node) sys_call("EditorScript", "get_scene", 3160264692, Node, main.p_object); return call_ret; }  // 2
get_editor_interface :: (main: *EditorScript) -> *EditorInterface { call_ret := cast(*EditorInterface) sys_call("EditorScript", "get_editor_interface", 1976662476, EditorInterface, main.p_object); return call_ret; }  // 3

set_script_owner :: (main: *EditorScriptPicker, owner_node: Node) { sys_call("EditorScriptPicker", "set_script_owner", 1078189570, Nil, main.p_object, owner_node);  }  // 0
get_script_owner :: (main: *EditorScriptPicker) -> *Node { call_ret := cast(*Node) sys_call("EditorScriptPicker", "get_script_owner", 3160264692, Node, main.p_object); return call_ret; }  // 1

clear :: (main: *EditorSelection) { sys_call("EditorSelection", "clear", 3218959716, Nil, main.p_object);  }  // 0
add_node :: (main: *EditorSelection, node: Node) { sys_call("EditorSelection", "add_node", 1078189570, Nil, main.p_object, node);  }  // 1
remove_node :: (main: *EditorSelection, node: Node) { sys_call("EditorSelection", "remove_node", 1078189570, Nil, main.p_object, node);  }  // 2
get_selected_nodes :: (main: *EditorSelection) -> [] Node { call_ret := cast(*[] Node) sys_call("EditorSelection", "get_selected_nodes", 2915620761, [] Node, main.p_object); return call_ret.*; }  // 3
get_transformable_selected_nodes :: (main: *EditorSelection) -> [] Node { call_ret := cast(*[] Node) sys_call("EditorSelection", "get_transformable_selected_nodes", 2915620761, [] Node, main.p_object); return call_ret.*; }  // 4

has_setting :: (main: *EditorSettings, name: string) -> bool { call_ret := cast(*bool) sys_call("EditorSettings", "has_setting", 3927539163, bool, main.p_object, name); return call_ret.*; }  // 0
set_setting :: (main: *EditorSettings, name: string, value: Variant) { sys_call("EditorSettings", "set_setting", 402577236, Nil, main.p_object, name, value);  }  // 1
get_setting :: (main: *EditorSettings, name: string) -> Variant { call_ret := cast(*Variant) sys_call("EditorSettings", "get_setting", 1868160156, Variant, main.p_object, name); return call_ret.*; }  // 2
erase :: (main: *EditorSettings, property: string) { sys_call("EditorSettings", "erase", 83702148, Nil, main.p_object, property);  }  // 3
set_initial_value :: (main: *EditorSettings, name: string, value: Variant, update_current: bool) { sys_call("EditorSettings", "set_initial_value", 1529169264, Nil, main.p_object, name, value, update_current);  }  // 4
add_property_info :: (main: *EditorSettings, info: Dictionary) { sys_call("EditorSettings", "add_property_info", 4155329257, Nil, main.p_object, info);  }  // 5
set_project_metadata :: (main: *EditorSettings, section: string, key: string, data: Variant) { sys_call("EditorSettings", "set_project_metadata", 2504492430, Nil, main.p_object, section, key, data);  }  // 6
get_project_metadata :: (main: *EditorSettings, section: string, key: string) -> Variant { call_ret := cast(*Variant) sys_call("EditorSettings", "get_project_metadata", 89809366, Variant, main.p_object, section, key); return call_ret.*; }  // 7
set_favorites :: (main: *EditorSettings, dirs: PackedStringArray) { sys_call("EditorSettings", "set_favorites", 4015028928, Nil, main.p_object, dirs);  }  // 8
get_favorites :: (main: *EditorSettings) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("EditorSettings", "get_favorites", 1139954409, PackedStringArray, main.p_object); return call_ret.*; }  // 9
set_recent_dirs :: (main: *EditorSettings, dirs: PackedStringArray) { sys_call("EditorSettings", "set_recent_dirs", 4015028928, Nil, main.p_object, dirs);  }  // 10
get_recent_dirs :: (main: *EditorSettings) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("EditorSettings", "get_recent_dirs", 1139954409, PackedStringArray, main.p_object); return call_ret.*; }  // 11
set_builtin_action_override :: (main: *EditorSettings, name: string, actions_list: [] InputEvent) { sys_call("EditorSettings", "set_builtin_action_override", 1209351045, Nil, main.p_object, name, actions_list);  }  // 12
check_changed_settings_in_group :: (main: *EditorSettings, setting_prefix: string) -> bool { call_ret := cast(*bool) sys_call("EditorSettings", "check_changed_settings_in_group", 3927539163, bool, main.p_object, setting_prefix); return call_ret.*; }  // 13
get_changed_settings :: (main: *EditorSettings) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("EditorSettings", "get_changed_settings", 1139954409, PackedStringArray, main.p_object); return call_ret.*; }  // 14
mark_setting_changed :: (main: *EditorSettings, setting: string) { sys_call("EditorSettings", "mark_setting_changed", 83702148, Nil, main.p_object, setting);  }  // 15

set_label :: (main: *EditorSpinSlider, label: string) { sys_call("EditorSpinSlider", "set_label", 83702148, Nil, main.p_object, label);  }  // 0
get_label :: (main: *EditorSpinSlider) -> gstring { call_ret := cast(*gstring) sys_call("EditorSpinSlider", "get_label", 201670096, gstring, main.p_object); return call_ret.*; }  // 1
set_suffix :: (main: *EditorSpinSlider, suffix: string) { sys_call("EditorSpinSlider", "set_suffix", 83702148, Nil, main.p_object, suffix);  }  // 2
get_suffix :: (main: *EditorSpinSlider) -> gstring { call_ret := cast(*gstring) sys_call("EditorSpinSlider", "get_suffix", 201670096, gstring, main.p_object); return call_ret.*; }  // 3
set_read_only :: (main: *EditorSpinSlider, read_only: bool) { sys_call("EditorSpinSlider", "set_read_only", 2586408642, Nil, main.p_object, read_only);  }  // 4
is_read_only :: (main: *EditorSpinSlider) -> bool { call_ret := cast(*bool) sys_call("EditorSpinSlider", "is_read_only", 36873697, bool, main.p_object); return call_ret.*; }  // 5
set_flat :: (main: *EditorSpinSlider, flat: bool) { sys_call("EditorSpinSlider", "set_flat", 2586408642, Nil, main.p_object, flat);  }  // 6
is_flat :: (main: *EditorSpinSlider) -> bool { call_ret := cast(*bool) sys_call("EditorSpinSlider", "is_flat", 36873697, bool, main.p_object); return call_ret.*; }  // 7
set_hide_slider :: (main: *EditorSpinSlider, hide_slider: bool) { sys_call("EditorSpinSlider", "set_hide_slider", 2586408642, Nil, main.p_object, hide_slider);  }  // 8
is_hiding_slider :: (main: *EditorSpinSlider) -> bool { call_ret := cast(*bool) sys_call("EditorSpinSlider", "is_hiding_slider", 36873697, bool, main.p_object); return call_ret.*; }  // 9
set_editing_integer :: (main: *EditorSpinSlider, editing_integer: bool) { sys_call("EditorSpinSlider", "set_editing_integer", 2586408642, Nil, main.p_object, editing_integer);  }  // 10
is_editing_integer :: (main: *EditorSpinSlider) -> bool { call_ret := cast(*bool) sys_call("EditorSpinSlider", "is_editing_integer", 36873697, bool, main.p_object); return call_ret.*; }  // 11


push_toast :: (main: *EditorToaster, message: string) { sys_call("EditorToaster", "push_toast", 1813923476, Nil, main.p_object, message);  }  // 0


create_action :: (main: *EditorUndoRedoManager, name: string) { sys_call("EditorUndoRedoManager", "create_action", 2107025470, Nil, main.p_object, name);  }  // 0
commit_action :: (main: *EditorUndoRedoManager) { sys_call("EditorUndoRedoManager", "commit_action", 3216645846, Nil, main.p_object);  }  // 1
is_committing_action :: (main: *EditorUndoRedoManager) -> bool { call_ret := cast(*bool) sys_call("EditorUndoRedoManager", "is_committing_action", 36873697, bool, main.p_object); return call_ret.*; }  // 2
force_fixed_history :: (main: *EditorUndoRedoManager) { sys_call("EditorUndoRedoManager", "force_fixed_history", 3218959716, Nil, main.p_object);  }  // 3
add_do_method :: (main: *EditorUndoRedoManager, object: Object, method: string) { sys_call("EditorUndoRedoManager", "add_do_method", 1517810467, Nil, main.p_object, object, method);  }  // 4
add_undo_method :: (main: *EditorUndoRedoManager, object: Object, method: string) { sys_call("EditorUndoRedoManager", "add_undo_method", 1517810467, Nil, main.p_object, object, method);  }  // 5
add_do_property :: (main: *EditorUndoRedoManager, object: Object, property: string, value: Variant) { sys_call("EditorUndoRedoManager", "add_do_property", 1017172818, Nil, main.p_object, object, property, value);  }  // 6
add_undo_property :: (main: *EditorUndoRedoManager, object: Object, property: string, value: Variant) { sys_call("EditorUndoRedoManager", "add_undo_property", 1017172818, Nil, main.p_object, object, property, value);  }  // 7
add_do_reference :: (main: *EditorUndoRedoManager, object: Object) { sys_call("EditorUndoRedoManager", "add_do_reference", 3975164845, Nil, main.p_object, object);  }  // 8
add_undo_reference :: (main: *EditorUndoRedoManager, object: Object) { sys_call("EditorUndoRedoManager", "add_undo_reference", 3975164845, Nil, main.p_object, object);  }  // 9
get_object_history_id :: (main: *EditorUndoRedoManager, object: Object) -> int { call_ret := cast(*int) sys_call("EditorUndoRedoManager", "get_object_history_id", 1107568780, int, main.p_object, object); return call_ret.*; }  // 10
get_history_undo_redo :: (main: *EditorUndoRedoManager, id: int) -> *UndoRedo { call_ret := cast(*UndoRedo) sys_call("EditorUndoRedoManager", "get_history_undo_redo", 2417974513, UndoRedo, main.p_object, id); return call_ret; }  // 11
clear_history :: (main: *EditorUndoRedoManager) { sys_call("EditorUndoRedoManager", "clear_history", 2020603371, Nil, main.p_object);  }  // 12

create_diff_line :: (main: *EditorVCSInterface, new_line_no: int, old_line_no: int, content: string, status: string) -> Dictionary { call_ret := cast(*Dictionary) sys_call("EditorVCSInterface", "create_diff_line", 2901184053, Dictionary, main.p_object, new_line_no, old_line_no, content, status); return call_ret.*; }  // 23
create_diff_hunk :: (main: *EditorVCSInterface, old_start: int, new_start: int, old_lines: int, new_lines: int) -> Dictionary { call_ret := cast(*Dictionary) sys_call("EditorVCSInterface", "create_diff_hunk", 3784842090, Dictionary, main.p_object, old_start, new_start, old_lines, new_lines); return call_ret.*; }  // 24
create_diff_file :: (main: *EditorVCSInterface, new_file: string, old_file: string) -> Dictionary { call_ret := cast(*Dictionary) sys_call("EditorVCSInterface", "create_diff_file", 2723227684, Dictionary, main.p_object, new_file, old_file); return call_ret.*; }  // 25
create_commit :: (main: *EditorVCSInterface, msg: string, author: string, id: string, unix_timestamp: int, offset_minutes: int) -> Dictionary { call_ret := cast(*Dictionary) sys_call("EditorVCSInterface", "create_commit", 1075983584, Dictionary, main.p_object, msg, author, id, unix_timestamp, offset_minutes); return call_ret.*; }  // 26
create_status_file :: (main: *EditorVCSInterface, file_path: string, change_type: EditorVCSInterface.ChangeType, area: EditorVCSInterface.TreeArea) -> Dictionary { call_ret := cast(*Dictionary) sys_call("EditorVCSInterface", "create_status_file", 1083471673, Dictionary, main.p_object, file_path, change_type, area); return call_ret.*; }  // 27
add_diff_hunks_into_diff_file :: (main: *EditorVCSInterface, diff_file: Dictionary, diff_hunks: [] Dictionary) -> Dictionary { call_ret := cast(*Dictionary) sys_call("EditorVCSInterface", "add_diff_hunks_into_diff_file", 4015243225, Dictionary, main.p_object, diff_file, diff_hunks); return call_ret.*; }  // 28
add_line_diffs_into_diff_hunk :: (main: *EditorVCSInterface, diff_hunk: Dictionary, line_diffs: [] Dictionary) -> Dictionary { call_ret := cast(*Dictionary) sys_call("EditorVCSInterface", "add_line_diffs_into_diff_hunk", 4015243225, Dictionary, main.p_object, diff_hunk, line_diffs); return call_ret.*; }  // 29
popup_error :: (main: *EditorVCSInterface, msg: string) { sys_call("EditorVCSInterface", "popup_error", 83702148, Nil, main.p_object, msg);  }  // 30

set_object_id :: (main: *EncodedObjectAsID, id: int) { sys_call("EncodedObjectAsID", "set_object_id", 1286410249, Nil, main.p_object, id);  }  // 0
get_object_id :: (main: *EncodedObjectAsID) -> int { call_ret := cast(*int) sys_call("EncodedObjectAsID", "get_object_id", 3905245786, int, main.p_object); return call_ret.*; }  // 1

set_physics_ticks_per_second :: (main: *Engine, physics_ticks_per_second: int) { sys_call("Engine", "set_physics_ticks_per_second", 1286410249, Nil, main.p_object, physics_ticks_per_second);  }  // 0
get_physics_ticks_per_second :: (main: *Engine) -> int { call_ret := cast(*int) sys_call("Engine", "get_physics_ticks_per_second", 3905245786, int, main.p_object); return call_ret.*; }  // 1
set_max_physics_steps_per_frame :: (main: *Engine, max_physics_steps: int) { sys_call("Engine", "set_max_physics_steps_per_frame", 1286410249, Nil, main.p_object, max_physics_steps);  }  // 2
get_max_physics_steps_per_frame :: (main: *Engine) -> int { call_ret := cast(*int) sys_call("Engine", "get_max_physics_steps_per_frame", 3905245786, int, main.p_object); return call_ret.*; }  // 3
set_physics_jitter_fix :: (main: *Engine, physics_jitter_fix: float) { sys_call("Engine", "set_physics_jitter_fix", 373806689, Nil, main.p_object, physics_jitter_fix);  }  // 4
get_physics_jitter_fix :: (main: *Engine) -> float { call_ret := cast(*float) sys_call("Engine", "get_physics_jitter_fix", 1740695150, float, main.p_object); return call_ret.*; }  // 5
get_physics_interpolation_fraction :: (main: *Engine) -> float { call_ret := cast(*float) sys_call("Engine", "get_physics_interpolation_fraction", 1740695150, float, main.p_object); return call_ret.*; }  // 6
set_max_fps :: (main: *Engine, max_fps: int) { sys_call("Engine", "set_max_fps", 1286410249, Nil, main.p_object, max_fps);  }  // 7
get_max_fps :: (main: *Engine) -> int { call_ret := cast(*int) sys_call("Engine", "get_max_fps", 3905245786, int, main.p_object); return call_ret.*; }  // 8
set_time_scale :: (main: *Engine, time_scale: float) { sys_call("Engine", "set_time_scale", 373806689, Nil, main.p_object, time_scale);  }  // 9
get_time_scale :: (main: *Engine) -> float { call_ret := cast(*float) sys_call("Engine", "get_time_scale", 191475506, float, main.p_object); return call_ret.*; }  // 10
get_frames_drawn :: (main: *Engine) -> int { call_ret := cast(*int) sys_call("Engine", "get_frames_drawn", 2455072627, int, main.p_object); return call_ret.*; }  // 11
get_frames_per_second :: (main: *Engine) -> float { call_ret := cast(*float) sys_call("Engine", "get_frames_per_second", 1740695150, float, main.p_object); return call_ret.*; }  // 12
get_physics_frames :: (main: *Engine) -> int { call_ret := cast(*int) sys_call("Engine", "get_physics_frames", 3905245786, int, main.p_object); return call_ret.*; }  // 13
get_process_frames :: (main: *Engine) -> int { call_ret := cast(*int) sys_call("Engine", "get_process_frames", 3905245786, int, main.p_object); return call_ret.*; }  // 14
get_main_loop :: (main: *Engine) -> *MainLoop { call_ret := cast(*MainLoop) sys_call("Engine", "get_main_loop", 1016888095, MainLoop, main.p_object); return call_ret; }  // 15
get_version_info :: (main: *Engine) -> Dictionary { call_ret := cast(*Dictionary) sys_call("Engine", "get_version_info", 3102165223, Dictionary, main.p_object); return call_ret.*; }  // 16
get_author_info :: (main: *Engine) -> Dictionary { call_ret := cast(*Dictionary) sys_call("Engine", "get_author_info", 3102165223, Dictionary, main.p_object); return call_ret.*; }  // 17
get_copyright_info :: (main: *Engine) -> [] Dictionary { call_ret := cast(*[] Dictionary) sys_call("Engine", "get_copyright_info", 3995934104, [] Dictionary, main.p_object); return call_ret.*; }  // 18
get_donor_info :: (main: *Engine) -> Dictionary { call_ret := cast(*Dictionary) sys_call("Engine", "get_donor_info", 3102165223, Dictionary, main.p_object); return call_ret.*; }  // 19
get_license_info :: (main: *Engine) -> Dictionary { call_ret := cast(*Dictionary) sys_call("Engine", "get_license_info", 3102165223, Dictionary, main.p_object); return call_ret.*; }  // 20
get_license_text :: (main: *Engine) -> gstring { call_ret := cast(*gstring) sys_call("Engine", "get_license_text", 201670096, gstring, main.p_object); return call_ret.*; }  // 21
get_architecture_name :: (main: *Engine) -> gstring { call_ret := cast(*gstring) sys_call("Engine", "get_architecture_name", 201670096, gstring, main.p_object); return call_ret.*; }  // 22
is_in_physics_frame :: (main: *Engine) -> bool { call_ret := cast(*bool) sys_call("Engine", "is_in_physics_frame", 36873697, bool, main.p_object); return call_ret.*; }  // 23
has_singleton :: (main: *Engine, name: string) -> bool { call_ret := cast(*bool) sys_call("Engine", "has_singleton", 2619796661, bool, main.p_object, name); return call_ret.*; }  // 24
get_singleton :: (main: *Engine, name: string) -> *Object { call_ret := cast(*Object) sys_call("Engine", "get_singleton", 1371597918, Object, main.p_object, name); return call_ret; }  // 25
register_singleton :: (main: *Engine, name: string, instance: Object) { sys_call("Engine", "register_singleton", 965313290, Nil, main.p_object, name, instance);  }  // 26
unregister_singleton :: (main: *Engine, name: string) { sys_call("Engine", "unregister_singleton", 3304788590, Nil, main.p_object, name);  }  // 27
get_singleton_list :: (main: *Engine) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("Engine", "get_singleton_list", 1139954409, PackedStringArray, main.p_object); return call_ret.*; }  // 28
register_script_language :: (main: *Engine, language: ScriptLanguage) -> Error { call_ret := cast(*Error) sys_call("Engine", "register_script_language", 1850254898, Error, main.p_object, language); return call_ret.*; }  // 29
unregister_script_language :: (main: *Engine, language: ScriptLanguage) -> Error { call_ret := cast(*Error) sys_call("Engine", "unregister_script_language", 1850254898, Error, main.p_object, language); return call_ret.*; }  // 30
get_script_language_count :: (main: *Engine) -> int { call_ret := cast(*int) sys_call("Engine", "get_script_language_count", 2455072627, int, main.p_object); return call_ret.*; }  // 31
get_script_language :: (main: *Engine, index: int) -> *ScriptLanguage { call_ret := cast(*ScriptLanguage) sys_call("Engine", "get_script_language", 2151255799, ScriptLanguage, main.p_object, index); return call_ret; }  // 32
is_editor_hint :: (main: *Engine) -> bool { call_ret := cast(*bool) sys_call("Engine", "is_editor_hint", 36873697, bool, main.p_object); return call_ret.*; }  // 33
is_embedded_in_editor :: (main: *Engine) -> bool { call_ret := cast(*bool) sys_call("Engine", "is_embedded_in_editor", 36873697, bool, main.p_object); return call_ret.*; }  // 34
get_write_movie_path :: (main: *Engine) -> gstring { call_ret := cast(*gstring) sys_call("Engine", "get_write_movie_path", 201670096, gstring, main.p_object); return call_ret.*; }  // 35
set_print_to_stdout :: (main: *Engine, enabled: bool) { sys_call("Engine", "set_print_to_stdout", 2586408642, Nil, main.p_object, enabled);  }  // 36
is_printing_to_stdout :: (main: *Engine) -> bool { call_ret := cast(*bool) sys_call("Engine", "is_printing_to_stdout", 36873697, bool, main.p_object); return call_ret.*; }  // 37
set_print_error_messages :: (main: *Engine, enabled: bool) { sys_call("Engine", "set_print_error_messages", 2586408642, Nil, main.p_object, enabled);  }  // 38
is_printing_error_messages :: (main: *Engine) -> bool { call_ret := cast(*bool) sys_call("Engine", "is_printing_error_messages", 36873697, bool, main.p_object); return call_ret.*; }  // 39

is_active :: (main: *EngineDebugger) -> bool { call_ret := cast(*bool) sys_call("EngineDebugger", "is_active", 2240911060, bool, main.p_object); return call_ret.*; }  // 0
register_profiler :: (main: *EngineDebugger, name: string, profiler: EngineProfiler) { sys_call("EngineDebugger", "register_profiler", 3651669560, Nil, main.p_object, name, profiler);  }  // 1
unregister_profiler :: (main: *EngineDebugger, name: string) { sys_call("EngineDebugger", "unregister_profiler", 3304788590, Nil, main.p_object, name);  }  // 2
is_profiling :: (main: *EngineDebugger, name: string) -> bool { call_ret := cast(*bool) sys_call("EngineDebugger", "is_profiling", 2041966384, bool, main.p_object, name); return call_ret.*; }  // 3
has_profiler :: (main: *EngineDebugger, name: string) -> bool { call_ret := cast(*bool) sys_call("EngineDebugger", "has_profiler", 2041966384, bool, main.p_object, name); return call_ret.*; }  // 4
profiler_add_frame_data :: (main: *EngineDebugger, name: string, data: Array) { sys_call("EngineDebugger", "profiler_add_frame_data", 1895267858, Nil, main.p_object, name, data);  }  // 5
profiler_enable :: (main: *EngineDebugger, name: string, enable: bool) { sys_call("EngineDebugger", "profiler_enable", 3192561009, Nil, main.p_object, name, enable);  }  // 6
register_message_capture :: (main: *EngineDebugger, name: string, callable: Callable) { sys_call("EngineDebugger", "register_message_capture", 1874754934, Nil, main.p_object, name, callable);  }  // 7
unregister_message_capture :: (main: *EngineDebugger, name: string) { sys_call("EngineDebugger", "unregister_message_capture", 3304788590, Nil, main.p_object, name);  }  // 8
has_capture :: (main: *EngineDebugger, name: string) -> bool { call_ret := cast(*bool) sys_call("EngineDebugger", "has_capture", 2041966384, bool, main.p_object, name); return call_ret.*; }  // 9
line_poll :: (main: *EngineDebugger) { sys_call("EngineDebugger", "line_poll", 3218959716, Nil, main.p_object);  }  // 10
send_message :: (main: *EngineDebugger, message: string, data: Array) { sys_call("EngineDebugger", "send_message", 1209351045, Nil, main.p_object, message, data);  }  // 11
debug :: (main: *EngineDebugger) { sys_call("EngineDebugger", "debug", 2751962654, Nil, main.p_object);  }  // 12
script_debug :: (main: *EngineDebugger, language: ScriptLanguage) { sys_call("EngineDebugger", "script_debug", 2442343672, Nil, main.p_object, language);  }  // 13
set_lines_left :: (main: *EngineDebugger, lines: int) { sys_call("EngineDebugger", "set_lines_left", 1286410249, Nil, main.p_object, lines);  }  // 14
get_lines_left :: (main: *EngineDebugger) -> int { call_ret := cast(*int) sys_call("EngineDebugger", "get_lines_left", 3905245786, int, main.p_object); return call_ret.*; }  // 15
set_depth :: (main: *EngineDebugger, depth: int) { sys_call("EngineDebugger", "set_depth", 1286410249, Nil, main.p_object, depth);  }  // 16
get_depth :: (main: *EngineDebugger) -> int { call_ret := cast(*int) sys_call("EngineDebugger", "get_depth", 3905245786, int, main.p_object); return call_ret.*; }  // 17
is_breakpoint :: (main: *EngineDebugger, line: int, source: string) -> bool { call_ret := cast(*bool) sys_call("EngineDebugger", "is_breakpoint", 921227809, bool, main.p_object, line, source); return call_ret.*; }  // 18
is_skipping_breakpoints :: (main: *EngineDebugger) -> bool { call_ret := cast(*bool) sys_call("EngineDebugger", "is_skipping_breakpoints", 36873697, bool, main.p_object); return call_ret.*; }  // 19
insert_breakpoint :: (main: *EngineDebugger, line: int, source: string) { sys_call("EngineDebugger", "insert_breakpoint", 3780747571, Nil, main.p_object, line, source);  }  // 20
remove_breakpoint :: (main: *EngineDebugger, line: int, source: string) { sys_call("EngineDebugger", "remove_breakpoint", 3780747571, Nil, main.p_object, line, source);  }  // 21
clear_breakpoints :: (main: *EngineDebugger) { sys_call("EngineDebugger", "clear_breakpoints", 3218959716, Nil, main.p_object);  }  // 22


set_background :: (main: *Environment, mode: Environment.BGMode) { sys_call("Environment", "set_background", 4071623990, Nil, main.p_object, mode);  }  // 0
get_background :: (main: *Environment) -> Environment.BGMode { call_ret := cast(*Environment.BGMode) sys_call("Environment", "get_background", 1843210413, Environment.BGMode, main.p_object); return call_ret.*; }  // 1
set_sky :: (main: *Environment, sky: Sky) { sys_call("Environment", "set_sky", 3336722921, Nil, main.p_object, sky);  }  // 2
get_sky :: (main: *Environment) -> *Sky { call_ret := cast(*Sky) sys_call("Environment", "get_sky", 1177136966, Sky, main.p_object); return call_ret; }  // 3
set_sky_custom_fov :: (main: *Environment, scale: float) { sys_call("Environment", "set_sky_custom_fov", 373806689, Nil, main.p_object, scale);  }  // 4
get_sky_custom_fov :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_sky_custom_fov", 1740695150, float, main.p_object); return call_ret.*; }  // 5
set_sky_rotation :: (main: *Environment, euler_radians: Vector3) { sys_call("Environment", "set_sky_rotation", 3460891852, Nil, main.p_object, euler_radians);  }  // 6
get_sky_rotation :: (main: *Environment) -> Vector3 { call_ret := cast(*Vector3) sys_call("Environment", "get_sky_rotation", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 7
set_bg_color :: (main: *Environment, color: Color) { sys_call("Environment", "set_bg_color", 2920490490, Nil, main.p_object, color);  }  // 8
get_bg_color :: (main: *Environment) -> Color { call_ret := cast(*Color) sys_call("Environment", "get_bg_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 9
set_bg_energy_multiplier :: (main: *Environment, energy: float) { sys_call("Environment", "set_bg_energy_multiplier", 373806689, Nil, main.p_object, energy);  }  // 10
get_bg_energy_multiplier :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_bg_energy_multiplier", 1740695150, float, main.p_object); return call_ret.*; }  // 11
set_bg_intensity :: (main: *Environment, energy: float) { sys_call("Environment", "set_bg_intensity", 373806689, Nil, main.p_object, energy);  }  // 12
get_bg_intensity :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_bg_intensity", 1740695150, float, main.p_object); return call_ret.*; }  // 13
set_canvas_max_layer :: (main: *Environment, layer: int) { sys_call("Environment", "set_canvas_max_layer", 1286410249, Nil, main.p_object, layer);  }  // 14
get_canvas_max_layer :: (main: *Environment) -> int { call_ret := cast(*int) sys_call("Environment", "get_canvas_max_layer", 3905245786, int, main.p_object); return call_ret.*; }  // 15
set_camera_feed_id :: (main: *Environment, id: int) { sys_call("Environment", "set_camera_feed_id", 1286410249, Nil, main.p_object, id);  }  // 16
get_camera_feed_id :: (main: *Environment) -> int { call_ret := cast(*int) sys_call("Environment", "get_camera_feed_id", 3905245786, int, main.p_object); return call_ret.*; }  // 17
set_ambient_light_color :: (main: *Environment, color: Color) { sys_call("Environment", "set_ambient_light_color", 2920490490, Nil, main.p_object, color);  }  // 18
get_ambient_light_color :: (main: *Environment) -> Color { call_ret := cast(*Color) sys_call("Environment", "get_ambient_light_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 19
set_ambient_source :: (main: *Environment, source: Environment.AmbientSource) { sys_call("Environment", "set_ambient_source", 2607780160, Nil, main.p_object, source);  }  // 20
get_ambient_source :: (main: *Environment) -> Environment.AmbientSource { call_ret := cast(*Environment.AmbientSource) sys_call("Environment", "get_ambient_source", 67453933, Environment.AmbientSource, main.p_object); return call_ret.*; }  // 21
set_ambient_light_energy :: (main: *Environment, energy: float) { sys_call("Environment", "set_ambient_light_energy", 373806689, Nil, main.p_object, energy);  }  // 22
get_ambient_light_energy :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_ambient_light_energy", 1740695150, float, main.p_object); return call_ret.*; }  // 23
set_ambient_light_sky_contribution :: (main: *Environment, ratio: float) { sys_call("Environment", "set_ambient_light_sky_contribution", 373806689, Nil, main.p_object, ratio);  }  // 24
get_ambient_light_sky_contribution :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_ambient_light_sky_contribution", 1740695150, float, main.p_object); return call_ret.*; }  // 25
set_reflection_source :: (main: *Environment, source: Environment.ReflectionSource) { sys_call("Environment", "set_reflection_source", 299673197, Nil, main.p_object, source);  }  // 26
get_reflection_source :: (main: *Environment) -> Environment.ReflectionSource { call_ret := cast(*Environment.ReflectionSource) sys_call("Environment", "get_reflection_source", 777700713, Environment.ReflectionSource, main.p_object); return call_ret.*; }  // 27
set_tonemapper :: (main: *Environment, mode: Environment.ToneMapper) { sys_call("Environment", "set_tonemapper", 1509116664, Nil, main.p_object, mode);  }  // 28
get_tonemapper :: (main: *Environment) -> Environment.ToneMapper { call_ret := cast(*Environment.ToneMapper) sys_call("Environment", "get_tonemapper", 2908408137, Environment.ToneMapper, main.p_object); return call_ret.*; }  // 29
set_tonemap_exposure :: (main: *Environment, exposure: float) { sys_call("Environment", "set_tonemap_exposure", 373806689, Nil, main.p_object, exposure);  }  // 30
get_tonemap_exposure :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_tonemap_exposure", 1740695150, float, main.p_object); return call_ret.*; }  // 31
set_tonemap_white :: (main: *Environment, white: float) { sys_call("Environment", "set_tonemap_white", 373806689, Nil, main.p_object, white);  }  // 32
get_tonemap_white :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_tonemap_white", 1740695150, float, main.p_object); return call_ret.*; }  // 33
set_ssr_enabled :: (main: *Environment, enabled: bool) { sys_call("Environment", "set_ssr_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 34
is_ssr_enabled :: (main: *Environment) -> bool { call_ret := cast(*bool) sys_call("Environment", "is_ssr_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 35
set_ssr_max_steps :: (main: *Environment, max_steps: int) { sys_call("Environment", "set_ssr_max_steps", 1286410249, Nil, main.p_object, max_steps);  }  // 36
get_ssr_max_steps :: (main: *Environment) -> int { call_ret := cast(*int) sys_call("Environment", "get_ssr_max_steps", 3905245786, int, main.p_object); return call_ret.*; }  // 37
set_ssr_fade_in :: (main: *Environment, fade_in: float) { sys_call("Environment", "set_ssr_fade_in", 373806689, Nil, main.p_object, fade_in);  }  // 38
get_ssr_fade_in :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_ssr_fade_in", 1740695150, float, main.p_object); return call_ret.*; }  // 39
set_ssr_fade_out :: (main: *Environment, fade_out: float) { sys_call("Environment", "set_ssr_fade_out", 373806689, Nil, main.p_object, fade_out);  }  // 40
get_ssr_fade_out :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_ssr_fade_out", 1740695150, float, main.p_object); return call_ret.*; }  // 41
set_ssr_depth_tolerance :: (main: *Environment, depth_tolerance: float) { sys_call("Environment", "set_ssr_depth_tolerance", 373806689, Nil, main.p_object, depth_tolerance);  }  // 42
get_ssr_depth_tolerance :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_ssr_depth_tolerance", 1740695150, float, main.p_object); return call_ret.*; }  // 43
set_ssao_enabled :: (main: *Environment, enabled: bool) { sys_call("Environment", "set_ssao_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 44
is_ssao_enabled :: (main: *Environment) -> bool { call_ret := cast(*bool) sys_call("Environment", "is_ssao_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 45
set_ssao_radius :: (main: *Environment, radius: float) { sys_call("Environment", "set_ssao_radius", 373806689, Nil, main.p_object, radius);  }  // 46
get_ssao_radius :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_ssao_radius", 1740695150, float, main.p_object); return call_ret.*; }  // 47
set_ssao_intensity :: (main: *Environment, intensity: float) { sys_call("Environment", "set_ssao_intensity", 373806689, Nil, main.p_object, intensity);  }  // 48
get_ssao_intensity :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_ssao_intensity", 1740695150, float, main.p_object); return call_ret.*; }  // 49
set_ssao_power :: (main: *Environment, power: float) { sys_call("Environment", "set_ssao_power", 373806689, Nil, main.p_object, power);  }  // 50
get_ssao_power :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_ssao_power", 1740695150, float, main.p_object); return call_ret.*; }  // 51
set_ssao_detail :: (main: *Environment, detail: float) { sys_call("Environment", "set_ssao_detail", 373806689, Nil, main.p_object, detail);  }  // 52
get_ssao_detail :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_ssao_detail", 1740695150, float, main.p_object); return call_ret.*; }  // 53
set_ssao_horizon :: (main: *Environment, horizon: float) { sys_call("Environment", "set_ssao_horizon", 373806689, Nil, main.p_object, horizon);  }  // 54
get_ssao_horizon :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_ssao_horizon", 1740695150, float, main.p_object); return call_ret.*; }  // 55
set_ssao_sharpness :: (main: *Environment, sharpness: float) { sys_call("Environment", "set_ssao_sharpness", 373806689, Nil, main.p_object, sharpness);  }  // 56
get_ssao_sharpness :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_ssao_sharpness", 1740695150, float, main.p_object); return call_ret.*; }  // 57
set_ssao_direct_light_affect :: (main: *Environment, amount: float) { sys_call("Environment", "set_ssao_direct_light_affect", 373806689, Nil, main.p_object, amount);  }  // 58
get_ssao_direct_light_affect :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_ssao_direct_light_affect", 1740695150, float, main.p_object); return call_ret.*; }  // 59
set_ssao_ao_channel_affect :: (main: *Environment, amount: float) { sys_call("Environment", "set_ssao_ao_channel_affect", 373806689, Nil, main.p_object, amount);  }  // 60
get_ssao_ao_channel_affect :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_ssao_ao_channel_affect", 1740695150, float, main.p_object); return call_ret.*; }  // 61
set_ssil_enabled :: (main: *Environment, enabled: bool) { sys_call("Environment", "set_ssil_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 62
is_ssil_enabled :: (main: *Environment) -> bool { call_ret := cast(*bool) sys_call("Environment", "is_ssil_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 63
set_ssil_radius :: (main: *Environment, radius: float) { sys_call("Environment", "set_ssil_radius", 373806689, Nil, main.p_object, radius);  }  // 64
get_ssil_radius :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_ssil_radius", 1740695150, float, main.p_object); return call_ret.*; }  // 65
set_ssil_intensity :: (main: *Environment, intensity: float) { sys_call("Environment", "set_ssil_intensity", 373806689, Nil, main.p_object, intensity);  }  // 66
get_ssil_intensity :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_ssil_intensity", 1740695150, float, main.p_object); return call_ret.*; }  // 67
set_ssil_sharpness :: (main: *Environment, sharpness: float) { sys_call("Environment", "set_ssil_sharpness", 373806689, Nil, main.p_object, sharpness);  }  // 68
get_ssil_sharpness :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_ssil_sharpness", 1740695150, float, main.p_object); return call_ret.*; }  // 69
set_ssil_normal_rejection :: (main: *Environment, normal_rejection: float) { sys_call("Environment", "set_ssil_normal_rejection", 373806689, Nil, main.p_object, normal_rejection);  }  // 70
get_ssil_normal_rejection :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_ssil_normal_rejection", 1740695150, float, main.p_object); return call_ret.*; }  // 71
set_sdfgi_enabled :: (main: *Environment, enabled: bool) { sys_call("Environment", "set_sdfgi_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 72
is_sdfgi_enabled :: (main: *Environment) -> bool { call_ret := cast(*bool) sys_call("Environment", "is_sdfgi_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 73
set_sdfgi_cascades :: (main: *Environment, amount: int) { sys_call("Environment", "set_sdfgi_cascades", 1286410249, Nil, main.p_object, amount);  }  // 74
get_sdfgi_cascades :: (main: *Environment) -> int { call_ret := cast(*int) sys_call("Environment", "get_sdfgi_cascades", 3905245786, int, main.p_object); return call_ret.*; }  // 75
set_sdfgi_min_cell_size :: (main: *Environment, size: float) { sys_call("Environment", "set_sdfgi_min_cell_size", 373806689, Nil, main.p_object, size);  }  // 76
get_sdfgi_min_cell_size :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_sdfgi_min_cell_size", 1740695150, float, main.p_object); return call_ret.*; }  // 77
set_sdfgi_max_distance :: (main: *Environment, distance: float) { sys_call("Environment", "set_sdfgi_max_distance", 373806689, Nil, main.p_object, distance);  }  // 78
get_sdfgi_max_distance :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_sdfgi_max_distance", 1740695150, float, main.p_object); return call_ret.*; }  // 79
set_sdfgi_cascade0_distance :: (main: *Environment, distance: float) { sys_call("Environment", "set_sdfgi_cascade0_distance", 373806689, Nil, main.p_object, distance);  }  // 80
get_sdfgi_cascade0_distance :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_sdfgi_cascade0_distance", 1740695150, float, main.p_object); return call_ret.*; }  // 81
set_sdfgi_y_scale :: (main: *Environment, scale: Environment.SDFGIYScale) { sys_call("Environment", "set_sdfgi_y_scale", 3608608372, Nil, main.p_object, scale);  }  // 82
get_sdfgi_y_scale :: (main: *Environment) -> Environment.SDFGIYScale { call_ret := cast(*Environment.SDFGIYScale) sys_call("Environment", "get_sdfgi_y_scale", 2568002245, Environment.SDFGIYScale, main.p_object); return call_ret.*; }  // 83
set_sdfgi_use_occlusion :: (main: *Environment, enable: bool) { sys_call("Environment", "set_sdfgi_use_occlusion", 2586408642, Nil, main.p_object, enable);  }  // 84
is_sdfgi_using_occlusion :: (main: *Environment) -> bool { call_ret := cast(*bool) sys_call("Environment", "is_sdfgi_using_occlusion", 36873697, bool, main.p_object); return call_ret.*; }  // 85
set_sdfgi_bounce_feedback :: (main: *Environment, amount: float) { sys_call("Environment", "set_sdfgi_bounce_feedback", 373806689, Nil, main.p_object, amount);  }  // 86
get_sdfgi_bounce_feedback :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_sdfgi_bounce_feedback", 1740695150, float, main.p_object); return call_ret.*; }  // 87
set_sdfgi_read_sky_light :: (main: *Environment, enable: bool) { sys_call("Environment", "set_sdfgi_read_sky_light", 2586408642, Nil, main.p_object, enable);  }  // 88
is_sdfgi_reading_sky_light :: (main: *Environment) -> bool { call_ret := cast(*bool) sys_call("Environment", "is_sdfgi_reading_sky_light", 36873697, bool, main.p_object); return call_ret.*; }  // 89
set_sdfgi_energy :: (main: *Environment, amount: float) { sys_call("Environment", "set_sdfgi_energy", 373806689, Nil, main.p_object, amount);  }  // 90
get_sdfgi_energy :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_sdfgi_energy", 1740695150, float, main.p_object); return call_ret.*; }  // 91
set_sdfgi_normal_bias :: (main: *Environment, bias: float) { sys_call("Environment", "set_sdfgi_normal_bias", 373806689, Nil, main.p_object, bias);  }  // 92
get_sdfgi_normal_bias :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_sdfgi_normal_bias", 1740695150, float, main.p_object); return call_ret.*; }  // 93
set_sdfgi_probe_bias :: (main: *Environment, bias: float) { sys_call("Environment", "set_sdfgi_probe_bias", 373806689, Nil, main.p_object, bias);  }  // 94
get_sdfgi_probe_bias :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_sdfgi_probe_bias", 1740695150, float, main.p_object); return call_ret.*; }  // 95
set_glow_enabled :: (main: *Environment, enabled: bool) { sys_call("Environment", "set_glow_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 96
is_glow_enabled :: (main: *Environment) -> bool { call_ret := cast(*bool) sys_call("Environment", "is_glow_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 97
set_glow_level :: (main: *Environment, idx: int, intensity: float) { sys_call("Environment", "set_glow_level", 1602489585, Nil, main.p_object, idx, intensity);  }  // 98
get_glow_level :: (main: *Environment, idx: int) -> float { call_ret := cast(*float) sys_call("Environment", "get_glow_level", 2339986948, float, main.p_object, idx); return call_ret.*; }  // 99
set_glow_normalized :: (main: *Environment, normalize: bool) { sys_call("Environment", "set_glow_normalized", 2586408642, Nil, main.p_object, normalize);  }  // 100
is_glow_normalized :: (main: *Environment) -> bool { call_ret := cast(*bool) sys_call("Environment", "is_glow_normalized", 36873697, bool, main.p_object); return call_ret.*; }  // 101
set_glow_intensity :: (main: *Environment, intensity: float) { sys_call("Environment", "set_glow_intensity", 373806689, Nil, main.p_object, intensity);  }  // 102
get_glow_intensity :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_glow_intensity", 1740695150, float, main.p_object); return call_ret.*; }  // 103
set_glow_strength :: (main: *Environment, strength: float) { sys_call("Environment", "set_glow_strength", 373806689, Nil, main.p_object, strength);  }  // 104
get_glow_strength :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_glow_strength", 1740695150, float, main.p_object); return call_ret.*; }  // 105
set_glow_mix :: (main: *Environment, mix: float) { sys_call("Environment", "set_glow_mix", 373806689, Nil, main.p_object, mix);  }  // 106
get_glow_mix :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_glow_mix", 1740695150, float, main.p_object); return call_ret.*; }  // 107
set_glow_bloom :: (main: *Environment, amount: float) { sys_call("Environment", "set_glow_bloom", 373806689, Nil, main.p_object, amount);  }  // 108
get_glow_bloom :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_glow_bloom", 1740695150, float, main.p_object); return call_ret.*; }  // 109
set_glow_blend_mode :: (main: *Environment, mode: Environment.GlowBlendMode) { sys_call("Environment", "set_glow_blend_mode", 2561587761, Nil, main.p_object, mode);  }  // 110
get_glow_blend_mode :: (main: *Environment) -> Environment.GlowBlendMode { call_ret := cast(*Environment.GlowBlendMode) sys_call("Environment", "get_glow_blend_mode", 1529667332, Environment.GlowBlendMode, main.p_object); return call_ret.*; }  // 111
set_glow_hdr_bleed_threshold :: (main: *Environment, threshold: float) { sys_call("Environment", "set_glow_hdr_bleed_threshold", 373806689, Nil, main.p_object, threshold);  }  // 112
get_glow_hdr_bleed_threshold :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_glow_hdr_bleed_threshold", 1740695150, float, main.p_object); return call_ret.*; }  // 113
set_glow_hdr_bleed_scale :: (main: *Environment, scale: float) { sys_call("Environment", "set_glow_hdr_bleed_scale", 373806689, Nil, main.p_object, scale);  }  // 114
get_glow_hdr_bleed_scale :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_glow_hdr_bleed_scale", 1740695150, float, main.p_object); return call_ret.*; }  // 115
set_glow_hdr_luminance_cap :: (main: *Environment, amount: float) { sys_call("Environment", "set_glow_hdr_luminance_cap", 373806689, Nil, main.p_object, amount);  }  // 116
get_glow_hdr_luminance_cap :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_glow_hdr_luminance_cap", 1740695150, float, main.p_object); return call_ret.*; }  // 117
set_glow_map_strength :: (main: *Environment, strength: float) { sys_call("Environment", "set_glow_map_strength", 373806689, Nil, main.p_object, strength);  }  // 118
get_glow_map_strength :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_glow_map_strength", 1740695150, float, main.p_object); return call_ret.*; }  // 119
set_glow_map :: (main: *Environment, mode: Texture) { sys_call("Environment", "set_glow_map", 1790811099, Nil, main.p_object, mode);  }  // 120
get_glow_map :: (main: *Environment) -> *Texture { call_ret := cast(*Texture) sys_call("Environment", "get_glow_map", 4037048985, Texture, main.p_object); return call_ret; }  // 121
set_fog_enabled :: (main: *Environment, enabled: bool) { sys_call("Environment", "set_fog_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 122
is_fog_enabled :: (main: *Environment) -> bool { call_ret := cast(*bool) sys_call("Environment", "is_fog_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 123
set_fog_mode :: (main: *Environment, mode: Environment.FogMode) { sys_call("Environment", "set_fog_mode", 3059806579, Nil, main.p_object, mode);  }  // 124
get_fog_mode :: (main: *Environment) -> Environment.FogMode { call_ret := cast(*Environment.FogMode) sys_call("Environment", "get_fog_mode", 2456062483, Environment.FogMode, main.p_object); return call_ret.*; }  // 125
set_fog_light_color :: (main: *Environment, light_color: Color) { sys_call("Environment", "set_fog_light_color", 2920490490, Nil, main.p_object, light_color);  }  // 126
get_fog_light_color :: (main: *Environment) -> Color { call_ret := cast(*Color) sys_call("Environment", "get_fog_light_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 127
set_fog_light_energy :: (main: *Environment, light_energy: float) { sys_call("Environment", "set_fog_light_energy", 373806689, Nil, main.p_object, light_energy);  }  // 128
get_fog_light_energy :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_fog_light_energy", 1740695150, float, main.p_object); return call_ret.*; }  // 129
set_fog_sun_scatter :: (main: *Environment, sun_scatter: float) { sys_call("Environment", "set_fog_sun_scatter", 373806689, Nil, main.p_object, sun_scatter);  }  // 130
get_fog_sun_scatter :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_fog_sun_scatter", 1740695150, float, main.p_object); return call_ret.*; }  // 131
set_fog_density :: (main: *Environment, density: float) { sys_call("Environment", "set_fog_density", 373806689, Nil, main.p_object, density);  }  // 132
get_fog_density :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_fog_density", 1740695150, float, main.p_object); return call_ret.*; }  // 133
set_fog_height :: (main: *Environment, height: float) { sys_call("Environment", "set_fog_height", 373806689, Nil, main.p_object, height);  }  // 134
get_fog_height :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_fog_height", 1740695150, float, main.p_object); return call_ret.*; }  // 135
set_fog_height_density :: (main: *Environment, height_density: float) { sys_call("Environment", "set_fog_height_density", 373806689, Nil, main.p_object, height_density);  }  // 136
get_fog_height_density :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_fog_height_density", 1740695150, float, main.p_object); return call_ret.*; }  // 137
set_fog_aerial_perspective :: (main: *Environment, aerial_perspective: float) { sys_call("Environment", "set_fog_aerial_perspective", 373806689, Nil, main.p_object, aerial_perspective);  }  // 138
get_fog_aerial_perspective :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_fog_aerial_perspective", 1740695150, float, main.p_object); return call_ret.*; }  // 139
set_fog_sky_affect :: (main: *Environment, sky_affect: float) { sys_call("Environment", "set_fog_sky_affect", 373806689, Nil, main.p_object, sky_affect);  }  // 140
get_fog_sky_affect :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_fog_sky_affect", 1740695150, float, main.p_object); return call_ret.*; }  // 141
set_fog_depth_curve :: (main: *Environment, curve: float) { sys_call("Environment", "set_fog_depth_curve", 373806689, Nil, main.p_object, curve);  }  // 142
get_fog_depth_curve :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_fog_depth_curve", 1740695150, float, main.p_object); return call_ret.*; }  // 143
set_fog_depth_begin :: (main: *Environment, begin: float) { sys_call("Environment", "set_fog_depth_begin", 373806689, Nil, main.p_object, begin);  }  // 144
get_fog_depth_begin :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_fog_depth_begin", 1740695150, float, main.p_object); return call_ret.*; }  // 145
set_fog_depth_end :: (main: *Environment, end: float) { sys_call("Environment", "set_fog_depth_end", 373806689, Nil, main.p_object, end);  }  // 146
get_fog_depth_end :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_fog_depth_end", 1740695150, float, main.p_object); return call_ret.*; }  // 147
set_volumetric_fog_enabled :: (main: *Environment, enabled: bool) { sys_call("Environment", "set_volumetric_fog_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 148
is_volumetric_fog_enabled :: (main: *Environment) -> bool { call_ret := cast(*bool) sys_call("Environment", "is_volumetric_fog_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 149
set_volumetric_fog_emission :: (main: *Environment, color: Color) { sys_call("Environment", "set_volumetric_fog_emission", 2920490490, Nil, main.p_object, color);  }  // 150
get_volumetric_fog_emission :: (main: *Environment) -> Color { call_ret := cast(*Color) sys_call("Environment", "get_volumetric_fog_emission", 3444240500, Color, main.p_object); return call_ret.*; }  // 151
set_volumetric_fog_albedo :: (main: *Environment, color: Color) { sys_call("Environment", "set_volumetric_fog_albedo", 2920490490, Nil, main.p_object, color);  }  // 152
get_volumetric_fog_albedo :: (main: *Environment) -> Color { call_ret := cast(*Color) sys_call("Environment", "get_volumetric_fog_albedo", 3444240500, Color, main.p_object); return call_ret.*; }  // 153
set_volumetric_fog_density :: (main: *Environment, density: float) { sys_call("Environment", "set_volumetric_fog_density", 373806689, Nil, main.p_object, density);  }  // 154
get_volumetric_fog_density :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_volumetric_fog_density", 1740695150, float, main.p_object); return call_ret.*; }  // 155
set_volumetric_fog_emission_energy :: (main: *Environment, begin: float) { sys_call("Environment", "set_volumetric_fog_emission_energy", 373806689, Nil, main.p_object, begin);  }  // 156
get_volumetric_fog_emission_energy :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_volumetric_fog_emission_energy", 1740695150, float, main.p_object); return call_ret.*; }  // 157
set_volumetric_fog_anisotropy :: (main: *Environment, anisotropy: float) { sys_call("Environment", "set_volumetric_fog_anisotropy", 373806689, Nil, main.p_object, anisotropy);  }  // 158
get_volumetric_fog_anisotropy :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_volumetric_fog_anisotropy", 1740695150, float, main.p_object); return call_ret.*; }  // 159
set_volumetric_fog_length :: (main: *Environment, length: float) { sys_call("Environment", "set_volumetric_fog_length", 373806689, Nil, main.p_object, length);  }  // 160
get_volumetric_fog_length :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_volumetric_fog_length", 1740695150, float, main.p_object); return call_ret.*; }  // 161
set_volumetric_fog_detail_spread :: (main: *Environment, detail_spread: float) { sys_call("Environment", "set_volumetric_fog_detail_spread", 373806689, Nil, main.p_object, detail_spread);  }  // 162
get_volumetric_fog_detail_spread :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_volumetric_fog_detail_spread", 1740695150, float, main.p_object); return call_ret.*; }  // 163
set_volumetric_fog_gi_inject :: (main: *Environment, gi_inject: float) { sys_call("Environment", "set_volumetric_fog_gi_inject", 373806689, Nil, main.p_object, gi_inject);  }  // 164
get_volumetric_fog_gi_inject :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_volumetric_fog_gi_inject", 1740695150, float, main.p_object); return call_ret.*; }  // 165
set_volumetric_fog_ambient_inject :: (main: *Environment, enabled: float) { sys_call("Environment", "set_volumetric_fog_ambient_inject", 373806689, Nil, main.p_object, enabled);  }  // 166
get_volumetric_fog_ambient_inject :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_volumetric_fog_ambient_inject", 1740695150, float, main.p_object); return call_ret.*; }  // 167
set_volumetric_fog_sky_affect :: (main: *Environment, sky_affect: float) { sys_call("Environment", "set_volumetric_fog_sky_affect", 373806689, Nil, main.p_object, sky_affect);  }  // 168
get_volumetric_fog_sky_affect :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_volumetric_fog_sky_affect", 1740695150, float, main.p_object); return call_ret.*; }  // 169
set_volumetric_fog_temporal_reprojection_enabled :: (main: *Environment, enabled: bool) { sys_call("Environment", "set_volumetric_fog_temporal_reprojection_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 170
is_volumetric_fog_temporal_reprojection_enabled :: (main: *Environment) -> bool { call_ret := cast(*bool) sys_call("Environment", "is_volumetric_fog_temporal_reprojection_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 171
set_volumetric_fog_temporal_reprojection_amount :: (main: *Environment, temporal_reprojection_amount: float) { sys_call("Environment", "set_volumetric_fog_temporal_reprojection_amount", 373806689, Nil, main.p_object, temporal_reprojection_amount);  }  // 172
get_volumetric_fog_temporal_reprojection_amount :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_volumetric_fog_temporal_reprojection_amount", 1740695150, float, main.p_object); return call_ret.*; }  // 173
set_adjustment_enabled :: (main: *Environment, enabled: bool) { sys_call("Environment", "set_adjustment_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 174
is_adjustment_enabled :: (main: *Environment) -> bool { call_ret := cast(*bool) sys_call("Environment", "is_adjustment_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 175
set_adjustment_brightness :: (main: *Environment, brightness: float) { sys_call("Environment", "set_adjustment_brightness", 373806689, Nil, main.p_object, brightness);  }  // 176
get_adjustment_brightness :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_adjustment_brightness", 1740695150, float, main.p_object); return call_ret.*; }  // 177
set_adjustment_contrast :: (main: *Environment, contrast: float) { sys_call("Environment", "set_adjustment_contrast", 373806689, Nil, main.p_object, contrast);  }  // 178
get_adjustment_contrast :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_adjustment_contrast", 1740695150, float, main.p_object); return call_ret.*; }  // 179
set_adjustment_saturation :: (main: *Environment, saturation: float) { sys_call("Environment", "set_adjustment_saturation", 373806689, Nil, main.p_object, saturation);  }  // 180
get_adjustment_saturation :: (main: *Environment) -> float { call_ret := cast(*float) sys_call("Environment", "get_adjustment_saturation", 1740695150, float, main.p_object); return call_ret.*; }  // 181
set_adjustment_color_correction :: (main: *Environment, color_correction: Texture) { sys_call("Environment", "set_adjustment_color_correction", 1790811099, Nil, main.p_object, color_correction);  }  // 182
get_adjustment_color_correction :: (main: *Environment) -> *Texture { call_ret := cast(*Texture) sys_call("Environment", "get_adjustment_color_correction", 4037048985, Texture, main.p_object); return call_ret; }  // 183

parse :: (main: *Expression, expression: string) -> Error { call_ret := cast(*Error) sys_call("Expression", "parse", 3069722906, Error, main.p_object, expression); return call_ret.*; }  // 0
execute :: (main: *Expression) -> Variant { call_ret := cast(*Variant) sys_call("Expression", "execute", 3712471238, Variant, main.p_object); return call_ret.*; }  // 1
has_execute_failed :: (main: *Expression) -> bool { call_ret := cast(*bool) sys_call("Expression", "has_execute_failed", 36873697, bool, main.p_object); return call_ret.*; }  // 2
get_error_text :: (main: *Expression) -> gstring { call_ret := cast(*gstring) sys_call("Expression", "get_error_text", 201670096, gstring, main.p_object); return call_ret.*; }  // 3

set_size :: (main: *ExternalTexture, size: Vector2) { sys_call("ExternalTexture", "set_size", 743155724, Nil, main.p_object, size);  }  // 0
get_external_texture_id :: (main: *ExternalTexture) -> int { call_ret := cast(*int) sys_call("ExternalTexture", "get_external_texture_id", 3905245786, int, main.p_object); return call_ret.*; }  // 1
set_external_buffer_id :: (main: *ExternalTexture, external_buffer_id: int) { sys_call("ExternalTexture", "set_external_buffer_id", 1286410249, Nil, main.p_object, external_buffer_id);  }  // 2


get_allow_geometry_helper_nodes :: (main: *FBXState) -> bool { call_ret := cast(*bool) sys_call("FBXState", "get_allow_geometry_helper_nodes", 2240911060, bool, main.p_object); return call_ret.*; }  // 0
set_allow_geometry_helper_nodes :: (main: *FBXState, allow: bool) { sys_call("FBXState", "set_allow_geometry_helper_nodes", 2586408642, Nil, main.p_object, allow);  }  // 1

set_noise_type :: (main: *FastNoiseLite, type: FastNoiseLite.NoiseType) { sys_call("FastNoiseLite", "set_noise_type", 2624461392, Nil, main.p_object, type);  }  // 0
get_noise_type :: (main: *FastNoiseLite) -> FastNoiseLite.NoiseType { call_ret := cast(*FastNoiseLite.NoiseType) sys_call("FastNoiseLite", "get_noise_type", 1458108610, FastNoiseLite.NoiseType, main.p_object); return call_ret.*; }  // 1
set_seed :: (main: *FastNoiseLite, seed: int) { sys_call("FastNoiseLite", "set_seed", 1286410249, Nil, main.p_object, seed);  }  // 2
get_seed :: (main: *FastNoiseLite) -> int { call_ret := cast(*int) sys_call("FastNoiseLite", "get_seed", 3905245786, int, main.p_object); return call_ret.*; }  // 3
set_frequency :: (main: *FastNoiseLite, freq: float) { sys_call("FastNoiseLite", "set_frequency", 373806689, Nil, main.p_object, freq);  }  // 4
get_frequency :: (main: *FastNoiseLite) -> float { call_ret := cast(*float) sys_call("FastNoiseLite", "get_frequency", 1740695150, float, main.p_object); return call_ret.*; }  // 5
set_offset :: (main: *FastNoiseLite, offset: Vector3) { sys_call("FastNoiseLite", "set_offset", 3460891852, Nil, main.p_object, offset);  }  // 6
get_offset :: (main: *FastNoiseLite) -> Vector3 { call_ret := cast(*Vector3) sys_call("FastNoiseLite", "get_offset", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 7
set_fractal_type :: (main: *FastNoiseLite, type: FastNoiseLite.FractalType) { sys_call("FastNoiseLite", "set_fractal_type", 4132731174, Nil, main.p_object, type);  }  // 8
get_fractal_type :: (main: *FastNoiseLite) -> FastNoiseLite.FractalType { call_ret := cast(*FastNoiseLite.FractalType) sys_call("FastNoiseLite", "get_fractal_type", 1036889279, FastNoiseLite.FractalType, main.p_object); return call_ret.*; }  // 9
set_fractal_octaves :: (main: *FastNoiseLite, octave_count: int) { sys_call("FastNoiseLite", "set_fractal_octaves", 1286410249, Nil, main.p_object, octave_count);  }  // 10
get_fractal_octaves :: (main: *FastNoiseLite) -> int { call_ret := cast(*int) sys_call("FastNoiseLite", "get_fractal_octaves", 3905245786, int, main.p_object); return call_ret.*; }  // 11
set_fractal_lacunarity :: (main: *FastNoiseLite, lacunarity: float) { sys_call("FastNoiseLite", "set_fractal_lacunarity", 373806689, Nil, main.p_object, lacunarity);  }  // 12
get_fractal_lacunarity :: (main: *FastNoiseLite) -> float { call_ret := cast(*float) sys_call("FastNoiseLite", "get_fractal_lacunarity", 1740695150, float, main.p_object); return call_ret.*; }  // 13
set_fractal_gain :: (main: *FastNoiseLite, gain: float) { sys_call("FastNoiseLite", "set_fractal_gain", 373806689, Nil, main.p_object, gain);  }  // 14
get_fractal_gain :: (main: *FastNoiseLite) -> float { call_ret := cast(*float) sys_call("FastNoiseLite", "get_fractal_gain", 1740695150, float, main.p_object); return call_ret.*; }  // 15
set_fractal_weighted_strength :: (main: *FastNoiseLite, weighted_strength: float) { sys_call("FastNoiseLite", "set_fractal_weighted_strength", 373806689, Nil, main.p_object, weighted_strength);  }  // 16
get_fractal_weighted_strength :: (main: *FastNoiseLite) -> float { call_ret := cast(*float) sys_call("FastNoiseLite", "get_fractal_weighted_strength", 1740695150, float, main.p_object); return call_ret.*; }  // 17
set_fractal_ping_pong_strength :: (main: *FastNoiseLite, ping_pong_strength: float) { sys_call("FastNoiseLite", "set_fractal_ping_pong_strength", 373806689, Nil, main.p_object, ping_pong_strength);  }  // 18
get_fractal_ping_pong_strength :: (main: *FastNoiseLite) -> float { call_ret := cast(*float) sys_call("FastNoiseLite", "get_fractal_ping_pong_strength", 1740695150, float, main.p_object); return call_ret.*; }  // 19
set_cellular_distance_function :: (main: *FastNoiseLite, func: FastNoiseLite.CellularDistanceFunction) { sys_call("FastNoiseLite", "set_cellular_distance_function", 1006013267, Nil, main.p_object, func);  }  // 20
get_cellular_distance_function :: (main: *FastNoiseLite) -> FastNoiseLite.CellularDistanceFunction { call_ret := cast(*FastNoiseLite.CellularDistanceFunction) sys_call("FastNoiseLite", "get_cellular_distance_function", 2021274088, FastNoiseLite.CellularDistanceFunction, main.p_object); return call_ret.*; }  // 21
set_cellular_jitter :: (main: *FastNoiseLite, jitter: float) { sys_call("FastNoiseLite", "set_cellular_jitter", 373806689, Nil, main.p_object, jitter);  }  // 22
get_cellular_jitter :: (main: *FastNoiseLite) -> float { call_ret := cast(*float) sys_call("FastNoiseLite", "get_cellular_jitter", 1740695150, float, main.p_object); return call_ret.*; }  // 23
set_cellular_return_type :: (main: *FastNoiseLite, ret: FastNoiseLite.CellularReturnType) { sys_call("FastNoiseLite", "set_cellular_return_type", 2654169698, Nil, main.p_object, ret);  }  // 24
get_cellular_return_type :: (main: *FastNoiseLite) -> FastNoiseLite.CellularReturnType { call_ret := cast(*FastNoiseLite.CellularReturnType) sys_call("FastNoiseLite", "get_cellular_return_type", 3699796343, FastNoiseLite.CellularReturnType, main.p_object); return call_ret.*; }  // 25
set_domain_warp_enabled :: (main: *FastNoiseLite, domain_warp_enabled: bool) { sys_call("FastNoiseLite", "set_domain_warp_enabled", 2586408642, Nil, main.p_object, domain_warp_enabled);  }  // 26
is_domain_warp_enabled :: (main: *FastNoiseLite) -> bool { call_ret := cast(*bool) sys_call("FastNoiseLite", "is_domain_warp_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 27
set_domain_warp_type :: (main: *FastNoiseLite, domain_warp_type: FastNoiseLite.DomainWarpType) { sys_call("FastNoiseLite", "set_domain_warp_type", 3629692980, Nil, main.p_object, domain_warp_type);  }  // 28
get_domain_warp_type :: (main: *FastNoiseLite) -> FastNoiseLite.DomainWarpType { call_ret := cast(*FastNoiseLite.DomainWarpType) sys_call("FastNoiseLite", "get_domain_warp_type", 2980162020, FastNoiseLite.DomainWarpType, main.p_object); return call_ret.*; }  // 29
set_domain_warp_amplitude :: (main: *FastNoiseLite, domain_warp_amplitude: float) { sys_call("FastNoiseLite", "set_domain_warp_amplitude", 373806689, Nil, main.p_object, domain_warp_amplitude);  }  // 30
get_domain_warp_amplitude :: (main: *FastNoiseLite) -> float { call_ret := cast(*float) sys_call("FastNoiseLite", "get_domain_warp_amplitude", 1740695150, float, main.p_object); return call_ret.*; }  // 31
set_domain_warp_frequency :: (main: *FastNoiseLite, domain_warp_frequency: float) { sys_call("FastNoiseLite", "set_domain_warp_frequency", 373806689, Nil, main.p_object, domain_warp_frequency);  }  // 32
get_domain_warp_frequency :: (main: *FastNoiseLite) -> float { call_ret := cast(*float) sys_call("FastNoiseLite", "get_domain_warp_frequency", 1740695150, float, main.p_object); return call_ret.*; }  // 33
set_domain_warp_fractal_type :: (main: *FastNoiseLite, domain_warp_fractal_type: FastNoiseLite.DomainWarpFractalType) { sys_call("FastNoiseLite", "set_domain_warp_fractal_type", 3999408287, Nil, main.p_object, domain_warp_fractal_type);  }  // 34
get_domain_warp_fractal_type :: (main: *FastNoiseLite) -> FastNoiseLite.DomainWarpFractalType { call_ret := cast(*FastNoiseLite.DomainWarpFractalType) sys_call("FastNoiseLite", "get_domain_warp_fractal_type", 407716934, FastNoiseLite.DomainWarpFractalType, main.p_object); return call_ret.*; }  // 35
set_domain_warp_fractal_octaves :: (main: *FastNoiseLite, domain_warp_octave_count: int) { sys_call("FastNoiseLite", "set_domain_warp_fractal_octaves", 1286410249, Nil, main.p_object, domain_warp_octave_count);  }  // 36
get_domain_warp_fractal_octaves :: (main: *FastNoiseLite) -> int { call_ret := cast(*int) sys_call("FastNoiseLite", "get_domain_warp_fractal_octaves", 3905245786, int, main.p_object); return call_ret.*; }  // 37
set_domain_warp_fractal_lacunarity :: (main: *FastNoiseLite, domain_warp_lacunarity: float) { sys_call("FastNoiseLite", "set_domain_warp_fractal_lacunarity", 373806689, Nil, main.p_object, domain_warp_lacunarity);  }  // 38
get_domain_warp_fractal_lacunarity :: (main: *FastNoiseLite) -> float { call_ret := cast(*float) sys_call("FastNoiseLite", "get_domain_warp_fractal_lacunarity", 1740695150, float, main.p_object); return call_ret.*; }  // 39
set_domain_warp_fractal_gain :: (main: *FastNoiseLite, domain_warp_gain: float) { sys_call("FastNoiseLite", "set_domain_warp_fractal_gain", 373806689, Nil, main.p_object, domain_warp_gain);  }  // 40
get_domain_warp_fractal_gain :: (main: *FastNoiseLite) -> float { call_ret := cast(*float) sys_call("FastNoiseLite", "get_domain_warp_fractal_gain", 1740695150, float, main.p_object); return call_ret.*; }  // 41

open :: (main: *FileAccess, path: string, flags: FileAccess.ModeFlags) -> *FileAccess { call_ret := cast(*FileAccess) sys_call("FileAccess", "open", 1247358404, FileAccess, main.p_object, path, flags); return call_ret; }  // 0
open_encrypted :: (main: *FileAccess, path: string, mode_flags: FileAccess.ModeFlags, key: PackedByteArray) -> *FileAccess { call_ret := cast(*FileAccess) sys_call("FileAccess", "open_encrypted", 788003459, FileAccess, main.p_object, path, mode_flags, key); return call_ret; }  // 1
open_encrypted_with_pass :: (main: *FileAccess, path: string, mode_flags: FileAccess.ModeFlags, pass: string) -> *FileAccess { call_ret := cast(*FileAccess) sys_call("FileAccess", "open_encrypted_with_pass", 790283377, FileAccess, main.p_object, path, mode_flags, pass); return call_ret; }  // 2
open_compressed :: (main: *FileAccess, path: string, mode_flags: FileAccess.ModeFlags) -> *FileAccess { call_ret := cast(*FileAccess) sys_call("FileAccess", "open_compressed", 3686439335, FileAccess, main.p_object, path, mode_flags); return call_ret; }  // 3
get_open_error :: (main: *FileAccess) -> Error { call_ret := cast(*Error) sys_call("FileAccess", "get_open_error", 166280745, Error, main.p_object); return call_ret.*; }  // 4
create_temp :: (main: *FileAccess, mode_flags: int) -> *FileAccess { call_ret := cast(*FileAccess) sys_call("FileAccess", "create_temp", 3075606245, FileAccess, main.p_object, mode_flags); return call_ret; }  // 5
get_file_as_bytes :: (main: *FileAccess, path: string) -> PackedByteArray { call_ret := cast(*PackedByteArray) sys_call("FileAccess", "get_file_as_bytes", 659035735, PackedByteArray, main.p_object, path); return call_ret.*; }  // 6
get_file_as_string :: (main: *FileAccess, path: string) -> gstring { call_ret := cast(*gstring) sys_call("FileAccess", "get_file_as_string", 1703090593, gstring, main.p_object, path); return call_ret.*; }  // 7
resize :: (main: *FileAccess, length: int) -> Error { call_ret := cast(*Error) sys_call("FileAccess", "resize", 844576869, Error, main.p_object, length); return call_ret.*; }  // 8
flush :: (main: *FileAccess) { sys_call("FileAccess", "flush", 3218959716, Nil, main.p_object);  }  // 9
get_path :: (main: *FileAccess) -> gstring { call_ret := cast(*gstring) sys_call("FileAccess", "get_path", 201670096, gstring, main.p_object); return call_ret.*; }  // 10
get_path_absolute :: (main: *FileAccess) -> gstring { call_ret := cast(*gstring) sys_call("FileAccess", "get_path_absolute", 201670096, gstring, main.p_object); return call_ret.*; }  // 11
is_open :: (main: *FileAccess) -> bool { call_ret := cast(*bool) sys_call("FileAccess", "is_open", 36873697, bool, main.p_object); return call_ret.*; }  // 12
seek :: (main: *FileAccess, position: int) { sys_call("FileAccess", "seek", 1286410249, Nil, main.p_object, position);  }  // 13
seek_end :: (main: *FileAccess) { sys_call("FileAccess", "seek_end", 1995695955, Nil, main.p_object);  }  // 14
get_position :: (main: *FileAccess) -> int { call_ret := cast(*int) sys_call("FileAccess", "get_position", 3905245786, int, main.p_object); return call_ret.*; }  // 15
get_length :: (main: *FileAccess) -> int { call_ret := cast(*int) sys_call("FileAccess", "get_length", 3905245786, int, main.p_object); return call_ret.*; }  // 16
eof_reached :: (main: *FileAccess) -> bool { call_ret := cast(*bool) sys_call("FileAccess", "eof_reached", 36873697, bool, main.p_object); return call_ret.*; }  // 17
get_8 :: (main: *FileAccess) -> int { call_ret := cast(*int) sys_call("FileAccess", "get_8", 3905245786, int, main.p_object); return call_ret.*; }  // 18
get_16 :: (main: *FileAccess) -> int { call_ret := cast(*int) sys_call("FileAccess", "get_16", 3905245786, int, main.p_object); return call_ret.*; }  // 19
get_32 :: (main: *FileAccess) -> int { call_ret := cast(*int) sys_call("FileAccess", "get_32", 3905245786, int, main.p_object); return call_ret.*; }  // 20
get_64 :: (main: *FileAccess) -> int { call_ret := cast(*int) sys_call("FileAccess", "get_64", 3905245786, int, main.p_object); return call_ret.*; }  // 21
get_half :: (main: *FileAccess) -> float { call_ret := cast(*float) sys_call("FileAccess", "get_half", 1740695150, float, main.p_object); return call_ret.*; }  // 22
get_float :: (main: *FileAccess) -> float { call_ret := cast(*float) sys_call("FileAccess", "get_float", 1740695150, float, main.p_object); return call_ret.*; }  // 23
get_double :: (main: *FileAccess) -> float { call_ret := cast(*float) sys_call("FileAccess", "get_double", 1740695150, float, main.p_object); return call_ret.*; }  // 24
get_real :: (main: *FileAccess) -> float { call_ret := cast(*float) sys_call("FileAccess", "get_real", 1740695150, float, main.p_object); return call_ret.*; }  // 25
get_buffer :: (main: *FileAccess, length: int) -> PackedByteArray { call_ret := cast(*PackedByteArray) sys_call("FileAccess", "get_buffer", 4131300905, PackedByteArray, main.p_object, length); return call_ret.*; }  // 26
get_line :: (main: *FileAccess) -> gstring { call_ret := cast(*gstring) sys_call("FileAccess", "get_line", 201670096, gstring, main.p_object); return call_ret.*; }  // 27
get_csv_line :: (main: *FileAccess) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("FileAccess", "get_csv_line", 2358116058, PackedStringArray, main.p_object); return call_ret.*; }  // 28
get_as_text :: (main: *FileAccess) -> gstring { call_ret := cast(*gstring) sys_call("FileAccess", "get_as_text", 1162154673, gstring, main.p_object); return call_ret.*; }  // 29
get_md5 :: (main: *FileAccess, path: string) -> gstring { call_ret := cast(*gstring) sys_call("FileAccess", "get_md5", 1703090593, gstring, main.p_object, path); return call_ret.*; }  // 30
get_sha256 :: (main: *FileAccess, path: string) -> gstring { call_ret := cast(*gstring) sys_call("FileAccess", "get_sha256", 1703090593, gstring, main.p_object, path); return call_ret.*; }  // 31
is_big_endian :: (main: *FileAccess) -> bool { call_ret := cast(*bool) sys_call("FileAccess", "is_big_endian", 36873697, bool, main.p_object); return call_ret.*; }  // 32
set_big_endian :: (main: *FileAccess, big_endian: bool) { sys_call("FileAccess", "set_big_endian", 2586408642, Nil, main.p_object, big_endian);  }  // 33
get_error :: (main: *FileAccess) -> Error { call_ret := cast(*Error) sys_call("FileAccess", "get_error", 3185525595, Error, main.p_object); return call_ret.*; }  // 34
get_var :: (main: *FileAccess) -> Variant { call_ret := cast(*Variant) sys_call("FileAccess", "get_var", 189129690, Variant, main.p_object); return call_ret.*; }  // 35
store_8 :: (main: *FileAccess, value: int) -> bool { call_ret := cast(*bool) sys_call("FileAccess", "store_8", 3067735520, bool, main.p_object, value); return call_ret.*; }  // 36
store_16 :: (main: *FileAccess, value: int) -> bool { call_ret := cast(*bool) sys_call("FileAccess", "store_16", 3067735520, bool, main.p_object, value); return call_ret.*; }  // 37
store_32 :: (main: *FileAccess, value: int) -> bool { call_ret := cast(*bool) sys_call("FileAccess", "store_32", 3067735520, bool, main.p_object, value); return call_ret.*; }  // 38
store_64 :: (main: *FileAccess, value: int) -> bool { call_ret := cast(*bool) sys_call("FileAccess", "store_64", 3067735520, bool, main.p_object, value); return call_ret.*; }  // 39
store_half :: (main: *FileAccess, value: float) -> bool { call_ret := cast(*bool) sys_call("FileAccess", "store_half", 330693286, bool, main.p_object, value); return call_ret.*; }  // 40
store_float :: (main: *FileAccess, value: float) -> bool { call_ret := cast(*bool) sys_call("FileAccess", "store_float", 330693286, bool, main.p_object, value); return call_ret.*; }  // 41
store_double :: (main: *FileAccess, value: float) -> bool { call_ret := cast(*bool) sys_call("FileAccess", "store_double", 330693286, bool, main.p_object, value); return call_ret.*; }  // 42
store_real :: (main: *FileAccess, value: float) -> bool { call_ret := cast(*bool) sys_call("FileAccess", "store_real", 330693286, bool, main.p_object, value); return call_ret.*; }  // 43
store_buffer :: (main: *FileAccess, buffer: PackedByteArray) -> bool { call_ret := cast(*bool) sys_call("FileAccess", "store_buffer", 114037665, bool, main.p_object, buffer); return call_ret.*; }  // 44
store_line :: (main: *FileAccess, line: string) -> bool { call_ret := cast(*bool) sys_call("FileAccess", "store_line", 2323990056, bool, main.p_object, line); return call_ret.*; }  // 45
store_csv_line :: (main: *FileAccess, values: PackedStringArray) -> bool { call_ret := cast(*bool) sys_call("FileAccess", "store_csv_line", 1611473434, bool, main.p_object, values); return call_ret.*; }  // 46
store_string :: (main: *FileAccess, _string: string) -> bool { call_ret := cast(*bool) sys_call("FileAccess", "store_string", 2323990056, bool, main.p_object, _string); return call_ret.*; }  // 47
store_var :: (main: *FileAccess, value: Variant) -> bool { call_ret := cast(*bool) sys_call("FileAccess", "store_var", 117357437, bool, main.p_object, value); return call_ret.*; }  // 48
store_pascal_string :: (main: *FileAccess, _string: string) -> bool { call_ret := cast(*bool) sys_call("FileAccess", "store_pascal_string", 2323990056, bool, main.p_object, _string); return call_ret.*; }  // 49
get_pascal_string :: (main: *FileAccess) -> gstring { call_ret := cast(*gstring) sys_call("FileAccess", "get_pascal_string", 2841200299, gstring, main.p_object); return call_ret.*; }  // 50
close :: (main: *FileAccess) { sys_call("FileAccess", "close", 3218959716, Nil, main.p_object);  }  // 51
file_exists :: (main: *FileAccess, path: string) -> bool { call_ret := cast(*bool) sys_call("FileAccess", "file_exists", 2323990056, bool, main.p_object, path); return call_ret.*; }  // 52
get_modified_time :: (main: *FileAccess, file: string) -> int { call_ret := cast(*int) sys_call("FileAccess", "get_modified_time", 1597066294, int, main.p_object, file); return call_ret.*; }  // 53
get_unix_permissions :: (main: *FileAccess, file: string) -> FileAccess.UnixPermissionFlags { call_ret := cast(*FileAccess.UnixPermissionFlags) sys_call("FileAccess", "get_unix_permissions", 524341837, FileAccess.UnixPermissionFlags, main.p_object, file); return call_ret.*; }  // 54
set_unix_permissions :: (main: *FileAccess, file: string, permissions: FileAccess.UnixPermissionFlags) -> Error { call_ret := cast(*Error) sys_call("FileAccess", "set_unix_permissions", 846038644, Error, main.p_object, file, permissions); return call_ret.*; }  // 55
get_hidden_attribute :: (main: *FileAccess, file: string) -> bool { call_ret := cast(*bool) sys_call("FileAccess", "get_hidden_attribute", 2323990056, bool, main.p_object, file); return call_ret.*; }  // 56
set_hidden_attribute :: (main: *FileAccess, file: string, hidden: bool) -> Error { call_ret := cast(*Error) sys_call("FileAccess", "set_hidden_attribute", 2892558115, Error, main.p_object, file, hidden); return call_ret.*; }  // 57
set_read_only_attribute :: (main: *FileAccess, file: string, ro: bool) -> Error { call_ret := cast(*Error) sys_call("FileAccess", "set_read_only_attribute", 2892558115, Error, main.p_object, file, ro); return call_ret.*; }  // 58
get_read_only_attribute :: (main: *FileAccess, file: string) -> bool { call_ret := cast(*bool) sys_call("FileAccess", "get_read_only_attribute", 2323990056, bool, main.p_object, file); return call_ret.*; }  // 59

clear_filters :: (main: *FileDialog) { sys_call("FileDialog", "clear_filters", 3218959716, Nil, main.p_object);  }  // 0
add_filter :: (main: *FileDialog, filter: string) { sys_call("FileDialog", "add_filter", 3388804757, Nil, main.p_object, filter);  }  // 1
set_filters :: (main: *FileDialog, filters: PackedStringArray) { sys_call("FileDialog", "set_filters", 4015028928, Nil, main.p_object, filters);  }  // 2
get_filters :: (main: *FileDialog) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("FileDialog", "get_filters", 1139954409, PackedStringArray, main.p_object); return call_ret.*; }  // 3
clear_filename_filter :: (main: *FileDialog) { sys_call("FileDialog", "clear_filename_filter", 3218959716, Nil, main.p_object);  }  // 4
set_filename_filter :: (main: *FileDialog, filter: string) { sys_call("FileDialog", "set_filename_filter", 83702148, Nil, main.p_object, filter);  }  // 5
get_filename_filter :: (main: *FileDialog) -> gstring { call_ret := cast(*gstring) sys_call("FileDialog", "get_filename_filter", 201670096, gstring, main.p_object); return call_ret.*; }  // 6
get_option_name :: (main: *FileDialog, option: int) -> gstring { call_ret := cast(*gstring) sys_call("FileDialog", "get_option_name", 844755477, gstring, main.p_object, option); return call_ret.*; }  // 7
get_option_values :: (main: *FileDialog, option: int) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("FileDialog", "get_option_values", 647634434, PackedStringArray, main.p_object, option); return call_ret.*; }  // 8
get_option_default :: (main: *FileDialog, option: int) -> int { call_ret := cast(*int) sys_call("FileDialog", "get_option_default", 923996154, int, main.p_object, option); return call_ret.*; }  // 9
set_option_name :: (main: *FileDialog, option: int, name: string) { sys_call("FileDialog", "set_option_name", 501894301, Nil, main.p_object, option, name);  }  // 10
set_option_values :: (main: *FileDialog, option: int, values: PackedStringArray) { sys_call("FileDialog", "set_option_values", 3353661094, Nil, main.p_object, option, values);  }  // 11
set_option_default :: (main: *FileDialog, option: int, default_value_index: int) { sys_call("FileDialog", "set_option_default", 3937882851, Nil, main.p_object, option, default_value_index);  }  // 12
set_option_count :: (main: *FileDialog, count: int) { sys_call("FileDialog", "set_option_count", 1286410249, Nil, main.p_object, count);  }  // 13
get_option_count :: (main: *FileDialog) -> int { call_ret := cast(*int) sys_call("FileDialog", "get_option_count", 3905245786, int, main.p_object); return call_ret.*; }  // 14
add_option :: (main: *FileDialog, name: string, values: PackedStringArray, default_value_index: int) { sys_call("FileDialog", "add_option", 149592325, Nil, main.p_object, name, values, default_value_index);  }  // 15
get_selected_options :: (main: *FileDialog) -> Dictionary { call_ret := cast(*Dictionary) sys_call("FileDialog", "get_selected_options", 3102165223, Dictionary, main.p_object); return call_ret.*; }  // 16
get_current_dir :: (main: *FileDialog) -> gstring { call_ret := cast(*gstring) sys_call("FileDialog", "get_current_dir", 201670096, gstring, main.p_object); return call_ret.*; }  // 17
get_current_file :: (main: *FileDialog) -> gstring { call_ret := cast(*gstring) sys_call("FileDialog", "get_current_file", 201670096, gstring, main.p_object); return call_ret.*; }  // 18
get_current_path :: (main: *FileDialog) -> gstring { call_ret := cast(*gstring) sys_call("FileDialog", "get_current_path", 201670096, gstring, main.p_object); return call_ret.*; }  // 19
set_current_dir :: (main: *FileDialog, dir: string) { sys_call("FileDialog", "set_current_dir", 83702148, Nil, main.p_object, dir);  }  // 20
set_current_file :: (main: *FileDialog, file: string) { sys_call("FileDialog", "set_current_file", 83702148, Nil, main.p_object, file);  }  // 21
set_current_path :: (main: *FileDialog, path: string) { sys_call("FileDialog", "set_current_path", 83702148, Nil, main.p_object, path);  }  // 22
set_mode_overrides_title :: (main: *FileDialog, override: bool) { sys_call("FileDialog", "set_mode_overrides_title", 2586408642, Nil, main.p_object, override);  }  // 23
is_mode_overriding_title :: (main: *FileDialog) -> bool { call_ret := cast(*bool) sys_call("FileDialog", "is_mode_overriding_title", 36873697, bool, main.p_object); return call_ret.*; }  // 24
set_file_mode :: (main: *FileDialog, mode: FileDialog.FileMode) { sys_call("FileDialog", "set_file_mode", 3654936397, Nil, main.p_object, mode);  }  // 25
get_file_mode :: (main: *FileDialog) -> FileDialog.FileMode { call_ret := cast(*FileDialog.FileMode) sys_call("FileDialog", "get_file_mode", 4074825319, FileDialog.FileMode, main.p_object); return call_ret.*; }  // 26
get_vbox :: (main: *FileDialog) -> *VBoxContainer { call_ret := cast(*VBoxContainer) sys_call("FileDialog", "get_vbox", 915758477, VBoxContainer, main.p_object); return call_ret; }  // 27
get_line_edit :: (main: *FileDialog) -> *LineEdit { call_ret := cast(*LineEdit) sys_call("FileDialog", "get_line_edit", 4071694264, LineEdit, main.p_object); return call_ret; }  // 28
set_access :: (main: *FileDialog, access: FileDialog.Access) { sys_call("FileDialog", "set_access", 4104413466, Nil, main.p_object, access);  }  // 29
get_access :: (main: *FileDialog) -> FileDialog.Access { call_ret := cast(*FileDialog.Access) sys_call("FileDialog", "get_access", 3344081076, FileDialog.Access, main.p_object); return call_ret.*; }  // 30
set_root_subfolder :: (main: *FileDialog, dir: string) { sys_call("FileDialog", "set_root_subfolder", 83702148, Nil, main.p_object, dir);  }  // 31
get_root_subfolder :: (main: *FileDialog) -> gstring { call_ret := cast(*gstring) sys_call("FileDialog", "get_root_subfolder", 201670096, gstring, main.p_object); return call_ret.*; }  // 32
set_show_hidden_files :: (main: *FileDialog, show: bool) { sys_call("FileDialog", "set_show_hidden_files", 2586408642, Nil, main.p_object, show);  }  // 33
is_showing_hidden_files :: (main: *FileDialog) -> bool { call_ret := cast(*bool) sys_call("FileDialog", "is_showing_hidden_files", 36873697, bool, main.p_object); return call_ret.*; }  // 34
set_use_native_dialog :: (main: *FileDialog, native: bool) { sys_call("FileDialog", "set_use_native_dialog", 2586408642, Nil, main.p_object, native);  }  // 35
get_use_native_dialog :: (main: *FileDialog) -> bool { call_ret := cast(*bool) sys_call("FileDialog", "get_use_native_dialog", 36873697, bool, main.p_object); return call_ret.*; }  // 36
deselect_all :: (main: *FileDialog) { sys_call("FileDialog", "deselect_all", 3218959716, Nil, main.p_object);  }  // 37
invalidate :: (main: *FileDialog) { sys_call("FileDialog", "invalidate", 3218959716, Nil, main.p_object);  }  // 38

navigate_to_path :: (main: *FileSystemDock, path: string) { sys_call("FileSystemDock", "navigate_to_path", 83702148, Nil, main.p_object, path);  }  // 0
add_resource_tooltip_plugin :: (main: *FileSystemDock, plugin: EditorResourceTooltipPlugin) { sys_call("FileSystemDock", "add_resource_tooltip_plugin", 2258356838, Nil, main.p_object, plugin);  }  // 1
remove_resource_tooltip_plugin :: (main: *FileSystemDock, plugin: EditorResourceTooltipPlugin) { sys_call("FileSystemDock", "remove_resource_tooltip_plugin", 2258356838, Nil, main.p_object, plugin);  }  // 2

get_line_count :: (main: *FlowContainer) -> int { call_ret := cast(*int) sys_call("FlowContainer", "get_line_count", 3905245786, int, main.p_object); return call_ret.*; }  // 0
set_alignment :: (main: *FlowContainer, alignment: FlowContainer.AlignmentMode) { sys_call("FlowContainer", "set_alignment", 575250951, Nil, main.p_object, alignment);  }  // 1
get_alignment :: (main: *FlowContainer) -> FlowContainer.AlignmentMode { call_ret := cast(*FlowContainer.AlignmentMode) sys_call("FlowContainer", "get_alignment", 3749743559, FlowContainer.AlignmentMode, main.p_object); return call_ret.*; }  // 2
set_last_wrap_alignment :: (main: *FlowContainer, last_wrap_alignment: FlowContainer.LastWrapAlignmentMode) { sys_call("FlowContainer", "set_last_wrap_alignment", 2899697495, Nil, main.p_object, last_wrap_alignment);  }  // 3
get_last_wrap_alignment :: (main: *FlowContainer) -> FlowContainer.LastWrapAlignmentMode { call_ret := cast(*FlowContainer.LastWrapAlignmentMode) sys_call("FlowContainer", "get_last_wrap_alignment", 3743456014, FlowContainer.LastWrapAlignmentMode, main.p_object); return call_ret.*; }  // 4
set_vertical :: (main: *FlowContainer, vertical: bool) { sys_call("FlowContainer", "set_vertical", 2586408642, Nil, main.p_object, vertical);  }  // 5
is_vertical :: (main: *FlowContainer) -> bool { call_ret := cast(*bool) sys_call("FlowContainer", "is_vertical", 36873697, bool, main.p_object); return call_ret.*; }  // 6
set_reverse_fill :: (main: *FlowContainer, reverse_fill: bool) { sys_call("FlowContainer", "set_reverse_fill", 2586408642, Nil, main.p_object, reverse_fill);  }  // 7
is_reverse_fill :: (main: *FlowContainer) -> bool { call_ret := cast(*bool) sys_call("FlowContainer", "is_reverse_fill", 36873697, bool, main.p_object); return call_ret.*; }  // 8

set_density :: (main: *FogMaterial, density: float) { sys_call("FogMaterial", "set_density", 373806689, Nil, main.p_object, density);  }  // 0
get_density :: (main: *FogMaterial) -> float { call_ret := cast(*float) sys_call("FogMaterial", "get_density", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_albedo :: (main: *FogMaterial, albedo: Color) { sys_call("FogMaterial", "set_albedo", 2920490490, Nil, main.p_object, albedo);  }  // 2
get_albedo :: (main: *FogMaterial) -> Color { call_ret := cast(*Color) sys_call("FogMaterial", "get_albedo", 3444240500, Color, main.p_object); return call_ret.*; }  // 3
set_emission :: (main: *FogMaterial, emission: Color) { sys_call("FogMaterial", "set_emission", 2920490490, Nil, main.p_object, emission);  }  // 4
get_emission :: (main: *FogMaterial) -> Color { call_ret := cast(*Color) sys_call("FogMaterial", "get_emission", 3444240500, Color, main.p_object); return call_ret.*; }  // 5
set_height_falloff :: (main: *FogMaterial, height_falloff: float) { sys_call("FogMaterial", "set_height_falloff", 373806689, Nil, main.p_object, height_falloff);  }  // 6
get_height_falloff :: (main: *FogMaterial) -> float { call_ret := cast(*float) sys_call("FogMaterial", "get_height_falloff", 1740695150, float, main.p_object); return call_ret.*; }  // 7
set_edge_fade :: (main: *FogMaterial, edge_fade: float) { sys_call("FogMaterial", "set_edge_fade", 373806689, Nil, main.p_object, edge_fade);  }  // 8
get_edge_fade :: (main: *FogMaterial) -> float { call_ret := cast(*float) sys_call("FogMaterial", "get_edge_fade", 1740695150, float, main.p_object); return call_ret.*; }  // 9
set_density_texture :: (main: *FogMaterial, density_texture: Texture3D) { sys_call("FogMaterial", "set_density_texture", 1188404210, Nil, main.p_object, density_texture);  }  // 10
get_density_texture :: (main: *FogMaterial) -> *Texture3D { call_ret := cast(*Texture3D) sys_call("FogMaterial", "get_density_texture", 373985333, Texture3D, main.p_object); return call_ret; }  // 11

set_size :: (main: *FogVolume, size: Vector3) { sys_call("FogVolume", "set_size", 3460891852, Nil, main.p_object, size);  }  // 0
get_size :: (main: *FogVolume) -> Vector3 { call_ret := cast(*Vector3) sys_call("FogVolume", "get_size", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 1
set_shape :: (main: *FogVolume, shape: RenderingServer.FogVolumeShape) { sys_call("FogVolume", "set_shape", 1416323362, Nil, main.p_object, shape);  }  // 2
get_shape :: (main: *FogVolume) -> RenderingServer.FogVolumeShape { call_ret := cast(*RenderingServer.FogVolumeShape) sys_call("FogVolume", "get_shape", 3920334604, RenderingServer.FogVolumeShape, main.p_object); return call_ret.*; }  // 3
set_material :: (main: *FogVolume, material: Material) { sys_call("FogVolume", "set_material", 2757459619, Nil, main.p_object, material);  }  // 4
get_material :: (main: *FogVolume) -> *Material { call_ret := cast(*Material) sys_call("FogVolume", "get_material", 5934680, Material, main.p_object); return call_ret; }  // 5

set_fallbacks :: (main: *Font, fallbacks: [] Font) { sys_call("Font", "set_fallbacks", 381264803, Nil, main.p_object, fallbacks);  }  // 0
get_fallbacks :: (main: *Font) -> [] Font { call_ret := cast(*[] Font) sys_call("Font", "get_fallbacks", 3995934104, [] Font, main.p_object); return call_ret.*; }  // 1
find_variation :: (main: *Font, variation_coordinates: Dictionary) -> RID { call_ret := cast(*RID) sys_call("Font", "find_variation", 2553855095, RID, main.p_object, variation_coordinates); return call_ret.*; }  // 2
get_rids :: (main: *Font) -> [] RID { call_ret := cast(*[] RID) sys_call("Font", "get_rids", 3995934104, [] RID, main.p_object); return call_ret.*; }  // 3
get_height :: (main: *Font) -> float { call_ret := cast(*float) sys_call("Font", "get_height", 378113874, float, main.p_object); return call_ret.*; }  // 4
get_ascent :: (main: *Font) -> float { call_ret := cast(*float) sys_call("Font", "get_ascent", 378113874, float, main.p_object); return call_ret.*; }  // 5
get_descent :: (main: *Font) -> float { call_ret := cast(*float) sys_call("Font", "get_descent", 378113874, float, main.p_object); return call_ret.*; }  // 6
get_underline_position :: (main: *Font) -> float { call_ret := cast(*float) sys_call("Font", "get_underline_position", 378113874, float, main.p_object); return call_ret.*; }  // 7
get_underline_thickness :: (main: *Font) -> float { call_ret := cast(*float) sys_call("Font", "get_underline_thickness", 378113874, float, main.p_object); return call_ret.*; }  // 8
get_font_name :: (main: *Font) -> gstring { call_ret := cast(*gstring) sys_call("Font", "get_font_name", 201670096, gstring, main.p_object); return call_ret.*; }  // 9
get_font_style_name :: (main: *Font) -> gstring { call_ret := cast(*gstring) sys_call("Font", "get_font_style_name", 201670096, gstring, main.p_object); return call_ret.*; }  // 10
get_ot_name_strings :: (main: *Font) -> Dictionary { call_ret := cast(*Dictionary) sys_call("Font", "get_ot_name_strings", 3102165223, Dictionary, main.p_object); return call_ret.*; }  // 11
get_font_style :: (main: *Font) -> TextServer.FontStyle { call_ret := cast(*TextServer.FontStyle) sys_call("Font", "get_font_style", 2520224254, TextServer.FontStyle, main.p_object); return call_ret.*; }  // 12
get_font_weight :: (main: *Font) -> int { call_ret := cast(*int) sys_call("Font", "get_font_weight", 3905245786, int, main.p_object); return call_ret.*; }  // 13
get_font_stretch :: (main: *Font) -> int { call_ret := cast(*int) sys_call("Font", "get_font_stretch", 3905245786, int, main.p_object); return call_ret.*; }  // 14
get_spacing :: (main: *Font, spacing: TextServer.SpacingType) -> int { call_ret := cast(*int) sys_call("Font", "get_spacing", 1310880908, int, main.p_object, spacing); return call_ret.*; }  // 15
get_opentype_features :: (main: *Font) -> Dictionary { call_ret := cast(*Dictionary) sys_call("Font", "get_opentype_features", 3102165223, Dictionary, main.p_object); return call_ret.*; }  // 16
set_cache_capacity :: (main: *Font, single_line: int, multi_line: int) { sys_call("Font", "set_cache_capacity", 3937882851, Nil, main.p_object, single_line, multi_line);  }  // 17
get_string_size :: (main: *Font, text: string) -> Vector2 { call_ret := cast(*Vector2) sys_call("Font", "get_string_size", 1868866121, Vector2, main.p_object, text); return call_ret.*; }  // 18
get_multiline_string_size :: (main: *Font, text: string) -> Vector2 { call_ret := cast(*Vector2) sys_call("Font", "get_multiline_string_size", 519636710, Vector2, main.p_object, text); return call_ret.*; }  // 19
draw_string :: (main: *Font, canvas_item: RID, pos: Vector2, text: string) { sys_call("Font", "draw_string", 1983721962, Nil, main.p_object, canvas_item, pos, text);  }  // 20
draw_multiline_string :: (main: *Font, canvas_item: RID, pos: Vector2, text: string) { sys_call("Font", "draw_multiline_string", 1171506176, Nil, main.p_object, canvas_item, pos, text);  }  // 21
draw_string_outline :: (main: *Font, canvas_item: RID, pos: Vector2, text: string) { sys_call("Font", "draw_string_outline", 623754045, Nil, main.p_object, canvas_item, pos, text);  }  // 22
draw_multiline_string_outline :: (main: *Font, canvas_item: RID, pos: Vector2, text: string) { sys_call("Font", "draw_multiline_string_outline", 3206388178, Nil, main.p_object, canvas_item, pos, text);  }  // 23
get_char_size :: (main: *Font, char: int, font_size: int) -> Vector2 { call_ret := cast(*Vector2) sys_call("Font", "get_char_size", 3016396712, Vector2, main.p_object, char, font_size); return call_ret.*; }  // 24
draw_char :: (main: *Font, canvas_item: RID, pos: Vector2, char: int, font_size: int) -> float { call_ret := cast(*float) sys_call("Font", "draw_char", 3815617597, float, main.p_object, canvas_item, pos, char, font_size); return call_ret.*; }  // 25
draw_char_outline :: (main: *Font, canvas_item: RID, pos: Vector2, char: int, font_size: int) -> float { call_ret := cast(*float) sys_call("Font", "draw_char_outline", 209525354, float, main.p_object, canvas_item, pos, char, font_size); return call_ret.*; }  // 26
has_char :: (main: *Font, char: int) -> bool { call_ret := cast(*bool) sys_call("Font", "has_char", 1116898809, bool, main.p_object, char); return call_ret.*; }  // 27
get_supported_chars :: (main: *Font) -> gstring { call_ret := cast(*gstring) sys_call("Font", "get_supported_chars", 201670096, gstring, main.p_object); return call_ret.*; }  // 28
is_language_supported :: (main: *Font, language: string) -> bool { call_ret := cast(*bool) sys_call("Font", "is_language_supported", 3927539163, bool, main.p_object, language); return call_ret.*; }  // 29
is_script_supported :: (main: *Font, script: string) -> bool { call_ret := cast(*bool) sys_call("Font", "is_script_supported", 3927539163, bool, main.p_object, script); return call_ret.*; }  // 30
get_supported_feature_list :: (main: *Font) -> Dictionary { call_ret := cast(*Dictionary) sys_call("Font", "get_supported_feature_list", 3102165223, Dictionary, main.p_object); return call_ret.*; }  // 31
get_supported_variation_list :: (main: *Font) -> Dictionary { call_ret := cast(*Dictionary) sys_call("Font", "get_supported_variation_list", 3102165223, Dictionary, main.p_object); return call_ret.*; }  // 32
get_face_count :: (main: *Font) -> int { call_ret := cast(*int) sys_call("Font", "get_face_count", 3905245786, int, main.p_object); return call_ret.*; }  // 33

load_bitmap_font :: (main: *FontFile, path: string) -> Error { call_ret := cast(*Error) sys_call("FontFile", "load_bitmap_font", 166001499, Error, main.p_object, path); return call_ret.*; }  // 0
load_dynamic_font :: (main: *FontFile, path: string) -> Error { call_ret := cast(*Error) sys_call("FontFile", "load_dynamic_font", 166001499, Error, main.p_object, path); return call_ret.*; }  // 1
set_data :: (main: *FontFile, data: PackedByteArray) { sys_call("FontFile", "set_data", 2971499966, Nil, main.p_object, data);  }  // 2
get_data :: (main: *FontFile) -> PackedByteArray { call_ret := cast(*PackedByteArray) sys_call("FontFile", "get_data", 2362200018, PackedByteArray, main.p_object); return call_ret.*; }  // 3
set_font_name :: (main: *FontFile, name: string) { sys_call("FontFile", "set_font_name", 83702148, Nil, main.p_object, name);  }  // 4
set_font_style_name :: (main: *FontFile, name: string) { sys_call("FontFile", "set_font_style_name", 83702148, Nil, main.p_object, name);  }  // 5
set_font_style :: (main: *FontFile, style: TextServer.FontStyle) { sys_call("FontFile", "set_font_style", 918070724, Nil, main.p_object, style);  }  // 6
set_font_weight :: (main: *FontFile, weight: int) { sys_call("FontFile", "set_font_weight", 1286410249, Nil, main.p_object, weight);  }  // 7
set_font_stretch :: (main: *FontFile, stretch: int) { sys_call("FontFile", "set_font_stretch", 1286410249, Nil, main.p_object, stretch);  }  // 8
set_antialiasing :: (main: *FontFile, antialiasing: TextServer.FontAntialiasing) { sys_call("FontFile", "set_antialiasing", 1669900, Nil, main.p_object, antialiasing);  }  // 9
get_antialiasing :: (main: *FontFile) -> TextServer.FontAntialiasing { call_ret := cast(*TextServer.FontAntialiasing) sys_call("FontFile", "get_antialiasing", 4262718649, TextServer.FontAntialiasing, main.p_object); return call_ret.*; }  // 10
set_disable_embedded_bitmaps :: (main: *FontFile, disable_embedded_bitmaps: bool) { sys_call("FontFile", "set_disable_embedded_bitmaps", 2586408642, Nil, main.p_object, disable_embedded_bitmaps);  }  // 11
get_disable_embedded_bitmaps :: (main: *FontFile) -> bool { call_ret := cast(*bool) sys_call("FontFile", "get_disable_embedded_bitmaps", 36873697, bool, main.p_object); return call_ret.*; }  // 12
set_generate_mipmaps :: (main: *FontFile, generate_mipmaps: bool) { sys_call("FontFile", "set_generate_mipmaps", 2586408642, Nil, main.p_object, generate_mipmaps);  }  // 13
get_generate_mipmaps :: (main: *FontFile) -> bool { call_ret := cast(*bool) sys_call("FontFile", "get_generate_mipmaps", 36873697, bool, main.p_object); return call_ret.*; }  // 14
set_multichannel_signed_distance_field :: (main: *FontFile, msdf: bool) { sys_call("FontFile", "set_multichannel_signed_distance_field", 2586408642, Nil, main.p_object, msdf);  }  // 15
is_multichannel_signed_distance_field :: (main: *FontFile) -> bool { call_ret := cast(*bool) sys_call("FontFile", "is_multichannel_signed_distance_field", 36873697, bool, main.p_object); return call_ret.*; }  // 16
set_msdf_pixel_range :: (main: *FontFile, msdf_pixel_range: int) { sys_call("FontFile", "set_msdf_pixel_range", 1286410249, Nil, main.p_object, msdf_pixel_range);  }  // 17
get_msdf_pixel_range :: (main: *FontFile) -> int { call_ret := cast(*int) sys_call("FontFile", "get_msdf_pixel_range", 3905245786, int, main.p_object); return call_ret.*; }  // 18
set_msdf_size :: (main: *FontFile, msdf_size: int) { sys_call("FontFile", "set_msdf_size", 1286410249, Nil, main.p_object, msdf_size);  }  // 19
get_msdf_size :: (main: *FontFile) -> int { call_ret := cast(*int) sys_call("FontFile", "get_msdf_size", 3905245786, int, main.p_object); return call_ret.*; }  // 20
set_fixed_size :: (main: *FontFile, fixed_size: int) { sys_call("FontFile", "set_fixed_size", 1286410249, Nil, main.p_object, fixed_size);  }  // 21
get_fixed_size :: (main: *FontFile) -> int { call_ret := cast(*int) sys_call("FontFile", "get_fixed_size", 3905245786, int, main.p_object); return call_ret.*; }  // 22
set_fixed_size_scale_mode :: (main: *FontFile, fixed_size_scale_mode: TextServer.FixedSizeScaleMode) { sys_call("FontFile", "set_fixed_size_scale_mode", 1660989956, Nil, main.p_object, fixed_size_scale_mode);  }  // 23
get_fixed_size_scale_mode :: (main: *FontFile) -> TextServer.FixedSizeScaleMode { call_ret := cast(*TextServer.FixedSizeScaleMode) sys_call("FontFile", "get_fixed_size_scale_mode", 753873478, TextServer.FixedSizeScaleMode, main.p_object); return call_ret.*; }  // 24
set_allow_system_fallback :: (main: *FontFile, allow_system_fallback: bool) { sys_call("FontFile", "set_allow_system_fallback", 2586408642, Nil, main.p_object, allow_system_fallback);  }  // 25
is_allow_system_fallback :: (main: *FontFile) -> bool { call_ret := cast(*bool) sys_call("FontFile", "is_allow_system_fallback", 36873697, bool, main.p_object); return call_ret.*; }  // 26
set_force_autohinter :: (main: *FontFile, force_autohinter: bool) { sys_call("FontFile", "set_force_autohinter", 2586408642, Nil, main.p_object, force_autohinter);  }  // 27
is_force_autohinter :: (main: *FontFile) -> bool { call_ret := cast(*bool) sys_call("FontFile", "is_force_autohinter", 36873697, bool, main.p_object); return call_ret.*; }  // 28
set_hinting :: (main: *FontFile, hinting: TextServer.Hinting) { sys_call("FontFile", "set_hinting", 1827459492, Nil, main.p_object, hinting);  }  // 29
get_hinting :: (main: *FontFile) -> TextServer.Hinting { call_ret := cast(*TextServer.Hinting) sys_call("FontFile", "get_hinting", 3683214614, TextServer.Hinting, main.p_object); return call_ret.*; }  // 30
set_subpixel_positioning :: (main: *FontFile, subpixel_positioning: TextServer.SubpixelPositioning) { sys_call("FontFile", "set_subpixel_positioning", 4225742182, Nil, main.p_object, subpixel_positioning);  }  // 31
get_subpixel_positioning :: (main: *FontFile) -> TextServer.SubpixelPositioning { call_ret := cast(*TextServer.SubpixelPositioning) sys_call("FontFile", "get_subpixel_positioning", 1069238588, TextServer.SubpixelPositioning, main.p_object); return call_ret.*; }  // 32
set_keep_rounding_remainders :: (main: *FontFile, keep_rounding_remainders: bool) { sys_call("FontFile", "set_keep_rounding_remainders", 2586408642, Nil, main.p_object, keep_rounding_remainders);  }  // 33
get_keep_rounding_remainders :: (main: *FontFile) -> bool { call_ret := cast(*bool) sys_call("FontFile", "get_keep_rounding_remainders", 36873697, bool, main.p_object); return call_ret.*; }  // 34
set_oversampling :: (main: *FontFile, oversampling: float) { sys_call("FontFile", "set_oversampling", 373806689, Nil, main.p_object, oversampling);  }  // 35
get_oversampling :: (main: *FontFile) -> float { call_ret := cast(*float) sys_call("FontFile", "get_oversampling", 1740695150, float, main.p_object); return call_ret.*; }  // 36
get_cache_count :: (main: *FontFile) -> int { call_ret := cast(*int) sys_call("FontFile", "get_cache_count", 3905245786, int, main.p_object); return call_ret.*; }  // 37
clear_cache :: (main: *FontFile) { sys_call("FontFile", "clear_cache", 3218959716, Nil, main.p_object);  }  // 38
remove_cache :: (main: *FontFile, cache_index: int) { sys_call("FontFile", "remove_cache", 1286410249, Nil, main.p_object, cache_index);  }  // 39
get_size_cache_list :: (main: *FontFile, cache_index: int) -> [] Vector2i { call_ret := cast(*[] Vector2i) sys_call("FontFile", "get_size_cache_list", 663333327, [] Vector2i, main.p_object, cache_index); return call_ret.*; }  // 40
clear_size_cache :: (main: *FontFile, cache_index: int) { sys_call("FontFile", "clear_size_cache", 1286410249, Nil, main.p_object, cache_index);  }  // 41
remove_size_cache :: (main: *FontFile, cache_index: int, size: Vector2i) { sys_call("FontFile", "remove_size_cache", 2311374912, Nil, main.p_object, cache_index, size);  }  // 42
set_variation_coordinates :: (main: *FontFile, cache_index: int, variation_coordinates: Dictionary) { sys_call("FontFile", "set_variation_coordinates", 64545446, Nil, main.p_object, cache_index, variation_coordinates);  }  // 43
get_variation_coordinates :: (main: *FontFile, cache_index: int) -> Dictionary { call_ret := cast(*Dictionary) sys_call("FontFile", "get_variation_coordinates", 3485342025, Dictionary, main.p_object, cache_index); return call_ret.*; }  // 44
set_embolden :: (main: *FontFile, cache_index: int, strength: float) { sys_call("FontFile", "set_embolden", 1602489585, Nil, main.p_object, cache_index, strength);  }  // 45
get_embolden :: (main: *FontFile, cache_index: int) -> float { call_ret := cast(*float) sys_call("FontFile", "get_embolden", 2339986948, float, main.p_object, cache_index); return call_ret.*; }  // 46
set_transform :: (main: *FontFile, cache_index: int, transform: Transform2D) { sys_call("FontFile", "set_transform", 30160968, Nil, main.p_object, cache_index, transform);  }  // 47
get_transform :: (main: *FontFile, cache_index: int) -> Transform2D { call_ret := cast(*Transform2D) sys_call("FontFile", "get_transform", 3836996910, Transform2D, main.p_object, cache_index); return call_ret.*; }  // 48
set_extra_spacing :: (main: *FontFile, cache_index: int, spacing: TextServer.SpacingType, value: int) { sys_call("FontFile", "set_extra_spacing", 62942285, Nil, main.p_object, cache_index, spacing, value);  }  // 49
get_extra_spacing :: (main: *FontFile, cache_index: int, spacing: TextServer.SpacingType) -> int { call_ret := cast(*int) sys_call("FontFile", "get_extra_spacing", 1924257185, int, main.p_object, cache_index, spacing); return call_ret.*; }  // 50
set_extra_baseline_offset :: (main: *FontFile, cache_index: int, baseline_offset: float) { sys_call("FontFile", "set_extra_baseline_offset", 1602489585, Nil, main.p_object, cache_index, baseline_offset);  }  // 51
get_extra_baseline_offset :: (main: *FontFile, cache_index: int) -> float { call_ret := cast(*float) sys_call("FontFile", "get_extra_baseline_offset", 2339986948, float, main.p_object, cache_index); return call_ret.*; }  // 52
set_face_index :: (main: *FontFile, cache_index: int, face_index: int) { sys_call("FontFile", "set_face_index", 3937882851, Nil, main.p_object, cache_index, face_index);  }  // 53
get_face_index :: (main: *FontFile, cache_index: int) -> int { call_ret := cast(*int) sys_call("FontFile", "get_face_index", 923996154, int, main.p_object, cache_index); return call_ret.*; }  // 54
set_cache_ascent :: (main: *FontFile, cache_index: int, size: int, ascent: float) { sys_call("FontFile", "set_cache_ascent", 3506521499, Nil, main.p_object, cache_index, size, ascent);  }  // 55
get_cache_ascent :: (main: *FontFile, cache_index: int, size: int) -> float { call_ret := cast(*float) sys_call("FontFile", "get_cache_ascent", 3085491603, float, main.p_object, cache_index, size); return call_ret.*; }  // 56
set_cache_descent :: (main: *FontFile, cache_index: int, size: int, descent: float) { sys_call("FontFile", "set_cache_descent", 3506521499, Nil, main.p_object, cache_index, size, descent);  }  // 57
get_cache_descent :: (main: *FontFile, cache_index: int, size: int) -> float { call_ret := cast(*float) sys_call("FontFile", "get_cache_descent", 3085491603, float, main.p_object, cache_index, size); return call_ret.*; }  // 58
set_cache_underline_position :: (main: *FontFile, cache_index: int, size: int, underline_position: float) { sys_call("FontFile", "set_cache_underline_position", 3506521499, Nil, main.p_object, cache_index, size, underline_position);  }  // 59
get_cache_underline_position :: (main: *FontFile, cache_index: int, size: int) -> float { call_ret := cast(*float) sys_call("FontFile", "get_cache_underline_position", 3085491603, float, main.p_object, cache_index, size); return call_ret.*; }  // 60
set_cache_underline_thickness :: (main: *FontFile, cache_index: int, size: int, underline_thickness: float) { sys_call("FontFile", "set_cache_underline_thickness", 3506521499, Nil, main.p_object, cache_index, size, underline_thickness);  }  // 61
get_cache_underline_thickness :: (main: *FontFile, cache_index: int, size: int) -> float { call_ret := cast(*float) sys_call("FontFile", "get_cache_underline_thickness", 3085491603, float, main.p_object, cache_index, size); return call_ret.*; }  // 62
set_cache_scale :: (main: *FontFile, cache_index: int, size: int, scale: float) { sys_call("FontFile", "set_cache_scale", 3506521499, Nil, main.p_object, cache_index, size, scale);  }  // 63
get_cache_scale :: (main: *FontFile, cache_index: int, size: int) -> float { call_ret := cast(*float) sys_call("FontFile", "get_cache_scale", 3085491603, float, main.p_object, cache_index, size); return call_ret.*; }  // 64
get_texture_count :: (main: *FontFile, cache_index: int, size: Vector2i) -> int { call_ret := cast(*int) sys_call("FontFile", "get_texture_count", 1987661582, int, main.p_object, cache_index, size); return call_ret.*; }  // 65
clear_textures :: (main: *FontFile, cache_index: int, size: Vector2i) { sys_call("FontFile", "clear_textures", 2311374912, Nil, main.p_object, cache_index, size);  }  // 66
remove_texture :: (main: *FontFile, cache_index: int, size: Vector2i, texture_index: int) { sys_call("FontFile", "remove_texture", 2328951467, Nil, main.p_object, cache_index, size, texture_index);  }  // 67
set_texture_image :: (main: *FontFile, cache_index: int, size: Vector2i, texture_index: int, image: Image) { sys_call("FontFile", "set_texture_image", 4157974066, Nil, main.p_object, cache_index, size, texture_index, image);  }  // 68
get_texture_image :: (main: *FontFile, cache_index: int, size: Vector2i, texture_index: int) -> *Image { call_ret := cast(*Image) sys_call("FontFile", "get_texture_image", 3878418953, Image, main.p_object, cache_index, size, texture_index); return call_ret; }  // 69
set_texture_offsets :: (main: *FontFile, cache_index: int, size: Vector2i, texture_index: int, offset: PackedInt32Array) { sys_call("FontFile", "set_texture_offsets", 2849993437, Nil, main.p_object, cache_index, size, texture_index, offset);  }  // 70
get_texture_offsets :: (main: *FontFile, cache_index: int, size: Vector2i, texture_index: int) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("FontFile", "get_texture_offsets", 3703444828, PackedInt32Array, main.p_object, cache_index, size, texture_index); return call_ret.*; }  // 71
get_glyph_list :: (main: *FontFile, cache_index: int, size: Vector2i) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("FontFile", "get_glyph_list", 681709689, PackedInt32Array, main.p_object, cache_index, size); return call_ret.*; }  // 72
clear_glyphs :: (main: *FontFile, cache_index: int, size: Vector2i) { sys_call("FontFile", "clear_glyphs", 2311374912, Nil, main.p_object, cache_index, size);  }  // 73
remove_glyph :: (main: *FontFile, cache_index: int, size: Vector2i, glyph: int) { sys_call("FontFile", "remove_glyph", 2328951467, Nil, main.p_object, cache_index, size, glyph);  }  // 74
set_glyph_advance :: (main: *FontFile, cache_index: int, size: int, glyph: int, advance: Vector2) { sys_call("FontFile", "set_glyph_advance", 947991729, Nil, main.p_object, cache_index, size, glyph, advance);  }  // 75
get_glyph_advance :: (main: *FontFile, cache_index: int, size: int, glyph: int) -> Vector2 { call_ret := cast(*Vector2) sys_call("FontFile", "get_glyph_advance", 1601573536, Vector2, main.p_object, cache_index, size, glyph); return call_ret.*; }  // 76
set_glyph_offset :: (main: *FontFile, cache_index: int, size: Vector2i, glyph: int, offset: Vector2) { sys_call("FontFile", "set_glyph_offset", 921719850, Nil, main.p_object, cache_index, size, glyph, offset);  }  // 77
get_glyph_offset :: (main: *FontFile, cache_index: int, size: Vector2i, glyph: int) -> Vector2 { call_ret := cast(*Vector2) sys_call("FontFile", "get_glyph_offset", 3205412300, Vector2, main.p_object, cache_index, size, glyph); return call_ret.*; }  // 78
set_glyph_size :: (main: *FontFile, cache_index: int, size: Vector2i, glyph: int, gl_size: Vector2) { sys_call("FontFile", "set_glyph_size", 921719850, Nil, main.p_object, cache_index, size, glyph, gl_size);  }  // 79
get_glyph_size :: (main: *FontFile, cache_index: int, size: Vector2i, glyph: int) -> Vector2 { call_ret := cast(*Vector2) sys_call("FontFile", "get_glyph_size", 3205412300, Vector2, main.p_object, cache_index, size, glyph); return call_ret.*; }  // 80
set_glyph_uv_rect :: (main: *FontFile, cache_index: int, size: Vector2i, glyph: int, uv_rect: Rect2) { sys_call("FontFile", "set_glyph_uv_rect", 3821620992, Nil, main.p_object, cache_index, size, glyph, uv_rect);  }  // 81
get_glyph_uv_rect :: (main: *FontFile, cache_index: int, size: Vector2i, glyph: int) -> Rect2 { call_ret := cast(*Rect2) sys_call("FontFile", "get_glyph_uv_rect", 3927917900, Rect2, main.p_object, cache_index, size, glyph); return call_ret.*; }  // 82
set_glyph_texture_idx :: (main: *FontFile, cache_index: int, size: Vector2i, glyph: int, texture_idx: int) { sys_call("FontFile", "set_glyph_texture_idx", 355564111, Nil, main.p_object, cache_index, size, glyph, texture_idx);  }  // 83
get_glyph_texture_idx :: (main: *FontFile, cache_index: int, size: Vector2i, glyph: int) -> int { call_ret := cast(*int) sys_call("FontFile", "get_glyph_texture_idx", 1629411054, int, main.p_object, cache_index, size, glyph); return call_ret.*; }  // 84
get_kerning_list :: (main: *FontFile, cache_index: int, size: int) -> [] Vector2i { call_ret := cast(*[] Vector2i) sys_call("FontFile", "get_kerning_list", 2345056839, [] Vector2i, main.p_object, cache_index, size); return call_ret.*; }  // 85
clear_kerning_map :: (main: *FontFile, cache_index: int, size: int) { sys_call("FontFile", "clear_kerning_map", 3937882851, Nil, main.p_object, cache_index, size);  }  // 86
remove_kerning :: (main: *FontFile, cache_index: int, size: int, glyph_pair: Vector2i) { sys_call("FontFile", "remove_kerning", 3930204747, Nil, main.p_object, cache_index, size, glyph_pair);  }  // 87
set_kerning :: (main: *FontFile, cache_index: int, size: int, glyph_pair: Vector2i, kerning: Vector2) { sys_call("FontFile", "set_kerning", 3182200918, Nil, main.p_object, cache_index, size, glyph_pair, kerning);  }  // 88
get_kerning :: (main: *FontFile, cache_index: int, size: int, glyph_pair: Vector2i) -> Vector2 { call_ret := cast(*Vector2) sys_call("FontFile", "get_kerning", 1611912865, Vector2, main.p_object, cache_index, size, glyph_pair); return call_ret.*; }  // 89
render_range :: (main: *FontFile, cache_index: int, size: Vector2i, start: int, end: int) { sys_call("FontFile", "render_range", 355564111, Nil, main.p_object, cache_index, size, start, end);  }  // 90
render_glyph :: (main: *FontFile, cache_index: int, size: Vector2i, index: int) { sys_call("FontFile", "render_glyph", 2328951467, Nil, main.p_object, cache_index, size, index);  }  // 91
set_language_support_override :: (main: *FontFile, language: string, supported: bool) { sys_call("FontFile", "set_language_support_override", 2678287736, Nil, main.p_object, language, supported);  }  // 92
get_language_support_override :: (main: *FontFile, language: string) -> bool { call_ret := cast(*bool) sys_call("FontFile", "get_language_support_override", 3927539163, bool, main.p_object, language); return call_ret.*; }  // 93
remove_language_support_override :: (main: *FontFile, language: string) { sys_call("FontFile", "remove_language_support_override", 83702148, Nil, main.p_object, language);  }  // 94
get_language_support_overrides :: (main: *FontFile) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("FontFile", "get_language_support_overrides", 1139954409, PackedStringArray, main.p_object); return call_ret.*; }  // 95
set_script_support_override :: (main: *FontFile, script: string, supported: bool) { sys_call("FontFile", "set_script_support_override", 2678287736, Nil, main.p_object, script, supported);  }  // 96
get_script_support_override :: (main: *FontFile, script: string) -> bool { call_ret := cast(*bool) sys_call("FontFile", "get_script_support_override", 3927539163, bool, main.p_object, script); return call_ret.*; }  // 97
remove_script_support_override :: (main: *FontFile, script: string) { sys_call("FontFile", "remove_script_support_override", 83702148, Nil, main.p_object, script);  }  // 98
get_script_support_overrides :: (main: *FontFile) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("FontFile", "get_script_support_overrides", 1139954409, PackedStringArray, main.p_object); return call_ret.*; }  // 99
set_opentype_feature_overrides :: (main: *FontFile, overrides: Dictionary) { sys_call("FontFile", "set_opentype_feature_overrides", 4155329257, Nil, main.p_object, overrides);  }  // 100
get_opentype_feature_overrides :: (main: *FontFile) -> Dictionary { call_ret := cast(*Dictionary) sys_call("FontFile", "get_opentype_feature_overrides", 3102165223, Dictionary, main.p_object); return call_ret.*; }  // 101
get_glyph_index :: (main: *FontFile, size: int, char: int, variation_selector: int) -> int { call_ret := cast(*int) sys_call("FontFile", "get_glyph_index", 864943070, int, main.p_object, size, char, variation_selector); return call_ret.*; }  // 102
get_char_from_glyph_index :: (main: *FontFile, size: int, glyph_index: int) -> int { call_ret := cast(*int) sys_call("FontFile", "get_char_from_glyph_index", 3175239445, int, main.p_object, size, glyph_index); return call_ret.*; }  // 103

set_base_font :: (main: *FontVariation, font: Font) { sys_call("FontVariation", "set_base_font", 1262170328, Nil, main.p_object, font);  }  // 0
get_base_font :: (main: *FontVariation) -> *Font { call_ret := cast(*Font) sys_call("FontVariation", "get_base_font", 3229501585, Font, main.p_object); return call_ret; }  // 1
set_variation_opentype :: (main: *FontVariation, coords: Dictionary) { sys_call("FontVariation", "set_variation_opentype", 4155329257, Nil, main.p_object, coords);  }  // 2
get_variation_opentype :: (main: *FontVariation) -> Dictionary { call_ret := cast(*Dictionary) sys_call("FontVariation", "get_variation_opentype", 3102165223, Dictionary, main.p_object); return call_ret.*; }  // 3
set_variation_embolden :: (main: *FontVariation, strength: float) { sys_call("FontVariation", "set_variation_embolden", 373806689, Nil, main.p_object, strength);  }  // 4
get_variation_embolden :: (main: *FontVariation) -> float { call_ret := cast(*float) sys_call("FontVariation", "get_variation_embolden", 1740695150, float, main.p_object); return call_ret.*; }  // 5
set_variation_face_index :: (main: *FontVariation, face_index: int) { sys_call("FontVariation", "set_variation_face_index", 1286410249, Nil, main.p_object, face_index);  }  // 6
get_variation_face_index :: (main: *FontVariation) -> int { call_ret := cast(*int) sys_call("FontVariation", "get_variation_face_index", 3905245786, int, main.p_object); return call_ret.*; }  // 7
set_variation_transform :: (main: *FontVariation, transform: Transform2D) { sys_call("FontVariation", "set_variation_transform", 2761652528, Nil, main.p_object, transform);  }  // 8
get_variation_transform :: (main: *FontVariation) -> Transform2D { call_ret := cast(*Transform2D) sys_call("FontVariation", "get_variation_transform", 3814499831, Transform2D, main.p_object); return call_ret.*; }  // 9
set_opentype_features :: (main: *FontVariation, features: Dictionary) { sys_call("FontVariation", "set_opentype_features", 4155329257, Nil, main.p_object, features);  }  // 10
set_spacing :: (main: *FontVariation, spacing: TextServer.SpacingType, value: int) { sys_call("FontVariation", "set_spacing", 3122339690, Nil, main.p_object, spacing, value);  }  // 11
set_baseline_offset :: (main: *FontVariation, baseline_offset: float) { sys_call("FontVariation", "set_baseline_offset", 373806689, Nil, main.p_object, baseline_offset);  }  // 12
get_baseline_offset :: (main: *FontVariation) -> float { call_ret := cast(*float) sys_call("FontVariation", "get_baseline_offset", 1740695150, float, main.p_object); return call_ret.*; }  // 13

get_cache_multipass :: (main: *FramebufferCacheRD, textures: [] RID, passes: [] RDFramebufferPass, views: int) -> RID { call_ret := cast(*RID) sys_call("FramebufferCacheRD", "get_cache_multipass", 3437881813, RID, main.p_object, textures, passes, views); return call_ret.*; }  // 0

is_library_open :: (main: *GDExtension) -> bool { call_ret := cast(*bool) sys_call("GDExtension", "is_library_open", 36873697, bool, main.p_object); return call_ret.*; }  // 0
get_minimum_library_initialization_level :: (main: *GDExtension) -> GDExtension.InitializationLevel { call_ret := cast(*GDExtension.InitializationLevel) sys_call("GDExtension", "get_minimum_library_initialization_level", 964858755, GDExtension.InitializationLevel, main.p_object); return call_ret.*; }  // 1

load_extension :: (main: *GDExtensionManager, path: string) -> GDExtensionManager.LoadStatus { call_ret := cast(*GDExtensionManager.LoadStatus) sys_call("GDExtensionManager", "load_extension", 4024158731, GDExtensionManager.LoadStatus, main.p_object, path); return call_ret.*; }  // 0
reload_extension :: (main: *GDExtensionManager, path: string) -> GDExtensionManager.LoadStatus { call_ret := cast(*GDExtensionManager.LoadStatus) sys_call("GDExtensionManager", "reload_extension", 4024158731, GDExtensionManager.LoadStatus, main.p_object, path); return call_ret.*; }  // 1
unload_extension :: (main: *GDExtensionManager, path: string) -> GDExtensionManager.LoadStatus { call_ret := cast(*GDExtensionManager.LoadStatus) sys_call("GDExtensionManager", "unload_extension", 4024158731, GDExtensionManager.LoadStatus, main.p_object, path); return call_ret.*; }  // 2
is_extension_loaded :: (main: *GDExtensionManager, path: string) -> bool { call_ret := cast(*bool) sys_call("GDExtensionManager", "is_extension_loaded", 3927539163, bool, main.p_object, path); return call_ret.*; }  // 3
get_loaded_extensions :: (main: *GDExtensionManager) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("GDExtensionManager", "get_loaded_extensions", 1139954409, PackedStringArray, main.p_object); return call_ret.*; }  // 4
get_extension :: (main: *GDExtensionManager, path: string) -> *GDExtension { call_ret := cast(*GDExtension) sys_call("GDExtensionManager", "get_extension", 49743343, GDExtension, main.p_object, path); return call_ret; }  // 5

new :: (main: *GDScript) -> Variant { call_ret := cast(*Variant) sys_call("GDScript", "new", 1545262638, Variant, main.p_object); return call_ret.*; }  // 0


get_buffer_view :: (main: *GLTFAccessor) -> int { call_ret := cast(*int) sys_call("GLTFAccessor", "get_buffer_view", 2455072627, int, main.p_object); return call_ret.*; }  // 0
set_buffer_view :: (main: *GLTFAccessor, buffer_view: int) { sys_call("GLTFAccessor", "set_buffer_view", 1286410249, Nil, main.p_object, buffer_view);  }  // 1
get_byte_offset :: (main: *GLTFAccessor) -> int { call_ret := cast(*int) sys_call("GLTFAccessor", "get_byte_offset", 2455072627, int, main.p_object); return call_ret.*; }  // 2
set_byte_offset :: (main: *GLTFAccessor, byte_offset: int) { sys_call("GLTFAccessor", "set_byte_offset", 1286410249, Nil, main.p_object, byte_offset);  }  // 3
get_component_type :: (main: *GLTFAccessor) -> int { call_ret := cast(*int) sys_call("GLTFAccessor", "get_component_type", 2455072627, int, main.p_object); return call_ret.*; }  // 4
set_component_type :: (main: *GLTFAccessor, component_type: int) { sys_call("GLTFAccessor", "set_component_type", 1286410249, Nil, main.p_object, component_type);  }  // 5
get_normalized :: (main: *GLTFAccessor) -> bool { call_ret := cast(*bool) sys_call("GLTFAccessor", "get_normalized", 2240911060, bool, main.p_object); return call_ret.*; }  // 6
set_normalized :: (main: *GLTFAccessor, normalized: bool) { sys_call("GLTFAccessor", "set_normalized", 2586408642, Nil, main.p_object, normalized);  }  // 7
get_count :: (main: *GLTFAccessor) -> int { call_ret := cast(*int) sys_call("GLTFAccessor", "get_count", 2455072627, int, main.p_object); return call_ret.*; }  // 8
set_count :: (main: *GLTFAccessor, count: int) { sys_call("GLTFAccessor", "set_count", 1286410249, Nil, main.p_object, count);  }  // 9
get_accessor_type :: (main: *GLTFAccessor) -> GLTFAccessor.GLTFAccessorType { call_ret := cast(*GLTFAccessor.GLTFAccessorType) sys_call("GLTFAccessor", "get_accessor_type", 679305214, GLTFAccessor.GLTFAccessorType, main.p_object); return call_ret.*; }  // 10
set_accessor_type :: (main: *GLTFAccessor, accessor_type: GLTFAccessor.GLTFAccessorType) { sys_call("GLTFAccessor", "set_accessor_type", 2347728198, Nil, main.p_object, accessor_type);  }  // 11
get_type :: (main: *GLTFAccessor) -> int { call_ret := cast(*int) sys_call("GLTFAccessor", "get_type", 2455072627, int, main.p_object); return call_ret.*; }  // 12
set_type :: (main: *GLTFAccessor, type: int) { sys_call("GLTFAccessor", "set_type", 1286410249, Nil, main.p_object, type);  }  // 13
get_min :: (main: *GLTFAccessor) -> PackedFloat64Array { call_ret := cast(*PackedFloat64Array) sys_call("GLTFAccessor", "get_min", 148677866, PackedFloat64Array, main.p_object); return call_ret.*; }  // 14
set_min :: (main: *GLTFAccessor, min: PackedFloat64Array) { sys_call("GLTFAccessor", "set_min", 2576592201, Nil, main.p_object, min);  }  // 15
get_max :: (main: *GLTFAccessor) -> PackedFloat64Array { call_ret := cast(*PackedFloat64Array) sys_call("GLTFAccessor", "get_max", 148677866, PackedFloat64Array, main.p_object); return call_ret.*; }  // 16
set_max :: (main: *GLTFAccessor, max: PackedFloat64Array) { sys_call("GLTFAccessor", "set_max", 2576592201, Nil, main.p_object, max);  }  // 17
get_sparse_count :: (main: *GLTFAccessor) -> int { call_ret := cast(*int) sys_call("GLTFAccessor", "get_sparse_count", 2455072627, int, main.p_object); return call_ret.*; }  // 18
set_sparse_count :: (main: *GLTFAccessor, sparse_count: int) { sys_call("GLTFAccessor", "set_sparse_count", 1286410249, Nil, main.p_object, sparse_count);  }  // 19
get_sparse_indices_buffer_view :: (main: *GLTFAccessor) -> int { call_ret := cast(*int) sys_call("GLTFAccessor", "get_sparse_indices_buffer_view", 2455072627, int, main.p_object); return call_ret.*; }  // 20
set_sparse_indices_buffer_view :: (main: *GLTFAccessor, sparse_indices_buffer_view: int) { sys_call("GLTFAccessor", "set_sparse_indices_buffer_view", 1286410249, Nil, main.p_object, sparse_indices_buffer_view);  }  // 21
get_sparse_indices_byte_offset :: (main: *GLTFAccessor) -> int { call_ret := cast(*int) sys_call("GLTFAccessor", "get_sparse_indices_byte_offset", 2455072627, int, main.p_object); return call_ret.*; }  // 22
set_sparse_indices_byte_offset :: (main: *GLTFAccessor, sparse_indices_byte_offset: int) { sys_call("GLTFAccessor", "set_sparse_indices_byte_offset", 1286410249, Nil, main.p_object, sparse_indices_byte_offset);  }  // 23
get_sparse_indices_component_type :: (main: *GLTFAccessor) -> int { call_ret := cast(*int) sys_call("GLTFAccessor", "get_sparse_indices_component_type", 2455072627, int, main.p_object); return call_ret.*; }  // 24
set_sparse_indices_component_type :: (main: *GLTFAccessor, sparse_indices_component_type: int) { sys_call("GLTFAccessor", "set_sparse_indices_component_type", 1286410249, Nil, main.p_object, sparse_indices_component_type);  }  // 25
get_sparse_values_buffer_view :: (main: *GLTFAccessor) -> int { call_ret := cast(*int) sys_call("GLTFAccessor", "get_sparse_values_buffer_view", 2455072627, int, main.p_object); return call_ret.*; }  // 26
set_sparse_values_buffer_view :: (main: *GLTFAccessor, sparse_values_buffer_view: int) { sys_call("GLTFAccessor", "set_sparse_values_buffer_view", 1286410249, Nil, main.p_object, sparse_values_buffer_view);  }  // 27
get_sparse_values_byte_offset :: (main: *GLTFAccessor) -> int { call_ret := cast(*int) sys_call("GLTFAccessor", "get_sparse_values_byte_offset", 2455072627, int, main.p_object); return call_ret.*; }  // 28
set_sparse_values_byte_offset :: (main: *GLTFAccessor, sparse_values_byte_offset: int) { sys_call("GLTFAccessor", "set_sparse_values_byte_offset", 1286410249, Nil, main.p_object, sparse_values_byte_offset);  }  // 29

get_original_name :: (main: *GLTFAnimation) -> gstring { call_ret := cast(*gstring) sys_call("GLTFAnimation", "get_original_name", 2841200299, gstring, main.p_object); return call_ret.*; }  // 0
set_original_name :: (main: *GLTFAnimation, original_name: string) { sys_call("GLTFAnimation", "set_original_name", 83702148, Nil, main.p_object, original_name);  }  // 1
get_loop :: (main: *GLTFAnimation) -> bool { call_ret := cast(*bool) sys_call("GLTFAnimation", "get_loop", 36873697, bool, main.p_object); return call_ret.*; }  // 2
set_loop :: (main: *GLTFAnimation, loop: bool) { sys_call("GLTFAnimation", "set_loop", 2586408642, Nil, main.p_object, loop);  }  // 3
get_additional_data :: (main: *GLTFAnimation, extension_name: string) -> Variant { call_ret := cast(*Variant) sys_call("GLTFAnimation", "get_additional_data", 2138907829, Variant, main.p_object, extension_name); return call_ret.*; }  // 4
set_additional_data :: (main: *GLTFAnimation, extension_name: string, additional_data: Variant) { sys_call("GLTFAnimation", "set_additional_data", 3776071444, Nil, main.p_object, extension_name, additional_data);  }  // 5

load_buffer_view_data :: (main: *GLTFBufferView, state: GLTFState) -> PackedByteArray { call_ret := cast(*PackedByteArray) sys_call("GLTFBufferView", "load_buffer_view_data", 3945446907, PackedByteArray, main.p_object, state); return call_ret.*; }  // 0
get_buffer :: (main: *GLTFBufferView) -> int { call_ret := cast(*int) sys_call("GLTFBufferView", "get_buffer", 3905245786, int, main.p_object); return call_ret.*; }  // 1
set_buffer :: (main: *GLTFBufferView, buffer: int) { sys_call("GLTFBufferView", "set_buffer", 1286410249, Nil, main.p_object, buffer);  }  // 2
get_byte_offset :: (main: *GLTFBufferView) -> int { call_ret := cast(*int) sys_call("GLTFBufferView", "get_byte_offset", 3905245786, int, main.p_object); return call_ret.*; }  // 3
set_byte_offset :: (main: *GLTFBufferView, byte_offset: int) { sys_call("GLTFBufferView", "set_byte_offset", 1286410249, Nil, main.p_object, byte_offset);  }  // 4
get_byte_length :: (main: *GLTFBufferView) -> int { call_ret := cast(*int) sys_call("GLTFBufferView", "get_byte_length", 3905245786, int, main.p_object); return call_ret.*; }  // 5
set_byte_length :: (main: *GLTFBufferView, byte_length: int) { sys_call("GLTFBufferView", "set_byte_length", 1286410249, Nil, main.p_object, byte_length);  }  // 6
get_byte_stride :: (main: *GLTFBufferView) -> int { call_ret := cast(*int) sys_call("GLTFBufferView", "get_byte_stride", 3905245786, int, main.p_object); return call_ret.*; }  // 7
set_byte_stride :: (main: *GLTFBufferView, byte_stride: int) { sys_call("GLTFBufferView", "set_byte_stride", 1286410249, Nil, main.p_object, byte_stride);  }  // 8
get_indices :: (main: *GLTFBufferView) -> bool { call_ret := cast(*bool) sys_call("GLTFBufferView", "get_indices", 36873697, bool, main.p_object); return call_ret.*; }  // 9
set_indices :: (main: *GLTFBufferView, indices: bool) { sys_call("GLTFBufferView", "set_indices", 2586408642, Nil, main.p_object, indices);  }  // 10
get_vertex_attributes :: (main: *GLTFBufferView) -> bool { call_ret := cast(*bool) sys_call("GLTFBufferView", "get_vertex_attributes", 36873697, bool, main.p_object); return call_ret.*; }  // 11
set_vertex_attributes :: (main: *GLTFBufferView, is_attributes: bool) { sys_call("GLTFBufferView", "set_vertex_attributes", 2586408642, Nil, main.p_object, is_attributes);  }  // 12

from_node :: (main: *GLTFCamera, camera_node: Camera3D) -> *GLTFCamera { call_ret := cast(*GLTFCamera) sys_call("GLTFCamera", "from_node", 237784, GLTFCamera, main.p_object, camera_node); return call_ret; }  // 0
to_node :: (main: *GLTFCamera) -> *Camera3D { call_ret := cast(*Camera3D) sys_call("GLTFCamera", "to_node", 2285090890, Camera3D, main.p_object); return call_ret; }  // 1
from_dictionary :: (main: *GLTFCamera, dictionary: Dictionary) -> *GLTFCamera { call_ret := cast(*GLTFCamera) sys_call("GLTFCamera", "from_dictionary", 2495512509, GLTFCamera, main.p_object, dictionary); return call_ret; }  // 2
to_dictionary :: (main: *GLTFCamera) -> Dictionary { call_ret := cast(*Dictionary) sys_call("GLTFCamera", "to_dictionary", 3102165223, Dictionary, main.p_object); return call_ret.*; }  // 3
get_perspective :: (main: *GLTFCamera) -> bool { call_ret := cast(*bool) sys_call("GLTFCamera", "get_perspective", 36873697, bool, main.p_object); return call_ret.*; }  // 4
set_perspective :: (main: *GLTFCamera, perspective: bool) { sys_call("GLTFCamera", "set_perspective", 2586408642, Nil, main.p_object, perspective);  }  // 5
get_fov :: (main: *GLTFCamera) -> float { call_ret := cast(*float) sys_call("GLTFCamera", "get_fov", 1740695150, float, main.p_object); return call_ret.*; }  // 6
set_fov :: (main: *GLTFCamera, fov: float) { sys_call("GLTFCamera", "set_fov", 373806689, Nil, main.p_object, fov);  }  // 7
get_size_mag :: (main: *GLTFCamera) -> float { call_ret := cast(*float) sys_call("GLTFCamera", "get_size_mag", 1740695150, float, main.p_object); return call_ret.*; }  // 8
set_size_mag :: (main: *GLTFCamera, size_mag: float) { sys_call("GLTFCamera", "set_size_mag", 373806689, Nil, main.p_object, size_mag);  }  // 9
get_depth_far :: (main: *GLTFCamera) -> float { call_ret := cast(*float) sys_call("GLTFCamera", "get_depth_far", 1740695150, float, main.p_object); return call_ret.*; }  // 10
set_depth_far :: (main: *GLTFCamera, zdepth_far: float) { sys_call("GLTFCamera", "set_depth_far", 373806689, Nil, main.p_object, zdepth_far);  }  // 11
get_depth_near :: (main: *GLTFCamera) -> float { call_ret := cast(*float) sys_call("GLTFCamera", "get_depth_near", 1740695150, float, main.p_object); return call_ret.*; }  // 12
set_depth_near :: (main: *GLTFCamera, zdepth_near: float) { sys_call("GLTFCamera", "set_depth_near", 373806689, Nil, main.p_object, zdepth_near);  }  // 13

set_image_format :: (main: *GLTFDocument, image_format: string) { sys_call("GLTFDocument", "set_image_format", 83702148, Nil, main.p_object, image_format);  }  // 0
get_image_format :: (main: *GLTFDocument) -> gstring { call_ret := cast(*gstring) sys_call("GLTFDocument", "get_image_format", 201670096, gstring, main.p_object); return call_ret.*; }  // 1
set_lossy_quality :: (main: *GLTFDocument, lossy_quality: float) { sys_call("GLTFDocument", "set_lossy_quality", 373806689, Nil, main.p_object, lossy_quality);  }  // 2
get_lossy_quality :: (main: *GLTFDocument) -> float { call_ret := cast(*float) sys_call("GLTFDocument", "get_lossy_quality", 1740695150, float, main.p_object); return call_ret.*; }  // 3
set_root_node_mode :: (main: *GLTFDocument, root_node_mode: GLTFDocument.RootNodeMode) { sys_call("GLTFDocument", "set_root_node_mode", 463633402, Nil, main.p_object, root_node_mode);  }  // 4
get_root_node_mode :: (main: *GLTFDocument) -> GLTFDocument.RootNodeMode { call_ret := cast(*GLTFDocument.RootNodeMode) sys_call("GLTFDocument", "get_root_node_mode", 948057992, GLTFDocument.RootNodeMode, main.p_object); return call_ret.*; }  // 5
append_from_file :: (main: *GLTFDocument, path: string, state: GLTFState) -> Error { call_ret := cast(*Error) sys_call("GLTFDocument", "append_from_file", 866380864, Error, main.p_object, path, state); return call_ret.*; }  // 6
append_from_buffer :: (main: *GLTFDocument, bytes: PackedByteArray, base_path: string, state: GLTFState) -> Error { call_ret := cast(*Error) sys_call("GLTFDocument", "append_from_buffer", 1616081266, Error, main.p_object, bytes, base_path, state); return call_ret.*; }  // 7
append_from_scene :: (main: *GLTFDocument, node: Node, state: GLTFState) -> Error { call_ret := cast(*Error) sys_call("GLTFDocument", "append_from_scene", 1622574258, Error, main.p_object, node, state); return call_ret.*; }  // 8
generate_scene :: (main: *GLTFDocument, state: GLTFState) -> *Node { call_ret := cast(*Node) sys_call("GLTFDocument", "generate_scene", 596118388, Node, main.p_object, state); return call_ret; }  // 9
generate_buffer :: (main: *GLTFDocument, state: GLTFState) -> PackedByteArray { call_ret := cast(*PackedByteArray) sys_call("GLTFDocument", "generate_buffer", 741783455, PackedByteArray, main.p_object, state); return call_ret.*; }  // 10
write_to_filesystem :: (main: *GLTFDocument, state: GLTFState, path: string) -> Error { call_ret := cast(*Error) sys_call("GLTFDocument", "write_to_filesystem", 1784551478, Error, main.p_object, state, path); return call_ret.*; }  // 11
import_object_model_property :: (main: *GLTFDocument, state: GLTFState, json_pointer: string) -> *GLTFObjectModelProperty { call_ret := cast(*GLTFObjectModelProperty) sys_call("GLTFDocument", "import_object_model_property", 1206708632, GLTFObjectModelProperty, main.p_object, state, json_pointer); return call_ret; }  // 12
export_object_model_property :: (main: *GLTFDocument, state: GLTFState, node_path: string, godot_node: Node, gltf_node_index: int) -> *GLTFObjectModelProperty { call_ret := cast(*GLTFObjectModelProperty) sys_call("GLTFDocument", "export_object_model_property", 314209806, GLTFObjectModelProperty, main.p_object, state, node_path, godot_node, gltf_node_index); return call_ret; }  // 13
register_gltf_document_extension :: (main: *GLTFDocument, extension: GLTFDocumentExtension) { sys_call("GLTFDocument", "register_gltf_document_extension", 3752678331, Nil, main.p_object, extension);  }  // 14
unregister_gltf_document_extension :: (main: *GLTFDocument, extension: GLTFDocumentExtension) { sys_call("GLTFDocument", "unregister_gltf_document_extension", 2684415758, Nil, main.p_object, extension);  }  // 15
get_supported_gltf_extensions :: (main: *GLTFDocument) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("GLTFDocument", "get_supported_gltf_extensions", 2981934095, PackedStringArray, main.p_object); return call_ret.*; }  // 16



from_node :: (main: *GLTFLight, light_node: Light3D) -> *GLTFLight { call_ret := cast(*GLTFLight) sys_call("GLTFLight", "from_node", 3907677874, GLTFLight, main.p_object, light_node); return call_ret; }  // 0
to_node :: (main: *GLTFLight) -> *Light3D { call_ret := cast(*Light3D) sys_call("GLTFLight", "to_node", 2040811672, Light3D, main.p_object); return call_ret; }  // 1
from_dictionary :: (main: *GLTFLight, dictionary: Dictionary) -> *GLTFLight { call_ret := cast(*GLTFLight) sys_call("GLTFLight", "from_dictionary", 4057087208, GLTFLight, main.p_object, dictionary); return call_ret; }  // 2
to_dictionary :: (main: *GLTFLight) -> Dictionary { call_ret := cast(*Dictionary) sys_call("GLTFLight", "to_dictionary", 3102165223, Dictionary, main.p_object); return call_ret.*; }  // 3
get_color :: (main: *GLTFLight) -> Color { call_ret := cast(*Color) sys_call("GLTFLight", "get_color", 3200896285, Color, main.p_object); return call_ret.*; }  // 4
set_color :: (main: *GLTFLight, color: Color) { sys_call("GLTFLight", "set_color", 2920490490, Nil, main.p_object, color);  }  // 5
get_intensity :: (main: *GLTFLight) -> float { call_ret := cast(*float) sys_call("GLTFLight", "get_intensity", 191475506, float, main.p_object); return call_ret.*; }  // 6
set_intensity :: (main: *GLTFLight, intensity: float) { sys_call("GLTFLight", "set_intensity", 373806689, Nil, main.p_object, intensity);  }  // 7
get_light_type :: (main: *GLTFLight) -> gstring { call_ret := cast(*gstring) sys_call("GLTFLight", "get_light_type", 2841200299, gstring, main.p_object); return call_ret.*; }  // 8
set_light_type :: (main: *GLTFLight, light_type: string) { sys_call("GLTFLight", "set_light_type", 83702148, Nil, main.p_object, light_type);  }  // 9
get_range :: (main: *GLTFLight) -> float { call_ret := cast(*float) sys_call("GLTFLight", "get_range", 191475506, float, main.p_object); return call_ret.*; }  // 10
set_range :: (main: *GLTFLight, range: float) { sys_call("GLTFLight", "set_range", 373806689, Nil, main.p_object, range);  }  // 11
get_inner_cone_angle :: (main: *GLTFLight) -> float { call_ret := cast(*float) sys_call("GLTFLight", "get_inner_cone_angle", 191475506, float, main.p_object); return call_ret.*; }  // 12
set_inner_cone_angle :: (main: *GLTFLight, inner_cone_angle: float) { sys_call("GLTFLight", "set_inner_cone_angle", 373806689, Nil, main.p_object, inner_cone_angle);  }  // 13
get_outer_cone_angle :: (main: *GLTFLight) -> float { call_ret := cast(*float) sys_call("GLTFLight", "get_outer_cone_angle", 191475506, float, main.p_object); return call_ret.*; }  // 14
set_outer_cone_angle :: (main: *GLTFLight, outer_cone_angle: float) { sys_call("GLTFLight", "set_outer_cone_angle", 373806689, Nil, main.p_object, outer_cone_angle);  }  // 15
get_additional_data :: (main: *GLTFLight, extension_name: string) -> Variant { call_ret := cast(*Variant) sys_call("GLTFLight", "get_additional_data", 2138907829, Variant, main.p_object, extension_name); return call_ret.*; }  // 16
set_additional_data :: (main: *GLTFLight, extension_name: string, additional_data: Variant) { sys_call("GLTFLight", "set_additional_data", 3776071444, Nil, main.p_object, extension_name, additional_data);  }  // 17

get_original_name :: (main: *GLTFMesh) -> gstring { call_ret := cast(*gstring) sys_call("GLTFMesh", "get_original_name", 2841200299, gstring, main.p_object); return call_ret.*; }  // 0
set_original_name :: (main: *GLTFMesh, original_name: string) { sys_call("GLTFMesh", "set_original_name", 83702148, Nil, main.p_object, original_name);  }  // 1
get_mesh :: (main: *GLTFMesh) -> *ImporterMesh { call_ret := cast(*ImporterMesh) sys_call("GLTFMesh", "get_mesh", 3754628756, ImporterMesh, main.p_object); return call_ret; }  // 2
set_mesh :: (main: *GLTFMesh, mesh: ImporterMesh) { sys_call("GLTFMesh", "set_mesh", 2255166972, Nil, main.p_object, mesh);  }  // 3
get_blend_weights :: (main: *GLTFMesh) -> PackedFloat32Array { call_ret := cast(*PackedFloat32Array) sys_call("GLTFMesh", "get_blend_weights", 2445143706, PackedFloat32Array, main.p_object); return call_ret.*; }  // 4
set_blend_weights :: (main: *GLTFMesh, blend_weights: PackedFloat32Array) { sys_call("GLTFMesh", "set_blend_weights", 2899603908, Nil, main.p_object, blend_weights);  }  // 5
get_instance_materials :: (main: *GLTFMesh) -> [] Material { call_ret := cast(*[] Material) sys_call("GLTFMesh", "get_instance_materials", 2915620761, [] Material, main.p_object); return call_ret.*; }  // 6
set_instance_materials :: (main: *GLTFMesh, instance_materials: [] Material) { sys_call("GLTFMesh", "set_instance_materials", 381264803, Nil, main.p_object, instance_materials);  }  // 7
get_additional_data :: (main: *GLTFMesh, extension_name: string) -> Variant { call_ret := cast(*Variant) sys_call("GLTFMesh", "get_additional_data", 2138907829, Variant, main.p_object, extension_name); return call_ret.*; }  // 8
set_additional_data :: (main: *GLTFMesh, extension_name: string, additional_data: Variant) { sys_call("GLTFMesh", "set_additional_data", 3776071444, Nil, main.p_object, extension_name, additional_data);  }  // 9

get_original_name :: (main: *GLTFNode) -> gstring { call_ret := cast(*gstring) sys_call("GLTFNode", "get_original_name", 2841200299, gstring, main.p_object); return call_ret.*; }  // 0
set_original_name :: (main: *GLTFNode, original_name: string) { sys_call("GLTFNode", "set_original_name", 83702148, Nil, main.p_object, original_name);  }  // 1
get_parent :: (main: *GLTFNode) -> int { call_ret := cast(*int) sys_call("GLTFNode", "get_parent", 2455072627, int, main.p_object); return call_ret.*; }  // 2
set_parent :: (main: *GLTFNode, parent: int) { sys_call("GLTFNode", "set_parent", 1286410249, Nil, main.p_object, parent);  }  // 3
get_height :: (main: *GLTFNode) -> int { call_ret := cast(*int) sys_call("GLTFNode", "get_height", 2455072627, int, main.p_object); return call_ret.*; }  // 4
set_height :: (main: *GLTFNode, height: int) { sys_call("GLTFNode", "set_height", 1286410249, Nil, main.p_object, height);  }  // 5
get_xform :: (main: *GLTFNode) -> Transform3D { call_ret := cast(*Transform3D) sys_call("GLTFNode", "get_xform", 4183770049, Transform3D, main.p_object); return call_ret.*; }  // 6
set_xform :: (main: *GLTFNode, xform: Transform3D) { sys_call("GLTFNode", "set_xform", 2952846383, Nil, main.p_object, xform);  }  // 7
get_mesh :: (main: *GLTFNode) -> int { call_ret := cast(*int) sys_call("GLTFNode", "get_mesh", 2455072627, int, main.p_object); return call_ret.*; }  // 8
set_mesh :: (main: *GLTFNode, mesh: int) { sys_call("GLTFNode", "set_mesh", 1286410249, Nil, main.p_object, mesh);  }  // 9
get_camera :: (main: *GLTFNode) -> int { call_ret := cast(*int) sys_call("GLTFNode", "get_camera", 2455072627, int, main.p_object); return call_ret.*; }  // 10
set_camera :: (main: *GLTFNode, camera: int) { sys_call("GLTFNode", "set_camera", 1286410249, Nil, main.p_object, camera);  }  // 11
get_skin :: (main: *GLTFNode) -> int { call_ret := cast(*int) sys_call("GLTFNode", "get_skin", 2455072627, int, main.p_object); return call_ret.*; }  // 12
set_skin :: (main: *GLTFNode, skin: int) { sys_call("GLTFNode", "set_skin", 1286410249, Nil, main.p_object, skin);  }  // 13
get_skeleton :: (main: *GLTFNode) -> int { call_ret := cast(*int) sys_call("GLTFNode", "get_skeleton", 2455072627, int, main.p_object); return call_ret.*; }  // 14
set_skeleton :: (main: *GLTFNode, skeleton: int) { sys_call("GLTFNode", "set_skeleton", 1286410249, Nil, main.p_object, skeleton);  }  // 15
get_position :: (main: *GLTFNode) -> Vector3 { call_ret := cast(*Vector3) sys_call("GLTFNode", "get_position", 3783033775, Vector3, main.p_object); return call_ret.*; }  // 16
set_position :: (main: *GLTFNode, position: Vector3) { sys_call("GLTFNode", "set_position", 3460891852, Nil, main.p_object, position);  }  // 17
get_rotation :: (main: *GLTFNode) -> Quaternion { call_ret := cast(*Quaternion) sys_call("GLTFNode", "get_rotation", 2916281908, Quaternion, main.p_object); return call_ret.*; }  // 18
set_rotation :: (main: *GLTFNode, rotation: Quaternion) { sys_call("GLTFNode", "set_rotation", 1727505552, Nil, main.p_object, rotation);  }  // 19
get_scale :: (main: *GLTFNode) -> Vector3 { call_ret := cast(*Vector3) sys_call("GLTFNode", "get_scale", 3783033775, Vector3, main.p_object); return call_ret.*; }  // 20
set_scale :: (main: *GLTFNode, scale: Vector3) { sys_call("GLTFNode", "set_scale", 3460891852, Nil, main.p_object, scale);  }  // 21
get_children :: (main: *GLTFNode) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("GLTFNode", "get_children", 969006518, PackedInt32Array, main.p_object); return call_ret.*; }  // 22
set_children :: (main: *GLTFNode, children: PackedInt32Array) { sys_call("GLTFNode", "set_children", 3614634198, Nil, main.p_object, children);  }  // 23
append_child_index :: (main: *GLTFNode, child_index: int) { sys_call("GLTFNode", "append_child_index", 1286410249, Nil, main.p_object, child_index);  }  // 24
get_light :: (main: *GLTFNode) -> int { call_ret := cast(*int) sys_call("GLTFNode", "get_light", 2455072627, int, main.p_object); return call_ret.*; }  // 25
set_light :: (main: *GLTFNode, light: int) { sys_call("GLTFNode", "set_light", 1286410249, Nil, main.p_object, light);  }  // 26
get_additional_data :: (main: *GLTFNode, extension_name: string) -> Variant { call_ret := cast(*Variant) sys_call("GLTFNode", "get_additional_data", 2138907829, Variant, main.p_object, extension_name); return call_ret.*; }  // 27
set_additional_data :: (main: *GLTFNode, extension_name: string, additional_data: Variant) { sys_call("GLTFNode", "set_additional_data", 3776071444, Nil, main.p_object, extension_name, additional_data);  }  // 28
get_scene_node_path :: (main: *GLTFNode, gltf_state: GLTFState) -> NodePath { call_ret := cast(*NodePath) sys_call("GLTFNode", "get_scene_node_path", 573359477, NodePath, main.p_object, gltf_state); return call_ret.*; }  // 29

append_node_path :: (main: *GLTFObjectModelProperty, node_path: string) { sys_call("GLTFObjectModelProperty", "append_node_path", 1348162250, Nil, main.p_object, node_path);  }  // 0
append_path_to_property :: (main: *GLTFObjectModelProperty, node_path: string, prop_name: string) { sys_call("GLTFObjectModelProperty", "append_path_to_property", 1331931644, Nil, main.p_object, node_path, prop_name);  }  // 1
get_accessor_type :: (main: *GLTFObjectModelProperty) -> GLTFAccessor.GLTFAccessorType { call_ret := cast(*GLTFAccessor.GLTFAccessorType) sys_call("GLTFObjectModelProperty", "get_accessor_type", 1998183368, GLTFAccessor.GLTFAccessorType, main.p_object); return call_ret.*; }  // 2
get_gltf_to_godot_expression :: (main: *GLTFObjectModelProperty) -> *Expression { call_ret := cast(*Expression) sys_call("GLTFObjectModelProperty", "get_gltf_to_godot_expression", 2240072449, Expression, main.p_object); return call_ret; }  // 3
set_gltf_to_godot_expression :: (main: *GLTFObjectModelProperty, gltf_to_godot_expr: Expression) { sys_call("GLTFObjectModelProperty", "set_gltf_to_godot_expression", 1815845073, Nil, main.p_object, gltf_to_godot_expr);  }  // 4
get_godot_to_gltf_expression :: (main: *GLTFObjectModelProperty) -> *Expression { call_ret := cast(*Expression) sys_call("GLTFObjectModelProperty", "get_godot_to_gltf_expression", 2240072449, Expression, main.p_object); return call_ret; }  // 5
set_godot_to_gltf_expression :: (main: *GLTFObjectModelProperty, godot_to_gltf_expr: Expression) { sys_call("GLTFObjectModelProperty", "set_godot_to_gltf_expression", 1815845073, Nil, main.p_object, godot_to_gltf_expr);  }  // 6
get_node_paths :: (main: *GLTFObjectModelProperty) -> [] NodePath { call_ret := cast(*[] NodePath) sys_call("GLTFObjectModelProperty", "get_node_paths", 3995934104, [] NodePath, main.p_object); return call_ret.*; }  // 7
has_node_paths :: (main: *GLTFObjectModelProperty) -> bool { call_ret := cast(*bool) sys_call("GLTFObjectModelProperty", "has_node_paths", 36873697, bool, main.p_object); return call_ret.*; }  // 8
set_node_paths :: (main: *GLTFObjectModelProperty, node_paths: [] NodePath) { sys_call("GLTFObjectModelProperty", "set_node_paths", 381264803, Nil, main.p_object, node_paths);  }  // 9
get_object_model_type :: (main: *GLTFObjectModelProperty) -> GLTFObjectModelProperty.GLTFObjectModelType { call_ret := cast(*GLTFObjectModelProperty.GLTFObjectModelType) sys_call("GLTFObjectModelProperty", "get_object_model_type", 1094778507, GLTFObjectModelProperty.GLTFObjectModelType, main.p_object); return call_ret.*; }  // 10
set_object_model_type :: (main: *GLTFObjectModelProperty, type: GLTFObjectModelProperty.GLTFObjectModelType) { sys_call("GLTFObjectModelProperty", "set_object_model_type", 4108684086, Nil, main.p_object, type);  }  // 11
get_json_pointers :: (main: *GLTFObjectModelProperty) -> [] PackedStringArray { call_ret := cast(*[] PackedStringArray) sys_call("GLTFObjectModelProperty", "get_json_pointers", 3995934104, [] PackedStringArray, main.p_object); return call_ret.*; }  // 12
has_json_pointers :: (main: *GLTFObjectModelProperty) -> bool { call_ret := cast(*bool) sys_call("GLTFObjectModelProperty", "has_json_pointers", 36873697, bool, main.p_object); return call_ret.*; }  // 13
set_json_pointers :: (main: *GLTFObjectModelProperty, json_pointers: [] PackedStringArray) { sys_call("GLTFObjectModelProperty", "set_json_pointers", 381264803, Nil, main.p_object, json_pointers);  }  // 14
get_variant_type :: (main: *GLTFObjectModelProperty) -> Variant_Type { call_ret := cast(*Variant_Type) sys_call("GLTFObjectModelProperty", "get_variant_type", 3416842102, Variant_Type, main.p_object); return call_ret.*; }  // 15
set_variant_type :: (main: *GLTFObjectModelProperty, variant_type: Variant_Type) { sys_call("GLTFObjectModelProperty", "set_variant_type", 2887708385, Nil, main.p_object, variant_type);  }  // 16
set_types :: (main: *GLTFObjectModelProperty, variant_type: Variant_Type, obj_model_type: GLTFObjectModelProperty.GLTFObjectModelType) { sys_call("GLTFObjectModelProperty", "set_types", 4150728237, Nil, main.p_object, variant_type, obj_model_type);  }  // 17

from_node :: (main: *GLTFPhysicsBody, body_node: CollisionObject3D) -> *GLTFPhysicsBody { call_ret := cast(*GLTFPhysicsBody) sys_call("GLTFPhysicsBody", "from_node", 420544174, GLTFPhysicsBody, main.p_object, body_node); return call_ret; }  // 0
to_node :: (main: *GLTFPhysicsBody) -> *CollisionObject3D { call_ret := cast(*CollisionObject3D) sys_call("GLTFPhysicsBody", "to_node", 3224013656, CollisionObject3D, main.p_object); return call_ret; }  // 1
from_dictionary :: (main: *GLTFPhysicsBody, dictionary: Dictionary) -> *GLTFPhysicsBody { call_ret := cast(*GLTFPhysicsBody) sys_call("GLTFPhysicsBody", "from_dictionary", 1177544336, GLTFPhysicsBody, main.p_object, dictionary); return call_ret; }  // 2
to_dictionary :: (main: *GLTFPhysicsBody) -> Dictionary { call_ret := cast(*Dictionary) sys_call("GLTFPhysicsBody", "to_dictionary", 3102165223, Dictionary, main.p_object); return call_ret.*; }  // 3
get_body_type :: (main: *GLTFPhysicsBody) -> gstring { call_ret := cast(*gstring) sys_call("GLTFPhysicsBody", "get_body_type", 201670096, gstring, main.p_object); return call_ret.*; }  // 4
set_body_type :: (main: *GLTFPhysicsBody, body_type: string) { sys_call("GLTFPhysicsBody", "set_body_type", 83702148, Nil, main.p_object, body_type);  }  // 5
get_mass :: (main: *GLTFPhysicsBody) -> float { call_ret := cast(*float) sys_call("GLTFPhysicsBody", "get_mass", 1740695150, float, main.p_object); return call_ret.*; }  // 6
set_mass :: (main: *GLTFPhysicsBody, mass: float) { sys_call("GLTFPhysicsBody", "set_mass", 373806689, Nil, main.p_object, mass);  }  // 7
get_linear_velocity :: (main: *GLTFPhysicsBody) -> Vector3 { call_ret := cast(*Vector3) sys_call("GLTFPhysicsBody", "get_linear_velocity", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 8
set_linear_velocity :: (main: *GLTFPhysicsBody, linear_velocity: Vector3) { sys_call("GLTFPhysicsBody", "set_linear_velocity", 3460891852, Nil, main.p_object, linear_velocity);  }  // 9
get_angular_velocity :: (main: *GLTFPhysicsBody) -> Vector3 { call_ret := cast(*Vector3) sys_call("GLTFPhysicsBody", "get_angular_velocity", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 10
set_angular_velocity :: (main: *GLTFPhysicsBody, angular_velocity: Vector3) { sys_call("GLTFPhysicsBody", "set_angular_velocity", 3460891852, Nil, main.p_object, angular_velocity);  }  // 11
get_center_of_mass :: (main: *GLTFPhysicsBody) -> Vector3 { call_ret := cast(*Vector3) sys_call("GLTFPhysicsBody", "get_center_of_mass", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 12
set_center_of_mass :: (main: *GLTFPhysicsBody, center_of_mass: Vector3) { sys_call("GLTFPhysicsBody", "set_center_of_mass", 3460891852, Nil, main.p_object, center_of_mass);  }  // 13
get_inertia_diagonal :: (main: *GLTFPhysicsBody) -> Vector3 { call_ret := cast(*Vector3) sys_call("GLTFPhysicsBody", "get_inertia_diagonal", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 14
set_inertia_diagonal :: (main: *GLTFPhysicsBody, inertia_diagonal: Vector3) { sys_call("GLTFPhysicsBody", "set_inertia_diagonal", 3460891852, Nil, main.p_object, inertia_diagonal);  }  // 15
get_inertia_orientation :: (main: *GLTFPhysicsBody) -> Quaternion { call_ret := cast(*Quaternion) sys_call("GLTFPhysicsBody", "get_inertia_orientation", 1222331677, Quaternion, main.p_object); return call_ret.*; }  // 16
set_inertia_orientation :: (main: *GLTFPhysicsBody, inertia_orientation: Quaternion) { sys_call("GLTFPhysicsBody", "set_inertia_orientation", 1727505552, Nil, main.p_object, inertia_orientation);  }  // 17
get_inertia_tensor :: (main: *GLTFPhysicsBody) -> Basis { call_ret := cast(*Basis) sys_call("GLTFPhysicsBody", "get_inertia_tensor", 2716978435, Basis, main.p_object); return call_ret.*; }  // 18
set_inertia_tensor :: (main: *GLTFPhysicsBody, inertia_tensor: Basis) { sys_call("GLTFPhysicsBody", "set_inertia_tensor", 1055510324, Nil, main.p_object, inertia_tensor);  }  // 19

from_node :: (main: *GLTFPhysicsShape, shape_node: CollisionShape3D) -> *GLTFPhysicsShape { call_ret := cast(*GLTFPhysicsShape) sys_call("GLTFPhysicsShape", "from_node", 3613751275, GLTFPhysicsShape, main.p_object, shape_node); return call_ret; }  // 0
to_node :: (main: *GLTFPhysicsShape) -> *CollisionShape3D { call_ret := cast(*CollisionShape3D) sys_call("GLTFPhysicsShape", "to_node", 563689933, CollisionShape3D, main.p_object); return call_ret; }  // 1
from_resource :: (main: *GLTFPhysicsShape, shape_resource: Shape3D) -> *GLTFPhysicsShape { call_ret := cast(*GLTFPhysicsShape) sys_call("GLTFPhysicsShape", "from_resource", 3845569786, GLTFPhysicsShape, main.p_object, shape_resource); return call_ret; }  // 2
to_resource :: (main: *GLTFPhysicsShape) -> *Shape3D { call_ret := cast(*Shape3D) sys_call("GLTFPhysicsShape", "to_resource", 1913542110, Shape3D, main.p_object); return call_ret; }  // 3
from_dictionary :: (main: *GLTFPhysicsShape, dictionary: Dictionary) -> *GLTFPhysicsShape { call_ret := cast(*GLTFPhysicsShape) sys_call("GLTFPhysicsShape", "from_dictionary", 2390691823, GLTFPhysicsShape, main.p_object, dictionary); return call_ret; }  // 4
to_dictionary :: (main: *GLTFPhysicsShape) -> Dictionary { call_ret := cast(*Dictionary) sys_call("GLTFPhysicsShape", "to_dictionary", 3102165223, Dictionary, main.p_object); return call_ret.*; }  // 5
get_shape_type :: (main: *GLTFPhysicsShape) -> gstring { call_ret := cast(*gstring) sys_call("GLTFPhysicsShape", "get_shape_type", 201670096, gstring, main.p_object); return call_ret.*; }  // 6
set_shape_type :: (main: *GLTFPhysicsShape, shape_type: string) { sys_call("GLTFPhysicsShape", "set_shape_type", 83702148, Nil, main.p_object, shape_type);  }  // 7
get_size :: (main: *GLTFPhysicsShape) -> Vector3 { call_ret := cast(*Vector3) sys_call("GLTFPhysicsShape", "get_size", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 8
set_size :: (main: *GLTFPhysicsShape, size: Vector3) { sys_call("GLTFPhysicsShape", "set_size", 3460891852, Nil, main.p_object, size);  }  // 9
get_radius :: (main: *GLTFPhysicsShape) -> float { call_ret := cast(*float) sys_call("GLTFPhysicsShape", "get_radius", 1740695150, float, main.p_object); return call_ret.*; }  // 10
set_radius :: (main: *GLTFPhysicsShape, radius: float) { sys_call("GLTFPhysicsShape", "set_radius", 373806689, Nil, main.p_object, radius);  }  // 11
get_height :: (main: *GLTFPhysicsShape) -> float { call_ret := cast(*float) sys_call("GLTFPhysicsShape", "get_height", 1740695150, float, main.p_object); return call_ret.*; }  // 12
set_height :: (main: *GLTFPhysicsShape, height: float) { sys_call("GLTFPhysicsShape", "set_height", 373806689, Nil, main.p_object, height);  }  // 13
get_is_trigger :: (main: *GLTFPhysicsShape) -> bool { call_ret := cast(*bool) sys_call("GLTFPhysicsShape", "get_is_trigger", 36873697, bool, main.p_object); return call_ret.*; }  // 14
set_is_trigger :: (main: *GLTFPhysicsShape, is_trigger: bool) { sys_call("GLTFPhysicsShape", "set_is_trigger", 2586408642, Nil, main.p_object, is_trigger);  }  // 15
get_mesh_index :: (main: *GLTFPhysicsShape) -> int { call_ret := cast(*int) sys_call("GLTFPhysicsShape", "get_mesh_index", 3905245786, int, main.p_object); return call_ret.*; }  // 16
set_mesh_index :: (main: *GLTFPhysicsShape, mesh_index: int) { sys_call("GLTFPhysicsShape", "set_mesh_index", 1286410249, Nil, main.p_object, mesh_index);  }  // 17
get_importer_mesh :: (main: *GLTFPhysicsShape) -> *ImporterMesh { call_ret := cast(*ImporterMesh) sys_call("GLTFPhysicsShape", "get_importer_mesh", 3161779525, ImporterMesh, main.p_object); return call_ret; }  // 18
set_importer_mesh :: (main: *GLTFPhysicsShape, importer_mesh: ImporterMesh) { sys_call("GLTFPhysicsShape", "set_importer_mesh", 2255166972, Nil, main.p_object, importer_mesh);  }  // 19

get_joints :: (main: *GLTFSkeleton) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("GLTFSkeleton", "get_joints", 969006518, PackedInt32Array, main.p_object); return call_ret.*; }  // 0
set_joints :: (main: *GLTFSkeleton, joints: PackedInt32Array) { sys_call("GLTFSkeleton", "set_joints", 3614634198, Nil, main.p_object, joints);  }  // 1
get_roots :: (main: *GLTFSkeleton) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("GLTFSkeleton", "get_roots", 969006518, PackedInt32Array, main.p_object); return call_ret.*; }  // 2
set_roots :: (main: *GLTFSkeleton, roots: PackedInt32Array) { sys_call("GLTFSkeleton", "set_roots", 3614634198, Nil, main.p_object, roots);  }  // 3
get_godot_skeleton :: (main: *GLTFSkeleton) -> *Skeleton3D { call_ret := cast(*Skeleton3D) sys_call("GLTFSkeleton", "get_godot_skeleton", 1814733083, Skeleton3D, main.p_object); return call_ret; }  // 4
get_unique_names :: (main: *GLTFSkeleton) -> [] gstring { call_ret := cast(*[] gstring) sys_call("GLTFSkeleton", "get_unique_names", 2915620761, [] gstring, main.p_object); return call_ret.*; }  // 5
set_unique_names :: (main: *GLTFSkeleton, unique_names: [] string) { sys_call("GLTFSkeleton", "set_unique_names", 381264803, Nil, main.p_object, unique_names);  }  // 6
get_godot_bone_node :: (main: *GLTFSkeleton) -> Dictionary { call_ret := cast(*Dictionary) sys_call("GLTFSkeleton", "get_godot_bone_node", 2382534195, Dictionary, main.p_object); return call_ret.*; }  // 7
set_godot_bone_node :: (main: *GLTFSkeleton, godot_bone_node: Dictionary) { sys_call("GLTFSkeleton", "set_godot_bone_node", 4155329257, Nil, main.p_object, godot_bone_node);  }  // 8
get_bone_attachment_count :: (main: *GLTFSkeleton) -> int { call_ret := cast(*int) sys_call("GLTFSkeleton", "get_bone_attachment_count", 2455072627, int, main.p_object); return call_ret.*; }  // 9
get_bone_attachment :: (main: *GLTFSkeleton, idx: int) -> *BoneAttachment3D { call_ret := cast(*BoneAttachment3D) sys_call("GLTFSkeleton", "get_bone_attachment", 945440495, BoneAttachment3D, main.p_object, idx); return call_ret; }  // 10

get_skin_root :: (main: *GLTFSkin) -> int { call_ret := cast(*int) sys_call("GLTFSkin", "get_skin_root", 2455072627, int, main.p_object); return call_ret.*; }  // 0
set_skin_root :: (main: *GLTFSkin, skin_root: int) { sys_call("GLTFSkin", "set_skin_root", 1286410249, Nil, main.p_object, skin_root);  }  // 1
get_joints_original :: (main: *GLTFSkin) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("GLTFSkin", "get_joints_original", 969006518, PackedInt32Array, main.p_object); return call_ret.*; }  // 2
set_joints_original :: (main: *GLTFSkin, joints_original: PackedInt32Array) { sys_call("GLTFSkin", "set_joints_original", 3614634198, Nil, main.p_object, joints_original);  }  // 3
get_inverse_binds :: (main: *GLTFSkin) -> [] Transform3D { call_ret := cast(*[] Transform3D) sys_call("GLTFSkin", "get_inverse_binds", 2915620761, [] Transform3D, main.p_object); return call_ret.*; }  // 4
set_inverse_binds :: (main: *GLTFSkin, inverse_binds: [] Transform3D) { sys_call("GLTFSkin", "set_inverse_binds", 381264803, Nil, main.p_object, inverse_binds);  }  // 5
get_joints :: (main: *GLTFSkin) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("GLTFSkin", "get_joints", 969006518, PackedInt32Array, main.p_object); return call_ret.*; }  // 6
set_joints :: (main: *GLTFSkin, joints: PackedInt32Array) { sys_call("GLTFSkin", "set_joints", 3614634198, Nil, main.p_object, joints);  }  // 7
get_non_joints :: (main: *GLTFSkin) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("GLTFSkin", "get_non_joints", 969006518, PackedInt32Array, main.p_object); return call_ret.*; }  // 8
set_non_joints :: (main: *GLTFSkin, non_joints: PackedInt32Array) { sys_call("GLTFSkin", "set_non_joints", 3614634198, Nil, main.p_object, non_joints);  }  // 9
get_roots :: (main: *GLTFSkin) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("GLTFSkin", "get_roots", 969006518, PackedInt32Array, main.p_object); return call_ret.*; }  // 10
set_roots :: (main: *GLTFSkin, roots: PackedInt32Array) { sys_call("GLTFSkin", "set_roots", 3614634198, Nil, main.p_object, roots);  }  // 11
get_skeleton :: (main: *GLTFSkin) -> int { call_ret := cast(*int) sys_call("GLTFSkin", "get_skeleton", 2455072627, int, main.p_object); return call_ret.*; }  // 12
set_skeleton :: (main: *GLTFSkin, skeleton: int) { sys_call("GLTFSkin", "set_skeleton", 1286410249, Nil, main.p_object, skeleton);  }  // 13
get_joint_i_to_bone_i :: (main: *GLTFSkin) -> Dictionary { call_ret := cast(*Dictionary) sys_call("GLTFSkin", "get_joint_i_to_bone_i", 2382534195, Dictionary, main.p_object); return call_ret.*; }  // 14
set_joint_i_to_bone_i :: (main: *GLTFSkin, joint_i_to_bone_i: Dictionary) { sys_call("GLTFSkin", "set_joint_i_to_bone_i", 4155329257, Nil, main.p_object, joint_i_to_bone_i);  }  // 15
get_joint_i_to_name :: (main: *GLTFSkin) -> Dictionary { call_ret := cast(*Dictionary) sys_call("GLTFSkin", "get_joint_i_to_name", 2382534195, Dictionary, main.p_object); return call_ret.*; }  // 16
set_joint_i_to_name :: (main: *GLTFSkin, joint_i_to_name: Dictionary) { sys_call("GLTFSkin", "set_joint_i_to_name", 4155329257, Nil, main.p_object, joint_i_to_name);  }  // 17
get_godot_skin :: (main: *GLTFSkin) -> *Skin { call_ret := cast(*Skin) sys_call("GLTFSkin", "get_godot_skin", 1032037385, Skin, main.p_object); return call_ret; }  // 18
set_godot_skin :: (main: *GLTFSkin, godot_skin: Skin) { sys_call("GLTFSkin", "set_godot_skin", 3971435618, Nil, main.p_object, godot_skin);  }  // 19

get_diffuse_img :: (main: *GLTFSpecGloss) -> *Image { call_ret := cast(*Image) sys_call("GLTFSpecGloss", "get_diffuse_img", 564927088, Image, main.p_object); return call_ret; }  // 0
set_diffuse_img :: (main: *GLTFSpecGloss, diffuse_img: Image) { sys_call("GLTFSpecGloss", "set_diffuse_img", 532598488, Nil, main.p_object, diffuse_img);  }  // 1
get_diffuse_factor :: (main: *GLTFSpecGloss) -> Color { call_ret := cast(*Color) sys_call("GLTFSpecGloss", "get_diffuse_factor", 3200896285, Color, main.p_object); return call_ret.*; }  // 2
set_diffuse_factor :: (main: *GLTFSpecGloss, diffuse_factor: Color) { sys_call("GLTFSpecGloss", "set_diffuse_factor", 2920490490, Nil, main.p_object, diffuse_factor);  }  // 3
get_gloss_factor :: (main: *GLTFSpecGloss) -> float { call_ret := cast(*float) sys_call("GLTFSpecGloss", "get_gloss_factor", 191475506, float, main.p_object); return call_ret.*; }  // 4
set_gloss_factor :: (main: *GLTFSpecGloss, gloss_factor: float) { sys_call("GLTFSpecGloss", "set_gloss_factor", 373806689, Nil, main.p_object, gloss_factor);  }  // 5
get_specular_factor :: (main: *GLTFSpecGloss) -> Color { call_ret := cast(*Color) sys_call("GLTFSpecGloss", "get_specular_factor", 3200896285, Color, main.p_object); return call_ret.*; }  // 6
set_specular_factor :: (main: *GLTFSpecGloss, specular_factor: Color) { sys_call("GLTFSpecGloss", "set_specular_factor", 2920490490, Nil, main.p_object, specular_factor);  }  // 7
get_spec_gloss_img :: (main: *GLTFSpecGloss) -> *Image { call_ret := cast(*Image) sys_call("GLTFSpecGloss", "get_spec_gloss_img", 564927088, Image, main.p_object); return call_ret; }  // 8
set_spec_gloss_img :: (main: *GLTFSpecGloss, spec_gloss_img: Image) { sys_call("GLTFSpecGloss", "set_spec_gloss_img", 532598488, Nil, main.p_object, spec_gloss_img);  }  // 9

add_used_extension :: (main: *GLTFState, extension_name: string, required: bool) { sys_call("GLTFState", "add_used_extension", 2678287736, Nil, main.p_object, extension_name, required);  }  // 0
append_data_to_buffers :: (main: *GLTFState, data: PackedByteArray, deduplication: bool) -> int { call_ret := cast(*int) sys_call("GLTFState", "append_data_to_buffers", 1460416665, int, main.p_object, data, deduplication); return call_ret.*; }  // 1
append_gltf_node :: (main: *GLTFState, gltf_node: GLTFNode, godot_scene_node: Node, parent_node_index: int) -> int { call_ret := cast(*int) sys_call("GLTFState", "append_gltf_node", 3562288551, int, main.p_object, gltf_node, godot_scene_node, parent_node_index); return call_ret.*; }  // 2
get_json :: (main: *GLTFState) -> Dictionary { call_ret := cast(*Dictionary) sys_call("GLTFState", "get_json", 2382534195, Dictionary, main.p_object); return call_ret.*; }  // 3
set_json :: (main: *GLTFState, json: Dictionary) { sys_call("GLTFState", "set_json", 4155329257, Nil, main.p_object, json);  }  // 4
get_major_version :: (main: *GLTFState) -> int { call_ret := cast(*int) sys_call("GLTFState", "get_major_version", 2455072627, int, main.p_object); return call_ret.*; }  // 5
set_major_version :: (main: *GLTFState, major_version: int) { sys_call("GLTFState", "set_major_version", 1286410249, Nil, main.p_object, major_version);  }  // 6
get_minor_version :: (main: *GLTFState) -> int { call_ret := cast(*int) sys_call("GLTFState", "get_minor_version", 2455072627, int, main.p_object); return call_ret.*; }  // 7
set_minor_version :: (main: *GLTFState, minor_version: int) { sys_call("GLTFState", "set_minor_version", 1286410249, Nil, main.p_object, minor_version);  }  // 8
get_copyright :: (main: *GLTFState) -> gstring { call_ret := cast(*gstring) sys_call("GLTFState", "get_copyright", 201670096, gstring, main.p_object); return call_ret.*; }  // 9
set_copyright :: (main: *GLTFState, copyright: string) { sys_call("GLTFState", "set_copyright", 83702148, Nil, main.p_object, copyright);  }  // 10
get_glb_data :: (main: *GLTFState) -> PackedByteArray { call_ret := cast(*PackedByteArray) sys_call("GLTFState", "get_glb_data", 2115431945, PackedByteArray, main.p_object); return call_ret.*; }  // 11
set_glb_data :: (main: *GLTFState, glb_data: PackedByteArray) { sys_call("GLTFState", "set_glb_data", 2971499966, Nil, main.p_object, glb_data);  }  // 12
get_use_named_skin_binds :: (main: *GLTFState) -> bool { call_ret := cast(*bool) sys_call("GLTFState", "get_use_named_skin_binds", 2240911060, bool, main.p_object); return call_ret.*; }  // 13
set_use_named_skin_binds :: (main: *GLTFState, use_named_skin_binds: bool) { sys_call("GLTFState", "set_use_named_skin_binds", 2586408642, Nil, main.p_object, use_named_skin_binds);  }  // 14
get_nodes :: (main: *GLTFState) -> [] GLTFNode { call_ret := cast(*[] GLTFNode) sys_call("GLTFState", "get_nodes", 2915620761, [] GLTFNode, main.p_object); return call_ret.*; }  // 15
set_nodes :: (main: *GLTFState, nodes: [] GLTFNode) { sys_call("GLTFState", "set_nodes", 381264803, Nil, main.p_object, nodes);  }  // 16
get_buffers :: (main: *GLTFState) -> [] PackedByteArray { call_ret := cast(*[] PackedByteArray) sys_call("GLTFState", "get_buffers", 2915620761, [] PackedByteArray, main.p_object); return call_ret.*; }  // 17
set_buffers :: (main: *GLTFState, buffers: [] PackedByteArray) { sys_call("GLTFState", "set_buffers", 381264803, Nil, main.p_object, buffers);  }  // 18
get_buffer_views :: (main: *GLTFState) -> [] GLTFBufferView { call_ret := cast(*[] GLTFBufferView) sys_call("GLTFState", "get_buffer_views", 2915620761, [] GLTFBufferView, main.p_object); return call_ret.*; }  // 19
set_buffer_views :: (main: *GLTFState, buffer_views: [] GLTFBufferView) { sys_call("GLTFState", "set_buffer_views", 381264803, Nil, main.p_object, buffer_views);  }  // 20
get_accessors :: (main: *GLTFState) -> [] GLTFAccessor { call_ret := cast(*[] GLTFAccessor) sys_call("GLTFState", "get_accessors", 2915620761, [] GLTFAccessor, main.p_object); return call_ret.*; }  // 21
set_accessors :: (main: *GLTFState, accessors: [] GLTFAccessor) { sys_call("GLTFState", "set_accessors", 381264803, Nil, main.p_object, accessors);  }  // 22
get_meshes :: (main: *GLTFState) -> [] GLTFMesh { call_ret := cast(*[] GLTFMesh) sys_call("GLTFState", "get_meshes", 2915620761, [] GLTFMesh, main.p_object); return call_ret.*; }  // 23
set_meshes :: (main: *GLTFState, meshes: [] GLTFMesh) { sys_call("GLTFState", "set_meshes", 381264803, Nil, main.p_object, meshes);  }  // 24
get_animation_players_count :: (main: *GLTFState, idx: int) -> int { call_ret := cast(*int) sys_call("GLTFState", "get_animation_players_count", 3744713108, int, main.p_object, idx); return call_ret.*; }  // 25
get_animation_player :: (main: *GLTFState, idx: int) -> *AnimationPlayer { call_ret := cast(*AnimationPlayer) sys_call("GLTFState", "get_animation_player", 925043400, AnimationPlayer, main.p_object, idx); return call_ret; }  // 26
get_materials :: (main: *GLTFState) -> [] Material { call_ret := cast(*[] Material) sys_call("GLTFState", "get_materials", 2915620761, [] Material, main.p_object); return call_ret.*; }  // 27
set_materials :: (main: *GLTFState, materials: [] Material) { sys_call("GLTFState", "set_materials", 381264803, Nil, main.p_object, materials);  }  // 28
get_scene_name :: (main: *GLTFState) -> gstring { call_ret := cast(*gstring) sys_call("GLTFState", "get_scene_name", 2841200299, gstring, main.p_object); return call_ret.*; }  // 29
set_scene_name :: (main: *GLTFState, scene_name: string) { sys_call("GLTFState", "set_scene_name", 83702148, Nil, main.p_object, scene_name);  }  // 30
get_base_path :: (main: *GLTFState) -> gstring { call_ret := cast(*gstring) sys_call("GLTFState", "get_base_path", 2841200299, gstring, main.p_object); return call_ret.*; }  // 31
set_base_path :: (main: *GLTFState, base_path: string) { sys_call("GLTFState", "set_base_path", 83702148, Nil, main.p_object, base_path);  }  // 32
get_filename :: (main: *GLTFState) -> gstring { call_ret := cast(*gstring) sys_call("GLTFState", "get_filename", 201670096, gstring, main.p_object); return call_ret.*; }  // 33
set_filename :: (main: *GLTFState, filename: string) { sys_call("GLTFState", "set_filename", 83702148, Nil, main.p_object, filename);  }  // 34
get_root_nodes :: (main: *GLTFState) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("GLTFState", "get_root_nodes", 969006518, PackedInt32Array, main.p_object); return call_ret.*; }  // 35
set_root_nodes :: (main: *GLTFState, root_nodes: PackedInt32Array) { sys_call("GLTFState", "set_root_nodes", 3614634198, Nil, main.p_object, root_nodes);  }  // 36
get_textures :: (main: *GLTFState) -> [] GLTFTexture { call_ret := cast(*[] GLTFTexture) sys_call("GLTFState", "get_textures", 2915620761, [] GLTFTexture, main.p_object); return call_ret.*; }  // 37
set_textures :: (main: *GLTFState, textures: [] GLTFTexture) { sys_call("GLTFState", "set_textures", 381264803, Nil, main.p_object, textures);  }  // 38
get_texture_samplers :: (main: *GLTFState) -> [] GLTFTextureSampler { call_ret := cast(*[] GLTFTextureSampler) sys_call("GLTFState", "get_texture_samplers", 2915620761, [] GLTFTextureSampler, main.p_object); return call_ret.*; }  // 39
set_texture_samplers :: (main: *GLTFState, texture_samplers: [] GLTFTextureSampler) { sys_call("GLTFState", "set_texture_samplers", 381264803, Nil, main.p_object, texture_samplers);  }  // 40
get_images :: (main: *GLTFState) -> [] Texture2D { call_ret := cast(*[] Texture2D) sys_call("GLTFState", "get_images", 2915620761, [] Texture2D, main.p_object); return call_ret.*; }  // 41
set_images :: (main: *GLTFState, images: [] Texture2D) { sys_call("GLTFState", "set_images", 381264803, Nil, main.p_object, images);  }  // 42
get_skins :: (main: *GLTFState) -> [] GLTFSkin { call_ret := cast(*[] GLTFSkin) sys_call("GLTFState", "get_skins", 2915620761, [] GLTFSkin, main.p_object); return call_ret.*; }  // 43
set_skins :: (main: *GLTFState, skins: [] GLTFSkin) { sys_call("GLTFState", "set_skins", 381264803, Nil, main.p_object, skins);  }  // 44
get_cameras :: (main: *GLTFState) -> [] GLTFCamera { call_ret := cast(*[] GLTFCamera) sys_call("GLTFState", "get_cameras", 2915620761, [] GLTFCamera, main.p_object); return call_ret.*; }  // 45
set_cameras :: (main: *GLTFState, cameras: [] GLTFCamera) { sys_call("GLTFState", "set_cameras", 381264803, Nil, main.p_object, cameras);  }  // 46
get_lights :: (main: *GLTFState) -> [] GLTFLight { call_ret := cast(*[] GLTFLight) sys_call("GLTFState", "get_lights", 2915620761, [] GLTFLight, main.p_object); return call_ret.*; }  // 47
set_lights :: (main: *GLTFState, lights: [] GLTFLight) { sys_call("GLTFState", "set_lights", 381264803, Nil, main.p_object, lights);  }  // 48
get_unique_names :: (main: *GLTFState) -> [] gstring { call_ret := cast(*[] gstring) sys_call("GLTFState", "get_unique_names", 2915620761, [] gstring, main.p_object); return call_ret.*; }  // 49
set_unique_names :: (main: *GLTFState, unique_names: [] string) { sys_call("GLTFState", "set_unique_names", 381264803, Nil, main.p_object, unique_names);  }  // 50
get_unique_animation_names :: (main: *GLTFState) -> [] gstring { call_ret := cast(*[] gstring) sys_call("GLTFState", "get_unique_animation_names", 2915620761, [] gstring, main.p_object); return call_ret.*; }  // 51
set_unique_animation_names :: (main: *GLTFState, unique_animation_names: [] string) { sys_call("GLTFState", "set_unique_animation_names", 381264803, Nil, main.p_object, unique_animation_names);  }  // 52
get_skeletons :: (main: *GLTFState) -> [] GLTFSkeleton { call_ret := cast(*[] GLTFSkeleton) sys_call("GLTFState", "get_skeletons", 2915620761, [] GLTFSkeleton, main.p_object); return call_ret.*; }  // 53
set_skeletons :: (main: *GLTFState, skeletons: [] GLTFSkeleton) { sys_call("GLTFState", "set_skeletons", 381264803, Nil, main.p_object, skeletons);  }  // 54
get_create_animations :: (main: *GLTFState) -> bool { call_ret := cast(*bool) sys_call("GLTFState", "get_create_animations", 2240911060, bool, main.p_object); return call_ret.*; }  // 55
set_create_animations :: (main: *GLTFState, create_animations: bool) { sys_call("GLTFState", "set_create_animations", 2586408642, Nil, main.p_object, create_animations);  }  // 56
get_import_as_skeleton_bones :: (main: *GLTFState) -> bool { call_ret := cast(*bool) sys_call("GLTFState", "get_import_as_skeleton_bones", 2240911060, bool, main.p_object); return call_ret.*; }  // 57
set_import_as_skeleton_bones :: (main: *GLTFState, import_as_skeleton_bones: bool) { sys_call("GLTFState", "set_import_as_skeleton_bones", 2586408642, Nil, main.p_object, import_as_skeleton_bones);  }  // 58
get_animations :: (main: *GLTFState) -> [] GLTFAnimation { call_ret := cast(*[] GLTFAnimation) sys_call("GLTFState", "get_animations", 2915620761, [] GLTFAnimation, main.p_object); return call_ret.*; }  // 59
set_animations :: (main: *GLTFState, animations: [] GLTFAnimation) { sys_call("GLTFState", "set_animations", 381264803, Nil, main.p_object, animations);  }  // 60
get_scene_node :: (main: *GLTFState, idx: int) -> *Node { call_ret := cast(*Node) sys_call("GLTFState", "get_scene_node", 4253421667, Node, main.p_object, idx); return call_ret; }  // 61
get_node_index :: (main: *GLTFState, scene_node: Node) -> int { call_ret := cast(*int) sys_call("GLTFState", "get_node_index", 1205807060, int, main.p_object, scene_node); return call_ret.*; }  // 62
get_additional_data :: (main: *GLTFState, extension_name: string) -> Variant { call_ret := cast(*Variant) sys_call("GLTFState", "get_additional_data", 2138907829, Variant, main.p_object, extension_name); return call_ret.*; }  // 63
set_additional_data :: (main: *GLTFState, extension_name: string, additional_data: Variant) { sys_call("GLTFState", "set_additional_data", 3776071444, Nil, main.p_object, extension_name, additional_data);  }  // 64
get_handle_binary_image :: (main: *GLTFState) -> int { call_ret := cast(*int) sys_call("GLTFState", "get_handle_binary_image", 2455072627, int, main.p_object); return call_ret.*; }  // 65
set_handle_binary_image :: (main: *GLTFState, method: int) { sys_call("GLTFState", "set_handle_binary_image", 1286410249, Nil, main.p_object, method);  }  // 66
set_bake_fps :: (main: *GLTFState, value: float) { sys_call("GLTFState", "set_bake_fps", 373806689, Nil, main.p_object, value);  }  // 67
get_bake_fps :: (main: *GLTFState) -> float { call_ret := cast(*float) sys_call("GLTFState", "get_bake_fps", 1740695150, float, main.p_object); return call_ret.*; }  // 68

get_src_image :: (main: *GLTFTexture) -> int { call_ret := cast(*int) sys_call("GLTFTexture", "get_src_image", 3905245786, int, main.p_object); return call_ret.*; }  // 0
set_src_image :: (main: *GLTFTexture, src_image: int) { sys_call("GLTFTexture", "set_src_image", 1286410249, Nil, main.p_object, src_image);  }  // 1
get_sampler :: (main: *GLTFTexture) -> int { call_ret := cast(*int) sys_call("GLTFTexture", "get_sampler", 3905245786, int, main.p_object); return call_ret.*; }  // 2
set_sampler :: (main: *GLTFTexture, sampler: int) { sys_call("GLTFTexture", "set_sampler", 1286410249, Nil, main.p_object, sampler);  }  // 3

get_mag_filter :: (main: *GLTFTextureSampler) -> int { call_ret := cast(*int) sys_call("GLTFTextureSampler", "get_mag_filter", 3905245786, int, main.p_object); return call_ret.*; }  // 0
set_mag_filter :: (main: *GLTFTextureSampler, filter_mode: int) { sys_call("GLTFTextureSampler", "set_mag_filter", 1286410249, Nil, main.p_object, filter_mode);  }  // 1
get_min_filter :: (main: *GLTFTextureSampler) -> int { call_ret := cast(*int) sys_call("GLTFTextureSampler", "get_min_filter", 3905245786, int, main.p_object); return call_ret.*; }  // 2
set_min_filter :: (main: *GLTFTextureSampler, filter_mode: int) { sys_call("GLTFTextureSampler", "set_min_filter", 1286410249, Nil, main.p_object, filter_mode);  }  // 3
get_wrap_s :: (main: *GLTFTextureSampler) -> int { call_ret := cast(*int) sys_call("GLTFTextureSampler", "get_wrap_s", 3905245786, int, main.p_object); return call_ret.*; }  // 4
set_wrap_s :: (main: *GLTFTextureSampler, wrap_mode: int) { sys_call("GLTFTextureSampler", "set_wrap_s", 1286410249, Nil, main.p_object, wrap_mode);  }  // 5
get_wrap_t :: (main: *GLTFTextureSampler) -> int { call_ret := cast(*int) sys_call("GLTFTextureSampler", "get_wrap_t", 3905245786, int, main.p_object); return call_ret.*; }  // 6
set_wrap_t :: (main: *GLTFTextureSampler, wrap_mode: int) { sys_call("GLTFTextureSampler", "set_wrap_t", 1286410249, Nil, main.p_object, wrap_mode);  }  // 7

set_emitting :: (main: *GPUParticles2D, emitting: bool) { sys_call("GPUParticles2D", "set_emitting", 2586408642, Nil, main.p_object, emitting);  }  // 0
set_amount :: (main: *GPUParticles2D, amount: int) { sys_call("GPUParticles2D", "set_amount", 1286410249, Nil, main.p_object, amount);  }  // 1
set_lifetime :: (main: *GPUParticles2D, secs: float) { sys_call("GPUParticles2D", "set_lifetime", 373806689, Nil, main.p_object, secs);  }  // 2
set_one_shot :: (main: *GPUParticles2D, secs: bool) { sys_call("GPUParticles2D", "set_one_shot", 2586408642, Nil, main.p_object, secs);  }  // 3
set_pre_process_time :: (main: *GPUParticles2D, secs: float) { sys_call("GPUParticles2D", "set_pre_process_time", 373806689, Nil, main.p_object, secs);  }  // 4
set_explosiveness_ratio :: (main: *GPUParticles2D, ratio: float) { sys_call("GPUParticles2D", "set_explosiveness_ratio", 373806689, Nil, main.p_object, ratio);  }  // 5
set_randomness_ratio :: (main: *GPUParticles2D, ratio: float) { sys_call("GPUParticles2D", "set_randomness_ratio", 373806689, Nil, main.p_object, ratio);  }  // 6
set_visibility_rect :: (main: *GPUParticles2D, visibility_rect: Rect2) { sys_call("GPUParticles2D", "set_visibility_rect", 2046264180, Nil, main.p_object, visibility_rect);  }  // 7
set_use_local_coordinates :: (main: *GPUParticles2D, enable: bool) { sys_call("GPUParticles2D", "set_use_local_coordinates", 2586408642, Nil, main.p_object, enable);  }  // 8
set_fixed_fps :: (main: *GPUParticles2D, fps: int) { sys_call("GPUParticles2D", "set_fixed_fps", 1286410249, Nil, main.p_object, fps);  }  // 9
set_fractional_delta :: (main: *GPUParticles2D, enable: bool) { sys_call("GPUParticles2D", "set_fractional_delta", 2586408642, Nil, main.p_object, enable);  }  // 10
set_interpolate :: (main: *GPUParticles2D, enable: bool) { sys_call("GPUParticles2D", "set_interpolate", 2586408642, Nil, main.p_object, enable);  }  // 11
set_process_material :: (main: *GPUParticles2D, material: Material) { sys_call("GPUParticles2D", "set_process_material", 2757459619, Nil, main.p_object, material);  }  // 12
set_speed_scale :: (main: *GPUParticles2D, scale: float) { sys_call("GPUParticles2D", "set_speed_scale", 373806689, Nil, main.p_object, scale);  }  // 13
set_collision_base_size :: (main: *GPUParticles2D, size: float) { sys_call("GPUParticles2D", "set_collision_base_size", 373806689, Nil, main.p_object, size);  }  // 14
set_interp_to_end :: (main: *GPUParticles2D, interp: float) { sys_call("GPUParticles2D", "set_interp_to_end", 373806689, Nil, main.p_object, interp);  }  // 15
request_particles_process :: (main: *GPUParticles2D, process_time: float) { sys_call("GPUParticles2D", "request_particles_process", 373806689, Nil, main.p_object, process_time);  }  // 16
is_emitting :: (main: *GPUParticles2D) -> bool { call_ret := cast(*bool) sys_call("GPUParticles2D", "is_emitting", 36873697, bool, main.p_object); return call_ret.*; }  // 17
get_amount :: (main: *GPUParticles2D) -> int { call_ret := cast(*int) sys_call("GPUParticles2D", "get_amount", 3905245786, int, main.p_object); return call_ret.*; }  // 18
get_lifetime :: (main: *GPUParticles2D) -> float { call_ret := cast(*float) sys_call("GPUParticles2D", "get_lifetime", 1740695150, float, main.p_object); return call_ret.*; }  // 19
get_one_shot :: (main: *GPUParticles2D) -> bool { call_ret := cast(*bool) sys_call("GPUParticles2D", "get_one_shot", 36873697, bool, main.p_object); return call_ret.*; }  // 20
get_pre_process_time :: (main: *GPUParticles2D) -> float { call_ret := cast(*float) sys_call("GPUParticles2D", "get_pre_process_time", 1740695150, float, main.p_object); return call_ret.*; }  // 21
get_explosiveness_ratio :: (main: *GPUParticles2D) -> float { call_ret := cast(*float) sys_call("GPUParticles2D", "get_explosiveness_ratio", 1740695150, float, main.p_object); return call_ret.*; }  // 22
get_randomness_ratio :: (main: *GPUParticles2D) -> float { call_ret := cast(*float) sys_call("GPUParticles2D", "get_randomness_ratio", 1740695150, float, main.p_object); return call_ret.*; }  // 23
get_visibility_rect :: (main: *GPUParticles2D) -> Rect2 { call_ret := cast(*Rect2) sys_call("GPUParticles2D", "get_visibility_rect", 1639390495, Rect2, main.p_object); return call_ret.*; }  // 24
get_use_local_coordinates :: (main: *GPUParticles2D) -> bool { call_ret := cast(*bool) sys_call("GPUParticles2D", "get_use_local_coordinates", 36873697, bool, main.p_object); return call_ret.*; }  // 25
get_fixed_fps :: (main: *GPUParticles2D) -> int { call_ret := cast(*int) sys_call("GPUParticles2D", "get_fixed_fps", 3905245786, int, main.p_object); return call_ret.*; }  // 26
get_fractional_delta :: (main: *GPUParticles2D) -> bool { call_ret := cast(*bool) sys_call("GPUParticles2D", "get_fractional_delta", 36873697, bool, main.p_object); return call_ret.*; }  // 27
get_interpolate :: (main: *GPUParticles2D) -> bool { call_ret := cast(*bool) sys_call("GPUParticles2D", "get_interpolate", 36873697, bool, main.p_object); return call_ret.*; }  // 28
get_process_material :: (main: *GPUParticles2D) -> *Material { call_ret := cast(*Material) sys_call("GPUParticles2D", "get_process_material", 5934680, Material, main.p_object); return call_ret; }  // 29
get_speed_scale :: (main: *GPUParticles2D) -> float { call_ret := cast(*float) sys_call("GPUParticles2D", "get_speed_scale", 1740695150, float, main.p_object); return call_ret.*; }  // 30
get_collision_base_size :: (main: *GPUParticles2D) -> float { call_ret := cast(*float) sys_call("GPUParticles2D", "get_collision_base_size", 1740695150, float, main.p_object); return call_ret.*; }  // 31
get_interp_to_end :: (main: *GPUParticles2D) -> float { call_ret := cast(*float) sys_call("GPUParticles2D", "get_interp_to_end", 1740695150, float, main.p_object); return call_ret.*; }  // 32
set_draw_order :: (main: *GPUParticles2D, order: GPUParticles2D.DrawOrder) { sys_call("GPUParticles2D", "set_draw_order", 1939677959, Nil, main.p_object, order);  }  // 33
get_draw_order :: (main: *GPUParticles2D) -> GPUParticles2D.DrawOrder { call_ret := cast(*GPUParticles2D.DrawOrder) sys_call("GPUParticles2D", "get_draw_order", 941479095, GPUParticles2D.DrawOrder, main.p_object); return call_ret.*; }  // 34
set_texture :: (main: *GPUParticles2D, texture: Texture2D) { sys_call("GPUParticles2D", "set_texture", 4051416890, Nil, main.p_object, texture);  }  // 35
get_texture :: (main: *GPUParticles2D) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("GPUParticles2D", "get_texture", 3635182373, Texture2D, main.p_object); return call_ret; }  // 36
capture_rect :: (main: *GPUParticles2D) -> Rect2 { call_ret := cast(*Rect2) sys_call("GPUParticles2D", "capture_rect", 1639390495, Rect2, main.p_object); return call_ret.*; }  // 37
restart :: (main: *GPUParticles2D) { sys_call("GPUParticles2D", "restart", 107499316, Nil, main.p_object);  }  // 38
set_sub_emitter :: (main: *GPUParticles2D, path: string) { sys_call("GPUParticles2D", "set_sub_emitter", 1348162250, Nil, main.p_object, path);  }  // 39
get_sub_emitter :: (main: *GPUParticles2D) -> NodePath { call_ret := cast(*NodePath) sys_call("GPUParticles2D", "get_sub_emitter", 4075236667, NodePath, main.p_object); return call_ret.*; }  // 40
emit_particle :: (main: *GPUParticles2D, xform: Transform2D, velocity: Vector2, color: Color, custom: Color, flags: int) { sys_call("GPUParticles2D", "emit_particle", 2179202058, Nil, main.p_object, xform, velocity, color, custom, flags);  }  // 41
set_trail_enabled :: (main: *GPUParticles2D, enabled: bool) { sys_call("GPUParticles2D", "set_trail_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 42
set_trail_lifetime :: (main: *GPUParticles2D, secs: float) { sys_call("GPUParticles2D", "set_trail_lifetime", 373806689, Nil, main.p_object, secs);  }  // 43
is_trail_enabled :: (main: *GPUParticles2D) -> bool { call_ret := cast(*bool) sys_call("GPUParticles2D", "is_trail_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 44
get_trail_lifetime :: (main: *GPUParticles2D) -> float { call_ret := cast(*float) sys_call("GPUParticles2D", "get_trail_lifetime", 1740695150, float, main.p_object); return call_ret.*; }  // 45
set_trail_sections :: (main: *GPUParticles2D, sections: int) { sys_call("GPUParticles2D", "set_trail_sections", 1286410249, Nil, main.p_object, sections);  }  // 46
get_trail_sections :: (main: *GPUParticles2D) -> int { call_ret := cast(*int) sys_call("GPUParticles2D", "get_trail_sections", 3905245786, int, main.p_object); return call_ret.*; }  // 47
set_trail_section_subdivisions :: (main: *GPUParticles2D, subdivisions: int) { sys_call("GPUParticles2D", "set_trail_section_subdivisions", 1286410249, Nil, main.p_object, subdivisions);  }  // 48
get_trail_section_subdivisions :: (main: *GPUParticles2D) -> int { call_ret := cast(*int) sys_call("GPUParticles2D", "get_trail_section_subdivisions", 3905245786, int, main.p_object); return call_ret.*; }  // 49
convert_from_particles :: (main: *GPUParticles2D, particles: Node) { sys_call("GPUParticles2D", "convert_from_particles", 1078189570, Nil, main.p_object, particles);  }  // 50
set_amount_ratio :: (main: *GPUParticles2D, ratio: float) { sys_call("GPUParticles2D", "set_amount_ratio", 373806689, Nil, main.p_object, ratio);  }  // 51
get_amount_ratio :: (main: *GPUParticles2D) -> float { call_ret := cast(*float) sys_call("GPUParticles2D", "get_amount_ratio", 1740695150, float, main.p_object); return call_ret.*; }  // 52
set_use_fixed_seed :: (main: *GPUParticles2D, use_fixed_seed: bool) { sys_call("GPUParticles2D", "set_use_fixed_seed", 2586408642, Nil, main.p_object, use_fixed_seed);  }  // 53
get_use_fixed_seed :: (main: *GPUParticles2D) -> bool { call_ret := cast(*bool) sys_call("GPUParticles2D", "get_use_fixed_seed", 36873697, bool, main.p_object); return call_ret.*; }  // 54
set_seed :: (main: *GPUParticles2D, seed: int) { sys_call("GPUParticles2D", "set_seed", 1286410249, Nil, main.p_object, seed);  }  // 55
get_seed :: (main: *GPUParticles2D) -> int { call_ret := cast(*int) sys_call("GPUParticles2D", "get_seed", 3905245786, int, main.p_object); return call_ret.*; }  // 56

set_emitting :: (main: *GPUParticles3D, emitting: bool) { sys_call("GPUParticles3D", "set_emitting", 2586408642, Nil, main.p_object, emitting);  }  // 0
set_amount :: (main: *GPUParticles3D, amount: int) { sys_call("GPUParticles3D", "set_amount", 1286410249, Nil, main.p_object, amount);  }  // 1
set_lifetime :: (main: *GPUParticles3D, secs: float) { sys_call("GPUParticles3D", "set_lifetime", 373806689, Nil, main.p_object, secs);  }  // 2
set_one_shot :: (main: *GPUParticles3D, enable: bool) { sys_call("GPUParticles3D", "set_one_shot", 2586408642, Nil, main.p_object, enable);  }  // 3
set_pre_process_time :: (main: *GPUParticles3D, secs: float) { sys_call("GPUParticles3D", "set_pre_process_time", 373806689, Nil, main.p_object, secs);  }  // 4
set_explosiveness_ratio :: (main: *GPUParticles3D, ratio: float) { sys_call("GPUParticles3D", "set_explosiveness_ratio", 373806689, Nil, main.p_object, ratio);  }  // 5
set_randomness_ratio :: (main: *GPUParticles3D, ratio: float) { sys_call("GPUParticles3D", "set_randomness_ratio", 373806689, Nil, main.p_object, ratio);  }  // 6
set_visibility_aabb :: (main: *GPUParticles3D, aabb: AABB) { sys_call("GPUParticles3D", "set_visibility_aabb", 259215842, Nil, main.p_object, aabb);  }  // 7
set_use_local_coordinates :: (main: *GPUParticles3D, enable: bool) { sys_call("GPUParticles3D", "set_use_local_coordinates", 2586408642, Nil, main.p_object, enable);  }  // 8
set_fixed_fps :: (main: *GPUParticles3D, fps: int) { sys_call("GPUParticles3D", "set_fixed_fps", 1286410249, Nil, main.p_object, fps);  }  // 9
set_fractional_delta :: (main: *GPUParticles3D, enable: bool) { sys_call("GPUParticles3D", "set_fractional_delta", 2586408642, Nil, main.p_object, enable);  }  // 10
set_interpolate :: (main: *GPUParticles3D, enable: bool) { sys_call("GPUParticles3D", "set_interpolate", 2586408642, Nil, main.p_object, enable);  }  // 11
set_process_material :: (main: *GPUParticles3D, material: Material) { sys_call("GPUParticles3D", "set_process_material", 2757459619, Nil, main.p_object, material);  }  // 12
set_speed_scale :: (main: *GPUParticles3D, scale: float) { sys_call("GPUParticles3D", "set_speed_scale", 373806689, Nil, main.p_object, scale);  }  // 13
set_collision_base_size :: (main: *GPUParticles3D, size: float) { sys_call("GPUParticles3D", "set_collision_base_size", 373806689, Nil, main.p_object, size);  }  // 14
set_interp_to_end :: (main: *GPUParticles3D, interp: float) { sys_call("GPUParticles3D", "set_interp_to_end", 373806689, Nil, main.p_object, interp);  }  // 15
is_emitting :: (main: *GPUParticles3D) -> bool { call_ret := cast(*bool) sys_call("GPUParticles3D", "is_emitting", 36873697, bool, main.p_object); return call_ret.*; }  // 16
get_amount :: (main: *GPUParticles3D) -> int { call_ret := cast(*int) sys_call("GPUParticles3D", "get_amount", 3905245786, int, main.p_object); return call_ret.*; }  // 17
get_lifetime :: (main: *GPUParticles3D) -> float { call_ret := cast(*float) sys_call("GPUParticles3D", "get_lifetime", 1740695150, float, main.p_object); return call_ret.*; }  // 18
get_one_shot :: (main: *GPUParticles3D) -> bool { call_ret := cast(*bool) sys_call("GPUParticles3D", "get_one_shot", 36873697, bool, main.p_object); return call_ret.*; }  // 19
get_pre_process_time :: (main: *GPUParticles3D) -> float { call_ret := cast(*float) sys_call("GPUParticles3D", "get_pre_process_time", 1740695150, float, main.p_object); return call_ret.*; }  // 20
get_explosiveness_ratio :: (main: *GPUParticles3D) -> float { call_ret := cast(*float) sys_call("GPUParticles3D", "get_explosiveness_ratio", 1740695150, float, main.p_object); return call_ret.*; }  // 21
get_randomness_ratio :: (main: *GPUParticles3D) -> float { call_ret := cast(*float) sys_call("GPUParticles3D", "get_randomness_ratio", 1740695150, float, main.p_object); return call_ret.*; }  // 22
get_visibility_aabb :: (main: *GPUParticles3D) -> AABB { call_ret := cast(*AABB) sys_call("GPUParticles3D", "get_visibility_aabb", 1068685055, AABB, main.p_object); return call_ret.*; }  // 23
get_use_local_coordinates :: (main: *GPUParticles3D) -> bool { call_ret := cast(*bool) sys_call("GPUParticles3D", "get_use_local_coordinates", 36873697, bool, main.p_object); return call_ret.*; }  // 24
get_fixed_fps :: (main: *GPUParticles3D) -> int { call_ret := cast(*int) sys_call("GPUParticles3D", "get_fixed_fps", 3905245786, int, main.p_object); return call_ret.*; }  // 25
get_fractional_delta :: (main: *GPUParticles3D) -> bool { call_ret := cast(*bool) sys_call("GPUParticles3D", "get_fractional_delta", 36873697, bool, main.p_object); return call_ret.*; }  // 26
get_interpolate :: (main: *GPUParticles3D) -> bool { call_ret := cast(*bool) sys_call("GPUParticles3D", "get_interpolate", 36873697, bool, main.p_object); return call_ret.*; }  // 27
get_process_material :: (main: *GPUParticles3D) -> *Material { call_ret := cast(*Material) sys_call("GPUParticles3D", "get_process_material", 5934680, Material, main.p_object); return call_ret; }  // 28
get_speed_scale :: (main: *GPUParticles3D) -> float { call_ret := cast(*float) sys_call("GPUParticles3D", "get_speed_scale", 1740695150, float, main.p_object); return call_ret.*; }  // 29
get_collision_base_size :: (main: *GPUParticles3D) -> float { call_ret := cast(*float) sys_call("GPUParticles3D", "get_collision_base_size", 1740695150, float, main.p_object); return call_ret.*; }  // 30
get_interp_to_end :: (main: *GPUParticles3D) -> float { call_ret := cast(*float) sys_call("GPUParticles3D", "get_interp_to_end", 1740695150, float, main.p_object); return call_ret.*; }  // 31
set_use_fixed_seed :: (main: *GPUParticles3D, use_fixed_seed: bool) { sys_call("GPUParticles3D", "set_use_fixed_seed", 2586408642, Nil, main.p_object, use_fixed_seed);  }  // 32
get_use_fixed_seed :: (main: *GPUParticles3D) -> bool { call_ret := cast(*bool) sys_call("GPUParticles3D", "get_use_fixed_seed", 36873697, bool, main.p_object); return call_ret.*; }  // 33
set_seed :: (main: *GPUParticles3D, seed: int) { sys_call("GPUParticles3D", "set_seed", 1286410249, Nil, main.p_object, seed);  }  // 34
get_seed :: (main: *GPUParticles3D) -> int { call_ret := cast(*int) sys_call("GPUParticles3D", "get_seed", 3905245786, int, main.p_object); return call_ret.*; }  // 35
set_draw_order :: (main: *GPUParticles3D, order: GPUParticles3D.DrawOrder) { sys_call("GPUParticles3D", "set_draw_order", 1208074815, Nil, main.p_object, order);  }  // 36
get_draw_order :: (main: *GPUParticles3D) -> GPUParticles3D.DrawOrder { call_ret := cast(*GPUParticles3D.DrawOrder) sys_call("GPUParticles3D", "get_draw_order", 3770381780, GPUParticles3D.DrawOrder, main.p_object); return call_ret.*; }  // 37
set_draw_passes :: (main: *GPUParticles3D, passes: int) { sys_call("GPUParticles3D", "set_draw_passes", 1286410249, Nil, main.p_object, passes);  }  // 38
set_draw_pass_mesh :: (main: *GPUParticles3D, pass: int, mesh: Mesh) { sys_call("GPUParticles3D", "set_draw_pass_mesh", 969122797, Nil, main.p_object, pass, mesh);  }  // 39
get_draw_passes :: (main: *GPUParticles3D) -> int { call_ret := cast(*int) sys_call("GPUParticles3D", "get_draw_passes", 3905245786, int, main.p_object); return call_ret.*; }  // 40
get_draw_pass_mesh :: (main: *GPUParticles3D, pass: int) -> *Mesh { call_ret := cast(*Mesh) sys_call("GPUParticles3D", "get_draw_pass_mesh", 1576363275, Mesh, main.p_object, pass); return call_ret; }  // 41
set_skin :: (main: *GPUParticles3D, skin: Skin) { sys_call("GPUParticles3D", "set_skin", 3971435618, Nil, main.p_object, skin);  }  // 42
get_skin :: (main: *GPUParticles3D) -> *Skin { call_ret := cast(*Skin) sys_call("GPUParticles3D", "get_skin", 2074563878, Skin, main.p_object); return call_ret; }  // 43
restart :: (main: *GPUParticles3D) { sys_call("GPUParticles3D", "restart", 107499316, Nil, main.p_object);  }  // 44
capture_aabb :: (main: *GPUParticles3D) -> AABB { call_ret := cast(*AABB) sys_call("GPUParticles3D", "capture_aabb", 1068685055, AABB, main.p_object); return call_ret.*; }  // 45
set_sub_emitter :: (main: *GPUParticles3D, path: string) { sys_call("GPUParticles3D", "set_sub_emitter", 1348162250, Nil, main.p_object, path);  }  // 46
get_sub_emitter :: (main: *GPUParticles3D) -> NodePath { call_ret := cast(*NodePath) sys_call("GPUParticles3D", "get_sub_emitter", 4075236667, NodePath, main.p_object); return call_ret.*; }  // 47
emit_particle :: (main: *GPUParticles3D, xform: Transform3D, velocity: Vector3, color: Color, custom: Color, flags: int) { sys_call("GPUParticles3D", "emit_particle", 992173727, Nil, main.p_object, xform, velocity, color, custom, flags);  }  // 48
set_trail_enabled :: (main: *GPUParticles3D, enabled: bool) { sys_call("GPUParticles3D", "set_trail_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 49
set_trail_lifetime :: (main: *GPUParticles3D, secs: float) { sys_call("GPUParticles3D", "set_trail_lifetime", 373806689, Nil, main.p_object, secs);  }  // 50
is_trail_enabled :: (main: *GPUParticles3D) -> bool { call_ret := cast(*bool) sys_call("GPUParticles3D", "is_trail_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 51
get_trail_lifetime :: (main: *GPUParticles3D) -> float { call_ret := cast(*float) sys_call("GPUParticles3D", "get_trail_lifetime", 1740695150, float, main.p_object); return call_ret.*; }  // 52
set_transform_align :: (main: *GPUParticles3D, align: GPUParticles3D.TransformAlign) { sys_call("GPUParticles3D", "set_transform_align", 3892425954, Nil, main.p_object, align);  }  // 53
get_transform_align :: (main: *GPUParticles3D) -> GPUParticles3D.TransformAlign { call_ret := cast(*GPUParticles3D.TransformAlign) sys_call("GPUParticles3D", "get_transform_align", 2100992166, GPUParticles3D.TransformAlign, main.p_object); return call_ret.*; }  // 54
convert_from_particles :: (main: *GPUParticles3D, particles: Node) { sys_call("GPUParticles3D", "convert_from_particles", 1078189570, Nil, main.p_object, particles);  }  // 55
set_amount_ratio :: (main: *GPUParticles3D, ratio: float) { sys_call("GPUParticles3D", "set_amount_ratio", 373806689, Nil, main.p_object, ratio);  }  // 56
get_amount_ratio :: (main: *GPUParticles3D) -> float { call_ret := cast(*float) sys_call("GPUParticles3D", "get_amount_ratio", 1740695150, float, main.p_object); return call_ret.*; }  // 57
request_particles_process :: (main: *GPUParticles3D, process_time: float) { sys_call("GPUParticles3D", "request_particles_process", 373806689, Nil, main.p_object, process_time);  }  // 58

set_cull_mask :: (main: *GPUParticlesAttractor3D, mask: int) { sys_call("GPUParticlesAttractor3D", "set_cull_mask", 1286410249, Nil, main.p_object, mask);  }  // 0
get_cull_mask :: (main: *GPUParticlesAttractor3D) -> int { call_ret := cast(*int) sys_call("GPUParticlesAttractor3D", "get_cull_mask", 3905245786, int, main.p_object); return call_ret.*; }  // 1
set_strength :: (main: *GPUParticlesAttractor3D, strength: float) { sys_call("GPUParticlesAttractor3D", "set_strength", 373806689, Nil, main.p_object, strength);  }  // 2
get_strength :: (main: *GPUParticlesAttractor3D) -> float { call_ret := cast(*float) sys_call("GPUParticlesAttractor3D", "get_strength", 1740695150, float, main.p_object); return call_ret.*; }  // 3
set_attenuation :: (main: *GPUParticlesAttractor3D, attenuation: float) { sys_call("GPUParticlesAttractor3D", "set_attenuation", 373806689, Nil, main.p_object, attenuation);  }  // 4
get_attenuation :: (main: *GPUParticlesAttractor3D) -> float { call_ret := cast(*float) sys_call("GPUParticlesAttractor3D", "get_attenuation", 1740695150, float, main.p_object); return call_ret.*; }  // 5
set_directionality :: (main: *GPUParticlesAttractor3D, amount: float) { sys_call("GPUParticlesAttractor3D", "set_directionality", 373806689, Nil, main.p_object, amount);  }  // 6
get_directionality :: (main: *GPUParticlesAttractor3D) -> float { call_ret := cast(*float) sys_call("GPUParticlesAttractor3D", "get_directionality", 1740695150, float, main.p_object); return call_ret.*; }  // 7

set_size :: (main: *GPUParticlesAttractorBox3D, size: Vector3) { sys_call("GPUParticlesAttractorBox3D", "set_size", 3460891852, Nil, main.p_object, size);  }  // 0
get_size :: (main: *GPUParticlesAttractorBox3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("GPUParticlesAttractorBox3D", "get_size", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 1

set_radius :: (main: *GPUParticlesAttractorSphere3D, radius: float) { sys_call("GPUParticlesAttractorSphere3D", "set_radius", 373806689, Nil, main.p_object, radius);  }  // 0
get_radius :: (main: *GPUParticlesAttractorSphere3D) -> float { call_ret := cast(*float) sys_call("GPUParticlesAttractorSphere3D", "get_radius", 1740695150, float, main.p_object); return call_ret.*; }  // 1

set_size :: (main: *GPUParticlesAttractorVectorField3D, size: Vector3) { sys_call("GPUParticlesAttractorVectorField3D", "set_size", 3460891852, Nil, main.p_object, size);  }  // 0
get_size :: (main: *GPUParticlesAttractorVectorField3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("GPUParticlesAttractorVectorField3D", "get_size", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 1
set_texture :: (main: *GPUParticlesAttractorVectorField3D, texture: Texture3D) { sys_call("GPUParticlesAttractorVectorField3D", "set_texture", 1188404210, Nil, main.p_object, texture);  }  // 2
get_texture :: (main: *GPUParticlesAttractorVectorField3D) -> *Texture3D { call_ret := cast(*Texture3D) sys_call("GPUParticlesAttractorVectorField3D", "get_texture", 373985333, Texture3D, main.p_object); return call_ret; }  // 3

set_cull_mask :: (main: *GPUParticlesCollision3D, mask: int) { sys_call("GPUParticlesCollision3D", "set_cull_mask", 1286410249, Nil, main.p_object, mask);  }  // 0
get_cull_mask :: (main: *GPUParticlesCollision3D) -> int { call_ret := cast(*int) sys_call("GPUParticlesCollision3D", "get_cull_mask", 3905245786, int, main.p_object); return call_ret.*; }  // 1

set_size :: (main: *GPUParticlesCollisionBox3D, size: Vector3) { sys_call("GPUParticlesCollisionBox3D", "set_size", 3460891852, Nil, main.p_object, size);  }  // 0
get_size :: (main: *GPUParticlesCollisionBox3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("GPUParticlesCollisionBox3D", "get_size", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 1

set_size :: (main: *GPUParticlesCollisionHeightField3D, size: Vector3) { sys_call("GPUParticlesCollisionHeightField3D", "set_size", 3460891852, Nil, main.p_object, size);  }  // 0
get_size :: (main: *GPUParticlesCollisionHeightField3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("GPUParticlesCollisionHeightField3D", "get_size", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 1
set_resolution :: (main: *GPUParticlesCollisionHeightField3D, resolution: GPUParticlesCollisionHeightField3D.Resolution) { sys_call("GPUParticlesCollisionHeightField3D", "set_resolution", 1009996517, Nil, main.p_object, resolution);  }  // 2
get_resolution :: (main: *GPUParticlesCollisionHeightField3D) -> GPUParticlesCollisionHeightField3D.Resolution { call_ret := cast(*GPUParticlesCollisionHeightField3D.Resolution) sys_call("GPUParticlesCollisionHeightField3D", "get_resolution", 1156065644, GPUParticlesCollisionHeightField3D.Resolution, main.p_object); return call_ret.*; }  // 3
set_update_mode :: (main: *GPUParticlesCollisionHeightField3D, update_mode: GPUParticlesCollisionHeightField3D.UpdateMode) { sys_call("GPUParticlesCollisionHeightField3D", "set_update_mode", 673680859, Nil, main.p_object, update_mode);  }  // 4
get_update_mode :: (main: *GPUParticlesCollisionHeightField3D) -> GPUParticlesCollisionHeightField3D.UpdateMode { call_ret := cast(*GPUParticlesCollisionHeightField3D.UpdateMode) sys_call("GPUParticlesCollisionHeightField3D", "get_update_mode", 1998141380, GPUParticlesCollisionHeightField3D.UpdateMode, main.p_object); return call_ret.*; }  // 5
set_heightfield_mask :: (main: *GPUParticlesCollisionHeightField3D, heightfield_mask: int) { sys_call("GPUParticlesCollisionHeightField3D", "set_heightfield_mask", 1286410249, Nil, main.p_object, heightfield_mask);  }  // 6
get_heightfield_mask :: (main: *GPUParticlesCollisionHeightField3D) -> int { call_ret := cast(*int) sys_call("GPUParticlesCollisionHeightField3D", "get_heightfield_mask", 3905245786, int, main.p_object); return call_ret.*; }  // 7
set_heightfield_mask_value :: (main: *GPUParticlesCollisionHeightField3D, layer_number: int, value: bool) { sys_call("GPUParticlesCollisionHeightField3D", "set_heightfield_mask_value", 300928843, Nil, main.p_object, layer_number, value);  }  // 8
get_heightfield_mask_value :: (main: *GPUParticlesCollisionHeightField3D, layer_number: int) -> bool { call_ret := cast(*bool) sys_call("GPUParticlesCollisionHeightField3D", "get_heightfield_mask_value", 1116898809, bool, main.p_object, layer_number); return call_ret.*; }  // 9
set_follow_camera_enabled :: (main: *GPUParticlesCollisionHeightField3D, enabled: bool) { sys_call("GPUParticlesCollisionHeightField3D", "set_follow_camera_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 10
is_follow_camera_enabled :: (main: *GPUParticlesCollisionHeightField3D) -> bool { call_ret := cast(*bool) sys_call("GPUParticlesCollisionHeightField3D", "is_follow_camera_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 11

set_size :: (main: *GPUParticlesCollisionSDF3D, size: Vector3) { sys_call("GPUParticlesCollisionSDF3D", "set_size", 3460891852, Nil, main.p_object, size);  }  // 0
get_size :: (main: *GPUParticlesCollisionSDF3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("GPUParticlesCollisionSDF3D", "get_size", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 1
set_resolution :: (main: *GPUParticlesCollisionSDF3D, resolution: GPUParticlesCollisionSDF3D.Resolution) { sys_call("GPUParticlesCollisionSDF3D", "set_resolution", 1155629297, Nil, main.p_object, resolution);  }  // 2
get_resolution :: (main: *GPUParticlesCollisionSDF3D) -> GPUParticlesCollisionSDF3D.Resolution { call_ret := cast(*GPUParticlesCollisionSDF3D.Resolution) sys_call("GPUParticlesCollisionSDF3D", "get_resolution", 2919555867, GPUParticlesCollisionSDF3D.Resolution, main.p_object); return call_ret.*; }  // 3
set_texture :: (main: *GPUParticlesCollisionSDF3D, texture: Texture3D) { sys_call("GPUParticlesCollisionSDF3D", "set_texture", 1188404210, Nil, main.p_object, texture);  }  // 4
get_texture :: (main: *GPUParticlesCollisionSDF3D) -> *Texture3D { call_ret := cast(*Texture3D) sys_call("GPUParticlesCollisionSDF3D", "get_texture", 373985333, Texture3D, main.p_object); return call_ret; }  // 5
set_thickness :: (main: *GPUParticlesCollisionSDF3D, thickness: float) { sys_call("GPUParticlesCollisionSDF3D", "set_thickness", 373806689, Nil, main.p_object, thickness);  }  // 6
get_thickness :: (main: *GPUParticlesCollisionSDF3D) -> float { call_ret := cast(*float) sys_call("GPUParticlesCollisionSDF3D", "get_thickness", 1740695150, float, main.p_object); return call_ret.*; }  // 7
set_bake_mask :: (main: *GPUParticlesCollisionSDF3D, mask: int) { sys_call("GPUParticlesCollisionSDF3D", "set_bake_mask", 1286410249, Nil, main.p_object, mask);  }  // 8
get_bake_mask :: (main: *GPUParticlesCollisionSDF3D) -> int { call_ret := cast(*int) sys_call("GPUParticlesCollisionSDF3D", "get_bake_mask", 3905245786, int, main.p_object); return call_ret.*; }  // 9
set_bake_mask_value :: (main: *GPUParticlesCollisionSDF3D, layer_number: int, value: bool) { sys_call("GPUParticlesCollisionSDF3D", "set_bake_mask_value", 300928843, Nil, main.p_object, layer_number, value);  }  // 10
get_bake_mask_value :: (main: *GPUParticlesCollisionSDF3D, layer_number: int) -> bool { call_ret := cast(*bool) sys_call("GPUParticlesCollisionSDF3D", "get_bake_mask_value", 1116898809, bool, main.p_object, layer_number); return call_ret.*; }  // 11

set_radius :: (main: *GPUParticlesCollisionSphere3D, radius: float) { sys_call("GPUParticlesCollisionSphere3D", "set_radius", 373806689, Nil, main.p_object, radius);  }  // 0
get_radius :: (main: *GPUParticlesCollisionSphere3D) -> float { call_ret := cast(*float) sys_call("GPUParticlesCollisionSphere3D", "get_radius", 1740695150, float, main.p_object); return call_ret.*; }  // 1

set_param_x :: (main: *Generic6DOFJoint3D, param: Generic6DOFJoint3D.Param, value: float) { sys_call("Generic6DOFJoint3D", "set_param_x", 2018184242, Nil, main.p_object, param, value);  }  // 0
get_param_x :: (main: *Generic6DOFJoint3D, param: Generic6DOFJoint3D.Param) -> float { call_ret := cast(*float) sys_call("Generic6DOFJoint3D", "get_param_x", 2599835054, float, main.p_object, param); return call_ret.*; }  // 1
set_param_y :: (main: *Generic6DOFJoint3D, param: Generic6DOFJoint3D.Param, value: float) { sys_call("Generic6DOFJoint3D", "set_param_y", 2018184242, Nil, main.p_object, param, value);  }  // 2
get_param_y :: (main: *Generic6DOFJoint3D, param: Generic6DOFJoint3D.Param) -> float { call_ret := cast(*float) sys_call("Generic6DOFJoint3D", "get_param_y", 2599835054, float, main.p_object, param); return call_ret.*; }  // 3
set_param_z :: (main: *Generic6DOFJoint3D, param: Generic6DOFJoint3D.Param, value: float) { sys_call("Generic6DOFJoint3D", "set_param_z", 2018184242, Nil, main.p_object, param, value);  }  // 4
get_param_z :: (main: *Generic6DOFJoint3D, param: Generic6DOFJoint3D.Param) -> float { call_ret := cast(*float) sys_call("Generic6DOFJoint3D", "get_param_z", 2599835054, float, main.p_object, param); return call_ret.*; }  // 5
set_flag_x :: (main: *Generic6DOFJoint3D, flag: Generic6DOFJoint3D.Flag, value: bool) { sys_call("Generic6DOFJoint3D", "set_flag_x", 2451594564, Nil, main.p_object, flag, value);  }  // 6
get_flag_x :: (main: *Generic6DOFJoint3D, flag: Generic6DOFJoint3D.Flag) -> bool { call_ret := cast(*bool) sys_call("Generic6DOFJoint3D", "get_flag_x", 2122427807, bool, main.p_object, flag); return call_ret.*; }  // 7
set_flag_y :: (main: *Generic6DOFJoint3D, flag: Generic6DOFJoint3D.Flag, value: bool) { sys_call("Generic6DOFJoint3D", "set_flag_y", 2451594564, Nil, main.p_object, flag, value);  }  // 8
get_flag_y :: (main: *Generic6DOFJoint3D, flag: Generic6DOFJoint3D.Flag) -> bool { call_ret := cast(*bool) sys_call("Generic6DOFJoint3D", "get_flag_y", 2122427807, bool, main.p_object, flag); return call_ret.*; }  // 9
set_flag_z :: (main: *Generic6DOFJoint3D, flag: Generic6DOFJoint3D.Flag, value: bool) { sys_call("Generic6DOFJoint3D", "set_flag_z", 2451594564, Nil, main.p_object, flag, value);  }  // 10
get_flag_z :: (main: *Generic6DOFJoint3D, flag: Generic6DOFJoint3D.Flag) -> bool { call_ret := cast(*bool) sys_call("Generic6DOFJoint3D", "get_flag_z", 2122427807, bool, main.p_object, flag); return call_ret.*; }  // 11

is_point_in_circle :: (main: *Geometry2D, point: Vector2, circle_position: Vector2, circle_radius: float) -> bool { call_ret := cast(*bool) sys_call("Geometry2D", "is_point_in_circle", 2929491703, bool, main.p_object, point, circle_position, circle_radius); return call_ret.*; }  // 0
segment_intersects_circle :: (main: *Geometry2D, segment_from: Vector2, segment_to: Vector2, circle_position: Vector2, circle_radius: float) -> float { call_ret := cast(*float) sys_call("Geometry2D", "segment_intersects_circle", 1356928167, float, main.p_object, segment_from, segment_to, circle_position, circle_radius); return call_ret.*; }  // 1
segment_intersects_segment :: (main: *Geometry2D, from_a: Vector2, to_a: Vector2, from_b: Vector2, to_b: Vector2) -> Variant { call_ret := cast(*Variant) sys_call("Geometry2D", "segment_intersects_segment", 2058025344, Variant, main.p_object, from_a, to_a, from_b, to_b); return call_ret.*; }  // 2
line_intersects_line :: (main: *Geometry2D, from_a: Vector2, dir_a: Vector2, from_b: Vector2, dir_b: Vector2) -> Variant { call_ret := cast(*Variant) sys_call("Geometry2D", "line_intersects_line", 2058025344, Variant, main.p_object, from_a, dir_a, from_b, dir_b); return call_ret.*; }  // 3
get_closest_points_between_segments :: (main: *Geometry2D, p1: Vector2, q1: Vector2, p2: Vector2, q2: Vector2) -> PackedVector2Array { call_ret := cast(*PackedVector2Array) sys_call("Geometry2D", "get_closest_points_between_segments", 3344690961, PackedVector2Array, main.p_object, p1, q1, p2, q2); return call_ret.*; }  // 4
get_closest_point_to_segment :: (main: *Geometry2D, point: Vector2, s1: Vector2, s2: Vector2) -> Vector2 { call_ret := cast(*Vector2) sys_call("Geometry2D", "get_closest_point_to_segment", 4172901909, Vector2, main.p_object, point, s1, s2); return call_ret.*; }  // 5
get_closest_point_to_segment_uncapped :: (main: *Geometry2D, point: Vector2, s1: Vector2, s2: Vector2) -> Vector2 { call_ret := cast(*Vector2) sys_call("Geometry2D", "get_closest_point_to_segment_uncapped", 4172901909, Vector2, main.p_object, point, s1, s2); return call_ret.*; }  // 6
point_is_inside_triangle :: (main: *Geometry2D, point: Vector2, a: Vector2, b: Vector2, c: Vector2) -> bool { call_ret := cast(*bool) sys_call("Geometry2D", "point_is_inside_triangle", 1025948137, bool, main.p_object, point, a, b, c); return call_ret.*; }  // 7
is_polygon_clockwise :: (main: *Geometry2D, polygon: PackedVector2Array) -> bool { call_ret := cast(*bool) sys_call("Geometry2D", "is_polygon_clockwise", 1361156557, bool, main.p_object, polygon); return call_ret.*; }  // 8
is_point_in_polygon :: (main: *Geometry2D, point: Vector2, polygon: PackedVector2Array) -> bool { call_ret := cast(*bool) sys_call("Geometry2D", "is_point_in_polygon", 738277916, bool, main.p_object, point, polygon); return call_ret.*; }  // 9
triangulate_polygon :: (main: *Geometry2D, polygon: PackedVector2Array) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("Geometry2D", "triangulate_polygon", 1389921771, PackedInt32Array, main.p_object, polygon); return call_ret.*; }  // 10
triangulate_delaunay :: (main: *Geometry2D, points: PackedVector2Array) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("Geometry2D", "triangulate_delaunay", 1389921771, PackedInt32Array, main.p_object, points); return call_ret.*; }  // 11
convex_hull :: (main: *Geometry2D, points: PackedVector2Array) -> PackedVector2Array { call_ret := cast(*PackedVector2Array) sys_call("Geometry2D", "convex_hull", 2004331998, PackedVector2Array, main.p_object, points); return call_ret.*; }  // 12
decompose_polygon_in_convex :: (main: *Geometry2D, polygon: PackedVector2Array) -> [] PackedVector2Array { call_ret := cast(*[] PackedVector2Array) sys_call("Geometry2D", "decompose_polygon_in_convex", 3982393695, [] PackedVector2Array, main.p_object, polygon); return call_ret.*; }  // 13
merge_polygons :: (main: *Geometry2D, polygon_a: PackedVector2Array, polygon_b: PackedVector2Array) -> [] PackedVector2Array { call_ret := cast(*[] PackedVector2Array) sys_call("Geometry2D", "merge_polygons", 3637387053, [] PackedVector2Array, main.p_object, polygon_a, polygon_b); return call_ret.*; }  // 14
clip_polygons :: (main: *Geometry2D, polygon_a: PackedVector2Array, polygon_b: PackedVector2Array) -> [] PackedVector2Array { call_ret := cast(*[] PackedVector2Array) sys_call("Geometry2D", "clip_polygons", 3637387053, [] PackedVector2Array, main.p_object, polygon_a, polygon_b); return call_ret.*; }  // 15
intersect_polygons :: (main: *Geometry2D, polygon_a: PackedVector2Array, polygon_b: PackedVector2Array) -> [] PackedVector2Array { call_ret := cast(*[] PackedVector2Array) sys_call("Geometry2D", "intersect_polygons", 3637387053, [] PackedVector2Array, main.p_object, polygon_a, polygon_b); return call_ret.*; }  // 16
exclude_polygons :: (main: *Geometry2D, polygon_a: PackedVector2Array, polygon_b: PackedVector2Array) -> [] PackedVector2Array { call_ret := cast(*[] PackedVector2Array) sys_call("Geometry2D", "exclude_polygons", 3637387053, [] PackedVector2Array, main.p_object, polygon_a, polygon_b); return call_ret.*; }  // 17
clip_polyline_with_polygon :: (main: *Geometry2D, polyline: PackedVector2Array, polygon: PackedVector2Array) -> [] PackedVector2Array { call_ret := cast(*[] PackedVector2Array) sys_call("Geometry2D", "clip_polyline_with_polygon", 3637387053, [] PackedVector2Array, main.p_object, polyline, polygon); return call_ret.*; }  // 18
intersect_polyline_with_polygon :: (main: *Geometry2D, polyline: PackedVector2Array, polygon: PackedVector2Array) -> [] PackedVector2Array { call_ret := cast(*[] PackedVector2Array) sys_call("Geometry2D", "intersect_polyline_with_polygon", 3637387053, [] PackedVector2Array, main.p_object, polyline, polygon); return call_ret.*; }  // 19
offset_polygon :: (main: *Geometry2D, polygon: PackedVector2Array, delta: float) -> [] PackedVector2Array { call_ret := cast(*[] PackedVector2Array) sys_call("Geometry2D", "offset_polygon", 1275354010, [] PackedVector2Array, main.p_object, polygon, delta); return call_ret.*; }  // 20
offset_polyline :: (main: *Geometry2D, polyline: PackedVector2Array, delta: float) -> [] PackedVector2Array { call_ret := cast(*[] PackedVector2Array) sys_call("Geometry2D", "offset_polyline", 2328231778, [] PackedVector2Array, main.p_object, polyline, delta); return call_ret.*; }  // 21
make_atlas :: (main: *Geometry2D, sizes: PackedVector2Array) -> Dictionary { call_ret := cast(*Dictionary) sys_call("Geometry2D", "make_atlas", 1337682371, Dictionary, main.p_object, sizes); return call_ret.*; }  // 22
bresenham_line :: (main: *Geometry2D, from: Vector2i, to: Vector2i) -> [] Vector2i { call_ret := cast(*[] Vector2i) sys_call("Geometry2D", "bresenham_line", 1989391000, [] Vector2i, main.p_object, from, to); return call_ret.*; }  // 23

compute_convex_mesh_points :: (main: *Geometry3D, planes: [] Plane) -> PackedVector3Array { call_ret := cast(*PackedVector3Array) sys_call("Geometry3D", "compute_convex_mesh_points", 1936902142, PackedVector3Array, main.p_object, planes); return call_ret.*; }  // 0
build_box_planes :: (main: *Geometry3D, extents: Vector3) -> [] Plane { call_ret := cast(*[] Plane) sys_call("Geometry3D", "build_box_planes", 3622277145, [] Plane, main.p_object, extents); return call_ret.*; }  // 1
build_cylinder_planes :: (main: *Geometry3D, radius: float, height: float, sides: int) -> [] Plane { call_ret := cast(*[] Plane) sys_call("Geometry3D", "build_cylinder_planes", 449920067, [] Plane, main.p_object, radius, height, sides); return call_ret.*; }  // 2
build_capsule_planes :: (main: *Geometry3D, radius: float, height: float, sides: int, lats: int) -> [] Plane { call_ret := cast(*[] Plane) sys_call("Geometry3D", "build_capsule_planes", 2113592876, [] Plane, main.p_object, radius, height, sides, lats); return call_ret.*; }  // 3
get_closest_points_between_segments :: (main: *Geometry3D, p1: Vector3, p2: Vector3, q1: Vector3, q2: Vector3) -> PackedVector3Array { call_ret := cast(*PackedVector3Array) sys_call("Geometry3D", "get_closest_points_between_segments", 1056373962, PackedVector3Array, main.p_object, p1, p2, q1, q2); return call_ret.*; }  // 4
get_closest_point_to_segment :: (main: *Geometry3D, point: Vector3, s1: Vector3, s2: Vector3) -> Vector3 { call_ret := cast(*Vector3) sys_call("Geometry3D", "get_closest_point_to_segment", 2168193209, Vector3, main.p_object, point, s1, s2); return call_ret.*; }  // 5
get_closest_point_to_segment_uncapped :: (main: *Geometry3D, point: Vector3, s1: Vector3, s2: Vector3) -> Vector3 { call_ret := cast(*Vector3) sys_call("Geometry3D", "get_closest_point_to_segment_uncapped", 2168193209, Vector3, main.p_object, point, s1, s2); return call_ret.*; }  // 6
get_triangle_barycentric_coords :: (main: *Geometry3D, point: Vector3, a: Vector3, b: Vector3, c: Vector3) -> Vector3 { call_ret := cast(*Vector3) sys_call("Geometry3D", "get_triangle_barycentric_coords", 1362048029, Vector3, main.p_object, point, a, b, c); return call_ret.*; }  // 7
ray_intersects_triangle :: (main: *Geometry3D, from: Vector3, dir: Vector3, a: Vector3, b: Vector3, c: Vector3) -> Variant { call_ret := cast(*Variant) sys_call("Geometry3D", "ray_intersects_triangle", 1718655448, Variant, main.p_object, from, dir, a, b, c); return call_ret.*; }  // 8
segment_intersects_triangle :: (main: *Geometry3D, from: Vector3, to: Vector3, a: Vector3, b: Vector3, c: Vector3) -> Variant { call_ret := cast(*Variant) sys_call("Geometry3D", "segment_intersects_triangle", 1718655448, Variant, main.p_object, from, to, a, b, c); return call_ret.*; }  // 9
segment_intersects_sphere :: (main: *Geometry3D, from: Vector3, to: Vector3, sphere_position: Vector3, sphere_radius: float) -> PackedVector3Array { call_ret := cast(*PackedVector3Array) sys_call("Geometry3D", "segment_intersects_sphere", 4080141172, PackedVector3Array, main.p_object, from, to, sphere_position, sphere_radius); return call_ret.*; }  // 10
segment_intersects_cylinder :: (main: *Geometry3D, from: Vector3, to: Vector3, height: float, radius: float) -> PackedVector3Array { call_ret := cast(*PackedVector3Array) sys_call("Geometry3D", "segment_intersects_cylinder", 2361316491, PackedVector3Array, main.p_object, from, to, height, radius); return call_ret.*; }  // 11
segment_intersects_convex :: (main: *Geometry3D, from: Vector3, to: Vector3, planes: [] Plane) -> PackedVector3Array { call_ret := cast(*PackedVector3Array) sys_call("Geometry3D", "segment_intersects_convex", 537425332, PackedVector3Array, main.p_object, from, to, planes); return call_ret.*; }  // 12
clip_polygon :: (main: *Geometry3D, points: PackedVector3Array, plane: Plane) -> PackedVector3Array { call_ret := cast(*PackedVector3Array) sys_call("Geometry3D", "clip_polygon", 2603188319, PackedVector3Array, main.p_object, points, plane); return call_ret.*; }  // 13
tetrahedralize_delaunay :: (main: *Geometry3D, points: PackedVector3Array) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("Geometry3D", "tetrahedralize_delaunay", 1230191221, PackedInt32Array, main.p_object, points); return call_ret.*; }  // 14

set_material_override :: (main: *GeometryInstance3D, material: Material) { sys_call("GeometryInstance3D", "set_material_override", 2757459619, Nil, main.p_object, material);  }  // 0
get_material_override :: (main: *GeometryInstance3D) -> *Material { call_ret := cast(*Material) sys_call("GeometryInstance3D", "get_material_override", 5934680, Material, main.p_object); return call_ret; }  // 1
set_material_overlay :: (main: *GeometryInstance3D, material: Material) { sys_call("GeometryInstance3D", "set_material_overlay", 2757459619, Nil, main.p_object, material);  }  // 2
get_material_overlay :: (main: *GeometryInstance3D) -> *Material { call_ret := cast(*Material) sys_call("GeometryInstance3D", "get_material_overlay", 5934680, Material, main.p_object); return call_ret; }  // 3
set_cast_shadows_setting :: (main: *GeometryInstance3D, shadow_casting_setting: GeometryInstance3D.ShadowCastingSetting) { sys_call("GeometryInstance3D", "set_cast_shadows_setting", 856677339, Nil, main.p_object, shadow_casting_setting);  }  // 4
get_cast_shadows_setting :: (main: *GeometryInstance3D) -> GeometryInstance3D.ShadowCastingSetting { call_ret := cast(*GeometryInstance3D.ShadowCastingSetting) sys_call("GeometryInstance3D", "get_cast_shadows_setting", 3383019359, GeometryInstance3D.ShadowCastingSetting, main.p_object); return call_ret.*; }  // 5
set_lod_bias :: (main: *GeometryInstance3D, bias: float) { sys_call("GeometryInstance3D", "set_lod_bias", 373806689, Nil, main.p_object, bias);  }  // 6
get_lod_bias :: (main: *GeometryInstance3D) -> float { call_ret := cast(*float) sys_call("GeometryInstance3D", "get_lod_bias", 1740695150, float, main.p_object); return call_ret.*; }  // 7
set_transparency :: (main: *GeometryInstance3D, transparency: float) { sys_call("GeometryInstance3D", "set_transparency", 373806689, Nil, main.p_object, transparency);  }  // 8
get_transparency :: (main: *GeometryInstance3D) -> float { call_ret := cast(*float) sys_call("GeometryInstance3D", "get_transparency", 1740695150, float, main.p_object); return call_ret.*; }  // 9
set_visibility_range_end_margin :: (main: *GeometryInstance3D, distance: float) { sys_call("GeometryInstance3D", "set_visibility_range_end_margin", 373806689, Nil, main.p_object, distance);  }  // 10
get_visibility_range_end_margin :: (main: *GeometryInstance3D) -> float { call_ret := cast(*float) sys_call("GeometryInstance3D", "get_visibility_range_end_margin", 1740695150, float, main.p_object); return call_ret.*; }  // 11
set_visibility_range_end :: (main: *GeometryInstance3D, distance: float) { sys_call("GeometryInstance3D", "set_visibility_range_end", 373806689, Nil, main.p_object, distance);  }  // 12
get_visibility_range_end :: (main: *GeometryInstance3D) -> float { call_ret := cast(*float) sys_call("GeometryInstance3D", "get_visibility_range_end", 1740695150, float, main.p_object); return call_ret.*; }  // 13
set_visibility_range_begin_margin :: (main: *GeometryInstance3D, distance: float) { sys_call("GeometryInstance3D", "set_visibility_range_begin_margin", 373806689, Nil, main.p_object, distance);  }  // 14
get_visibility_range_begin_margin :: (main: *GeometryInstance3D) -> float { call_ret := cast(*float) sys_call("GeometryInstance3D", "get_visibility_range_begin_margin", 1740695150, float, main.p_object); return call_ret.*; }  // 15
set_visibility_range_begin :: (main: *GeometryInstance3D, distance: float) { sys_call("GeometryInstance3D", "set_visibility_range_begin", 373806689, Nil, main.p_object, distance);  }  // 16
get_visibility_range_begin :: (main: *GeometryInstance3D) -> float { call_ret := cast(*float) sys_call("GeometryInstance3D", "get_visibility_range_begin", 1740695150, float, main.p_object); return call_ret.*; }  // 17
set_visibility_range_fade_mode :: (main: *GeometryInstance3D, mode: GeometryInstance3D.VisibilityRangeFadeMode) { sys_call("GeometryInstance3D", "set_visibility_range_fade_mode", 1440117808, Nil, main.p_object, mode);  }  // 18
get_visibility_range_fade_mode :: (main: *GeometryInstance3D) -> GeometryInstance3D.VisibilityRangeFadeMode { call_ret := cast(*GeometryInstance3D.VisibilityRangeFadeMode) sys_call("GeometryInstance3D", "get_visibility_range_fade_mode", 2067221882, GeometryInstance3D.VisibilityRangeFadeMode, main.p_object); return call_ret.*; }  // 19
set_instance_shader_parameter :: (main: *GeometryInstance3D, name: string, value: Variant) { sys_call("GeometryInstance3D", "set_instance_shader_parameter", 3776071444, Nil, main.p_object, name, value);  }  // 20
get_instance_shader_parameter :: (main: *GeometryInstance3D, name: string) -> Variant { call_ret := cast(*Variant) sys_call("GeometryInstance3D", "get_instance_shader_parameter", 2760726917, Variant, main.p_object, name); return call_ret.*; }  // 21
set_extra_cull_margin :: (main: *GeometryInstance3D, margin: float) { sys_call("GeometryInstance3D", "set_extra_cull_margin", 373806689, Nil, main.p_object, margin);  }  // 22
get_extra_cull_margin :: (main: *GeometryInstance3D) -> float { call_ret := cast(*float) sys_call("GeometryInstance3D", "get_extra_cull_margin", 1740695150, float, main.p_object); return call_ret.*; }  // 23
set_lightmap_texel_scale :: (main: *GeometryInstance3D, scale: float) { sys_call("GeometryInstance3D", "set_lightmap_texel_scale", 373806689, Nil, main.p_object, scale);  }  // 24
get_lightmap_texel_scale :: (main: *GeometryInstance3D) -> float { call_ret := cast(*float) sys_call("GeometryInstance3D", "get_lightmap_texel_scale", 1740695150, float, main.p_object); return call_ret.*; }  // 25
set_lightmap_scale :: (main: *GeometryInstance3D, scale: GeometryInstance3D.LightmapScale) { sys_call("GeometryInstance3D", "set_lightmap_scale", 2462696582, Nil, main.p_object, scale);  }  // 26
get_lightmap_scale :: (main: *GeometryInstance3D) -> GeometryInstance3D.LightmapScale { call_ret := cast(*GeometryInstance3D.LightmapScale) sys_call("GeometryInstance3D", "get_lightmap_scale", 798767852, GeometryInstance3D.LightmapScale, main.p_object); return call_ret.*; }  // 27
set_gi_mode :: (main: *GeometryInstance3D, mode: GeometryInstance3D.GIMode) { sys_call("GeometryInstance3D", "set_gi_mode", 2548557163, Nil, main.p_object, mode);  }  // 28
get_gi_mode :: (main: *GeometryInstance3D) -> GeometryInstance3D.GIMode { call_ret := cast(*GeometryInstance3D.GIMode) sys_call("GeometryInstance3D", "get_gi_mode", 2188566509, GeometryInstance3D.GIMode, main.p_object); return call_ret.*; }  // 29
set_ignore_occlusion_culling :: (main: *GeometryInstance3D, ignore_culling: bool) { sys_call("GeometryInstance3D", "set_ignore_occlusion_culling", 2586408642, Nil, main.p_object, ignore_culling);  }  // 30
is_ignoring_occlusion_culling :: (main: *GeometryInstance3D) -> bool { call_ret := cast(*bool) sys_call("GeometryInstance3D", "is_ignoring_occlusion_culling", 2240911060, bool, main.p_object); return call_ret.*; }  // 31
set_custom_aabb :: (main: *GeometryInstance3D, aabb: AABB) { sys_call("GeometryInstance3D", "set_custom_aabb", 259215842, Nil, main.p_object, aabb);  }  // 32
get_custom_aabb :: (main: *GeometryInstance3D) -> AABB { call_ret := cast(*AABB) sys_call("GeometryInstance3D", "get_custom_aabb", 1068685055, AABB, main.p_object); return call_ret.*; }  // 33

add_point :: (main: *Gradient, offset: float, color: Color) { sys_call("Gradient", "add_point", 3629403827, Nil, main.p_object, offset, color);  }  // 0
remove_point :: (main: *Gradient, point: int) { sys_call("Gradient", "remove_point", 1286410249, Nil, main.p_object, point);  }  // 1
set_offset :: (main: *Gradient, point: int, offset: float) { sys_call("Gradient", "set_offset", 1602489585, Nil, main.p_object, point, offset);  }  // 2
get_offset :: (main: *Gradient, point: int) -> float { call_ret := cast(*float) sys_call("Gradient", "get_offset", 4025615559, float, main.p_object, point); return call_ret.*; }  // 3
reverse :: (main: *Gradient) { sys_call("Gradient", "reverse", 3218959716, Nil, main.p_object);  }  // 4
set_color :: (main: *Gradient, point: int, color: Color) { sys_call("Gradient", "set_color", 2878471219, Nil, main.p_object, point, color);  }  // 5
get_color :: (main: *Gradient, point: int) -> Color { call_ret := cast(*Color) sys_call("Gradient", "get_color", 2624840992, Color, main.p_object, point); return call_ret.*; }  // 6
sample :: (main: *Gradient, offset: float) -> Color { call_ret := cast(*Color) sys_call("Gradient", "sample", 1250405064, Color, main.p_object, offset); return call_ret.*; }  // 7
get_point_count :: (main: *Gradient) -> int { call_ret := cast(*int) sys_call("Gradient", "get_point_count", 3905245786, int, main.p_object); return call_ret.*; }  // 8
set_offsets :: (main: *Gradient, offsets: PackedFloat32Array) { sys_call("Gradient", "set_offsets", 2899603908, Nil, main.p_object, offsets);  }  // 9
get_offsets :: (main: *Gradient) -> PackedFloat32Array { call_ret := cast(*PackedFloat32Array) sys_call("Gradient", "get_offsets", 675695659, PackedFloat32Array, main.p_object); return call_ret.*; }  // 10
set_colors :: (main: *Gradient, colors: PackedColorArray) { sys_call("Gradient", "set_colors", 3546319833, Nil, main.p_object, colors);  }  // 11
get_colors :: (main: *Gradient) -> PackedColorArray { call_ret := cast(*PackedColorArray) sys_call("Gradient", "get_colors", 1392750486, PackedColorArray, main.p_object); return call_ret.*; }  // 12
set_interpolation_mode :: (main: *Gradient, interpolation_mode: Gradient.InterpolationMode) { sys_call("Gradient", "set_interpolation_mode", 1971444490, Nil, main.p_object, interpolation_mode);  }  // 13
get_interpolation_mode :: (main: *Gradient) -> Gradient.InterpolationMode { call_ret := cast(*Gradient.InterpolationMode) sys_call("Gradient", "get_interpolation_mode", 3674172981, Gradient.InterpolationMode, main.p_object); return call_ret.*; }  // 14
set_interpolation_color_space :: (main: *Gradient, interpolation_color_space: Gradient.ColorSpace) { sys_call("Gradient", "set_interpolation_color_space", 3685995981, Nil, main.p_object, interpolation_color_space);  }  // 15
get_interpolation_color_space :: (main: *Gradient) -> Gradient.ColorSpace { call_ret := cast(*Gradient.ColorSpace) sys_call("Gradient", "get_interpolation_color_space", 1538296000, Gradient.ColorSpace, main.p_object); return call_ret.*; }  // 16

set_gradient :: (main: *GradientTexture1D, gradient: Gradient) { sys_call("GradientTexture1D", "set_gradient", 2756054477, Nil, main.p_object, gradient);  }  // 0
get_gradient :: (main: *GradientTexture1D) -> *Gradient { call_ret := cast(*Gradient) sys_call("GradientTexture1D", "get_gradient", 132272999, Gradient, main.p_object); return call_ret; }  // 1
set_width :: (main: *GradientTexture1D, width: int) { sys_call("GradientTexture1D", "set_width", 1286410249, Nil, main.p_object, width);  }  // 2
set_use_hdr :: (main: *GradientTexture1D, enabled: bool) { sys_call("GradientTexture1D", "set_use_hdr", 2586408642, Nil, main.p_object, enabled);  }  // 3
is_using_hdr :: (main: *GradientTexture1D) -> bool { call_ret := cast(*bool) sys_call("GradientTexture1D", "is_using_hdr", 36873697, bool, main.p_object); return call_ret.*; }  // 4

set_gradient :: (main: *GradientTexture2D, gradient: Gradient) { sys_call("GradientTexture2D", "set_gradient", 2756054477, Nil, main.p_object, gradient);  }  // 0
get_gradient :: (main: *GradientTexture2D) -> *Gradient { call_ret := cast(*Gradient) sys_call("GradientTexture2D", "get_gradient", 132272999, Gradient, main.p_object); return call_ret; }  // 1
set_width :: (main: *GradientTexture2D, width: int) { sys_call("GradientTexture2D", "set_width", 1286410249, Nil, main.p_object, width);  }  // 2
set_height :: (main: *GradientTexture2D, height: int) { sys_call("GradientTexture2D", "set_height", 1286410249, Nil, main.p_object, height);  }  // 3
set_use_hdr :: (main: *GradientTexture2D, enabled: bool) { sys_call("GradientTexture2D", "set_use_hdr", 2586408642, Nil, main.p_object, enabled);  }  // 4
is_using_hdr :: (main: *GradientTexture2D) -> bool { call_ret := cast(*bool) sys_call("GradientTexture2D", "is_using_hdr", 36873697, bool, main.p_object); return call_ret.*; }  // 5
set_fill :: (main: *GradientTexture2D, fill: GradientTexture2D.Fill) { sys_call("GradientTexture2D", "set_fill", 3623927636, Nil, main.p_object, fill);  }  // 6
get_fill :: (main: *GradientTexture2D) -> GradientTexture2D.Fill { call_ret := cast(*GradientTexture2D.Fill) sys_call("GradientTexture2D", "get_fill", 1876227217, GradientTexture2D.Fill, main.p_object); return call_ret.*; }  // 7
set_fill_from :: (main: *GradientTexture2D, fill_from: Vector2) { sys_call("GradientTexture2D", "set_fill_from", 743155724, Nil, main.p_object, fill_from);  }  // 8
get_fill_from :: (main: *GradientTexture2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("GradientTexture2D", "get_fill_from", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 9
set_fill_to :: (main: *GradientTexture2D, fill_to: Vector2) { sys_call("GradientTexture2D", "set_fill_to", 743155724, Nil, main.p_object, fill_to);  }  // 10
get_fill_to :: (main: *GradientTexture2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("GradientTexture2D", "get_fill_to", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 11
set_repeat :: (main: *GradientTexture2D, repeat: GradientTexture2D.Repeat) { sys_call("GradientTexture2D", "set_repeat", 1357597002, Nil, main.p_object, repeat);  }  // 12
get_repeat :: (main: *GradientTexture2D) -> GradientTexture2D.Repeat { call_ret := cast(*GradientTexture2D.Repeat) sys_call("GradientTexture2D", "get_repeat", 3351758665, GradientTexture2D.Repeat, main.p_object); return call_ret.*; }  // 13

connect_node :: (main: *GraphEdit, from_node: string, from_port: int, to_node: string, to_port: int) -> Error { call_ret := cast(*Error) sys_call("GraphEdit", "connect_node", 1376144231, Error, main.p_object, from_node, from_port, to_node, to_port); return call_ret.*; }  // 4
is_node_connected :: (main: *GraphEdit, from_node: string, from_port: int, to_node: string, to_port: int) -> bool { call_ret := cast(*bool) sys_call("GraphEdit", "is_node_connected", 4216241294, bool, main.p_object, from_node, from_port, to_node, to_port); return call_ret.*; }  // 5
disconnect_node :: (main: *GraphEdit, from_node: string, from_port: int, to_node: string, to_port: int) { sys_call("GraphEdit", "disconnect_node", 1933654315, Nil, main.p_object, from_node, from_port, to_node, to_port);  }  // 6
set_connection_activity :: (main: *GraphEdit, from_node: string, from_port: int, to_node: string, to_port: int, amount: float) { sys_call("GraphEdit", "set_connection_activity", 1141899943, Nil, main.p_object, from_node, from_port, to_node, to_port, amount);  }  // 7
set_connections :: (main: *GraphEdit, connections: [] Dictionary) { sys_call("GraphEdit", "set_connections", 381264803, Nil, main.p_object, connections);  }  // 8
get_connection_list :: (main: *GraphEdit) -> [] Dictionary { call_ret := cast(*[] Dictionary) sys_call("GraphEdit", "get_connection_list", 3995934104, [] Dictionary, main.p_object); return call_ret.*; }  // 9
get_connection_count :: (main: *GraphEdit, from_node: string, from_port: int) -> int { call_ret := cast(*int) sys_call("GraphEdit", "get_connection_count", 861718734, int, main.p_object, from_node, from_port); return call_ret.*; }  // 10
get_closest_connection_at_point :: (main: *GraphEdit, point: Vector2) -> Dictionary { call_ret := cast(*Dictionary) sys_call("GraphEdit", "get_closest_connection_at_point", 453879819, Dictionary, main.p_object, point); return call_ret.*; }  // 11
get_connections_intersecting_with_rect :: (main: *GraphEdit, rect: Rect2) -> [] Dictionary { call_ret := cast(*[] Dictionary) sys_call("GraphEdit", "get_connections_intersecting_with_rect", 2709748719, [] Dictionary, main.p_object, rect); return call_ret.*; }  // 12
clear_connections :: (main: *GraphEdit) { sys_call("GraphEdit", "clear_connections", 3218959716, Nil, main.p_object);  }  // 13
force_connection_drag_end :: (main: *GraphEdit) { sys_call("GraphEdit", "force_connection_drag_end", 3218959716, Nil, main.p_object);  }  // 14
get_scroll_offset :: (main: *GraphEdit) -> Vector2 { call_ret := cast(*Vector2) sys_call("GraphEdit", "get_scroll_offset", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 15
set_scroll_offset :: (main: *GraphEdit, offset: Vector2) { sys_call("GraphEdit", "set_scroll_offset", 743155724, Nil, main.p_object, offset);  }  // 16
add_valid_right_disconnect_type :: (main: *GraphEdit, type: int) { sys_call("GraphEdit", "add_valid_right_disconnect_type", 1286410249, Nil, main.p_object, type);  }  // 17
remove_valid_right_disconnect_type :: (main: *GraphEdit, type: int) { sys_call("GraphEdit", "remove_valid_right_disconnect_type", 1286410249, Nil, main.p_object, type);  }  // 18
add_valid_left_disconnect_type :: (main: *GraphEdit, type: int) { sys_call("GraphEdit", "add_valid_left_disconnect_type", 1286410249, Nil, main.p_object, type);  }  // 19
remove_valid_left_disconnect_type :: (main: *GraphEdit, type: int) { sys_call("GraphEdit", "remove_valid_left_disconnect_type", 1286410249, Nil, main.p_object, type);  }  // 20
add_valid_connection_type :: (main: *GraphEdit, from_type: int, to_type: int) { sys_call("GraphEdit", "add_valid_connection_type", 3937882851, Nil, main.p_object, from_type, to_type);  }  // 21
remove_valid_connection_type :: (main: *GraphEdit, from_type: int, to_type: int) { sys_call("GraphEdit", "remove_valid_connection_type", 3937882851, Nil, main.p_object, from_type, to_type);  }  // 22
is_valid_connection_type :: (main: *GraphEdit, from_type: int, to_type: int) -> bool { call_ret := cast(*bool) sys_call("GraphEdit", "is_valid_connection_type", 2522259332, bool, main.p_object, from_type, to_type); return call_ret.*; }  // 23
get_connection_line :: (main: *GraphEdit, from_node: Vector2, to_node: Vector2) -> PackedVector2Array { call_ret := cast(*PackedVector2Array) sys_call("GraphEdit", "get_connection_line", 3932192302, PackedVector2Array, main.p_object, from_node, to_node); return call_ret.*; }  // 24
attach_graph_element_to_frame :: (main: *GraphEdit, element: string, frame: string) { sys_call("GraphEdit", "attach_graph_element_to_frame", 3740211285, Nil, main.p_object, element, frame);  }  // 25
detach_graph_element_from_frame :: (main: *GraphEdit, element: string) { sys_call("GraphEdit", "detach_graph_element_from_frame", 3304788590, Nil, main.p_object, element);  }  // 26
get_element_frame :: (main: *GraphEdit, element: string) -> *GraphFrame { call_ret := cast(*GraphFrame) sys_call("GraphEdit", "get_element_frame", 988084372, GraphFrame, main.p_object, element); return call_ret; }  // 27
get_attached_nodes_of_frame :: (main: *GraphEdit, frame: string) -> [] StringName { call_ret := cast(*[] StringName) sys_call("GraphEdit", "get_attached_nodes_of_frame", 689397652, [] StringName, main.p_object, frame); return call_ret.*; }  // 28
set_panning_scheme :: (main: *GraphEdit, scheme: GraphEdit.PanningScheme) { sys_call("GraphEdit", "set_panning_scheme", 18893313, Nil, main.p_object, scheme);  }  // 29
get_panning_scheme :: (main: *GraphEdit) -> GraphEdit.PanningScheme { call_ret := cast(*GraphEdit.PanningScheme) sys_call("GraphEdit", "get_panning_scheme", 549924446, GraphEdit.PanningScheme, main.p_object); return call_ret.*; }  // 30
set_zoom :: (main: *GraphEdit, zoom: float) { sys_call("GraphEdit", "set_zoom", 373806689, Nil, main.p_object, zoom);  }  // 31
get_zoom :: (main: *GraphEdit) -> float { call_ret := cast(*float) sys_call("GraphEdit", "get_zoom", 1740695150, float, main.p_object); return call_ret.*; }  // 32
set_zoom_min :: (main: *GraphEdit, zoom_min: float) { sys_call("GraphEdit", "set_zoom_min", 373806689, Nil, main.p_object, zoom_min);  }  // 33
get_zoom_min :: (main: *GraphEdit) -> float { call_ret := cast(*float) sys_call("GraphEdit", "get_zoom_min", 1740695150, float, main.p_object); return call_ret.*; }  // 34
set_zoom_max :: (main: *GraphEdit, zoom_max: float) { sys_call("GraphEdit", "set_zoom_max", 373806689, Nil, main.p_object, zoom_max);  }  // 35
get_zoom_max :: (main: *GraphEdit) -> float { call_ret := cast(*float) sys_call("GraphEdit", "get_zoom_max", 1740695150, float, main.p_object); return call_ret.*; }  // 36
set_zoom_step :: (main: *GraphEdit, zoom_step: float) { sys_call("GraphEdit", "set_zoom_step", 373806689, Nil, main.p_object, zoom_step);  }  // 37
get_zoom_step :: (main: *GraphEdit) -> float { call_ret := cast(*float) sys_call("GraphEdit", "get_zoom_step", 1740695150, float, main.p_object); return call_ret.*; }  // 38
set_show_grid :: (main: *GraphEdit, enable: bool) { sys_call("GraphEdit", "set_show_grid", 2586408642, Nil, main.p_object, enable);  }  // 39
is_showing_grid :: (main: *GraphEdit) -> bool { call_ret := cast(*bool) sys_call("GraphEdit", "is_showing_grid", 36873697, bool, main.p_object); return call_ret.*; }  // 40
set_grid_pattern :: (main: *GraphEdit, pattern: GraphEdit.GridPattern) { sys_call("GraphEdit", "set_grid_pattern", 1074098205, Nil, main.p_object, pattern);  }  // 41
get_grid_pattern :: (main: *GraphEdit) -> GraphEdit.GridPattern { call_ret := cast(*GraphEdit.GridPattern) sys_call("GraphEdit", "get_grid_pattern", 1286127528, GraphEdit.GridPattern, main.p_object); return call_ret.*; }  // 42
set_snapping_enabled :: (main: *GraphEdit, enable: bool) { sys_call("GraphEdit", "set_snapping_enabled", 2586408642, Nil, main.p_object, enable);  }  // 43
is_snapping_enabled :: (main: *GraphEdit) -> bool { call_ret := cast(*bool) sys_call("GraphEdit", "is_snapping_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 44
set_snapping_distance :: (main: *GraphEdit, pixels: int) { sys_call("GraphEdit", "set_snapping_distance", 1286410249, Nil, main.p_object, pixels);  }  // 45
get_snapping_distance :: (main: *GraphEdit) -> int { call_ret := cast(*int) sys_call("GraphEdit", "get_snapping_distance", 3905245786, int, main.p_object); return call_ret.*; }  // 46
set_connection_lines_curvature :: (main: *GraphEdit, curvature: float) { sys_call("GraphEdit", "set_connection_lines_curvature", 373806689, Nil, main.p_object, curvature);  }  // 47
get_connection_lines_curvature :: (main: *GraphEdit) -> float { call_ret := cast(*float) sys_call("GraphEdit", "get_connection_lines_curvature", 1740695150, float, main.p_object); return call_ret.*; }  // 48
set_connection_lines_thickness :: (main: *GraphEdit, pixels: float) { sys_call("GraphEdit", "set_connection_lines_thickness", 373806689, Nil, main.p_object, pixels);  }  // 49
get_connection_lines_thickness :: (main: *GraphEdit) -> float { call_ret := cast(*float) sys_call("GraphEdit", "get_connection_lines_thickness", 1740695150, float, main.p_object); return call_ret.*; }  // 50
set_connection_lines_antialiased :: (main: *GraphEdit, pixels: bool) { sys_call("GraphEdit", "set_connection_lines_antialiased", 2586408642, Nil, main.p_object, pixels);  }  // 51
is_connection_lines_antialiased :: (main: *GraphEdit) -> bool { call_ret := cast(*bool) sys_call("GraphEdit", "is_connection_lines_antialiased", 36873697, bool, main.p_object); return call_ret.*; }  // 52
set_minimap_size :: (main: *GraphEdit, size: Vector2) { sys_call("GraphEdit", "set_minimap_size", 743155724, Nil, main.p_object, size);  }  // 53
get_minimap_size :: (main: *GraphEdit) -> Vector2 { call_ret := cast(*Vector2) sys_call("GraphEdit", "get_minimap_size", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 54
set_minimap_opacity :: (main: *GraphEdit, opacity: float) { sys_call("GraphEdit", "set_minimap_opacity", 373806689, Nil, main.p_object, opacity);  }  // 55
get_minimap_opacity :: (main: *GraphEdit) -> float { call_ret := cast(*float) sys_call("GraphEdit", "get_minimap_opacity", 1740695150, float, main.p_object); return call_ret.*; }  // 56
set_minimap_enabled :: (main: *GraphEdit, enable: bool) { sys_call("GraphEdit", "set_minimap_enabled", 2586408642, Nil, main.p_object, enable);  }  // 57
is_minimap_enabled :: (main: *GraphEdit) -> bool { call_ret := cast(*bool) sys_call("GraphEdit", "is_minimap_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 58
set_show_menu :: (main: *GraphEdit, hidden: bool) { sys_call("GraphEdit", "set_show_menu", 2586408642, Nil, main.p_object, hidden);  }  // 59
is_showing_menu :: (main: *GraphEdit) -> bool { call_ret := cast(*bool) sys_call("GraphEdit", "is_showing_menu", 36873697, bool, main.p_object); return call_ret.*; }  // 60
set_show_zoom_label :: (main: *GraphEdit, enable: bool) { sys_call("GraphEdit", "set_show_zoom_label", 2586408642, Nil, main.p_object, enable);  }  // 61
is_showing_zoom_label :: (main: *GraphEdit) -> bool { call_ret := cast(*bool) sys_call("GraphEdit", "is_showing_zoom_label", 36873697, bool, main.p_object); return call_ret.*; }  // 62
set_show_grid_buttons :: (main: *GraphEdit, hidden: bool) { sys_call("GraphEdit", "set_show_grid_buttons", 2586408642, Nil, main.p_object, hidden);  }  // 63
is_showing_grid_buttons :: (main: *GraphEdit) -> bool { call_ret := cast(*bool) sys_call("GraphEdit", "is_showing_grid_buttons", 36873697, bool, main.p_object); return call_ret.*; }  // 64
set_show_zoom_buttons :: (main: *GraphEdit, hidden: bool) { sys_call("GraphEdit", "set_show_zoom_buttons", 2586408642, Nil, main.p_object, hidden);  }  // 65
is_showing_zoom_buttons :: (main: *GraphEdit) -> bool { call_ret := cast(*bool) sys_call("GraphEdit", "is_showing_zoom_buttons", 36873697, bool, main.p_object); return call_ret.*; }  // 66
set_show_minimap_button :: (main: *GraphEdit, hidden: bool) { sys_call("GraphEdit", "set_show_minimap_button", 2586408642, Nil, main.p_object, hidden);  }  // 67
is_showing_minimap_button :: (main: *GraphEdit) -> bool { call_ret := cast(*bool) sys_call("GraphEdit", "is_showing_minimap_button", 36873697, bool, main.p_object); return call_ret.*; }  // 68
set_show_arrange_button :: (main: *GraphEdit, hidden: bool) { sys_call("GraphEdit", "set_show_arrange_button", 2586408642, Nil, main.p_object, hidden);  }  // 69
is_showing_arrange_button :: (main: *GraphEdit) -> bool { call_ret := cast(*bool) sys_call("GraphEdit", "is_showing_arrange_button", 36873697, bool, main.p_object); return call_ret.*; }  // 70
set_right_disconnects :: (main: *GraphEdit, enable: bool) { sys_call("GraphEdit", "set_right_disconnects", 2586408642, Nil, main.p_object, enable);  }  // 71
is_right_disconnects_enabled :: (main: *GraphEdit) -> bool { call_ret := cast(*bool) sys_call("GraphEdit", "is_right_disconnects_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 72
get_menu_hbox :: (main: *GraphEdit) -> *HBoxContainer { call_ret := cast(*HBoxContainer) sys_call("GraphEdit", "get_menu_hbox", 3590609951, HBoxContainer, main.p_object); return call_ret; }  // 73
arrange_nodes :: (main: *GraphEdit) { sys_call("GraphEdit", "arrange_nodes", 3218959716, Nil, main.p_object);  }  // 74
set_selected :: (main: *GraphEdit, node: Node) { sys_call("GraphEdit", "set_selected", 1078189570, Nil, main.p_object, node);  }  // 75

set_resizable :: (main: *GraphElement, resizable: bool) { sys_call("GraphElement", "set_resizable", 2586408642, Nil, main.p_object, resizable);  }  // 0
is_resizable :: (main: *GraphElement) -> bool { call_ret := cast(*bool) sys_call("GraphElement", "is_resizable", 36873697, bool, main.p_object); return call_ret.*; }  // 1
set_draggable :: (main: *GraphElement, draggable: bool) { sys_call("GraphElement", "set_draggable", 2586408642, Nil, main.p_object, draggable);  }  // 2
is_draggable :: (main: *GraphElement) -> bool { call_ret := cast(*bool) sys_call("GraphElement", "is_draggable", 2240911060, bool, main.p_object); return call_ret.*; }  // 3
set_selectable :: (main: *GraphElement, selectable: bool) { sys_call("GraphElement", "set_selectable", 2586408642, Nil, main.p_object, selectable);  }  // 4
is_selectable :: (main: *GraphElement) -> bool { call_ret := cast(*bool) sys_call("GraphElement", "is_selectable", 2240911060, bool, main.p_object); return call_ret.*; }  // 5
set_selected :: (main: *GraphElement, selected: bool) { sys_call("GraphElement", "set_selected", 2586408642, Nil, main.p_object, selected);  }  // 6
is_selected :: (main: *GraphElement) -> bool { call_ret := cast(*bool) sys_call("GraphElement", "is_selected", 2240911060, bool, main.p_object); return call_ret.*; }  // 7
set_position_offset :: (main: *GraphElement, offset: Vector2) { sys_call("GraphElement", "set_position_offset", 743155724, Nil, main.p_object, offset);  }  // 8
get_position_offset :: (main: *GraphElement) -> Vector2 { call_ret := cast(*Vector2) sys_call("GraphElement", "get_position_offset", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 9

set_title :: (main: *GraphFrame, title: string) { sys_call("GraphFrame", "set_title", 83702148, Nil, main.p_object, title);  }  // 0
get_title :: (main: *GraphFrame) -> gstring { call_ret := cast(*gstring) sys_call("GraphFrame", "get_title", 201670096, gstring, main.p_object); return call_ret.*; }  // 1
get_titlebar_hbox :: (main: *GraphFrame) -> *HBoxContainer { call_ret := cast(*HBoxContainer) sys_call("GraphFrame", "get_titlebar_hbox", 3590609951, HBoxContainer, main.p_object); return call_ret; }  // 2
set_autoshrink_enabled :: (main: *GraphFrame, shrink: bool) { sys_call("GraphFrame", "set_autoshrink_enabled", 2586408642, Nil, main.p_object, shrink);  }  // 3
is_autoshrink_enabled :: (main: *GraphFrame) -> bool { call_ret := cast(*bool) sys_call("GraphFrame", "is_autoshrink_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 4
set_autoshrink_margin :: (main: *GraphFrame, autoshrink_margin: int) { sys_call("GraphFrame", "set_autoshrink_margin", 1286410249, Nil, main.p_object, autoshrink_margin);  }  // 5
get_autoshrink_margin :: (main: *GraphFrame) -> int { call_ret := cast(*int) sys_call("GraphFrame", "get_autoshrink_margin", 3905245786, int, main.p_object); return call_ret.*; }  // 6
set_drag_margin :: (main: *GraphFrame, drag_margin: int) { sys_call("GraphFrame", "set_drag_margin", 1286410249, Nil, main.p_object, drag_margin);  }  // 7
get_drag_margin :: (main: *GraphFrame) -> int { call_ret := cast(*int) sys_call("GraphFrame", "get_drag_margin", 3905245786, int, main.p_object); return call_ret.*; }  // 8
set_tint_color_enabled :: (main: *GraphFrame, enable: bool) { sys_call("GraphFrame", "set_tint_color_enabled", 2586408642, Nil, main.p_object, enable);  }  // 9
is_tint_color_enabled :: (main: *GraphFrame) -> bool { call_ret := cast(*bool) sys_call("GraphFrame", "is_tint_color_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 10
set_tint_color :: (main: *GraphFrame, color: Color) { sys_call("GraphFrame", "set_tint_color", 2920490490, Nil, main.p_object, color);  }  // 11
get_tint_color :: (main: *GraphFrame) -> Color { call_ret := cast(*Color) sys_call("GraphFrame", "get_tint_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 12

set_title :: (main: *GraphNode, title: string) { sys_call("GraphNode", "set_title", 83702148, Nil, main.p_object, title);  }  // 1
get_title :: (main: *GraphNode) -> gstring { call_ret := cast(*gstring) sys_call("GraphNode", "get_title", 201670096, gstring, main.p_object); return call_ret.*; }  // 2
get_titlebar_hbox :: (main: *GraphNode) -> *HBoxContainer { call_ret := cast(*HBoxContainer) sys_call("GraphNode", "get_titlebar_hbox", 3590609951, HBoxContainer, main.p_object); return call_ret; }  // 3
set_slot :: (main: *GraphNode, slot_index: int, enable_left_port: bool, type_left: int, color_left: Color, enable_right_port: bool, type_right: int, color_right: Color) { sys_call("GraphNode", "set_slot", 2873310869, Nil, main.p_object, slot_index, enable_left_port, type_left, color_left, enable_right_port, type_right, color_right);  }  // 4
clear_slot :: (main: *GraphNode, slot_index: int) { sys_call("GraphNode", "clear_slot", 1286410249, Nil, main.p_object, slot_index);  }  // 5
clear_all_slots :: (main: *GraphNode) { sys_call("GraphNode", "clear_all_slots", 3218959716, Nil, main.p_object);  }  // 6
is_slot_enabled_left :: (main: *GraphNode, slot_index: int) -> bool { call_ret := cast(*bool) sys_call("GraphNode", "is_slot_enabled_left", 1116898809, bool, main.p_object, slot_index); return call_ret.*; }  // 7
set_slot_enabled_left :: (main: *GraphNode, slot_index: int, enable: bool) { sys_call("GraphNode", "set_slot_enabled_left", 300928843, Nil, main.p_object, slot_index, enable);  }  // 8
set_slot_type_left :: (main: *GraphNode, slot_index: int, type: int) { sys_call("GraphNode", "set_slot_type_left", 3937882851, Nil, main.p_object, slot_index, type);  }  // 9
get_slot_type_left :: (main: *GraphNode, slot_index: int) -> int { call_ret := cast(*int) sys_call("GraphNode", "get_slot_type_left", 923996154, int, main.p_object, slot_index); return call_ret.*; }  // 10
set_slot_color_left :: (main: *GraphNode, slot_index: int, color: Color) { sys_call("GraphNode", "set_slot_color_left", 2878471219, Nil, main.p_object, slot_index, color);  }  // 11
get_slot_color_left :: (main: *GraphNode, slot_index: int) -> Color { call_ret := cast(*Color) sys_call("GraphNode", "get_slot_color_left", 3457211756, Color, main.p_object, slot_index); return call_ret.*; }  // 12
set_slot_custom_icon_left :: (main: *GraphNode, slot_index: int, custom_icon: Texture2D) { sys_call("GraphNode", "set_slot_custom_icon_left", 666127730, Nil, main.p_object, slot_index, custom_icon);  }  // 13
get_slot_custom_icon_left :: (main: *GraphNode, slot_index: int) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("GraphNode", "get_slot_custom_icon_left", 3536238170, Texture2D, main.p_object, slot_index); return call_ret; }  // 14
is_slot_enabled_right :: (main: *GraphNode, slot_index: int) -> bool { call_ret := cast(*bool) sys_call("GraphNode", "is_slot_enabled_right", 1116898809, bool, main.p_object, slot_index); return call_ret.*; }  // 15
set_slot_enabled_right :: (main: *GraphNode, slot_index: int, enable: bool) { sys_call("GraphNode", "set_slot_enabled_right", 300928843, Nil, main.p_object, slot_index, enable);  }  // 16
set_slot_type_right :: (main: *GraphNode, slot_index: int, type: int) { sys_call("GraphNode", "set_slot_type_right", 3937882851, Nil, main.p_object, slot_index, type);  }  // 17
get_slot_type_right :: (main: *GraphNode, slot_index: int) -> int { call_ret := cast(*int) sys_call("GraphNode", "get_slot_type_right", 923996154, int, main.p_object, slot_index); return call_ret.*; }  // 18
set_slot_color_right :: (main: *GraphNode, slot_index: int, color: Color) { sys_call("GraphNode", "set_slot_color_right", 2878471219, Nil, main.p_object, slot_index, color);  }  // 19
get_slot_color_right :: (main: *GraphNode, slot_index: int) -> Color { call_ret := cast(*Color) sys_call("GraphNode", "get_slot_color_right", 3457211756, Color, main.p_object, slot_index); return call_ret.*; }  // 20
set_slot_custom_icon_right :: (main: *GraphNode, slot_index: int, custom_icon: Texture2D) { sys_call("GraphNode", "set_slot_custom_icon_right", 666127730, Nil, main.p_object, slot_index, custom_icon);  }  // 21
get_slot_custom_icon_right :: (main: *GraphNode, slot_index: int) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("GraphNode", "get_slot_custom_icon_right", 3536238170, Texture2D, main.p_object, slot_index); return call_ret; }  // 22
is_slot_draw_stylebox :: (main: *GraphNode, slot_index: int) -> bool { call_ret := cast(*bool) sys_call("GraphNode", "is_slot_draw_stylebox", 1116898809, bool, main.p_object, slot_index); return call_ret.*; }  // 23
set_slot_draw_stylebox :: (main: *GraphNode, slot_index: int, enable: bool) { sys_call("GraphNode", "set_slot_draw_stylebox", 300928843, Nil, main.p_object, slot_index, enable);  }  // 24
set_ignore_invalid_connection_type :: (main: *GraphNode, ignore: bool) { sys_call("GraphNode", "set_ignore_invalid_connection_type", 2586408642, Nil, main.p_object, ignore);  }  // 25
is_ignoring_valid_connection_type :: (main: *GraphNode) -> bool { call_ret := cast(*bool) sys_call("GraphNode", "is_ignoring_valid_connection_type", 36873697, bool, main.p_object); return call_ret.*; }  // 26
get_input_port_count :: (main: *GraphNode) -> int { call_ret := cast(*int) sys_call("GraphNode", "get_input_port_count", 2455072627, int, main.p_object); return call_ret.*; }  // 27
get_input_port_position :: (main: *GraphNode, port_idx: int) -> Vector2 { call_ret := cast(*Vector2) sys_call("GraphNode", "get_input_port_position", 3114997196, Vector2, main.p_object, port_idx); return call_ret.*; }  // 28
get_input_port_type :: (main: *GraphNode, port_idx: int) -> int { call_ret := cast(*int) sys_call("GraphNode", "get_input_port_type", 3744713108, int, main.p_object, port_idx); return call_ret.*; }  // 29
get_input_port_color :: (main: *GraphNode, port_idx: int) -> Color { call_ret := cast(*Color) sys_call("GraphNode", "get_input_port_color", 2624840992, Color, main.p_object, port_idx); return call_ret.*; }  // 30
get_input_port_slot :: (main: *GraphNode, port_idx: int) -> int { call_ret := cast(*int) sys_call("GraphNode", "get_input_port_slot", 3744713108, int, main.p_object, port_idx); return call_ret.*; }  // 31
get_output_port_count :: (main: *GraphNode) -> int { call_ret := cast(*int) sys_call("GraphNode", "get_output_port_count", 2455072627, int, main.p_object); return call_ret.*; }  // 32
get_output_port_position :: (main: *GraphNode, port_idx: int) -> Vector2 { call_ret := cast(*Vector2) sys_call("GraphNode", "get_output_port_position", 3114997196, Vector2, main.p_object, port_idx); return call_ret.*; }  // 33
get_output_port_type :: (main: *GraphNode, port_idx: int) -> int { call_ret := cast(*int) sys_call("GraphNode", "get_output_port_type", 3744713108, int, main.p_object, port_idx); return call_ret.*; }  // 34
get_output_port_color :: (main: *GraphNode, port_idx: int) -> Color { call_ret := cast(*Color) sys_call("GraphNode", "get_output_port_color", 2624840992, Color, main.p_object, port_idx); return call_ret.*; }  // 35
get_output_port_slot :: (main: *GraphNode, port_idx: int) -> int { call_ret := cast(*int) sys_call("GraphNode", "get_output_port_slot", 3744713108, int, main.p_object, port_idx); return call_ret.*; }  // 36

set_columns :: (main: *GridContainer, columns: int) { sys_call("GridContainer", "set_columns", 1286410249, Nil, main.p_object, columns);  }  // 0
get_columns :: (main: *GridContainer) -> int { call_ret := cast(*int) sys_call("GridContainer", "get_columns", 3905245786, int, main.p_object); return call_ret.*; }  // 1

set_collision_layer :: (main: *GridMap, layer: int) { sys_call("GridMap", "set_collision_layer", 1286410249, Nil, main.p_object, layer);  }  // 0
get_collision_layer :: (main: *GridMap) -> int { call_ret := cast(*int) sys_call("GridMap", "get_collision_layer", 3905245786, int, main.p_object); return call_ret.*; }  // 1
set_collision_mask :: (main: *GridMap, mask: int) { sys_call("GridMap", "set_collision_mask", 1286410249, Nil, main.p_object, mask);  }  // 2
get_collision_mask :: (main: *GridMap) -> int { call_ret := cast(*int) sys_call("GridMap", "get_collision_mask", 3905245786, int, main.p_object); return call_ret.*; }  // 3
set_collision_mask_value :: (main: *GridMap, layer_number: int, value: bool) { sys_call("GridMap", "set_collision_mask_value", 300928843, Nil, main.p_object, layer_number, value);  }  // 4
get_collision_mask_value :: (main: *GridMap, layer_number: int) -> bool { call_ret := cast(*bool) sys_call("GridMap", "get_collision_mask_value", 1116898809, bool, main.p_object, layer_number); return call_ret.*; }  // 5
set_collision_layer_value :: (main: *GridMap, layer_number: int, value: bool) { sys_call("GridMap", "set_collision_layer_value", 300928843, Nil, main.p_object, layer_number, value);  }  // 6
get_collision_layer_value :: (main: *GridMap, layer_number: int) -> bool { call_ret := cast(*bool) sys_call("GridMap", "get_collision_layer_value", 1116898809, bool, main.p_object, layer_number); return call_ret.*; }  // 7
set_collision_priority :: (main: *GridMap, priority: float) { sys_call("GridMap", "set_collision_priority", 373806689, Nil, main.p_object, priority);  }  // 8
get_collision_priority :: (main: *GridMap) -> float { call_ret := cast(*float) sys_call("GridMap", "get_collision_priority", 1740695150, float, main.p_object); return call_ret.*; }  // 9
set_physics_material :: (main: *GridMap, material: PhysicsMaterial) { sys_call("GridMap", "set_physics_material", 1784508650, Nil, main.p_object, material);  }  // 10
get_physics_material :: (main: *GridMap) -> *PhysicsMaterial { call_ret := cast(*PhysicsMaterial) sys_call("GridMap", "get_physics_material", 2521850424, PhysicsMaterial, main.p_object); return call_ret; }  // 11
set_bake_navigation :: (main: *GridMap, bake_navigation: bool) { sys_call("GridMap", "set_bake_navigation", 2586408642, Nil, main.p_object, bake_navigation);  }  // 12
is_baking_navigation :: (main: *GridMap) -> bool { call_ret := cast(*bool) sys_call("GridMap", "is_baking_navigation", 2240911060, bool, main.p_object); return call_ret.*; }  // 13
set_navigation_map :: (main: *GridMap, navigation_map: RID) { sys_call("GridMap", "set_navigation_map", 2722037293, Nil, main.p_object, navigation_map);  }  // 14
get_navigation_map :: (main: *GridMap) -> RID { call_ret := cast(*RID) sys_call("GridMap", "get_navigation_map", 2944877500, RID, main.p_object); return call_ret.*; }  // 15
set_mesh_library :: (main: *GridMap, mesh_library: MeshLibrary) { sys_call("GridMap", "set_mesh_library", 1488083439, Nil, main.p_object, mesh_library);  }  // 16
get_mesh_library :: (main: *GridMap) -> *MeshLibrary { call_ret := cast(*MeshLibrary) sys_call("GridMap", "get_mesh_library", 3350993772, MeshLibrary, main.p_object); return call_ret; }  // 17
set_cell_size :: (main: *GridMap, size: Vector3) { sys_call("GridMap", "set_cell_size", 3460891852, Nil, main.p_object, size);  }  // 18
get_cell_size :: (main: *GridMap) -> Vector3 { call_ret := cast(*Vector3) sys_call("GridMap", "get_cell_size", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 19
set_cell_scale :: (main: *GridMap, scale: float) { sys_call("GridMap", "set_cell_scale", 373806689, Nil, main.p_object, scale);  }  // 20
get_cell_scale :: (main: *GridMap) -> float { call_ret := cast(*float) sys_call("GridMap", "get_cell_scale", 1740695150, float, main.p_object); return call_ret.*; }  // 21
set_octant_size :: (main: *GridMap, size: int) { sys_call("GridMap", "set_octant_size", 1286410249, Nil, main.p_object, size);  }  // 22
get_octant_size :: (main: *GridMap) -> int { call_ret := cast(*int) sys_call("GridMap", "get_octant_size", 3905245786, int, main.p_object); return call_ret.*; }  // 23
set_cell_item :: (main: *GridMap, position: Vector3i, item: int) { sys_call("GridMap", "set_cell_item", 3449088946, Nil, main.p_object, position, item);  }  // 24
get_cell_item :: (main: *GridMap, position: Vector3i) -> int { call_ret := cast(*int) sys_call("GridMap", "get_cell_item", 3724960147, int, main.p_object, position); return call_ret.*; }  // 25
get_cell_item_orientation :: (main: *GridMap, position: Vector3i) -> int { call_ret := cast(*int) sys_call("GridMap", "get_cell_item_orientation", 3724960147, int, main.p_object, position); return call_ret.*; }  // 26
get_cell_item_basis :: (main: *GridMap, position: Vector3i) -> Basis { call_ret := cast(*Basis) sys_call("GridMap", "get_cell_item_basis", 3493604918, Basis, main.p_object, position); return call_ret.*; }  // 27
get_basis_with_orthogonal_index :: (main: *GridMap, index: int) -> Basis { call_ret := cast(*Basis) sys_call("GridMap", "get_basis_with_orthogonal_index", 2816196998, Basis, main.p_object, index); return call_ret.*; }  // 28
get_orthogonal_index_from_basis :: (main: *GridMap, basis: Basis) -> int { call_ret := cast(*int) sys_call("GridMap", "get_orthogonal_index_from_basis", 4210359952, int, main.p_object, basis); return call_ret.*; }  // 29
local_to_map :: (main: *GridMap, local_position: Vector3) -> Vector3i { call_ret := cast(*Vector3i) sys_call("GridMap", "local_to_map", 1257687843, Vector3i, main.p_object, local_position); return call_ret.*; }  // 30
map_to_local :: (main: *GridMap, map_position: Vector3i) -> Vector3 { call_ret := cast(*Vector3) sys_call("GridMap", "map_to_local", 1088329196, Vector3, main.p_object, map_position); return call_ret.*; }  // 31
resource_changed :: (main: *GridMap, resource: Resource) { sys_call("GridMap", "resource_changed", 968641751, Nil, main.p_object, resource);  }  // 32
set_center_x :: (main: *GridMap, enable: bool) { sys_call("GridMap", "set_center_x", 2586408642, Nil, main.p_object, enable);  }  // 33
get_center_x :: (main: *GridMap) -> bool { call_ret := cast(*bool) sys_call("GridMap", "get_center_x", 36873697, bool, main.p_object); return call_ret.*; }  // 34
set_center_y :: (main: *GridMap, enable: bool) { sys_call("GridMap", "set_center_y", 2586408642, Nil, main.p_object, enable);  }  // 35
get_center_y :: (main: *GridMap) -> bool { call_ret := cast(*bool) sys_call("GridMap", "get_center_y", 36873697, bool, main.p_object); return call_ret.*; }  // 36
set_center_z :: (main: *GridMap, enable: bool) { sys_call("GridMap", "set_center_z", 2586408642, Nil, main.p_object, enable);  }  // 37
get_center_z :: (main: *GridMap) -> bool { call_ret := cast(*bool) sys_call("GridMap", "get_center_z", 36873697, bool, main.p_object); return call_ret.*; }  // 38
clear :: (main: *GridMap) { sys_call("GridMap", "clear", 3218959716, Nil, main.p_object);  }  // 39
get_used_cells :: (main: *GridMap) -> [] Vector3i { call_ret := cast(*[] Vector3i) sys_call("GridMap", "get_used_cells", 3995934104, [] Vector3i, main.p_object); return call_ret.*; }  // 40
get_used_cells_by_item :: (main: *GridMap, item: int) -> [] Vector3i { call_ret := cast(*[] Vector3i) sys_call("GridMap", "get_used_cells_by_item", 663333327, [] Vector3i, main.p_object, item); return call_ret.*; }  // 41
get_meshes :: (main: *GridMap) -> Array { call_ret := cast(*Array) sys_call("GridMap", "get_meshes", 3995934104, Array, main.p_object); return call_ret.*; }  // 42
get_bake_meshes :: (main: *GridMap) -> Array { call_ret := cast(*Array) sys_call("GridMap", "get_bake_meshes", 2915620761, Array, main.p_object); return call_ret.*; }  // 43
get_bake_mesh_instance :: (main: *GridMap, idx: int) -> RID { call_ret := cast(*RID) sys_call("GridMap", "get_bake_mesh_instance", 937000113, RID, main.p_object, idx); return call_ret.*; }  // 44
clear_baked_meshes :: (main: *GridMap) { sys_call("GridMap", "clear_baked_meshes", 3218959716, Nil, main.p_object);  }  // 45
make_baked_meshes :: (main: *GridMap) { sys_call("GridMap", "make_baked_meshes", 3609286057, Nil, main.p_object);  }  // 46

get_current_grid_map :: (main: *GridMapEditorPlugin) -> *GridMap { call_ret := cast(*GridMap) sys_call("GridMapEditorPlugin", "get_current_grid_map", 1184264483, GridMap, main.p_object); return call_ret; }  // 0
set_selection :: (main: *GridMapEditorPlugin, begin: Vector3i, end: Vector3i) { sys_call("GridMapEditorPlugin", "set_selection", 3659408297, Nil, main.p_object, begin, end);  }  // 1
clear_selection :: (main: *GridMapEditorPlugin) { sys_call("GridMapEditorPlugin", "clear_selection", 3218959716, Nil, main.p_object);  }  // 2
get_selection :: (main: *GridMapEditorPlugin) -> AABB { call_ret := cast(*AABB) sys_call("GridMapEditorPlugin", "get_selection", 1068685055, AABB, main.p_object); return call_ret.*; }  // 3
has_selection :: (main: *GridMapEditorPlugin) -> bool { call_ret := cast(*bool) sys_call("GridMapEditorPlugin", "has_selection", 36873697, bool, main.p_object); return call_ret.*; }  // 4
get_selected_cells :: (main: *GridMapEditorPlugin) -> Array { call_ret := cast(*Array) sys_call("GridMapEditorPlugin", "get_selected_cells", 3995934104, Array, main.p_object); return call_ret.*; }  // 5
set_selected_palette_item :: (main: *GridMapEditorPlugin, item: int) { sys_call("GridMapEditorPlugin", "set_selected_palette_item", 998575451, Nil, main.p_object, item);  }  // 6
get_selected_palette_item :: (main: *GridMapEditorPlugin) -> int { call_ret := cast(*int) sys_call("GridMapEditorPlugin", "get_selected_palette_item", 3905245786, int, main.p_object); return call_ret.*; }  // 7

set_length :: (main: *GrooveJoint2D, length: float) { sys_call("GrooveJoint2D", "set_length", 373806689, Nil, main.p_object, length);  }  // 0
get_length :: (main: *GrooveJoint2D) -> float { call_ret := cast(*float) sys_call("GrooveJoint2D", "get_length", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_initial_offset :: (main: *GrooveJoint2D, offset: float) { sys_call("GrooveJoint2D", "set_initial_offset", 373806689, Nil, main.p_object, offset);  }  // 2
get_initial_offset :: (main: *GrooveJoint2D) -> float { call_ret := cast(*float) sys_call("GrooveJoint2D", "get_initial_offset", 1740695150, float, main.p_object); return call_ret.*; }  // 3



start :: (main: *HMACContext, hash_type: HashingContext.HashType, key: PackedByteArray) -> Error { call_ret := cast(*Error) sys_call("HMACContext", "start", 3537364598, Error, main.p_object, hash_type, key); return call_ret.*; }  // 0
update :: (main: *HMACContext, data: PackedByteArray) -> Error { call_ret := cast(*Error) sys_call("HMACContext", "update", 680677267, Error, main.p_object, data); return call_ret.*; }  // 1
finish :: (main: *HMACContext) -> PackedByteArray { call_ret := cast(*PackedByteArray) sys_call("HMACContext", "finish", 2115431945, PackedByteArray, main.p_object); return call_ret.*; }  // 2





connect_to_host :: (main: *HTTPClient, host: string) -> Error { call_ret := cast(*Error) sys_call("HTTPClient", "connect_to_host", 504540374, Error, main.p_object, host); return call_ret.*; }  // 0
set_connection :: (main: *HTTPClient, connection: StreamPeer) { sys_call("HTTPClient", "set_connection", 3281897016, Nil, main.p_object, connection);  }  // 1
get_connection :: (main: *HTTPClient) -> *StreamPeer { call_ret := cast(*StreamPeer) sys_call("HTTPClient", "get_connection", 2741655269, StreamPeer, main.p_object); return call_ret; }  // 2
request_raw :: (main: *HTTPClient, method: HTTPClient.Method, url: string, headers: PackedStringArray, body: PackedByteArray) -> Error { call_ret := cast(*Error) sys_call("HTTPClient", "request_raw", 540161961, Error, main.p_object, method, url, headers, body); return call_ret.*; }  // 3
request :: (main: *HTTPClient, method: HTTPClient.Method, url: string, headers: PackedStringArray) -> Error { call_ret := cast(*Error) sys_call("HTTPClient", "request", 3778990155, Error, main.p_object, method, url, headers); return call_ret.*; }  // 4
close :: (main: *HTTPClient) { sys_call("HTTPClient", "close", 3218959716, Nil, main.p_object);  }  // 5
has_response :: (main: *HTTPClient) -> bool { call_ret := cast(*bool) sys_call("HTTPClient", "has_response", 36873697, bool, main.p_object); return call_ret.*; }  // 6
is_response_chunked :: (main: *HTTPClient) -> bool { call_ret := cast(*bool) sys_call("HTTPClient", "is_response_chunked", 36873697, bool, main.p_object); return call_ret.*; }  // 7
get_response_code :: (main: *HTTPClient) -> int { call_ret := cast(*int) sys_call("HTTPClient", "get_response_code", 3905245786, int, main.p_object); return call_ret.*; }  // 8
get_response_headers :: (main: *HTTPClient) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("HTTPClient", "get_response_headers", 2981934095, PackedStringArray, main.p_object); return call_ret.*; }  // 9
get_response_headers_as_dictionary :: (main: *HTTPClient) -> Dictionary { call_ret := cast(*Dictionary) sys_call("HTTPClient", "get_response_headers_as_dictionary", 2382534195, Dictionary, main.p_object); return call_ret.*; }  // 10
get_response_body_length :: (main: *HTTPClient) -> int { call_ret := cast(*int) sys_call("HTTPClient", "get_response_body_length", 3905245786, int, main.p_object); return call_ret.*; }  // 11
read_response_body_chunk :: (main: *HTTPClient) -> PackedByteArray { call_ret := cast(*PackedByteArray) sys_call("HTTPClient", "read_response_body_chunk", 2115431945, PackedByteArray, main.p_object); return call_ret.*; }  // 12
set_read_chunk_size :: (main: *HTTPClient, bytes: int) { sys_call("HTTPClient", "set_read_chunk_size", 1286410249, Nil, main.p_object, bytes);  }  // 13
get_read_chunk_size :: (main: *HTTPClient) -> int { call_ret := cast(*int) sys_call("HTTPClient", "get_read_chunk_size", 3905245786, int, main.p_object); return call_ret.*; }  // 14
set_blocking_mode :: (main: *HTTPClient, enabled: bool) { sys_call("HTTPClient", "set_blocking_mode", 2586408642, Nil, main.p_object, enabled);  }  // 15
is_blocking_mode_enabled :: (main: *HTTPClient) -> bool { call_ret := cast(*bool) sys_call("HTTPClient", "is_blocking_mode_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 16
get_status :: (main: *HTTPClient) -> HTTPClient.Status { call_ret := cast(*HTTPClient.Status) sys_call("HTTPClient", "get_status", 1426656811, HTTPClient.Status, main.p_object); return call_ret.*; }  // 17
poll :: (main: *HTTPClient) -> Error { call_ret := cast(*Error) sys_call("HTTPClient", "poll", 166280745, Error, main.p_object); return call_ret.*; }  // 18
set_http_proxy :: (main: *HTTPClient, host: string, port: int) { sys_call("HTTPClient", "set_http_proxy", 2956805083, Nil, main.p_object, host, port);  }  // 19
set_https_proxy :: (main: *HTTPClient, host: string, port: int) { sys_call("HTTPClient", "set_https_proxy", 2956805083, Nil, main.p_object, host, port);  }  // 20
query_string_from_dict :: (main: *HTTPClient, fields: Dictionary) -> gstring { call_ret := cast(*gstring) sys_call("HTTPClient", "query_string_from_dict", 2538086567, gstring, main.p_object, fields); return call_ret.*; }  // 21

request :: (main: *HTTPRequest, url: string) -> Error { call_ret := cast(*Error) sys_call("HTTPRequest", "request", 3215244323, Error, main.p_object, url); return call_ret.*; }  // 0
request_raw :: (main: *HTTPRequest, url: string) -> Error { call_ret := cast(*Error) sys_call("HTTPRequest", "request_raw", 2714829993, Error, main.p_object, url); return call_ret.*; }  // 1
cancel_request :: (main: *HTTPRequest) { sys_call("HTTPRequest", "cancel_request", 3218959716, Nil, main.p_object);  }  // 2
set_tls_options :: (main: *HTTPRequest, client_options: TLSOptions) { sys_call("HTTPRequest", "set_tls_options", 2210231844, Nil, main.p_object, client_options);  }  // 3
get_http_client_status :: (main: *HTTPRequest) -> HTTPClient.Status { call_ret := cast(*HTTPClient.Status) sys_call("HTTPRequest", "get_http_client_status", 1426656811, HTTPClient.Status, main.p_object); return call_ret.*; }  // 4
set_use_threads :: (main: *HTTPRequest, enable: bool) { sys_call("HTTPRequest", "set_use_threads", 2586408642, Nil, main.p_object, enable);  }  // 5
is_using_threads :: (main: *HTTPRequest) -> bool { call_ret := cast(*bool) sys_call("HTTPRequest", "is_using_threads", 36873697, bool, main.p_object); return call_ret.*; }  // 6
set_accept_gzip :: (main: *HTTPRequest, enable: bool) { sys_call("HTTPRequest", "set_accept_gzip", 2586408642, Nil, main.p_object, enable);  }  // 7
is_accepting_gzip :: (main: *HTTPRequest) -> bool { call_ret := cast(*bool) sys_call("HTTPRequest", "is_accepting_gzip", 36873697, bool, main.p_object); return call_ret.*; }  // 8
set_body_size_limit :: (main: *HTTPRequest, bytes: int) { sys_call("HTTPRequest", "set_body_size_limit", 1286410249, Nil, main.p_object, bytes);  }  // 9
get_body_size_limit :: (main: *HTTPRequest) -> int { call_ret := cast(*int) sys_call("HTTPRequest", "get_body_size_limit", 3905245786, int, main.p_object); return call_ret.*; }  // 10
set_max_redirects :: (main: *HTTPRequest, amount: int) { sys_call("HTTPRequest", "set_max_redirects", 1286410249, Nil, main.p_object, amount);  }  // 11
get_max_redirects :: (main: *HTTPRequest) -> int { call_ret := cast(*int) sys_call("HTTPRequest", "get_max_redirects", 3905245786, int, main.p_object); return call_ret.*; }  // 12
set_download_file :: (main: *HTTPRequest, path: string) { sys_call("HTTPRequest", "set_download_file", 83702148, Nil, main.p_object, path);  }  // 13
get_download_file :: (main: *HTTPRequest) -> gstring { call_ret := cast(*gstring) sys_call("HTTPRequest", "get_download_file", 201670096, gstring, main.p_object); return call_ret.*; }  // 14
get_downloaded_bytes :: (main: *HTTPRequest) -> int { call_ret := cast(*int) sys_call("HTTPRequest", "get_downloaded_bytes", 3905245786, int, main.p_object); return call_ret.*; }  // 15
get_body_size :: (main: *HTTPRequest) -> int { call_ret := cast(*int) sys_call("HTTPRequest", "get_body_size", 3905245786, int, main.p_object); return call_ret.*; }  // 16
set_timeout :: (main: *HTTPRequest, timeout: float) { sys_call("HTTPRequest", "set_timeout", 373806689, Nil, main.p_object, timeout);  }  // 17
get_timeout :: (main: *HTTPRequest) -> float { call_ret := cast(*float) sys_call("HTTPRequest", "get_timeout", 191475506, float, main.p_object); return call_ret.*; }  // 18
set_download_chunk_size :: (main: *HTTPRequest, chunk_size: int) { sys_call("HTTPRequest", "set_download_chunk_size", 1286410249, Nil, main.p_object, chunk_size);  }  // 19
get_download_chunk_size :: (main: *HTTPRequest) -> int { call_ret := cast(*int) sys_call("HTTPRequest", "get_download_chunk_size", 3905245786, int, main.p_object); return call_ret.*; }  // 20
set_http_proxy :: (main: *HTTPRequest, host: string, port: int) { sys_call("HTTPRequest", "set_http_proxy", 2956805083, Nil, main.p_object, host, port);  }  // 21
set_https_proxy :: (main: *HTTPRequest, host: string, port: int) { sys_call("HTTPRequest", "set_https_proxy", 2956805083, Nil, main.p_object, host, port);  }  // 22

start :: (main: *HashingContext, type: HashingContext.HashType) -> Error { call_ret := cast(*Error) sys_call("HashingContext", "start", 3940338335, Error, main.p_object, type); return call_ret.*; }  // 0
update :: (main: *HashingContext, chunk: PackedByteArray) -> Error { call_ret := cast(*Error) sys_call("HashingContext", "update", 680677267, Error, main.p_object, chunk); return call_ret.*; }  // 1
finish :: (main: *HashingContext) -> PackedByteArray { call_ret := cast(*PackedByteArray) sys_call("HashingContext", "finish", 2115431945, PackedByteArray, main.p_object); return call_ret.*; }  // 2

set_map_width :: (main: *HeightMapShape3D, width: int) { sys_call("HeightMapShape3D", "set_map_width", 1286410249, Nil, main.p_object, width);  }  // 0
get_map_width :: (main: *HeightMapShape3D) -> int { call_ret := cast(*int) sys_call("HeightMapShape3D", "get_map_width", 3905245786, int, main.p_object); return call_ret.*; }  // 1
set_map_depth :: (main: *HeightMapShape3D, height: int) { sys_call("HeightMapShape3D", "set_map_depth", 1286410249, Nil, main.p_object, height);  }  // 2
get_map_depth :: (main: *HeightMapShape3D) -> int { call_ret := cast(*int) sys_call("HeightMapShape3D", "get_map_depth", 3905245786, int, main.p_object); return call_ret.*; }  // 3
set_map_data :: (main: *HeightMapShape3D, data: PackedFloat32Array) { sys_call("HeightMapShape3D", "set_map_data", 2899603908, Nil, main.p_object, data);  }  // 4
get_map_data :: (main: *HeightMapShape3D) -> PackedFloat32Array { call_ret := cast(*PackedFloat32Array) sys_call("HeightMapShape3D", "get_map_data", 675695659, PackedFloat32Array, main.p_object); return call_ret.*; }  // 5
get_min_height :: (main: *HeightMapShape3D) -> float { call_ret := cast(*float) sys_call("HeightMapShape3D", "get_min_height", 1740695150, float, main.p_object); return call_ret.*; }  // 6
get_max_height :: (main: *HeightMapShape3D) -> float { call_ret := cast(*float) sys_call("HeightMapShape3D", "get_max_height", 1740695150, float, main.p_object); return call_ret.*; }  // 7
update_map_data_from_image :: (main: *HeightMapShape3D, image: Image, height_min: float, height_max: float) { sys_call("HeightMapShape3D", "update_map_data_from_image", 2636652979, Nil, main.p_object, image, height_min, height_max);  }  // 8

set_param :: (main: *HingeJoint3D, param: HingeJoint3D.Param, value: float) { sys_call("HingeJoint3D", "set_param", 3082977519, Nil, main.p_object, param, value);  }  // 0
get_param :: (main: *HingeJoint3D, param: HingeJoint3D.Param) -> float { call_ret := cast(*float) sys_call("HingeJoint3D", "get_param", 4066002676, float, main.p_object, param); return call_ret.*; }  // 1
set_flag :: (main: *HingeJoint3D, flag: HingeJoint3D.Flag, enabled: bool) { sys_call("HingeJoint3D", "set_flag", 1083494620, Nil, main.p_object, flag, enabled);  }  // 2
get_flag :: (main: *HingeJoint3D, flag: HingeJoint3D.Flag) -> bool { call_ret := cast(*bool) sys_call("HingeJoint3D", "get_flag", 2841369610, bool, main.p_object, flag); return call_ret.*; }  // 3

resolve_hostname :: (main: *IP, host: string) -> gstring { call_ret := cast(*gstring) sys_call("IP", "resolve_hostname", 4283295457, gstring, main.p_object, host); return call_ret.*; }  // 0
resolve_hostname_addresses :: (main: *IP, host: string) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("IP", "resolve_hostname_addresses", 773767525, PackedStringArray, main.p_object, host); return call_ret.*; }  // 1
resolve_hostname_queue_item :: (main: *IP, host: string) -> int { call_ret := cast(*int) sys_call("IP", "resolve_hostname_queue_item", 1749894742, int, main.p_object, host); return call_ret.*; }  // 2
get_resolve_item_status :: (main: *IP, id: int) -> IP.ResolverStatus { call_ret := cast(*IP.ResolverStatus) sys_call("IP", "get_resolve_item_status", 3812250196, IP.ResolverStatus, main.p_object, id); return call_ret.*; }  // 3
get_resolve_item_address :: (main: *IP, id: int) -> gstring { call_ret := cast(*gstring) sys_call("IP", "get_resolve_item_address", 844755477, gstring, main.p_object, id); return call_ret.*; }  // 4
get_resolve_item_addresses :: (main: *IP, id: int) -> Array { call_ret := cast(*Array) sys_call("IP", "get_resolve_item_addresses", 663333327, Array, main.p_object, id); return call_ret.*; }  // 5
erase_resolve_item :: (main: *IP, id: int) { sys_call("IP", "erase_resolve_item", 1286410249, Nil, main.p_object, id);  }  // 6
get_local_addresses :: (main: *IP) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("IP", "get_local_addresses", 1139954409, PackedStringArray, main.p_object); return call_ret.*; }  // 7
get_local_interfaces :: (main: *IP) -> [] Dictionary { call_ret := cast(*[] Dictionary) sys_call("IP", "get_local_interfaces", 3995934104, [] Dictionary, main.p_object); return call_ret.*; }  // 8
clear_cache :: (main: *IP) { sys_call("IP", "clear_cache", 3005725572, Nil, main.p_object);  }  // 9

get_width :: (main: *Image) -> int { call_ret := cast(*int) sys_call("Image", "get_width", 3905245786, int, main.p_object); return call_ret.*; }  // 0
get_height :: (main: *Image) -> int { call_ret := cast(*int) sys_call("Image", "get_height", 3905245786, int, main.p_object); return call_ret.*; }  // 1
get_size :: (main: *Image) -> Vector2i { call_ret := cast(*Vector2i) sys_call("Image", "get_size", 3690982128, Vector2i, main.p_object); return call_ret.*; }  // 2
has_mipmaps :: (main: *Image) -> bool { call_ret := cast(*bool) sys_call("Image", "has_mipmaps", 36873697, bool, main.p_object); return call_ret.*; }  // 3
get_format :: (main: *Image) -> Image.Format { call_ret := cast(*Image.Format) sys_call("Image", "get_format", 3847873762, Image.Format, main.p_object); return call_ret.*; }  // 4
get_data :: (main: *Image) -> PackedByteArray { call_ret := cast(*PackedByteArray) sys_call("Image", "get_data", 2362200018, PackedByteArray, main.p_object); return call_ret.*; }  // 5
get_data_size :: (main: *Image) -> int { call_ret := cast(*int) sys_call("Image", "get_data_size", 3905245786, int, main.p_object); return call_ret.*; }  // 6
convert :: (main: *Image, format: Image.Format) { sys_call("Image", "convert", 2120693146, Nil, main.p_object, format);  }  // 7
get_mipmap_count :: (main: *Image) -> int { call_ret := cast(*int) sys_call("Image", "get_mipmap_count", 3905245786, int, main.p_object); return call_ret.*; }  // 8
get_mipmap_offset :: (main: *Image, mipmap: int) -> int { call_ret := cast(*int) sys_call("Image", "get_mipmap_offset", 923996154, int, main.p_object, mipmap); return call_ret.*; }  // 9
resize_to_po2 :: (main: *Image) { sys_call("Image", "resize_to_po2", 4189212329, Nil, main.p_object);  }  // 10
resize :: (main: *Image, width: int, height: int) { sys_call("Image", "resize", 994498151, Nil, main.p_object, width, height);  }  // 11
shrink_x2 :: (main: *Image) { sys_call("Image", "shrink_x2", 3218959716, Nil, main.p_object);  }  // 12
crop :: (main: *Image, width: int, height: int) { sys_call("Image", "crop", 3937882851, Nil, main.p_object, width, height);  }  // 13
flip_x :: (main: *Image) { sys_call("Image", "flip_x", 3218959716, Nil, main.p_object);  }  // 14
flip_y :: (main: *Image) { sys_call("Image", "flip_y", 3218959716, Nil, main.p_object);  }  // 15
generate_mipmaps :: (main: *Image) -> Error { call_ret := cast(*Error) sys_call("Image", "generate_mipmaps", 1633102583, Error, main.p_object); return call_ret.*; }  // 16
clear_mipmaps :: (main: *Image) { sys_call("Image", "clear_mipmaps", 3218959716, Nil, main.p_object);  }  // 17
create :: (main: *Image, width: int, height: int, use_mipmaps: bool, format: Image.Format) -> *Image { call_ret := cast(*Image) sys_call("Image", "create", 986942177, Image, main.p_object, width, height, use_mipmaps, format); return call_ret; }  // 18
create_empty :: (main: *Image, width: int, height: int, use_mipmaps: bool, format: Image.Format) -> *Image { call_ret := cast(*Image) sys_call("Image", "create_empty", 986942177, Image, main.p_object, width, height, use_mipmaps, format); return call_ret; }  // 19
create_from_data :: (main: *Image, width: int, height: int, use_mipmaps: bool, format: Image.Format, data: PackedByteArray) -> *Image { call_ret := cast(*Image) sys_call("Image", "create_from_data", 299398494, Image, main.p_object, width, height, use_mipmaps, format, data); return call_ret; }  // 20
set_data :: (main: *Image, width: int, height: int, use_mipmaps: bool, format: Image.Format, data: PackedByteArray) { sys_call("Image", "set_data", 2740482212, Nil, main.p_object, width, height, use_mipmaps, format, data);  }  // 21
is_empty :: (main: *Image) -> bool { call_ret := cast(*bool) sys_call("Image", "is_empty", 36873697, bool, main.p_object); return call_ret.*; }  // 22
load :: (main: *Image, path: string) -> Error { call_ret := cast(*Error) sys_call("Image", "load", 166001499, Error, main.p_object, path); return call_ret.*; }  // 23
load_from_file :: (main: *Image, path: string) -> *Image { call_ret := cast(*Image) sys_call("Image", "load_from_file", 736337515, Image, main.p_object, path); return call_ret; }  // 24
save_png :: (main: *Image, path: string) -> Error { call_ret := cast(*Error) sys_call("Image", "save_png", 2113323047, Error, main.p_object, path); return call_ret.*; }  // 25
save_png_to_buffer :: (main: *Image) -> PackedByteArray { call_ret := cast(*PackedByteArray) sys_call("Image", "save_png_to_buffer", 2362200018, PackedByteArray, main.p_object); return call_ret.*; }  // 26
save_jpg :: (main: *Image, path: string) -> Error { call_ret := cast(*Error) sys_call("Image", "save_jpg", 2800019068, Error, main.p_object, path); return call_ret.*; }  // 27
save_jpg_to_buffer :: (main: *Image) -> PackedByteArray { call_ret := cast(*PackedByteArray) sys_call("Image", "save_jpg_to_buffer", 592235273, PackedByteArray, main.p_object); return call_ret.*; }  // 28
save_exr :: (main: *Image, path: string) -> Error { call_ret := cast(*Error) sys_call("Image", "save_exr", 3108122999, Error, main.p_object, path); return call_ret.*; }  // 29
save_exr_to_buffer :: (main: *Image) -> PackedByteArray { call_ret := cast(*PackedByteArray) sys_call("Image", "save_exr_to_buffer", 3178917920, PackedByteArray, main.p_object); return call_ret.*; }  // 30
save_webp :: (main: *Image, path: string) -> Error { call_ret := cast(*Error) sys_call("Image", "save_webp", 2781156876, Error, main.p_object, path); return call_ret.*; }  // 31
save_webp_to_buffer :: (main: *Image) -> PackedByteArray { call_ret := cast(*PackedByteArray) sys_call("Image", "save_webp_to_buffer", 1214628238, PackedByteArray, main.p_object); return call_ret.*; }  // 32
detect_alpha :: (main: *Image) -> Image.AlphaMode { call_ret := cast(*Image.AlphaMode) sys_call("Image", "detect_alpha", 2030116505, Image.AlphaMode, main.p_object); return call_ret.*; }  // 33
is_invisible :: (main: *Image) -> bool { call_ret := cast(*bool) sys_call("Image", "is_invisible", 36873697, bool, main.p_object); return call_ret.*; }  // 34
detect_used_channels :: (main: *Image) -> Image.UsedChannels { call_ret := cast(*Image.UsedChannels) sys_call("Image", "detect_used_channels", 2703139984, Image.UsedChannels, main.p_object); return call_ret.*; }  // 35
compress :: (main: *Image, mode: Image.CompressMode) -> Error { call_ret := cast(*Error) sys_call("Image", "compress", 2975424957, Error, main.p_object, mode); return call_ret.*; }  // 36
compress_from_channels :: (main: *Image, mode: Image.CompressMode, channels: Image.UsedChannels) -> Error { call_ret := cast(*Error) sys_call("Image", "compress_from_channels", 4212890953, Error, main.p_object, mode, channels); return call_ret.*; }  // 37
decompress :: (main: *Image) -> Error { call_ret := cast(*Error) sys_call("Image", "decompress", 166280745, Error, main.p_object); return call_ret.*; }  // 38
is_compressed :: (main: *Image) -> bool { call_ret := cast(*bool) sys_call("Image", "is_compressed", 36873697, bool, main.p_object); return call_ret.*; }  // 39
rotate_90 :: (main: *Image, direction: ClockDirection) { sys_call("Image", "rotate_90", 1901204267, Nil, main.p_object, direction);  }  // 40
rotate_180 :: (main: *Image) { sys_call("Image", "rotate_180", 3218959716, Nil, main.p_object);  }  // 41
fix_alpha_edges :: (main: *Image) { sys_call("Image", "fix_alpha_edges", 3218959716, Nil, main.p_object);  }  // 42
premultiply_alpha :: (main: *Image) { sys_call("Image", "premultiply_alpha", 3218959716, Nil, main.p_object);  }  // 43
srgb_to_linear :: (main: *Image) { sys_call("Image", "srgb_to_linear", 3218959716, Nil, main.p_object);  }  // 44
linear_to_srgb :: (main: *Image) { sys_call("Image", "linear_to_srgb", 3218959716, Nil, main.p_object);  }  // 45
normal_map_to_xy :: (main: *Image) { sys_call("Image", "normal_map_to_xy", 3218959716, Nil, main.p_object);  }  // 46
rgbe_to_srgb :: (main: *Image) -> *Image { call_ret := cast(*Image) sys_call("Image", "rgbe_to_srgb", 564927088, Image, main.p_object); return call_ret; }  // 47
bump_map_to_normal_map :: (main: *Image) { sys_call("Image", "bump_map_to_normal_map", 3423495036, Nil, main.p_object);  }  // 48
compute_image_metrics :: (main: *Image, compared_image: Image, use_luma: bool) -> Dictionary { call_ret := cast(*Dictionary) sys_call("Image", "compute_image_metrics", 3080961247, Dictionary, main.p_object, compared_image, use_luma); return call_ret.*; }  // 49
blit_rect :: (main: *Image, src: Image, src_rect: Rect2i, dst: Vector2i) { sys_call("Image", "blit_rect", 2903928755, Nil, main.p_object, src, src_rect, dst);  }  // 50
blit_rect_mask :: (main: *Image, src: Image, mask: Image, src_rect: Rect2i, dst: Vector2i) { sys_call("Image", "blit_rect_mask", 3383581145, Nil, main.p_object, src, mask, src_rect, dst);  }  // 51
blend_rect :: (main: *Image, src: Image, src_rect: Rect2i, dst: Vector2i) { sys_call("Image", "blend_rect", 2903928755, Nil, main.p_object, src, src_rect, dst);  }  // 52
blend_rect_mask :: (main: *Image, src: Image, mask: Image, src_rect: Rect2i, dst: Vector2i) { sys_call("Image", "blend_rect_mask", 3383581145, Nil, main.p_object, src, mask, src_rect, dst);  }  // 53
fill :: (main: *Image, color: Color) { sys_call("Image", "fill", 2920490490, Nil, main.p_object, color);  }  // 54
fill_rect :: (main: *Image, rect: Rect2i, color: Color) { sys_call("Image", "fill_rect", 514693913, Nil, main.p_object, rect, color);  }  // 55
get_used_rect :: (main: *Image) -> Rect2i { call_ret := cast(*Rect2i) sys_call("Image", "get_used_rect", 410525958, Rect2i, main.p_object); return call_ret.*; }  // 56
get_region :: (main: *Image, region: Rect2i) -> *Image { call_ret := cast(*Image) sys_call("Image", "get_region", 2601441065, Image, main.p_object, region); return call_ret; }  // 57
copy_from :: (main: *Image, src: Image) { sys_call("Image", "copy_from", 532598488, Nil, main.p_object, src);  }  // 58
get_pixelv :: (main: *Image, point: Vector2i) -> Color { call_ret := cast(*Color) sys_call("Image", "get_pixelv", 1532707496, Color, main.p_object, point); return call_ret.*; }  // 59
get_pixel :: (main: *Image, x: int, y: int) -> Color { call_ret := cast(*Color) sys_call("Image", "get_pixel", 2165839948, Color, main.p_object, x, y); return call_ret.*; }  // 60
set_pixelv :: (main: *Image, point: Vector2i, color: Color) { sys_call("Image", "set_pixelv", 287851464, Nil, main.p_object, point, color);  }  // 61
set_pixel :: (main: *Image, x: int, y: int, color: Color) { sys_call("Image", "set_pixel", 3733378741, Nil, main.p_object, x, y, color);  }  // 62
adjust_bcs :: (main: *Image, brightness: float, contrast: float, saturation: float) { sys_call("Image", "adjust_bcs", 2385087082, Nil, main.p_object, brightness, contrast, saturation);  }  // 63
load_png_from_buffer :: (main: *Image, buffer: PackedByteArray) -> Error { call_ret := cast(*Error) sys_call("Image", "load_png_from_buffer", 680677267, Error, main.p_object, buffer); return call_ret.*; }  // 64
load_jpg_from_buffer :: (main: *Image, buffer: PackedByteArray) -> Error { call_ret := cast(*Error) sys_call("Image", "load_jpg_from_buffer", 680677267, Error, main.p_object, buffer); return call_ret.*; }  // 65
load_webp_from_buffer :: (main: *Image, buffer: PackedByteArray) -> Error { call_ret := cast(*Error) sys_call("Image", "load_webp_from_buffer", 680677267, Error, main.p_object, buffer); return call_ret.*; }  // 66
load_tga_from_buffer :: (main: *Image, buffer: PackedByteArray) -> Error { call_ret := cast(*Error) sys_call("Image", "load_tga_from_buffer", 680677267, Error, main.p_object, buffer); return call_ret.*; }  // 67
load_bmp_from_buffer :: (main: *Image, buffer: PackedByteArray) -> Error { call_ret := cast(*Error) sys_call("Image", "load_bmp_from_buffer", 680677267, Error, main.p_object, buffer); return call_ret.*; }  // 68
load_ktx_from_buffer :: (main: *Image, buffer: PackedByteArray) -> Error { call_ret := cast(*Error) sys_call("Image", "load_ktx_from_buffer", 680677267, Error, main.p_object, buffer); return call_ret.*; }  // 69
load_svg_from_buffer :: (main: *Image, buffer: PackedByteArray) -> Error { call_ret := cast(*Error) sys_call("Image", "load_svg_from_buffer", 311853421, Error, main.p_object, buffer); return call_ret.*; }  // 70
load_svg_from_string :: (main: *Image, svg_str: string) -> Error { call_ret := cast(*Error) sys_call("Image", "load_svg_from_string", 3254053600, Error, main.p_object, svg_str); return call_ret.*; }  // 71


add_format_loader :: (main: *ImageFormatLoaderExtension) { sys_call("ImageFormatLoaderExtension", "add_format_loader", 3218959716, Nil, main.p_object);  }  // 2
remove_format_loader :: (main: *ImageFormatLoaderExtension) { sys_call("ImageFormatLoaderExtension", "remove_format_loader", 3218959716, Nil, main.p_object);  }  // 3

create_from_image :: (main: *ImageTexture, image: Image) -> *ImageTexture { call_ret := cast(*ImageTexture) sys_call("ImageTexture", "create_from_image", 2775144163, ImageTexture, main.p_object, image); return call_ret; }  // 0
get_format :: (main: *ImageTexture) -> Image.Format { call_ret := cast(*Image.Format) sys_call("ImageTexture", "get_format", 3847873762, Image.Format, main.p_object); return call_ret.*; }  // 1
set_image :: (main: *ImageTexture, image: Image) { sys_call("ImageTexture", "set_image", 532598488, Nil, main.p_object, image);  }  // 2
update :: (main: *ImageTexture, image: Image) { sys_call("ImageTexture", "update", 532598488, Nil, main.p_object, image);  }  // 3
set_size_override :: (main: *ImageTexture, size: Vector2i) { sys_call("ImageTexture", "set_size_override", 1130785943, Nil, main.p_object, size);  }  // 4

create :: (main: *ImageTexture3D, format: Image.Format, width: int, height: int, depth: int, use_mipmaps: bool, data: [] Image) -> Error { call_ret := cast(*Error) sys_call("ImageTexture3D", "create", 1130379827, Error, main.p_object, format, width, height, depth, use_mipmaps, data); return call_ret.*; }  // 0
update :: (main: *ImageTexture3D, data: [] Image) { sys_call("ImageTexture3D", "update", 381264803, Nil, main.p_object, data);  }  // 1

create_from_images :: (main: *ImageTextureLayered, images: [] Image) -> Error { call_ret := cast(*Error) sys_call("ImageTextureLayered", "create_from_images", 2785773503, Error, main.p_object, images); return call_ret.*; }  // 0
update_layer :: (main: *ImageTextureLayered, image: Image, layer: int) { sys_call("ImageTextureLayered", "update_layer", 3331733361, Nil, main.p_object, image, layer);  }  // 1

surface_begin :: (main: *ImmediateMesh, primitive: Mesh.PrimitiveType) { sys_call("ImmediateMesh", "surface_begin", 2794442543, Nil, main.p_object, primitive);  }  // 0
surface_set_color :: (main: *ImmediateMesh, color: Color) { sys_call("ImmediateMesh", "surface_set_color", 2920490490, Nil, main.p_object, color);  }  // 1
surface_set_normal :: (main: *ImmediateMesh, normal: Vector3) { sys_call("ImmediateMesh", "surface_set_normal", 3460891852, Nil, main.p_object, normal);  }  // 2
surface_set_tangent :: (main: *ImmediateMesh, tangent: Plane) { sys_call("ImmediateMesh", "surface_set_tangent", 3505987427, Nil, main.p_object, tangent);  }  // 3
surface_set_uv :: (main: *ImmediateMesh, uv: Vector2) { sys_call("ImmediateMesh", "surface_set_uv", 743155724, Nil, main.p_object, uv);  }  // 4
surface_set_uv2 :: (main: *ImmediateMesh, uv2: Vector2) { sys_call("ImmediateMesh", "surface_set_uv2", 743155724, Nil, main.p_object, uv2);  }  // 5
surface_add_vertex :: (main: *ImmediateMesh, vertex: Vector3) { sys_call("ImmediateMesh", "surface_add_vertex", 3460891852, Nil, main.p_object, vertex);  }  // 6
surface_add_vertex_2d :: (main: *ImmediateMesh, vertex: Vector2) { sys_call("ImmediateMesh", "surface_add_vertex_2d", 743155724, Nil, main.p_object, vertex);  }  // 7
surface_end :: (main: *ImmediateMesh) { sys_call("ImmediateMesh", "surface_end", 3218959716, Nil, main.p_object);  }  // 8
clear_surfaces :: (main: *ImmediateMesh) { sys_call("ImmediateMesh", "clear_surfaces", 3218959716, Nil, main.p_object);  }  // 9

add_blend_shape :: (main: *ImporterMesh, name: string) { sys_call("ImporterMesh", "add_blend_shape", 83702148, Nil, main.p_object, name);  }  // 0
get_blend_shape_count :: (main: *ImporterMesh) -> int { call_ret := cast(*int) sys_call("ImporterMesh", "get_blend_shape_count", 3905245786, int, main.p_object); return call_ret.*; }  // 1
get_blend_shape_name :: (main: *ImporterMesh, blend_shape_idx: int) -> gstring { call_ret := cast(*gstring) sys_call("ImporterMesh", "get_blend_shape_name", 844755477, gstring, main.p_object, blend_shape_idx); return call_ret.*; }  // 2
set_blend_shape_mode :: (main: *ImporterMesh, mode: Mesh.BlendShapeMode) { sys_call("ImporterMesh", "set_blend_shape_mode", 227983991, Nil, main.p_object, mode);  }  // 3
get_blend_shape_mode :: (main: *ImporterMesh) -> Mesh.BlendShapeMode { call_ret := cast(*Mesh.BlendShapeMode) sys_call("ImporterMesh", "get_blend_shape_mode", 836485024, Mesh.BlendShapeMode, main.p_object); return call_ret.*; }  // 4
add_surface :: (main: *ImporterMesh, primitive: Mesh.PrimitiveType, arrays: Array) { sys_call("ImporterMesh", "add_surface", 1740448849, Nil, main.p_object, primitive, arrays);  }  // 5
get_surface_count :: (main: *ImporterMesh) -> int { call_ret := cast(*int) sys_call("ImporterMesh", "get_surface_count", 3905245786, int, main.p_object); return call_ret.*; }  // 6
get_surface_primitive_type :: (main: *ImporterMesh, surface_idx: int) -> Mesh.PrimitiveType { call_ret := cast(*Mesh.PrimitiveType) sys_call("ImporterMesh", "get_surface_primitive_type", 3552571330, Mesh.PrimitiveType, main.p_object, surface_idx); return call_ret.*; }  // 7
get_surface_name :: (main: *ImporterMesh, surface_idx: int) -> gstring { call_ret := cast(*gstring) sys_call("ImporterMesh", "get_surface_name", 844755477, gstring, main.p_object, surface_idx); return call_ret.*; }  // 8
get_surface_arrays :: (main: *ImporterMesh, surface_idx: int) -> Array { call_ret := cast(*Array) sys_call("ImporterMesh", "get_surface_arrays", 663333327, Array, main.p_object, surface_idx); return call_ret.*; }  // 9
get_surface_blend_shape_arrays :: (main: *ImporterMesh, surface_idx: int, blend_shape_idx: int) -> Array { call_ret := cast(*Array) sys_call("ImporterMesh", "get_surface_blend_shape_arrays", 2345056839, Array, main.p_object, surface_idx, blend_shape_idx); return call_ret.*; }  // 10
get_surface_lod_count :: (main: *ImporterMesh, surface_idx: int) -> int { call_ret := cast(*int) sys_call("ImporterMesh", "get_surface_lod_count", 923996154, int, main.p_object, surface_idx); return call_ret.*; }  // 11
get_surface_lod_size :: (main: *ImporterMesh, surface_idx: int, lod_idx: int) -> float { call_ret := cast(*float) sys_call("ImporterMesh", "get_surface_lod_size", 3085491603, float, main.p_object, surface_idx, lod_idx); return call_ret.*; }  // 12
get_surface_lod_indices :: (main: *ImporterMesh, surface_idx: int, lod_idx: int) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("ImporterMesh", "get_surface_lod_indices", 1265128013, PackedInt32Array, main.p_object, surface_idx, lod_idx); return call_ret.*; }  // 13
get_surface_material :: (main: *ImporterMesh, surface_idx: int) -> *Material { call_ret := cast(*Material) sys_call("ImporterMesh", "get_surface_material", 2897466400, Material, main.p_object, surface_idx); return call_ret; }  // 14
get_surface_format :: (main: *ImporterMesh, surface_idx: int) -> int { call_ret := cast(*int) sys_call("ImporterMesh", "get_surface_format", 923996154, int, main.p_object, surface_idx); return call_ret.*; }  // 15
set_surface_name :: (main: *ImporterMesh, surface_idx: int, name: string) { sys_call("ImporterMesh", "set_surface_name", 501894301, Nil, main.p_object, surface_idx, name);  }  // 16
set_surface_material :: (main: *ImporterMesh, surface_idx: int, material: Material) { sys_call("ImporterMesh", "set_surface_material", 3671737478, Nil, main.p_object, surface_idx, material);  }  // 17
generate_lods :: (main: *ImporterMesh, normal_merge_angle: float, normal_split_angle: float, bone_transform_array: Array) { sys_call("ImporterMesh", "generate_lods", 2491878677, Nil, main.p_object, normal_merge_angle, normal_split_angle, bone_transform_array);  }  // 18
get_mesh :: (main: *ImporterMesh) -> *ArrayMesh { call_ret := cast(*ArrayMesh) sys_call("ImporterMesh", "get_mesh", 1457573577, ArrayMesh, main.p_object); return call_ret; }  // 19
clear :: (main: *ImporterMesh) { sys_call("ImporterMesh", "clear", 3218959716, Nil, main.p_object);  }  // 20
set_lightmap_size_hint :: (main: *ImporterMesh, size: Vector2i) { sys_call("ImporterMesh", "set_lightmap_size_hint", 1130785943, Nil, main.p_object, size);  }  // 21
get_lightmap_size_hint :: (main: *ImporterMesh) -> Vector2i { call_ret := cast(*Vector2i) sys_call("ImporterMesh", "get_lightmap_size_hint", 3690982128, Vector2i, main.p_object); return call_ret.*; }  // 22

set_mesh :: (main: *ImporterMeshInstance3D, mesh: ImporterMesh) { sys_call("ImporterMeshInstance3D", "set_mesh", 2255166972, Nil, main.p_object, mesh);  }  // 0
get_mesh :: (main: *ImporterMeshInstance3D) -> *ImporterMesh { call_ret := cast(*ImporterMesh) sys_call("ImporterMeshInstance3D", "get_mesh", 3161779525, ImporterMesh, main.p_object); return call_ret; }  // 1
set_skin :: (main: *ImporterMeshInstance3D, skin: Skin) { sys_call("ImporterMeshInstance3D", "set_skin", 3971435618, Nil, main.p_object, skin);  }  // 2
get_skin :: (main: *ImporterMeshInstance3D) -> *Skin { call_ret := cast(*Skin) sys_call("ImporterMeshInstance3D", "get_skin", 2074563878, Skin, main.p_object); return call_ret; }  // 3
set_skeleton_path :: (main: *ImporterMeshInstance3D, skeleton_path: string) { sys_call("ImporterMeshInstance3D", "set_skeleton_path", 1348162250, Nil, main.p_object, skeleton_path);  }  // 4
get_skeleton_path :: (main: *ImporterMeshInstance3D) -> NodePath { call_ret := cast(*NodePath) sys_call("ImporterMeshInstance3D", "get_skeleton_path", 4075236667, NodePath, main.p_object); return call_ret.*; }  // 5
set_layer_mask :: (main: *ImporterMeshInstance3D, layer_mask: int) { sys_call("ImporterMeshInstance3D", "set_layer_mask", 1286410249, Nil, main.p_object, layer_mask);  }  // 6
get_layer_mask :: (main: *ImporterMeshInstance3D) -> int { call_ret := cast(*int) sys_call("ImporterMeshInstance3D", "get_layer_mask", 3905245786, int, main.p_object); return call_ret.*; }  // 7
set_cast_shadows_setting :: (main: *ImporterMeshInstance3D, shadow_casting_setting: GeometryInstance3D.ShadowCastingSetting) { sys_call("ImporterMeshInstance3D", "set_cast_shadows_setting", 856677339, Nil, main.p_object, shadow_casting_setting);  }  // 8
get_cast_shadows_setting :: (main: *ImporterMeshInstance3D) -> GeometryInstance3D.ShadowCastingSetting { call_ret := cast(*GeometryInstance3D.ShadowCastingSetting) sys_call("ImporterMeshInstance3D", "get_cast_shadows_setting", 3383019359, GeometryInstance3D.ShadowCastingSetting, main.p_object); return call_ret.*; }  // 9
set_visibility_range_end_margin :: (main: *ImporterMeshInstance3D, distance: float) { sys_call("ImporterMeshInstance3D", "set_visibility_range_end_margin", 373806689, Nil, main.p_object, distance);  }  // 10
get_visibility_range_end_margin :: (main: *ImporterMeshInstance3D) -> float { call_ret := cast(*float) sys_call("ImporterMeshInstance3D", "get_visibility_range_end_margin", 1740695150, float, main.p_object); return call_ret.*; }  // 11
set_visibility_range_end :: (main: *ImporterMeshInstance3D, distance: float) { sys_call("ImporterMeshInstance3D", "set_visibility_range_end", 373806689, Nil, main.p_object, distance);  }  // 12
get_visibility_range_end :: (main: *ImporterMeshInstance3D) -> float { call_ret := cast(*float) sys_call("ImporterMeshInstance3D", "get_visibility_range_end", 1740695150, float, main.p_object); return call_ret.*; }  // 13
set_visibility_range_begin_margin :: (main: *ImporterMeshInstance3D, distance: float) { sys_call("ImporterMeshInstance3D", "set_visibility_range_begin_margin", 373806689, Nil, main.p_object, distance);  }  // 14
get_visibility_range_begin_margin :: (main: *ImporterMeshInstance3D) -> float { call_ret := cast(*float) sys_call("ImporterMeshInstance3D", "get_visibility_range_begin_margin", 1740695150, float, main.p_object); return call_ret.*; }  // 15
set_visibility_range_begin :: (main: *ImporterMeshInstance3D, distance: float) { sys_call("ImporterMeshInstance3D", "set_visibility_range_begin", 373806689, Nil, main.p_object, distance);  }  // 16
get_visibility_range_begin :: (main: *ImporterMeshInstance3D) -> float { call_ret := cast(*float) sys_call("ImporterMeshInstance3D", "get_visibility_range_begin", 1740695150, float, main.p_object); return call_ret.*; }  // 17
set_visibility_range_fade_mode :: (main: *ImporterMeshInstance3D, mode: GeometryInstance3D.VisibilityRangeFadeMode) { sys_call("ImporterMeshInstance3D", "set_visibility_range_fade_mode", 1440117808, Nil, main.p_object, mode);  }  // 18
get_visibility_range_fade_mode :: (main: *ImporterMeshInstance3D) -> GeometryInstance3D.VisibilityRangeFadeMode { call_ret := cast(*GeometryInstance3D.VisibilityRangeFadeMode) sys_call("ImporterMeshInstance3D", "get_visibility_range_fade_mode", 2067221882, GeometryInstance3D.VisibilityRangeFadeMode, main.p_object); return call_ret.*; }  // 19

is_anything_pressed :: (main: *Input) -> bool { call_ret := cast(*bool) sys_call("Input", "is_anything_pressed", 36873697, bool, main.p_object); return call_ret.*; }  // 0
is_key_pressed :: (main: *Input, keycode: Key) -> bool { call_ret := cast(*bool) sys_call("Input", "is_key_pressed", 1938909964, bool, main.p_object, keycode); return call_ret.*; }  // 1
is_physical_key_pressed :: (main: *Input, keycode: Key) -> bool { call_ret := cast(*bool) sys_call("Input", "is_physical_key_pressed", 1938909964, bool, main.p_object, keycode); return call_ret.*; }  // 2
is_key_label_pressed :: (main: *Input, keycode: Key) -> bool { call_ret := cast(*bool) sys_call("Input", "is_key_label_pressed", 1938909964, bool, main.p_object, keycode); return call_ret.*; }  // 3
is_mouse_button_pressed :: (main: *Input, button: MouseButton) -> bool { call_ret := cast(*bool) sys_call("Input", "is_mouse_button_pressed", 1821097125, bool, main.p_object, button); return call_ret.*; }  // 4
is_joy_button_pressed :: (main: *Input, device: int, button: JoyButton) -> bool { call_ret := cast(*bool) sys_call("Input", "is_joy_button_pressed", 787208542, bool, main.p_object, device, button); return call_ret.*; }  // 5
is_action_pressed :: (main: *Input, action: string) -> bool { call_ret := cast(*bool) sys_call("Input", "is_action_pressed", 1558498928, bool, main.p_object, action); return call_ret.*; }  // 6
is_action_just_pressed :: (main: *Input, action: string) -> bool { call_ret := cast(*bool) sys_call("Input", "is_action_just_pressed", 1558498928, bool, main.p_object, action); return call_ret.*; }  // 7
is_action_just_released :: (main: *Input, action: string) -> bool { call_ret := cast(*bool) sys_call("Input", "is_action_just_released", 1558498928, bool, main.p_object, action); return call_ret.*; }  // 8
get_action_strength :: (main: *Input, action: string) -> float { call_ret := cast(*float) sys_call("Input", "get_action_strength", 801543509, float, main.p_object, action); return call_ret.*; }  // 9
get_action_raw_strength :: (main: *Input, action: string) -> float { call_ret := cast(*float) sys_call("Input", "get_action_raw_strength", 801543509, float, main.p_object, action); return call_ret.*; }  // 10
get_axis :: (main: *Input, negative_action: string, positive_action: string) -> float { call_ret := cast(*float) sys_call("Input", "get_axis", 1958752504, float, main.p_object, negative_action, positive_action); return call_ret.*; }  // 11
get_vector :: (main: *Input, negative_x: string, positive_x: string, negative_y: string, positive_y: string) -> Vector2 { call_ret := cast(*Vector2) sys_call("Input", "get_vector", 2479607902, Vector2, main.p_object, negative_x, positive_x, negative_y, positive_y); return call_ret.*; }  // 12
add_joy_mapping :: (main: *Input, mapping: string) { sys_call("Input", "add_joy_mapping", 1168363258, Nil, main.p_object, mapping);  }  // 13
remove_joy_mapping :: (main: *Input, guid: string) { sys_call("Input", "remove_joy_mapping", 83702148, Nil, main.p_object, guid);  }  // 14
is_joy_known :: (main: *Input, device: int) -> bool { call_ret := cast(*bool) sys_call("Input", "is_joy_known", 3067735520, bool, main.p_object, device); return call_ret.*; }  // 15
get_joy_axis :: (main: *Input, device: int, axis: JoyAxis) -> float { call_ret := cast(*float) sys_call("Input", "get_joy_axis", 4063175957, float, main.p_object, device, axis); return call_ret.*; }  // 16
get_joy_name :: (main: *Input, device: int) -> gstring { call_ret := cast(*gstring) sys_call("Input", "get_joy_name", 990163283, gstring, main.p_object, device); return call_ret.*; }  // 17
get_joy_guid :: (main: *Input, device: int) -> gstring { call_ret := cast(*gstring) sys_call("Input", "get_joy_guid", 844755477, gstring, main.p_object, device); return call_ret.*; }  // 18
get_joy_info :: (main: *Input, device: int) -> Dictionary { call_ret := cast(*Dictionary) sys_call("Input", "get_joy_info", 3485342025, Dictionary, main.p_object, device); return call_ret.*; }  // 19
should_ignore_device :: (main: *Input, vendor_id: int, product_id: int) -> bool { call_ret := cast(*bool) sys_call("Input", "should_ignore_device", 2522259332, bool, main.p_object, vendor_id, product_id); return call_ret.*; }  // 20
get_connected_joypads :: (main: *Input) -> [] int { call_ret := cast(*[] int) sys_call("Input", "get_connected_joypads", 2915620761, [] int, main.p_object); return call_ret.*; }  // 21
get_joy_vibration_strength :: (main: *Input, device: int) -> Vector2 { call_ret := cast(*Vector2) sys_call("Input", "get_joy_vibration_strength", 3114997196, Vector2, main.p_object, device); return call_ret.*; }  // 22
get_joy_vibration_duration :: (main: *Input, device: int) -> float { call_ret := cast(*float) sys_call("Input", "get_joy_vibration_duration", 4025615559, float, main.p_object, device); return call_ret.*; }  // 23
start_joy_vibration :: (main: *Input, device: int, weak_magnitude: float, strong_magnitude: float) { sys_call("Input", "start_joy_vibration", 2576575033, Nil, main.p_object, device, weak_magnitude, strong_magnitude);  }  // 24
stop_joy_vibration :: (main: *Input, device: int) { sys_call("Input", "stop_joy_vibration", 1286410249, Nil, main.p_object, device);  }  // 25
vibrate_handheld :: (main: *Input) { sys_call("Input", "vibrate_handheld", 544894297, Nil, main.p_object);  }  // 26
get_gravity :: (main: *Input) -> Vector3 { call_ret := cast(*Vector3) sys_call("Input", "get_gravity", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 27
get_accelerometer :: (main: *Input) -> Vector3 { call_ret := cast(*Vector3) sys_call("Input", "get_accelerometer", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 28
get_magnetometer :: (main: *Input) -> Vector3 { call_ret := cast(*Vector3) sys_call("Input", "get_magnetometer", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 29
get_gyroscope :: (main: *Input) -> Vector3 { call_ret := cast(*Vector3) sys_call("Input", "get_gyroscope", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 30
set_gravity :: (main: *Input, value: Vector3) { sys_call("Input", "set_gravity", 3460891852, Nil, main.p_object, value);  }  // 31
set_accelerometer :: (main: *Input, value: Vector3) { sys_call("Input", "set_accelerometer", 3460891852, Nil, main.p_object, value);  }  // 32
set_magnetometer :: (main: *Input, value: Vector3) { sys_call("Input", "set_magnetometer", 3460891852, Nil, main.p_object, value);  }  // 33
set_gyroscope :: (main: *Input, value: Vector3) { sys_call("Input", "set_gyroscope", 3460891852, Nil, main.p_object, value);  }  // 34
get_last_mouse_velocity :: (main: *Input) -> Vector2 { call_ret := cast(*Vector2) sys_call("Input", "get_last_mouse_velocity", 1497962370, Vector2, main.p_object); return call_ret.*; }  // 35
get_last_mouse_screen_velocity :: (main: *Input) -> Vector2 { call_ret := cast(*Vector2) sys_call("Input", "get_last_mouse_screen_velocity", 1497962370, Vector2, main.p_object); return call_ret.*; }  // 36
get_mouse_button_mask :: (main: *Input) -> MouseButtonMask { call_ret := cast(*MouseButtonMask) sys_call("Input", "get_mouse_button_mask", 2512161324, MouseButtonMask, main.p_object); return call_ret.*; }  // 37
set_mouse_mode :: (main: *Input, mode: Input.MouseMode) { sys_call("Input", "set_mouse_mode", 2228490894, Nil, main.p_object, mode);  }  // 38
get_mouse_mode :: (main: *Input) -> Input.MouseMode { call_ret := cast(*Input.MouseMode) sys_call("Input", "get_mouse_mode", 965286182, Input.MouseMode, main.p_object); return call_ret.*; }  // 39
warp_mouse :: (main: *Input, position: Vector2) { sys_call("Input", "warp_mouse", 743155724, Nil, main.p_object, position);  }  // 40
action_press :: (main: *Input, action: string) { sys_call("Input", "action_press", 1713091165, Nil, main.p_object, action);  }  // 41
action_release :: (main: *Input, action: string) { sys_call("Input", "action_release", 3304788590, Nil, main.p_object, action);  }  // 42
set_default_cursor_shape :: (main: *Input) { sys_call("Input", "set_default_cursor_shape", 2124816902, Nil, main.p_object);  }  // 43
get_current_cursor_shape :: (main: *Input) -> Input.CursorShape { call_ret := cast(*Input.CursorShape) sys_call("Input", "get_current_cursor_shape", 3455658929, Input.CursorShape, main.p_object); return call_ret.*; }  // 44
set_custom_mouse_cursor :: (main: *Input, image: Resource) { sys_call("Input", "set_custom_mouse_cursor", 703945977, Nil, main.p_object, image);  }  // 45
parse_input_event :: (main: *Input, event: InputEvent) { sys_call("Input", "parse_input_event", 3754044979, Nil, main.p_object, event);  }  // 46
set_use_accumulated_input :: (main: *Input, enable: bool) { sys_call("Input", "set_use_accumulated_input", 2586408642, Nil, main.p_object, enable);  }  // 47
is_using_accumulated_input :: (main: *Input) -> bool { call_ret := cast(*bool) sys_call("Input", "is_using_accumulated_input", 2240911060, bool, main.p_object); return call_ret.*; }  // 48
flush_buffered_events :: (main: *Input) { sys_call("Input", "flush_buffered_events", 3218959716, Nil, main.p_object);  }  // 49
set_emulate_mouse_from_touch :: (main: *Input, enable: bool) { sys_call("Input", "set_emulate_mouse_from_touch", 2586408642, Nil, main.p_object, enable);  }  // 50
is_emulating_mouse_from_touch :: (main: *Input) -> bool { call_ret := cast(*bool) sys_call("Input", "is_emulating_mouse_from_touch", 36873697, bool, main.p_object); return call_ret.*; }  // 51
set_emulate_touch_from_mouse :: (main: *Input, enable: bool) { sys_call("Input", "set_emulate_touch_from_mouse", 2586408642, Nil, main.p_object, enable);  }  // 52
is_emulating_touch_from_mouse :: (main: *Input) -> bool { call_ret := cast(*bool) sys_call("Input", "is_emulating_touch_from_mouse", 36873697, bool, main.p_object); return call_ret.*; }  // 53

set_device :: (main: *InputEvent, device: int) { sys_call("InputEvent", "set_device", 1286410249, Nil, main.p_object, device);  }  // 0
get_device :: (main: *InputEvent) -> int { call_ret := cast(*int) sys_call("InputEvent", "get_device", 3905245786, int, main.p_object); return call_ret.*; }  // 1
is_action :: (main: *InputEvent, action: string) -> bool { call_ret := cast(*bool) sys_call("InputEvent", "is_action", 1558498928, bool, main.p_object, action); return call_ret.*; }  // 2
is_action_pressed :: (main: *InputEvent, action: string) -> bool { call_ret := cast(*bool) sys_call("InputEvent", "is_action_pressed", 1631499404, bool, main.p_object, action); return call_ret.*; }  // 3
is_action_released :: (main: *InputEvent, action: string) -> bool { call_ret := cast(*bool) sys_call("InputEvent", "is_action_released", 1558498928, bool, main.p_object, action); return call_ret.*; }  // 4
get_action_strength :: (main: *InputEvent, action: string) -> float { call_ret := cast(*float) sys_call("InputEvent", "get_action_strength", 801543509, float, main.p_object, action); return call_ret.*; }  // 5
is_canceled :: (main: *InputEvent) -> bool { call_ret := cast(*bool) sys_call("InputEvent", "is_canceled", 36873697, bool, main.p_object); return call_ret.*; }  // 6
is_pressed :: (main: *InputEvent) -> bool { call_ret := cast(*bool) sys_call("InputEvent", "is_pressed", 36873697, bool, main.p_object); return call_ret.*; }  // 7
is_released :: (main: *InputEvent) -> bool { call_ret := cast(*bool) sys_call("InputEvent", "is_released", 36873697, bool, main.p_object); return call_ret.*; }  // 8
is_echo :: (main: *InputEvent) -> bool { call_ret := cast(*bool) sys_call("InputEvent", "is_echo", 36873697, bool, main.p_object); return call_ret.*; }  // 9
as_text :: (main: *InputEvent) -> gstring { call_ret := cast(*gstring) sys_call("InputEvent", "as_text", 201670096, gstring, main.p_object); return call_ret.*; }  // 10
is_match :: (main: *InputEvent, event: InputEvent) -> bool { call_ret := cast(*bool) sys_call("InputEvent", "is_match", 1754951977, bool, main.p_object, event); return call_ret.*; }  // 11
is_action_type :: (main: *InputEvent) -> bool { call_ret := cast(*bool) sys_call("InputEvent", "is_action_type", 36873697, bool, main.p_object); return call_ret.*; }  // 12
accumulate :: (main: *InputEvent, with_event: InputEvent) -> bool { call_ret := cast(*bool) sys_call("InputEvent", "accumulate", 1062211774, bool, main.p_object, with_event); return call_ret.*; }  // 13
xformed_by :: (main: *InputEvent, xform: Transform2D) -> *InputEvent { call_ret := cast(*InputEvent) sys_call("InputEvent", "xformed_by", 1282766827, InputEvent, main.p_object, xform); return call_ret; }  // 14

set_action :: (main: *InputEventAction, action: string) { sys_call("InputEventAction", "set_action", 3304788590, Nil, main.p_object, action);  }  // 0
get_action :: (main: *InputEventAction) -> StringName { call_ret := cast(*StringName) sys_call("InputEventAction", "get_action", 2002593661, StringName, main.p_object); return call_ret.*; }  // 1
set_pressed :: (main: *InputEventAction, pressed: bool) { sys_call("InputEventAction", "set_pressed", 2586408642, Nil, main.p_object, pressed);  }  // 2
set_strength :: (main: *InputEventAction, strength: float) { sys_call("InputEventAction", "set_strength", 373806689, Nil, main.p_object, strength);  }  // 3
get_strength :: (main: *InputEventAction) -> float { call_ret := cast(*float) sys_call("InputEventAction", "get_strength", 1740695150, float, main.p_object); return call_ret.*; }  // 4
set_event_index :: (main: *InputEventAction, index: int) { sys_call("InputEventAction", "set_event_index", 1286410249, Nil, main.p_object, index);  }  // 5
get_event_index :: (main: *InputEventAction) -> int { call_ret := cast(*int) sys_call("InputEventAction", "get_event_index", 3905245786, int, main.p_object); return call_ret.*; }  // 6

set_window_id :: (main: *InputEventFromWindow, id: int) { sys_call("InputEventFromWindow", "set_window_id", 1286410249, Nil, main.p_object, id);  }  // 0
get_window_id :: (main: *InputEventFromWindow) -> int { call_ret := cast(*int) sys_call("InputEventFromWindow", "get_window_id", 3905245786, int, main.p_object); return call_ret.*; }  // 1

set_position :: (main: *InputEventGesture, position: Vector2) { sys_call("InputEventGesture", "set_position", 743155724, Nil, main.p_object, position);  }  // 0
get_position :: (main: *InputEventGesture) -> Vector2 { call_ret := cast(*Vector2) sys_call("InputEventGesture", "get_position", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 1

set_button_index :: (main: *InputEventJoypadButton, button_index: JoyButton) { sys_call("InputEventJoypadButton", "set_button_index", 1466368136, Nil, main.p_object, button_index);  }  // 0
get_button_index :: (main: *InputEventJoypadButton) -> JoyButton { call_ret := cast(*JoyButton) sys_call("InputEventJoypadButton", "get_button_index", 595588182, JoyButton, main.p_object); return call_ret.*; }  // 1
set_pressure :: (main: *InputEventJoypadButton, pressure: float) { sys_call("InputEventJoypadButton", "set_pressure", 373806689, Nil, main.p_object, pressure);  }  // 2
get_pressure :: (main: *InputEventJoypadButton) -> float { call_ret := cast(*float) sys_call("InputEventJoypadButton", "get_pressure", 1740695150, float, main.p_object); return call_ret.*; }  // 3
set_pressed :: (main: *InputEventJoypadButton, pressed: bool) { sys_call("InputEventJoypadButton", "set_pressed", 2586408642, Nil, main.p_object, pressed);  }  // 4

set_axis :: (main: *InputEventJoypadMotion, axis: JoyAxis) { sys_call("InputEventJoypadMotion", "set_axis", 1332685170, Nil, main.p_object, axis);  }  // 0
get_axis :: (main: *InputEventJoypadMotion) -> JoyAxis { call_ret := cast(*JoyAxis) sys_call("InputEventJoypadMotion", "get_axis", 4019121683, JoyAxis, main.p_object); return call_ret.*; }  // 1
set_axis_value :: (main: *InputEventJoypadMotion, axis_value: float) { sys_call("InputEventJoypadMotion", "set_axis_value", 373806689, Nil, main.p_object, axis_value);  }  // 2
get_axis_value :: (main: *InputEventJoypadMotion) -> float { call_ret := cast(*float) sys_call("InputEventJoypadMotion", "get_axis_value", 1740695150, float, main.p_object); return call_ret.*; }  // 3

set_pressed :: (main: *InputEventKey, pressed: bool) { sys_call("InputEventKey", "set_pressed", 2586408642, Nil, main.p_object, pressed);  }  // 0
set_keycode :: (main: *InputEventKey, keycode: Key) { sys_call("InputEventKey", "set_keycode", 888074362, Nil, main.p_object, keycode);  }  // 1
get_keycode :: (main: *InputEventKey) -> Key { call_ret := cast(*Key) sys_call("InputEventKey", "get_keycode", 1585896689, Key, main.p_object); return call_ret.*; }  // 2
set_physical_keycode :: (main: *InputEventKey, physical_keycode: Key) { sys_call("InputEventKey", "set_physical_keycode", 888074362, Nil, main.p_object, physical_keycode);  }  // 3
get_physical_keycode :: (main: *InputEventKey) -> Key { call_ret := cast(*Key) sys_call("InputEventKey", "get_physical_keycode", 1585896689, Key, main.p_object); return call_ret.*; }  // 4
set_key_label :: (main: *InputEventKey, key_label: Key) { sys_call("InputEventKey", "set_key_label", 888074362, Nil, main.p_object, key_label);  }  // 5
get_key_label :: (main: *InputEventKey) -> Key { call_ret := cast(*Key) sys_call("InputEventKey", "get_key_label", 1585896689, Key, main.p_object); return call_ret.*; }  // 6
set_unicode :: (main: *InputEventKey, unicode: int) { sys_call("InputEventKey", "set_unicode", 1286410249, Nil, main.p_object, unicode);  }  // 7
get_unicode :: (main: *InputEventKey) -> int { call_ret := cast(*int) sys_call("InputEventKey", "get_unicode", 3905245786, int, main.p_object); return call_ret.*; }  // 8
set_location :: (main: *InputEventKey, location: KeyLocation) { sys_call("InputEventKey", "set_location", 634453155, Nil, main.p_object, location);  }  // 9
get_location :: (main: *InputEventKey) -> KeyLocation { call_ret := cast(*KeyLocation) sys_call("InputEventKey", "get_location", 211810873, KeyLocation, main.p_object); return call_ret.*; }  // 10
set_echo :: (main: *InputEventKey, echo: bool) { sys_call("InputEventKey", "set_echo", 2586408642, Nil, main.p_object, echo);  }  // 11
get_keycode_with_modifiers :: (main: *InputEventKey) -> Key { call_ret := cast(*Key) sys_call("InputEventKey", "get_keycode_with_modifiers", 1585896689, Key, main.p_object); return call_ret.*; }  // 12
get_physical_keycode_with_modifiers :: (main: *InputEventKey) -> Key { call_ret := cast(*Key) sys_call("InputEventKey", "get_physical_keycode_with_modifiers", 1585896689, Key, main.p_object); return call_ret.*; }  // 13
get_key_label_with_modifiers :: (main: *InputEventKey) -> Key { call_ret := cast(*Key) sys_call("InputEventKey", "get_key_label_with_modifiers", 1585896689, Key, main.p_object); return call_ret.*; }  // 14
as_text_keycode :: (main: *InputEventKey) -> gstring { call_ret := cast(*gstring) sys_call("InputEventKey", "as_text_keycode", 201670096, gstring, main.p_object); return call_ret.*; }  // 15
as_text_physical_keycode :: (main: *InputEventKey) -> gstring { call_ret := cast(*gstring) sys_call("InputEventKey", "as_text_physical_keycode", 201670096, gstring, main.p_object); return call_ret.*; }  // 16
as_text_key_label :: (main: *InputEventKey) -> gstring { call_ret := cast(*gstring) sys_call("InputEventKey", "as_text_key_label", 201670096, gstring, main.p_object); return call_ret.*; }  // 17
as_text_location :: (main: *InputEventKey) -> gstring { call_ret := cast(*gstring) sys_call("InputEventKey", "as_text_location", 201670096, gstring, main.p_object); return call_ret.*; }  // 18

set_channel :: (main: *InputEventMIDI, channel: int) { sys_call("InputEventMIDI", "set_channel", 1286410249, Nil, main.p_object, channel);  }  // 0
get_channel :: (main: *InputEventMIDI) -> int { call_ret := cast(*int) sys_call("InputEventMIDI", "get_channel", 3905245786, int, main.p_object); return call_ret.*; }  // 1
set_message :: (main: *InputEventMIDI, message: MIDIMessage) { sys_call("InputEventMIDI", "set_message", 1064271510, Nil, main.p_object, message);  }  // 2
get_message :: (main: *InputEventMIDI) -> MIDIMessage { call_ret := cast(*MIDIMessage) sys_call("InputEventMIDI", "get_message", 1936512097, MIDIMessage, main.p_object); return call_ret.*; }  // 3
set_pitch :: (main: *InputEventMIDI, pitch: int) { sys_call("InputEventMIDI", "set_pitch", 1286410249, Nil, main.p_object, pitch);  }  // 4
get_pitch :: (main: *InputEventMIDI) -> int { call_ret := cast(*int) sys_call("InputEventMIDI", "get_pitch", 3905245786, int, main.p_object); return call_ret.*; }  // 5
set_velocity :: (main: *InputEventMIDI, velocity: int) { sys_call("InputEventMIDI", "set_velocity", 1286410249, Nil, main.p_object, velocity);  }  // 6
get_velocity :: (main: *InputEventMIDI) -> int { call_ret := cast(*int) sys_call("InputEventMIDI", "get_velocity", 3905245786, int, main.p_object); return call_ret.*; }  // 7
set_instrument :: (main: *InputEventMIDI, instrument: int) { sys_call("InputEventMIDI", "set_instrument", 1286410249, Nil, main.p_object, instrument);  }  // 8
get_instrument :: (main: *InputEventMIDI) -> int { call_ret := cast(*int) sys_call("InputEventMIDI", "get_instrument", 3905245786, int, main.p_object); return call_ret.*; }  // 9
set_pressure :: (main: *InputEventMIDI, pressure: int) { sys_call("InputEventMIDI", "set_pressure", 1286410249, Nil, main.p_object, pressure);  }  // 10
get_pressure :: (main: *InputEventMIDI) -> int { call_ret := cast(*int) sys_call("InputEventMIDI", "get_pressure", 3905245786, int, main.p_object); return call_ret.*; }  // 11
set_controller_number :: (main: *InputEventMIDI, controller_number: int) { sys_call("InputEventMIDI", "set_controller_number", 1286410249, Nil, main.p_object, controller_number);  }  // 12
get_controller_number :: (main: *InputEventMIDI) -> int { call_ret := cast(*int) sys_call("InputEventMIDI", "get_controller_number", 3905245786, int, main.p_object); return call_ret.*; }  // 13
set_controller_value :: (main: *InputEventMIDI, controller_value: int) { sys_call("InputEventMIDI", "set_controller_value", 1286410249, Nil, main.p_object, controller_value);  }  // 14
get_controller_value :: (main: *InputEventMIDI) -> int { call_ret := cast(*int) sys_call("InputEventMIDI", "get_controller_value", 3905245786, int, main.p_object); return call_ret.*; }  // 15

set_factor :: (main: *InputEventMagnifyGesture, factor: float) { sys_call("InputEventMagnifyGesture", "set_factor", 373806689, Nil, main.p_object, factor);  }  // 0
get_factor :: (main: *InputEventMagnifyGesture) -> float { call_ret := cast(*float) sys_call("InputEventMagnifyGesture", "get_factor", 1740695150, float, main.p_object); return call_ret.*; }  // 1

set_button_mask :: (main: *InputEventMouse, button_mask: MouseButtonMask) { sys_call("InputEventMouse", "set_button_mask", 3950145251, Nil, main.p_object, button_mask);  }  // 0
get_button_mask :: (main: *InputEventMouse) -> MouseButtonMask { call_ret := cast(*MouseButtonMask) sys_call("InputEventMouse", "get_button_mask", 2512161324, MouseButtonMask, main.p_object); return call_ret.*; }  // 1
set_position :: (main: *InputEventMouse, position: Vector2) { sys_call("InputEventMouse", "set_position", 743155724, Nil, main.p_object, position);  }  // 2
get_position :: (main: *InputEventMouse) -> Vector2 { call_ret := cast(*Vector2) sys_call("InputEventMouse", "get_position", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 3
set_global_position :: (main: *InputEventMouse, global_position: Vector2) { sys_call("InputEventMouse", "set_global_position", 743155724, Nil, main.p_object, global_position);  }  // 4
get_global_position :: (main: *InputEventMouse) -> Vector2 { call_ret := cast(*Vector2) sys_call("InputEventMouse", "get_global_position", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 5

set_factor :: (main: *InputEventMouseButton, factor: float) { sys_call("InputEventMouseButton", "set_factor", 373806689, Nil, main.p_object, factor);  }  // 0
get_factor :: (main: *InputEventMouseButton) -> float { call_ret := cast(*float) sys_call("InputEventMouseButton", "get_factor", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_button_index :: (main: *InputEventMouseButton, button_index: MouseButton) { sys_call("InputEventMouseButton", "set_button_index", 3624991109, Nil, main.p_object, button_index);  }  // 2
get_button_index :: (main: *InputEventMouseButton) -> MouseButton { call_ret := cast(*MouseButton) sys_call("InputEventMouseButton", "get_button_index", 1132662608, MouseButton, main.p_object); return call_ret.*; }  // 3
set_pressed :: (main: *InputEventMouseButton, pressed: bool) { sys_call("InputEventMouseButton", "set_pressed", 2586408642, Nil, main.p_object, pressed);  }  // 4
set_canceled :: (main: *InputEventMouseButton, canceled: bool) { sys_call("InputEventMouseButton", "set_canceled", 2586408642, Nil, main.p_object, canceled);  }  // 5
set_double_click :: (main: *InputEventMouseButton, double_click: bool) { sys_call("InputEventMouseButton", "set_double_click", 2586408642, Nil, main.p_object, double_click);  }  // 6
is_double_click :: (main: *InputEventMouseButton) -> bool { call_ret := cast(*bool) sys_call("InputEventMouseButton", "is_double_click", 36873697, bool, main.p_object); return call_ret.*; }  // 7

set_tilt :: (main: *InputEventMouseMotion, tilt: Vector2) { sys_call("InputEventMouseMotion", "set_tilt", 743155724, Nil, main.p_object, tilt);  }  // 0
get_tilt :: (main: *InputEventMouseMotion) -> Vector2 { call_ret := cast(*Vector2) sys_call("InputEventMouseMotion", "get_tilt", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 1
set_pressure :: (main: *InputEventMouseMotion, pressure: float) { sys_call("InputEventMouseMotion", "set_pressure", 373806689, Nil, main.p_object, pressure);  }  // 2
get_pressure :: (main: *InputEventMouseMotion) -> float { call_ret := cast(*float) sys_call("InputEventMouseMotion", "get_pressure", 1740695150, float, main.p_object); return call_ret.*; }  // 3
set_pen_inverted :: (main: *InputEventMouseMotion, pen_inverted: bool) { sys_call("InputEventMouseMotion", "set_pen_inverted", 2586408642, Nil, main.p_object, pen_inverted);  }  // 4
get_pen_inverted :: (main: *InputEventMouseMotion) -> bool { call_ret := cast(*bool) sys_call("InputEventMouseMotion", "get_pen_inverted", 36873697, bool, main.p_object); return call_ret.*; }  // 5
set_relative :: (main: *InputEventMouseMotion, relative: Vector2) { sys_call("InputEventMouseMotion", "set_relative", 743155724, Nil, main.p_object, relative);  }  // 6
get_relative :: (main: *InputEventMouseMotion) -> Vector2 { call_ret := cast(*Vector2) sys_call("InputEventMouseMotion", "get_relative", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 7
set_screen_relative :: (main: *InputEventMouseMotion, relative: Vector2) { sys_call("InputEventMouseMotion", "set_screen_relative", 743155724, Nil, main.p_object, relative);  }  // 8
get_screen_relative :: (main: *InputEventMouseMotion) -> Vector2 { call_ret := cast(*Vector2) sys_call("InputEventMouseMotion", "get_screen_relative", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 9
set_velocity :: (main: *InputEventMouseMotion, velocity: Vector2) { sys_call("InputEventMouseMotion", "set_velocity", 743155724, Nil, main.p_object, velocity);  }  // 10
get_velocity :: (main: *InputEventMouseMotion) -> Vector2 { call_ret := cast(*Vector2) sys_call("InputEventMouseMotion", "get_velocity", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 11
set_screen_velocity :: (main: *InputEventMouseMotion, velocity: Vector2) { sys_call("InputEventMouseMotion", "set_screen_velocity", 743155724, Nil, main.p_object, velocity);  }  // 12
get_screen_velocity :: (main: *InputEventMouseMotion) -> Vector2 { call_ret := cast(*Vector2) sys_call("InputEventMouseMotion", "get_screen_velocity", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 13

set_delta :: (main: *InputEventPanGesture, delta: Vector2) { sys_call("InputEventPanGesture", "set_delta", 743155724, Nil, main.p_object, delta);  }  // 0
get_delta :: (main: *InputEventPanGesture) -> Vector2 { call_ret := cast(*Vector2) sys_call("InputEventPanGesture", "get_delta", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 1

set_index :: (main: *InputEventScreenDrag, index: int) { sys_call("InputEventScreenDrag", "set_index", 1286410249, Nil, main.p_object, index);  }  // 0
get_index :: (main: *InputEventScreenDrag) -> int { call_ret := cast(*int) sys_call("InputEventScreenDrag", "get_index", 3905245786, int, main.p_object); return call_ret.*; }  // 1
set_tilt :: (main: *InputEventScreenDrag, tilt: Vector2) { sys_call("InputEventScreenDrag", "set_tilt", 743155724, Nil, main.p_object, tilt);  }  // 2
get_tilt :: (main: *InputEventScreenDrag) -> Vector2 { call_ret := cast(*Vector2) sys_call("InputEventScreenDrag", "get_tilt", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 3
set_pressure :: (main: *InputEventScreenDrag, pressure: float) { sys_call("InputEventScreenDrag", "set_pressure", 373806689, Nil, main.p_object, pressure);  }  // 4
get_pressure :: (main: *InputEventScreenDrag) -> float { call_ret := cast(*float) sys_call("InputEventScreenDrag", "get_pressure", 1740695150, float, main.p_object); return call_ret.*; }  // 5
set_pen_inverted :: (main: *InputEventScreenDrag, pen_inverted: bool) { sys_call("InputEventScreenDrag", "set_pen_inverted", 2586408642, Nil, main.p_object, pen_inverted);  }  // 6
get_pen_inverted :: (main: *InputEventScreenDrag) -> bool { call_ret := cast(*bool) sys_call("InputEventScreenDrag", "get_pen_inverted", 36873697, bool, main.p_object); return call_ret.*; }  // 7
set_position :: (main: *InputEventScreenDrag, position: Vector2) { sys_call("InputEventScreenDrag", "set_position", 743155724, Nil, main.p_object, position);  }  // 8
get_position :: (main: *InputEventScreenDrag) -> Vector2 { call_ret := cast(*Vector2) sys_call("InputEventScreenDrag", "get_position", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 9
set_relative :: (main: *InputEventScreenDrag, relative: Vector2) { sys_call("InputEventScreenDrag", "set_relative", 743155724, Nil, main.p_object, relative);  }  // 10
get_relative :: (main: *InputEventScreenDrag) -> Vector2 { call_ret := cast(*Vector2) sys_call("InputEventScreenDrag", "get_relative", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 11
set_screen_relative :: (main: *InputEventScreenDrag, relative: Vector2) { sys_call("InputEventScreenDrag", "set_screen_relative", 743155724, Nil, main.p_object, relative);  }  // 12
get_screen_relative :: (main: *InputEventScreenDrag) -> Vector2 { call_ret := cast(*Vector2) sys_call("InputEventScreenDrag", "get_screen_relative", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 13
set_velocity :: (main: *InputEventScreenDrag, velocity: Vector2) { sys_call("InputEventScreenDrag", "set_velocity", 743155724, Nil, main.p_object, velocity);  }  // 14
get_velocity :: (main: *InputEventScreenDrag) -> Vector2 { call_ret := cast(*Vector2) sys_call("InputEventScreenDrag", "get_velocity", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 15
set_screen_velocity :: (main: *InputEventScreenDrag, velocity: Vector2) { sys_call("InputEventScreenDrag", "set_screen_velocity", 743155724, Nil, main.p_object, velocity);  }  // 16
get_screen_velocity :: (main: *InputEventScreenDrag) -> Vector2 { call_ret := cast(*Vector2) sys_call("InputEventScreenDrag", "get_screen_velocity", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 17

set_index :: (main: *InputEventScreenTouch, index: int) { sys_call("InputEventScreenTouch", "set_index", 1286410249, Nil, main.p_object, index);  }  // 0
get_index :: (main: *InputEventScreenTouch) -> int { call_ret := cast(*int) sys_call("InputEventScreenTouch", "get_index", 3905245786, int, main.p_object); return call_ret.*; }  // 1
set_position :: (main: *InputEventScreenTouch, position: Vector2) { sys_call("InputEventScreenTouch", "set_position", 743155724, Nil, main.p_object, position);  }  // 2
get_position :: (main: *InputEventScreenTouch) -> Vector2 { call_ret := cast(*Vector2) sys_call("InputEventScreenTouch", "get_position", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 3
set_pressed :: (main: *InputEventScreenTouch, pressed: bool) { sys_call("InputEventScreenTouch", "set_pressed", 2586408642, Nil, main.p_object, pressed);  }  // 4
set_canceled :: (main: *InputEventScreenTouch, canceled: bool) { sys_call("InputEventScreenTouch", "set_canceled", 2586408642, Nil, main.p_object, canceled);  }  // 5
set_double_tap :: (main: *InputEventScreenTouch, double_tap: bool) { sys_call("InputEventScreenTouch", "set_double_tap", 2586408642, Nil, main.p_object, double_tap);  }  // 6
is_double_tap :: (main: *InputEventScreenTouch) -> bool { call_ret := cast(*bool) sys_call("InputEventScreenTouch", "is_double_tap", 36873697, bool, main.p_object); return call_ret.*; }  // 7

set_shortcut :: (main: *InputEventShortcut, shortcut: Shortcut) { sys_call("InputEventShortcut", "set_shortcut", 857163497, Nil, main.p_object, shortcut);  }  // 0
get_shortcut :: (main: *InputEventShortcut) -> *Shortcut { call_ret := cast(*Shortcut) sys_call("InputEventShortcut", "get_shortcut", 3766804753, Shortcut, main.p_object); return call_ret; }  // 1

set_command_or_control_autoremap :: (main: *InputEventWithModifiers, enable: bool) { sys_call("InputEventWithModifiers", "set_command_or_control_autoremap", 2586408642, Nil, main.p_object, enable);  }  // 0
is_command_or_control_autoremap :: (main: *InputEventWithModifiers) -> bool { call_ret := cast(*bool) sys_call("InputEventWithModifiers", "is_command_or_control_autoremap", 36873697, bool, main.p_object); return call_ret.*; }  // 1
is_command_or_control_pressed :: (main: *InputEventWithModifiers) -> bool { call_ret := cast(*bool) sys_call("InputEventWithModifiers", "is_command_or_control_pressed", 36873697, bool, main.p_object); return call_ret.*; }  // 2
set_alt_pressed :: (main: *InputEventWithModifiers, pressed: bool) { sys_call("InputEventWithModifiers", "set_alt_pressed", 2586408642, Nil, main.p_object, pressed);  }  // 3
is_alt_pressed :: (main: *InputEventWithModifiers) -> bool { call_ret := cast(*bool) sys_call("InputEventWithModifiers", "is_alt_pressed", 36873697, bool, main.p_object); return call_ret.*; }  // 4
set_shift_pressed :: (main: *InputEventWithModifiers, pressed: bool) { sys_call("InputEventWithModifiers", "set_shift_pressed", 2586408642, Nil, main.p_object, pressed);  }  // 5
is_shift_pressed :: (main: *InputEventWithModifiers) -> bool { call_ret := cast(*bool) sys_call("InputEventWithModifiers", "is_shift_pressed", 36873697, bool, main.p_object); return call_ret.*; }  // 6
set_ctrl_pressed :: (main: *InputEventWithModifiers, pressed: bool) { sys_call("InputEventWithModifiers", "set_ctrl_pressed", 2586408642, Nil, main.p_object, pressed);  }  // 7
is_ctrl_pressed :: (main: *InputEventWithModifiers) -> bool { call_ret := cast(*bool) sys_call("InputEventWithModifiers", "is_ctrl_pressed", 36873697, bool, main.p_object); return call_ret.*; }  // 8
set_meta_pressed :: (main: *InputEventWithModifiers, pressed: bool) { sys_call("InputEventWithModifiers", "set_meta_pressed", 2586408642, Nil, main.p_object, pressed);  }  // 9
is_meta_pressed :: (main: *InputEventWithModifiers) -> bool { call_ret := cast(*bool) sys_call("InputEventWithModifiers", "is_meta_pressed", 36873697, bool, main.p_object); return call_ret.*; }  // 10
get_modifiers_mask :: (main: *InputEventWithModifiers) -> KeyModifierMask { call_ret := cast(*KeyModifierMask) sys_call("InputEventWithModifiers", "get_modifiers_mask", 1258259499, KeyModifierMask, main.p_object); return call_ret.*; }  // 11

has_action :: (main: *InputMap, action: string) -> bool { call_ret := cast(*bool) sys_call("InputMap", "has_action", 2619796661, bool, main.p_object, action); return call_ret.*; }  // 0
get_actions :: (main: *InputMap) -> [] StringName { call_ret := cast(*[] StringName) sys_call("InputMap", "get_actions", 2915620761, [] StringName, main.p_object); return call_ret.*; }  // 1
add_action :: (main: *InputMap, action: string) { sys_call("InputMap", "add_action", 1195233573, Nil, main.p_object, action);  }  // 2
erase_action :: (main: *InputMap, action: string) { sys_call("InputMap", "erase_action", 3304788590, Nil, main.p_object, action);  }  // 3
action_set_deadzone :: (main: *InputMap, action: string, deadzone: float) { sys_call("InputMap", "action_set_deadzone", 4135858297, Nil, main.p_object, action, deadzone);  }  // 4
action_get_deadzone :: (main: *InputMap, action: string) -> float { call_ret := cast(*float) sys_call("InputMap", "action_get_deadzone", 1391627649, float, main.p_object, action); return call_ret.*; }  // 5
action_add_event :: (main: *InputMap, action: string, event: InputEvent) { sys_call("InputMap", "action_add_event", 518302593, Nil, main.p_object, action, event);  }  // 6
action_has_event :: (main: *InputMap, action: string, event: InputEvent) -> bool { call_ret := cast(*bool) sys_call("InputMap", "action_has_event", 1185871985, bool, main.p_object, action, event); return call_ret.*; }  // 7
action_erase_event :: (main: *InputMap, action: string, event: InputEvent) { sys_call("InputMap", "action_erase_event", 518302593, Nil, main.p_object, action, event);  }  // 8
action_erase_events :: (main: *InputMap, action: string) { sys_call("InputMap", "action_erase_events", 3304788590, Nil, main.p_object, action);  }  // 9
action_get_events :: (main: *InputMap, action: string) -> [] InputEvent { call_ret := cast(*[] InputEvent) sys_call("InputMap", "action_get_events", 689397652, [] InputEvent, main.p_object, action); return call_ret.*; }  // 10
event_is_action :: (main: *InputMap, event: InputEvent, action: string) -> bool { call_ret := cast(*bool) sys_call("InputMap", "event_is_action", 3193353650, bool, main.p_object, event, action); return call_ret.*; }  // 11
load_from_project_settings :: (main: *InputMap) { sys_call("InputMap", "load_from_project_settings", 3218959716, Nil, main.p_object);  }  // 12

get_stored_values :: (main: *InstancePlaceholder) -> Dictionary { call_ret := cast(*Dictionary) sys_call("InstancePlaceholder", "get_stored_values", 2230153369, Dictionary, main.p_object); return call_ret.*; }  // 0
create_instance :: (main: *InstancePlaceholder) -> *Node { call_ret := cast(*Node) sys_call("InstancePlaceholder", "create_instance", 3794612210, Node, main.p_object); return call_ret; }  // 1
get_instance_path :: (main: *InstancePlaceholder) -> gstring { call_ret := cast(*gstring) sys_call("InstancePlaceholder", "get_instance_path", 201670096, gstring, main.p_object); return call_ret.*; }  // 2


add_item :: (main: *ItemList, text: string) -> int { call_ret := cast(*int) sys_call("ItemList", "add_item", 359861678, int, main.p_object, text); return call_ret.*; }  // 0
add_icon_item :: (main: *ItemList, icon: Texture2D) -> int { call_ret := cast(*int) sys_call("ItemList", "add_icon_item", 4256579627, int, main.p_object, icon); return call_ret.*; }  // 1
set_item_text :: (main: *ItemList, idx: int, text: string) { sys_call("ItemList", "set_item_text", 501894301, Nil, main.p_object, idx, text);  }  // 2
get_item_text :: (main: *ItemList, idx: int) -> gstring { call_ret := cast(*gstring) sys_call("ItemList", "get_item_text", 844755477, gstring, main.p_object, idx); return call_ret.*; }  // 3
set_item_icon :: (main: *ItemList, idx: int, icon: Texture2D) { sys_call("ItemList", "set_item_icon", 666127730, Nil, main.p_object, idx, icon);  }  // 4
get_item_icon :: (main: *ItemList, idx: int) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("ItemList", "get_item_icon", 3536238170, Texture2D, main.p_object, idx); return call_ret; }  // 5
set_item_text_direction :: (main: *ItemList, idx: int, direction: Control.TextDirection) { sys_call("ItemList", "set_item_text_direction", 1707680378, Nil, main.p_object, idx, direction);  }  // 6
get_item_text_direction :: (main: *ItemList, idx: int) -> Control.TextDirection { call_ret := cast(*Control.TextDirection) sys_call("ItemList", "get_item_text_direction", 4235602388, Control.TextDirection, main.p_object, idx); return call_ret.*; }  // 7
set_item_language :: (main: *ItemList, idx: int, language: string) { sys_call("ItemList", "set_item_language", 501894301, Nil, main.p_object, idx, language);  }  // 8
get_item_language :: (main: *ItemList, idx: int) -> gstring { call_ret := cast(*gstring) sys_call("ItemList", "get_item_language", 844755477, gstring, main.p_object, idx); return call_ret.*; }  // 9
set_item_auto_translate_mode :: (main: *ItemList, idx: int, mode: Node.AutoTranslateMode) { sys_call("ItemList", "set_item_auto_translate_mode", 287402019, Nil, main.p_object, idx, mode);  }  // 10
get_item_auto_translate_mode :: (main: *ItemList, idx: int) -> Node.AutoTranslateMode { call_ret := cast(*Node.AutoTranslateMode) sys_call("ItemList", "get_item_auto_translate_mode", 906302372, Node.AutoTranslateMode, main.p_object, idx); return call_ret.*; }  // 11
set_item_icon_transposed :: (main: *ItemList, idx: int, transposed: bool) { sys_call("ItemList", "set_item_icon_transposed", 300928843, Nil, main.p_object, idx, transposed);  }  // 12
is_item_icon_transposed :: (main: *ItemList, idx: int) -> bool { call_ret := cast(*bool) sys_call("ItemList", "is_item_icon_transposed", 1116898809, bool, main.p_object, idx); return call_ret.*; }  // 13
set_item_icon_region :: (main: *ItemList, idx: int, rect: Rect2) { sys_call("ItemList", "set_item_icon_region", 1356297692, Nil, main.p_object, idx, rect);  }  // 14
get_item_icon_region :: (main: *ItemList, idx: int) -> Rect2 { call_ret := cast(*Rect2) sys_call("ItemList", "get_item_icon_region", 3327874267, Rect2, main.p_object, idx); return call_ret.*; }  // 15
set_item_icon_modulate :: (main: *ItemList, idx: int, modulate: Color) { sys_call("ItemList", "set_item_icon_modulate", 2878471219, Nil, main.p_object, idx, modulate);  }  // 16
get_item_icon_modulate :: (main: *ItemList, idx: int) -> Color { call_ret := cast(*Color) sys_call("ItemList", "get_item_icon_modulate", 3457211756, Color, main.p_object, idx); return call_ret.*; }  // 17
set_item_selectable :: (main: *ItemList, idx: int, selectable: bool) { sys_call("ItemList", "set_item_selectable", 300928843, Nil, main.p_object, idx, selectable);  }  // 18
is_item_selectable :: (main: *ItemList, idx: int) -> bool { call_ret := cast(*bool) sys_call("ItemList", "is_item_selectable", 1116898809, bool, main.p_object, idx); return call_ret.*; }  // 19
set_item_disabled :: (main: *ItemList, idx: int, disabled: bool) { sys_call("ItemList", "set_item_disabled", 300928843, Nil, main.p_object, idx, disabled);  }  // 20
is_item_disabled :: (main: *ItemList, idx: int) -> bool { call_ret := cast(*bool) sys_call("ItemList", "is_item_disabled", 1116898809, bool, main.p_object, idx); return call_ret.*; }  // 21
set_item_metadata :: (main: *ItemList, idx: int, metadata: Variant) { sys_call("ItemList", "set_item_metadata", 2152698145, Nil, main.p_object, idx, metadata);  }  // 22
get_item_metadata :: (main: *ItemList, idx: int) -> Variant { call_ret := cast(*Variant) sys_call("ItemList", "get_item_metadata", 4227898402, Variant, main.p_object, idx); return call_ret.*; }  // 23
set_item_custom_bg_color :: (main: *ItemList, idx: int, custom_bg_color: Color) { sys_call("ItemList", "set_item_custom_bg_color", 2878471219, Nil, main.p_object, idx, custom_bg_color);  }  // 24
get_item_custom_bg_color :: (main: *ItemList, idx: int) -> Color { call_ret := cast(*Color) sys_call("ItemList", "get_item_custom_bg_color", 3457211756, Color, main.p_object, idx); return call_ret.*; }  // 25
set_item_custom_fg_color :: (main: *ItemList, idx: int, custom_fg_color: Color) { sys_call("ItemList", "set_item_custom_fg_color", 2878471219, Nil, main.p_object, idx, custom_fg_color);  }  // 26
get_item_custom_fg_color :: (main: *ItemList, idx: int) -> Color { call_ret := cast(*Color) sys_call("ItemList", "get_item_custom_fg_color", 3457211756, Color, main.p_object, idx); return call_ret.*; }  // 27
get_item_rect :: (main: *ItemList, idx: int) -> Rect2 { call_ret := cast(*Rect2) sys_call("ItemList", "get_item_rect", 159227807, Rect2, main.p_object, idx); return call_ret.*; }  // 28
set_item_tooltip_enabled :: (main: *ItemList, idx: int, enable: bool) { sys_call("ItemList", "set_item_tooltip_enabled", 300928843, Nil, main.p_object, idx, enable);  }  // 29
is_item_tooltip_enabled :: (main: *ItemList, idx: int) -> bool { call_ret := cast(*bool) sys_call("ItemList", "is_item_tooltip_enabled", 1116898809, bool, main.p_object, idx); return call_ret.*; }  // 30
set_item_tooltip :: (main: *ItemList, idx: int, tooltip: string) { sys_call("ItemList", "set_item_tooltip", 501894301, Nil, main.p_object, idx, tooltip);  }  // 31
get_item_tooltip :: (main: *ItemList, idx: int) -> gstring { call_ret := cast(*gstring) sys_call("ItemList", "get_item_tooltip", 844755477, gstring, main.p_object, idx); return call_ret.*; }  // 32
select :: (main: *ItemList, idx: int) { sys_call("ItemList", "select", 972357352, Nil, main.p_object, idx);  }  // 33
deselect :: (main: *ItemList, idx: int) { sys_call("ItemList", "deselect", 1286410249, Nil, main.p_object, idx);  }  // 34
deselect_all :: (main: *ItemList) { sys_call("ItemList", "deselect_all", 3218959716, Nil, main.p_object);  }  // 35
is_selected :: (main: *ItemList, idx: int) -> bool { call_ret := cast(*bool) sys_call("ItemList", "is_selected", 1116898809, bool, main.p_object, idx); return call_ret.*; }  // 36
get_selected_items :: (main: *ItemList) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("ItemList", "get_selected_items", 969006518, PackedInt32Array, main.p_object); return call_ret.*; }  // 37
move_item :: (main: *ItemList, from_idx: int, to_idx: int) { sys_call("ItemList", "move_item", 3937882851, Nil, main.p_object, from_idx, to_idx);  }  // 38
set_item_count :: (main: *ItemList, count: int) { sys_call("ItemList", "set_item_count", 1286410249, Nil, main.p_object, count);  }  // 39
get_item_count :: (main: *ItemList) -> int { call_ret := cast(*int) sys_call("ItemList", "get_item_count", 3905245786, int, main.p_object); return call_ret.*; }  // 40
remove_item :: (main: *ItemList, idx: int) { sys_call("ItemList", "remove_item", 1286410249, Nil, main.p_object, idx);  }  // 41
clear :: (main: *ItemList) { sys_call("ItemList", "clear", 3218959716, Nil, main.p_object);  }  // 42
sort_items_by_text :: (main: *ItemList) { sys_call("ItemList", "sort_items_by_text", 3218959716, Nil, main.p_object);  }  // 43
set_fixed_column_width :: (main: *ItemList, width: int) { sys_call("ItemList", "set_fixed_column_width", 1286410249, Nil, main.p_object, width);  }  // 44
get_fixed_column_width :: (main: *ItemList) -> int { call_ret := cast(*int) sys_call("ItemList", "get_fixed_column_width", 3905245786, int, main.p_object); return call_ret.*; }  // 45
set_same_column_width :: (main: *ItemList, enable: bool) { sys_call("ItemList", "set_same_column_width", 2586408642, Nil, main.p_object, enable);  }  // 46
is_same_column_width :: (main: *ItemList) -> bool { call_ret := cast(*bool) sys_call("ItemList", "is_same_column_width", 36873697, bool, main.p_object); return call_ret.*; }  // 47
set_max_text_lines :: (main: *ItemList, lines: int) { sys_call("ItemList", "set_max_text_lines", 1286410249, Nil, main.p_object, lines);  }  // 48
get_max_text_lines :: (main: *ItemList) -> int { call_ret := cast(*int) sys_call("ItemList", "get_max_text_lines", 3905245786, int, main.p_object); return call_ret.*; }  // 49
set_max_columns :: (main: *ItemList, amount: int) { sys_call("ItemList", "set_max_columns", 1286410249, Nil, main.p_object, amount);  }  // 50
get_max_columns :: (main: *ItemList) -> int { call_ret := cast(*int) sys_call("ItemList", "get_max_columns", 3905245786, int, main.p_object); return call_ret.*; }  // 51
set_select_mode :: (main: *ItemList, mode: ItemList.SelectMode) { sys_call("ItemList", "set_select_mode", 928267388, Nil, main.p_object, mode);  }  // 52
get_select_mode :: (main: *ItemList) -> ItemList.SelectMode { call_ret := cast(*ItemList.SelectMode) sys_call("ItemList", "get_select_mode", 1191945842, ItemList.SelectMode, main.p_object); return call_ret.*; }  // 53
set_icon_mode :: (main: *ItemList, mode: ItemList.IconMode) { sys_call("ItemList", "set_icon_mode", 2025053633, Nil, main.p_object, mode);  }  // 54
get_icon_mode :: (main: *ItemList) -> ItemList.IconMode { call_ret := cast(*ItemList.IconMode) sys_call("ItemList", "get_icon_mode", 3353929232, ItemList.IconMode, main.p_object); return call_ret.*; }  // 55
set_fixed_icon_size :: (main: *ItemList, size: Vector2i) { sys_call("ItemList", "set_fixed_icon_size", 1130785943, Nil, main.p_object, size);  }  // 56
get_fixed_icon_size :: (main: *ItemList) -> Vector2i { call_ret := cast(*Vector2i) sys_call("ItemList", "get_fixed_icon_size", 3690982128, Vector2i, main.p_object); return call_ret.*; }  // 57
set_icon_scale :: (main: *ItemList, scale: float) { sys_call("ItemList", "set_icon_scale", 373806689, Nil, main.p_object, scale);  }  // 58
get_icon_scale :: (main: *ItemList) -> float { call_ret := cast(*float) sys_call("ItemList", "get_icon_scale", 1740695150, float, main.p_object); return call_ret.*; }  // 59
set_allow_rmb_select :: (main: *ItemList, allow: bool) { sys_call("ItemList", "set_allow_rmb_select", 2586408642, Nil, main.p_object, allow);  }  // 60
get_allow_rmb_select :: (main: *ItemList) -> bool { call_ret := cast(*bool) sys_call("ItemList", "get_allow_rmb_select", 36873697, bool, main.p_object); return call_ret.*; }  // 61
set_allow_reselect :: (main: *ItemList, allow: bool) { sys_call("ItemList", "set_allow_reselect", 2586408642, Nil, main.p_object, allow);  }  // 62
get_allow_reselect :: (main: *ItemList) -> bool { call_ret := cast(*bool) sys_call("ItemList", "get_allow_reselect", 36873697, bool, main.p_object); return call_ret.*; }  // 63
set_allow_search :: (main: *ItemList, allow: bool) { sys_call("ItemList", "set_allow_search", 2586408642, Nil, main.p_object, allow);  }  // 64
get_allow_search :: (main: *ItemList) -> bool { call_ret := cast(*bool) sys_call("ItemList", "get_allow_search", 36873697, bool, main.p_object); return call_ret.*; }  // 65
set_auto_width :: (main: *ItemList, enable: bool) { sys_call("ItemList", "set_auto_width", 2586408642, Nil, main.p_object, enable);  }  // 66
has_auto_width :: (main: *ItemList) -> bool { call_ret := cast(*bool) sys_call("ItemList", "has_auto_width", 36873697, bool, main.p_object); return call_ret.*; }  // 67
set_auto_height :: (main: *ItemList, enable: bool) { sys_call("ItemList", "set_auto_height", 2586408642, Nil, main.p_object, enable);  }  // 68
has_auto_height :: (main: *ItemList) -> bool { call_ret := cast(*bool) sys_call("ItemList", "has_auto_height", 36873697, bool, main.p_object); return call_ret.*; }  // 69
is_anything_selected :: (main: *ItemList) -> bool { call_ret := cast(*bool) sys_call("ItemList", "is_anything_selected", 2240911060, bool, main.p_object); return call_ret.*; }  // 70
get_item_at_position :: (main: *ItemList, position: Vector2) -> int { call_ret := cast(*int) sys_call("ItemList", "get_item_at_position", 2300324924, int, main.p_object, position); return call_ret.*; }  // 71
ensure_current_is_visible :: (main: *ItemList) { sys_call("ItemList", "ensure_current_is_visible", 3218959716, Nil, main.p_object);  }  // 72
get_v_scroll_bar :: (main: *ItemList) -> *VScrollBar { call_ret := cast(*VScrollBar) sys_call("ItemList", "get_v_scroll_bar", 2630340773, VScrollBar, main.p_object); return call_ret; }  // 73
get_h_scroll_bar :: (main: *ItemList) -> *HScrollBar { call_ret := cast(*HScrollBar) sys_call("ItemList", "get_h_scroll_bar", 4004517983, HScrollBar, main.p_object); return call_ret; }  // 74
set_text_overrun_behavior :: (main: *ItemList, overrun_behavior: TextServer.OverrunBehavior) { sys_call("ItemList", "set_text_overrun_behavior", 1008890932, Nil, main.p_object, overrun_behavior);  }  // 75
get_text_overrun_behavior :: (main: *ItemList) -> TextServer.OverrunBehavior { call_ret := cast(*TextServer.OverrunBehavior) sys_call("ItemList", "get_text_overrun_behavior", 3779142101, TextServer.OverrunBehavior, main.p_object); return call_ret.*; }  // 76
set_wraparound_items :: (main: *ItemList, enable: bool) { sys_call("ItemList", "set_wraparound_items", 2586408642, Nil, main.p_object, enable);  }  // 77
has_wraparound_items :: (main: *ItemList) -> bool { call_ret := cast(*bool) sys_call("ItemList", "has_wraparound_items", 36873697, bool, main.p_object); return call_ret.*; }  // 78
force_update_list_size :: (main: *ItemList) { sys_call("ItemList", "force_update_list_size", 3218959716, Nil, main.p_object);  }  // 79


stringify :: (main: *JSON, data: Variant) -> gstring { call_ret := cast(*gstring) sys_call("JSON", "stringify", 462733549, gstring, main.p_object, data); return call_ret.*; }  // 0
parse_string :: (main: *JSON, json_string: string) -> Variant { call_ret := cast(*Variant) sys_call("JSON", "parse_string", 309047738, Variant, main.p_object, json_string); return call_ret.*; }  // 1
parse :: (main: *JSON, json_text: string) -> Error { call_ret := cast(*Error) sys_call("JSON", "parse", 885841341, Error, main.p_object, json_text); return call_ret.*; }  // 2
get_data :: (main: *JSON) -> Variant { call_ret := cast(*Variant) sys_call("JSON", "get_data", 1214101251, Variant, main.p_object); return call_ret.*; }  // 3
set_data :: (main: *JSON, data: Variant) { sys_call("JSON", "set_data", 1114965689, Nil, main.p_object, data);  }  // 4
get_parsed_text :: (main: *JSON) -> gstring { call_ret := cast(*gstring) sys_call("JSON", "get_parsed_text", 201670096, gstring, main.p_object); return call_ret.*; }  // 5
get_error_line :: (main: *JSON) -> int { call_ret := cast(*int) sys_call("JSON", "get_error_line", 3905245786, int, main.p_object); return call_ret.*; }  // 6
get_error_message :: (main: *JSON) -> gstring { call_ret := cast(*gstring) sys_call("JSON", "get_error_message", 201670096, gstring, main.p_object); return call_ret.*; }  // 7
from_native :: (main: *JSON, variant: Variant) -> Variant { call_ret := cast(*Variant) sys_call("JSON", "from_native", 2963479484, Variant, main.p_object, variant); return call_ret.*; }  // 8
to_native :: (main: *JSON, json: Variant) -> Variant { call_ret := cast(*Variant) sys_call("JSON", "to_native", 2963479484, Variant, main.p_object, json); return call_ret.*; }  // 9

set_scope :: (main: *JSONRPC, scope: string, target: Object) { sys_call("JSONRPC", "set_scope", 2572618360, Nil, main.p_object, scope, target);  }  // 0
process_action :: (main: *JSONRPC, action: Variant) -> Variant { call_ret := cast(*Variant) sys_call("JSONRPC", "process_action", 2963479484, Variant, main.p_object, action); return call_ret.*; }  // 1
process_string :: (main: *JSONRPC, action: string) -> gstring { call_ret := cast(*gstring) sys_call("JSONRPC", "process_string", 1703090593, gstring, main.p_object, action); return call_ret.*; }  // 2
make_request :: (main: *JSONRPC, method: string, params: Variant, id: Variant) -> Dictionary { call_ret := cast(*Dictionary) sys_call("JSONRPC", "make_request", 3423508980, Dictionary, main.p_object, method, params, id); return call_ret.*; }  // 3
make_response :: (main: *JSONRPC, result: Variant, id: Variant) -> Dictionary { call_ret := cast(*Dictionary) sys_call("JSONRPC", "make_response", 5053918, Dictionary, main.p_object, result, id); return call_ret.*; }  // 4
make_notification :: (main: *JSONRPC, method: string, params: Variant) -> Dictionary { call_ret := cast(*Dictionary) sys_call("JSONRPC", "make_notification", 2949127017, Dictionary, main.p_object, method, params); return call_ret.*; }  // 5
make_response_error :: (main: *JSONRPC, code: int, message: string) -> Dictionary { call_ret := cast(*Dictionary) sys_call("JSONRPC", "make_response_error", 928596297, Dictionary, main.p_object, code, message); return call_ret.*; }  // 6

get_java_class_name :: (main: *JavaClass) -> gstring { call_ret := cast(*gstring) sys_call("JavaClass", "get_java_class_name", 201670096, gstring, main.p_object); return call_ret.*; }  // 0
get_java_method_list :: (main: *JavaClass) -> [] Dictionary { call_ret := cast(*[] Dictionary) sys_call("JavaClass", "get_java_method_list", 3995934104, [] Dictionary, main.p_object); return call_ret.*; }  // 1
get_java_parent_class :: (main: *JavaClass) -> *JavaClass { call_ret := cast(*JavaClass) sys_call("JavaClass", "get_java_parent_class", 541536347, JavaClass, main.p_object); return call_ret; }  // 2

wrap :: (main: *JavaClassWrapper, name: string) -> *JavaClass { call_ret := cast(*JavaClass) sys_call("JavaClassWrapper", "wrap", 1124367868, JavaClass, main.p_object, name); return call_ret; }  // 0
get_exception :: (main: *JavaClassWrapper) -> *JavaObject { call_ret := cast(*JavaObject) sys_call("JavaClassWrapper", "get_exception", 3277089691, JavaObject, main.p_object); return call_ret; }  // 1

get_java_class :: (main: *JavaObject) -> *JavaClass { call_ret := cast(*JavaClass) sys_call("JavaObject", "get_java_class", 541536347, JavaClass, main.p_object); return call_ret; }  // 0

eval :: (main: *JavaScriptBridge, code: string) -> Variant { call_ret := cast(*Variant) sys_call("JavaScriptBridge", "eval", 218087648, Variant, main.p_object, code); return call_ret.*; }  // 0
get_interface :: (main: *JavaScriptBridge, _interface: string) -> *JavaScriptObject { call_ret := cast(*JavaScriptObject) sys_call("JavaScriptBridge", "get_interface", 1355533281, JavaScriptObject, main.p_object, _interface); return call_ret; }  // 1
create_callback :: (main: *JavaScriptBridge, callable: Callable) -> *JavaScriptObject { call_ret := cast(*JavaScriptObject) sys_call("JavaScriptBridge", "create_callback", 422818440, JavaScriptObject, main.p_object, callable); return call_ret; }  // 2
is_js_buffer :: (main: *JavaScriptBridge, javascript_object: JavaScriptObject) -> bool { call_ret := cast(*bool) sys_call("JavaScriptBridge", "is_js_buffer", 821968997, bool, main.p_object, javascript_object); return call_ret.*; }  // 3
js_buffer_to_packed_byte_array :: (main: *JavaScriptBridge, javascript_buffer: JavaScriptObject) -> PackedByteArray { call_ret := cast(*PackedByteArray) sys_call("JavaScriptBridge", "js_buffer_to_packed_byte_array", 64409880, PackedByteArray, main.p_object, javascript_buffer); return call_ret.*; }  // 4
create_object :: (main: *JavaScriptBridge, object: string) -> Variant { call_ret := cast(*Variant) sys_call("JavaScriptBridge", "create_object", 3093893586, Variant, main.p_object, object); return call_ret.*; }  // 5
download_buffer :: (main: *JavaScriptBridge, buffer: PackedByteArray, name: string) { sys_call("JavaScriptBridge", "download_buffer", 3352272093, Nil, main.p_object, buffer, name);  }  // 6
pwa_needs_update :: (main: *JavaScriptBridge) -> bool { call_ret := cast(*bool) sys_call("JavaScriptBridge", "pwa_needs_update", 36873697, bool, main.p_object); return call_ret.*; }  // 7
pwa_update :: (main: *JavaScriptBridge) -> Error { call_ret := cast(*Error) sys_call("JavaScriptBridge", "pwa_update", 166280745, Error, main.p_object); return call_ret.*; }  // 8
force_fs_sync :: (main: *JavaScriptBridge) { sys_call("JavaScriptBridge", "force_fs_sync", 3218959716, Nil, main.p_object);  }  // 9


set_node_a :: (main: *Joint2D, node: string) { sys_call("Joint2D", "set_node_a", 1348162250, Nil, main.p_object, node);  }  // 0
get_node_a :: (main: *Joint2D) -> NodePath { call_ret := cast(*NodePath) sys_call("Joint2D", "get_node_a", 4075236667, NodePath, main.p_object); return call_ret.*; }  // 1
set_node_b :: (main: *Joint2D, node: string) { sys_call("Joint2D", "set_node_b", 1348162250, Nil, main.p_object, node);  }  // 2
get_node_b :: (main: *Joint2D) -> NodePath { call_ret := cast(*NodePath) sys_call("Joint2D", "get_node_b", 4075236667, NodePath, main.p_object); return call_ret.*; }  // 3
set_bias :: (main: *Joint2D, bias: float) { sys_call("Joint2D", "set_bias", 373806689, Nil, main.p_object, bias);  }  // 4
get_bias :: (main: *Joint2D) -> float { call_ret := cast(*float) sys_call("Joint2D", "get_bias", 1740695150, float, main.p_object); return call_ret.*; }  // 5
set_exclude_nodes_from_collision :: (main: *Joint2D, enable: bool) { sys_call("Joint2D", "set_exclude_nodes_from_collision", 2586408642, Nil, main.p_object, enable);  }  // 6
get_exclude_nodes_from_collision :: (main: *Joint2D) -> bool { call_ret := cast(*bool) sys_call("Joint2D", "get_exclude_nodes_from_collision", 36873697, bool, main.p_object); return call_ret.*; }  // 7
get_rid :: (main: *Joint2D) -> RID { call_ret := cast(*RID) sys_call("Joint2D", "get_rid", 2944877500, RID, main.p_object); return call_ret.*; }  // 8

set_node_a :: (main: *Joint3D, node: string) { sys_call("Joint3D", "set_node_a", 1348162250, Nil, main.p_object, node);  }  // 0
get_node_a :: (main: *Joint3D) -> NodePath { call_ret := cast(*NodePath) sys_call("Joint3D", "get_node_a", 4075236667, NodePath, main.p_object); return call_ret.*; }  // 1
set_node_b :: (main: *Joint3D, node: string) { sys_call("Joint3D", "set_node_b", 1348162250, Nil, main.p_object, node);  }  // 2
get_node_b :: (main: *Joint3D) -> NodePath { call_ret := cast(*NodePath) sys_call("Joint3D", "get_node_b", 4075236667, NodePath, main.p_object); return call_ret.*; }  // 3
set_solver_priority :: (main: *Joint3D, priority: int) { sys_call("Joint3D", "set_solver_priority", 1286410249, Nil, main.p_object, priority);  }  // 4
get_solver_priority :: (main: *Joint3D) -> int { call_ret := cast(*int) sys_call("Joint3D", "get_solver_priority", 3905245786, int, main.p_object); return call_ret.*; }  // 5
set_exclude_nodes_from_collision :: (main: *Joint3D, enable: bool) { sys_call("Joint3D", "set_exclude_nodes_from_collision", 2586408642, Nil, main.p_object, enable);  }  // 6
get_exclude_nodes_from_collision :: (main: *Joint3D) -> bool { call_ret := cast(*bool) sys_call("Joint3D", "get_exclude_nodes_from_collision", 36873697, bool, main.p_object); return call_ret.*; }  // 7
get_rid :: (main: *Joint3D) -> RID { call_ret := cast(*RID) sys_call("Joint3D", "get_rid", 2944877500, RID, main.p_object); return call_ret.*; }  // 8

get_position :: (main: *KinematicCollision2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("KinematicCollision2D", "get_position", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 0
get_normal :: (main: *KinematicCollision2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("KinematicCollision2D", "get_normal", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 1
get_travel :: (main: *KinematicCollision2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("KinematicCollision2D", "get_travel", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 2
get_remainder :: (main: *KinematicCollision2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("KinematicCollision2D", "get_remainder", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 3
get_angle :: (main: *KinematicCollision2D) -> float { call_ret := cast(*float) sys_call("KinematicCollision2D", "get_angle", 2841063350, float, main.p_object); return call_ret.*; }  // 4
get_depth :: (main: *KinematicCollision2D) -> float { call_ret := cast(*float) sys_call("KinematicCollision2D", "get_depth", 1740695150, float, main.p_object); return call_ret.*; }  // 5
get_local_shape :: (main: *KinematicCollision2D) -> *Object { call_ret := cast(*Object) sys_call("KinematicCollision2D", "get_local_shape", 1981248198, Object, main.p_object); return call_ret; }  // 6
get_collider :: (main: *KinematicCollision2D) -> *Object { call_ret := cast(*Object) sys_call("KinematicCollision2D", "get_collider", 1981248198, Object, main.p_object); return call_ret; }  // 7
get_collider_id :: (main: *KinematicCollision2D) -> int { call_ret := cast(*int) sys_call("KinematicCollision2D", "get_collider_id", 3905245786, int, main.p_object); return call_ret.*; }  // 8
get_collider_rid :: (main: *KinematicCollision2D) -> RID { call_ret := cast(*RID) sys_call("KinematicCollision2D", "get_collider_rid", 2944877500, RID, main.p_object); return call_ret.*; }  // 9
get_collider_shape :: (main: *KinematicCollision2D) -> *Object { call_ret := cast(*Object) sys_call("KinematicCollision2D", "get_collider_shape", 1981248198, Object, main.p_object); return call_ret; }  // 10
get_collider_shape_index :: (main: *KinematicCollision2D) -> int { call_ret := cast(*int) sys_call("KinematicCollision2D", "get_collider_shape_index", 3905245786, int, main.p_object); return call_ret.*; }  // 11
get_collider_velocity :: (main: *KinematicCollision2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("KinematicCollision2D", "get_collider_velocity", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 12

get_travel :: (main: *KinematicCollision3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("KinematicCollision3D", "get_travel", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 0
get_remainder :: (main: *KinematicCollision3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("KinematicCollision3D", "get_remainder", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 1
get_depth :: (main: *KinematicCollision3D) -> float { call_ret := cast(*float) sys_call("KinematicCollision3D", "get_depth", 1740695150, float, main.p_object); return call_ret.*; }  // 2
get_collision_count :: (main: *KinematicCollision3D) -> int { call_ret := cast(*int) sys_call("KinematicCollision3D", "get_collision_count", 3905245786, int, main.p_object); return call_ret.*; }  // 3
get_position :: (main: *KinematicCollision3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("KinematicCollision3D", "get_position", 1914908202, Vector3, main.p_object); return call_ret.*; }  // 4
get_normal :: (main: *KinematicCollision3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("KinematicCollision3D", "get_normal", 1914908202, Vector3, main.p_object); return call_ret.*; }  // 5
get_angle :: (main: *KinematicCollision3D) -> float { call_ret := cast(*float) sys_call("KinematicCollision3D", "get_angle", 1242741860, float, main.p_object); return call_ret.*; }  // 6
get_local_shape :: (main: *KinematicCollision3D) -> *Object { call_ret := cast(*Object) sys_call("KinematicCollision3D", "get_local_shape", 2639523548, Object, main.p_object); return call_ret; }  // 7
get_collider :: (main: *KinematicCollision3D) -> *Object { call_ret := cast(*Object) sys_call("KinematicCollision3D", "get_collider", 2639523548, Object, main.p_object); return call_ret; }  // 8
get_collider_id :: (main: *KinematicCollision3D) -> int { call_ret := cast(*int) sys_call("KinematicCollision3D", "get_collider_id", 1591665591, int, main.p_object); return call_ret.*; }  // 9
get_collider_rid :: (main: *KinematicCollision3D) -> RID { call_ret := cast(*RID) sys_call("KinematicCollision3D", "get_collider_rid", 1231817359, RID, main.p_object); return call_ret.*; }  // 10
get_collider_shape :: (main: *KinematicCollision3D) -> *Object { call_ret := cast(*Object) sys_call("KinematicCollision3D", "get_collider_shape", 2639523548, Object, main.p_object); return call_ret; }  // 11
get_collider_shape_index :: (main: *KinematicCollision3D) -> int { call_ret := cast(*int) sys_call("KinematicCollision3D", "get_collider_shape_index", 1591665591, int, main.p_object); return call_ret.*; }  // 12
get_collider_velocity :: (main: *KinematicCollision3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("KinematicCollision3D", "get_collider_velocity", 1914908202, Vector3, main.p_object); return call_ret.*; }  // 13

set_horizontal_alignment :: (main: *Label, alignment: HorizontalAlignment) { sys_call("Label", "set_horizontal_alignment", 2312603777, Nil, main.p_object, alignment);  }  // 0
get_horizontal_alignment :: (main: *Label) -> HorizontalAlignment { call_ret := cast(*HorizontalAlignment) sys_call("Label", "get_horizontal_alignment", 341400642, HorizontalAlignment, main.p_object); return call_ret.*; }  // 1
set_vertical_alignment :: (main: *Label, alignment: VerticalAlignment) { sys_call("Label", "set_vertical_alignment", 1796458609, Nil, main.p_object, alignment);  }  // 2
get_vertical_alignment :: (main: *Label) -> VerticalAlignment { call_ret := cast(*VerticalAlignment) sys_call("Label", "get_vertical_alignment", 3274884059, VerticalAlignment, main.p_object); return call_ret.*; }  // 3
set_text :: (main: *Label, text: string) { sys_call("Label", "set_text", 83702148, Nil, main.p_object, text);  }  // 4
get_text :: (main: *Label) -> gstring { call_ret := cast(*gstring) sys_call("Label", "get_text", 201670096, gstring, main.p_object); return call_ret.*; }  // 5
set_label_settings :: (main: *Label, settings: LabelSettings) { sys_call("Label", "set_label_settings", 1030653839, Nil, main.p_object, settings);  }  // 6
get_label_settings :: (main: *Label) -> *LabelSettings { call_ret := cast(*LabelSettings) sys_call("Label", "get_label_settings", 826676056, LabelSettings, main.p_object); return call_ret; }  // 7
set_text_direction :: (main: *Label, direction: Control.TextDirection) { sys_call("Label", "set_text_direction", 119160795, Nil, main.p_object, direction);  }  // 8
get_text_direction :: (main: *Label) -> Control.TextDirection { call_ret := cast(*Control.TextDirection) sys_call("Label", "get_text_direction", 797257663, Control.TextDirection, main.p_object); return call_ret.*; }  // 9
set_language :: (main: *Label, language: string) { sys_call("Label", "set_language", 83702148, Nil, main.p_object, language);  }  // 10
get_language :: (main: *Label) -> gstring { call_ret := cast(*gstring) sys_call("Label", "get_language", 201670096, gstring, main.p_object); return call_ret.*; }  // 11
set_paragraph_separator :: (main: *Label, paragraph_separator: string) { sys_call("Label", "set_paragraph_separator", 83702148, Nil, main.p_object, paragraph_separator);  }  // 12
get_paragraph_separator :: (main: *Label) -> gstring { call_ret := cast(*gstring) sys_call("Label", "get_paragraph_separator", 201670096, gstring, main.p_object); return call_ret.*; }  // 13
set_autowrap_mode :: (main: *Label, autowrap_mode: TextServer.AutowrapMode) { sys_call("Label", "set_autowrap_mode", 3289138044, Nil, main.p_object, autowrap_mode);  }  // 14
get_autowrap_mode :: (main: *Label) -> TextServer.AutowrapMode { call_ret := cast(*TextServer.AutowrapMode) sys_call("Label", "get_autowrap_mode", 1549071663, TextServer.AutowrapMode, main.p_object); return call_ret.*; }  // 15
set_justification_flags :: (main: *Label, justification_flags: TextServer.JustificationFlag) { sys_call("Label", "set_justification_flags", 2877345813, Nil, main.p_object, justification_flags);  }  // 16
get_justification_flags :: (main: *Label) -> TextServer.JustificationFlag { call_ret := cast(*TextServer.JustificationFlag) sys_call("Label", "get_justification_flags", 1583363614, TextServer.JustificationFlag, main.p_object); return call_ret.*; }  // 17
set_clip_text :: (main: *Label, enable: bool) { sys_call("Label", "set_clip_text", 2586408642, Nil, main.p_object, enable);  }  // 18
is_clipping_text :: (main: *Label) -> bool { call_ret := cast(*bool) sys_call("Label", "is_clipping_text", 36873697, bool, main.p_object); return call_ret.*; }  // 19
set_tab_stops :: (main: *Label, tab_stops: PackedFloat32Array) { sys_call("Label", "set_tab_stops", 2899603908, Nil, main.p_object, tab_stops);  }  // 20
get_tab_stops :: (main: *Label) -> PackedFloat32Array { call_ret := cast(*PackedFloat32Array) sys_call("Label", "get_tab_stops", 675695659, PackedFloat32Array, main.p_object); return call_ret.*; }  // 21
set_text_overrun_behavior :: (main: *Label, overrun_behavior: TextServer.OverrunBehavior) { sys_call("Label", "set_text_overrun_behavior", 1008890932, Nil, main.p_object, overrun_behavior);  }  // 22
get_text_overrun_behavior :: (main: *Label) -> TextServer.OverrunBehavior { call_ret := cast(*TextServer.OverrunBehavior) sys_call("Label", "get_text_overrun_behavior", 3779142101, TextServer.OverrunBehavior, main.p_object); return call_ret.*; }  // 23
set_ellipsis_char :: (main: *Label, char: string) { sys_call("Label", "set_ellipsis_char", 83702148, Nil, main.p_object, char);  }  // 24
get_ellipsis_char :: (main: *Label) -> gstring { call_ret := cast(*gstring) sys_call("Label", "get_ellipsis_char", 201670096, gstring, main.p_object); return call_ret.*; }  // 25
set_uppercase :: (main: *Label, enable: bool) { sys_call("Label", "set_uppercase", 2586408642, Nil, main.p_object, enable);  }  // 26
is_uppercase :: (main: *Label) -> bool { call_ret := cast(*bool) sys_call("Label", "is_uppercase", 36873697, bool, main.p_object); return call_ret.*; }  // 27
get_line_height :: (main: *Label) -> int { call_ret := cast(*int) sys_call("Label", "get_line_height", 181039630, int, main.p_object); return call_ret.*; }  // 28
get_line_count :: (main: *Label) -> int { call_ret := cast(*int) sys_call("Label", "get_line_count", 3905245786, int, main.p_object); return call_ret.*; }  // 29
get_visible_line_count :: (main: *Label) -> int { call_ret := cast(*int) sys_call("Label", "get_visible_line_count", 3905245786, int, main.p_object); return call_ret.*; }  // 30
get_total_character_count :: (main: *Label) -> int { call_ret := cast(*int) sys_call("Label", "get_total_character_count", 3905245786, int, main.p_object); return call_ret.*; }  // 31
set_visible_characters :: (main: *Label, amount: int) { sys_call("Label", "set_visible_characters", 1286410249, Nil, main.p_object, amount);  }  // 32
get_visible_characters :: (main: *Label) -> int { call_ret := cast(*int) sys_call("Label", "get_visible_characters", 3905245786, int, main.p_object); return call_ret.*; }  // 33
get_visible_characters_behavior :: (main: *Label) -> TextServer.VisibleCharactersBehavior { call_ret := cast(*TextServer.VisibleCharactersBehavior) sys_call("Label", "get_visible_characters_behavior", 258789322, TextServer.VisibleCharactersBehavior, main.p_object); return call_ret.*; }  // 34
set_visible_characters_behavior :: (main: *Label, behavior: TextServer.VisibleCharactersBehavior) { sys_call("Label", "set_visible_characters_behavior", 3383839701, Nil, main.p_object, behavior);  }  // 35
set_visible_ratio :: (main: *Label, ratio: float) { sys_call("Label", "set_visible_ratio", 373806689, Nil, main.p_object, ratio);  }  // 36
get_visible_ratio :: (main: *Label) -> float { call_ret := cast(*float) sys_call("Label", "get_visible_ratio", 1740695150, float, main.p_object); return call_ret.*; }  // 37
set_lines_skipped :: (main: *Label, lines_skipped: int) { sys_call("Label", "set_lines_skipped", 1286410249, Nil, main.p_object, lines_skipped);  }  // 38
get_lines_skipped :: (main: *Label) -> int { call_ret := cast(*int) sys_call("Label", "get_lines_skipped", 3905245786, int, main.p_object); return call_ret.*; }  // 39
set_max_lines_visible :: (main: *Label, lines_visible: int) { sys_call("Label", "set_max_lines_visible", 1286410249, Nil, main.p_object, lines_visible);  }  // 40
get_max_lines_visible :: (main: *Label) -> int { call_ret := cast(*int) sys_call("Label", "get_max_lines_visible", 3905245786, int, main.p_object); return call_ret.*; }  // 41
set_structured_text_bidi_override :: (main: *Label, parser: TextServer.StructuredTextParser) { sys_call("Label", "set_structured_text_bidi_override", 55961453, Nil, main.p_object, parser);  }  // 42
get_structured_text_bidi_override :: (main: *Label) -> TextServer.StructuredTextParser { call_ret := cast(*TextServer.StructuredTextParser) sys_call("Label", "get_structured_text_bidi_override", 3385126229, TextServer.StructuredTextParser, main.p_object); return call_ret.*; }  // 43
set_structured_text_bidi_override_options :: (main: *Label, args: Array) { sys_call("Label", "set_structured_text_bidi_override_options", 381264803, Nil, main.p_object, args);  }  // 44
get_structured_text_bidi_override_options :: (main: *Label) -> Array { call_ret := cast(*Array) sys_call("Label", "get_structured_text_bidi_override_options", 3995934104, Array, main.p_object); return call_ret.*; }  // 45
get_character_bounds :: (main: *Label, pos: int) -> Rect2 { call_ret := cast(*Rect2) sys_call("Label", "get_character_bounds", 3327874267, Rect2, main.p_object, pos); return call_ret.*; }  // 46

set_horizontal_alignment :: (main: *Label3D, alignment: HorizontalAlignment) { sys_call("Label3D", "set_horizontal_alignment", 2312603777, Nil, main.p_object, alignment);  }  // 0
get_horizontal_alignment :: (main: *Label3D) -> HorizontalAlignment { call_ret := cast(*HorizontalAlignment) sys_call("Label3D", "get_horizontal_alignment", 341400642, HorizontalAlignment, main.p_object); return call_ret.*; }  // 1
set_vertical_alignment :: (main: *Label3D, alignment: VerticalAlignment) { sys_call("Label3D", "set_vertical_alignment", 1796458609, Nil, main.p_object, alignment);  }  // 2
get_vertical_alignment :: (main: *Label3D) -> VerticalAlignment { call_ret := cast(*VerticalAlignment) sys_call("Label3D", "get_vertical_alignment", 3274884059, VerticalAlignment, main.p_object); return call_ret.*; }  // 3
set_modulate :: (main: *Label3D, modulate: Color) { sys_call("Label3D", "set_modulate", 2920490490, Nil, main.p_object, modulate);  }  // 4
get_modulate :: (main: *Label3D) -> Color { call_ret := cast(*Color) sys_call("Label3D", "get_modulate", 3444240500, Color, main.p_object); return call_ret.*; }  // 5
set_outline_modulate :: (main: *Label3D, modulate: Color) { sys_call("Label3D", "set_outline_modulate", 2920490490, Nil, main.p_object, modulate);  }  // 6
get_outline_modulate :: (main: *Label3D) -> Color { call_ret := cast(*Color) sys_call("Label3D", "get_outline_modulate", 3444240500, Color, main.p_object); return call_ret.*; }  // 7
set_text :: (main: *Label3D, text: string) { sys_call("Label3D", "set_text", 83702148, Nil, main.p_object, text);  }  // 8
get_text :: (main: *Label3D) -> gstring { call_ret := cast(*gstring) sys_call("Label3D", "get_text", 201670096, gstring, main.p_object); return call_ret.*; }  // 9
set_text_direction :: (main: *Label3D, direction: TextServer.Direction) { sys_call("Label3D", "set_text_direction", 1418190634, Nil, main.p_object, direction);  }  // 10
get_text_direction :: (main: *Label3D) -> TextServer.Direction { call_ret := cast(*TextServer.Direction) sys_call("Label3D", "get_text_direction", 2516697328, TextServer.Direction, main.p_object); return call_ret.*; }  // 11
set_language :: (main: *Label3D, language: string) { sys_call("Label3D", "set_language", 83702148, Nil, main.p_object, language);  }  // 12
get_language :: (main: *Label3D) -> gstring { call_ret := cast(*gstring) sys_call("Label3D", "get_language", 201670096, gstring, main.p_object); return call_ret.*; }  // 13
set_structured_text_bidi_override :: (main: *Label3D, parser: TextServer.StructuredTextParser) { sys_call("Label3D", "set_structured_text_bidi_override", 55961453, Nil, main.p_object, parser);  }  // 14
get_structured_text_bidi_override :: (main: *Label3D) -> TextServer.StructuredTextParser { call_ret := cast(*TextServer.StructuredTextParser) sys_call("Label3D", "get_structured_text_bidi_override", 3385126229, TextServer.StructuredTextParser, main.p_object); return call_ret.*; }  // 15
set_structured_text_bidi_override_options :: (main: *Label3D, args: Array) { sys_call("Label3D", "set_structured_text_bidi_override_options", 381264803, Nil, main.p_object, args);  }  // 16
get_structured_text_bidi_override_options :: (main: *Label3D) -> Array { call_ret := cast(*Array) sys_call("Label3D", "get_structured_text_bidi_override_options", 3995934104, Array, main.p_object); return call_ret.*; }  // 17
set_uppercase :: (main: *Label3D, enable: bool) { sys_call("Label3D", "set_uppercase", 2586408642, Nil, main.p_object, enable);  }  // 18
is_uppercase :: (main: *Label3D) -> bool { call_ret := cast(*bool) sys_call("Label3D", "is_uppercase", 36873697, bool, main.p_object); return call_ret.*; }  // 19
set_render_priority :: (main: *Label3D, priority: int) { sys_call("Label3D", "set_render_priority", 1286410249, Nil, main.p_object, priority);  }  // 20
get_render_priority :: (main: *Label3D) -> int { call_ret := cast(*int) sys_call("Label3D", "get_render_priority", 3905245786, int, main.p_object); return call_ret.*; }  // 21
set_outline_render_priority :: (main: *Label3D, priority: int) { sys_call("Label3D", "set_outline_render_priority", 1286410249, Nil, main.p_object, priority);  }  // 22
get_outline_render_priority :: (main: *Label3D) -> int { call_ret := cast(*int) sys_call("Label3D", "get_outline_render_priority", 3905245786, int, main.p_object); return call_ret.*; }  // 23
set_font :: (main: *Label3D, font: Font) { sys_call("Label3D", "set_font", 1262170328, Nil, main.p_object, font);  }  // 24
get_font :: (main: *Label3D) -> *Font { call_ret := cast(*Font) sys_call("Label3D", "get_font", 3229501585, Font, main.p_object); return call_ret; }  // 25
set_font_size :: (main: *Label3D, size: int) { sys_call("Label3D", "set_font_size", 1286410249, Nil, main.p_object, size);  }  // 26
get_font_size :: (main: *Label3D) -> int { call_ret := cast(*int) sys_call("Label3D", "get_font_size", 3905245786, int, main.p_object); return call_ret.*; }  // 27
set_outline_size :: (main: *Label3D, outline_size: int) { sys_call("Label3D", "set_outline_size", 1286410249, Nil, main.p_object, outline_size);  }  // 28
get_outline_size :: (main: *Label3D) -> int { call_ret := cast(*int) sys_call("Label3D", "get_outline_size", 3905245786, int, main.p_object); return call_ret.*; }  // 29
set_line_spacing :: (main: *Label3D, line_spacing: float) { sys_call("Label3D", "set_line_spacing", 373806689, Nil, main.p_object, line_spacing);  }  // 30
get_line_spacing :: (main: *Label3D) -> float { call_ret := cast(*float) sys_call("Label3D", "get_line_spacing", 1740695150, float, main.p_object); return call_ret.*; }  // 31
set_autowrap_mode :: (main: *Label3D, autowrap_mode: TextServer.AutowrapMode) { sys_call("Label3D", "set_autowrap_mode", 3289138044, Nil, main.p_object, autowrap_mode);  }  // 32
get_autowrap_mode :: (main: *Label3D) -> TextServer.AutowrapMode { call_ret := cast(*TextServer.AutowrapMode) sys_call("Label3D", "get_autowrap_mode", 1549071663, TextServer.AutowrapMode, main.p_object); return call_ret.*; }  // 33
set_justification_flags :: (main: *Label3D, justification_flags: TextServer.JustificationFlag) { sys_call("Label3D", "set_justification_flags", 2877345813, Nil, main.p_object, justification_flags);  }  // 34
get_justification_flags :: (main: *Label3D) -> TextServer.JustificationFlag { call_ret := cast(*TextServer.JustificationFlag) sys_call("Label3D", "get_justification_flags", 1583363614, TextServer.JustificationFlag, main.p_object); return call_ret.*; }  // 35
set_width :: (main: *Label3D, width: float) { sys_call("Label3D", "set_width", 373806689, Nil, main.p_object, width);  }  // 36
get_width :: (main: *Label3D) -> float { call_ret := cast(*float) sys_call("Label3D", "get_width", 1740695150, float, main.p_object); return call_ret.*; }  // 37
set_pixel_size :: (main: *Label3D, pixel_size: float) { sys_call("Label3D", "set_pixel_size", 373806689, Nil, main.p_object, pixel_size);  }  // 38
get_pixel_size :: (main: *Label3D) -> float { call_ret := cast(*float) sys_call("Label3D", "get_pixel_size", 1740695150, float, main.p_object); return call_ret.*; }  // 39
set_offset :: (main: *Label3D, offset: Vector2) { sys_call("Label3D", "set_offset", 743155724, Nil, main.p_object, offset);  }  // 40
get_offset :: (main: *Label3D) -> Vector2 { call_ret := cast(*Vector2) sys_call("Label3D", "get_offset", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 41
set_draw_flag :: (main: *Label3D, flag: Label3D.DrawFlags, enabled: bool) { sys_call("Label3D", "set_draw_flag", 1285833066, Nil, main.p_object, flag, enabled);  }  // 42
get_draw_flag :: (main: *Label3D, flag: Label3D.DrawFlags) -> bool { call_ret := cast(*bool) sys_call("Label3D", "get_draw_flag", 259226453, bool, main.p_object, flag); return call_ret.*; }  // 43
set_billboard_mode :: (main: *Label3D, mode: BaseMaterial3D.BillboardMode) { sys_call("Label3D", "set_billboard_mode", 4202036497, Nil, main.p_object, mode);  }  // 44
get_billboard_mode :: (main: *Label3D) -> BaseMaterial3D.BillboardMode { call_ret := cast(*BaseMaterial3D.BillboardMode) sys_call("Label3D", "get_billboard_mode", 1283840139, BaseMaterial3D.BillboardMode, main.p_object); return call_ret.*; }  // 45
set_alpha_cut_mode :: (main: *Label3D, mode: Label3D.AlphaCutMode) { sys_call("Label3D", "set_alpha_cut_mode", 2549142916, Nil, main.p_object, mode);  }  // 46
get_alpha_cut_mode :: (main: *Label3D) -> Label3D.AlphaCutMode { call_ret := cast(*Label3D.AlphaCutMode) sys_call("Label3D", "get_alpha_cut_mode", 219468601, Label3D.AlphaCutMode, main.p_object); return call_ret.*; }  // 47
set_alpha_scissor_threshold :: (main: *Label3D, threshold: float) { sys_call("Label3D", "set_alpha_scissor_threshold", 373806689, Nil, main.p_object, threshold);  }  // 48
get_alpha_scissor_threshold :: (main: *Label3D) -> float { call_ret := cast(*float) sys_call("Label3D", "get_alpha_scissor_threshold", 1740695150, float, main.p_object); return call_ret.*; }  // 49
set_alpha_hash_scale :: (main: *Label3D, threshold: float) { sys_call("Label3D", "set_alpha_hash_scale", 373806689, Nil, main.p_object, threshold);  }  // 50
get_alpha_hash_scale :: (main: *Label3D) -> float { call_ret := cast(*float) sys_call("Label3D", "get_alpha_hash_scale", 1740695150, float, main.p_object); return call_ret.*; }  // 51
set_alpha_antialiasing :: (main: *Label3D, alpha_aa: BaseMaterial3D.AlphaAntiAliasing) { sys_call("Label3D", "set_alpha_antialiasing", 3212649852, Nil, main.p_object, alpha_aa);  }  // 52
get_alpha_antialiasing :: (main: *Label3D) -> BaseMaterial3D.AlphaAntiAliasing { call_ret := cast(*BaseMaterial3D.AlphaAntiAliasing) sys_call("Label3D", "get_alpha_antialiasing", 2889939400, BaseMaterial3D.AlphaAntiAliasing, main.p_object); return call_ret.*; }  // 53
set_alpha_antialiasing_edge :: (main: *Label3D, edge: float) { sys_call("Label3D", "set_alpha_antialiasing_edge", 373806689, Nil, main.p_object, edge);  }  // 54
get_alpha_antialiasing_edge :: (main: *Label3D) -> float { call_ret := cast(*float) sys_call("Label3D", "get_alpha_antialiasing_edge", 1740695150, float, main.p_object); return call_ret.*; }  // 55
set_texture_filter :: (main: *Label3D, mode: BaseMaterial3D.TextureFilter) { sys_call("Label3D", "set_texture_filter", 22904437, Nil, main.p_object, mode);  }  // 56
get_texture_filter :: (main: *Label3D) -> BaseMaterial3D.TextureFilter { call_ret := cast(*BaseMaterial3D.TextureFilter) sys_call("Label3D", "get_texture_filter", 3289213076, BaseMaterial3D.TextureFilter, main.p_object); return call_ret.*; }  // 57
generate_triangle_mesh :: (main: *Label3D) -> *TriangleMesh { call_ret := cast(*TriangleMesh) sys_call("Label3D", "generate_triangle_mesh", 3476533166, TriangleMesh, main.p_object); return call_ret; }  // 58

set_line_spacing :: (main: *LabelSettings, spacing: float) { sys_call("LabelSettings", "set_line_spacing", 373806689, Nil, main.p_object, spacing);  }  // 0
get_line_spacing :: (main: *LabelSettings) -> float { call_ret := cast(*float) sys_call("LabelSettings", "get_line_spacing", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_paragraph_spacing :: (main: *LabelSettings, spacing: float) { sys_call("LabelSettings", "set_paragraph_spacing", 373806689, Nil, main.p_object, spacing);  }  // 2
get_paragraph_spacing :: (main: *LabelSettings) -> float { call_ret := cast(*float) sys_call("LabelSettings", "get_paragraph_spacing", 1740695150, float, main.p_object); return call_ret.*; }  // 3
set_font :: (main: *LabelSettings, font: Font) { sys_call("LabelSettings", "set_font", 1262170328, Nil, main.p_object, font);  }  // 4
get_font :: (main: *LabelSettings) -> *Font { call_ret := cast(*Font) sys_call("LabelSettings", "get_font", 3229501585, Font, main.p_object); return call_ret; }  // 5
set_font_size :: (main: *LabelSettings, size: int) { sys_call("LabelSettings", "set_font_size", 1286410249, Nil, main.p_object, size);  }  // 6
get_font_size :: (main: *LabelSettings) -> int { call_ret := cast(*int) sys_call("LabelSettings", "get_font_size", 3905245786, int, main.p_object); return call_ret.*; }  // 7
set_font_color :: (main: *LabelSettings, color: Color) { sys_call("LabelSettings", "set_font_color", 2920490490, Nil, main.p_object, color);  }  // 8
get_font_color :: (main: *LabelSettings) -> Color { call_ret := cast(*Color) sys_call("LabelSettings", "get_font_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 9
set_outline_size :: (main: *LabelSettings, size: int) { sys_call("LabelSettings", "set_outline_size", 1286410249, Nil, main.p_object, size);  }  // 10
get_outline_size :: (main: *LabelSettings) -> int { call_ret := cast(*int) sys_call("LabelSettings", "get_outline_size", 3905245786, int, main.p_object); return call_ret.*; }  // 11
set_outline_color :: (main: *LabelSettings, color: Color) { sys_call("LabelSettings", "set_outline_color", 2920490490, Nil, main.p_object, color);  }  // 12
get_outline_color :: (main: *LabelSettings) -> Color { call_ret := cast(*Color) sys_call("LabelSettings", "get_outline_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 13
set_shadow_size :: (main: *LabelSettings, size: int) { sys_call("LabelSettings", "set_shadow_size", 1286410249, Nil, main.p_object, size);  }  // 14
get_shadow_size :: (main: *LabelSettings) -> int { call_ret := cast(*int) sys_call("LabelSettings", "get_shadow_size", 3905245786, int, main.p_object); return call_ret.*; }  // 15
set_shadow_color :: (main: *LabelSettings, color: Color) { sys_call("LabelSettings", "set_shadow_color", 2920490490, Nil, main.p_object, color);  }  // 16
get_shadow_color :: (main: *LabelSettings) -> Color { call_ret := cast(*Color) sys_call("LabelSettings", "get_shadow_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 17
set_shadow_offset :: (main: *LabelSettings, offset: Vector2) { sys_call("LabelSettings", "set_shadow_offset", 743155724, Nil, main.p_object, offset);  }  // 18
get_shadow_offset :: (main: *LabelSettings) -> Vector2 { call_ret := cast(*Vector2) sys_call("LabelSettings", "get_shadow_offset", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 19

set_enabled :: (main: *Light2D, enabled: bool) { sys_call("Light2D", "set_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 0
is_enabled :: (main: *Light2D) -> bool { call_ret := cast(*bool) sys_call("Light2D", "is_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 1
set_editor_only :: (main: *Light2D, editor_only: bool) { sys_call("Light2D", "set_editor_only", 2586408642, Nil, main.p_object, editor_only);  }  // 2
is_editor_only :: (main: *Light2D) -> bool { call_ret := cast(*bool) sys_call("Light2D", "is_editor_only", 36873697, bool, main.p_object); return call_ret.*; }  // 3
set_color :: (main: *Light2D, color: Color) { sys_call("Light2D", "set_color", 2920490490, Nil, main.p_object, color);  }  // 4
get_color :: (main: *Light2D) -> Color { call_ret := cast(*Color) sys_call("Light2D", "get_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 5
set_energy :: (main: *Light2D, energy: float) { sys_call("Light2D", "set_energy", 373806689, Nil, main.p_object, energy);  }  // 6
get_energy :: (main: *Light2D) -> float { call_ret := cast(*float) sys_call("Light2D", "get_energy", 1740695150, float, main.p_object); return call_ret.*; }  // 7
set_z_range_min :: (main: *Light2D, z: int) { sys_call("Light2D", "set_z_range_min", 1286410249, Nil, main.p_object, z);  }  // 8
get_z_range_min :: (main: *Light2D) -> int { call_ret := cast(*int) sys_call("Light2D", "get_z_range_min", 3905245786, int, main.p_object); return call_ret.*; }  // 9
set_z_range_max :: (main: *Light2D, z: int) { sys_call("Light2D", "set_z_range_max", 1286410249, Nil, main.p_object, z);  }  // 10
get_z_range_max :: (main: *Light2D) -> int { call_ret := cast(*int) sys_call("Light2D", "get_z_range_max", 3905245786, int, main.p_object); return call_ret.*; }  // 11
set_layer_range_min :: (main: *Light2D, layer: int) { sys_call("Light2D", "set_layer_range_min", 1286410249, Nil, main.p_object, layer);  }  // 12
get_layer_range_min :: (main: *Light2D) -> int { call_ret := cast(*int) sys_call("Light2D", "get_layer_range_min", 3905245786, int, main.p_object); return call_ret.*; }  // 13
set_layer_range_max :: (main: *Light2D, layer: int) { sys_call("Light2D", "set_layer_range_max", 1286410249, Nil, main.p_object, layer);  }  // 14
get_layer_range_max :: (main: *Light2D) -> int { call_ret := cast(*int) sys_call("Light2D", "get_layer_range_max", 3905245786, int, main.p_object); return call_ret.*; }  // 15
set_item_cull_mask :: (main: *Light2D, item_cull_mask: int) { sys_call("Light2D", "set_item_cull_mask", 1286410249, Nil, main.p_object, item_cull_mask);  }  // 16
get_item_cull_mask :: (main: *Light2D) -> int { call_ret := cast(*int) sys_call("Light2D", "get_item_cull_mask", 3905245786, int, main.p_object); return call_ret.*; }  // 17
set_item_shadow_cull_mask :: (main: *Light2D, item_shadow_cull_mask: int) { sys_call("Light2D", "set_item_shadow_cull_mask", 1286410249, Nil, main.p_object, item_shadow_cull_mask);  }  // 18
get_item_shadow_cull_mask :: (main: *Light2D) -> int { call_ret := cast(*int) sys_call("Light2D", "get_item_shadow_cull_mask", 3905245786, int, main.p_object); return call_ret.*; }  // 19
set_shadow_enabled :: (main: *Light2D, enabled: bool) { sys_call("Light2D", "set_shadow_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 20
is_shadow_enabled :: (main: *Light2D) -> bool { call_ret := cast(*bool) sys_call("Light2D", "is_shadow_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 21
set_shadow_smooth :: (main: *Light2D, smooth: float) { sys_call("Light2D", "set_shadow_smooth", 373806689, Nil, main.p_object, smooth);  }  // 22
get_shadow_smooth :: (main: *Light2D) -> float { call_ret := cast(*float) sys_call("Light2D", "get_shadow_smooth", 1740695150, float, main.p_object); return call_ret.*; }  // 23
set_shadow_filter :: (main: *Light2D, filter: Light2D.ShadowFilter) { sys_call("Light2D", "set_shadow_filter", 3209356555, Nil, main.p_object, filter);  }  // 24
get_shadow_filter :: (main: *Light2D) -> Light2D.ShadowFilter { call_ret := cast(*Light2D.ShadowFilter) sys_call("Light2D", "get_shadow_filter", 1973619177, Light2D.ShadowFilter, main.p_object); return call_ret.*; }  // 25
set_shadow_color :: (main: *Light2D, shadow_color: Color) { sys_call("Light2D", "set_shadow_color", 2920490490, Nil, main.p_object, shadow_color);  }  // 26
get_shadow_color :: (main: *Light2D) -> Color { call_ret := cast(*Color) sys_call("Light2D", "get_shadow_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 27
set_blend_mode :: (main: *Light2D, mode: Light2D.BlendMode) { sys_call("Light2D", "set_blend_mode", 2916638796, Nil, main.p_object, mode);  }  // 28
get_blend_mode :: (main: *Light2D) -> Light2D.BlendMode { call_ret := cast(*Light2D.BlendMode) sys_call("Light2D", "get_blend_mode", 936255250, Light2D.BlendMode, main.p_object); return call_ret.*; }  // 29
set_height :: (main: *Light2D, height: float) { sys_call("Light2D", "set_height", 373806689, Nil, main.p_object, height);  }  // 30
get_height :: (main: *Light2D) -> float { call_ret := cast(*float) sys_call("Light2D", "get_height", 1740695150, float, main.p_object); return call_ret.*; }  // 31

set_editor_only :: (main: *Light3D, editor_only: bool) { sys_call("Light3D", "set_editor_only", 2586408642, Nil, main.p_object, editor_only);  }  // 0
is_editor_only :: (main: *Light3D) -> bool { call_ret := cast(*bool) sys_call("Light3D", "is_editor_only", 36873697, bool, main.p_object); return call_ret.*; }  // 1
set_param :: (main: *Light3D, param: Light3D.Param, value: float) { sys_call("Light3D", "set_param", 1722734213, Nil, main.p_object, param, value);  }  // 2
get_param :: (main: *Light3D, param: Light3D.Param) -> float { call_ret := cast(*float) sys_call("Light3D", "get_param", 1844084987, float, main.p_object, param); return call_ret.*; }  // 3
set_shadow :: (main: *Light3D, enabled: bool) { sys_call("Light3D", "set_shadow", 2586408642, Nil, main.p_object, enabled);  }  // 4
has_shadow :: (main: *Light3D) -> bool { call_ret := cast(*bool) sys_call("Light3D", "has_shadow", 36873697, bool, main.p_object); return call_ret.*; }  // 5
set_negative :: (main: *Light3D, enabled: bool) { sys_call("Light3D", "set_negative", 2586408642, Nil, main.p_object, enabled);  }  // 6
is_negative :: (main: *Light3D) -> bool { call_ret := cast(*bool) sys_call("Light3D", "is_negative", 36873697, bool, main.p_object); return call_ret.*; }  // 7
set_cull_mask :: (main: *Light3D, cull_mask: int) { sys_call("Light3D", "set_cull_mask", 1286410249, Nil, main.p_object, cull_mask);  }  // 8
get_cull_mask :: (main: *Light3D) -> int { call_ret := cast(*int) sys_call("Light3D", "get_cull_mask", 3905245786, int, main.p_object); return call_ret.*; }  // 9
set_enable_distance_fade :: (main: *Light3D, enable: bool) { sys_call("Light3D", "set_enable_distance_fade", 2586408642, Nil, main.p_object, enable);  }  // 10
is_distance_fade_enabled :: (main: *Light3D) -> bool { call_ret := cast(*bool) sys_call("Light3D", "is_distance_fade_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 11
set_distance_fade_begin :: (main: *Light3D, distance: float) { sys_call("Light3D", "set_distance_fade_begin", 373806689, Nil, main.p_object, distance);  }  // 12
get_distance_fade_begin :: (main: *Light3D) -> float { call_ret := cast(*float) sys_call("Light3D", "get_distance_fade_begin", 1740695150, float, main.p_object); return call_ret.*; }  // 13
set_distance_fade_shadow :: (main: *Light3D, distance: float) { sys_call("Light3D", "set_distance_fade_shadow", 373806689, Nil, main.p_object, distance);  }  // 14
get_distance_fade_shadow :: (main: *Light3D) -> float { call_ret := cast(*float) sys_call("Light3D", "get_distance_fade_shadow", 1740695150, float, main.p_object); return call_ret.*; }  // 15
set_distance_fade_length :: (main: *Light3D, distance: float) { sys_call("Light3D", "set_distance_fade_length", 373806689, Nil, main.p_object, distance);  }  // 16
get_distance_fade_length :: (main: *Light3D) -> float { call_ret := cast(*float) sys_call("Light3D", "get_distance_fade_length", 1740695150, float, main.p_object); return call_ret.*; }  // 17
set_color :: (main: *Light3D, color: Color) { sys_call("Light3D", "set_color", 2920490490, Nil, main.p_object, color);  }  // 18
get_color :: (main: *Light3D) -> Color { call_ret := cast(*Color) sys_call("Light3D", "get_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 19
set_shadow_reverse_cull_face :: (main: *Light3D, enable: bool) { sys_call("Light3D", "set_shadow_reverse_cull_face", 2586408642, Nil, main.p_object, enable);  }  // 20
get_shadow_reverse_cull_face :: (main: *Light3D) -> bool { call_ret := cast(*bool) sys_call("Light3D", "get_shadow_reverse_cull_face", 36873697, bool, main.p_object); return call_ret.*; }  // 21
set_shadow_caster_mask :: (main: *Light3D, caster_mask: int) { sys_call("Light3D", "set_shadow_caster_mask", 1286410249, Nil, main.p_object, caster_mask);  }  // 22
get_shadow_caster_mask :: (main: *Light3D) -> int { call_ret := cast(*int) sys_call("Light3D", "get_shadow_caster_mask", 3905245786, int, main.p_object); return call_ret.*; }  // 23
set_bake_mode :: (main: *Light3D, bake_mode: Light3D.BakeMode) { sys_call("Light3D", "set_bake_mode", 37739303, Nil, main.p_object, bake_mode);  }  // 24
get_bake_mode :: (main: *Light3D) -> Light3D.BakeMode { call_ret := cast(*Light3D.BakeMode) sys_call("Light3D", "get_bake_mode", 371737608, Light3D.BakeMode, main.p_object); return call_ret.*; }  // 25
set_projector :: (main: *Light3D, projector: Texture2D) { sys_call("Light3D", "set_projector", 4051416890, Nil, main.p_object, projector);  }  // 26
get_projector :: (main: *Light3D) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("Light3D", "get_projector", 3635182373, Texture2D, main.p_object); return call_ret; }  // 27
set_temperature :: (main: *Light3D, temperature: float) { sys_call("Light3D", "set_temperature", 373806689, Nil, main.p_object, temperature);  }  // 28
get_temperature :: (main: *Light3D) -> float { call_ret := cast(*float) sys_call("Light3D", "get_temperature", 1740695150, float, main.p_object); return call_ret.*; }  // 29
get_correlated_color :: (main: *Light3D) -> Color { call_ret := cast(*Color) sys_call("Light3D", "get_correlated_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 30

set_occluder_polygon :: (main: *LightOccluder2D, polygon: OccluderPolygon2D) { sys_call("LightOccluder2D", "set_occluder_polygon", 3258315893, Nil, main.p_object, polygon);  }  // 0
get_occluder_polygon :: (main: *LightOccluder2D) -> *OccluderPolygon2D { call_ret := cast(*OccluderPolygon2D) sys_call("LightOccluder2D", "get_occluder_polygon", 3962317075, OccluderPolygon2D, main.p_object); return call_ret; }  // 1
set_occluder_light_mask :: (main: *LightOccluder2D, mask: int) { sys_call("LightOccluder2D", "set_occluder_light_mask", 1286410249, Nil, main.p_object, mask);  }  // 2
get_occluder_light_mask :: (main: *LightOccluder2D) -> int { call_ret := cast(*int) sys_call("LightOccluder2D", "get_occluder_light_mask", 3905245786, int, main.p_object); return call_ret.*; }  // 3
set_as_sdf_collision :: (main: *LightOccluder2D, enable: bool) { sys_call("LightOccluder2D", "set_as_sdf_collision", 2586408642, Nil, main.p_object, enable);  }  // 4
is_set_as_sdf_collision :: (main: *LightOccluder2D) -> bool { call_ret := cast(*bool) sys_call("LightOccluder2D", "is_set_as_sdf_collision", 36873697, bool, main.p_object); return call_ret.*; }  // 5

set_light_data :: (main: *LightmapGI, data: LightmapGIData) { sys_call("LightmapGI", "set_light_data", 1790597277, Nil, main.p_object, data);  }  // 0
get_light_data :: (main: *LightmapGI) -> *LightmapGIData { call_ret := cast(*LightmapGIData) sys_call("LightmapGI", "get_light_data", 290354153, LightmapGIData, main.p_object); return call_ret; }  // 1
set_bake_quality :: (main: *LightmapGI, bake_quality: LightmapGI.BakeQuality) { sys_call("LightmapGI", "set_bake_quality", 1192215803, Nil, main.p_object, bake_quality);  }  // 2
get_bake_quality :: (main: *LightmapGI) -> LightmapGI.BakeQuality { call_ret := cast(*LightmapGI.BakeQuality) sys_call("LightmapGI", "get_bake_quality", 688832735, LightmapGI.BakeQuality, main.p_object); return call_ret.*; }  // 3
set_bounces :: (main: *LightmapGI, bounces: int) { sys_call("LightmapGI", "set_bounces", 1286410249, Nil, main.p_object, bounces);  }  // 4
get_bounces :: (main: *LightmapGI) -> int { call_ret := cast(*int) sys_call("LightmapGI", "get_bounces", 3905245786, int, main.p_object); return call_ret.*; }  // 5
set_bounce_indirect_energy :: (main: *LightmapGI, bounce_indirect_energy: float) { sys_call("LightmapGI", "set_bounce_indirect_energy", 373806689, Nil, main.p_object, bounce_indirect_energy);  }  // 6
get_bounce_indirect_energy :: (main: *LightmapGI) -> float { call_ret := cast(*float) sys_call("LightmapGI", "get_bounce_indirect_energy", 1740695150, float, main.p_object); return call_ret.*; }  // 7
set_generate_probes :: (main: *LightmapGI, subdivision: LightmapGI.GenerateProbes) { sys_call("LightmapGI", "set_generate_probes", 549981046, Nil, main.p_object, subdivision);  }  // 8
get_generate_probes :: (main: *LightmapGI) -> LightmapGI.GenerateProbes { call_ret := cast(*LightmapGI.GenerateProbes) sys_call("LightmapGI", "get_generate_probes", 3930596226, LightmapGI.GenerateProbes, main.p_object); return call_ret.*; }  // 9
set_bias :: (main: *LightmapGI, bias: float) { sys_call("LightmapGI", "set_bias", 373806689, Nil, main.p_object, bias);  }  // 10
get_bias :: (main: *LightmapGI) -> float { call_ret := cast(*float) sys_call("LightmapGI", "get_bias", 1740695150, float, main.p_object); return call_ret.*; }  // 11
set_environment_mode :: (main: *LightmapGI, mode: LightmapGI.EnvironmentMode) { sys_call("LightmapGI", "set_environment_mode", 2282650285, Nil, main.p_object, mode);  }  // 12
get_environment_mode :: (main: *LightmapGI) -> LightmapGI.EnvironmentMode { call_ret := cast(*LightmapGI.EnvironmentMode) sys_call("LightmapGI", "get_environment_mode", 4128646479, LightmapGI.EnvironmentMode, main.p_object); return call_ret.*; }  // 13
set_environment_custom_sky :: (main: *LightmapGI, sky: Sky) { sys_call("LightmapGI", "set_environment_custom_sky", 3336722921, Nil, main.p_object, sky);  }  // 14
get_environment_custom_sky :: (main: *LightmapGI) -> *Sky { call_ret := cast(*Sky) sys_call("LightmapGI", "get_environment_custom_sky", 1177136966, Sky, main.p_object); return call_ret; }  // 15
set_environment_custom_color :: (main: *LightmapGI, color: Color) { sys_call("LightmapGI", "set_environment_custom_color", 2920490490, Nil, main.p_object, color);  }  // 16
get_environment_custom_color :: (main: *LightmapGI) -> Color { call_ret := cast(*Color) sys_call("LightmapGI", "get_environment_custom_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 17
set_environment_custom_energy :: (main: *LightmapGI, energy: float) { sys_call("LightmapGI", "set_environment_custom_energy", 373806689, Nil, main.p_object, energy);  }  // 18
get_environment_custom_energy :: (main: *LightmapGI) -> float { call_ret := cast(*float) sys_call("LightmapGI", "get_environment_custom_energy", 1740695150, float, main.p_object); return call_ret.*; }  // 19
set_texel_scale :: (main: *LightmapGI, texel_scale: float) { sys_call("LightmapGI", "set_texel_scale", 373806689, Nil, main.p_object, texel_scale);  }  // 20
get_texel_scale :: (main: *LightmapGI) -> float { call_ret := cast(*float) sys_call("LightmapGI", "get_texel_scale", 1740695150, float, main.p_object); return call_ret.*; }  // 21
set_max_texture_size :: (main: *LightmapGI, max_texture_size: int) { sys_call("LightmapGI", "set_max_texture_size", 1286410249, Nil, main.p_object, max_texture_size);  }  // 22
get_max_texture_size :: (main: *LightmapGI) -> int { call_ret := cast(*int) sys_call("LightmapGI", "get_max_texture_size", 3905245786, int, main.p_object); return call_ret.*; }  // 23
set_supersampling_enabled :: (main: *LightmapGI, enable: bool) { sys_call("LightmapGI", "set_supersampling_enabled", 2586408642, Nil, main.p_object, enable);  }  // 24
is_supersampling_enabled :: (main: *LightmapGI) -> bool { call_ret := cast(*bool) sys_call("LightmapGI", "is_supersampling_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 25
set_supersampling_factor :: (main: *LightmapGI, factor: float) { sys_call("LightmapGI", "set_supersampling_factor", 373806689, Nil, main.p_object, factor);  }  // 26
get_supersampling_factor :: (main: *LightmapGI) -> float { call_ret := cast(*float) sys_call("LightmapGI", "get_supersampling_factor", 1740695150, float, main.p_object); return call_ret.*; }  // 27
set_use_denoiser :: (main: *LightmapGI, use_denoiser: bool) { sys_call("LightmapGI", "set_use_denoiser", 2586408642, Nil, main.p_object, use_denoiser);  }  // 28
is_using_denoiser :: (main: *LightmapGI) -> bool { call_ret := cast(*bool) sys_call("LightmapGI", "is_using_denoiser", 36873697, bool, main.p_object); return call_ret.*; }  // 29
set_denoiser_strength :: (main: *LightmapGI, denoiser_strength: float) { sys_call("LightmapGI", "set_denoiser_strength", 373806689, Nil, main.p_object, denoiser_strength);  }  // 30
get_denoiser_strength :: (main: *LightmapGI) -> float { call_ret := cast(*float) sys_call("LightmapGI", "get_denoiser_strength", 1740695150, float, main.p_object); return call_ret.*; }  // 31
set_denoiser_range :: (main: *LightmapGI, denoiser_range: int) { sys_call("LightmapGI", "set_denoiser_range", 1286410249, Nil, main.p_object, denoiser_range);  }  // 32
get_denoiser_range :: (main: *LightmapGI) -> int { call_ret := cast(*int) sys_call("LightmapGI", "get_denoiser_range", 3905245786, int, main.p_object); return call_ret.*; }  // 33
set_interior :: (main: *LightmapGI, enable: bool) { sys_call("LightmapGI", "set_interior", 2586408642, Nil, main.p_object, enable);  }  // 34
is_interior :: (main: *LightmapGI) -> bool { call_ret := cast(*bool) sys_call("LightmapGI", "is_interior", 36873697, bool, main.p_object); return call_ret.*; }  // 35
set_directional :: (main: *LightmapGI, directional: bool) { sys_call("LightmapGI", "set_directional", 2586408642, Nil, main.p_object, directional);  }  // 36
is_directional :: (main: *LightmapGI) -> bool { call_ret := cast(*bool) sys_call("LightmapGI", "is_directional", 36873697, bool, main.p_object); return call_ret.*; }  // 37
set_shadowmask_mode :: (main: *LightmapGI, mode: LightmapGIData.ShadowmaskMode) { sys_call("LightmapGI", "set_shadowmask_mode", 3451066572, Nil, main.p_object, mode);  }  // 38
get_shadowmask_mode :: (main: *LightmapGI) -> LightmapGIData.ShadowmaskMode { call_ret := cast(*LightmapGIData.ShadowmaskMode) sys_call("LightmapGI", "get_shadowmask_mode", 785478560, LightmapGIData.ShadowmaskMode, main.p_object); return call_ret.*; }  // 39
set_use_texture_for_bounces :: (main: *LightmapGI, use_texture_for_bounces: bool) { sys_call("LightmapGI", "set_use_texture_for_bounces", 2586408642, Nil, main.p_object, use_texture_for_bounces);  }  // 40
is_using_texture_for_bounces :: (main: *LightmapGI) -> bool { call_ret := cast(*bool) sys_call("LightmapGI", "is_using_texture_for_bounces", 36873697, bool, main.p_object); return call_ret.*; }  // 41
set_camera_attributes :: (main: *LightmapGI, camera_attributes: CameraAttributes) { sys_call("LightmapGI", "set_camera_attributes", 2817810567, Nil, main.p_object, camera_attributes);  }  // 42
get_camera_attributes :: (main: *LightmapGI) -> *CameraAttributes { call_ret := cast(*CameraAttributes) sys_call("LightmapGI", "get_camera_attributes", 3921283215, CameraAttributes, main.p_object); return call_ret; }  // 43

set_lightmap_textures :: (main: *LightmapGIData, light_textures: [] TextureLayered) { sys_call("LightmapGIData", "set_lightmap_textures", 381264803, Nil, main.p_object, light_textures);  }  // 0
get_lightmap_textures :: (main: *LightmapGIData) -> [] TextureLayered { call_ret := cast(*[] TextureLayered) sys_call("LightmapGIData", "get_lightmap_textures", 3995934104, [] TextureLayered, main.p_object); return call_ret.*; }  // 1
set_shadowmask_textures :: (main: *LightmapGIData, shadowmask_textures: [] TextureLayered) { sys_call("LightmapGIData", "set_shadowmask_textures", 381264803, Nil, main.p_object, shadowmask_textures);  }  // 2
get_shadowmask_textures :: (main: *LightmapGIData) -> [] TextureLayered { call_ret := cast(*[] TextureLayered) sys_call("LightmapGIData", "get_shadowmask_textures", 3995934104, [] TextureLayered, main.p_object); return call_ret.*; }  // 3
set_uses_spherical_harmonics :: (main: *LightmapGIData, uses_spherical_harmonics: bool) { sys_call("LightmapGIData", "set_uses_spherical_harmonics", 2586408642, Nil, main.p_object, uses_spherical_harmonics);  }  // 4
is_using_spherical_harmonics :: (main: *LightmapGIData) -> bool { call_ret := cast(*bool) sys_call("LightmapGIData", "is_using_spherical_harmonics", 36873697, bool, main.p_object); return call_ret.*; }  // 5
add_user :: (main: *LightmapGIData, path: string, uv_scale: Rect2, slice_index: int, sub_instance: int) { sys_call("LightmapGIData", "add_user", 4272570515, Nil, main.p_object, path, uv_scale, slice_index, sub_instance);  }  // 6
get_user_count :: (main: *LightmapGIData) -> int { call_ret := cast(*int) sys_call("LightmapGIData", "get_user_count", 3905245786, int, main.p_object); return call_ret.*; }  // 7
get_user_path :: (main: *LightmapGIData, user_idx: int) -> NodePath { call_ret := cast(*NodePath) sys_call("LightmapGIData", "get_user_path", 408788394, NodePath, main.p_object, user_idx); return call_ret.*; }  // 8
clear_users :: (main: *LightmapGIData) { sys_call("LightmapGIData", "clear_users", 3218959716, Nil, main.p_object);  }  // 9
set_light_texture :: (main: *LightmapGIData, light_texture: TextureLayered) { sys_call("LightmapGIData", "set_light_texture", 1278366092, Nil, main.p_object, light_texture);  }  // 10
get_light_texture :: (main: *LightmapGIData) -> *TextureLayered { call_ret := cast(*TextureLayered) sys_call("LightmapGIData", "get_light_texture", 3984243839, TextureLayered, main.p_object); return call_ret; }  // 11




set_points :: (main: *Line2D, points: PackedVector2Array) { sys_call("Line2D", "set_points", 1509147220, Nil, main.p_object, points);  }  // 0
get_points :: (main: *Line2D) -> PackedVector2Array { call_ret := cast(*PackedVector2Array) sys_call("Line2D", "get_points", 2961356807, PackedVector2Array, main.p_object); return call_ret.*; }  // 1
set_point_position :: (main: *Line2D, index: int, position: Vector2) { sys_call("Line2D", "set_point_position", 163021252, Nil, main.p_object, index, position);  }  // 2
get_point_position :: (main: *Line2D, index: int) -> Vector2 { call_ret := cast(*Vector2) sys_call("Line2D", "get_point_position", 2299179447, Vector2, main.p_object, index); return call_ret.*; }  // 3
get_point_count :: (main: *Line2D) -> int { call_ret := cast(*int) sys_call("Line2D", "get_point_count", 3905245786, int, main.p_object); return call_ret.*; }  // 4
add_point :: (main: *Line2D, position: Vector2) { sys_call("Line2D", "add_point", 2654014372, Nil, main.p_object, position);  }  // 5
remove_point :: (main: *Line2D, index: int) { sys_call("Line2D", "remove_point", 1286410249, Nil, main.p_object, index);  }  // 6
clear_points :: (main: *Line2D) { sys_call("Line2D", "clear_points", 3218959716, Nil, main.p_object);  }  // 7
set_closed :: (main: *Line2D, closed: bool) { sys_call("Line2D", "set_closed", 2586408642, Nil, main.p_object, closed);  }  // 8
is_closed :: (main: *Line2D) -> bool { call_ret := cast(*bool) sys_call("Line2D", "is_closed", 36873697, bool, main.p_object); return call_ret.*; }  // 9
set_width :: (main: *Line2D, width: float) { sys_call("Line2D", "set_width", 373806689, Nil, main.p_object, width);  }  // 10
get_width :: (main: *Line2D) -> float { call_ret := cast(*float) sys_call("Line2D", "get_width", 1740695150, float, main.p_object); return call_ret.*; }  // 11
set_curve :: (main: *Line2D, curve: Curve) { sys_call("Line2D", "set_curve", 270443179, Nil, main.p_object, curve);  }  // 12
get_curve :: (main: *Line2D) -> *Curve { call_ret := cast(*Curve) sys_call("Line2D", "get_curve", 2460114913, Curve, main.p_object); return call_ret; }  // 13
set_default_color :: (main: *Line2D, color: Color) { sys_call("Line2D", "set_default_color", 2920490490, Nil, main.p_object, color);  }  // 14
get_default_color :: (main: *Line2D) -> Color { call_ret := cast(*Color) sys_call("Line2D", "get_default_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 15
set_gradient :: (main: *Line2D, color: Gradient) { sys_call("Line2D", "set_gradient", 2756054477, Nil, main.p_object, color);  }  // 16
get_gradient :: (main: *Line2D) -> *Gradient { call_ret := cast(*Gradient) sys_call("Line2D", "get_gradient", 132272999, Gradient, main.p_object); return call_ret; }  // 17
set_texture :: (main: *Line2D, texture: Texture2D) { sys_call("Line2D", "set_texture", 4051416890, Nil, main.p_object, texture);  }  // 18
get_texture :: (main: *Line2D) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("Line2D", "get_texture", 3635182373, Texture2D, main.p_object); return call_ret; }  // 19
set_texture_mode :: (main: *Line2D, mode: Line2D.LineTextureMode) { sys_call("Line2D", "set_texture_mode", 1952559516, Nil, main.p_object, mode);  }  // 20
get_texture_mode :: (main: *Line2D) -> Line2D.LineTextureMode { call_ret := cast(*Line2D.LineTextureMode) sys_call("Line2D", "get_texture_mode", 2341040722, Line2D.LineTextureMode, main.p_object); return call_ret.*; }  // 21
set_joint_mode :: (main: *Line2D, mode: Line2D.LineJointMode) { sys_call("Line2D", "set_joint_mode", 604292979, Nil, main.p_object, mode);  }  // 22
get_joint_mode :: (main: *Line2D) -> Line2D.LineJointMode { call_ret := cast(*Line2D.LineJointMode) sys_call("Line2D", "get_joint_mode", 2546544037, Line2D.LineJointMode, main.p_object); return call_ret.*; }  // 23
set_begin_cap_mode :: (main: *Line2D, mode: Line2D.LineCapMode) { sys_call("Line2D", "set_begin_cap_mode", 1669024546, Nil, main.p_object, mode);  }  // 24
get_begin_cap_mode :: (main: *Line2D) -> Line2D.LineCapMode { call_ret := cast(*Line2D.LineCapMode) sys_call("Line2D", "get_begin_cap_mode", 1107511441, Line2D.LineCapMode, main.p_object); return call_ret.*; }  // 25
set_end_cap_mode :: (main: *Line2D, mode: Line2D.LineCapMode) { sys_call("Line2D", "set_end_cap_mode", 1669024546, Nil, main.p_object, mode);  }  // 26
get_end_cap_mode :: (main: *Line2D) -> Line2D.LineCapMode { call_ret := cast(*Line2D.LineCapMode) sys_call("Line2D", "get_end_cap_mode", 1107511441, Line2D.LineCapMode, main.p_object); return call_ret.*; }  // 27
set_sharp_limit :: (main: *Line2D, limit: float) { sys_call("Line2D", "set_sharp_limit", 373806689, Nil, main.p_object, limit);  }  // 28
get_sharp_limit :: (main: *Line2D) -> float { call_ret := cast(*float) sys_call("Line2D", "get_sharp_limit", 1740695150, float, main.p_object); return call_ret.*; }  // 29
set_round_precision :: (main: *Line2D, precision: int) { sys_call("Line2D", "set_round_precision", 1286410249, Nil, main.p_object, precision);  }  // 30
get_round_precision :: (main: *Line2D) -> int { call_ret := cast(*int) sys_call("Line2D", "get_round_precision", 3905245786, int, main.p_object); return call_ret.*; }  // 31
set_antialiased :: (main: *Line2D, antialiased: bool) { sys_call("Line2D", "set_antialiased", 2586408642, Nil, main.p_object, antialiased);  }  // 32
get_antialiased :: (main: *Line2D) -> bool { call_ret := cast(*bool) sys_call("Line2D", "get_antialiased", 36873697, bool, main.p_object); return call_ret.*; }  // 33

has_ime_text :: (main: *LineEdit) -> bool { call_ret := cast(*bool) sys_call("LineEdit", "has_ime_text", 36873697, bool, main.p_object); return call_ret.*; }  // 0
cancel_ime :: (main: *LineEdit) { sys_call("LineEdit", "cancel_ime", 3218959716, Nil, main.p_object);  }  // 1
apply_ime :: (main: *LineEdit) { sys_call("LineEdit", "apply_ime", 3218959716, Nil, main.p_object);  }  // 2
set_horizontal_alignment :: (main: *LineEdit, alignment: HorizontalAlignment) { sys_call("LineEdit", "set_horizontal_alignment", 2312603777, Nil, main.p_object, alignment);  }  // 3
get_horizontal_alignment :: (main: *LineEdit) -> HorizontalAlignment { call_ret := cast(*HorizontalAlignment) sys_call("LineEdit", "get_horizontal_alignment", 341400642, HorizontalAlignment, main.p_object); return call_ret.*; }  // 4
edit :: (main: *LineEdit) { sys_call("LineEdit", "edit", 3218959716, Nil, main.p_object);  }  // 5
unedit :: (main: *LineEdit) { sys_call("LineEdit", "unedit", 3218959716, Nil, main.p_object);  }  // 6
is_editing :: (main: *LineEdit) -> bool { call_ret := cast(*bool) sys_call("LineEdit", "is_editing", 36873697, bool, main.p_object); return call_ret.*; }  // 7
set_keep_editing_on_text_submit :: (main: *LineEdit, enable: bool) { sys_call("LineEdit", "set_keep_editing_on_text_submit", 2586408642, Nil, main.p_object, enable);  }  // 8
is_editing_kept_on_text_submit :: (main: *LineEdit) -> bool { call_ret := cast(*bool) sys_call("LineEdit", "is_editing_kept_on_text_submit", 36873697, bool, main.p_object); return call_ret.*; }  // 9
clear :: (main: *LineEdit) { sys_call("LineEdit", "clear", 3218959716, Nil, main.p_object);  }  // 10
select :: (main: *LineEdit) { sys_call("LineEdit", "select", 1328111411, Nil, main.p_object);  }  // 11
select_all :: (main: *LineEdit) { sys_call("LineEdit", "select_all", 3218959716, Nil, main.p_object);  }  // 12
deselect :: (main: *LineEdit) { sys_call("LineEdit", "deselect", 3218959716, Nil, main.p_object);  }  // 13
has_undo :: (main: *LineEdit) -> bool { call_ret := cast(*bool) sys_call("LineEdit", "has_undo", 36873697, bool, main.p_object); return call_ret.*; }  // 14
has_redo :: (main: *LineEdit) -> bool { call_ret := cast(*bool) sys_call("LineEdit", "has_redo", 36873697, bool, main.p_object); return call_ret.*; }  // 15
has_selection :: (main: *LineEdit) -> bool { call_ret := cast(*bool) sys_call("LineEdit", "has_selection", 36873697, bool, main.p_object); return call_ret.*; }  // 16
get_selected_text :: (main: *LineEdit) -> gstring { call_ret := cast(*gstring) sys_call("LineEdit", "get_selected_text", 2841200299, gstring, main.p_object); return call_ret.*; }  // 17
get_selection_from_column :: (main: *LineEdit) -> int { call_ret := cast(*int) sys_call("LineEdit", "get_selection_from_column", 3905245786, int, main.p_object); return call_ret.*; }  // 18
get_selection_to_column :: (main: *LineEdit) -> int { call_ret := cast(*int) sys_call("LineEdit", "get_selection_to_column", 3905245786, int, main.p_object); return call_ret.*; }  // 19
set_text :: (main: *LineEdit, text: string) { sys_call("LineEdit", "set_text", 83702148, Nil, main.p_object, text);  }  // 20
get_text :: (main: *LineEdit) -> gstring { call_ret := cast(*gstring) sys_call("LineEdit", "get_text", 201670096, gstring, main.p_object); return call_ret.*; }  // 21
get_draw_control_chars :: (main: *LineEdit) -> bool { call_ret := cast(*bool) sys_call("LineEdit", "get_draw_control_chars", 36873697, bool, main.p_object); return call_ret.*; }  // 22
set_draw_control_chars :: (main: *LineEdit, enable: bool) { sys_call("LineEdit", "set_draw_control_chars", 2586408642, Nil, main.p_object, enable);  }  // 23
set_text_direction :: (main: *LineEdit, direction: Control.TextDirection) { sys_call("LineEdit", "set_text_direction", 119160795, Nil, main.p_object, direction);  }  // 24
get_text_direction :: (main: *LineEdit) -> Control.TextDirection { call_ret := cast(*Control.TextDirection) sys_call("LineEdit", "get_text_direction", 797257663, Control.TextDirection, main.p_object); return call_ret.*; }  // 25
set_language :: (main: *LineEdit, language: string) { sys_call("LineEdit", "set_language", 83702148, Nil, main.p_object, language);  }  // 26
get_language :: (main: *LineEdit) -> gstring { call_ret := cast(*gstring) sys_call("LineEdit", "get_language", 201670096, gstring, main.p_object); return call_ret.*; }  // 27
set_structured_text_bidi_override :: (main: *LineEdit, parser: TextServer.StructuredTextParser) { sys_call("LineEdit", "set_structured_text_bidi_override", 55961453, Nil, main.p_object, parser);  }  // 28
get_structured_text_bidi_override :: (main: *LineEdit) -> TextServer.StructuredTextParser { call_ret := cast(*TextServer.StructuredTextParser) sys_call("LineEdit", "get_structured_text_bidi_override", 3385126229, TextServer.StructuredTextParser, main.p_object); return call_ret.*; }  // 29
set_structured_text_bidi_override_options :: (main: *LineEdit, args: Array) { sys_call("LineEdit", "set_structured_text_bidi_override_options", 381264803, Nil, main.p_object, args);  }  // 30
get_structured_text_bidi_override_options :: (main: *LineEdit) -> Array { call_ret := cast(*Array) sys_call("LineEdit", "get_structured_text_bidi_override_options", 3995934104, Array, main.p_object); return call_ret.*; }  // 31
set_placeholder :: (main: *LineEdit, text: string) { sys_call("LineEdit", "set_placeholder", 83702148, Nil, main.p_object, text);  }  // 32
get_placeholder :: (main: *LineEdit) -> gstring { call_ret := cast(*gstring) sys_call("LineEdit", "get_placeholder", 201670096, gstring, main.p_object); return call_ret.*; }  // 33
set_caret_column :: (main: *LineEdit, position: int) { sys_call("LineEdit", "set_caret_column", 1286410249, Nil, main.p_object, position);  }  // 34
get_caret_column :: (main: *LineEdit) -> int { call_ret := cast(*int) sys_call("LineEdit", "get_caret_column", 3905245786, int, main.p_object); return call_ret.*; }  // 35
get_scroll_offset :: (main: *LineEdit) -> float { call_ret := cast(*float) sys_call("LineEdit", "get_scroll_offset", 1740695150, float, main.p_object); return call_ret.*; }  // 36
set_expand_to_text_length_enabled :: (main: *LineEdit, enabled: bool) { sys_call("LineEdit", "set_expand_to_text_length_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 37
is_expand_to_text_length_enabled :: (main: *LineEdit) -> bool { call_ret := cast(*bool) sys_call("LineEdit", "is_expand_to_text_length_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 38
set_caret_blink_enabled :: (main: *LineEdit, enabled: bool) { sys_call("LineEdit", "set_caret_blink_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 39
is_caret_blink_enabled :: (main: *LineEdit) -> bool { call_ret := cast(*bool) sys_call("LineEdit", "is_caret_blink_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 40
set_caret_mid_grapheme_enabled :: (main: *LineEdit, enabled: bool) { sys_call("LineEdit", "set_caret_mid_grapheme_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 41
is_caret_mid_grapheme_enabled :: (main: *LineEdit) -> bool { call_ret := cast(*bool) sys_call("LineEdit", "is_caret_mid_grapheme_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 42
set_caret_force_displayed :: (main: *LineEdit, enabled: bool) { sys_call("LineEdit", "set_caret_force_displayed", 2586408642, Nil, main.p_object, enabled);  }  // 43
is_caret_force_displayed :: (main: *LineEdit) -> bool { call_ret := cast(*bool) sys_call("LineEdit", "is_caret_force_displayed", 36873697, bool, main.p_object); return call_ret.*; }  // 44
set_caret_blink_interval :: (main: *LineEdit, interval: float) { sys_call("LineEdit", "set_caret_blink_interval", 373806689, Nil, main.p_object, interval);  }  // 45
get_caret_blink_interval :: (main: *LineEdit) -> float { call_ret := cast(*float) sys_call("LineEdit", "get_caret_blink_interval", 1740695150, float, main.p_object); return call_ret.*; }  // 46
set_max_length :: (main: *LineEdit, chars: int) { sys_call("LineEdit", "set_max_length", 1286410249, Nil, main.p_object, chars);  }  // 47
get_max_length :: (main: *LineEdit) -> int { call_ret := cast(*int) sys_call("LineEdit", "get_max_length", 3905245786, int, main.p_object); return call_ret.*; }  // 48
insert_text_at_caret :: (main: *LineEdit, text: string) { sys_call("LineEdit", "insert_text_at_caret", 83702148, Nil, main.p_object, text);  }  // 49
delete_char_at_caret :: (main: *LineEdit) { sys_call("LineEdit", "delete_char_at_caret", 3218959716, Nil, main.p_object);  }  // 50
delete_text :: (main: *LineEdit, from_column: int, to_column: int) { sys_call("LineEdit", "delete_text", 3937882851, Nil, main.p_object, from_column, to_column);  }  // 51
set_editable :: (main: *LineEdit, enabled: bool) { sys_call("LineEdit", "set_editable", 2586408642, Nil, main.p_object, enabled);  }  // 52
is_editable :: (main: *LineEdit) -> bool { call_ret := cast(*bool) sys_call("LineEdit", "is_editable", 36873697, bool, main.p_object); return call_ret.*; }  // 53
set_secret :: (main: *LineEdit, enabled: bool) { sys_call("LineEdit", "set_secret", 2586408642, Nil, main.p_object, enabled);  }  // 54
is_secret :: (main: *LineEdit) -> bool { call_ret := cast(*bool) sys_call("LineEdit", "is_secret", 36873697, bool, main.p_object); return call_ret.*; }  // 55
set_secret_character :: (main: *LineEdit, character: string) { sys_call("LineEdit", "set_secret_character", 83702148, Nil, main.p_object, character);  }  // 56
get_secret_character :: (main: *LineEdit) -> gstring { call_ret := cast(*gstring) sys_call("LineEdit", "get_secret_character", 201670096, gstring, main.p_object); return call_ret.*; }  // 57
menu_option :: (main: *LineEdit, option: int) { sys_call("LineEdit", "menu_option", 1286410249, Nil, main.p_object, option);  }  // 58
get_menu :: (main: *LineEdit) -> *PopupMenu { call_ret := cast(*PopupMenu) sys_call("LineEdit", "get_menu", 229722558, PopupMenu, main.p_object); return call_ret; }  // 59
is_menu_visible :: (main: *LineEdit) -> bool { call_ret := cast(*bool) sys_call("LineEdit", "is_menu_visible", 36873697, bool, main.p_object); return call_ret.*; }  // 60
set_context_menu_enabled :: (main: *LineEdit, enable: bool) { sys_call("LineEdit", "set_context_menu_enabled", 2586408642, Nil, main.p_object, enable);  }  // 61
is_context_menu_enabled :: (main: *LineEdit) -> bool { call_ret := cast(*bool) sys_call("LineEdit", "is_context_menu_enabled", 2240911060, bool, main.p_object); return call_ret.*; }  // 62
set_emoji_menu_enabled :: (main: *LineEdit, enable: bool) { sys_call("LineEdit", "set_emoji_menu_enabled", 2586408642, Nil, main.p_object, enable);  }  // 63
is_emoji_menu_enabled :: (main: *LineEdit) -> bool { call_ret := cast(*bool) sys_call("LineEdit", "is_emoji_menu_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 64
set_virtual_keyboard_enabled :: (main: *LineEdit, enable: bool) { sys_call("LineEdit", "set_virtual_keyboard_enabled", 2586408642, Nil, main.p_object, enable);  }  // 65
is_virtual_keyboard_enabled :: (main: *LineEdit) -> bool { call_ret := cast(*bool) sys_call("LineEdit", "is_virtual_keyboard_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 66
set_virtual_keyboard_type :: (main: *LineEdit, type: LineEdit.VirtualKeyboardType) { sys_call("LineEdit", "set_virtual_keyboard_type", 2696893573, Nil, main.p_object, type);  }  // 67
get_virtual_keyboard_type :: (main: *LineEdit) -> LineEdit.VirtualKeyboardType { call_ret := cast(*LineEdit.VirtualKeyboardType) sys_call("LineEdit", "get_virtual_keyboard_type", 1928699316, LineEdit.VirtualKeyboardType, main.p_object); return call_ret.*; }  // 68
set_clear_button_enabled :: (main: *LineEdit, enable: bool) { sys_call("LineEdit", "set_clear_button_enabled", 2586408642, Nil, main.p_object, enable);  }  // 69
is_clear_button_enabled :: (main: *LineEdit) -> bool { call_ret := cast(*bool) sys_call("LineEdit", "is_clear_button_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 70
set_shortcut_keys_enabled :: (main: *LineEdit, enable: bool) { sys_call("LineEdit", "set_shortcut_keys_enabled", 2586408642, Nil, main.p_object, enable);  }  // 71
is_shortcut_keys_enabled :: (main: *LineEdit) -> bool { call_ret := cast(*bool) sys_call("LineEdit", "is_shortcut_keys_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 72
set_middle_mouse_paste_enabled :: (main: *LineEdit, enable: bool) { sys_call("LineEdit", "set_middle_mouse_paste_enabled", 2586408642, Nil, main.p_object, enable);  }  // 73
is_middle_mouse_paste_enabled :: (main: *LineEdit) -> bool { call_ret := cast(*bool) sys_call("LineEdit", "is_middle_mouse_paste_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 74
set_selecting_enabled :: (main: *LineEdit, enable: bool) { sys_call("LineEdit", "set_selecting_enabled", 2586408642, Nil, main.p_object, enable);  }  // 75
is_selecting_enabled :: (main: *LineEdit) -> bool { call_ret := cast(*bool) sys_call("LineEdit", "is_selecting_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 76
set_deselect_on_focus_loss_enabled :: (main: *LineEdit, enable: bool) { sys_call("LineEdit", "set_deselect_on_focus_loss_enabled", 2586408642, Nil, main.p_object, enable);  }  // 77
is_deselect_on_focus_loss_enabled :: (main: *LineEdit) -> bool { call_ret := cast(*bool) sys_call("LineEdit", "is_deselect_on_focus_loss_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 78
set_drag_and_drop_selection_enabled :: (main: *LineEdit, enable: bool) { sys_call("LineEdit", "set_drag_and_drop_selection_enabled", 2586408642, Nil, main.p_object, enable);  }  // 79
is_drag_and_drop_selection_enabled :: (main: *LineEdit) -> bool { call_ret := cast(*bool) sys_call("LineEdit", "is_drag_and_drop_selection_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 80
set_right_icon :: (main: *LineEdit, icon: Texture2D) { sys_call("LineEdit", "set_right_icon", 4051416890, Nil, main.p_object, icon);  }  // 81
get_right_icon :: (main: *LineEdit) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("LineEdit", "get_right_icon", 255860311, Texture2D, main.p_object); return call_ret; }  // 82
set_flat :: (main: *LineEdit, enabled: bool) { sys_call("LineEdit", "set_flat", 2586408642, Nil, main.p_object, enabled);  }  // 83
is_flat :: (main: *LineEdit) -> bool { call_ret := cast(*bool) sys_call("LineEdit", "is_flat", 36873697, bool, main.p_object); return call_ret.*; }  // 84
set_select_all_on_focus :: (main: *LineEdit, enabled: bool) { sys_call("LineEdit", "set_select_all_on_focus", 2586408642, Nil, main.p_object, enabled);  }  // 85
is_select_all_on_focus :: (main: *LineEdit) -> bool { call_ret := cast(*bool) sys_call("LineEdit", "is_select_all_on_focus", 36873697, bool, main.p_object); return call_ret.*; }  // 86

set_text :: (main: *LinkButton, text: string) { sys_call("LinkButton", "set_text", 83702148, Nil, main.p_object, text);  }  // 0
get_text :: (main: *LinkButton) -> gstring { call_ret := cast(*gstring) sys_call("LinkButton", "get_text", 201670096, gstring, main.p_object); return call_ret.*; }  // 1
set_text_direction :: (main: *LinkButton, direction: Control.TextDirection) { sys_call("LinkButton", "set_text_direction", 119160795, Nil, main.p_object, direction);  }  // 2
get_text_direction :: (main: *LinkButton) -> Control.TextDirection { call_ret := cast(*Control.TextDirection) sys_call("LinkButton", "get_text_direction", 797257663, Control.TextDirection, main.p_object); return call_ret.*; }  // 3
set_language :: (main: *LinkButton, language: string) { sys_call("LinkButton", "set_language", 83702148, Nil, main.p_object, language);  }  // 4
get_language :: (main: *LinkButton) -> gstring { call_ret := cast(*gstring) sys_call("LinkButton", "get_language", 201670096, gstring, main.p_object); return call_ret.*; }  // 5
set_uri :: (main: *LinkButton, uri: string) { sys_call("LinkButton", "set_uri", 83702148, Nil, main.p_object, uri);  }  // 6
get_uri :: (main: *LinkButton) -> gstring { call_ret := cast(*gstring) sys_call("LinkButton", "get_uri", 201670096, gstring, main.p_object); return call_ret.*; }  // 7
set_underline_mode :: (main: *LinkButton, underline_mode: LinkButton.UnderlineMode) { sys_call("LinkButton", "set_underline_mode", 4032947085, Nil, main.p_object, underline_mode);  }  // 8
get_underline_mode :: (main: *LinkButton) -> LinkButton.UnderlineMode { call_ret := cast(*LinkButton.UnderlineMode) sys_call("LinkButton", "get_underline_mode", 568343738, LinkButton.UnderlineMode, main.p_object); return call_ret.*; }  // 9
set_structured_text_bidi_override :: (main: *LinkButton, parser: TextServer.StructuredTextParser) { sys_call("LinkButton", "set_structured_text_bidi_override", 55961453, Nil, main.p_object, parser);  }  // 10
get_structured_text_bidi_override :: (main: *LinkButton) -> TextServer.StructuredTextParser { call_ret := cast(*TextServer.StructuredTextParser) sys_call("LinkButton", "get_structured_text_bidi_override", 3385126229, TextServer.StructuredTextParser, main.p_object); return call_ret.*; }  // 11
set_structured_text_bidi_override_options :: (main: *LinkButton, args: Array) { sys_call("LinkButton", "set_structured_text_bidi_override_options", 381264803, Nil, main.p_object, args);  }  // 12
get_structured_text_bidi_override_options :: (main: *LinkButton) -> Array { call_ret := cast(*Array) sys_call("LinkButton", "get_structured_text_bidi_override_options", 3995934104, Array, main.p_object); return call_ret.*; }  // 13

set_target_node :: (main: *LookAtModifier3D, target_node: string) { sys_call("LookAtModifier3D", "set_target_node", 1348162250, Nil, main.p_object, target_node);  }  // 0
get_target_node :: (main: *LookAtModifier3D) -> NodePath { call_ret := cast(*NodePath) sys_call("LookAtModifier3D", "get_target_node", 4075236667, NodePath, main.p_object); return call_ret.*; }  // 1
set_bone_name :: (main: *LookAtModifier3D, bone_name: string) { sys_call("LookAtModifier3D", "set_bone_name", 83702148, Nil, main.p_object, bone_name);  }  // 2
get_bone_name :: (main: *LookAtModifier3D) -> gstring { call_ret := cast(*gstring) sys_call("LookAtModifier3D", "get_bone_name", 201670096, gstring, main.p_object); return call_ret.*; }  // 3
set_bone :: (main: *LookAtModifier3D, bone: int) { sys_call("LookAtModifier3D", "set_bone", 1286410249, Nil, main.p_object, bone);  }  // 4
get_bone :: (main: *LookAtModifier3D) -> int { call_ret := cast(*int) sys_call("LookAtModifier3D", "get_bone", 3905245786, int, main.p_object); return call_ret.*; }  // 5
set_forward_axis :: (main: *LookAtModifier3D, forward_axis: SkeletonModifier3D.BoneAxis) { sys_call("LookAtModifier3D", "set_forward_axis", 3199955933, Nil, main.p_object, forward_axis);  }  // 6
get_forward_axis :: (main: *LookAtModifier3D) -> SkeletonModifier3D.BoneAxis { call_ret := cast(*SkeletonModifier3D.BoneAxis) sys_call("LookAtModifier3D", "get_forward_axis", 4076020284, SkeletonModifier3D.BoneAxis, main.p_object); return call_ret.*; }  // 7
set_primary_rotation_axis :: (main: *LookAtModifier3D, axis: Vector3_Axis) { sys_call("LookAtModifier3D", "set_primary_rotation_axis", 1144690656, Nil, main.p_object, axis);  }  // 8
get_primary_rotation_axis :: (main: *LookAtModifier3D) -> Vector3_Axis { call_ret := cast(*Vector3_Axis) sys_call("LookAtModifier3D", "get_primary_rotation_axis", 3050976882, Vector3_Axis, main.p_object); return call_ret.*; }  // 9
set_use_secondary_rotation :: (main: *LookAtModifier3D, enabled: bool) { sys_call("LookAtModifier3D", "set_use_secondary_rotation", 2586408642, Nil, main.p_object, enabled);  }  // 10
is_using_secondary_rotation :: (main: *LookAtModifier3D) -> bool { call_ret := cast(*bool) sys_call("LookAtModifier3D", "is_using_secondary_rotation", 36873697, bool, main.p_object); return call_ret.*; }  // 11
set_origin_safe_margin :: (main: *LookAtModifier3D, margin: float) { sys_call("LookAtModifier3D", "set_origin_safe_margin", 373806689, Nil, main.p_object, margin);  }  // 12
get_origin_safe_margin :: (main: *LookAtModifier3D) -> float { call_ret := cast(*float) sys_call("LookAtModifier3D", "get_origin_safe_margin", 1740695150, float, main.p_object); return call_ret.*; }  // 13
set_origin_from :: (main: *LookAtModifier3D, origin_from: LookAtModifier3D.OriginFrom) { sys_call("LookAtModifier3D", "set_origin_from", 4254695669, Nil, main.p_object, origin_from);  }  // 14
get_origin_from :: (main: *LookAtModifier3D) -> LookAtModifier3D.OriginFrom { call_ret := cast(*LookAtModifier3D.OriginFrom) sys_call("LookAtModifier3D", "get_origin_from", 4057166297, LookAtModifier3D.OriginFrom, main.p_object); return call_ret.*; }  // 15
set_origin_bone_name :: (main: *LookAtModifier3D, bone_name: string) { sys_call("LookAtModifier3D", "set_origin_bone_name", 83702148, Nil, main.p_object, bone_name);  }  // 16
get_origin_bone_name :: (main: *LookAtModifier3D) -> gstring { call_ret := cast(*gstring) sys_call("LookAtModifier3D", "get_origin_bone_name", 201670096, gstring, main.p_object); return call_ret.*; }  // 17
set_origin_bone :: (main: *LookAtModifier3D, bone: int) { sys_call("LookAtModifier3D", "set_origin_bone", 1286410249, Nil, main.p_object, bone);  }  // 18
get_origin_bone :: (main: *LookAtModifier3D) -> int { call_ret := cast(*int) sys_call("LookAtModifier3D", "get_origin_bone", 3905245786, int, main.p_object); return call_ret.*; }  // 19
set_origin_external_node :: (main: *LookAtModifier3D, external_node: string) { sys_call("LookAtModifier3D", "set_origin_external_node", 1348162250, Nil, main.p_object, external_node);  }  // 20
get_origin_external_node :: (main: *LookAtModifier3D) -> NodePath { call_ret := cast(*NodePath) sys_call("LookAtModifier3D", "get_origin_external_node", 4075236667, NodePath, main.p_object); return call_ret.*; }  // 21
set_origin_offset :: (main: *LookAtModifier3D, offset: Vector3) { sys_call("LookAtModifier3D", "set_origin_offset", 3460891852, Nil, main.p_object, offset);  }  // 22
get_origin_offset :: (main: *LookAtModifier3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("LookAtModifier3D", "get_origin_offset", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 23
set_duration :: (main: *LookAtModifier3D, duration: float) { sys_call("LookAtModifier3D", "set_duration", 373806689, Nil, main.p_object, duration);  }  // 24
get_duration :: (main: *LookAtModifier3D) -> float { call_ret := cast(*float) sys_call("LookAtModifier3D", "get_duration", 1740695150, float, main.p_object); return call_ret.*; }  // 25
set_transition_type :: (main: *LookAtModifier3D, transition_type: Tween.TransitionType) { sys_call("LookAtModifier3D", "set_transition_type", 1058637742, Nil, main.p_object, transition_type);  }  // 26
get_transition_type :: (main: *LookAtModifier3D) -> Tween.TransitionType { call_ret := cast(*Tween.TransitionType) sys_call("LookAtModifier3D", "get_transition_type", 3842314528, Tween.TransitionType, main.p_object); return call_ret.*; }  // 27
set_ease_type :: (main: *LookAtModifier3D, ease_type: Tween.EaseType) { sys_call("LookAtModifier3D", "set_ease_type", 1208105857, Nil, main.p_object, ease_type);  }  // 28
get_ease_type :: (main: *LookAtModifier3D) -> Tween.EaseType { call_ret := cast(*Tween.EaseType) sys_call("LookAtModifier3D", "get_ease_type", 631880200, Tween.EaseType, main.p_object); return call_ret.*; }  // 29
set_use_angle_limitation :: (main: *LookAtModifier3D, enabled: bool) { sys_call("LookAtModifier3D", "set_use_angle_limitation", 2586408642, Nil, main.p_object, enabled);  }  // 30
is_using_angle_limitation :: (main: *LookAtModifier3D) -> bool { call_ret := cast(*bool) sys_call("LookAtModifier3D", "is_using_angle_limitation", 36873697, bool, main.p_object); return call_ret.*; }  // 31
set_symmetry_limitation :: (main: *LookAtModifier3D, enabled: bool) { sys_call("LookAtModifier3D", "set_symmetry_limitation", 2586408642, Nil, main.p_object, enabled);  }  // 32
is_limitation_symmetry :: (main: *LookAtModifier3D) -> bool { call_ret := cast(*bool) sys_call("LookAtModifier3D", "is_limitation_symmetry", 36873697, bool, main.p_object); return call_ret.*; }  // 33
set_primary_limit_angle :: (main: *LookAtModifier3D, angle: float) { sys_call("LookAtModifier3D", "set_primary_limit_angle", 373806689, Nil, main.p_object, angle);  }  // 34
get_primary_limit_angle :: (main: *LookAtModifier3D) -> float { call_ret := cast(*float) sys_call("LookAtModifier3D", "get_primary_limit_angle", 1740695150, float, main.p_object); return call_ret.*; }  // 35
set_primary_damp_threshold :: (main: *LookAtModifier3D, power: float) { sys_call("LookAtModifier3D", "set_primary_damp_threshold", 373806689, Nil, main.p_object, power);  }  // 36
get_primary_damp_threshold :: (main: *LookAtModifier3D) -> float { call_ret := cast(*float) sys_call("LookAtModifier3D", "get_primary_damp_threshold", 1740695150, float, main.p_object); return call_ret.*; }  // 37
set_primary_positive_limit_angle :: (main: *LookAtModifier3D, angle: float) { sys_call("LookAtModifier3D", "set_primary_positive_limit_angle", 373806689, Nil, main.p_object, angle);  }  // 38
get_primary_positive_limit_angle :: (main: *LookAtModifier3D) -> float { call_ret := cast(*float) sys_call("LookAtModifier3D", "get_primary_positive_limit_angle", 1740695150, float, main.p_object); return call_ret.*; }  // 39
set_primary_positive_damp_threshold :: (main: *LookAtModifier3D, power: float) { sys_call("LookAtModifier3D", "set_primary_positive_damp_threshold", 373806689, Nil, main.p_object, power);  }  // 40
get_primary_positive_damp_threshold :: (main: *LookAtModifier3D) -> float { call_ret := cast(*float) sys_call("LookAtModifier3D", "get_primary_positive_damp_threshold", 1740695150, float, main.p_object); return call_ret.*; }  // 41
set_primary_negative_limit_angle :: (main: *LookAtModifier3D, angle: float) { sys_call("LookAtModifier3D", "set_primary_negative_limit_angle", 373806689, Nil, main.p_object, angle);  }  // 42
get_primary_negative_limit_angle :: (main: *LookAtModifier3D) -> float { call_ret := cast(*float) sys_call("LookAtModifier3D", "get_primary_negative_limit_angle", 1740695150, float, main.p_object); return call_ret.*; }  // 43
set_primary_negative_damp_threshold :: (main: *LookAtModifier3D, power: float) { sys_call("LookAtModifier3D", "set_primary_negative_damp_threshold", 373806689, Nil, main.p_object, power);  }  // 44
get_primary_negative_damp_threshold :: (main: *LookAtModifier3D) -> float { call_ret := cast(*float) sys_call("LookAtModifier3D", "get_primary_negative_damp_threshold", 1740695150, float, main.p_object); return call_ret.*; }  // 45
set_secondary_limit_angle :: (main: *LookAtModifier3D, angle: float) { sys_call("LookAtModifier3D", "set_secondary_limit_angle", 373806689, Nil, main.p_object, angle);  }  // 46
get_secondary_limit_angle :: (main: *LookAtModifier3D) -> float { call_ret := cast(*float) sys_call("LookAtModifier3D", "get_secondary_limit_angle", 1740695150, float, main.p_object); return call_ret.*; }  // 47
set_secondary_damp_threshold :: (main: *LookAtModifier3D, power: float) { sys_call("LookAtModifier3D", "set_secondary_damp_threshold", 373806689, Nil, main.p_object, power);  }  // 48
get_secondary_damp_threshold :: (main: *LookAtModifier3D) -> float { call_ret := cast(*float) sys_call("LookAtModifier3D", "get_secondary_damp_threshold", 1740695150, float, main.p_object); return call_ret.*; }  // 49
set_secondary_positive_limit_angle :: (main: *LookAtModifier3D, angle: float) { sys_call("LookAtModifier3D", "set_secondary_positive_limit_angle", 373806689, Nil, main.p_object, angle);  }  // 50
get_secondary_positive_limit_angle :: (main: *LookAtModifier3D) -> float { call_ret := cast(*float) sys_call("LookAtModifier3D", "get_secondary_positive_limit_angle", 1740695150, float, main.p_object); return call_ret.*; }  // 51
set_secondary_positive_damp_threshold :: (main: *LookAtModifier3D, power: float) { sys_call("LookAtModifier3D", "set_secondary_positive_damp_threshold", 373806689, Nil, main.p_object, power);  }  // 52
get_secondary_positive_damp_threshold :: (main: *LookAtModifier3D) -> float { call_ret := cast(*float) sys_call("LookAtModifier3D", "get_secondary_positive_damp_threshold", 1740695150, float, main.p_object); return call_ret.*; }  // 53
set_secondary_negative_limit_angle :: (main: *LookAtModifier3D, angle: float) { sys_call("LookAtModifier3D", "set_secondary_negative_limit_angle", 373806689, Nil, main.p_object, angle);  }  // 54
get_secondary_negative_limit_angle :: (main: *LookAtModifier3D) -> float { call_ret := cast(*float) sys_call("LookAtModifier3D", "get_secondary_negative_limit_angle", 1740695150, float, main.p_object); return call_ret.*; }  // 55
set_secondary_negative_damp_threshold :: (main: *LookAtModifier3D, power: float) { sys_call("LookAtModifier3D", "set_secondary_negative_damp_threshold", 373806689, Nil, main.p_object, power);  }  // 56
get_secondary_negative_damp_threshold :: (main: *LookAtModifier3D) -> float { call_ret := cast(*float) sys_call("LookAtModifier3D", "get_secondary_negative_damp_threshold", 1740695150, float, main.p_object); return call_ret.*; }  // 57
get_interpolation_remaining :: (main: *LookAtModifier3D) -> float { call_ret := cast(*float) sys_call("LookAtModifier3D", "get_interpolation_remaining", 1740695150, float, main.p_object); return call_ret.*; }  // 58
is_interpolating :: (main: *LookAtModifier3D) -> bool { call_ret := cast(*bool) sys_call("LookAtModifier3D", "is_interpolating", 36873697, bool, main.p_object); return call_ret.*; }  // 59
is_target_within_limitation :: (main: *LookAtModifier3D) -> bool { call_ret := cast(*bool) sys_call("LookAtModifier3D", "is_target_within_limitation", 36873697, bool, main.p_object); return call_ret.*; }  // 60



set_gizmo_extents :: (main: *Marker2D, extents: float) { sys_call("Marker2D", "set_gizmo_extents", 373806689, Nil, main.p_object, extents);  }  // 0
get_gizmo_extents :: (main: *Marker2D) -> float { call_ret := cast(*float) sys_call("Marker2D", "get_gizmo_extents", 1740695150, float, main.p_object); return call_ret.*; }  // 1

set_gizmo_extents :: (main: *Marker3D, extents: float) { sys_call("Marker3D", "set_gizmo_extents", 373806689, Nil, main.p_object, extents);  }  // 0
get_gizmo_extents :: (main: *Marker3D) -> float { call_ret := cast(*float) sys_call("Marker3D", "get_gizmo_extents", 1740695150, float, main.p_object); return call_ret.*; }  // 1

variant_to_base64 :: (main: *Marshalls, variant: Variant) -> gstring { call_ret := cast(*gstring) sys_call("Marshalls", "variant_to_base64", 3876248563, gstring, main.p_object, variant); return call_ret.*; }  // 0
base64_to_variant :: (main: *Marshalls, base64_str: string) -> Variant { call_ret := cast(*Variant) sys_call("Marshalls", "base64_to_variant", 218087648, Variant, main.p_object, base64_str); return call_ret.*; }  // 1
raw_to_base64 :: (main: *Marshalls, array: PackedByteArray) -> gstring { call_ret := cast(*gstring) sys_call("Marshalls", "raw_to_base64", 3999417757, gstring, main.p_object, array); return call_ret.*; }  // 2
base64_to_raw :: (main: *Marshalls, base64_str: string) -> PackedByteArray { call_ret := cast(*PackedByteArray) sys_call("Marshalls", "base64_to_raw", 659035735, PackedByteArray, main.p_object, base64_str); return call_ret.*; }  // 3
utf8_to_base64 :: (main: *Marshalls, utf8_str: string) -> gstring { call_ret := cast(*gstring) sys_call("Marshalls", "utf8_to_base64", 1703090593, gstring, main.p_object, utf8_str); return call_ret.*; }  // 4
base64_to_utf8 :: (main: *Marshalls, base64_str: string) -> gstring { call_ret := cast(*gstring) sys_call("Marshalls", "base64_to_utf8", 1703090593, gstring, main.p_object, base64_str); return call_ret.*; }  // 5

set_next_pass :: (main: *Material, next_pass: Material) { sys_call("Material", "set_next_pass", 2757459619, Nil, main.p_object, next_pass);  }  // 4
get_next_pass :: (main: *Material) -> *Material { call_ret := cast(*Material) sys_call("Material", "get_next_pass", 5934680, Material, main.p_object); return call_ret; }  // 5
set_render_priority :: (main: *Material, priority: int) { sys_call("Material", "set_render_priority", 1286410249, Nil, main.p_object, priority);  }  // 6
get_render_priority :: (main: *Material) -> int { call_ret := cast(*int) sys_call("Material", "get_render_priority", 3905245786, int, main.p_object); return call_ret.*; }  // 7
inspect_native_shader_code :: (main: *Material) { sys_call("Material", "inspect_native_shader_code", 3218959716, Nil, main.p_object);  }  // 8
create_placeholder :: (main: *Material) -> *Resource { call_ret := cast(*Resource) sys_call("Material", "create_placeholder", 121922552, Resource, main.p_object); return call_ret; }  // 9

set_switch_on_hover :: (main: *MenuBar, enable: bool) { sys_call("MenuBar", "set_switch_on_hover", 2586408642, Nil, main.p_object, enable);  }  // 0
is_switch_on_hover :: (main: *MenuBar) -> bool { call_ret := cast(*bool) sys_call("MenuBar", "is_switch_on_hover", 2240911060, bool, main.p_object); return call_ret.*; }  // 1
set_disable_shortcuts :: (main: *MenuBar, disabled: bool) { sys_call("MenuBar", "set_disable_shortcuts", 2586408642, Nil, main.p_object, disabled);  }  // 2
set_prefer_global_menu :: (main: *MenuBar, enabled: bool) { sys_call("MenuBar", "set_prefer_global_menu", 2586408642, Nil, main.p_object, enabled);  }  // 3
is_prefer_global_menu :: (main: *MenuBar) -> bool { call_ret := cast(*bool) sys_call("MenuBar", "is_prefer_global_menu", 36873697, bool, main.p_object); return call_ret.*; }  // 4
is_native_menu :: (main: *MenuBar) -> bool { call_ret := cast(*bool) sys_call("MenuBar", "is_native_menu", 36873697, bool, main.p_object); return call_ret.*; }  // 5
get_menu_count :: (main: *MenuBar) -> int { call_ret := cast(*int) sys_call("MenuBar", "get_menu_count", 3905245786, int, main.p_object); return call_ret.*; }  // 6
set_text_direction :: (main: *MenuBar, direction: Control.TextDirection) { sys_call("MenuBar", "set_text_direction", 119160795, Nil, main.p_object, direction);  }  // 7
get_text_direction :: (main: *MenuBar) -> Control.TextDirection { call_ret := cast(*Control.TextDirection) sys_call("MenuBar", "get_text_direction", 797257663, Control.TextDirection, main.p_object); return call_ret.*; }  // 8
set_language :: (main: *MenuBar, language: string) { sys_call("MenuBar", "set_language", 83702148, Nil, main.p_object, language);  }  // 9
get_language :: (main: *MenuBar) -> gstring { call_ret := cast(*gstring) sys_call("MenuBar", "get_language", 201670096, gstring, main.p_object); return call_ret.*; }  // 10
set_flat :: (main: *MenuBar, enabled: bool) { sys_call("MenuBar", "set_flat", 2586408642, Nil, main.p_object, enabled);  }  // 11
is_flat :: (main: *MenuBar) -> bool { call_ret := cast(*bool) sys_call("MenuBar", "is_flat", 36873697, bool, main.p_object); return call_ret.*; }  // 12
set_start_index :: (main: *MenuBar, enabled: int) { sys_call("MenuBar", "set_start_index", 1286410249, Nil, main.p_object, enabled);  }  // 13
get_start_index :: (main: *MenuBar) -> int { call_ret := cast(*int) sys_call("MenuBar", "get_start_index", 3905245786, int, main.p_object); return call_ret.*; }  // 14
set_menu_title :: (main: *MenuBar, menu: int, title: string) { sys_call("MenuBar", "set_menu_title", 501894301, Nil, main.p_object, menu, title);  }  // 15
get_menu_title :: (main: *MenuBar, menu: int) -> gstring { call_ret := cast(*gstring) sys_call("MenuBar", "get_menu_title", 844755477, gstring, main.p_object, menu); return call_ret.*; }  // 16
set_menu_tooltip :: (main: *MenuBar, menu: int, tooltip: string) { sys_call("MenuBar", "set_menu_tooltip", 501894301, Nil, main.p_object, menu, tooltip);  }  // 17
get_menu_tooltip :: (main: *MenuBar, menu: int) -> gstring { call_ret := cast(*gstring) sys_call("MenuBar", "get_menu_tooltip", 844755477, gstring, main.p_object, menu); return call_ret.*; }  // 18
set_menu_disabled :: (main: *MenuBar, menu: int, disabled: bool) { sys_call("MenuBar", "set_menu_disabled", 300928843, Nil, main.p_object, menu, disabled);  }  // 19
is_menu_disabled :: (main: *MenuBar, menu: int) -> bool { call_ret := cast(*bool) sys_call("MenuBar", "is_menu_disabled", 1116898809, bool, main.p_object, menu); return call_ret.*; }  // 20
set_menu_hidden :: (main: *MenuBar, menu: int, hidden: bool) { sys_call("MenuBar", "set_menu_hidden", 300928843, Nil, main.p_object, menu, hidden);  }  // 21
is_menu_hidden :: (main: *MenuBar, menu: int) -> bool { call_ret := cast(*bool) sys_call("MenuBar", "is_menu_hidden", 1116898809, bool, main.p_object, menu); return call_ret.*; }  // 22
get_menu_popup :: (main: *MenuBar, menu: int) -> *PopupMenu { call_ret := cast(*PopupMenu) sys_call("MenuBar", "get_menu_popup", 2100501353, PopupMenu, main.p_object, menu); return call_ret; }  // 23

get_popup :: (main: *MenuButton) -> *PopupMenu { call_ret := cast(*PopupMenu) sys_call("MenuButton", "get_popup", 229722558, PopupMenu, main.p_object); return call_ret; }  // 0
show_popup :: (main: *MenuButton) { sys_call("MenuButton", "show_popup", 3218959716, Nil, main.p_object);  }  // 1
set_switch_on_hover :: (main: *MenuButton, enable: bool) { sys_call("MenuButton", "set_switch_on_hover", 2586408642, Nil, main.p_object, enable);  }  // 2
is_switch_on_hover :: (main: *MenuButton) -> bool { call_ret := cast(*bool) sys_call("MenuButton", "is_switch_on_hover", 2240911060, bool, main.p_object); return call_ret.*; }  // 3
set_disable_shortcuts :: (main: *MenuButton, disabled: bool) { sys_call("MenuButton", "set_disable_shortcuts", 2586408642, Nil, main.p_object, disabled);  }  // 4
set_item_count :: (main: *MenuButton, count: int) { sys_call("MenuButton", "set_item_count", 1286410249, Nil, main.p_object, count);  }  // 5
get_item_count :: (main: *MenuButton) -> int { call_ret := cast(*int) sys_call("MenuButton", "get_item_count", 3905245786, int, main.p_object); return call_ret.*; }  // 6

set_lightmap_size_hint :: (main: *Mesh, size: Vector2i) { sys_call("Mesh", "set_lightmap_size_hint", 1130785943, Nil, main.p_object, size);  }  // 14
get_lightmap_size_hint :: (main: *Mesh) -> Vector2i { call_ret := cast(*Vector2i) sys_call("Mesh", "get_lightmap_size_hint", 3690982128, Vector2i, main.p_object); return call_ret.*; }  // 15
get_aabb :: (main: *Mesh) -> AABB { call_ret := cast(*AABB) sys_call("Mesh", "get_aabb", 1068685055, AABB, main.p_object); return call_ret.*; }  // 16
get_faces :: (main: *Mesh) -> PackedVector3Array { call_ret := cast(*PackedVector3Array) sys_call("Mesh", "get_faces", 497664490, PackedVector3Array, main.p_object); return call_ret.*; }  // 17
get_surface_count :: (main: *Mesh) -> int { call_ret := cast(*int) sys_call("Mesh", "get_surface_count", 3905245786, int, main.p_object); return call_ret.*; }  // 18
surface_get_arrays :: (main: *Mesh, surf_idx: int) -> Array { call_ret := cast(*Array) sys_call("Mesh", "surface_get_arrays", 663333327, Array, main.p_object, surf_idx); return call_ret.*; }  // 19
surface_get_blend_shape_arrays :: (main: *Mesh, surf_idx: int) -> [] Array { call_ret := cast(*[] Array) sys_call("Mesh", "surface_get_blend_shape_arrays", 663333327, [] Array, main.p_object, surf_idx); return call_ret.*; }  // 20
surface_set_material :: (main: *Mesh, surf_idx: int, material: Material) { sys_call("Mesh", "surface_set_material", 3671737478, Nil, main.p_object, surf_idx, material);  }  // 21
surface_get_material :: (main: *Mesh, surf_idx: int) -> *Material { call_ret := cast(*Material) sys_call("Mesh", "surface_get_material", 2897466400, Material, main.p_object, surf_idx); return call_ret; }  // 22
create_placeholder :: (main: *Mesh) -> *Resource { call_ret := cast(*Resource) sys_call("Mesh", "create_placeholder", 121922552, Resource, main.p_object); return call_ret; }  // 23
create_trimesh_shape :: (main: *Mesh) -> *ConcavePolygonShape3D { call_ret := cast(*ConcavePolygonShape3D) sys_call("Mesh", "create_trimesh_shape", 4160111210, ConcavePolygonShape3D, main.p_object); return call_ret; }  // 24
create_convex_shape :: (main: *Mesh) -> *ConvexPolygonShape3D { call_ret := cast(*ConvexPolygonShape3D) sys_call("Mesh", "create_convex_shape", 2529984628, ConvexPolygonShape3D, main.p_object); return call_ret; }  // 25
create_outline :: (main: *Mesh, margin: float) -> *Mesh { call_ret := cast(*Mesh) sys_call("Mesh", "create_outline", 1208642001, Mesh, main.p_object, margin); return call_ret; }  // 26
generate_triangle_mesh :: (main: *Mesh) -> *TriangleMesh { call_ret := cast(*TriangleMesh) sys_call("Mesh", "generate_triangle_mesh", 3476533166, TriangleMesh, main.p_object); return call_ret; }  // 27

set_max_concavity :: (main: *MeshConvexDecompositionSettings, max_concavity: float) { sys_call("MeshConvexDecompositionSettings", "set_max_concavity", 373806689, Nil, main.p_object, max_concavity);  }  // 0
get_max_concavity :: (main: *MeshConvexDecompositionSettings) -> float { call_ret := cast(*float) sys_call("MeshConvexDecompositionSettings", "get_max_concavity", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_symmetry_planes_clipping_bias :: (main: *MeshConvexDecompositionSettings, symmetry_planes_clipping_bias: float) { sys_call("MeshConvexDecompositionSettings", "set_symmetry_planes_clipping_bias", 373806689, Nil, main.p_object, symmetry_planes_clipping_bias);  }  // 2
get_symmetry_planes_clipping_bias :: (main: *MeshConvexDecompositionSettings) -> float { call_ret := cast(*float) sys_call("MeshConvexDecompositionSettings", "get_symmetry_planes_clipping_bias", 1740695150, float, main.p_object); return call_ret.*; }  // 3
set_revolution_axes_clipping_bias :: (main: *MeshConvexDecompositionSettings, revolution_axes_clipping_bias: float) { sys_call("MeshConvexDecompositionSettings", "set_revolution_axes_clipping_bias", 373806689, Nil, main.p_object, revolution_axes_clipping_bias);  }  // 4
get_revolution_axes_clipping_bias :: (main: *MeshConvexDecompositionSettings) -> float { call_ret := cast(*float) sys_call("MeshConvexDecompositionSettings", "get_revolution_axes_clipping_bias", 1740695150, float, main.p_object); return call_ret.*; }  // 5
set_min_volume_per_convex_hull :: (main: *MeshConvexDecompositionSettings, min_volume_per_convex_hull: float) { sys_call("MeshConvexDecompositionSettings", "set_min_volume_per_convex_hull", 373806689, Nil, main.p_object, min_volume_per_convex_hull);  }  // 6
get_min_volume_per_convex_hull :: (main: *MeshConvexDecompositionSettings) -> float { call_ret := cast(*float) sys_call("MeshConvexDecompositionSettings", "get_min_volume_per_convex_hull", 1740695150, float, main.p_object); return call_ret.*; }  // 7
set_resolution :: (main: *MeshConvexDecompositionSettings, min_volume_per_convex_hull: int) { sys_call("MeshConvexDecompositionSettings", "set_resolution", 1286410249, Nil, main.p_object, min_volume_per_convex_hull);  }  // 8
get_resolution :: (main: *MeshConvexDecompositionSettings) -> int { call_ret := cast(*int) sys_call("MeshConvexDecompositionSettings", "get_resolution", 3905245786, int, main.p_object); return call_ret.*; }  // 9
set_max_num_vertices_per_convex_hull :: (main: *MeshConvexDecompositionSettings, max_num_vertices_per_convex_hull: int) { sys_call("MeshConvexDecompositionSettings", "set_max_num_vertices_per_convex_hull", 1286410249, Nil, main.p_object, max_num_vertices_per_convex_hull);  }  // 10
get_max_num_vertices_per_convex_hull :: (main: *MeshConvexDecompositionSettings) -> int { call_ret := cast(*int) sys_call("MeshConvexDecompositionSettings", "get_max_num_vertices_per_convex_hull", 3905245786, int, main.p_object); return call_ret.*; }  // 11
set_plane_downsampling :: (main: *MeshConvexDecompositionSettings, plane_downsampling: int) { sys_call("MeshConvexDecompositionSettings", "set_plane_downsampling", 1286410249, Nil, main.p_object, plane_downsampling);  }  // 12
get_plane_downsampling :: (main: *MeshConvexDecompositionSettings) -> int { call_ret := cast(*int) sys_call("MeshConvexDecompositionSettings", "get_plane_downsampling", 3905245786, int, main.p_object); return call_ret.*; }  // 13
set_convex_hull_downsampling :: (main: *MeshConvexDecompositionSettings, convex_hull_downsampling: int) { sys_call("MeshConvexDecompositionSettings", "set_convex_hull_downsampling", 1286410249, Nil, main.p_object, convex_hull_downsampling);  }  // 14
get_convex_hull_downsampling :: (main: *MeshConvexDecompositionSettings) -> int { call_ret := cast(*int) sys_call("MeshConvexDecompositionSettings", "get_convex_hull_downsampling", 3905245786, int, main.p_object); return call_ret.*; }  // 15
set_normalize_mesh :: (main: *MeshConvexDecompositionSettings, normalize_mesh: bool) { sys_call("MeshConvexDecompositionSettings", "set_normalize_mesh", 2586408642, Nil, main.p_object, normalize_mesh);  }  // 16
get_normalize_mesh :: (main: *MeshConvexDecompositionSettings) -> bool { call_ret := cast(*bool) sys_call("MeshConvexDecompositionSettings", "get_normalize_mesh", 36873697, bool, main.p_object); return call_ret.*; }  // 17
set_mode :: (main: *MeshConvexDecompositionSettings, mode: MeshConvexDecompositionSettings.Mode) { sys_call("MeshConvexDecompositionSettings", "set_mode", 1668072869, Nil, main.p_object, mode);  }  // 18
get_mode :: (main: *MeshConvexDecompositionSettings) -> MeshConvexDecompositionSettings.Mode { call_ret := cast(*MeshConvexDecompositionSettings.Mode) sys_call("MeshConvexDecompositionSettings", "get_mode", 23479454, MeshConvexDecompositionSettings.Mode, main.p_object); return call_ret.*; }  // 19
set_convex_hull_approximation :: (main: *MeshConvexDecompositionSettings, convex_hull_approximation: bool) { sys_call("MeshConvexDecompositionSettings", "set_convex_hull_approximation", 2586408642, Nil, main.p_object, convex_hull_approximation);  }  // 20
get_convex_hull_approximation :: (main: *MeshConvexDecompositionSettings) -> bool { call_ret := cast(*bool) sys_call("MeshConvexDecompositionSettings", "get_convex_hull_approximation", 36873697, bool, main.p_object); return call_ret.*; }  // 21
set_max_convex_hulls :: (main: *MeshConvexDecompositionSettings, max_convex_hulls: int) { sys_call("MeshConvexDecompositionSettings", "set_max_convex_hulls", 1286410249, Nil, main.p_object, max_convex_hulls);  }  // 22
get_max_convex_hulls :: (main: *MeshConvexDecompositionSettings) -> int { call_ret := cast(*int) sys_call("MeshConvexDecompositionSettings", "get_max_convex_hulls", 3905245786, int, main.p_object); return call_ret.*; }  // 23
set_project_hull_vertices :: (main: *MeshConvexDecompositionSettings, project_hull_vertices: bool) { sys_call("MeshConvexDecompositionSettings", "set_project_hull_vertices", 2586408642, Nil, main.p_object, project_hull_vertices);  }  // 24
get_project_hull_vertices :: (main: *MeshConvexDecompositionSettings) -> bool { call_ret := cast(*bool) sys_call("MeshConvexDecompositionSettings", "get_project_hull_vertices", 36873697, bool, main.p_object); return call_ret.*; }  // 25

clear :: (main: *MeshDataTool) { sys_call("MeshDataTool", "clear", 3218959716, Nil, main.p_object);  }  // 0
create_from_surface :: (main: *MeshDataTool, mesh: ArrayMesh, surface: int) -> Error { call_ret := cast(*Error) sys_call("MeshDataTool", "create_from_surface", 2727020678, Error, main.p_object, mesh, surface); return call_ret.*; }  // 1
commit_to_surface :: (main: *MeshDataTool, mesh: ArrayMesh) -> Error { call_ret := cast(*Error) sys_call("MeshDataTool", "commit_to_surface", 2021686445, Error, main.p_object, mesh); return call_ret.*; }  // 2
get_format :: (main: *MeshDataTool) -> int { call_ret := cast(*int) sys_call("MeshDataTool", "get_format", 3905245786, int, main.p_object); return call_ret.*; }  // 3
get_vertex_count :: (main: *MeshDataTool) -> int { call_ret := cast(*int) sys_call("MeshDataTool", "get_vertex_count", 3905245786, int, main.p_object); return call_ret.*; }  // 4
get_edge_count :: (main: *MeshDataTool) -> int { call_ret := cast(*int) sys_call("MeshDataTool", "get_edge_count", 3905245786, int, main.p_object); return call_ret.*; }  // 5
get_face_count :: (main: *MeshDataTool) -> int { call_ret := cast(*int) sys_call("MeshDataTool", "get_face_count", 3905245786, int, main.p_object); return call_ret.*; }  // 6
set_vertex :: (main: *MeshDataTool, idx: int, vertex: Vector3) { sys_call("MeshDataTool", "set_vertex", 1530502735, Nil, main.p_object, idx, vertex);  }  // 7
get_vertex :: (main: *MeshDataTool, idx: int) -> Vector3 { call_ret := cast(*Vector3) sys_call("MeshDataTool", "get_vertex", 711720468, Vector3, main.p_object, idx); return call_ret.*; }  // 8
set_vertex_normal :: (main: *MeshDataTool, idx: int, normal: Vector3) { sys_call("MeshDataTool", "set_vertex_normal", 1530502735, Nil, main.p_object, idx, normal);  }  // 9
get_vertex_normal :: (main: *MeshDataTool, idx: int) -> Vector3 { call_ret := cast(*Vector3) sys_call("MeshDataTool", "get_vertex_normal", 711720468, Vector3, main.p_object, idx); return call_ret.*; }  // 10
set_vertex_tangent :: (main: *MeshDataTool, idx: int, tangent: Plane) { sys_call("MeshDataTool", "set_vertex_tangent", 1104099133, Nil, main.p_object, idx, tangent);  }  // 11
get_vertex_tangent :: (main: *MeshDataTool, idx: int) -> Plane { call_ret := cast(*Plane) sys_call("MeshDataTool", "get_vertex_tangent", 1372055458, Plane, main.p_object, idx); return call_ret.*; }  // 12
set_vertex_uv :: (main: *MeshDataTool, idx: int, uv: Vector2) { sys_call("MeshDataTool", "set_vertex_uv", 163021252, Nil, main.p_object, idx, uv);  }  // 13
get_vertex_uv :: (main: *MeshDataTool, idx: int) -> Vector2 { call_ret := cast(*Vector2) sys_call("MeshDataTool", "get_vertex_uv", 2299179447, Vector2, main.p_object, idx); return call_ret.*; }  // 14
set_vertex_uv2 :: (main: *MeshDataTool, idx: int, uv2: Vector2) { sys_call("MeshDataTool", "set_vertex_uv2", 163021252, Nil, main.p_object, idx, uv2);  }  // 15
get_vertex_uv2 :: (main: *MeshDataTool, idx: int) -> Vector2 { call_ret := cast(*Vector2) sys_call("MeshDataTool", "get_vertex_uv2", 2299179447, Vector2, main.p_object, idx); return call_ret.*; }  // 16
set_vertex_color :: (main: *MeshDataTool, idx: int, color: Color) { sys_call("MeshDataTool", "set_vertex_color", 2878471219, Nil, main.p_object, idx, color);  }  // 17
get_vertex_color :: (main: *MeshDataTool, idx: int) -> Color { call_ret := cast(*Color) sys_call("MeshDataTool", "get_vertex_color", 3457211756, Color, main.p_object, idx); return call_ret.*; }  // 18
set_vertex_bones :: (main: *MeshDataTool, idx: int, bones: PackedInt32Array) { sys_call("MeshDataTool", "set_vertex_bones", 3500328261, Nil, main.p_object, idx, bones);  }  // 19
get_vertex_bones :: (main: *MeshDataTool, idx: int) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("MeshDataTool", "get_vertex_bones", 1706082319, PackedInt32Array, main.p_object, idx); return call_ret.*; }  // 20
set_vertex_weights :: (main: *MeshDataTool, idx: int, weights: PackedFloat32Array) { sys_call("MeshDataTool", "set_vertex_weights", 1345852415, Nil, main.p_object, idx, weights);  }  // 21
get_vertex_weights :: (main: *MeshDataTool, idx: int) -> PackedFloat32Array { call_ret := cast(*PackedFloat32Array) sys_call("MeshDataTool", "get_vertex_weights", 1542882410, PackedFloat32Array, main.p_object, idx); return call_ret.*; }  // 22
set_vertex_meta :: (main: *MeshDataTool, idx: int, meta: Variant) { sys_call("MeshDataTool", "set_vertex_meta", 2152698145, Nil, main.p_object, idx, meta);  }  // 23
get_vertex_meta :: (main: *MeshDataTool, idx: int) -> Variant { call_ret := cast(*Variant) sys_call("MeshDataTool", "get_vertex_meta", 4227898402, Variant, main.p_object, idx); return call_ret.*; }  // 24
get_vertex_edges :: (main: *MeshDataTool, idx: int) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("MeshDataTool", "get_vertex_edges", 1706082319, PackedInt32Array, main.p_object, idx); return call_ret.*; }  // 25
get_vertex_faces :: (main: *MeshDataTool, idx: int) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("MeshDataTool", "get_vertex_faces", 1706082319, PackedInt32Array, main.p_object, idx); return call_ret.*; }  // 26
get_edge_vertex :: (main: *MeshDataTool, idx: int, vertex: int) -> int { call_ret := cast(*int) sys_call("MeshDataTool", "get_edge_vertex", 3175239445, int, main.p_object, idx, vertex); return call_ret.*; }  // 27
get_edge_faces :: (main: *MeshDataTool, idx: int) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("MeshDataTool", "get_edge_faces", 1706082319, PackedInt32Array, main.p_object, idx); return call_ret.*; }  // 28
set_edge_meta :: (main: *MeshDataTool, idx: int, meta: Variant) { sys_call("MeshDataTool", "set_edge_meta", 2152698145, Nil, main.p_object, idx, meta);  }  // 29
get_edge_meta :: (main: *MeshDataTool, idx: int) -> Variant { call_ret := cast(*Variant) sys_call("MeshDataTool", "get_edge_meta", 4227898402, Variant, main.p_object, idx); return call_ret.*; }  // 30
get_face_vertex :: (main: *MeshDataTool, idx: int, vertex: int) -> int { call_ret := cast(*int) sys_call("MeshDataTool", "get_face_vertex", 3175239445, int, main.p_object, idx, vertex); return call_ret.*; }  // 31
get_face_edge :: (main: *MeshDataTool, idx: int, edge: int) -> int { call_ret := cast(*int) sys_call("MeshDataTool", "get_face_edge", 3175239445, int, main.p_object, idx, edge); return call_ret.*; }  // 32
set_face_meta :: (main: *MeshDataTool, idx: int, meta: Variant) { sys_call("MeshDataTool", "set_face_meta", 2152698145, Nil, main.p_object, idx, meta);  }  // 33
get_face_meta :: (main: *MeshDataTool, idx: int) -> Variant { call_ret := cast(*Variant) sys_call("MeshDataTool", "get_face_meta", 4227898402, Variant, main.p_object, idx); return call_ret.*; }  // 34
get_face_normal :: (main: *MeshDataTool, idx: int) -> Vector3 { call_ret := cast(*Vector3) sys_call("MeshDataTool", "get_face_normal", 711720468, Vector3, main.p_object, idx); return call_ret.*; }  // 35
set_material :: (main: *MeshDataTool, material: Material) { sys_call("MeshDataTool", "set_material", 2757459619, Nil, main.p_object, material);  }  // 36
get_material :: (main: *MeshDataTool) -> *Material { call_ret := cast(*Material) sys_call("MeshDataTool", "get_material", 5934680, Material, main.p_object); return call_ret; }  // 37

set_mesh :: (main: *MeshInstance2D, mesh: Mesh) { sys_call("MeshInstance2D", "set_mesh", 194775623, Nil, main.p_object, mesh);  }  // 0
get_mesh :: (main: *MeshInstance2D) -> *Mesh { call_ret := cast(*Mesh) sys_call("MeshInstance2D", "get_mesh", 1808005922, Mesh, main.p_object); return call_ret; }  // 1
set_texture :: (main: *MeshInstance2D, texture: Texture2D) { sys_call("MeshInstance2D", "set_texture", 4051416890, Nil, main.p_object, texture);  }  // 2
get_texture :: (main: *MeshInstance2D) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("MeshInstance2D", "get_texture", 3635182373, Texture2D, main.p_object); return call_ret; }  // 3

set_mesh :: (main: *MeshInstance3D, mesh: Mesh) { sys_call("MeshInstance3D", "set_mesh", 194775623, Nil, main.p_object, mesh);  }  // 0
get_mesh :: (main: *MeshInstance3D) -> *Mesh { call_ret := cast(*Mesh) sys_call("MeshInstance3D", "get_mesh", 1808005922, Mesh, main.p_object); return call_ret; }  // 1
set_skeleton_path :: (main: *MeshInstance3D, skeleton_path: string) { sys_call("MeshInstance3D", "set_skeleton_path", 1348162250, Nil, main.p_object, skeleton_path);  }  // 2
get_skeleton_path :: (main: *MeshInstance3D) -> NodePath { call_ret := cast(*NodePath) sys_call("MeshInstance3D", "get_skeleton_path", 277076166, NodePath, main.p_object); return call_ret.*; }  // 3
set_skin :: (main: *MeshInstance3D, skin: Skin) { sys_call("MeshInstance3D", "set_skin", 3971435618, Nil, main.p_object, skin);  }  // 4
get_skin :: (main: *MeshInstance3D) -> *Skin { call_ret := cast(*Skin) sys_call("MeshInstance3D", "get_skin", 2074563878, Skin, main.p_object); return call_ret; }  // 5
get_skin_reference :: (main: *MeshInstance3D) -> *SkinReference { call_ret := cast(*SkinReference) sys_call("MeshInstance3D", "get_skin_reference", 2060603409, SkinReference, main.p_object); return call_ret; }  // 6
get_surface_override_material_count :: (main: *MeshInstance3D) -> int { call_ret := cast(*int) sys_call("MeshInstance3D", "get_surface_override_material_count", 3905245786, int, main.p_object); return call_ret.*; }  // 7
set_surface_override_material :: (main: *MeshInstance3D, surface: int, material: Material) { sys_call("MeshInstance3D", "set_surface_override_material", 3671737478, Nil, main.p_object, surface, material);  }  // 8
get_surface_override_material :: (main: *MeshInstance3D, surface: int) -> *Material { call_ret := cast(*Material) sys_call("MeshInstance3D", "get_surface_override_material", 2897466400, Material, main.p_object, surface); return call_ret; }  // 9
get_active_material :: (main: *MeshInstance3D, surface: int) -> *Material { call_ret := cast(*Material) sys_call("MeshInstance3D", "get_active_material", 2897466400, Material, main.p_object, surface); return call_ret; }  // 10
create_trimesh_collision :: (main: *MeshInstance3D) { sys_call("MeshInstance3D", "create_trimesh_collision", 3218959716, Nil, main.p_object);  }  // 11
create_convex_collision :: (main: *MeshInstance3D) { sys_call("MeshInstance3D", "create_convex_collision", 2751962654, Nil, main.p_object);  }  // 12
create_multiple_convex_collisions :: (main: *MeshInstance3D) { sys_call("MeshInstance3D", "create_multiple_convex_collisions", 628789669, Nil, main.p_object);  }  // 13
get_blend_shape_count :: (main: *MeshInstance3D) -> int { call_ret := cast(*int) sys_call("MeshInstance3D", "get_blend_shape_count", 3905245786, int, main.p_object); return call_ret.*; }  // 14
find_blend_shape_by_name :: (main: *MeshInstance3D, name: string) -> int { call_ret := cast(*int) sys_call("MeshInstance3D", "find_blend_shape_by_name", 4150868206, int, main.p_object, name); return call_ret.*; }  // 15
get_blend_shape_value :: (main: *MeshInstance3D, blend_shape_idx: int) -> float { call_ret := cast(*float) sys_call("MeshInstance3D", "get_blend_shape_value", 2339986948, float, main.p_object, blend_shape_idx); return call_ret.*; }  // 16
set_blend_shape_value :: (main: *MeshInstance3D, blend_shape_idx: int, value: float) { sys_call("MeshInstance3D", "set_blend_shape_value", 1602489585, Nil, main.p_object, blend_shape_idx, value);  }  // 17
create_debug_tangents :: (main: *MeshInstance3D) { sys_call("MeshInstance3D", "create_debug_tangents", 3218959716, Nil, main.p_object);  }  // 18
bake_mesh_from_current_blend_shape_mix :: (main: *MeshInstance3D) -> *ArrayMesh { call_ret := cast(*ArrayMesh) sys_call("MeshInstance3D", "bake_mesh_from_current_blend_shape_mix", 1457573577, ArrayMesh, main.p_object); return call_ret; }  // 19
bake_mesh_from_current_skeleton_pose :: (main: *MeshInstance3D) -> *ArrayMesh { call_ret := cast(*ArrayMesh) sys_call("MeshInstance3D", "bake_mesh_from_current_skeleton_pose", 1457573577, ArrayMesh, main.p_object); return call_ret; }  // 20

create_item :: (main: *MeshLibrary, id: int) { sys_call("MeshLibrary", "create_item", 1286410249, Nil, main.p_object, id);  }  // 0
set_item_name :: (main: *MeshLibrary, id: int, name: string) { sys_call("MeshLibrary", "set_item_name", 501894301, Nil, main.p_object, id, name);  }  // 1
set_item_mesh :: (main: *MeshLibrary, id: int, mesh: Mesh) { sys_call("MeshLibrary", "set_item_mesh", 969122797, Nil, main.p_object, id, mesh);  }  // 2
set_item_mesh_transform :: (main: *MeshLibrary, id: int, mesh_transform: Transform3D) { sys_call("MeshLibrary", "set_item_mesh_transform", 3616898986, Nil, main.p_object, id, mesh_transform);  }  // 3
set_item_mesh_cast_shadow :: (main: *MeshLibrary, id: int, shadow_casting_setting: RenderingServer.ShadowCastingSetting) { sys_call("MeshLibrary", "set_item_mesh_cast_shadow", 3923400443, Nil, main.p_object, id, shadow_casting_setting);  }  // 4
set_item_navigation_mesh :: (main: *MeshLibrary, id: int, navigation_mesh: NavigationMesh) { sys_call("MeshLibrary", "set_item_navigation_mesh", 3483353960, Nil, main.p_object, id, navigation_mesh);  }  // 5
set_item_navigation_mesh_transform :: (main: *MeshLibrary, id: int, navigation_mesh: Transform3D) { sys_call("MeshLibrary", "set_item_navigation_mesh_transform", 3616898986, Nil, main.p_object, id, navigation_mesh);  }  // 6
set_item_navigation_layers :: (main: *MeshLibrary, id: int, navigation_layers: int) { sys_call("MeshLibrary", "set_item_navigation_layers", 3937882851, Nil, main.p_object, id, navigation_layers);  }  // 7
set_item_shapes :: (main: *MeshLibrary, id: int, shapes: Array) { sys_call("MeshLibrary", "set_item_shapes", 537221740, Nil, main.p_object, id, shapes);  }  // 8
set_item_preview :: (main: *MeshLibrary, id: int, texture: Texture2D) { sys_call("MeshLibrary", "set_item_preview", 666127730, Nil, main.p_object, id, texture);  }  // 9
get_item_name :: (main: *MeshLibrary, id: int) -> gstring { call_ret := cast(*gstring) sys_call("MeshLibrary", "get_item_name", 844755477, gstring, main.p_object, id); return call_ret.*; }  // 10
get_item_mesh :: (main: *MeshLibrary, id: int) -> *Mesh { call_ret := cast(*Mesh) sys_call("MeshLibrary", "get_item_mesh", 1576363275, Mesh, main.p_object, id); return call_ret; }  // 11
get_item_mesh_transform :: (main: *MeshLibrary, id: int) -> Transform3D { call_ret := cast(*Transform3D) sys_call("MeshLibrary", "get_item_mesh_transform", 1965739696, Transform3D, main.p_object, id); return call_ret.*; }  // 12
get_item_mesh_cast_shadow :: (main: *MeshLibrary, id: int) -> RenderingServer.ShadowCastingSetting { call_ret := cast(*RenderingServer.ShadowCastingSetting) sys_call("MeshLibrary", "get_item_mesh_cast_shadow", 1841766007, RenderingServer.ShadowCastingSetting, main.p_object, id); return call_ret.*; }  // 13
get_item_navigation_mesh :: (main: *MeshLibrary, id: int) -> *NavigationMesh { call_ret := cast(*NavigationMesh) sys_call("MeshLibrary", "get_item_navigation_mesh", 2729647406, NavigationMesh, main.p_object, id); return call_ret; }  // 14
get_item_navigation_mesh_transform :: (main: *MeshLibrary, id: int) -> Transform3D { call_ret := cast(*Transform3D) sys_call("MeshLibrary", "get_item_navigation_mesh_transform", 1965739696, Transform3D, main.p_object, id); return call_ret.*; }  // 15
get_item_navigation_layers :: (main: *MeshLibrary, id: int) -> int { call_ret := cast(*int) sys_call("MeshLibrary", "get_item_navigation_layers", 923996154, int, main.p_object, id); return call_ret.*; }  // 16
get_item_shapes :: (main: *MeshLibrary, id: int) -> Array { call_ret := cast(*Array) sys_call("MeshLibrary", "get_item_shapes", 663333327, Array, main.p_object, id); return call_ret.*; }  // 17
get_item_preview :: (main: *MeshLibrary, id: int) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("MeshLibrary", "get_item_preview", 3536238170, Texture2D, main.p_object, id); return call_ret; }  // 18
remove_item :: (main: *MeshLibrary, id: int) { sys_call("MeshLibrary", "remove_item", 1286410249, Nil, main.p_object, id);  }  // 19
find_item_by_name :: (main: *MeshLibrary, name: string) -> int { call_ret := cast(*int) sys_call("MeshLibrary", "find_item_by_name", 1321353865, int, main.p_object, name); return call_ret.*; }  // 20
clear :: (main: *MeshLibrary) { sys_call("MeshLibrary", "clear", 3218959716, Nil, main.p_object);  }  // 21
get_item_list :: (main: *MeshLibrary) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("MeshLibrary", "get_item_list", 1930428628, PackedInt32Array, main.p_object); return call_ret.*; }  // 22
get_last_unused_item_id :: (main: *MeshLibrary) -> int { call_ret := cast(*int) sys_call("MeshLibrary", "get_last_unused_item_id", 3905245786, int, main.p_object); return call_ret.*; }  // 23

set_mesh :: (main: *MeshTexture, mesh: Mesh) { sys_call("MeshTexture", "set_mesh", 194775623, Nil, main.p_object, mesh);  }  // 0
get_mesh :: (main: *MeshTexture) -> *Mesh { call_ret := cast(*Mesh) sys_call("MeshTexture", "get_mesh", 1808005922, Mesh, main.p_object); return call_ret; }  // 1
set_image_size :: (main: *MeshTexture, size: Vector2) { sys_call("MeshTexture", "set_image_size", 743155724, Nil, main.p_object, size);  }  // 2
get_image_size :: (main: *MeshTexture) -> Vector2 { call_ret := cast(*Vector2) sys_call("MeshTexture", "get_image_size", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 3
set_base_texture :: (main: *MeshTexture, texture: Texture2D) { sys_call("MeshTexture", "set_base_texture", 4051416890, Nil, main.p_object, texture);  }  // 4
get_base_texture :: (main: *MeshTexture) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("MeshTexture", "get_base_texture", 3635182373, Texture2D, main.p_object); return call_ret; }  // 5

set_delay :: (main: *MethodTweener, delay: float) -> *MethodTweener { call_ret := cast(*MethodTweener) sys_call("MethodTweener", "set_delay", 266477812, MethodTweener, main.p_object, delay); return call_ret; }  // 0
set_trans :: (main: *MethodTweener, trans: Tween.TransitionType) -> *MethodTweener { call_ret := cast(*MethodTweener) sys_call("MethodTweener", "set_trans", 3740975367, MethodTweener, main.p_object, trans); return call_ret; }  // 1
set_ease :: (main: *MethodTweener, ease: Tween.EaseType) -> *MethodTweener { call_ret := cast(*MethodTweener) sys_call("MethodTweener", "set_ease", 315540545, MethodTweener, main.p_object, ease); return call_ret; }  // 2

set_original_class :: (main: *MissingNode, name: string) { sys_call("MissingNode", "set_original_class", 83702148, Nil, main.p_object, name);  }  // 0
get_original_class :: (main: *MissingNode) -> gstring { call_ret := cast(*gstring) sys_call("MissingNode", "get_original_class", 201670096, gstring, main.p_object); return call_ret.*; }  // 1
set_original_scene :: (main: *MissingNode, name: string) { sys_call("MissingNode", "set_original_scene", 83702148, Nil, main.p_object, name);  }  // 2
get_original_scene :: (main: *MissingNode) -> gstring { call_ret := cast(*gstring) sys_call("MissingNode", "get_original_scene", 201670096, gstring, main.p_object); return call_ret.*; }  // 3
set_recording_properties :: (main: *MissingNode, enable: bool) { sys_call("MissingNode", "set_recording_properties", 2586408642, Nil, main.p_object, enable);  }  // 4
is_recording_properties :: (main: *MissingNode) -> bool { call_ret := cast(*bool) sys_call("MissingNode", "is_recording_properties", 36873697, bool, main.p_object); return call_ret.*; }  // 5

set_original_class :: (main: *MissingResource, name: string) { sys_call("MissingResource", "set_original_class", 83702148, Nil, main.p_object, name);  }  // 0
get_original_class :: (main: *MissingResource) -> gstring { call_ret := cast(*gstring) sys_call("MissingResource", "get_original_class", 201670096, gstring, main.p_object); return call_ret.*; }  // 1
set_recording_properties :: (main: *MissingResource, enable: bool) { sys_call("MissingResource", "set_recording_properties", 2586408642, Nil, main.p_object, enable);  }  // 2
is_recording_properties :: (main: *MissingResource) -> bool { call_ret := cast(*bool) sys_call("MissingResource", "is_recording_properties", 36873697, bool, main.p_object); return call_ret.*; }  // 3

set_eye_height :: (main: *MobileVRInterface, eye_height: float) { sys_call("MobileVRInterface", "set_eye_height", 373806689, Nil, main.p_object, eye_height);  }  // 0
get_eye_height :: (main: *MobileVRInterface) -> float { call_ret := cast(*float) sys_call("MobileVRInterface", "get_eye_height", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_iod :: (main: *MobileVRInterface, iod: float) { sys_call("MobileVRInterface", "set_iod", 373806689, Nil, main.p_object, iod);  }  // 2
get_iod :: (main: *MobileVRInterface) -> float { call_ret := cast(*float) sys_call("MobileVRInterface", "get_iod", 1740695150, float, main.p_object); return call_ret.*; }  // 3
set_display_width :: (main: *MobileVRInterface, display_width: float) { sys_call("MobileVRInterface", "set_display_width", 373806689, Nil, main.p_object, display_width);  }  // 4
get_display_width :: (main: *MobileVRInterface) -> float { call_ret := cast(*float) sys_call("MobileVRInterface", "get_display_width", 1740695150, float, main.p_object); return call_ret.*; }  // 5
set_display_to_lens :: (main: *MobileVRInterface, display_to_lens: float) { sys_call("MobileVRInterface", "set_display_to_lens", 373806689, Nil, main.p_object, display_to_lens);  }  // 6
get_display_to_lens :: (main: *MobileVRInterface) -> float { call_ret := cast(*float) sys_call("MobileVRInterface", "get_display_to_lens", 1740695150, float, main.p_object); return call_ret.*; }  // 7
set_offset_rect :: (main: *MobileVRInterface, offset_rect: Rect2) { sys_call("MobileVRInterface", "set_offset_rect", 2046264180, Nil, main.p_object, offset_rect);  }  // 8
get_offset_rect :: (main: *MobileVRInterface) -> Rect2 { call_ret := cast(*Rect2) sys_call("MobileVRInterface", "get_offset_rect", 1639390495, Rect2, main.p_object); return call_ret.*; }  // 9
set_oversample :: (main: *MobileVRInterface, oversample: float) { sys_call("MobileVRInterface", "set_oversample", 373806689, Nil, main.p_object, oversample);  }  // 10
get_oversample :: (main: *MobileVRInterface) -> float { call_ret := cast(*float) sys_call("MobileVRInterface", "get_oversample", 1740695150, float, main.p_object); return call_ret.*; }  // 11
set_k1 :: (main: *MobileVRInterface, k: float) { sys_call("MobileVRInterface", "set_k1", 373806689, Nil, main.p_object, k);  }  // 12
get_k1 :: (main: *MobileVRInterface) -> float { call_ret := cast(*float) sys_call("MobileVRInterface", "get_k1", 1740695150, float, main.p_object); return call_ret.*; }  // 13
set_k2 :: (main: *MobileVRInterface, k: float) { sys_call("MobileVRInterface", "set_k2", 373806689, Nil, main.p_object, k);  }  // 14
get_k2 :: (main: *MobileVRInterface) -> float { call_ret := cast(*float) sys_call("MobileVRInterface", "get_k2", 1740695150, float, main.p_object); return call_ret.*; }  // 15
get_vrs_min_radius :: (main: *MobileVRInterface) -> float { call_ret := cast(*float) sys_call("MobileVRInterface", "get_vrs_min_radius", 1740695150, float, main.p_object); return call_ret.*; }  // 16
set_vrs_min_radius :: (main: *MobileVRInterface, radius: float) { sys_call("MobileVRInterface", "set_vrs_min_radius", 373806689, Nil, main.p_object, radius);  }  // 17
get_vrs_strength :: (main: *MobileVRInterface) -> float { call_ret := cast(*float) sys_call("MobileVRInterface", "get_vrs_strength", 1740695150, float, main.p_object); return call_ret.*; }  // 18
set_vrs_strength :: (main: *MobileVRInterface, strength: float) { sys_call("MobileVRInterface", "set_vrs_strength", 373806689, Nil, main.p_object, strength);  }  // 19

add_writer :: (main: *MovieWriter, writer: MovieWriter) { sys_call("MovieWriter", "add_writer", 4023702871, Nil, main.p_object, writer);  }  // 6

set_mesh :: (main: *MultiMesh, mesh: Mesh) { sys_call("MultiMesh", "set_mesh", 194775623, Nil, main.p_object, mesh);  }  // 0
get_mesh :: (main: *MultiMesh) -> *Mesh { call_ret := cast(*Mesh) sys_call("MultiMesh", "get_mesh", 1808005922, Mesh, main.p_object); return call_ret; }  // 1
set_use_colors :: (main: *MultiMesh, enable: bool) { sys_call("MultiMesh", "set_use_colors", 2586408642, Nil, main.p_object, enable);  }  // 2
is_using_colors :: (main: *MultiMesh) -> bool { call_ret := cast(*bool) sys_call("MultiMesh", "is_using_colors", 36873697, bool, main.p_object); return call_ret.*; }  // 3
set_use_custom_data :: (main: *MultiMesh, enable: bool) { sys_call("MultiMesh", "set_use_custom_data", 2586408642, Nil, main.p_object, enable);  }  // 4
is_using_custom_data :: (main: *MultiMesh) -> bool { call_ret := cast(*bool) sys_call("MultiMesh", "is_using_custom_data", 36873697, bool, main.p_object); return call_ret.*; }  // 5
set_transform_format :: (main: *MultiMesh, format: MultiMesh.TransformFormat) { sys_call("MultiMesh", "set_transform_format", 2404750322, Nil, main.p_object, format);  }  // 6
get_transform_format :: (main: *MultiMesh) -> MultiMesh.TransformFormat { call_ret := cast(*MultiMesh.TransformFormat) sys_call("MultiMesh", "get_transform_format", 2444156481, MultiMesh.TransformFormat, main.p_object); return call_ret.*; }  // 7
set_instance_count :: (main: *MultiMesh, count: int) { sys_call("MultiMesh", "set_instance_count", 1286410249, Nil, main.p_object, count);  }  // 8
get_instance_count :: (main: *MultiMesh) -> int { call_ret := cast(*int) sys_call("MultiMesh", "get_instance_count", 3905245786, int, main.p_object); return call_ret.*; }  // 9
set_visible_instance_count :: (main: *MultiMesh, count: int) { sys_call("MultiMesh", "set_visible_instance_count", 1286410249, Nil, main.p_object, count);  }  // 10
get_visible_instance_count :: (main: *MultiMesh) -> int { call_ret := cast(*int) sys_call("MultiMesh", "get_visible_instance_count", 3905245786, int, main.p_object); return call_ret.*; }  // 11
set_physics_interpolation_quality :: (main: *MultiMesh, quality: MultiMesh.PhysicsInterpolationQuality) { sys_call("MultiMesh", "set_physics_interpolation_quality", 1819488408, Nil, main.p_object, quality);  }  // 12
get_physics_interpolation_quality :: (main: *MultiMesh) -> MultiMesh.PhysicsInterpolationQuality { call_ret := cast(*MultiMesh.PhysicsInterpolationQuality) sys_call("MultiMesh", "get_physics_interpolation_quality", 1465701882, MultiMesh.PhysicsInterpolationQuality, main.p_object); return call_ret.*; }  // 13
set_instance_transform :: (main: *MultiMesh, instance: int, transform: Transform3D) { sys_call("MultiMesh", "set_instance_transform", 3616898986, Nil, main.p_object, instance, transform);  }  // 14
set_instance_transform_2d :: (main: *MultiMesh, instance: int, transform: Transform2D) { sys_call("MultiMesh", "set_instance_transform_2d", 30160968, Nil, main.p_object, instance, transform);  }  // 15
get_instance_transform :: (main: *MultiMesh, instance: int) -> Transform3D { call_ret := cast(*Transform3D) sys_call("MultiMesh", "get_instance_transform", 1965739696, Transform3D, main.p_object, instance); return call_ret.*; }  // 16
get_instance_transform_2d :: (main: *MultiMesh, instance: int) -> Transform2D { call_ret := cast(*Transform2D) sys_call("MultiMesh", "get_instance_transform_2d", 3836996910, Transform2D, main.p_object, instance); return call_ret.*; }  // 17
set_instance_color :: (main: *MultiMesh, instance: int, color: Color) { sys_call("MultiMesh", "set_instance_color", 2878471219, Nil, main.p_object, instance, color);  }  // 18
get_instance_color :: (main: *MultiMesh, instance: int) -> Color { call_ret := cast(*Color) sys_call("MultiMesh", "get_instance_color", 3457211756, Color, main.p_object, instance); return call_ret.*; }  // 19
set_instance_custom_data :: (main: *MultiMesh, instance: int, custom_data: Color) { sys_call("MultiMesh", "set_instance_custom_data", 2878471219, Nil, main.p_object, instance, custom_data);  }  // 20
get_instance_custom_data :: (main: *MultiMesh, instance: int) -> Color { call_ret := cast(*Color) sys_call("MultiMesh", "get_instance_custom_data", 3457211756, Color, main.p_object, instance); return call_ret.*; }  // 21
reset_instance_physics_interpolation :: (main: *MultiMesh, instance: int) { sys_call("MultiMesh", "reset_instance_physics_interpolation", 1286410249, Nil, main.p_object, instance);  }  // 22
set_custom_aabb :: (main: *MultiMesh, aabb: AABB) { sys_call("MultiMesh", "set_custom_aabb", 259215842, Nil, main.p_object, aabb);  }  // 23
get_custom_aabb :: (main: *MultiMesh) -> AABB { call_ret := cast(*AABB) sys_call("MultiMesh", "get_custom_aabb", 1068685055, AABB, main.p_object); return call_ret.*; }  // 24
get_aabb :: (main: *MultiMesh) -> AABB { call_ret := cast(*AABB) sys_call("MultiMesh", "get_aabb", 1068685055, AABB, main.p_object); return call_ret.*; }  // 25
get_buffer :: (main: *MultiMesh) -> PackedFloat32Array { call_ret := cast(*PackedFloat32Array) sys_call("MultiMesh", "get_buffer", 675695659, PackedFloat32Array, main.p_object); return call_ret.*; }  // 26
set_buffer :: (main: *MultiMesh, buffer: PackedFloat32Array) { sys_call("MultiMesh", "set_buffer", 2899603908, Nil, main.p_object, buffer);  }  // 27
set_buffer_interpolated :: (main: *MultiMesh, buffer_curr: PackedFloat32Array, buffer_prev: PackedFloat32Array) { sys_call("MultiMesh", "set_buffer_interpolated", 3514430332, Nil, main.p_object, buffer_curr, buffer_prev);  }  // 28

set_multimesh :: (main: *MultiMeshInstance2D, multimesh: MultiMesh) { sys_call("MultiMeshInstance2D", "set_multimesh", 2246127404, Nil, main.p_object, multimesh);  }  // 0
get_multimesh :: (main: *MultiMeshInstance2D) -> *MultiMesh { call_ret := cast(*MultiMesh) sys_call("MultiMeshInstance2D", "get_multimesh", 1385450523, MultiMesh, main.p_object); return call_ret; }  // 1
set_texture :: (main: *MultiMeshInstance2D, texture: Texture2D) { sys_call("MultiMeshInstance2D", "set_texture", 4051416890, Nil, main.p_object, texture);  }  // 2
get_texture :: (main: *MultiMeshInstance2D) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("MultiMeshInstance2D", "get_texture", 3635182373, Texture2D, main.p_object); return call_ret; }  // 3

set_multimesh :: (main: *MultiMeshInstance3D, multimesh: MultiMesh) { sys_call("MultiMeshInstance3D", "set_multimesh", 2246127404, Nil, main.p_object, multimesh);  }  // 0
get_multimesh :: (main: *MultiMeshInstance3D) -> *MultiMesh { call_ret := cast(*MultiMesh) sys_call("MultiMeshInstance3D", "get_multimesh", 1385450523, MultiMesh, main.p_object); return call_ret; }  // 1

has_multiplayer_peer :: (main: *MultiplayerAPI) -> bool { call_ret := cast(*bool) sys_call("MultiplayerAPI", "has_multiplayer_peer", 2240911060, bool, main.p_object); return call_ret.*; }  // 0
get_multiplayer_peer :: (main: *MultiplayerAPI) -> *MultiplayerPeer { call_ret := cast(*MultiplayerPeer) sys_call("MultiplayerAPI", "get_multiplayer_peer", 3223692825, MultiplayerPeer, main.p_object); return call_ret; }  // 1
set_multiplayer_peer :: (main: *MultiplayerAPI, peer: MultiplayerPeer) { sys_call("MultiplayerAPI", "set_multiplayer_peer", 3694835298, Nil, main.p_object, peer);  }  // 2
get_unique_id :: (main: *MultiplayerAPI) -> int { call_ret := cast(*int) sys_call("MultiplayerAPI", "get_unique_id", 2455072627, int, main.p_object); return call_ret.*; }  // 3
is_server :: (main: *MultiplayerAPI) -> bool { call_ret := cast(*bool) sys_call("MultiplayerAPI", "is_server", 2240911060, bool, main.p_object); return call_ret.*; }  // 4
get_remote_sender_id :: (main: *MultiplayerAPI) -> int { call_ret := cast(*int) sys_call("MultiplayerAPI", "get_remote_sender_id", 2455072627, int, main.p_object); return call_ret.*; }  // 5
poll :: (main: *MultiplayerAPI) -> Error { call_ret := cast(*Error) sys_call("MultiplayerAPI", "poll", 166280745, Error, main.p_object); return call_ret.*; }  // 6
rpc :: (main: *MultiplayerAPI, peer: int, object: Object, method: string) -> Error { call_ret := cast(*Error) sys_call("MultiplayerAPI", "rpc", 2077486355, Error, main.p_object, peer, object, method); return call_ret.*; }  // 7
object_configuration_add :: (main: *MultiplayerAPI, object: Object, configuration: Variant) -> Error { call_ret := cast(*Error) sys_call("MultiplayerAPI", "object_configuration_add", 1171879464, Error, main.p_object, object, configuration); return call_ret.*; }  // 8
object_configuration_remove :: (main: *MultiplayerAPI, object: Object, configuration: Variant) -> Error { call_ret := cast(*Error) sys_call("MultiplayerAPI", "object_configuration_remove", 1171879464, Error, main.p_object, object, configuration); return call_ret.*; }  // 9
get_peers :: (main: *MultiplayerAPI) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("MultiplayerAPI", "get_peers", 969006518, PackedInt32Array, main.p_object); return call_ret.*; }  // 10
set_default_interface :: (main: *MultiplayerAPI, interface_name: string) { sys_call("MultiplayerAPI", "set_default_interface", 3304788590, Nil, main.p_object, interface_name);  }  // 11
get_default_interface :: (main: *MultiplayerAPI) -> StringName { call_ret := cast(*StringName) sys_call("MultiplayerAPI", "get_default_interface", 2737447660, StringName, main.p_object); return call_ret.*; }  // 12
create_default_interface :: (main: *MultiplayerAPI) -> *MultiplayerAPI { call_ret := cast(*MultiplayerAPI) sys_call("MultiplayerAPI", "create_default_interface", 3294156723, MultiplayerAPI, main.p_object); return call_ret; }  // 13


set_transfer_channel :: (main: *MultiplayerPeer, channel: int) { sys_call("MultiplayerPeer", "set_transfer_channel", 1286410249, Nil, main.p_object, channel);  }  // 0
get_transfer_channel :: (main: *MultiplayerPeer) -> int { call_ret := cast(*int) sys_call("MultiplayerPeer", "get_transfer_channel", 3905245786, int, main.p_object); return call_ret.*; }  // 1
set_transfer_mode :: (main: *MultiplayerPeer, mode: MultiplayerPeer.TransferMode) { sys_call("MultiplayerPeer", "set_transfer_mode", 950411049, Nil, main.p_object, mode);  }  // 2
get_transfer_mode :: (main: *MultiplayerPeer) -> MultiplayerPeer.TransferMode { call_ret := cast(*MultiplayerPeer.TransferMode) sys_call("MultiplayerPeer", "get_transfer_mode", 3369852622, MultiplayerPeer.TransferMode, main.p_object); return call_ret.*; }  // 3
set_target_peer :: (main: *MultiplayerPeer, id: int) { sys_call("MultiplayerPeer", "set_target_peer", 1286410249, Nil, main.p_object, id);  }  // 4
get_packet_peer :: (main: *MultiplayerPeer) -> int { call_ret := cast(*int) sys_call("MultiplayerPeer", "get_packet_peer", 3905245786, int, main.p_object); return call_ret.*; }  // 5
get_packet_channel :: (main: *MultiplayerPeer) -> int { call_ret := cast(*int) sys_call("MultiplayerPeer", "get_packet_channel", 3905245786, int, main.p_object); return call_ret.*; }  // 6
get_packet_mode :: (main: *MultiplayerPeer) -> MultiplayerPeer.TransferMode { call_ret := cast(*MultiplayerPeer.TransferMode) sys_call("MultiplayerPeer", "get_packet_mode", 3369852622, MultiplayerPeer.TransferMode, main.p_object); return call_ret.*; }  // 7
poll :: (main: *MultiplayerPeer) { sys_call("MultiplayerPeer", "poll", 3218959716, Nil, main.p_object);  }  // 8
close :: (main: *MultiplayerPeer) { sys_call("MultiplayerPeer", "close", 3218959716, Nil, main.p_object);  }  // 9
disconnect_peer :: (main: *MultiplayerPeer, peer: int) { sys_call("MultiplayerPeer", "disconnect_peer", 4023243586, Nil, main.p_object, peer);  }  // 10
get_connection_status :: (main: *MultiplayerPeer) -> MultiplayerPeer.ConnectionStatus { call_ret := cast(*MultiplayerPeer.ConnectionStatus) sys_call("MultiplayerPeer", "get_connection_status", 2147374275, MultiplayerPeer.ConnectionStatus, main.p_object); return call_ret.*; }  // 11
get_unique_id :: (main: *MultiplayerPeer) -> int { call_ret := cast(*int) sys_call("MultiplayerPeer", "get_unique_id", 3905245786, int, main.p_object); return call_ret.*; }  // 12
generate_unique_id :: (main: *MultiplayerPeer) -> int { call_ret := cast(*int) sys_call("MultiplayerPeer", "generate_unique_id", 3905245786, int, main.p_object); return call_ret.*; }  // 13
set_refuse_new_connections :: (main: *MultiplayerPeer, enable: bool) { sys_call("MultiplayerPeer", "set_refuse_new_connections", 2586408642, Nil, main.p_object, enable);  }  // 14
is_refusing_new_connections :: (main: *MultiplayerPeer) -> bool { call_ret := cast(*bool) sys_call("MultiplayerPeer", "is_refusing_new_connections", 36873697, bool, main.p_object); return call_ret.*; }  // 15
is_server_relay_supported :: (main: *MultiplayerPeer) -> bool { call_ret := cast(*bool) sys_call("MultiplayerPeer", "is_server_relay_supported", 36873697, bool, main.p_object); return call_ret.*; }  // 16


add_spawnable_scene :: (main: *MultiplayerSpawner, path: string) { sys_call("MultiplayerSpawner", "add_spawnable_scene", 83702148, Nil, main.p_object, path);  }  // 0
get_spawnable_scene_count :: (main: *MultiplayerSpawner) -> int { call_ret := cast(*int) sys_call("MultiplayerSpawner", "get_spawnable_scene_count", 3905245786, int, main.p_object); return call_ret.*; }  // 1
get_spawnable_scene :: (main: *MultiplayerSpawner, index: int) -> gstring { call_ret := cast(*gstring) sys_call("MultiplayerSpawner", "get_spawnable_scene", 844755477, gstring, main.p_object, index); return call_ret.*; }  // 2
clear_spawnable_scenes :: (main: *MultiplayerSpawner) { sys_call("MultiplayerSpawner", "clear_spawnable_scenes", 3218959716, Nil, main.p_object);  }  // 3
spawn :: (main: *MultiplayerSpawner) -> *Node { call_ret := cast(*Node) sys_call("MultiplayerSpawner", "spawn", 1991184589, Node, main.p_object); return call_ret; }  // 4
get_spawn_path :: (main: *MultiplayerSpawner) -> NodePath { call_ret := cast(*NodePath) sys_call("MultiplayerSpawner", "get_spawn_path", 4075236667, NodePath, main.p_object); return call_ret.*; }  // 5
set_spawn_path :: (main: *MultiplayerSpawner, path: string) { sys_call("MultiplayerSpawner", "set_spawn_path", 1348162250, Nil, main.p_object, path);  }  // 6
get_spawn_limit :: (main: *MultiplayerSpawner) -> int { call_ret := cast(*int) sys_call("MultiplayerSpawner", "get_spawn_limit", 3905245786, int, main.p_object); return call_ret.*; }  // 7
set_spawn_limit :: (main: *MultiplayerSpawner, limit: int) { sys_call("MultiplayerSpawner", "set_spawn_limit", 1286410249, Nil, main.p_object, limit);  }  // 8
get_spawn_function :: (main: *MultiplayerSpawner) -> Callable { call_ret := cast(*Callable) sys_call("MultiplayerSpawner", "get_spawn_function", 1307783378, Callable, main.p_object); return call_ret.*; }  // 9
set_spawn_function :: (main: *MultiplayerSpawner, spawn_function: Callable) { sys_call("MultiplayerSpawner", "set_spawn_function", 1611583062, Nil, main.p_object, spawn_function);  }  // 10

set_root_path :: (main: *MultiplayerSynchronizer, path: string) { sys_call("MultiplayerSynchronizer", "set_root_path", 1348162250, Nil, main.p_object, path);  }  // 0
get_root_path :: (main: *MultiplayerSynchronizer) -> NodePath { call_ret := cast(*NodePath) sys_call("MultiplayerSynchronizer", "get_root_path", 4075236667, NodePath, main.p_object); return call_ret.*; }  // 1
set_replication_interval :: (main: *MultiplayerSynchronizer, milliseconds: float) { sys_call("MultiplayerSynchronizer", "set_replication_interval", 373806689, Nil, main.p_object, milliseconds);  }  // 2
get_replication_interval :: (main: *MultiplayerSynchronizer) -> float { call_ret := cast(*float) sys_call("MultiplayerSynchronizer", "get_replication_interval", 1740695150, float, main.p_object); return call_ret.*; }  // 3
set_delta_interval :: (main: *MultiplayerSynchronizer, milliseconds: float) { sys_call("MultiplayerSynchronizer", "set_delta_interval", 373806689, Nil, main.p_object, milliseconds);  }  // 4
get_delta_interval :: (main: *MultiplayerSynchronizer) -> float { call_ret := cast(*float) sys_call("MultiplayerSynchronizer", "get_delta_interval", 1740695150, float, main.p_object); return call_ret.*; }  // 5
set_replication_config :: (main: *MultiplayerSynchronizer, config: SceneReplicationConfig) { sys_call("MultiplayerSynchronizer", "set_replication_config", 3889206742, Nil, main.p_object, config);  }  // 6
get_replication_config :: (main: *MultiplayerSynchronizer) -> *SceneReplicationConfig { call_ret := cast(*SceneReplicationConfig) sys_call("MultiplayerSynchronizer", "get_replication_config", 3200254614, SceneReplicationConfig, main.p_object); return call_ret; }  // 7
set_visibility_update_mode :: (main: *MultiplayerSynchronizer, mode: MultiplayerSynchronizer.VisibilityUpdateMode) { sys_call("MultiplayerSynchronizer", "set_visibility_update_mode", 3494860300, Nil, main.p_object, mode);  }  // 8
get_visibility_update_mode :: (main: *MultiplayerSynchronizer) -> MultiplayerSynchronizer.VisibilityUpdateMode { call_ret := cast(*MultiplayerSynchronizer.VisibilityUpdateMode) sys_call("MultiplayerSynchronizer", "get_visibility_update_mode", 3352241418, MultiplayerSynchronizer.VisibilityUpdateMode, main.p_object); return call_ret.*; }  // 9
update_visibility :: (main: *MultiplayerSynchronizer) { sys_call("MultiplayerSynchronizer", "update_visibility", 1995695955, Nil, main.p_object);  }  // 10
set_visibility_public :: (main: *MultiplayerSynchronizer, visible: bool) { sys_call("MultiplayerSynchronizer", "set_visibility_public", 2586408642, Nil, main.p_object, visible);  }  // 11
is_visibility_public :: (main: *MultiplayerSynchronizer) -> bool { call_ret := cast(*bool) sys_call("MultiplayerSynchronizer", "is_visibility_public", 36873697, bool, main.p_object); return call_ret.*; }  // 12
add_visibility_filter :: (main: *MultiplayerSynchronizer, filter: Callable) { sys_call("MultiplayerSynchronizer", "add_visibility_filter", 1611583062, Nil, main.p_object, filter);  }  // 13
remove_visibility_filter :: (main: *MultiplayerSynchronizer, filter: Callable) { sys_call("MultiplayerSynchronizer", "remove_visibility_filter", 1611583062, Nil, main.p_object, filter);  }  // 14
set_visibility_for :: (main: *MultiplayerSynchronizer, peer: int, visible: bool) { sys_call("MultiplayerSynchronizer", "set_visibility_for", 300928843, Nil, main.p_object, peer, visible);  }  // 15
get_visibility_for :: (main: *MultiplayerSynchronizer, peer: int) -> bool { call_ret := cast(*bool) sys_call("MultiplayerSynchronizer", "get_visibility_for", 1116898809, bool, main.p_object, peer); return call_ret.*; }  // 16

lock :: (main: *Mutex) { sys_call("Mutex", "lock", 3218959716, Nil, main.p_object);  }  // 0
try_lock :: (main: *Mutex) -> bool { call_ret := cast(*bool) sys_call("Mutex", "try_lock", 2240911060, bool, main.p_object); return call_ret.*; }  // 1
unlock :: (main: *Mutex) { sys_call("Mutex", "unlock", 3218959716, Nil, main.p_object);  }  // 2

has_feature :: (main: *NativeMenu, feature: NativeMenu.Feature) -> bool { call_ret := cast(*bool) sys_call("NativeMenu", "has_feature", 1708975490, bool, main.p_object, feature); return call_ret.*; }  // 0
has_system_menu :: (main: *NativeMenu, menu_id: NativeMenu.SystemMenus) -> bool { call_ret := cast(*bool) sys_call("NativeMenu", "has_system_menu", 718213027, bool, main.p_object, menu_id); return call_ret.*; }  // 1
get_system_menu :: (main: *NativeMenu, menu_id: NativeMenu.SystemMenus) -> RID { call_ret := cast(*RID) sys_call("NativeMenu", "get_system_menu", 469707506, RID, main.p_object, menu_id); return call_ret.*; }  // 2
get_system_menu_name :: (main: *NativeMenu, menu_id: NativeMenu.SystemMenus) -> gstring { call_ret := cast(*gstring) sys_call("NativeMenu", "get_system_menu_name", 1281499290, gstring, main.p_object, menu_id); return call_ret.*; }  // 3
create_menu :: (main: *NativeMenu) -> RID { call_ret := cast(*RID) sys_call("NativeMenu", "create_menu", 529393457, RID, main.p_object); return call_ret.*; }  // 4
has_menu :: (main: *NativeMenu, rid: RID) -> bool { call_ret := cast(*bool) sys_call("NativeMenu", "has_menu", 4155700596, bool, main.p_object, rid); return call_ret.*; }  // 5
free_menu :: (main: *NativeMenu, rid: RID) { sys_call("NativeMenu", "free_menu", 2722037293, Nil, main.p_object, rid);  }  // 6
get_size :: (main: *NativeMenu, rid: RID) -> Vector2 { call_ret := cast(*Vector2) sys_call("NativeMenu", "get_size", 2440833711, Vector2, main.p_object, rid); return call_ret.*; }  // 7
popup :: (main: *NativeMenu, rid: RID, position: Vector2i) { sys_call("NativeMenu", "popup", 2450610377, Nil, main.p_object, rid, position);  }  // 8
set_interface_direction :: (main: *NativeMenu, rid: RID, is_rtl: bool) { sys_call("NativeMenu", "set_interface_direction", 1265174801, Nil, main.p_object, rid, is_rtl);  }  // 9
set_popup_open_callback :: (main: *NativeMenu, rid: RID, callback: Callable) { sys_call("NativeMenu", "set_popup_open_callback", 3379118538, Nil, main.p_object, rid, callback);  }  // 10
get_popup_open_callback :: (main: *NativeMenu, rid: RID) -> Callable { call_ret := cast(*Callable) sys_call("NativeMenu", "get_popup_open_callback", 3170603026, Callable, main.p_object, rid); return call_ret.*; }  // 11
set_popup_close_callback :: (main: *NativeMenu, rid: RID, callback: Callable) { sys_call("NativeMenu", "set_popup_close_callback", 3379118538, Nil, main.p_object, rid, callback);  }  // 12
get_popup_close_callback :: (main: *NativeMenu, rid: RID) -> Callable { call_ret := cast(*Callable) sys_call("NativeMenu", "get_popup_close_callback", 3170603026, Callable, main.p_object, rid); return call_ret.*; }  // 13
set_minimum_width :: (main: *NativeMenu, rid: RID, width: float) { sys_call("NativeMenu", "set_minimum_width", 1794382983, Nil, main.p_object, rid, width);  }  // 14
get_minimum_width :: (main: *NativeMenu, rid: RID) -> float { call_ret := cast(*float) sys_call("NativeMenu", "get_minimum_width", 866169185, float, main.p_object, rid); return call_ret.*; }  // 15
is_opened :: (main: *NativeMenu, rid: RID) -> bool { call_ret := cast(*bool) sys_call("NativeMenu", "is_opened", 4155700596, bool, main.p_object, rid); return call_ret.*; }  // 16
add_submenu_item :: (main: *NativeMenu, rid: RID, label: string, submenu_rid: RID) -> int { call_ret := cast(*int) sys_call("NativeMenu", "add_submenu_item", 1002030223, int, main.p_object, rid, label, submenu_rid); return call_ret.*; }  // 17
add_item :: (main: *NativeMenu, rid: RID, label: string) -> int { call_ret := cast(*int) sys_call("NativeMenu", "add_item", 980552939, int, main.p_object, rid, label); return call_ret.*; }  // 18
add_check_item :: (main: *NativeMenu, rid: RID, label: string) -> int { call_ret := cast(*int) sys_call("NativeMenu", "add_check_item", 980552939, int, main.p_object, rid, label); return call_ret.*; }  // 19
add_icon_item :: (main: *NativeMenu, rid: RID, icon: Texture2D, label: string) -> int { call_ret := cast(*int) sys_call("NativeMenu", "add_icon_item", 1372188274, int, main.p_object, rid, icon, label); return call_ret.*; }  // 20
add_icon_check_item :: (main: *NativeMenu, rid: RID, icon: Texture2D, label: string) -> int { call_ret := cast(*int) sys_call("NativeMenu", "add_icon_check_item", 1372188274, int, main.p_object, rid, icon, label); return call_ret.*; }  // 21
add_radio_check_item :: (main: *NativeMenu, rid: RID, label: string) -> int { call_ret := cast(*int) sys_call("NativeMenu", "add_radio_check_item", 980552939, int, main.p_object, rid, label); return call_ret.*; }  // 22
add_icon_radio_check_item :: (main: *NativeMenu, rid: RID, icon: Texture2D, label: string) -> int { call_ret := cast(*int) sys_call("NativeMenu", "add_icon_radio_check_item", 1372188274, int, main.p_object, rid, icon, label); return call_ret.*; }  // 23
add_multistate_item :: (main: *NativeMenu, rid: RID, label: string, max_states: int, default_state: int) -> int { call_ret := cast(*int) sys_call("NativeMenu", "add_multistate_item", 2674635658, int, main.p_object, rid, label, max_states, default_state); return call_ret.*; }  // 24
add_separator :: (main: *NativeMenu, rid: RID) -> int { call_ret := cast(*int) sys_call("NativeMenu", "add_separator", 448810126, int, main.p_object, rid); return call_ret.*; }  // 25
find_item_index_with_text :: (main: *NativeMenu, rid: RID, text: string) -> int { call_ret := cast(*int) sys_call("NativeMenu", "find_item_index_with_text", 1362438794, int, main.p_object, rid, text); return call_ret.*; }  // 26
find_item_index_with_tag :: (main: *NativeMenu, rid: RID, tag: Variant) -> int { call_ret := cast(*int) sys_call("NativeMenu", "find_item_index_with_tag", 1260085030, int, main.p_object, rid, tag); return call_ret.*; }  // 27
find_item_index_with_submenu :: (main: *NativeMenu, rid: RID, submenu_rid: RID) -> int { call_ret := cast(*int) sys_call("NativeMenu", "find_item_index_with_submenu", 893635918, int, main.p_object, rid, submenu_rid); return call_ret.*; }  // 28
is_item_checked :: (main: *NativeMenu, rid: RID, idx: int) -> bool { call_ret := cast(*bool) sys_call("NativeMenu", "is_item_checked", 3120086654, bool, main.p_object, rid, idx); return call_ret.*; }  // 29
is_item_checkable :: (main: *NativeMenu, rid: RID, idx: int) -> bool { call_ret := cast(*bool) sys_call("NativeMenu", "is_item_checkable", 3120086654, bool, main.p_object, rid, idx); return call_ret.*; }  // 30
is_item_radio_checkable :: (main: *NativeMenu, rid: RID, idx: int) -> bool { call_ret := cast(*bool) sys_call("NativeMenu", "is_item_radio_checkable", 3120086654, bool, main.p_object, rid, idx); return call_ret.*; }  // 31
get_item_callback :: (main: *NativeMenu, rid: RID, idx: int) -> Callable { call_ret := cast(*Callable) sys_call("NativeMenu", "get_item_callback", 1639989698, Callable, main.p_object, rid, idx); return call_ret.*; }  // 32
get_item_key_callback :: (main: *NativeMenu, rid: RID, idx: int) -> Callable { call_ret := cast(*Callable) sys_call("NativeMenu", "get_item_key_callback", 1639989698, Callable, main.p_object, rid, idx); return call_ret.*; }  // 33
get_item_tag :: (main: *NativeMenu, rid: RID, idx: int) -> Variant { call_ret := cast(*Variant) sys_call("NativeMenu", "get_item_tag", 4069510997, Variant, main.p_object, rid, idx); return call_ret.*; }  // 34
get_item_text :: (main: *NativeMenu, rid: RID, idx: int) -> gstring { call_ret := cast(*gstring) sys_call("NativeMenu", "get_item_text", 1464764419, gstring, main.p_object, rid, idx); return call_ret.*; }  // 35
get_item_submenu :: (main: *NativeMenu, rid: RID, idx: int) -> RID { call_ret := cast(*RID) sys_call("NativeMenu", "get_item_submenu", 1066463050, RID, main.p_object, rid, idx); return call_ret.*; }  // 36
get_item_accelerator :: (main: *NativeMenu, rid: RID, idx: int) -> Key { call_ret := cast(*Key) sys_call("NativeMenu", "get_item_accelerator", 316800700, Key, main.p_object, rid, idx); return call_ret.*; }  // 37
is_item_disabled :: (main: *NativeMenu, rid: RID, idx: int) -> bool { call_ret := cast(*bool) sys_call("NativeMenu", "is_item_disabled", 3120086654, bool, main.p_object, rid, idx); return call_ret.*; }  // 38
is_item_hidden :: (main: *NativeMenu, rid: RID, idx: int) -> bool { call_ret := cast(*bool) sys_call("NativeMenu", "is_item_hidden", 3120086654, bool, main.p_object, rid, idx); return call_ret.*; }  // 39
get_item_tooltip :: (main: *NativeMenu, rid: RID, idx: int) -> gstring { call_ret := cast(*gstring) sys_call("NativeMenu", "get_item_tooltip", 1464764419, gstring, main.p_object, rid, idx); return call_ret.*; }  // 40
get_item_state :: (main: *NativeMenu, rid: RID, idx: int) -> int { call_ret := cast(*int) sys_call("NativeMenu", "get_item_state", 1120910005, int, main.p_object, rid, idx); return call_ret.*; }  // 41
get_item_max_states :: (main: *NativeMenu, rid: RID, idx: int) -> int { call_ret := cast(*int) sys_call("NativeMenu", "get_item_max_states", 1120910005, int, main.p_object, rid, idx); return call_ret.*; }  // 42
get_item_icon :: (main: *NativeMenu, rid: RID, idx: int) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("NativeMenu", "get_item_icon", 3391850701, Texture2D, main.p_object, rid, idx); return call_ret; }  // 43
get_item_indentation_level :: (main: *NativeMenu, rid: RID, idx: int) -> int { call_ret := cast(*int) sys_call("NativeMenu", "get_item_indentation_level", 1120910005, int, main.p_object, rid, idx); return call_ret.*; }  // 44
set_item_checked :: (main: *NativeMenu, rid: RID, idx: int, checked: bool) { sys_call("NativeMenu", "set_item_checked", 2658558584, Nil, main.p_object, rid, idx, checked);  }  // 45
set_item_checkable :: (main: *NativeMenu, rid: RID, idx: int, checkable: bool) { sys_call("NativeMenu", "set_item_checkable", 2658558584, Nil, main.p_object, rid, idx, checkable);  }  // 46
set_item_radio_checkable :: (main: *NativeMenu, rid: RID, idx: int, checkable: bool) { sys_call("NativeMenu", "set_item_radio_checkable", 2658558584, Nil, main.p_object, rid, idx, checkable);  }  // 47
set_item_callback :: (main: *NativeMenu, rid: RID, idx: int, callback: Callable) { sys_call("NativeMenu", "set_item_callback", 2779810226, Nil, main.p_object, rid, idx, callback);  }  // 48
set_item_hover_callbacks :: (main: *NativeMenu, rid: RID, idx: int, callback: Callable) { sys_call("NativeMenu", "set_item_hover_callbacks", 2779810226, Nil, main.p_object, rid, idx, callback);  }  // 49
set_item_key_callback :: (main: *NativeMenu, rid: RID, idx: int, key_callback: Callable) { sys_call("NativeMenu", "set_item_key_callback", 2779810226, Nil, main.p_object, rid, idx, key_callback);  }  // 50
set_item_tag :: (main: *NativeMenu, rid: RID, idx: int, tag: Variant) { sys_call("NativeMenu", "set_item_tag", 2706844827, Nil, main.p_object, rid, idx, tag);  }  // 51
set_item_text :: (main: *NativeMenu, rid: RID, idx: int, text: string) { sys_call("NativeMenu", "set_item_text", 4153150897, Nil, main.p_object, rid, idx, text);  }  // 52
set_item_submenu :: (main: *NativeMenu, rid: RID, idx: int, submenu_rid: RID) { sys_call("NativeMenu", "set_item_submenu", 2310537182, Nil, main.p_object, rid, idx, submenu_rid);  }  // 53
set_item_accelerator :: (main: *NativeMenu, rid: RID, idx: int, keycode: Key) { sys_call("NativeMenu", "set_item_accelerator", 786300043, Nil, main.p_object, rid, idx, keycode);  }  // 54
set_item_disabled :: (main: *NativeMenu, rid: RID, idx: int, disabled: bool) { sys_call("NativeMenu", "set_item_disabled", 2658558584, Nil, main.p_object, rid, idx, disabled);  }  // 55
set_item_hidden :: (main: *NativeMenu, rid: RID, idx: int, hidden: bool) { sys_call("NativeMenu", "set_item_hidden", 2658558584, Nil, main.p_object, rid, idx, hidden);  }  // 56
set_item_tooltip :: (main: *NativeMenu, rid: RID, idx: int, tooltip: string) { sys_call("NativeMenu", "set_item_tooltip", 4153150897, Nil, main.p_object, rid, idx, tooltip);  }  // 57
set_item_state :: (main: *NativeMenu, rid: RID, idx: int, state: int) { sys_call("NativeMenu", "set_item_state", 4288446313, Nil, main.p_object, rid, idx, state);  }  // 58
set_item_max_states :: (main: *NativeMenu, rid: RID, idx: int, max_states: int) { sys_call("NativeMenu", "set_item_max_states", 4288446313, Nil, main.p_object, rid, idx, max_states);  }  // 59
set_item_icon :: (main: *NativeMenu, rid: RID, idx: int, icon: Texture2D) { sys_call("NativeMenu", "set_item_icon", 1388763257, Nil, main.p_object, rid, idx, icon);  }  // 60
set_item_indentation_level :: (main: *NativeMenu, rid: RID, idx: int, level: int) { sys_call("NativeMenu", "set_item_indentation_level", 4288446313, Nil, main.p_object, rid, idx, level);  }  // 61
get_item_count :: (main: *NativeMenu, rid: RID) -> int { call_ret := cast(*int) sys_call("NativeMenu", "get_item_count", 2198884583, int, main.p_object, rid); return call_ret.*; }  // 62
is_system_menu :: (main: *NativeMenu, rid: RID) -> bool { call_ret := cast(*bool) sys_call("NativeMenu", "is_system_menu", 4155700596, bool, main.p_object, rid); return call_ret.*; }  // 63
remove_item :: (main: *NativeMenu, rid: RID, idx: int) { sys_call("NativeMenu", "remove_item", 3411492887, Nil, main.p_object, rid, idx);  }  // 64
clear :: (main: *NativeMenu, rid: RID) { sys_call("NativeMenu", "clear", 2722037293, Nil, main.p_object, rid);  }  // 65

get_rid :: (main: *NavigationAgent2D) -> RID { call_ret := cast(*RID) sys_call("NavigationAgent2D", "get_rid", 2944877500, RID, main.p_object); return call_ret.*; }  // 0
set_avoidance_enabled :: (main: *NavigationAgent2D, enabled: bool) { sys_call("NavigationAgent2D", "set_avoidance_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 1
get_avoidance_enabled :: (main: *NavigationAgent2D) -> bool { call_ret := cast(*bool) sys_call("NavigationAgent2D", "get_avoidance_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 2
set_path_desired_distance :: (main: *NavigationAgent2D, desired_distance: float) { sys_call("NavigationAgent2D", "set_path_desired_distance", 373806689, Nil, main.p_object, desired_distance);  }  // 3
get_path_desired_distance :: (main: *NavigationAgent2D) -> float { call_ret := cast(*float) sys_call("NavigationAgent2D", "get_path_desired_distance", 1740695150, float, main.p_object); return call_ret.*; }  // 4
set_target_desired_distance :: (main: *NavigationAgent2D, desired_distance: float) { sys_call("NavigationAgent2D", "set_target_desired_distance", 373806689, Nil, main.p_object, desired_distance);  }  // 5
get_target_desired_distance :: (main: *NavigationAgent2D) -> float { call_ret := cast(*float) sys_call("NavigationAgent2D", "get_target_desired_distance", 1740695150, float, main.p_object); return call_ret.*; }  // 6
set_radius :: (main: *NavigationAgent2D, radius: float) { sys_call("NavigationAgent2D", "set_radius", 373806689, Nil, main.p_object, radius);  }  // 7
get_radius :: (main: *NavigationAgent2D) -> float { call_ret := cast(*float) sys_call("NavigationAgent2D", "get_radius", 1740695150, float, main.p_object); return call_ret.*; }  // 8
set_neighbor_distance :: (main: *NavigationAgent2D, neighbor_distance: float) { sys_call("NavigationAgent2D", "set_neighbor_distance", 373806689, Nil, main.p_object, neighbor_distance);  }  // 9
get_neighbor_distance :: (main: *NavigationAgent2D) -> float { call_ret := cast(*float) sys_call("NavigationAgent2D", "get_neighbor_distance", 1740695150, float, main.p_object); return call_ret.*; }  // 10
set_max_neighbors :: (main: *NavigationAgent2D, max_neighbors: int) { sys_call("NavigationAgent2D", "set_max_neighbors", 1286410249, Nil, main.p_object, max_neighbors);  }  // 11
get_max_neighbors :: (main: *NavigationAgent2D) -> int { call_ret := cast(*int) sys_call("NavigationAgent2D", "get_max_neighbors", 3905245786, int, main.p_object); return call_ret.*; }  // 12
set_time_horizon_agents :: (main: *NavigationAgent2D, time_horizon: float) { sys_call("NavigationAgent2D", "set_time_horizon_agents", 373806689, Nil, main.p_object, time_horizon);  }  // 13
get_time_horizon_agents :: (main: *NavigationAgent2D) -> float { call_ret := cast(*float) sys_call("NavigationAgent2D", "get_time_horizon_agents", 1740695150, float, main.p_object); return call_ret.*; }  // 14
set_time_horizon_obstacles :: (main: *NavigationAgent2D, time_horizon: float) { sys_call("NavigationAgent2D", "set_time_horizon_obstacles", 373806689, Nil, main.p_object, time_horizon);  }  // 15
get_time_horizon_obstacles :: (main: *NavigationAgent2D) -> float { call_ret := cast(*float) sys_call("NavigationAgent2D", "get_time_horizon_obstacles", 1740695150, float, main.p_object); return call_ret.*; }  // 16
set_max_speed :: (main: *NavigationAgent2D, max_speed: float) { sys_call("NavigationAgent2D", "set_max_speed", 373806689, Nil, main.p_object, max_speed);  }  // 17
get_max_speed :: (main: *NavigationAgent2D) -> float { call_ret := cast(*float) sys_call("NavigationAgent2D", "get_max_speed", 1740695150, float, main.p_object); return call_ret.*; }  // 18
set_path_max_distance :: (main: *NavigationAgent2D, max_speed: float) { sys_call("NavigationAgent2D", "set_path_max_distance", 373806689, Nil, main.p_object, max_speed);  }  // 19
get_path_max_distance :: (main: *NavigationAgent2D) -> float { call_ret := cast(*float) sys_call("NavigationAgent2D", "get_path_max_distance", 191475506, float, main.p_object); return call_ret.*; }  // 20
set_navigation_layers :: (main: *NavigationAgent2D, navigation_layers: int) { sys_call("NavigationAgent2D", "set_navigation_layers", 1286410249, Nil, main.p_object, navigation_layers);  }  // 21
get_navigation_layers :: (main: *NavigationAgent2D) -> int { call_ret := cast(*int) sys_call("NavigationAgent2D", "get_navigation_layers", 3905245786, int, main.p_object); return call_ret.*; }  // 22
set_navigation_layer_value :: (main: *NavigationAgent2D, layer_number: int, value: bool) { sys_call("NavigationAgent2D", "set_navigation_layer_value", 300928843, Nil, main.p_object, layer_number, value);  }  // 23
get_navigation_layer_value :: (main: *NavigationAgent2D, layer_number: int) -> bool { call_ret := cast(*bool) sys_call("NavigationAgent2D", "get_navigation_layer_value", 1116898809, bool, main.p_object, layer_number); return call_ret.*; }  // 24
set_pathfinding_algorithm :: (main: *NavigationAgent2D, pathfinding_algorithm: NavigationPathQueryParameters2D.PathfindingAlgorithm) { sys_call("NavigationAgent2D", "set_pathfinding_algorithm", 2783519915, Nil, main.p_object, pathfinding_algorithm);  }  // 25
get_pathfinding_algorithm :: (main: *NavigationAgent2D) -> NavigationPathQueryParameters2D.PathfindingAlgorithm { call_ret := cast(*NavigationPathQueryParameters2D.PathfindingAlgorithm) sys_call("NavigationAgent2D", "get_pathfinding_algorithm", 3000421146, NavigationPathQueryParameters2D.PathfindingAlgorithm, main.p_object); return call_ret.*; }  // 26
set_path_postprocessing :: (main: *NavigationAgent2D, path_postprocessing: NavigationPathQueryParameters2D.PathPostProcessing) { sys_call("NavigationAgent2D", "set_path_postprocessing", 2864409082, Nil, main.p_object, path_postprocessing);  }  // 27
get_path_postprocessing :: (main: *NavigationAgent2D) -> NavigationPathQueryParameters2D.PathPostProcessing { call_ret := cast(*NavigationPathQueryParameters2D.PathPostProcessing) sys_call("NavigationAgent2D", "get_path_postprocessing", 3798118993, NavigationPathQueryParameters2D.PathPostProcessing, main.p_object); return call_ret.*; }  // 28
set_path_metadata_flags :: (main: *NavigationAgent2D, flags: NavigationPathQueryParameters2D.PathMetadataFlags) { sys_call("NavigationAgent2D", "set_path_metadata_flags", 24274129, Nil, main.p_object, flags);  }  // 29
get_path_metadata_flags :: (main: *NavigationAgent2D) -> NavigationPathQueryParameters2D.PathMetadataFlags { call_ret := cast(*NavigationPathQueryParameters2D.PathMetadataFlags) sys_call("NavigationAgent2D", "get_path_metadata_flags", 488152976, NavigationPathQueryParameters2D.PathMetadataFlags, main.p_object); return call_ret.*; }  // 30
set_navigation_map :: (main: *NavigationAgent2D, navigation_map: RID) { sys_call("NavigationAgent2D", "set_navigation_map", 2722037293, Nil, main.p_object, navigation_map);  }  // 31
get_navigation_map :: (main: *NavigationAgent2D) -> RID { call_ret := cast(*RID) sys_call("NavigationAgent2D", "get_navigation_map", 2944877500, RID, main.p_object); return call_ret.*; }  // 32
set_target_position :: (main: *NavigationAgent2D, position: Vector2) { sys_call("NavigationAgent2D", "set_target_position", 743155724, Nil, main.p_object, position);  }  // 33
get_target_position :: (main: *NavigationAgent2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("NavigationAgent2D", "get_target_position", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 34
set_simplify_path :: (main: *NavigationAgent2D, enabled: bool) { sys_call("NavigationAgent2D", "set_simplify_path", 2586408642, Nil, main.p_object, enabled);  }  // 35
get_simplify_path :: (main: *NavigationAgent2D) -> bool { call_ret := cast(*bool) sys_call("NavigationAgent2D", "get_simplify_path", 36873697, bool, main.p_object); return call_ret.*; }  // 36
set_simplify_epsilon :: (main: *NavigationAgent2D, epsilon: float) { sys_call("NavigationAgent2D", "set_simplify_epsilon", 373806689, Nil, main.p_object, epsilon);  }  // 37
get_simplify_epsilon :: (main: *NavigationAgent2D) -> float { call_ret := cast(*float) sys_call("NavigationAgent2D", "get_simplify_epsilon", 1740695150, float, main.p_object); return call_ret.*; }  // 38
get_next_path_position :: (main: *NavigationAgent2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("NavigationAgent2D", "get_next_path_position", 1497962370, Vector2, main.p_object); return call_ret.*; }  // 39
set_velocity_forced :: (main: *NavigationAgent2D, velocity: Vector2) { sys_call("NavigationAgent2D", "set_velocity_forced", 743155724, Nil, main.p_object, velocity);  }  // 40
set_velocity :: (main: *NavigationAgent2D, velocity: Vector2) { sys_call("NavigationAgent2D", "set_velocity", 743155724, Nil, main.p_object, velocity);  }  // 41
get_velocity :: (main: *NavigationAgent2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("NavigationAgent2D", "get_velocity", 1497962370, Vector2, main.p_object); return call_ret.*; }  // 42
distance_to_target :: (main: *NavigationAgent2D) -> float { call_ret := cast(*float) sys_call("NavigationAgent2D", "distance_to_target", 1740695150, float, main.p_object); return call_ret.*; }  // 43
get_current_navigation_result :: (main: *NavigationAgent2D) -> *NavigationPathQueryResult2D { call_ret := cast(*NavigationPathQueryResult2D) sys_call("NavigationAgent2D", "get_current_navigation_result", 166799483, NavigationPathQueryResult2D, main.p_object); return call_ret; }  // 44
get_current_navigation_path :: (main: *NavigationAgent2D) -> PackedVector2Array { call_ret := cast(*PackedVector2Array) sys_call("NavigationAgent2D", "get_current_navigation_path", 2961356807, PackedVector2Array, main.p_object); return call_ret.*; }  // 45
get_current_navigation_path_index :: (main: *NavigationAgent2D) -> int { call_ret := cast(*int) sys_call("NavigationAgent2D", "get_current_navigation_path_index", 3905245786, int, main.p_object); return call_ret.*; }  // 46
is_target_reached :: (main: *NavigationAgent2D) -> bool { call_ret := cast(*bool) sys_call("NavigationAgent2D", "is_target_reached", 36873697, bool, main.p_object); return call_ret.*; }  // 47
is_target_reachable :: (main: *NavigationAgent2D) -> bool { call_ret := cast(*bool) sys_call("NavigationAgent2D", "is_target_reachable", 2240911060, bool, main.p_object); return call_ret.*; }  // 48
is_navigation_finished :: (main: *NavigationAgent2D) -> bool { call_ret := cast(*bool) sys_call("NavigationAgent2D", "is_navigation_finished", 2240911060, bool, main.p_object); return call_ret.*; }  // 49
get_final_position :: (main: *NavigationAgent2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("NavigationAgent2D", "get_final_position", 1497962370, Vector2, main.p_object); return call_ret.*; }  // 50
set_avoidance_layers :: (main: *NavigationAgent2D, layers: int) { sys_call("NavigationAgent2D", "set_avoidance_layers", 1286410249, Nil, main.p_object, layers);  }  // 51
get_avoidance_layers :: (main: *NavigationAgent2D) -> int { call_ret := cast(*int) sys_call("NavigationAgent2D", "get_avoidance_layers", 3905245786, int, main.p_object); return call_ret.*; }  // 52
set_avoidance_mask :: (main: *NavigationAgent2D, mask: int) { sys_call("NavigationAgent2D", "set_avoidance_mask", 1286410249, Nil, main.p_object, mask);  }  // 53
get_avoidance_mask :: (main: *NavigationAgent2D) -> int { call_ret := cast(*int) sys_call("NavigationAgent2D", "get_avoidance_mask", 3905245786, int, main.p_object); return call_ret.*; }  // 54
set_avoidance_layer_value :: (main: *NavigationAgent2D, layer_number: int, value: bool) { sys_call("NavigationAgent2D", "set_avoidance_layer_value", 300928843, Nil, main.p_object, layer_number, value);  }  // 55
get_avoidance_layer_value :: (main: *NavigationAgent2D, layer_number: int) -> bool { call_ret := cast(*bool) sys_call("NavigationAgent2D", "get_avoidance_layer_value", 1116898809, bool, main.p_object, layer_number); return call_ret.*; }  // 56
set_avoidance_mask_value :: (main: *NavigationAgent2D, mask_number: int, value: bool) { sys_call("NavigationAgent2D", "set_avoidance_mask_value", 300928843, Nil, main.p_object, mask_number, value);  }  // 57
get_avoidance_mask_value :: (main: *NavigationAgent2D, mask_number: int) -> bool { call_ret := cast(*bool) sys_call("NavigationAgent2D", "get_avoidance_mask_value", 1116898809, bool, main.p_object, mask_number); return call_ret.*; }  // 58
set_avoidance_priority :: (main: *NavigationAgent2D, priority: float) { sys_call("NavigationAgent2D", "set_avoidance_priority", 373806689, Nil, main.p_object, priority);  }  // 59
get_avoidance_priority :: (main: *NavigationAgent2D) -> float { call_ret := cast(*float) sys_call("NavigationAgent2D", "get_avoidance_priority", 1740695150, float, main.p_object); return call_ret.*; }  // 60
set_debug_enabled :: (main: *NavigationAgent2D, enabled: bool) { sys_call("NavigationAgent2D", "set_debug_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 61
get_debug_enabled :: (main: *NavigationAgent2D) -> bool { call_ret := cast(*bool) sys_call("NavigationAgent2D", "get_debug_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 62
set_debug_use_custom :: (main: *NavigationAgent2D, enabled: bool) { sys_call("NavigationAgent2D", "set_debug_use_custom", 2586408642, Nil, main.p_object, enabled);  }  // 63
get_debug_use_custom :: (main: *NavigationAgent2D) -> bool { call_ret := cast(*bool) sys_call("NavigationAgent2D", "get_debug_use_custom", 36873697, bool, main.p_object); return call_ret.*; }  // 64
set_debug_path_custom_color :: (main: *NavigationAgent2D, color: Color) { sys_call("NavigationAgent2D", "set_debug_path_custom_color", 2920490490, Nil, main.p_object, color);  }  // 65
get_debug_path_custom_color :: (main: *NavigationAgent2D) -> Color { call_ret := cast(*Color) sys_call("NavigationAgent2D", "get_debug_path_custom_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 66
set_debug_path_custom_point_size :: (main: *NavigationAgent2D, point_size: float) { sys_call("NavigationAgent2D", "set_debug_path_custom_point_size", 373806689, Nil, main.p_object, point_size);  }  // 67
get_debug_path_custom_point_size :: (main: *NavigationAgent2D) -> float { call_ret := cast(*float) sys_call("NavigationAgent2D", "get_debug_path_custom_point_size", 1740695150, float, main.p_object); return call_ret.*; }  // 68
set_debug_path_custom_line_width :: (main: *NavigationAgent2D, line_width: float) { sys_call("NavigationAgent2D", "set_debug_path_custom_line_width", 373806689, Nil, main.p_object, line_width);  }  // 69
get_debug_path_custom_line_width :: (main: *NavigationAgent2D) -> float { call_ret := cast(*float) sys_call("NavigationAgent2D", "get_debug_path_custom_line_width", 1740695150, float, main.p_object); return call_ret.*; }  // 70

get_rid :: (main: *NavigationAgent3D) -> RID { call_ret := cast(*RID) sys_call("NavigationAgent3D", "get_rid", 2944877500, RID, main.p_object); return call_ret.*; }  // 0
set_avoidance_enabled :: (main: *NavigationAgent3D, enabled: bool) { sys_call("NavigationAgent3D", "set_avoidance_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 1
get_avoidance_enabled :: (main: *NavigationAgent3D) -> bool { call_ret := cast(*bool) sys_call("NavigationAgent3D", "get_avoidance_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 2
set_path_desired_distance :: (main: *NavigationAgent3D, desired_distance: float) { sys_call("NavigationAgent3D", "set_path_desired_distance", 373806689, Nil, main.p_object, desired_distance);  }  // 3
get_path_desired_distance :: (main: *NavigationAgent3D) -> float { call_ret := cast(*float) sys_call("NavigationAgent3D", "get_path_desired_distance", 1740695150, float, main.p_object); return call_ret.*; }  // 4
set_target_desired_distance :: (main: *NavigationAgent3D, desired_distance: float) { sys_call("NavigationAgent3D", "set_target_desired_distance", 373806689, Nil, main.p_object, desired_distance);  }  // 5
get_target_desired_distance :: (main: *NavigationAgent3D) -> float { call_ret := cast(*float) sys_call("NavigationAgent3D", "get_target_desired_distance", 1740695150, float, main.p_object); return call_ret.*; }  // 6
set_radius :: (main: *NavigationAgent3D, radius: float) { sys_call("NavigationAgent3D", "set_radius", 373806689, Nil, main.p_object, radius);  }  // 7
get_radius :: (main: *NavigationAgent3D) -> float { call_ret := cast(*float) sys_call("NavigationAgent3D", "get_radius", 1740695150, float, main.p_object); return call_ret.*; }  // 8
set_height :: (main: *NavigationAgent3D, height: float) { sys_call("NavigationAgent3D", "set_height", 373806689, Nil, main.p_object, height);  }  // 9
get_height :: (main: *NavigationAgent3D) -> float { call_ret := cast(*float) sys_call("NavigationAgent3D", "get_height", 1740695150, float, main.p_object); return call_ret.*; }  // 10
set_path_height_offset :: (main: *NavigationAgent3D, path_height_offset: float) { sys_call("NavigationAgent3D", "set_path_height_offset", 373806689, Nil, main.p_object, path_height_offset);  }  // 11
get_path_height_offset :: (main: *NavigationAgent3D) -> float { call_ret := cast(*float) sys_call("NavigationAgent3D", "get_path_height_offset", 1740695150, float, main.p_object); return call_ret.*; }  // 12
set_use_3d_avoidance :: (main: *NavigationAgent3D, enabled: bool) { sys_call("NavigationAgent3D", "set_use_3d_avoidance", 2586408642, Nil, main.p_object, enabled);  }  // 13
get_use_3d_avoidance :: (main: *NavigationAgent3D) -> bool { call_ret := cast(*bool) sys_call("NavigationAgent3D", "get_use_3d_avoidance", 36873697, bool, main.p_object); return call_ret.*; }  // 14
set_keep_y_velocity :: (main: *NavigationAgent3D, enabled: bool) { sys_call("NavigationAgent3D", "set_keep_y_velocity", 2586408642, Nil, main.p_object, enabled);  }  // 15
get_keep_y_velocity :: (main: *NavigationAgent3D) -> bool { call_ret := cast(*bool) sys_call("NavigationAgent3D", "get_keep_y_velocity", 36873697, bool, main.p_object); return call_ret.*; }  // 16
set_neighbor_distance :: (main: *NavigationAgent3D, neighbor_distance: float) { sys_call("NavigationAgent3D", "set_neighbor_distance", 373806689, Nil, main.p_object, neighbor_distance);  }  // 17
get_neighbor_distance :: (main: *NavigationAgent3D) -> float { call_ret := cast(*float) sys_call("NavigationAgent3D", "get_neighbor_distance", 1740695150, float, main.p_object); return call_ret.*; }  // 18
set_max_neighbors :: (main: *NavigationAgent3D, max_neighbors: int) { sys_call("NavigationAgent3D", "set_max_neighbors", 1286410249, Nil, main.p_object, max_neighbors);  }  // 19
get_max_neighbors :: (main: *NavigationAgent3D) -> int { call_ret := cast(*int) sys_call("NavigationAgent3D", "get_max_neighbors", 3905245786, int, main.p_object); return call_ret.*; }  // 20
set_time_horizon_agents :: (main: *NavigationAgent3D, time_horizon: float) { sys_call("NavigationAgent3D", "set_time_horizon_agents", 373806689, Nil, main.p_object, time_horizon);  }  // 21
get_time_horizon_agents :: (main: *NavigationAgent3D) -> float { call_ret := cast(*float) sys_call("NavigationAgent3D", "get_time_horizon_agents", 1740695150, float, main.p_object); return call_ret.*; }  // 22
set_time_horizon_obstacles :: (main: *NavigationAgent3D, time_horizon: float) { sys_call("NavigationAgent3D", "set_time_horizon_obstacles", 373806689, Nil, main.p_object, time_horizon);  }  // 23
get_time_horizon_obstacles :: (main: *NavigationAgent3D) -> float { call_ret := cast(*float) sys_call("NavigationAgent3D", "get_time_horizon_obstacles", 1740695150, float, main.p_object); return call_ret.*; }  // 24
set_max_speed :: (main: *NavigationAgent3D, max_speed: float) { sys_call("NavigationAgent3D", "set_max_speed", 373806689, Nil, main.p_object, max_speed);  }  // 25
get_max_speed :: (main: *NavigationAgent3D) -> float { call_ret := cast(*float) sys_call("NavigationAgent3D", "get_max_speed", 1740695150, float, main.p_object); return call_ret.*; }  // 26
set_path_max_distance :: (main: *NavigationAgent3D, max_speed: float) { sys_call("NavigationAgent3D", "set_path_max_distance", 373806689, Nil, main.p_object, max_speed);  }  // 27
get_path_max_distance :: (main: *NavigationAgent3D) -> float { call_ret := cast(*float) sys_call("NavigationAgent3D", "get_path_max_distance", 191475506, float, main.p_object); return call_ret.*; }  // 28
set_navigation_layers :: (main: *NavigationAgent3D, navigation_layers: int) { sys_call("NavigationAgent3D", "set_navigation_layers", 1286410249, Nil, main.p_object, navigation_layers);  }  // 29
get_navigation_layers :: (main: *NavigationAgent3D) -> int { call_ret := cast(*int) sys_call("NavigationAgent3D", "get_navigation_layers", 3905245786, int, main.p_object); return call_ret.*; }  // 30
set_navigation_layer_value :: (main: *NavigationAgent3D, layer_number: int, value: bool) { sys_call("NavigationAgent3D", "set_navigation_layer_value", 300928843, Nil, main.p_object, layer_number, value);  }  // 31
get_navigation_layer_value :: (main: *NavigationAgent3D, layer_number: int) -> bool { call_ret := cast(*bool) sys_call("NavigationAgent3D", "get_navigation_layer_value", 1116898809, bool, main.p_object, layer_number); return call_ret.*; }  // 32
set_pathfinding_algorithm :: (main: *NavigationAgent3D, pathfinding_algorithm: NavigationPathQueryParameters3D.PathfindingAlgorithm) { sys_call("NavigationAgent3D", "set_pathfinding_algorithm", 394560454, Nil, main.p_object, pathfinding_algorithm);  }  // 33
get_pathfinding_algorithm :: (main: *NavigationAgent3D) -> NavigationPathQueryParameters3D.PathfindingAlgorithm { call_ret := cast(*NavigationPathQueryParameters3D.PathfindingAlgorithm) sys_call("NavigationAgent3D", "get_pathfinding_algorithm", 3398491350, NavigationPathQueryParameters3D.PathfindingAlgorithm, main.p_object); return call_ret.*; }  // 34
set_path_postprocessing :: (main: *NavigationAgent3D, path_postprocessing: NavigationPathQueryParameters3D.PathPostProcessing) { sys_call("NavigationAgent3D", "set_path_postprocessing", 2267362344, Nil, main.p_object, path_postprocessing);  }  // 35
get_path_postprocessing :: (main: *NavigationAgent3D) -> NavigationPathQueryParameters3D.PathPostProcessing { call_ret := cast(*NavigationPathQueryParameters3D.PathPostProcessing) sys_call("NavigationAgent3D", "get_path_postprocessing", 3883858360, NavigationPathQueryParameters3D.PathPostProcessing, main.p_object); return call_ret.*; }  // 36
set_path_metadata_flags :: (main: *NavigationAgent3D, flags: NavigationPathQueryParameters3D.PathMetadataFlags) { sys_call("NavigationAgent3D", "set_path_metadata_flags", 2713846708, Nil, main.p_object, flags);  }  // 37
get_path_metadata_flags :: (main: *NavigationAgent3D) -> NavigationPathQueryParameters3D.PathMetadataFlags { call_ret := cast(*NavigationPathQueryParameters3D.PathMetadataFlags) sys_call("NavigationAgent3D", "get_path_metadata_flags", 1582332802, NavigationPathQueryParameters3D.PathMetadataFlags, main.p_object); return call_ret.*; }  // 38
set_navigation_map :: (main: *NavigationAgent3D, navigation_map: RID) { sys_call("NavigationAgent3D", "set_navigation_map", 2722037293, Nil, main.p_object, navigation_map);  }  // 39
get_navigation_map :: (main: *NavigationAgent3D) -> RID { call_ret := cast(*RID) sys_call("NavigationAgent3D", "get_navigation_map", 2944877500, RID, main.p_object); return call_ret.*; }  // 40
set_target_position :: (main: *NavigationAgent3D, position: Vector3) { sys_call("NavigationAgent3D", "set_target_position", 3460891852, Nil, main.p_object, position);  }  // 41
get_target_position :: (main: *NavigationAgent3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("NavigationAgent3D", "get_target_position", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 42
set_simplify_path :: (main: *NavigationAgent3D, enabled: bool) { sys_call("NavigationAgent3D", "set_simplify_path", 2586408642, Nil, main.p_object, enabled);  }  // 43
get_simplify_path :: (main: *NavigationAgent3D) -> bool { call_ret := cast(*bool) sys_call("NavigationAgent3D", "get_simplify_path", 36873697, bool, main.p_object); return call_ret.*; }  // 44
set_simplify_epsilon :: (main: *NavigationAgent3D, epsilon: float) { sys_call("NavigationAgent3D", "set_simplify_epsilon", 373806689, Nil, main.p_object, epsilon);  }  // 45
get_simplify_epsilon :: (main: *NavigationAgent3D) -> float { call_ret := cast(*float) sys_call("NavigationAgent3D", "get_simplify_epsilon", 1740695150, float, main.p_object); return call_ret.*; }  // 46
get_next_path_position :: (main: *NavigationAgent3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("NavigationAgent3D", "get_next_path_position", 3783033775, Vector3, main.p_object); return call_ret.*; }  // 47
set_velocity_forced :: (main: *NavigationAgent3D, velocity: Vector3) { sys_call("NavigationAgent3D", "set_velocity_forced", 3460891852, Nil, main.p_object, velocity);  }  // 48
set_velocity :: (main: *NavigationAgent3D, velocity: Vector3) { sys_call("NavigationAgent3D", "set_velocity", 3460891852, Nil, main.p_object, velocity);  }  // 49
get_velocity :: (main: *NavigationAgent3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("NavigationAgent3D", "get_velocity", 3783033775, Vector3, main.p_object); return call_ret.*; }  // 50
distance_to_target :: (main: *NavigationAgent3D) -> float { call_ret := cast(*float) sys_call("NavigationAgent3D", "distance_to_target", 1740695150, float, main.p_object); return call_ret.*; }  // 51
get_current_navigation_result :: (main: *NavigationAgent3D) -> *NavigationPathQueryResult3D { call_ret := cast(*NavigationPathQueryResult3D) sys_call("NavigationAgent3D", "get_current_navigation_result", 728825684, NavigationPathQueryResult3D, main.p_object); return call_ret; }  // 52
get_current_navigation_path :: (main: *NavigationAgent3D) -> PackedVector3Array { call_ret := cast(*PackedVector3Array) sys_call("NavigationAgent3D", "get_current_navigation_path", 497664490, PackedVector3Array, main.p_object); return call_ret.*; }  // 53
get_current_navigation_path_index :: (main: *NavigationAgent3D) -> int { call_ret := cast(*int) sys_call("NavigationAgent3D", "get_current_navigation_path_index", 3905245786, int, main.p_object); return call_ret.*; }  // 54
is_target_reached :: (main: *NavigationAgent3D) -> bool { call_ret := cast(*bool) sys_call("NavigationAgent3D", "is_target_reached", 36873697, bool, main.p_object); return call_ret.*; }  // 55
is_target_reachable :: (main: *NavigationAgent3D) -> bool { call_ret := cast(*bool) sys_call("NavigationAgent3D", "is_target_reachable", 2240911060, bool, main.p_object); return call_ret.*; }  // 56
is_navigation_finished :: (main: *NavigationAgent3D) -> bool { call_ret := cast(*bool) sys_call("NavigationAgent3D", "is_navigation_finished", 2240911060, bool, main.p_object); return call_ret.*; }  // 57
get_final_position :: (main: *NavigationAgent3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("NavigationAgent3D", "get_final_position", 3783033775, Vector3, main.p_object); return call_ret.*; }  // 58
set_avoidance_layers :: (main: *NavigationAgent3D, layers: int) { sys_call("NavigationAgent3D", "set_avoidance_layers", 1286410249, Nil, main.p_object, layers);  }  // 59
get_avoidance_layers :: (main: *NavigationAgent3D) -> int { call_ret := cast(*int) sys_call("NavigationAgent3D", "get_avoidance_layers", 3905245786, int, main.p_object); return call_ret.*; }  // 60
set_avoidance_mask :: (main: *NavigationAgent3D, mask: int) { sys_call("NavigationAgent3D", "set_avoidance_mask", 1286410249, Nil, main.p_object, mask);  }  // 61
get_avoidance_mask :: (main: *NavigationAgent3D) -> int { call_ret := cast(*int) sys_call("NavigationAgent3D", "get_avoidance_mask", 3905245786, int, main.p_object); return call_ret.*; }  // 62
set_avoidance_layer_value :: (main: *NavigationAgent3D, layer_number: int, value: bool) { sys_call("NavigationAgent3D", "set_avoidance_layer_value", 300928843, Nil, main.p_object, layer_number, value);  }  // 63
get_avoidance_layer_value :: (main: *NavigationAgent3D, layer_number: int) -> bool { call_ret := cast(*bool) sys_call("NavigationAgent3D", "get_avoidance_layer_value", 1116898809, bool, main.p_object, layer_number); return call_ret.*; }  // 64
set_avoidance_mask_value :: (main: *NavigationAgent3D, mask_number: int, value: bool) { sys_call("NavigationAgent3D", "set_avoidance_mask_value", 300928843, Nil, main.p_object, mask_number, value);  }  // 65
get_avoidance_mask_value :: (main: *NavigationAgent3D, mask_number: int) -> bool { call_ret := cast(*bool) sys_call("NavigationAgent3D", "get_avoidance_mask_value", 1116898809, bool, main.p_object, mask_number); return call_ret.*; }  // 66
set_avoidance_priority :: (main: *NavigationAgent3D, priority: float) { sys_call("NavigationAgent3D", "set_avoidance_priority", 373806689, Nil, main.p_object, priority);  }  // 67
get_avoidance_priority :: (main: *NavigationAgent3D) -> float { call_ret := cast(*float) sys_call("NavigationAgent3D", "get_avoidance_priority", 1740695150, float, main.p_object); return call_ret.*; }  // 68
set_debug_enabled :: (main: *NavigationAgent3D, enabled: bool) { sys_call("NavigationAgent3D", "set_debug_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 69
get_debug_enabled :: (main: *NavigationAgent3D) -> bool { call_ret := cast(*bool) sys_call("NavigationAgent3D", "get_debug_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 70
set_debug_use_custom :: (main: *NavigationAgent3D, enabled: bool) { sys_call("NavigationAgent3D", "set_debug_use_custom", 2586408642, Nil, main.p_object, enabled);  }  // 71
get_debug_use_custom :: (main: *NavigationAgent3D) -> bool { call_ret := cast(*bool) sys_call("NavigationAgent3D", "get_debug_use_custom", 36873697, bool, main.p_object); return call_ret.*; }  // 72
set_debug_path_custom_color :: (main: *NavigationAgent3D, color: Color) { sys_call("NavigationAgent3D", "set_debug_path_custom_color", 2920490490, Nil, main.p_object, color);  }  // 73
get_debug_path_custom_color :: (main: *NavigationAgent3D) -> Color { call_ret := cast(*Color) sys_call("NavigationAgent3D", "get_debug_path_custom_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 74
set_debug_path_custom_point_size :: (main: *NavigationAgent3D, point_size: float) { sys_call("NavigationAgent3D", "set_debug_path_custom_point_size", 373806689, Nil, main.p_object, point_size);  }  // 75
get_debug_path_custom_point_size :: (main: *NavigationAgent3D) -> float { call_ret := cast(*float) sys_call("NavigationAgent3D", "get_debug_path_custom_point_size", 1740695150, float, main.p_object); return call_ret.*; }  // 76

get_rid :: (main: *NavigationLink2D) -> RID { call_ret := cast(*RID) sys_call("NavigationLink2D", "get_rid", 2944877500, RID, main.p_object); return call_ret.*; }  // 0
set_enabled :: (main: *NavigationLink2D, enabled: bool) { sys_call("NavigationLink2D", "set_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 1
is_enabled :: (main: *NavigationLink2D) -> bool { call_ret := cast(*bool) sys_call("NavigationLink2D", "is_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 2
set_navigation_map :: (main: *NavigationLink2D, navigation_map: RID) { sys_call("NavigationLink2D", "set_navigation_map", 2722037293, Nil, main.p_object, navigation_map);  }  // 3
get_navigation_map :: (main: *NavigationLink2D) -> RID { call_ret := cast(*RID) sys_call("NavigationLink2D", "get_navigation_map", 2944877500, RID, main.p_object); return call_ret.*; }  // 4
set_bidirectional :: (main: *NavigationLink2D, bidirectional: bool) { sys_call("NavigationLink2D", "set_bidirectional", 2586408642, Nil, main.p_object, bidirectional);  }  // 5
is_bidirectional :: (main: *NavigationLink2D) -> bool { call_ret := cast(*bool) sys_call("NavigationLink2D", "is_bidirectional", 36873697, bool, main.p_object); return call_ret.*; }  // 6
set_navigation_layers :: (main: *NavigationLink2D, navigation_layers: int) { sys_call("NavigationLink2D", "set_navigation_layers", 1286410249, Nil, main.p_object, navigation_layers);  }  // 7
get_navigation_layers :: (main: *NavigationLink2D) -> int { call_ret := cast(*int) sys_call("NavigationLink2D", "get_navigation_layers", 3905245786, int, main.p_object); return call_ret.*; }  // 8
set_navigation_layer_value :: (main: *NavigationLink2D, layer_number: int, value: bool) { sys_call("NavigationLink2D", "set_navigation_layer_value", 300928843, Nil, main.p_object, layer_number, value);  }  // 9
get_navigation_layer_value :: (main: *NavigationLink2D, layer_number: int) -> bool { call_ret := cast(*bool) sys_call("NavigationLink2D", "get_navigation_layer_value", 1116898809, bool, main.p_object, layer_number); return call_ret.*; }  // 10
set_start_position :: (main: *NavigationLink2D, position: Vector2) { sys_call("NavigationLink2D", "set_start_position", 743155724, Nil, main.p_object, position);  }  // 11
get_start_position :: (main: *NavigationLink2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("NavigationLink2D", "get_start_position", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 12
set_end_position :: (main: *NavigationLink2D, position: Vector2) { sys_call("NavigationLink2D", "set_end_position", 743155724, Nil, main.p_object, position);  }  // 13
get_end_position :: (main: *NavigationLink2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("NavigationLink2D", "get_end_position", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 14
set_global_start_position :: (main: *NavigationLink2D, position: Vector2) { sys_call("NavigationLink2D", "set_global_start_position", 743155724, Nil, main.p_object, position);  }  // 15
get_global_start_position :: (main: *NavigationLink2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("NavigationLink2D", "get_global_start_position", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 16
set_global_end_position :: (main: *NavigationLink2D, position: Vector2) { sys_call("NavigationLink2D", "set_global_end_position", 743155724, Nil, main.p_object, position);  }  // 17
get_global_end_position :: (main: *NavigationLink2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("NavigationLink2D", "get_global_end_position", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 18
set_enter_cost :: (main: *NavigationLink2D, enter_cost: float) { sys_call("NavigationLink2D", "set_enter_cost", 373806689, Nil, main.p_object, enter_cost);  }  // 19
get_enter_cost :: (main: *NavigationLink2D) -> float { call_ret := cast(*float) sys_call("NavigationLink2D", "get_enter_cost", 1740695150, float, main.p_object); return call_ret.*; }  // 20
set_travel_cost :: (main: *NavigationLink2D, travel_cost: float) { sys_call("NavigationLink2D", "set_travel_cost", 373806689, Nil, main.p_object, travel_cost);  }  // 21
get_travel_cost :: (main: *NavigationLink2D) -> float { call_ret := cast(*float) sys_call("NavigationLink2D", "get_travel_cost", 1740695150, float, main.p_object); return call_ret.*; }  // 22

get_rid :: (main: *NavigationLink3D) -> RID { call_ret := cast(*RID) sys_call("NavigationLink3D", "get_rid", 2944877500, RID, main.p_object); return call_ret.*; }  // 0
set_enabled :: (main: *NavigationLink3D, enabled: bool) { sys_call("NavigationLink3D", "set_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 1
is_enabled :: (main: *NavigationLink3D) -> bool { call_ret := cast(*bool) sys_call("NavigationLink3D", "is_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 2
set_navigation_map :: (main: *NavigationLink3D, navigation_map: RID) { sys_call("NavigationLink3D", "set_navigation_map", 2722037293, Nil, main.p_object, navigation_map);  }  // 3
get_navigation_map :: (main: *NavigationLink3D) -> RID { call_ret := cast(*RID) sys_call("NavigationLink3D", "get_navigation_map", 2944877500, RID, main.p_object); return call_ret.*; }  // 4
set_bidirectional :: (main: *NavigationLink3D, bidirectional: bool) { sys_call("NavigationLink3D", "set_bidirectional", 2586408642, Nil, main.p_object, bidirectional);  }  // 5
is_bidirectional :: (main: *NavigationLink3D) -> bool { call_ret := cast(*bool) sys_call("NavigationLink3D", "is_bidirectional", 36873697, bool, main.p_object); return call_ret.*; }  // 6
set_navigation_layers :: (main: *NavigationLink3D, navigation_layers: int) { sys_call("NavigationLink3D", "set_navigation_layers", 1286410249, Nil, main.p_object, navigation_layers);  }  // 7
get_navigation_layers :: (main: *NavigationLink3D) -> int { call_ret := cast(*int) sys_call("NavigationLink3D", "get_navigation_layers", 3905245786, int, main.p_object); return call_ret.*; }  // 8
set_navigation_layer_value :: (main: *NavigationLink3D, layer_number: int, value: bool) { sys_call("NavigationLink3D", "set_navigation_layer_value", 300928843, Nil, main.p_object, layer_number, value);  }  // 9
get_navigation_layer_value :: (main: *NavigationLink3D, layer_number: int) -> bool { call_ret := cast(*bool) sys_call("NavigationLink3D", "get_navigation_layer_value", 1116898809, bool, main.p_object, layer_number); return call_ret.*; }  // 10
set_start_position :: (main: *NavigationLink3D, position: Vector3) { sys_call("NavigationLink3D", "set_start_position", 3460891852, Nil, main.p_object, position);  }  // 11
get_start_position :: (main: *NavigationLink3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("NavigationLink3D", "get_start_position", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 12
set_end_position :: (main: *NavigationLink3D, position: Vector3) { sys_call("NavigationLink3D", "set_end_position", 3460891852, Nil, main.p_object, position);  }  // 13
get_end_position :: (main: *NavigationLink3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("NavigationLink3D", "get_end_position", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 14
set_global_start_position :: (main: *NavigationLink3D, position: Vector3) { sys_call("NavigationLink3D", "set_global_start_position", 3460891852, Nil, main.p_object, position);  }  // 15
get_global_start_position :: (main: *NavigationLink3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("NavigationLink3D", "get_global_start_position", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 16
set_global_end_position :: (main: *NavigationLink3D, position: Vector3) { sys_call("NavigationLink3D", "set_global_end_position", 3460891852, Nil, main.p_object, position);  }  // 17
get_global_end_position :: (main: *NavigationLink3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("NavigationLink3D", "get_global_end_position", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 18
set_enter_cost :: (main: *NavigationLink3D, enter_cost: float) { sys_call("NavigationLink3D", "set_enter_cost", 373806689, Nil, main.p_object, enter_cost);  }  // 19
get_enter_cost :: (main: *NavigationLink3D) -> float { call_ret := cast(*float) sys_call("NavigationLink3D", "get_enter_cost", 1740695150, float, main.p_object); return call_ret.*; }  // 20
set_travel_cost :: (main: *NavigationLink3D, travel_cost: float) { sys_call("NavigationLink3D", "set_travel_cost", 373806689, Nil, main.p_object, travel_cost);  }  // 21
get_travel_cost :: (main: *NavigationLink3D) -> float { call_ret := cast(*float) sys_call("NavigationLink3D", "get_travel_cost", 1740695150, float, main.p_object); return call_ret.*; }  // 22

set_sample_partition_type :: (main: *NavigationMesh, sample_partition_type: NavigationMesh.SamplePartitionType) { sys_call("NavigationMesh", "set_sample_partition_type", 2472437533, Nil, main.p_object, sample_partition_type);  }  // 0
get_sample_partition_type :: (main: *NavigationMesh) -> NavigationMesh.SamplePartitionType { call_ret := cast(*NavigationMesh.SamplePartitionType) sys_call("NavigationMesh", "get_sample_partition_type", 833513918, NavigationMesh.SamplePartitionType, main.p_object); return call_ret.*; }  // 1
set_parsed_geometry_type :: (main: *NavigationMesh, geometry_type: NavigationMesh.ParsedGeometryType) { sys_call("NavigationMesh", "set_parsed_geometry_type", 3064713163, Nil, main.p_object, geometry_type);  }  // 2
get_parsed_geometry_type :: (main: *NavigationMesh) -> NavigationMesh.ParsedGeometryType { call_ret := cast(*NavigationMesh.ParsedGeometryType) sys_call("NavigationMesh", "get_parsed_geometry_type", 3928011953, NavigationMesh.ParsedGeometryType, main.p_object); return call_ret.*; }  // 3
set_collision_mask :: (main: *NavigationMesh, mask: int) { sys_call("NavigationMesh", "set_collision_mask", 1286410249, Nil, main.p_object, mask);  }  // 4
get_collision_mask :: (main: *NavigationMesh) -> int { call_ret := cast(*int) sys_call("NavigationMesh", "get_collision_mask", 3905245786, int, main.p_object); return call_ret.*; }  // 5
set_collision_mask_value :: (main: *NavigationMesh, layer_number: int, value: bool) { sys_call("NavigationMesh", "set_collision_mask_value", 300928843, Nil, main.p_object, layer_number, value);  }  // 6
get_collision_mask_value :: (main: *NavigationMesh, layer_number: int) -> bool { call_ret := cast(*bool) sys_call("NavigationMesh", "get_collision_mask_value", 1116898809, bool, main.p_object, layer_number); return call_ret.*; }  // 7
set_source_geometry_mode :: (main: *NavigationMesh, mask: NavigationMesh.SourceGeometryMode) { sys_call("NavigationMesh", "set_source_geometry_mode", 2700825194, Nil, main.p_object, mask);  }  // 8
get_source_geometry_mode :: (main: *NavigationMesh) -> NavigationMesh.SourceGeometryMode { call_ret := cast(*NavigationMesh.SourceGeometryMode) sys_call("NavigationMesh", "get_source_geometry_mode", 2770484141, NavigationMesh.SourceGeometryMode, main.p_object); return call_ret.*; }  // 9
set_source_group_name :: (main: *NavigationMesh, mask: string) { sys_call("NavigationMesh", "set_source_group_name", 3304788590, Nil, main.p_object, mask);  }  // 10
get_source_group_name :: (main: *NavigationMesh) -> StringName { call_ret := cast(*StringName) sys_call("NavigationMesh", "get_source_group_name", 2002593661, StringName, main.p_object); return call_ret.*; }  // 11
set_cell_size :: (main: *NavigationMesh, cell_size: float) { sys_call("NavigationMesh", "set_cell_size", 373806689, Nil, main.p_object, cell_size);  }  // 12
get_cell_size :: (main: *NavigationMesh) -> float { call_ret := cast(*float) sys_call("NavigationMesh", "get_cell_size", 1740695150, float, main.p_object); return call_ret.*; }  // 13
set_cell_height :: (main: *NavigationMesh, cell_height: float) { sys_call("NavigationMesh", "set_cell_height", 373806689, Nil, main.p_object, cell_height);  }  // 14
get_cell_height :: (main: *NavigationMesh) -> float { call_ret := cast(*float) sys_call("NavigationMesh", "get_cell_height", 1740695150, float, main.p_object); return call_ret.*; }  // 15
set_border_size :: (main: *NavigationMesh, border_size: float) { sys_call("NavigationMesh", "set_border_size", 373806689, Nil, main.p_object, border_size);  }  // 16
get_border_size :: (main: *NavigationMesh) -> float { call_ret := cast(*float) sys_call("NavigationMesh", "get_border_size", 1740695150, float, main.p_object); return call_ret.*; }  // 17
set_agent_height :: (main: *NavigationMesh, agent_height: float) { sys_call("NavigationMesh", "set_agent_height", 373806689, Nil, main.p_object, agent_height);  }  // 18
get_agent_height :: (main: *NavigationMesh) -> float { call_ret := cast(*float) sys_call("NavigationMesh", "get_agent_height", 1740695150, float, main.p_object); return call_ret.*; }  // 19
set_agent_radius :: (main: *NavigationMesh, agent_radius: float) { sys_call("NavigationMesh", "set_agent_radius", 373806689, Nil, main.p_object, agent_radius);  }  // 20
get_agent_radius :: (main: *NavigationMesh) -> float { call_ret := cast(*float) sys_call("NavigationMesh", "get_agent_radius", 191475506, float, main.p_object); return call_ret.*; }  // 21
set_agent_max_climb :: (main: *NavigationMesh, agent_max_climb: float) { sys_call("NavigationMesh", "set_agent_max_climb", 373806689, Nil, main.p_object, agent_max_climb);  }  // 22
get_agent_max_climb :: (main: *NavigationMesh) -> float { call_ret := cast(*float) sys_call("NavigationMesh", "get_agent_max_climb", 1740695150, float, main.p_object); return call_ret.*; }  // 23
set_agent_max_slope :: (main: *NavigationMesh, agent_max_slope: float) { sys_call("NavigationMesh", "set_agent_max_slope", 373806689, Nil, main.p_object, agent_max_slope);  }  // 24
get_agent_max_slope :: (main: *NavigationMesh) -> float { call_ret := cast(*float) sys_call("NavigationMesh", "get_agent_max_slope", 1740695150, float, main.p_object); return call_ret.*; }  // 25
set_region_min_size :: (main: *NavigationMesh, region_min_size: float) { sys_call("NavigationMesh", "set_region_min_size", 373806689, Nil, main.p_object, region_min_size);  }  // 26
get_region_min_size :: (main: *NavigationMesh) -> float { call_ret := cast(*float) sys_call("NavigationMesh", "get_region_min_size", 1740695150, float, main.p_object); return call_ret.*; }  // 27
set_region_merge_size :: (main: *NavigationMesh, region_merge_size: float) { sys_call("NavigationMesh", "set_region_merge_size", 373806689, Nil, main.p_object, region_merge_size);  }  // 28
get_region_merge_size :: (main: *NavigationMesh) -> float { call_ret := cast(*float) sys_call("NavigationMesh", "get_region_merge_size", 1740695150, float, main.p_object); return call_ret.*; }  // 29
set_edge_max_length :: (main: *NavigationMesh, edge_max_length: float) { sys_call("NavigationMesh", "set_edge_max_length", 373806689, Nil, main.p_object, edge_max_length);  }  // 30
get_edge_max_length :: (main: *NavigationMesh) -> float { call_ret := cast(*float) sys_call("NavigationMesh", "get_edge_max_length", 1740695150, float, main.p_object); return call_ret.*; }  // 31
set_edge_max_error :: (main: *NavigationMesh, edge_max_error: float) { sys_call("NavigationMesh", "set_edge_max_error", 373806689, Nil, main.p_object, edge_max_error);  }  // 32
get_edge_max_error :: (main: *NavigationMesh) -> float { call_ret := cast(*float) sys_call("NavigationMesh", "get_edge_max_error", 1740695150, float, main.p_object); return call_ret.*; }  // 33
set_vertices_per_polygon :: (main: *NavigationMesh, vertices_per_polygon: float) { sys_call("NavigationMesh", "set_vertices_per_polygon", 373806689, Nil, main.p_object, vertices_per_polygon);  }  // 34
get_vertices_per_polygon :: (main: *NavigationMesh) -> float { call_ret := cast(*float) sys_call("NavigationMesh", "get_vertices_per_polygon", 1740695150, float, main.p_object); return call_ret.*; }  // 35
set_detail_sample_distance :: (main: *NavigationMesh, detail_sample_dist: float) { sys_call("NavigationMesh", "set_detail_sample_distance", 373806689, Nil, main.p_object, detail_sample_dist);  }  // 36
get_detail_sample_distance :: (main: *NavigationMesh) -> float { call_ret := cast(*float) sys_call("NavigationMesh", "get_detail_sample_distance", 1740695150, float, main.p_object); return call_ret.*; }  // 37
set_detail_sample_max_error :: (main: *NavigationMesh, detail_sample_max_error: float) { sys_call("NavigationMesh", "set_detail_sample_max_error", 373806689, Nil, main.p_object, detail_sample_max_error);  }  // 38
get_detail_sample_max_error :: (main: *NavigationMesh) -> float { call_ret := cast(*float) sys_call("NavigationMesh", "get_detail_sample_max_error", 1740695150, float, main.p_object); return call_ret.*; }  // 39
set_filter_low_hanging_obstacles :: (main: *NavigationMesh, filter_low_hanging_obstacles: bool) { sys_call("NavigationMesh", "set_filter_low_hanging_obstacles", 2586408642, Nil, main.p_object, filter_low_hanging_obstacles);  }  // 40
get_filter_low_hanging_obstacles :: (main: *NavigationMesh) -> bool { call_ret := cast(*bool) sys_call("NavigationMesh", "get_filter_low_hanging_obstacles", 36873697, bool, main.p_object); return call_ret.*; }  // 41
set_filter_ledge_spans :: (main: *NavigationMesh, filter_ledge_spans: bool) { sys_call("NavigationMesh", "set_filter_ledge_spans", 2586408642, Nil, main.p_object, filter_ledge_spans);  }  // 42
get_filter_ledge_spans :: (main: *NavigationMesh) -> bool { call_ret := cast(*bool) sys_call("NavigationMesh", "get_filter_ledge_spans", 36873697, bool, main.p_object); return call_ret.*; }  // 43
set_filter_walkable_low_height_spans :: (main: *NavigationMesh, filter_walkable_low_height_spans: bool) { sys_call("NavigationMesh", "set_filter_walkable_low_height_spans", 2586408642, Nil, main.p_object, filter_walkable_low_height_spans);  }  // 44
get_filter_walkable_low_height_spans :: (main: *NavigationMesh) -> bool { call_ret := cast(*bool) sys_call("NavigationMesh", "get_filter_walkable_low_height_spans", 36873697, bool, main.p_object); return call_ret.*; }  // 45
set_filter_baking_aabb :: (main: *NavigationMesh, baking_aabb: AABB) { sys_call("NavigationMesh", "set_filter_baking_aabb", 259215842, Nil, main.p_object, baking_aabb);  }  // 46
get_filter_baking_aabb :: (main: *NavigationMesh) -> AABB { call_ret := cast(*AABB) sys_call("NavigationMesh", "get_filter_baking_aabb", 1068685055, AABB, main.p_object); return call_ret.*; }  // 47
set_filter_baking_aabb_offset :: (main: *NavigationMesh, baking_aabb_offset: Vector3) { sys_call("NavigationMesh", "set_filter_baking_aabb_offset", 3460891852, Nil, main.p_object, baking_aabb_offset);  }  // 48
get_filter_baking_aabb_offset :: (main: *NavigationMesh) -> Vector3 { call_ret := cast(*Vector3) sys_call("NavigationMesh", "get_filter_baking_aabb_offset", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 49
set_vertices :: (main: *NavigationMesh, vertices: PackedVector3Array) { sys_call("NavigationMesh", "set_vertices", 334873810, Nil, main.p_object, vertices);  }  // 50
get_vertices :: (main: *NavigationMesh) -> PackedVector3Array { call_ret := cast(*PackedVector3Array) sys_call("NavigationMesh", "get_vertices", 497664490, PackedVector3Array, main.p_object); return call_ret.*; }  // 51
add_polygon :: (main: *NavigationMesh, polygon: PackedInt32Array) { sys_call("NavigationMesh", "add_polygon", 3614634198, Nil, main.p_object, polygon);  }  // 52
get_polygon_count :: (main: *NavigationMesh) -> int { call_ret := cast(*int) sys_call("NavigationMesh", "get_polygon_count", 3905245786, int, main.p_object); return call_ret.*; }  // 53
get_polygon :: (main: *NavigationMesh, idx: int) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("NavigationMesh", "get_polygon", 3668444399, PackedInt32Array, main.p_object, idx); return call_ret.*; }  // 54
clear_polygons :: (main: *NavigationMesh) { sys_call("NavigationMesh", "clear_polygons", 3218959716, Nil, main.p_object);  }  // 55
create_from_mesh :: (main: *NavigationMesh, mesh: Mesh) { sys_call("NavigationMesh", "create_from_mesh", 194775623, Nil, main.p_object, mesh);  }  // 56
clear :: (main: *NavigationMesh) { sys_call("NavigationMesh", "clear", 3218959716, Nil, main.p_object);  }  // 57

bake :: (main: *NavigationMeshGenerator, navigation_mesh: NavigationMesh, root_node: Node) { sys_call("NavigationMeshGenerator", "bake", 1401173477, Nil, main.p_object, navigation_mesh, root_node);  }  // 0
clear :: (main: *NavigationMeshGenerator, navigation_mesh: NavigationMesh) { sys_call("NavigationMeshGenerator", "clear", 2923361153, Nil, main.p_object, navigation_mesh);  }  // 1
parse_source_geometry_data :: (main: *NavigationMeshGenerator, navigation_mesh: NavigationMesh, source_geometry_data: NavigationMeshSourceGeometryData3D, root_node: Node) { sys_call("NavigationMeshGenerator", "parse_source_geometry_data", 3172802542, Nil, main.p_object, navigation_mesh, source_geometry_data, root_node);  }  // 2
bake_from_source_geometry_data :: (main: *NavigationMeshGenerator, navigation_mesh: NavigationMesh, source_geometry_data: NavigationMeshSourceGeometryData3D) { sys_call("NavigationMeshGenerator", "bake_from_source_geometry_data", 1286748856, Nil, main.p_object, navigation_mesh, source_geometry_data);  }  // 3

clear :: (main: *NavigationMeshSourceGeometryData2D) { sys_call("NavigationMeshSourceGeometryData2D", "clear", 3218959716, Nil, main.p_object);  }  // 0
has_data :: (main: *NavigationMeshSourceGeometryData2D) -> bool { call_ret := cast(*bool) sys_call("NavigationMeshSourceGeometryData2D", "has_data", 2240911060, bool, main.p_object); return call_ret.*; }  // 1
set_traversable_outlines :: (main: *NavigationMeshSourceGeometryData2D, traversable_outlines: [] PackedVector2Array) { sys_call("NavigationMeshSourceGeometryData2D", "set_traversable_outlines", 381264803, Nil, main.p_object, traversable_outlines);  }  // 2
get_traversable_outlines :: (main: *NavigationMeshSourceGeometryData2D) -> [] PackedVector2Array { call_ret := cast(*[] PackedVector2Array) sys_call("NavigationMeshSourceGeometryData2D", "get_traversable_outlines", 3995934104, [] PackedVector2Array, main.p_object); return call_ret.*; }  // 3
set_obstruction_outlines :: (main: *NavigationMeshSourceGeometryData2D, obstruction_outlines: [] PackedVector2Array) { sys_call("NavigationMeshSourceGeometryData2D", "set_obstruction_outlines", 381264803, Nil, main.p_object, obstruction_outlines);  }  // 4
get_obstruction_outlines :: (main: *NavigationMeshSourceGeometryData2D) -> [] PackedVector2Array { call_ret := cast(*[] PackedVector2Array) sys_call("NavigationMeshSourceGeometryData2D", "get_obstruction_outlines", 3995934104, [] PackedVector2Array, main.p_object); return call_ret.*; }  // 5
append_traversable_outlines :: (main: *NavigationMeshSourceGeometryData2D, traversable_outlines: [] PackedVector2Array) { sys_call("NavigationMeshSourceGeometryData2D", "append_traversable_outlines", 381264803, Nil, main.p_object, traversable_outlines);  }  // 6
append_obstruction_outlines :: (main: *NavigationMeshSourceGeometryData2D, obstruction_outlines: [] PackedVector2Array) { sys_call("NavigationMeshSourceGeometryData2D", "append_obstruction_outlines", 381264803, Nil, main.p_object, obstruction_outlines);  }  // 7
add_traversable_outline :: (main: *NavigationMeshSourceGeometryData2D, shape_outline: PackedVector2Array) { sys_call("NavigationMeshSourceGeometryData2D", "add_traversable_outline", 1509147220, Nil, main.p_object, shape_outline);  }  // 8
add_obstruction_outline :: (main: *NavigationMeshSourceGeometryData2D, shape_outline: PackedVector2Array) { sys_call("NavigationMeshSourceGeometryData2D", "add_obstruction_outline", 1509147220, Nil, main.p_object, shape_outline);  }  // 9
merge :: (main: *NavigationMeshSourceGeometryData2D, other_geometry: NavigationMeshSourceGeometryData2D) { sys_call("NavigationMeshSourceGeometryData2D", "merge", 742424872, Nil, main.p_object, other_geometry);  }  // 10
add_projected_obstruction :: (main: *NavigationMeshSourceGeometryData2D, vertices: PackedVector2Array, carve: bool) { sys_call("NavigationMeshSourceGeometryData2D", "add_projected_obstruction", 3882407395, Nil, main.p_object, vertices, carve);  }  // 11
clear_projected_obstructions :: (main: *NavigationMeshSourceGeometryData2D) { sys_call("NavigationMeshSourceGeometryData2D", "clear_projected_obstructions", 3218959716, Nil, main.p_object);  }  // 12
set_projected_obstructions :: (main: *NavigationMeshSourceGeometryData2D, projected_obstructions: Array) { sys_call("NavigationMeshSourceGeometryData2D", "set_projected_obstructions", 381264803, Nil, main.p_object, projected_obstructions);  }  // 13
get_projected_obstructions :: (main: *NavigationMeshSourceGeometryData2D) -> Array { call_ret := cast(*Array) sys_call("NavigationMeshSourceGeometryData2D", "get_projected_obstructions", 3995934104, Array, main.p_object); return call_ret.*; }  // 14
get_bounds :: (main: *NavigationMeshSourceGeometryData2D) -> Rect2 { call_ret := cast(*Rect2) sys_call("NavigationMeshSourceGeometryData2D", "get_bounds", 3248174, Rect2, main.p_object); return call_ret.*; }  // 15

set_vertices :: (main: *NavigationMeshSourceGeometryData3D, vertices: PackedFloat32Array) { sys_call("NavigationMeshSourceGeometryData3D", "set_vertices", 2899603908, Nil, main.p_object, vertices);  }  // 0
get_vertices :: (main: *NavigationMeshSourceGeometryData3D) -> PackedFloat32Array { call_ret := cast(*PackedFloat32Array) sys_call("NavigationMeshSourceGeometryData3D", "get_vertices", 675695659, PackedFloat32Array, main.p_object); return call_ret.*; }  // 1
set_indices :: (main: *NavigationMeshSourceGeometryData3D, indices: PackedInt32Array) { sys_call("NavigationMeshSourceGeometryData3D", "set_indices", 3614634198, Nil, main.p_object, indices);  }  // 2
get_indices :: (main: *NavigationMeshSourceGeometryData3D) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("NavigationMeshSourceGeometryData3D", "get_indices", 1930428628, PackedInt32Array, main.p_object); return call_ret.*; }  // 3
append_arrays :: (main: *NavigationMeshSourceGeometryData3D, vertices: PackedFloat32Array, indices: PackedInt32Array) { sys_call("NavigationMeshSourceGeometryData3D", "append_arrays", 3117535015, Nil, main.p_object, vertices, indices);  }  // 4
clear :: (main: *NavigationMeshSourceGeometryData3D) { sys_call("NavigationMeshSourceGeometryData3D", "clear", 3218959716, Nil, main.p_object);  }  // 5
has_data :: (main: *NavigationMeshSourceGeometryData3D) -> bool { call_ret := cast(*bool) sys_call("NavigationMeshSourceGeometryData3D", "has_data", 2240911060, bool, main.p_object); return call_ret.*; }  // 6
add_mesh :: (main: *NavigationMeshSourceGeometryData3D, mesh: Mesh, xform: Transform3D) { sys_call("NavigationMeshSourceGeometryData3D", "add_mesh", 975462459, Nil, main.p_object, mesh, xform);  }  // 7
add_mesh_array :: (main: *NavigationMeshSourceGeometryData3D, mesh_array: Array, xform: Transform3D) { sys_call("NavigationMeshSourceGeometryData3D", "add_mesh_array", 4235710913, Nil, main.p_object, mesh_array, xform);  }  // 8
add_faces :: (main: *NavigationMeshSourceGeometryData3D, faces: PackedVector3Array, xform: Transform3D) { sys_call("NavigationMeshSourceGeometryData3D", "add_faces", 1440358797, Nil, main.p_object, faces, xform);  }  // 9
merge :: (main: *NavigationMeshSourceGeometryData3D, other_geometry: NavigationMeshSourceGeometryData3D) { sys_call("NavigationMeshSourceGeometryData3D", "merge", 655828145, Nil, main.p_object, other_geometry);  }  // 10
add_projected_obstruction :: (main: *NavigationMeshSourceGeometryData3D, vertices: PackedVector3Array, elevation: float, height: float, carve: bool) { sys_call("NavigationMeshSourceGeometryData3D", "add_projected_obstruction", 3351846707, Nil, main.p_object, vertices, elevation, height, carve);  }  // 11
clear_projected_obstructions :: (main: *NavigationMeshSourceGeometryData3D) { sys_call("NavigationMeshSourceGeometryData3D", "clear_projected_obstructions", 3218959716, Nil, main.p_object);  }  // 12
set_projected_obstructions :: (main: *NavigationMeshSourceGeometryData3D, projected_obstructions: Array) { sys_call("NavigationMeshSourceGeometryData3D", "set_projected_obstructions", 381264803, Nil, main.p_object, projected_obstructions);  }  // 13
get_projected_obstructions :: (main: *NavigationMeshSourceGeometryData3D) -> Array { call_ret := cast(*Array) sys_call("NavigationMeshSourceGeometryData3D", "get_projected_obstructions", 3995934104, Array, main.p_object); return call_ret.*; }  // 14
get_bounds :: (main: *NavigationMeshSourceGeometryData3D) -> AABB { call_ret := cast(*AABB) sys_call("NavigationMeshSourceGeometryData3D", "get_bounds", 1021181044, AABB, main.p_object); return call_ret.*; }  // 15

get_rid :: (main: *NavigationObstacle2D) -> RID { call_ret := cast(*RID) sys_call("NavigationObstacle2D", "get_rid", 2944877500, RID, main.p_object); return call_ret.*; }  // 0
set_avoidance_enabled :: (main: *NavigationObstacle2D, enabled: bool) { sys_call("NavigationObstacle2D", "set_avoidance_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 1
get_avoidance_enabled :: (main: *NavigationObstacle2D) -> bool { call_ret := cast(*bool) sys_call("NavigationObstacle2D", "get_avoidance_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 2
set_navigation_map :: (main: *NavigationObstacle2D, navigation_map: RID) { sys_call("NavigationObstacle2D", "set_navigation_map", 2722037293, Nil, main.p_object, navigation_map);  }  // 3
get_navigation_map :: (main: *NavigationObstacle2D) -> RID { call_ret := cast(*RID) sys_call("NavigationObstacle2D", "get_navigation_map", 2944877500, RID, main.p_object); return call_ret.*; }  // 4
set_radius :: (main: *NavigationObstacle2D, radius: float) { sys_call("NavigationObstacle2D", "set_radius", 373806689, Nil, main.p_object, radius);  }  // 5
get_radius :: (main: *NavigationObstacle2D) -> float { call_ret := cast(*float) sys_call("NavigationObstacle2D", "get_radius", 1740695150, float, main.p_object); return call_ret.*; }  // 6
set_velocity :: (main: *NavigationObstacle2D, velocity: Vector2) { sys_call("NavigationObstacle2D", "set_velocity", 743155724, Nil, main.p_object, velocity);  }  // 7
get_velocity :: (main: *NavigationObstacle2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("NavigationObstacle2D", "get_velocity", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 8
set_vertices :: (main: *NavigationObstacle2D, vertices: PackedVector2Array) { sys_call("NavigationObstacle2D", "set_vertices", 1509147220, Nil, main.p_object, vertices);  }  // 9
get_vertices :: (main: *NavigationObstacle2D) -> PackedVector2Array { call_ret := cast(*PackedVector2Array) sys_call("NavigationObstacle2D", "get_vertices", 2961356807, PackedVector2Array, main.p_object); return call_ret.*; }  // 10
set_avoidance_layers :: (main: *NavigationObstacle2D, layers: int) { sys_call("NavigationObstacle2D", "set_avoidance_layers", 1286410249, Nil, main.p_object, layers);  }  // 11
get_avoidance_layers :: (main: *NavigationObstacle2D) -> int { call_ret := cast(*int) sys_call("NavigationObstacle2D", "get_avoidance_layers", 3905245786, int, main.p_object); return call_ret.*; }  // 12
set_avoidance_layer_value :: (main: *NavigationObstacle2D, layer_number: int, value: bool) { sys_call("NavigationObstacle2D", "set_avoidance_layer_value", 300928843, Nil, main.p_object, layer_number, value);  }  // 13
get_avoidance_layer_value :: (main: *NavigationObstacle2D, layer_number: int) -> bool { call_ret := cast(*bool) sys_call("NavigationObstacle2D", "get_avoidance_layer_value", 1116898809, bool, main.p_object, layer_number); return call_ret.*; }  // 14
set_affect_navigation_mesh :: (main: *NavigationObstacle2D, enabled: bool) { sys_call("NavigationObstacle2D", "set_affect_navigation_mesh", 2586408642, Nil, main.p_object, enabled);  }  // 15
get_affect_navigation_mesh :: (main: *NavigationObstacle2D) -> bool { call_ret := cast(*bool) sys_call("NavigationObstacle2D", "get_affect_navigation_mesh", 36873697, bool, main.p_object); return call_ret.*; }  // 16
set_carve_navigation_mesh :: (main: *NavigationObstacle2D, enabled: bool) { sys_call("NavigationObstacle2D", "set_carve_navigation_mesh", 2586408642, Nil, main.p_object, enabled);  }  // 17
get_carve_navigation_mesh :: (main: *NavigationObstacle2D) -> bool { call_ret := cast(*bool) sys_call("NavigationObstacle2D", "get_carve_navigation_mesh", 36873697, bool, main.p_object); return call_ret.*; }  // 18

get_rid :: (main: *NavigationObstacle3D) -> RID { call_ret := cast(*RID) sys_call("NavigationObstacle3D", "get_rid", 2944877500, RID, main.p_object); return call_ret.*; }  // 0
set_avoidance_enabled :: (main: *NavigationObstacle3D, enabled: bool) { sys_call("NavigationObstacle3D", "set_avoidance_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 1
get_avoidance_enabled :: (main: *NavigationObstacle3D) -> bool { call_ret := cast(*bool) sys_call("NavigationObstacle3D", "get_avoidance_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 2
set_navigation_map :: (main: *NavigationObstacle3D, navigation_map: RID) { sys_call("NavigationObstacle3D", "set_navigation_map", 2722037293, Nil, main.p_object, navigation_map);  }  // 3
get_navigation_map :: (main: *NavigationObstacle3D) -> RID { call_ret := cast(*RID) sys_call("NavigationObstacle3D", "get_navigation_map", 2944877500, RID, main.p_object); return call_ret.*; }  // 4
set_radius :: (main: *NavigationObstacle3D, radius: float) { sys_call("NavigationObstacle3D", "set_radius", 373806689, Nil, main.p_object, radius);  }  // 5
get_radius :: (main: *NavigationObstacle3D) -> float { call_ret := cast(*float) sys_call("NavigationObstacle3D", "get_radius", 1740695150, float, main.p_object); return call_ret.*; }  // 6
set_height :: (main: *NavigationObstacle3D, height: float) { sys_call("NavigationObstacle3D", "set_height", 373806689, Nil, main.p_object, height);  }  // 7
get_height :: (main: *NavigationObstacle3D) -> float { call_ret := cast(*float) sys_call("NavigationObstacle3D", "get_height", 1740695150, float, main.p_object); return call_ret.*; }  // 8
set_velocity :: (main: *NavigationObstacle3D, velocity: Vector3) { sys_call("NavigationObstacle3D", "set_velocity", 3460891852, Nil, main.p_object, velocity);  }  // 9
get_velocity :: (main: *NavigationObstacle3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("NavigationObstacle3D", "get_velocity", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 10
set_vertices :: (main: *NavigationObstacle3D, vertices: PackedVector3Array) { sys_call("NavigationObstacle3D", "set_vertices", 334873810, Nil, main.p_object, vertices);  }  // 11
get_vertices :: (main: *NavigationObstacle3D) -> PackedVector3Array { call_ret := cast(*PackedVector3Array) sys_call("NavigationObstacle3D", "get_vertices", 497664490, PackedVector3Array, main.p_object); return call_ret.*; }  // 12
set_avoidance_layers :: (main: *NavigationObstacle3D, layers: int) { sys_call("NavigationObstacle3D", "set_avoidance_layers", 1286410249, Nil, main.p_object, layers);  }  // 13
get_avoidance_layers :: (main: *NavigationObstacle3D) -> int { call_ret := cast(*int) sys_call("NavigationObstacle3D", "get_avoidance_layers", 3905245786, int, main.p_object); return call_ret.*; }  // 14
set_avoidance_layer_value :: (main: *NavigationObstacle3D, layer_number: int, value: bool) { sys_call("NavigationObstacle3D", "set_avoidance_layer_value", 300928843, Nil, main.p_object, layer_number, value);  }  // 15
get_avoidance_layer_value :: (main: *NavigationObstacle3D, layer_number: int) -> bool { call_ret := cast(*bool) sys_call("NavigationObstacle3D", "get_avoidance_layer_value", 1116898809, bool, main.p_object, layer_number); return call_ret.*; }  // 16
set_use_3d_avoidance :: (main: *NavigationObstacle3D, enabled: bool) { sys_call("NavigationObstacle3D", "set_use_3d_avoidance", 2586408642, Nil, main.p_object, enabled);  }  // 17
get_use_3d_avoidance :: (main: *NavigationObstacle3D) -> bool { call_ret := cast(*bool) sys_call("NavigationObstacle3D", "get_use_3d_avoidance", 36873697, bool, main.p_object); return call_ret.*; }  // 18
set_affect_navigation_mesh :: (main: *NavigationObstacle3D, enabled: bool) { sys_call("NavigationObstacle3D", "set_affect_navigation_mesh", 2586408642, Nil, main.p_object, enabled);  }  // 19
get_affect_navigation_mesh :: (main: *NavigationObstacle3D) -> bool { call_ret := cast(*bool) sys_call("NavigationObstacle3D", "get_affect_navigation_mesh", 36873697, bool, main.p_object); return call_ret.*; }  // 20
set_carve_navigation_mesh :: (main: *NavigationObstacle3D, enabled: bool) { sys_call("NavigationObstacle3D", "set_carve_navigation_mesh", 2586408642, Nil, main.p_object, enabled);  }  // 21
get_carve_navigation_mesh :: (main: *NavigationObstacle3D) -> bool { call_ret := cast(*bool) sys_call("NavigationObstacle3D", "get_carve_navigation_mesh", 36873697, bool, main.p_object); return call_ret.*; }  // 22

set_pathfinding_algorithm :: (main: *NavigationPathQueryParameters2D, pathfinding_algorithm: NavigationPathQueryParameters2D.PathfindingAlgorithm) { sys_call("NavigationPathQueryParameters2D", "set_pathfinding_algorithm", 2783519915, Nil, main.p_object, pathfinding_algorithm);  }  // 0
get_pathfinding_algorithm :: (main: *NavigationPathQueryParameters2D) -> NavigationPathQueryParameters2D.PathfindingAlgorithm { call_ret := cast(*NavigationPathQueryParameters2D.PathfindingAlgorithm) sys_call("NavigationPathQueryParameters2D", "get_pathfinding_algorithm", 3000421146, NavigationPathQueryParameters2D.PathfindingAlgorithm, main.p_object); return call_ret.*; }  // 1
set_path_postprocessing :: (main: *NavigationPathQueryParameters2D, path_postprocessing: NavigationPathQueryParameters2D.PathPostProcessing) { sys_call("NavigationPathQueryParameters2D", "set_path_postprocessing", 2864409082, Nil, main.p_object, path_postprocessing);  }  // 2
get_path_postprocessing :: (main: *NavigationPathQueryParameters2D) -> NavigationPathQueryParameters2D.PathPostProcessing { call_ret := cast(*NavigationPathQueryParameters2D.PathPostProcessing) sys_call("NavigationPathQueryParameters2D", "get_path_postprocessing", 3798118993, NavigationPathQueryParameters2D.PathPostProcessing, main.p_object); return call_ret.*; }  // 3
set_map :: (main: *NavigationPathQueryParameters2D, map: RID) { sys_call("NavigationPathQueryParameters2D", "set_map", 2722037293, Nil, main.p_object, map);  }  // 4
get_map :: (main: *NavigationPathQueryParameters2D) -> RID { call_ret := cast(*RID) sys_call("NavigationPathQueryParameters2D", "get_map", 2944877500, RID, main.p_object); return call_ret.*; }  // 5
set_start_position :: (main: *NavigationPathQueryParameters2D, start_position: Vector2) { sys_call("NavigationPathQueryParameters2D", "set_start_position", 743155724, Nil, main.p_object, start_position);  }  // 6
get_start_position :: (main: *NavigationPathQueryParameters2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("NavigationPathQueryParameters2D", "get_start_position", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 7
set_target_position :: (main: *NavigationPathQueryParameters2D, target_position: Vector2) { sys_call("NavigationPathQueryParameters2D", "set_target_position", 743155724, Nil, main.p_object, target_position);  }  // 8
get_target_position :: (main: *NavigationPathQueryParameters2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("NavigationPathQueryParameters2D", "get_target_position", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 9
set_navigation_layers :: (main: *NavigationPathQueryParameters2D, navigation_layers: int) { sys_call("NavigationPathQueryParameters2D", "set_navigation_layers", 1286410249, Nil, main.p_object, navigation_layers);  }  // 10
get_navigation_layers :: (main: *NavigationPathQueryParameters2D) -> int { call_ret := cast(*int) sys_call("NavigationPathQueryParameters2D", "get_navigation_layers", 3905245786, int, main.p_object); return call_ret.*; }  // 11
set_metadata_flags :: (main: *NavigationPathQueryParameters2D, flags: NavigationPathQueryParameters2D.PathMetadataFlags) { sys_call("NavigationPathQueryParameters2D", "set_metadata_flags", 24274129, Nil, main.p_object, flags);  }  // 12
get_metadata_flags :: (main: *NavigationPathQueryParameters2D) -> NavigationPathQueryParameters2D.PathMetadataFlags { call_ret := cast(*NavigationPathQueryParameters2D.PathMetadataFlags) sys_call("NavigationPathQueryParameters2D", "get_metadata_flags", 488152976, NavigationPathQueryParameters2D.PathMetadataFlags, main.p_object); return call_ret.*; }  // 13
set_simplify_path :: (main: *NavigationPathQueryParameters2D, enabled: bool) { sys_call("NavigationPathQueryParameters2D", "set_simplify_path", 2586408642, Nil, main.p_object, enabled);  }  // 14
get_simplify_path :: (main: *NavigationPathQueryParameters2D) -> bool { call_ret := cast(*bool) sys_call("NavigationPathQueryParameters2D", "get_simplify_path", 36873697, bool, main.p_object); return call_ret.*; }  // 15
set_simplify_epsilon :: (main: *NavigationPathQueryParameters2D, epsilon: float) { sys_call("NavigationPathQueryParameters2D", "set_simplify_epsilon", 373806689, Nil, main.p_object, epsilon);  }  // 16
get_simplify_epsilon :: (main: *NavigationPathQueryParameters2D) -> float { call_ret := cast(*float) sys_call("NavigationPathQueryParameters2D", "get_simplify_epsilon", 1740695150, float, main.p_object); return call_ret.*; }  // 17

set_pathfinding_algorithm :: (main: *NavigationPathQueryParameters3D, pathfinding_algorithm: NavigationPathQueryParameters3D.PathfindingAlgorithm) { sys_call("NavigationPathQueryParameters3D", "set_pathfinding_algorithm", 394560454, Nil, main.p_object, pathfinding_algorithm);  }  // 0
get_pathfinding_algorithm :: (main: *NavigationPathQueryParameters3D) -> NavigationPathQueryParameters3D.PathfindingAlgorithm { call_ret := cast(*NavigationPathQueryParameters3D.PathfindingAlgorithm) sys_call("NavigationPathQueryParameters3D", "get_pathfinding_algorithm", 3398491350, NavigationPathQueryParameters3D.PathfindingAlgorithm, main.p_object); return call_ret.*; }  // 1
set_path_postprocessing :: (main: *NavigationPathQueryParameters3D, path_postprocessing: NavigationPathQueryParameters3D.PathPostProcessing) { sys_call("NavigationPathQueryParameters3D", "set_path_postprocessing", 2267362344, Nil, main.p_object, path_postprocessing);  }  // 2
get_path_postprocessing :: (main: *NavigationPathQueryParameters3D) -> NavigationPathQueryParameters3D.PathPostProcessing { call_ret := cast(*NavigationPathQueryParameters3D.PathPostProcessing) sys_call("NavigationPathQueryParameters3D", "get_path_postprocessing", 3883858360, NavigationPathQueryParameters3D.PathPostProcessing, main.p_object); return call_ret.*; }  // 3
set_map :: (main: *NavigationPathQueryParameters3D, map: RID) { sys_call("NavigationPathQueryParameters3D", "set_map", 2722037293, Nil, main.p_object, map);  }  // 4
get_map :: (main: *NavigationPathQueryParameters3D) -> RID { call_ret := cast(*RID) sys_call("NavigationPathQueryParameters3D", "get_map", 2944877500, RID, main.p_object); return call_ret.*; }  // 5
set_start_position :: (main: *NavigationPathQueryParameters3D, start_position: Vector3) { sys_call("NavigationPathQueryParameters3D", "set_start_position", 3460891852, Nil, main.p_object, start_position);  }  // 6
get_start_position :: (main: *NavigationPathQueryParameters3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("NavigationPathQueryParameters3D", "get_start_position", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 7
set_target_position :: (main: *NavigationPathQueryParameters3D, target_position: Vector3) { sys_call("NavigationPathQueryParameters3D", "set_target_position", 3460891852, Nil, main.p_object, target_position);  }  // 8
get_target_position :: (main: *NavigationPathQueryParameters3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("NavigationPathQueryParameters3D", "get_target_position", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 9
set_navigation_layers :: (main: *NavigationPathQueryParameters3D, navigation_layers: int) { sys_call("NavigationPathQueryParameters3D", "set_navigation_layers", 1286410249, Nil, main.p_object, navigation_layers);  }  // 10
get_navigation_layers :: (main: *NavigationPathQueryParameters3D) -> int { call_ret := cast(*int) sys_call("NavigationPathQueryParameters3D", "get_navigation_layers", 3905245786, int, main.p_object); return call_ret.*; }  // 11
set_metadata_flags :: (main: *NavigationPathQueryParameters3D, flags: NavigationPathQueryParameters3D.PathMetadataFlags) { sys_call("NavigationPathQueryParameters3D", "set_metadata_flags", 2713846708, Nil, main.p_object, flags);  }  // 12
get_metadata_flags :: (main: *NavigationPathQueryParameters3D) -> NavigationPathQueryParameters3D.PathMetadataFlags { call_ret := cast(*NavigationPathQueryParameters3D.PathMetadataFlags) sys_call("NavigationPathQueryParameters3D", "get_metadata_flags", 1582332802, NavigationPathQueryParameters3D.PathMetadataFlags, main.p_object); return call_ret.*; }  // 13
set_simplify_path :: (main: *NavigationPathQueryParameters3D, enabled: bool) { sys_call("NavigationPathQueryParameters3D", "set_simplify_path", 2586408642, Nil, main.p_object, enabled);  }  // 14
get_simplify_path :: (main: *NavigationPathQueryParameters3D) -> bool { call_ret := cast(*bool) sys_call("NavigationPathQueryParameters3D", "get_simplify_path", 36873697, bool, main.p_object); return call_ret.*; }  // 15
set_simplify_epsilon :: (main: *NavigationPathQueryParameters3D, epsilon: float) { sys_call("NavigationPathQueryParameters3D", "set_simplify_epsilon", 373806689, Nil, main.p_object, epsilon);  }  // 16
get_simplify_epsilon :: (main: *NavigationPathQueryParameters3D) -> float { call_ret := cast(*float) sys_call("NavigationPathQueryParameters3D", "get_simplify_epsilon", 1740695150, float, main.p_object); return call_ret.*; }  // 17

set_path :: (main: *NavigationPathQueryResult2D, path: PackedVector2Array) { sys_call("NavigationPathQueryResult2D", "set_path", 1509147220, Nil, main.p_object, path);  }  // 0
get_path :: (main: *NavigationPathQueryResult2D) -> PackedVector2Array { call_ret := cast(*PackedVector2Array) sys_call("NavigationPathQueryResult2D", "get_path", 2961356807, PackedVector2Array, main.p_object); return call_ret.*; }  // 1
set_path_types :: (main: *NavigationPathQueryResult2D, path_types: PackedInt32Array) { sys_call("NavigationPathQueryResult2D", "set_path_types", 3614634198, Nil, main.p_object, path_types);  }  // 2
get_path_types :: (main: *NavigationPathQueryResult2D) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("NavigationPathQueryResult2D", "get_path_types", 1930428628, PackedInt32Array, main.p_object); return call_ret.*; }  // 3
set_path_rids :: (main: *NavigationPathQueryResult2D, path_rids: [] RID) { sys_call("NavigationPathQueryResult2D", "set_path_rids", 381264803, Nil, main.p_object, path_rids);  }  // 4
get_path_rids :: (main: *NavigationPathQueryResult2D) -> [] RID { call_ret := cast(*[] RID) sys_call("NavigationPathQueryResult2D", "get_path_rids", 3995934104, [] RID, main.p_object); return call_ret.*; }  // 5
set_path_owner_ids :: (main: *NavigationPathQueryResult2D, path_owner_ids: PackedInt64Array) { sys_call("NavigationPathQueryResult2D", "set_path_owner_ids", 3709968205, Nil, main.p_object, path_owner_ids);  }  // 6
get_path_owner_ids :: (main: *NavigationPathQueryResult2D) -> PackedInt64Array { call_ret := cast(*PackedInt64Array) sys_call("NavigationPathQueryResult2D", "get_path_owner_ids", 235988956, PackedInt64Array, main.p_object); return call_ret.*; }  // 7
reset :: (main: *NavigationPathQueryResult2D) { sys_call("NavigationPathQueryResult2D", "reset", 3218959716, Nil, main.p_object);  }  // 8

set_path :: (main: *NavigationPathQueryResult3D, path: PackedVector3Array) { sys_call("NavigationPathQueryResult3D", "set_path", 334873810, Nil, main.p_object, path);  }  // 0
get_path :: (main: *NavigationPathQueryResult3D) -> PackedVector3Array { call_ret := cast(*PackedVector3Array) sys_call("NavigationPathQueryResult3D", "get_path", 497664490, PackedVector3Array, main.p_object); return call_ret.*; }  // 1
set_path_types :: (main: *NavigationPathQueryResult3D, path_types: PackedInt32Array) { sys_call("NavigationPathQueryResult3D", "set_path_types", 3614634198, Nil, main.p_object, path_types);  }  // 2
get_path_types :: (main: *NavigationPathQueryResult3D) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("NavigationPathQueryResult3D", "get_path_types", 1930428628, PackedInt32Array, main.p_object); return call_ret.*; }  // 3
set_path_rids :: (main: *NavigationPathQueryResult3D, path_rids: [] RID) { sys_call("NavigationPathQueryResult3D", "set_path_rids", 381264803, Nil, main.p_object, path_rids);  }  // 4
get_path_rids :: (main: *NavigationPathQueryResult3D) -> [] RID { call_ret := cast(*[] RID) sys_call("NavigationPathQueryResult3D", "get_path_rids", 3995934104, [] RID, main.p_object); return call_ret.*; }  // 5
set_path_owner_ids :: (main: *NavigationPathQueryResult3D, path_owner_ids: PackedInt64Array) { sys_call("NavigationPathQueryResult3D", "set_path_owner_ids", 3709968205, Nil, main.p_object, path_owner_ids);  }  // 6
get_path_owner_ids :: (main: *NavigationPathQueryResult3D) -> PackedInt64Array { call_ret := cast(*PackedInt64Array) sys_call("NavigationPathQueryResult3D", "get_path_owner_ids", 235988956, PackedInt64Array, main.p_object); return call_ret.*; }  // 7
reset :: (main: *NavigationPathQueryResult3D) { sys_call("NavigationPathQueryResult3D", "reset", 3218959716, Nil, main.p_object);  }  // 8

set_vertices :: (main: *NavigationPolygon, vertices: PackedVector2Array) { sys_call("NavigationPolygon", "set_vertices", 1509147220, Nil, main.p_object, vertices);  }  // 0
get_vertices :: (main: *NavigationPolygon) -> PackedVector2Array { call_ret := cast(*PackedVector2Array) sys_call("NavigationPolygon", "get_vertices", 2961356807, PackedVector2Array, main.p_object); return call_ret.*; }  // 1
add_polygon :: (main: *NavigationPolygon, polygon: PackedInt32Array) { sys_call("NavigationPolygon", "add_polygon", 3614634198, Nil, main.p_object, polygon);  }  // 2
get_polygon_count :: (main: *NavigationPolygon) -> int { call_ret := cast(*int) sys_call("NavigationPolygon", "get_polygon_count", 3905245786, int, main.p_object); return call_ret.*; }  // 3
get_polygon :: (main: *NavigationPolygon, idx: int) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("NavigationPolygon", "get_polygon", 3668444399, PackedInt32Array, main.p_object, idx); return call_ret.*; }  // 4
clear_polygons :: (main: *NavigationPolygon) { sys_call("NavigationPolygon", "clear_polygons", 3218959716, Nil, main.p_object);  }  // 5
get_navigation_mesh :: (main: *NavigationPolygon) -> *NavigationMesh { call_ret := cast(*NavigationMesh) sys_call("NavigationPolygon", "get_navigation_mesh", 330232164, NavigationMesh, main.p_object); return call_ret; }  // 6
add_outline :: (main: *NavigationPolygon, outline: PackedVector2Array) { sys_call("NavigationPolygon", "add_outline", 1509147220, Nil, main.p_object, outline);  }  // 7
add_outline_at_index :: (main: *NavigationPolygon, outline: PackedVector2Array, index: int) { sys_call("NavigationPolygon", "add_outline_at_index", 1569738947, Nil, main.p_object, outline, index);  }  // 8
get_outline_count :: (main: *NavigationPolygon) -> int { call_ret := cast(*int) sys_call("NavigationPolygon", "get_outline_count", 3905245786, int, main.p_object); return call_ret.*; }  // 9
set_outline :: (main: *NavigationPolygon, idx: int, outline: PackedVector2Array) { sys_call("NavigationPolygon", "set_outline", 1201971903, Nil, main.p_object, idx, outline);  }  // 10
get_outline :: (main: *NavigationPolygon, idx: int) -> PackedVector2Array { call_ret := cast(*PackedVector2Array) sys_call("NavigationPolygon", "get_outline", 3946907486, PackedVector2Array, main.p_object, idx); return call_ret.*; }  // 11
remove_outline :: (main: *NavigationPolygon, idx: int) { sys_call("NavigationPolygon", "remove_outline", 1286410249, Nil, main.p_object, idx);  }  // 12
clear_outlines :: (main: *NavigationPolygon) { sys_call("NavigationPolygon", "clear_outlines", 3218959716, Nil, main.p_object);  }  // 13
make_polygons_from_outlines :: (main: *NavigationPolygon) { sys_call("NavigationPolygon", "make_polygons_from_outlines", 3218959716, Nil, main.p_object);  }  // 14
set_cell_size :: (main: *NavigationPolygon, cell_size: float) { sys_call("NavigationPolygon", "set_cell_size", 373806689, Nil, main.p_object, cell_size);  }  // 15
get_cell_size :: (main: *NavigationPolygon) -> float { call_ret := cast(*float) sys_call("NavigationPolygon", "get_cell_size", 1740695150, float, main.p_object); return call_ret.*; }  // 16
set_border_size :: (main: *NavigationPolygon, border_size: float) { sys_call("NavigationPolygon", "set_border_size", 373806689, Nil, main.p_object, border_size);  }  // 17
get_border_size :: (main: *NavigationPolygon) -> float { call_ret := cast(*float) sys_call("NavigationPolygon", "get_border_size", 1740695150, float, main.p_object); return call_ret.*; }  // 18
set_sample_partition_type :: (main: *NavigationPolygon, sample_partition_type: NavigationPolygon.SamplePartitionType) { sys_call("NavigationPolygon", "set_sample_partition_type", 2441478482, Nil, main.p_object, sample_partition_type);  }  // 19
get_sample_partition_type :: (main: *NavigationPolygon) -> NavigationPolygon.SamplePartitionType { call_ret := cast(*NavigationPolygon.SamplePartitionType) sys_call("NavigationPolygon", "get_sample_partition_type", 3887422851, NavigationPolygon.SamplePartitionType, main.p_object); return call_ret.*; }  // 20
set_parsed_geometry_type :: (main: *NavigationPolygon, geometry_type: NavigationPolygon.ParsedGeometryType) { sys_call("NavigationPolygon", "set_parsed_geometry_type", 2507971764, Nil, main.p_object, geometry_type);  }  // 21
get_parsed_geometry_type :: (main: *NavigationPolygon) -> NavigationPolygon.ParsedGeometryType { call_ret := cast(*NavigationPolygon.ParsedGeometryType) sys_call("NavigationPolygon", "get_parsed_geometry_type", 1073219508, NavigationPolygon.ParsedGeometryType, main.p_object); return call_ret.*; }  // 22
set_parsed_collision_mask :: (main: *NavigationPolygon, mask: int) { sys_call("NavigationPolygon", "set_parsed_collision_mask", 1286410249, Nil, main.p_object, mask);  }  // 23
get_parsed_collision_mask :: (main: *NavigationPolygon) -> int { call_ret := cast(*int) sys_call("NavigationPolygon", "get_parsed_collision_mask", 3905245786, int, main.p_object); return call_ret.*; }  // 24
set_parsed_collision_mask_value :: (main: *NavigationPolygon, layer_number: int, value: bool) { sys_call("NavigationPolygon", "set_parsed_collision_mask_value", 300928843, Nil, main.p_object, layer_number, value);  }  // 25
get_parsed_collision_mask_value :: (main: *NavigationPolygon, layer_number: int) -> bool { call_ret := cast(*bool) sys_call("NavigationPolygon", "get_parsed_collision_mask_value", 1116898809, bool, main.p_object, layer_number); return call_ret.*; }  // 26
set_source_geometry_mode :: (main: *NavigationPolygon, geometry_mode: NavigationPolygon.SourceGeometryMode) { sys_call("NavigationPolygon", "set_source_geometry_mode", 4002316705, Nil, main.p_object, geometry_mode);  }  // 27
get_source_geometry_mode :: (main: *NavigationPolygon) -> NavigationPolygon.SourceGeometryMode { call_ret := cast(*NavigationPolygon.SourceGeometryMode) sys_call("NavigationPolygon", "get_source_geometry_mode", 459686762, NavigationPolygon.SourceGeometryMode, main.p_object); return call_ret.*; }  // 28
set_source_geometry_group_name :: (main: *NavigationPolygon, group_name: string) { sys_call("NavigationPolygon", "set_source_geometry_group_name", 3304788590, Nil, main.p_object, group_name);  }  // 29
get_source_geometry_group_name :: (main: *NavigationPolygon) -> StringName { call_ret := cast(*StringName) sys_call("NavigationPolygon", "get_source_geometry_group_name", 2002593661, StringName, main.p_object); return call_ret.*; }  // 30
set_agent_radius :: (main: *NavigationPolygon, agent_radius: float) { sys_call("NavigationPolygon", "set_agent_radius", 373806689, Nil, main.p_object, agent_radius);  }  // 31
get_agent_radius :: (main: *NavigationPolygon) -> float { call_ret := cast(*float) sys_call("NavigationPolygon", "get_agent_radius", 1740695150, float, main.p_object); return call_ret.*; }  // 32
set_baking_rect :: (main: *NavigationPolygon, rect: Rect2) { sys_call("NavigationPolygon", "set_baking_rect", 2046264180, Nil, main.p_object, rect);  }  // 33
get_baking_rect :: (main: *NavigationPolygon) -> Rect2 { call_ret := cast(*Rect2) sys_call("NavigationPolygon", "get_baking_rect", 1639390495, Rect2, main.p_object); return call_ret.*; }  // 34
set_baking_rect_offset :: (main: *NavigationPolygon, rect_offset: Vector2) { sys_call("NavigationPolygon", "set_baking_rect_offset", 743155724, Nil, main.p_object, rect_offset);  }  // 35
get_baking_rect_offset :: (main: *NavigationPolygon) -> Vector2 { call_ret := cast(*Vector2) sys_call("NavigationPolygon", "get_baking_rect_offset", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 36
clear :: (main: *NavigationPolygon) { sys_call("NavigationPolygon", "clear", 3218959716, Nil, main.p_object);  }  // 37

get_rid :: (main: *NavigationRegion2D) -> RID { call_ret := cast(*RID) sys_call("NavigationRegion2D", "get_rid", 2944877500, RID, main.p_object); return call_ret.*; }  // 0
set_navigation_polygon :: (main: *NavigationRegion2D, navigation_polygon: NavigationPolygon) { sys_call("NavigationRegion2D", "set_navigation_polygon", 1515040758, Nil, main.p_object, navigation_polygon);  }  // 1
get_navigation_polygon :: (main: *NavigationRegion2D) -> *NavigationPolygon { call_ret := cast(*NavigationPolygon) sys_call("NavigationRegion2D", "get_navigation_polygon", 1046532237, NavigationPolygon, main.p_object); return call_ret; }  // 2
set_enabled :: (main: *NavigationRegion2D, enabled: bool) { sys_call("NavigationRegion2D", "set_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 3
is_enabled :: (main: *NavigationRegion2D) -> bool { call_ret := cast(*bool) sys_call("NavigationRegion2D", "is_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 4
set_navigation_map :: (main: *NavigationRegion2D, navigation_map: RID) { sys_call("NavigationRegion2D", "set_navigation_map", 2722037293, Nil, main.p_object, navigation_map);  }  // 5
get_navigation_map :: (main: *NavigationRegion2D) -> RID { call_ret := cast(*RID) sys_call("NavigationRegion2D", "get_navigation_map", 2944877500, RID, main.p_object); return call_ret.*; }  // 6
set_use_edge_connections :: (main: *NavigationRegion2D, enabled: bool) { sys_call("NavigationRegion2D", "set_use_edge_connections", 2586408642, Nil, main.p_object, enabled);  }  // 7
get_use_edge_connections :: (main: *NavigationRegion2D) -> bool { call_ret := cast(*bool) sys_call("NavigationRegion2D", "get_use_edge_connections", 36873697, bool, main.p_object); return call_ret.*; }  // 8
set_navigation_layers :: (main: *NavigationRegion2D, navigation_layers: int) { sys_call("NavigationRegion2D", "set_navigation_layers", 1286410249, Nil, main.p_object, navigation_layers);  }  // 9
get_navigation_layers :: (main: *NavigationRegion2D) -> int { call_ret := cast(*int) sys_call("NavigationRegion2D", "get_navigation_layers", 3905245786, int, main.p_object); return call_ret.*; }  // 10
set_navigation_layer_value :: (main: *NavigationRegion2D, layer_number: int, value: bool) { sys_call("NavigationRegion2D", "set_navigation_layer_value", 300928843, Nil, main.p_object, layer_number, value);  }  // 11
get_navigation_layer_value :: (main: *NavigationRegion2D, layer_number: int) -> bool { call_ret := cast(*bool) sys_call("NavigationRegion2D", "get_navigation_layer_value", 1116898809, bool, main.p_object, layer_number); return call_ret.*; }  // 12
get_region_rid :: (main: *NavigationRegion2D) -> RID { call_ret := cast(*RID) sys_call("NavigationRegion2D", "get_region_rid", 2944877500, RID, main.p_object); return call_ret.*; }  // 13
set_enter_cost :: (main: *NavigationRegion2D, enter_cost: float) { sys_call("NavigationRegion2D", "set_enter_cost", 373806689, Nil, main.p_object, enter_cost);  }  // 14
get_enter_cost :: (main: *NavigationRegion2D) -> float { call_ret := cast(*float) sys_call("NavigationRegion2D", "get_enter_cost", 1740695150, float, main.p_object); return call_ret.*; }  // 15
set_travel_cost :: (main: *NavigationRegion2D, travel_cost: float) { sys_call("NavigationRegion2D", "set_travel_cost", 373806689, Nil, main.p_object, travel_cost);  }  // 16
get_travel_cost :: (main: *NavigationRegion2D) -> float { call_ret := cast(*float) sys_call("NavigationRegion2D", "get_travel_cost", 1740695150, float, main.p_object); return call_ret.*; }  // 17
bake_navigation_polygon :: (main: *NavigationRegion2D) { sys_call("NavigationRegion2D", "bake_navigation_polygon", 3216645846, Nil, main.p_object);  }  // 18
is_baking :: (main: *NavigationRegion2D) -> bool { call_ret := cast(*bool) sys_call("NavigationRegion2D", "is_baking", 36873697, bool, main.p_object); return call_ret.*; }  // 19
get_bounds :: (main: *NavigationRegion2D) -> Rect2 { call_ret := cast(*Rect2) sys_call("NavigationRegion2D", "get_bounds", 1639390495, Rect2, main.p_object); return call_ret.*; }  // 20

get_rid :: (main: *NavigationRegion3D) -> RID { call_ret := cast(*RID) sys_call("NavigationRegion3D", "get_rid", 2944877500, RID, main.p_object); return call_ret.*; }  // 0
set_navigation_mesh :: (main: *NavigationRegion3D, navigation_mesh: NavigationMesh) { sys_call("NavigationRegion3D", "set_navigation_mesh", 2923361153, Nil, main.p_object, navigation_mesh);  }  // 1
get_navigation_mesh :: (main: *NavigationRegion3D) -> *NavigationMesh { call_ret := cast(*NavigationMesh) sys_call("NavigationRegion3D", "get_navigation_mesh", 1468720886, NavigationMesh, main.p_object); return call_ret; }  // 2
set_enabled :: (main: *NavigationRegion3D, enabled: bool) { sys_call("NavigationRegion3D", "set_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 3
is_enabled :: (main: *NavigationRegion3D) -> bool { call_ret := cast(*bool) sys_call("NavigationRegion3D", "is_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 4
set_navigation_map :: (main: *NavigationRegion3D, navigation_map: RID) { sys_call("NavigationRegion3D", "set_navigation_map", 2722037293, Nil, main.p_object, navigation_map);  }  // 5
get_navigation_map :: (main: *NavigationRegion3D) -> RID { call_ret := cast(*RID) sys_call("NavigationRegion3D", "get_navigation_map", 2944877500, RID, main.p_object); return call_ret.*; }  // 6
set_use_edge_connections :: (main: *NavigationRegion3D, enabled: bool) { sys_call("NavigationRegion3D", "set_use_edge_connections", 2586408642, Nil, main.p_object, enabled);  }  // 7
get_use_edge_connections :: (main: *NavigationRegion3D) -> bool { call_ret := cast(*bool) sys_call("NavigationRegion3D", "get_use_edge_connections", 36873697, bool, main.p_object); return call_ret.*; }  // 8
set_navigation_layers :: (main: *NavigationRegion3D, navigation_layers: int) { sys_call("NavigationRegion3D", "set_navigation_layers", 1286410249, Nil, main.p_object, navigation_layers);  }  // 9
get_navigation_layers :: (main: *NavigationRegion3D) -> int { call_ret := cast(*int) sys_call("NavigationRegion3D", "get_navigation_layers", 3905245786, int, main.p_object); return call_ret.*; }  // 10
set_navigation_layer_value :: (main: *NavigationRegion3D, layer_number: int, value: bool) { sys_call("NavigationRegion3D", "set_navigation_layer_value", 300928843, Nil, main.p_object, layer_number, value);  }  // 11
get_navigation_layer_value :: (main: *NavigationRegion3D, layer_number: int) -> bool { call_ret := cast(*bool) sys_call("NavigationRegion3D", "get_navigation_layer_value", 1116898809, bool, main.p_object, layer_number); return call_ret.*; }  // 12
get_region_rid :: (main: *NavigationRegion3D) -> RID { call_ret := cast(*RID) sys_call("NavigationRegion3D", "get_region_rid", 2944877500, RID, main.p_object); return call_ret.*; }  // 13
set_enter_cost :: (main: *NavigationRegion3D, enter_cost: float) { sys_call("NavigationRegion3D", "set_enter_cost", 373806689, Nil, main.p_object, enter_cost);  }  // 14
get_enter_cost :: (main: *NavigationRegion3D) -> float { call_ret := cast(*float) sys_call("NavigationRegion3D", "get_enter_cost", 1740695150, float, main.p_object); return call_ret.*; }  // 15
set_travel_cost :: (main: *NavigationRegion3D, travel_cost: float) { sys_call("NavigationRegion3D", "set_travel_cost", 373806689, Nil, main.p_object, travel_cost);  }  // 16
get_travel_cost :: (main: *NavigationRegion3D) -> float { call_ret := cast(*float) sys_call("NavigationRegion3D", "get_travel_cost", 1740695150, float, main.p_object); return call_ret.*; }  // 17
bake_navigation_mesh :: (main: *NavigationRegion3D) { sys_call("NavigationRegion3D", "bake_navigation_mesh", 3216645846, Nil, main.p_object);  }  // 18
is_baking :: (main: *NavigationRegion3D) -> bool { call_ret := cast(*bool) sys_call("NavigationRegion3D", "is_baking", 36873697, bool, main.p_object); return call_ret.*; }  // 19
get_bounds :: (main: *NavigationRegion3D) -> AABB { call_ret := cast(*AABB) sys_call("NavigationRegion3D", "get_bounds", 1068685055, AABB, main.p_object); return call_ret.*; }  // 20

get_maps :: (main: *NavigationServer2D) -> [] RID { call_ret := cast(*[] RID) sys_call("NavigationServer2D", "get_maps", 3995934104, [] RID, main.p_object); return call_ret.*; }  // 0
map_create :: (main: *NavigationServer2D) -> RID { call_ret := cast(*RID) sys_call("NavigationServer2D", "map_create", 529393457, RID, main.p_object); return call_ret.*; }  // 1
map_set_active :: (main: *NavigationServer2D, map: RID, active: bool) { sys_call("NavigationServer2D", "map_set_active", 1265174801, Nil, main.p_object, map, active);  }  // 2
map_is_active :: (main: *NavigationServer2D, map: RID) -> bool { call_ret := cast(*bool) sys_call("NavigationServer2D", "map_is_active", 4155700596, bool, main.p_object, map); return call_ret.*; }  // 3
map_set_cell_size :: (main: *NavigationServer2D, map: RID, cell_size: float) { sys_call("NavigationServer2D", "map_set_cell_size", 1794382983, Nil, main.p_object, map, cell_size);  }  // 4
map_get_cell_size :: (main: *NavigationServer2D, map: RID) -> float { call_ret := cast(*float) sys_call("NavigationServer2D", "map_get_cell_size", 866169185, float, main.p_object, map); return call_ret.*; }  // 5
map_set_use_edge_connections :: (main: *NavigationServer2D, map: RID, enabled: bool) { sys_call("NavigationServer2D", "map_set_use_edge_connections", 1265174801, Nil, main.p_object, map, enabled);  }  // 6
map_get_use_edge_connections :: (main: *NavigationServer2D, map: RID) -> bool { call_ret := cast(*bool) sys_call("NavigationServer2D", "map_get_use_edge_connections", 4155700596, bool, main.p_object, map); return call_ret.*; }  // 7
map_set_edge_connection_margin :: (main: *NavigationServer2D, map: RID, margin: float) { sys_call("NavigationServer2D", "map_set_edge_connection_margin", 1794382983, Nil, main.p_object, map, margin);  }  // 8
map_get_edge_connection_margin :: (main: *NavigationServer2D, map: RID) -> float { call_ret := cast(*float) sys_call("NavigationServer2D", "map_get_edge_connection_margin", 866169185, float, main.p_object, map); return call_ret.*; }  // 9
map_set_link_connection_radius :: (main: *NavigationServer2D, map: RID, radius: float) { sys_call("NavigationServer2D", "map_set_link_connection_radius", 1794382983, Nil, main.p_object, map, radius);  }  // 10
map_get_link_connection_radius :: (main: *NavigationServer2D, map: RID) -> float { call_ret := cast(*float) sys_call("NavigationServer2D", "map_get_link_connection_radius", 866169185, float, main.p_object, map); return call_ret.*; }  // 11
map_get_path :: (main: *NavigationServer2D, map: RID, origin: Vector2, destination: Vector2, optimize: bool) -> PackedVector2Array { call_ret := cast(*PackedVector2Array) sys_call("NavigationServer2D", "map_get_path", 1279824844, PackedVector2Array, main.p_object, map, origin, destination, optimize); return call_ret.*; }  // 12
map_get_closest_point :: (main: *NavigationServer2D, map: RID, to_point: Vector2) -> Vector2 { call_ret := cast(*Vector2) sys_call("NavigationServer2D", "map_get_closest_point", 1358334418, Vector2, main.p_object, map, to_point); return call_ret.*; }  // 13
map_get_closest_point_owner :: (main: *NavigationServer2D, map: RID, to_point: Vector2) -> RID { call_ret := cast(*RID) sys_call("NavigationServer2D", "map_get_closest_point_owner", 1353467510, RID, main.p_object, map, to_point); return call_ret.*; }  // 14
map_get_links :: (main: *NavigationServer2D, map: RID) -> [] RID { call_ret := cast(*[] RID) sys_call("NavigationServer2D", "map_get_links", 2684255073, [] RID, main.p_object, map); return call_ret.*; }  // 15
map_get_regions :: (main: *NavigationServer2D, map: RID) -> [] RID { call_ret := cast(*[] RID) sys_call("NavigationServer2D", "map_get_regions", 2684255073, [] RID, main.p_object, map); return call_ret.*; }  // 16
map_get_agents :: (main: *NavigationServer2D, map: RID) -> [] RID { call_ret := cast(*[] RID) sys_call("NavigationServer2D", "map_get_agents", 2684255073, [] RID, main.p_object, map); return call_ret.*; }  // 17
map_get_obstacles :: (main: *NavigationServer2D, map: RID) -> [] RID { call_ret := cast(*[] RID) sys_call("NavigationServer2D", "map_get_obstacles", 2684255073, [] RID, main.p_object, map); return call_ret.*; }  // 18
map_force_update :: (main: *NavigationServer2D, map: RID) { sys_call("NavigationServer2D", "map_force_update", 2722037293, Nil, main.p_object, map);  }  // 19
map_get_iteration_id :: (main: *NavigationServer2D, map: RID) -> int { call_ret := cast(*int) sys_call("NavigationServer2D", "map_get_iteration_id", 2198884583, int, main.p_object, map); return call_ret.*; }  // 20
map_set_use_async_iterations :: (main: *NavigationServer2D, map: RID, enabled: bool) { sys_call("NavigationServer2D", "map_set_use_async_iterations", 1265174801, Nil, main.p_object, map, enabled);  }  // 21
map_get_use_async_iterations :: (main: *NavigationServer2D, map: RID) -> bool { call_ret := cast(*bool) sys_call("NavigationServer2D", "map_get_use_async_iterations", 4155700596, bool, main.p_object, map); return call_ret.*; }  // 22
map_get_random_point :: (main: *NavigationServer2D, map: RID, navigation_layers: int, uniformly: bool) -> Vector2 { call_ret := cast(*Vector2) sys_call("NavigationServer2D", "map_get_random_point", 3271000763, Vector2, main.p_object, map, navigation_layers, uniformly); return call_ret.*; }  // 23
query_path :: (main: *NavigationServer2D, parameters: NavigationPathQueryParameters2D, result: NavigationPathQueryResult2D) { sys_call("NavigationServer2D", "query_path", 1254915886, Nil, main.p_object, parameters, result);  }  // 24
region_create :: (main: *NavigationServer2D) -> RID { call_ret := cast(*RID) sys_call("NavigationServer2D", "region_create", 529393457, RID, main.p_object); return call_ret.*; }  // 25
region_set_enabled :: (main: *NavigationServer2D, region: RID, enabled: bool) { sys_call("NavigationServer2D", "region_set_enabled", 1265174801, Nil, main.p_object, region, enabled);  }  // 26
region_get_enabled :: (main: *NavigationServer2D, region: RID) -> bool { call_ret := cast(*bool) sys_call("NavigationServer2D", "region_get_enabled", 4155700596, bool, main.p_object, region); return call_ret.*; }  // 27
region_set_use_edge_connections :: (main: *NavigationServer2D, region: RID, enabled: bool) { sys_call("NavigationServer2D", "region_set_use_edge_connections", 1265174801, Nil, main.p_object, region, enabled);  }  // 28
region_get_use_edge_connections :: (main: *NavigationServer2D, region: RID) -> bool { call_ret := cast(*bool) sys_call("NavigationServer2D", "region_get_use_edge_connections", 4155700596, bool, main.p_object, region); return call_ret.*; }  // 29
region_set_enter_cost :: (main: *NavigationServer2D, region: RID, enter_cost: float) { sys_call("NavigationServer2D", "region_set_enter_cost", 1794382983, Nil, main.p_object, region, enter_cost);  }  // 30
region_get_enter_cost :: (main: *NavigationServer2D, region: RID) -> float { call_ret := cast(*float) sys_call("NavigationServer2D", "region_get_enter_cost", 866169185, float, main.p_object, region); return call_ret.*; }  // 31
region_set_travel_cost :: (main: *NavigationServer2D, region: RID, travel_cost: float) { sys_call("NavigationServer2D", "region_set_travel_cost", 1794382983, Nil, main.p_object, region, travel_cost);  }  // 32
region_get_travel_cost :: (main: *NavigationServer2D, region: RID) -> float { call_ret := cast(*float) sys_call("NavigationServer2D", "region_get_travel_cost", 866169185, float, main.p_object, region); return call_ret.*; }  // 33
region_set_owner_id :: (main: *NavigationServer2D, region: RID, owner_id: int) { sys_call("NavigationServer2D", "region_set_owner_id", 3411492887, Nil, main.p_object, region, owner_id);  }  // 34
region_get_owner_id :: (main: *NavigationServer2D, region: RID) -> int { call_ret := cast(*int) sys_call("NavigationServer2D", "region_get_owner_id", 2198884583, int, main.p_object, region); return call_ret.*; }  // 35
region_owns_point :: (main: *NavigationServer2D, region: RID, point: Vector2) -> bool { call_ret := cast(*bool) sys_call("NavigationServer2D", "region_owns_point", 219849798, bool, main.p_object, region, point); return call_ret.*; }  // 36
region_set_map :: (main: *NavigationServer2D, region: RID, map: RID) { sys_call("NavigationServer2D", "region_set_map", 395945892, Nil, main.p_object, region, map);  }  // 37
region_get_map :: (main: *NavigationServer2D, region: RID) -> RID { call_ret := cast(*RID) sys_call("NavigationServer2D", "region_get_map", 3814569979, RID, main.p_object, region); return call_ret.*; }  // 38
region_set_navigation_layers :: (main: *NavigationServer2D, region: RID, navigation_layers: int) { sys_call("NavigationServer2D", "region_set_navigation_layers", 3411492887, Nil, main.p_object, region, navigation_layers);  }  // 39
region_get_navigation_layers :: (main: *NavigationServer2D, region: RID) -> int { call_ret := cast(*int) sys_call("NavigationServer2D", "region_get_navigation_layers", 2198884583, int, main.p_object, region); return call_ret.*; }  // 40
region_set_transform :: (main: *NavigationServer2D, region: RID, transform: Transform2D) { sys_call("NavigationServer2D", "region_set_transform", 1246044741, Nil, main.p_object, region, transform);  }  // 41
region_get_transform :: (main: *NavigationServer2D, region: RID) -> Transform2D { call_ret := cast(*Transform2D) sys_call("NavigationServer2D", "region_get_transform", 213527486, Transform2D, main.p_object, region); return call_ret.*; }  // 42
region_set_navigation_polygon :: (main: *NavigationServer2D, region: RID, navigation_polygon: NavigationPolygon) { sys_call("NavigationServer2D", "region_set_navigation_polygon", 3633623451, Nil, main.p_object, region, navigation_polygon);  }  // 43
region_get_connections_count :: (main: *NavigationServer2D, region: RID) -> int { call_ret := cast(*int) sys_call("NavigationServer2D", "region_get_connections_count", 2198884583, int, main.p_object, region); return call_ret.*; }  // 44
region_get_connection_pathway_start :: (main: *NavigationServer2D, region: RID, connection: int) -> Vector2 { call_ret := cast(*Vector2) sys_call("NavigationServer2D", "region_get_connection_pathway_start", 2546185844, Vector2, main.p_object, region, connection); return call_ret.*; }  // 45
region_get_connection_pathway_end :: (main: *NavigationServer2D, region: RID, connection: int) -> Vector2 { call_ret := cast(*Vector2) sys_call("NavigationServer2D", "region_get_connection_pathway_end", 2546185844, Vector2, main.p_object, region, connection); return call_ret.*; }  // 46
region_get_closest_point :: (main: *NavigationServer2D, region: RID, to_point: Vector2) -> Vector2 { call_ret := cast(*Vector2) sys_call("NavigationServer2D", "region_get_closest_point", 1358334418, Vector2, main.p_object, region, to_point); return call_ret.*; }  // 47
region_get_random_point :: (main: *NavigationServer2D, region: RID, navigation_layers: int, uniformly: bool) -> Vector2 { call_ret := cast(*Vector2) sys_call("NavigationServer2D", "region_get_random_point", 3271000763, Vector2, main.p_object, region, navigation_layers, uniformly); return call_ret.*; }  // 48
region_get_bounds :: (main: *NavigationServer2D, region: RID) -> Rect2 { call_ret := cast(*Rect2) sys_call("NavigationServer2D", "region_get_bounds", 1097232729, Rect2, main.p_object, region); return call_ret.*; }  // 49
link_create :: (main: *NavigationServer2D) -> RID { call_ret := cast(*RID) sys_call("NavigationServer2D", "link_create", 529393457, RID, main.p_object); return call_ret.*; }  // 50
link_set_map :: (main: *NavigationServer2D, link: RID, map: RID) { sys_call("NavigationServer2D", "link_set_map", 395945892, Nil, main.p_object, link, map);  }  // 51
link_get_map :: (main: *NavigationServer2D, link: RID) -> RID { call_ret := cast(*RID) sys_call("NavigationServer2D", "link_get_map", 3814569979, RID, main.p_object, link); return call_ret.*; }  // 52
link_set_enabled :: (main: *NavigationServer2D, link: RID, enabled: bool) { sys_call("NavigationServer2D", "link_set_enabled", 1265174801, Nil, main.p_object, link, enabled);  }  // 53
link_get_enabled :: (main: *NavigationServer2D, link: RID) -> bool { call_ret := cast(*bool) sys_call("NavigationServer2D", "link_get_enabled", 4155700596, bool, main.p_object, link); return call_ret.*; }  // 54
link_set_bidirectional :: (main: *NavigationServer2D, link: RID, bidirectional: bool) { sys_call("NavigationServer2D", "link_set_bidirectional", 1265174801, Nil, main.p_object, link, bidirectional);  }  // 55
link_is_bidirectional :: (main: *NavigationServer2D, link: RID) -> bool { call_ret := cast(*bool) sys_call("NavigationServer2D", "link_is_bidirectional", 4155700596, bool, main.p_object, link); return call_ret.*; }  // 56
link_set_navigation_layers :: (main: *NavigationServer2D, link: RID, navigation_layers: int) { sys_call("NavigationServer2D", "link_set_navigation_layers", 3411492887, Nil, main.p_object, link, navigation_layers);  }  // 57
link_get_navigation_layers :: (main: *NavigationServer2D, link: RID) -> int { call_ret := cast(*int) sys_call("NavigationServer2D", "link_get_navigation_layers", 2198884583, int, main.p_object, link); return call_ret.*; }  // 58
link_set_start_position :: (main: *NavigationServer2D, link: RID, position: Vector2) { sys_call("NavigationServer2D", "link_set_start_position", 3201125042, Nil, main.p_object, link, position);  }  // 59
link_get_start_position :: (main: *NavigationServer2D, link: RID) -> Vector2 { call_ret := cast(*Vector2) sys_call("NavigationServer2D", "link_get_start_position", 2440833711, Vector2, main.p_object, link); return call_ret.*; }  // 60
link_set_end_position :: (main: *NavigationServer2D, link: RID, position: Vector2) { sys_call("NavigationServer2D", "link_set_end_position", 3201125042, Nil, main.p_object, link, position);  }  // 61
link_get_end_position :: (main: *NavigationServer2D, link: RID) -> Vector2 { call_ret := cast(*Vector2) sys_call("NavigationServer2D", "link_get_end_position", 2440833711, Vector2, main.p_object, link); return call_ret.*; }  // 62
link_set_enter_cost :: (main: *NavigationServer2D, link: RID, enter_cost: float) { sys_call("NavigationServer2D", "link_set_enter_cost", 1794382983, Nil, main.p_object, link, enter_cost);  }  // 63
link_get_enter_cost :: (main: *NavigationServer2D, link: RID) -> float { call_ret := cast(*float) sys_call("NavigationServer2D", "link_get_enter_cost", 866169185, float, main.p_object, link); return call_ret.*; }  // 64
link_set_travel_cost :: (main: *NavigationServer2D, link: RID, travel_cost: float) { sys_call("NavigationServer2D", "link_set_travel_cost", 1794382983, Nil, main.p_object, link, travel_cost);  }  // 65
link_get_travel_cost :: (main: *NavigationServer2D, link: RID) -> float { call_ret := cast(*float) sys_call("NavigationServer2D", "link_get_travel_cost", 866169185, float, main.p_object, link); return call_ret.*; }  // 66
link_set_owner_id :: (main: *NavigationServer2D, link: RID, owner_id: int) { sys_call("NavigationServer2D", "link_set_owner_id", 3411492887, Nil, main.p_object, link, owner_id);  }  // 67
link_get_owner_id :: (main: *NavigationServer2D, link: RID) -> int { call_ret := cast(*int) sys_call("NavigationServer2D", "link_get_owner_id", 2198884583, int, main.p_object, link); return call_ret.*; }  // 68
agent_create :: (main: *NavigationServer2D) -> RID { call_ret := cast(*RID) sys_call("NavigationServer2D", "agent_create", 529393457, RID, main.p_object); return call_ret.*; }  // 69
agent_set_avoidance_enabled :: (main: *NavigationServer2D, agent: RID, enabled: bool) { sys_call("NavigationServer2D", "agent_set_avoidance_enabled", 1265174801, Nil, main.p_object, agent, enabled);  }  // 70
agent_get_avoidance_enabled :: (main: *NavigationServer2D, agent: RID) -> bool { call_ret := cast(*bool) sys_call("NavigationServer2D", "agent_get_avoidance_enabled", 4155700596, bool, main.p_object, agent); return call_ret.*; }  // 71
agent_set_map :: (main: *NavigationServer2D, agent: RID, map: RID) { sys_call("NavigationServer2D", "agent_set_map", 395945892, Nil, main.p_object, agent, map);  }  // 72
agent_get_map :: (main: *NavigationServer2D, agent: RID) -> RID { call_ret := cast(*RID) sys_call("NavigationServer2D", "agent_get_map", 3814569979, RID, main.p_object, agent); return call_ret.*; }  // 73
agent_set_paused :: (main: *NavigationServer2D, agent: RID, paused: bool) { sys_call("NavigationServer2D", "agent_set_paused", 1265174801, Nil, main.p_object, agent, paused);  }  // 74
agent_get_paused :: (main: *NavigationServer2D, agent: RID) -> bool { call_ret := cast(*bool) sys_call("NavigationServer2D", "agent_get_paused", 4155700596, bool, main.p_object, agent); return call_ret.*; }  // 75
agent_set_neighbor_distance :: (main: *NavigationServer2D, agent: RID, distance: float) { sys_call("NavigationServer2D", "agent_set_neighbor_distance", 1794382983, Nil, main.p_object, agent, distance);  }  // 76
agent_get_neighbor_distance :: (main: *NavigationServer2D, agent: RID) -> float { call_ret := cast(*float) sys_call("NavigationServer2D", "agent_get_neighbor_distance", 866169185, float, main.p_object, agent); return call_ret.*; }  // 77
agent_set_max_neighbors :: (main: *NavigationServer2D, agent: RID, count: int) { sys_call("NavigationServer2D", "agent_set_max_neighbors", 3411492887, Nil, main.p_object, agent, count);  }  // 78
agent_get_max_neighbors :: (main: *NavigationServer2D, agent: RID) -> int { call_ret := cast(*int) sys_call("NavigationServer2D", "agent_get_max_neighbors", 2198884583, int, main.p_object, agent); return call_ret.*; }  // 79
agent_set_time_horizon_agents :: (main: *NavigationServer2D, agent: RID, time_horizon: float) { sys_call("NavigationServer2D", "agent_set_time_horizon_agents", 1794382983, Nil, main.p_object, agent, time_horizon);  }  // 80
agent_get_time_horizon_agents :: (main: *NavigationServer2D, agent: RID) -> float { call_ret := cast(*float) sys_call("NavigationServer2D", "agent_get_time_horizon_agents", 866169185, float, main.p_object, agent); return call_ret.*; }  // 81
agent_set_time_horizon_obstacles :: (main: *NavigationServer2D, agent: RID, time_horizon: float) { sys_call("NavigationServer2D", "agent_set_time_horizon_obstacles", 1794382983, Nil, main.p_object, agent, time_horizon);  }  // 82
agent_get_time_horizon_obstacles :: (main: *NavigationServer2D, agent: RID) -> float { call_ret := cast(*float) sys_call("NavigationServer2D", "agent_get_time_horizon_obstacles", 866169185, float, main.p_object, agent); return call_ret.*; }  // 83
agent_set_radius :: (main: *NavigationServer2D, agent: RID, radius: float) { sys_call("NavigationServer2D", "agent_set_radius", 1794382983, Nil, main.p_object, agent, radius);  }  // 84
agent_get_radius :: (main: *NavigationServer2D, agent: RID) -> float { call_ret := cast(*float) sys_call("NavigationServer2D", "agent_get_radius", 866169185, float, main.p_object, agent); return call_ret.*; }  // 85
agent_set_max_speed :: (main: *NavigationServer2D, agent: RID, max_speed: float) { sys_call("NavigationServer2D", "agent_set_max_speed", 1794382983, Nil, main.p_object, agent, max_speed);  }  // 86
agent_get_max_speed :: (main: *NavigationServer2D, agent: RID) -> float { call_ret := cast(*float) sys_call("NavigationServer2D", "agent_get_max_speed", 866169185, float, main.p_object, agent); return call_ret.*; }  // 87
agent_set_velocity_forced :: (main: *NavigationServer2D, agent: RID, velocity: Vector2) { sys_call("NavigationServer2D", "agent_set_velocity_forced", 3201125042, Nil, main.p_object, agent, velocity);  }  // 88
agent_set_velocity :: (main: *NavigationServer2D, agent: RID, velocity: Vector2) { sys_call("NavigationServer2D", "agent_set_velocity", 3201125042, Nil, main.p_object, agent, velocity);  }  // 89
agent_get_velocity :: (main: *NavigationServer2D, agent: RID) -> Vector2 { call_ret := cast(*Vector2) sys_call("NavigationServer2D", "agent_get_velocity", 2440833711, Vector2, main.p_object, agent); return call_ret.*; }  // 90
agent_set_position :: (main: *NavigationServer2D, agent: RID, position: Vector2) { sys_call("NavigationServer2D", "agent_set_position", 3201125042, Nil, main.p_object, agent, position);  }  // 91
agent_get_position :: (main: *NavigationServer2D, agent: RID) -> Vector2 { call_ret := cast(*Vector2) sys_call("NavigationServer2D", "agent_get_position", 2440833711, Vector2, main.p_object, agent); return call_ret.*; }  // 92
agent_is_map_changed :: (main: *NavigationServer2D, agent: RID) -> bool { call_ret := cast(*bool) sys_call("NavigationServer2D", "agent_is_map_changed", 4155700596, bool, main.p_object, agent); return call_ret.*; }  // 93
agent_set_avoidance_callback :: (main: *NavigationServer2D, agent: RID, callback: Callable) { sys_call("NavigationServer2D", "agent_set_avoidance_callback", 3379118538, Nil, main.p_object, agent, callback);  }  // 94
agent_has_avoidance_callback :: (main: *NavigationServer2D, agent: RID) -> bool { call_ret := cast(*bool) sys_call("NavigationServer2D", "agent_has_avoidance_callback", 4155700596, bool, main.p_object, agent); return call_ret.*; }  // 95
agent_set_avoidance_layers :: (main: *NavigationServer2D, agent: RID, layers: int) { sys_call("NavigationServer2D", "agent_set_avoidance_layers", 3411492887, Nil, main.p_object, agent, layers);  }  // 96
agent_get_avoidance_layers :: (main: *NavigationServer2D, agent: RID) -> int { call_ret := cast(*int) sys_call("NavigationServer2D", "agent_get_avoidance_layers", 2198884583, int, main.p_object, agent); return call_ret.*; }  // 97
agent_set_avoidance_mask :: (main: *NavigationServer2D, agent: RID, mask: int) { sys_call("NavigationServer2D", "agent_set_avoidance_mask", 3411492887, Nil, main.p_object, agent, mask);  }  // 98
agent_get_avoidance_mask :: (main: *NavigationServer2D, agent: RID) -> int { call_ret := cast(*int) sys_call("NavigationServer2D", "agent_get_avoidance_mask", 2198884583, int, main.p_object, agent); return call_ret.*; }  // 99
agent_set_avoidance_priority :: (main: *NavigationServer2D, agent: RID, priority: float) { sys_call("NavigationServer2D", "agent_set_avoidance_priority", 1794382983, Nil, main.p_object, agent, priority);  }  // 100
agent_get_avoidance_priority :: (main: *NavigationServer2D, agent: RID) -> float { call_ret := cast(*float) sys_call("NavigationServer2D", "agent_get_avoidance_priority", 866169185, float, main.p_object, agent); return call_ret.*; }  // 101
obstacle_create :: (main: *NavigationServer2D) -> RID { call_ret := cast(*RID) sys_call("NavigationServer2D", "obstacle_create", 529393457, RID, main.p_object); return call_ret.*; }  // 102
obstacle_set_avoidance_enabled :: (main: *NavigationServer2D, obstacle: RID, enabled: bool) { sys_call("NavigationServer2D", "obstacle_set_avoidance_enabled", 1265174801, Nil, main.p_object, obstacle, enabled);  }  // 103
obstacle_get_avoidance_enabled :: (main: *NavigationServer2D, obstacle: RID) -> bool { call_ret := cast(*bool) sys_call("NavigationServer2D", "obstacle_get_avoidance_enabled", 4155700596, bool, main.p_object, obstacle); return call_ret.*; }  // 104
obstacle_set_map :: (main: *NavigationServer2D, obstacle: RID, map: RID) { sys_call("NavigationServer2D", "obstacle_set_map", 395945892, Nil, main.p_object, obstacle, map);  }  // 105
obstacle_get_map :: (main: *NavigationServer2D, obstacle: RID) -> RID { call_ret := cast(*RID) sys_call("NavigationServer2D", "obstacle_get_map", 3814569979, RID, main.p_object, obstacle); return call_ret.*; }  // 106
obstacle_set_paused :: (main: *NavigationServer2D, obstacle: RID, paused: bool) { sys_call("NavigationServer2D", "obstacle_set_paused", 1265174801, Nil, main.p_object, obstacle, paused);  }  // 107
obstacle_get_paused :: (main: *NavigationServer2D, obstacle: RID) -> bool { call_ret := cast(*bool) sys_call("NavigationServer2D", "obstacle_get_paused", 4155700596, bool, main.p_object, obstacle); return call_ret.*; }  // 108
obstacle_set_radius :: (main: *NavigationServer2D, obstacle: RID, radius: float) { sys_call("NavigationServer2D", "obstacle_set_radius", 1794382983, Nil, main.p_object, obstacle, radius);  }  // 109
obstacle_get_radius :: (main: *NavigationServer2D, obstacle: RID) -> float { call_ret := cast(*float) sys_call("NavigationServer2D", "obstacle_get_radius", 866169185, float, main.p_object, obstacle); return call_ret.*; }  // 110
obstacle_set_velocity :: (main: *NavigationServer2D, obstacle: RID, velocity: Vector2) { sys_call("NavigationServer2D", "obstacle_set_velocity", 3201125042, Nil, main.p_object, obstacle, velocity);  }  // 111
obstacle_get_velocity :: (main: *NavigationServer2D, obstacle: RID) -> Vector2 { call_ret := cast(*Vector2) sys_call("NavigationServer2D", "obstacle_get_velocity", 2440833711, Vector2, main.p_object, obstacle); return call_ret.*; }  // 112
obstacle_set_position :: (main: *NavigationServer2D, obstacle: RID, position: Vector2) { sys_call("NavigationServer2D", "obstacle_set_position", 3201125042, Nil, main.p_object, obstacle, position);  }  // 113
obstacle_get_position :: (main: *NavigationServer2D, obstacle: RID) -> Vector2 { call_ret := cast(*Vector2) sys_call("NavigationServer2D", "obstacle_get_position", 2440833711, Vector2, main.p_object, obstacle); return call_ret.*; }  // 114
obstacle_set_vertices :: (main: *NavigationServer2D, obstacle: RID, vertices: PackedVector2Array) { sys_call("NavigationServer2D", "obstacle_set_vertices", 29476483, Nil, main.p_object, obstacle, vertices);  }  // 115
obstacle_get_vertices :: (main: *NavigationServer2D, obstacle: RID) -> PackedVector2Array { call_ret := cast(*PackedVector2Array) sys_call("NavigationServer2D", "obstacle_get_vertices", 2222557395, PackedVector2Array, main.p_object, obstacle); return call_ret.*; }  // 116
obstacle_set_avoidance_layers :: (main: *NavigationServer2D, obstacle: RID, layers: int) { sys_call("NavigationServer2D", "obstacle_set_avoidance_layers", 3411492887, Nil, main.p_object, obstacle, layers);  }  // 117
obstacle_get_avoidance_layers :: (main: *NavigationServer2D, obstacle: RID) -> int { call_ret := cast(*int) sys_call("NavigationServer2D", "obstacle_get_avoidance_layers", 2198884583, int, main.p_object, obstacle); return call_ret.*; }  // 118
parse_source_geometry_data :: (main: *NavigationServer2D, navigation_polygon: NavigationPolygon, source_geometry_data: NavigationMeshSourceGeometryData2D, root_node: Node) { sys_call("NavigationServer2D", "parse_source_geometry_data", 1766905497, Nil, main.p_object, navigation_polygon, source_geometry_data, root_node);  }  // 119
bake_from_source_geometry_data :: (main: *NavigationServer2D, navigation_polygon: NavigationPolygon, source_geometry_data: NavigationMeshSourceGeometryData2D) { sys_call("NavigationServer2D", "bake_from_source_geometry_data", 2179660022, Nil, main.p_object, navigation_polygon, source_geometry_data);  }  // 120
bake_from_source_geometry_data_async :: (main: *NavigationServer2D, navigation_polygon: NavigationPolygon, source_geometry_data: NavigationMeshSourceGeometryData2D) { sys_call("NavigationServer2D", "bake_from_source_geometry_data_async", 2179660022, Nil, main.p_object, navigation_polygon, source_geometry_data);  }  // 121
is_baking_navigation_polygon :: (main: *NavigationServer2D, navigation_polygon: NavigationPolygon) -> bool { call_ret := cast(*bool) sys_call("NavigationServer2D", "is_baking_navigation_polygon", 3729405808, bool, main.p_object, navigation_polygon); return call_ret.*; }  // 122
source_geometry_parser_create :: (main: *NavigationServer2D) -> RID { call_ret := cast(*RID) sys_call("NavigationServer2D", "source_geometry_parser_create", 529393457, RID, main.p_object); return call_ret.*; }  // 123
source_geometry_parser_set_callback :: (main: *NavigationServer2D, parser: RID, callback: Callable) { sys_call("NavigationServer2D", "source_geometry_parser_set_callback", 3379118538, Nil, main.p_object, parser, callback);  }  // 124
simplify_path :: (main: *NavigationServer2D, path: PackedVector2Array, epsilon: float) -> PackedVector2Array { call_ret := cast(*PackedVector2Array) sys_call("NavigationServer2D", "simplify_path", 2457191505, PackedVector2Array, main.p_object, path, epsilon); return call_ret.*; }  // 125
free_rid :: (main: *NavigationServer2D, rid: RID) { sys_call("NavigationServer2D", "free_rid", 2722037293, Nil, main.p_object, rid);  }  // 126
set_debug_enabled :: (main: *NavigationServer2D, enabled: bool) { sys_call("NavigationServer2D", "set_debug_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 127
get_debug_enabled :: (main: *NavigationServer2D) -> bool { call_ret := cast(*bool) sys_call("NavigationServer2D", "get_debug_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 128

get_maps :: (main: *NavigationServer3D) -> [] RID { call_ret := cast(*[] RID) sys_call("NavigationServer3D", "get_maps", 3995934104, [] RID, main.p_object); return call_ret.*; }  // 0
map_create :: (main: *NavigationServer3D) -> RID { call_ret := cast(*RID) sys_call("NavigationServer3D", "map_create", 529393457, RID, main.p_object); return call_ret.*; }  // 1
map_set_active :: (main: *NavigationServer3D, map: RID, active: bool) { sys_call("NavigationServer3D", "map_set_active", 1265174801, Nil, main.p_object, map, active);  }  // 2
map_is_active :: (main: *NavigationServer3D, map: RID) -> bool { call_ret := cast(*bool) sys_call("NavigationServer3D", "map_is_active", 4155700596, bool, main.p_object, map); return call_ret.*; }  // 3
map_set_up :: (main: *NavigationServer3D, map: RID, up: Vector3) { sys_call("NavigationServer3D", "map_set_up", 3227306858, Nil, main.p_object, map, up);  }  // 4
map_get_up :: (main: *NavigationServer3D, map: RID) -> Vector3 { call_ret := cast(*Vector3) sys_call("NavigationServer3D", "map_get_up", 531438156, Vector3, main.p_object, map); return call_ret.*; }  // 5
map_set_cell_size :: (main: *NavigationServer3D, map: RID, cell_size: float) { sys_call("NavigationServer3D", "map_set_cell_size", 1794382983, Nil, main.p_object, map, cell_size);  }  // 6
map_get_cell_size :: (main: *NavigationServer3D, map: RID) -> float { call_ret := cast(*float) sys_call("NavigationServer3D", "map_get_cell_size", 866169185, float, main.p_object, map); return call_ret.*; }  // 7
map_set_cell_height :: (main: *NavigationServer3D, map: RID, cell_height: float) { sys_call("NavigationServer3D", "map_set_cell_height", 1794382983, Nil, main.p_object, map, cell_height);  }  // 8
map_get_cell_height :: (main: *NavigationServer3D, map: RID) -> float { call_ret := cast(*float) sys_call("NavigationServer3D", "map_get_cell_height", 866169185, float, main.p_object, map); return call_ret.*; }  // 9
map_set_merge_rasterizer_cell_scale :: (main: *NavigationServer3D, map: RID, scale: float) { sys_call("NavigationServer3D", "map_set_merge_rasterizer_cell_scale", 1794382983, Nil, main.p_object, map, scale);  }  // 10
map_get_merge_rasterizer_cell_scale :: (main: *NavigationServer3D, map: RID) -> float { call_ret := cast(*float) sys_call("NavigationServer3D", "map_get_merge_rasterizer_cell_scale", 866169185, float, main.p_object, map); return call_ret.*; }  // 11
map_set_use_edge_connections :: (main: *NavigationServer3D, map: RID, enabled: bool) { sys_call("NavigationServer3D", "map_set_use_edge_connections", 1265174801, Nil, main.p_object, map, enabled);  }  // 12
map_get_use_edge_connections :: (main: *NavigationServer3D, map: RID) -> bool { call_ret := cast(*bool) sys_call("NavigationServer3D", "map_get_use_edge_connections", 4155700596, bool, main.p_object, map); return call_ret.*; }  // 13
map_set_edge_connection_margin :: (main: *NavigationServer3D, map: RID, margin: float) { sys_call("NavigationServer3D", "map_set_edge_connection_margin", 1794382983, Nil, main.p_object, map, margin);  }  // 14
map_get_edge_connection_margin :: (main: *NavigationServer3D, map: RID) -> float { call_ret := cast(*float) sys_call("NavigationServer3D", "map_get_edge_connection_margin", 866169185, float, main.p_object, map); return call_ret.*; }  // 15
map_set_link_connection_radius :: (main: *NavigationServer3D, map: RID, radius: float) { sys_call("NavigationServer3D", "map_set_link_connection_radius", 1794382983, Nil, main.p_object, map, radius);  }  // 16
map_get_link_connection_radius :: (main: *NavigationServer3D, map: RID) -> float { call_ret := cast(*float) sys_call("NavigationServer3D", "map_get_link_connection_radius", 866169185, float, main.p_object, map); return call_ret.*; }  // 17
map_get_path :: (main: *NavigationServer3D, map: RID, origin: Vector3, destination: Vector3, optimize: bool) -> PackedVector3Array { call_ret := cast(*PackedVector3Array) sys_call("NavigationServer3D", "map_get_path", 276783190, PackedVector3Array, main.p_object, map, origin, destination, optimize); return call_ret.*; }  // 18
map_get_closest_point_to_segment :: (main: *NavigationServer3D, map: RID, start: Vector3, end: Vector3) -> Vector3 { call_ret := cast(*Vector3) sys_call("NavigationServer3D", "map_get_closest_point_to_segment", 3830095642, Vector3, main.p_object, map, start, end); return call_ret.*; }  // 19
map_get_closest_point :: (main: *NavigationServer3D, map: RID, to_point: Vector3) -> Vector3 { call_ret := cast(*Vector3) sys_call("NavigationServer3D", "map_get_closest_point", 2056183332, Vector3, main.p_object, map, to_point); return call_ret.*; }  // 20
map_get_closest_point_normal :: (main: *NavigationServer3D, map: RID, to_point: Vector3) -> Vector3 { call_ret := cast(*Vector3) sys_call("NavigationServer3D", "map_get_closest_point_normal", 2056183332, Vector3, main.p_object, map, to_point); return call_ret.*; }  // 21
map_get_closest_point_owner :: (main: *NavigationServer3D, map: RID, to_point: Vector3) -> RID { call_ret := cast(*RID) sys_call("NavigationServer3D", "map_get_closest_point_owner", 553364610, RID, main.p_object, map, to_point); return call_ret.*; }  // 22
map_get_links :: (main: *NavigationServer3D, map: RID) -> [] RID { call_ret := cast(*[] RID) sys_call("NavigationServer3D", "map_get_links", 2684255073, [] RID, main.p_object, map); return call_ret.*; }  // 23
map_get_regions :: (main: *NavigationServer3D, map: RID) -> [] RID { call_ret := cast(*[] RID) sys_call("NavigationServer3D", "map_get_regions", 2684255073, [] RID, main.p_object, map); return call_ret.*; }  // 24
map_get_agents :: (main: *NavigationServer3D, map: RID) -> [] RID { call_ret := cast(*[] RID) sys_call("NavigationServer3D", "map_get_agents", 2684255073, [] RID, main.p_object, map); return call_ret.*; }  // 25
map_get_obstacles :: (main: *NavigationServer3D, map: RID) -> [] RID { call_ret := cast(*[] RID) sys_call("NavigationServer3D", "map_get_obstacles", 2684255073, [] RID, main.p_object, map); return call_ret.*; }  // 26
map_force_update :: (main: *NavigationServer3D, map: RID) { sys_call("NavigationServer3D", "map_force_update", 2722037293, Nil, main.p_object, map);  }  // 27
map_get_iteration_id :: (main: *NavigationServer3D, map: RID) -> int { call_ret := cast(*int) sys_call("NavigationServer3D", "map_get_iteration_id", 2198884583, int, main.p_object, map); return call_ret.*; }  // 28
map_set_use_async_iterations :: (main: *NavigationServer3D, map: RID, enabled: bool) { sys_call("NavigationServer3D", "map_set_use_async_iterations", 1265174801, Nil, main.p_object, map, enabled);  }  // 29
map_get_use_async_iterations :: (main: *NavigationServer3D, map: RID) -> bool { call_ret := cast(*bool) sys_call("NavigationServer3D", "map_get_use_async_iterations", 4155700596, bool, main.p_object, map); return call_ret.*; }  // 30
map_get_random_point :: (main: *NavigationServer3D, map: RID, navigation_layers: int, uniformly: bool) -> Vector3 { call_ret := cast(*Vector3) sys_call("NavigationServer3D", "map_get_random_point", 722801526, Vector3, main.p_object, map, navigation_layers, uniformly); return call_ret.*; }  // 31
query_path :: (main: *NavigationServer3D, parameters: NavigationPathQueryParameters3D, result: NavigationPathQueryResult3D) { sys_call("NavigationServer3D", "query_path", 2146930868, Nil, main.p_object, parameters, result);  }  // 32
region_create :: (main: *NavigationServer3D) -> RID { call_ret := cast(*RID) sys_call("NavigationServer3D", "region_create", 529393457, RID, main.p_object); return call_ret.*; }  // 33
region_set_enabled :: (main: *NavigationServer3D, region: RID, enabled: bool) { sys_call("NavigationServer3D", "region_set_enabled", 1265174801, Nil, main.p_object, region, enabled);  }  // 34
region_get_enabled :: (main: *NavigationServer3D, region: RID) -> bool { call_ret := cast(*bool) sys_call("NavigationServer3D", "region_get_enabled", 4155700596, bool, main.p_object, region); return call_ret.*; }  // 35
region_set_use_edge_connections :: (main: *NavigationServer3D, region: RID, enabled: bool) { sys_call("NavigationServer3D", "region_set_use_edge_connections", 1265174801, Nil, main.p_object, region, enabled);  }  // 36
region_get_use_edge_connections :: (main: *NavigationServer3D, region: RID) -> bool { call_ret := cast(*bool) sys_call("NavigationServer3D", "region_get_use_edge_connections", 4155700596, bool, main.p_object, region); return call_ret.*; }  // 37
region_set_enter_cost :: (main: *NavigationServer3D, region: RID, enter_cost: float) { sys_call("NavigationServer3D", "region_set_enter_cost", 1794382983, Nil, main.p_object, region, enter_cost);  }  // 38
region_get_enter_cost :: (main: *NavigationServer3D, region: RID) -> float { call_ret := cast(*float) sys_call("NavigationServer3D", "region_get_enter_cost", 866169185, float, main.p_object, region); return call_ret.*; }  // 39
region_set_travel_cost :: (main: *NavigationServer3D, region: RID, travel_cost: float) { sys_call("NavigationServer3D", "region_set_travel_cost", 1794382983, Nil, main.p_object, region, travel_cost);  }  // 40
region_get_travel_cost :: (main: *NavigationServer3D, region: RID) -> float { call_ret := cast(*float) sys_call("NavigationServer3D", "region_get_travel_cost", 866169185, float, main.p_object, region); return call_ret.*; }  // 41
region_set_owner_id :: (main: *NavigationServer3D, region: RID, owner_id: int) { sys_call("NavigationServer3D", "region_set_owner_id", 3411492887, Nil, main.p_object, region, owner_id);  }  // 42
region_get_owner_id :: (main: *NavigationServer3D, region: RID) -> int { call_ret := cast(*int) sys_call("NavigationServer3D", "region_get_owner_id", 2198884583, int, main.p_object, region); return call_ret.*; }  // 43
region_owns_point :: (main: *NavigationServer3D, region: RID, point: Vector3) -> bool { call_ret := cast(*bool) sys_call("NavigationServer3D", "region_owns_point", 2360011153, bool, main.p_object, region, point); return call_ret.*; }  // 44
region_set_map :: (main: *NavigationServer3D, region: RID, map: RID) { sys_call("NavigationServer3D", "region_set_map", 395945892, Nil, main.p_object, region, map);  }  // 45
region_get_map :: (main: *NavigationServer3D, region: RID) -> RID { call_ret := cast(*RID) sys_call("NavigationServer3D", "region_get_map", 3814569979, RID, main.p_object, region); return call_ret.*; }  // 46
region_set_navigation_layers :: (main: *NavigationServer3D, region: RID, navigation_layers: int) { sys_call("NavigationServer3D", "region_set_navigation_layers", 3411492887, Nil, main.p_object, region, navigation_layers);  }  // 47
region_get_navigation_layers :: (main: *NavigationServer3D, region: RID) -> int { call_ret := cast(*int) sys_call("NavigationServer3D", "region_get_navigation_layers", 2198884583, int, main.p_object, region); return call_ret.*; }  // 48
region_set_transform :: (main: *NavigationServer3D, region: RID, transform: Transform3D) { sys_call("NavigationServer3D", "region_set_transform", 3935195649, Nil, main.p_object, region, transform);  }  // 49
region_get_transform :: (main: *NavigationServer3D, region: RID) -> Transform3D { call_ret := cast(*Transform3D) sys_call("NavigationServer3D", "region_get_transform", 1128465797, Transform3D, main.p_object, region); return call_ret.*; }  // 50
region_set_navigation_mesh :: (main: *NavigationServer3D, region: RID, navigation_mesh: NavigationMesh) { sys_call("NavigationServer3D", "region_set_navigation_mesh", 2764952978, Nil, main.p_object, region, navigation_mesh);  }  // 51
region_bake_navigation_mesh :: (main: *NavigationServer3D, navigation_mesh: NavigationMesh, root_node: Node) { sys_call("NavigationServer3D", "region_bake_navigation_mesh", 1401173477, Nil, main.p_object, navigation_mesh, root_node);  }  // 52
region_get_connections_count :: (main: *NavigationServer3D, region: RID) -> int { call_ret := cast(*int) sys_call("NavigationServer3D", "region_get_connections_count", 2198884583, int, main.p_object, region); return call_ret.*; }  // 53
region_get_connection_pathway_start :: (main: *NavigationServer3D, region: RID, connection: int) -> Vector3 { call_ret := cast(*Vector3) sys_call("NavigationServer3D", "region_get_connection_pathway_start", 3440143363, Vector3, main.p_object, region, connection); return call_ret.*; }  // 54
region_get_connection_pathway_end :: (main: *NavigationServer3D, region: RID, connection: int) -> Vector3 { call_ret := cast(*Vector3) sys_call("NavigationServer3D", "region_get_connection_pathway_end", 3440143363, Vector3, main.p_object, region, connection); return call_ret.*; }  // 55
region_get_closest_point_to_segment :: (main: *NavigationServer3D, region: RID, start: Vector3, end: Vector3) -> Vector3 { call_ret := cast(*Vector3) sys_call("NavigationServer3D", "region_get_closest_point_to_segment", 3830095642, Vector3, main.p_object, region, start, end); return call_ret.*; }  // 56
region_get_closest_point :: (main: *NavigationServer3D, region: RID, to_point: Vector3) -> Vector3 { call_ret := cast(*Vector3) sys_call("NavigationServer3D", "region_get_closest_point", 2056183332, Vector3, main.p_object, region, to_point); return call_ret.*; }  // 57
region_get_closest_point_normal :: (main: *NavigationServer3D, region: RID, to_point: Vector3) -> Vector3 { call_ret := cast(*Vector3) sys_call("NavigationServer3D", "region_get_closest_point_normal", 2056183332, Vector3, main.p_object, region, to_point); return call_ret.*; }  // 58
region_get_random_point :: (main: *NavigationServer3D, region: RID, navigation_layers: int, uniformly: bool) -> Vector3 { call_ret := cast(*Vector3) sys_call("NavigationServer3D", "region_get_random_point", 722801526, Vector3, main.p_object, region, navigation_layers, uniformly); return call_ret.*; }  // 59
region_get_bounds :: (main: *NavigationServer3D, region: RID) -> AABB { call_ret := cast(*AABB) sys_call("NavigationServer3D", "region_get_bounds", 974181306, AABB, main.p_object, region); return call_ret.*; }  // 60
link_create :: (main: *NavigationServer3D) -> RID { call_ret := cast(*RID) sys_call("NavigationServer3D", "link_create", 529393457, RID, main.p_object); return call_ret.*; }  // 61
link_set_map :: (main: *NavigationServer3D, link: RID, map: RID) { sys_call("NavigationServer3D", "link_set_map", 395945892, Nil, main.p_object, link, map);  }  // 62
link_get_map :: (main: *NavigationServer3D, link: RID) -> RID { call_ret := cast(*RID) sys_call("NavigationServer3D", "link_get_map", 3814569979, RID, main.p_object, link); return call_ret.*; }  // 63
link_set_enabled :: (main: *NavigationServer3D, link: RID, enabled: bool) { sys_call("NavigationServer3D", "link_set_enabled", 1265174801, Nil, main.p_object, link, enabled);  }  // 64
link_get_enabled :: (main: *NavigationServer3D, link: RID) -> bool { call_ret := cast(*bool) sys_call("NavigationServer3D", "link_get_enabled", 4155700596, bool, main.p_object, link); return call_ret.*; }  // 65
link_set_bidirectional :: (main: *NavigationServer3D, link: RID, bidirectional: bool) { sys_call("NavigationServer3D", "link_set_bidirectional", 1265174801, Nil, main.p_object, link, bidirectional);  }  // 66
link_is_bidirectional :: (main: *NavigationServer3D, link: RID) -> bool { call_ret := cast(*bool) sys_call("NavigationServer3D", "link_is_bidirectional", 4155700596, bool, main.p_object, link); return call_ret.*; }  // 67
link_set_navigation_layers :: (main: *NavigationServer3D, link: RID, navigation_layers: int) { sys_call("NavigationServer3D", "link_set_navigation_layers", 3411492887, Nil, main.p_object, link, navigation_layers);  }  // 68
link_get_navigation_layers :: (main: *NavigationServer3D, link: RID) -> int { call_ret := cast(*int) sys_call("NavigationServer3D", "link_get_navigation_layers", 2198884583, int, main.p_object, link); return call_ret.*; }  // 69
link_set_start_position :: (main: *NavigationServer3D, link: RID, position: Vector3) { sys_call("NavigationServer3D", "link_set_start_position", 3227306858, Nil, main.p_object, link, position);  }  // 70
link_get_start_position :: (main: *NavigationServer3D, link: RID) -> Vector3 { call_ret := cast(*Vector3) sys_call("NavigationServer3D", "link_get_start_position", 531438156, Vector3, main.p_object, link); return call_ret.*; }  // 71
link_set_end_position :: (main: *NavigationServer3D, link: RID, position: Vector3) { sys_call("NavigationServer3D", "link_set_end_position", 3227306858, Nil, main.p_object, link, position);  }  // 72
link_get_end_position :: (main: *NavigationServer3D, link: RID) -> Vector3 { call_ret := cast(*Vector3) sys_call("NavigationServer3D", "link_get_end_position", 531438156, Vector3, main.p_object, link); return call_ret.*; }  // 73
link_set_enter_cost :: (main: *NavigationServer3D, link: RID, enter_cost: float) { sys_call("NavigationServer3D", "link_set_enter_cost", 1794382983, Nil, main.p_object, link, enter_cost);  }  // 74
link_get_enter_cost :: (main: *NavigationServer3D, link: RID) -> float { call_ret := cast(*float) sys_call("NavigationServer3D", "link_get_enter_cost", 866169185, float, main.p_object, link); return call_ret.*; }  // 75
link_set_travel_cost :: (main: *NavigationServer3D, link: RID, travel_cost: float) { sys_call("NavigationServer3D", "link_set_travel_cost", 1794382983, Nil, main.p_object, link, travel_cost);  }  // 76
link_get_travel_cost :: (main: *NavigationServer3D, link: RID) -> float { call_ret := cast(*float) sys_call("NavigationServer3D", "link_get_travel_cost", 866169185, float, main.p_object, link); return call_ret.*; }  // 77
link_set_owner_id :: (main: *NavigationServer3D, link: RID, owner_id: int) { sys_call("NavigationServer3D", "link_set_owner_id", 3411492887, Nil, main.p_object, link, owner_id);  }  // 78
link_get_owner_id :: (main: *NavigationServer3D, link: RID) -> int { call_ret := cast(*int) sys_call("NavigationServer3D", "link_get_owner_id", 2198884583, int, main.p_object, link); return call_ret.*; }  // 79
agent_create :: (main: *NavigationServer3D) -> RID { call_ret := cast(*RID) sys_call("NavigationServer3D", "agent_create", 529393457, RID, main.p_object); return call_ret.*; }  // 80
agent_set_avoidance_enabled :: (main: *NavigationServer3D, agent: RID, enabled: bool) { sys_call("NavigationServer3D", "agent_set_avoidance_enabled", 1265174801, Nil, main.p_object, agent, enabled);  }  // 81
agent_get_avoidance_enabled :: (main: *NavigationServer3D, agent: RID) -> bool { call_ret := cast(*bool) sys_call("NavigationServer3D", "agent_get_avoidance_enabled", 4155700596, bool, main.p_object, agent); return call_ret.*; }  // 82
agent_set_use_3d_avoidance :: (main: *NavigationServer3D, agent: RID, enabled: bool) { sys_call("NavigationServer3D", "agent_set_use_3d_avoidance", 1265174801, Nil, main.p_object, agent, enabled);  }  // 83
agent_get_use_3d_avoidance :: (main: *NavigationServer3D, agent: RID) -> bool { call_ret := cast(*bool) sys_call("NavigationServer3D", "agent_get_use_3d_avoidance", 4155700596, bool, main.p_object, agent); return call_ret.*; }  // 84
agent_set_map :: (main: *NavigationServer3D, agent: RID, map: RID) { sys_call("NavigationServer3D", "agent_set_map", 395945892, Nil, main.p_object, agent, map);  }  // 85
agent_get_map :: (main: *NavigationServer3D, agent: RID) -> RID { call_ret := cast(*RID) sys_call("NavigationServer3D", "agent_get_map", 3814569979, RID, main.p_object, agent); return call_ret.*; }  // 86
agent_set_paused :: (main: *NavigationServer3D, agent: RID, paused: bool) { sys_call("NavigationServer3D", "agent_set_paused", 1265174801, Nil, main.p_object, agent, paused);  }  // 87
agent_get_paused :: (main: *NavigationServer3D, agent: RID) -> bool { call_ret := cast(*bool) sys_call("NavigationServer3D", "agent_get_paused", 4155700596, bool, main.p_object, agent); return call_ret.*; }  // 88
agent_set_neighbor_distance :: (main: *NavigationServer3D, agent: RID, distance: float) { sys_call("NavigationServer3D", "agent_set_neighbor_distance", 1794382983, Nil, main.p_object, agent, distance);  }  // 89
agent_get_neighbor_distance :: (main: *NavigationServer3D, agent: RID) -> float { call_ret := cast(*float) sys_call("NavigationServer3D", "agent_get_neighbor_distance", 866169185, float, main.p_object, agent); return call_ret.*; }  // 90
agent_set_max_neighbors :: (main: *NavigationServer3D, agent: RID, count: int) { sys_call("NavigationServer3D", "agent_set_max_neighbors", 3411492887, Nil, main.p_object, agent, count);  }  // 91
agent_get_max_neighbors :: (main: *NavigationServer3D, agent: RID) -> int { call_ret := cast(*int) sys_call("NavigationServer3D", "agent_get_max_neighbors", 2198884583, int, main.p_object, agent); return call_ret.*; }  // 92
agent_set_time_horizon_agents :: (main: *NavigationServer3D, agent: RID, time_horizon: float) { sys_call("NavigationServer3D", "agent_set_time_horizon_agents", 1794382983, Nil, main.p_object, agent, time_horizon);  }  // 93
agent_get_time_horizon_agents :: (main: *NavigationServer3D, agent: RID) -> float { call_ret := cast(*float) sys_call("NavigationServer3D", "agent_get_time_horizon_agents", 866169185, float, main.p_object, agent); return call_ret.*; }  // 94
agent_set_time_horizon_obstacles :: (main: *NavigationServer3D, agent: RID, time_horizon: float) { sys_call("NavigationServer3D", "agent_set_time_horizon_obstacles", 1794382983, Nil, main.p_object, agent, time_horizon);  }  // 95
agent_get_time_horizon_obstacles :: (main: *NavigationServer3D, agent: RID) -> float { call_ret := cast(*float) sys_call("NavigationServer3D", "agent_get_time_horizon_obstacles", 866169185, float, main.p_object, agent); return call_ret.*; }  // 96
agent_set_radius :: (main: *NavigationServer3D, agent: RID, radius: float) { sys_call("NavigationServer3D", "agent_set_radius", 1794382983, Nil, main.p_object, agent, radius);  }  // 97
agent_get_radius :: (main: *NavigationServer3D, agent: RID) -> float { call_ret := cast(*float) sys_call("NavigationServer3D", "agent_get_radius", 866169185, float, main.p_object, agent); return call_ret.*; }  // 98
agent_set_height :: (main: *NavigationServer3D, agent: RID, height: float) { sys_call("NavigationServer3D", "agent_set_height", 1794382983, Nil, main.p_object, agent, height);  }  // 99
agent_get_height :: (main: *NavigationServer3D, agent: RID) -> float { call_ret := cast(*float) sys_call("NavigationServer3D", "agent_get_height", 866169185, float, main.p_object, agent); return call_ret.*; }  // 100
agent_set_max_speed :: (main: *NavigationServer3D, agent: RID, max_speed: float) { sys_call("NavigationServer3D", "agent_set_max_speed", 1794382983, Nil, main.p_object, agent, max_speed);  }  // 101
agent_get_max_speed :: (main: *NavigationServer3D, agent: RID) -> float { call_ret := cast(*float) sys_call("NavigationServer3D", "agent_get_max_speed", 866169185, float, main.p_object, agent); return call_ret.*; }  // 102
agent_set_velocity_forced :: (main: *NavigationServer3D, agent: RID, velocity: Vector3) { sys_call("NavigationServer3D", "agent_set_velocity_forced", 3227306858, Nil, main.p_object, agent, velocity);  }  // 103
agent_set_velocity :: (main: *NavigationServer3D, agent: RID, velocity: Vector3) { sys_call("NavigationServer3D", "agent_set_velocity", 3227306858, Nil, main.p_object, agent, velocity);  }  // 104
agent_get_velocity :: (main: *NavigationServer3D, agent: RID) -> Vector3 { call_ret := cast(*Vector3) sys_call("NavigationServer3D", "agent_get_velocity", 531438156, Vector3, main.p_object, agent); return call_ret.*; }  // 105
agent_set_position :: (main: *NavigationServer3D, agent: RID, position: Vector3) { sys_call("NavigationServer3D", "agent_set_position", 3227306858, Nil, main.p_object, agent, position);  }  // 106
agent_get_position :: (main: *NavigationServer3D, agent: RID) -> Vector3 { call_ret := cast(*Vector3) sys_call("NavigationServer3D", "agent_get_position", 531438156, Vector3, main.p_object, agent); return call_ret.*; }  // 107
agent_is_map_changed :: (main: *NavigationServer3D, agent: RID) -> bool { call_ret := cast(*bool) sys_call("NavigationServer3D", "agent_is_map_changed", 4155700596, bool, main.p_object, agent); return call_ret.*; }  // 108
agent_set_avoidance_callback :: (main: *NavigationServer3D, agent: RID, callback: Callable) { sys_call("NavigationServer3D", "agent_set_avoidance_callback", 3379118538, Nil, main.p_object, agent, callback);  }  // 109
agent_has_avoidance_callback :: (main: *NavigationServer3D, agent: RID) -> bool { call_ret := cast(*bool) sys_call("NavigationServer3D", "agent_has_avoidance_callback", 4155700596, bool, main.p_object, agent); return call_ret.*; }  // 110
agent_set_avoidance_layers :: (main: *NavigationServer3D, agent: RID, layers: int) { sys_call("NavigationServer3D", "agent_set_avoidance_layers", 3411492887, Nil, main.p_object, agent, layers);  }  // 111
agent_get_avoidance_layers :: (main: *NavigationServer3D, agent: RID) -> int { call_ret := cast(*int) sys_call("NavigationServer3D", "agent_get_avoidance_layers", 2198884583, int, main.p_object, agent); return call_ret.*; }  // 112
agent_set_avoidance_mask :: (main: *NavigationServer3D, agent: RID, mask: int) { sys_call("NavigationServer3D", "agent_set_avoidance_mask", 3411492887, Nil, main.p_object, agent, mask);  }  // 113
agent_get_avoidance_mask :: (main: *NavigationServer3D, agent: RID) -> int { call_ret := cast(*int) sys_call("NavigationServer3D", "agent_get_avoidance_mask", 2198884583, int, main.p_object, agent); return call_ret.*; }  // 114
agent_set_avoidance_priority :: (main: *NavigationServer3D, agent: RID, priority: float) { sys_call("NavigationServer3D", "agent_set_avoidance_priority", 1794382983, Nil, main.p_object, agent, priority);  }  // 115
agent_get_avoidance_priority :: (main: *NavigationServer3D, agent: RID) -> float { call_ret := cast(*float) sys_call("NavigationServer3D", "agent_get_avoidance_priority", 866169185, float, main.p_object, agent); return call_ret.*; }  // 116
obstacle_create :: (main: *NavigationServer3D) -> RID { call_ret := cast(*RID) sys_call("NavigationServer3D", "obstacle_create", 529393457, RID, main.p_object); return call_ret.*; }  // 117
obstacle_set_avoidance_enabled :: (main: *NavigationServer3D, obstacle: RID, enabled: bool) { sys_call("NavigationServer3D", "obstacle_set_avoidance_enabled", 1265174801, Nil, main.p_object, obstacle, enabled);  }  // 118
obstacle_get_avoidance_enabled :: (main: *NavigationServer3D, obstacle: RID) -> bool { call_ret := cast(*bool) sys_call("NavigationServer3D", "obstacle_get_avoidance_enabled", 4155700596, bool, main.p_object, obstacle); return call_ret.*; }  // 119
obstacle_set_use_3d_avoidance :: (main: *NavigationServer3D, obstacle: RID, enabled: bool) { sys_call("NavigationServer3D", "obstacle_set_use_3d_avoidance", 1265174801, Nil, main.p_object, obstacle, enabled);  }  // 120
obstacle_get_use_3d_avoidance :: (main: *NavigationServer3D, obstacle: RID) -> bool { call_ret := cast(*bool) sys_call("NavigationServer3D", "obstacle_get_use_3d_avoidance", 4155700596, bool, main.p_object, obstacle); return call_ret.*; }  // 121
obstacle_set_map :: (main: *NavigationServer3D, obstacle: RID, map: RID) { sys_call("NavigationServer3D", "obstacle_set_map", 395945892, Nil, main.p_object, obstacle, map);  }  // 122
obstacle_get_map :: (main: *NavigationServer3D, obstacle: RID) -> RID { call_ret := cast(*RID) sys_call("NavigationServer3D", "obstacle_get_map", 3814569979, RID, main.p_object, obstacle); return call_ret.*; }  // 123
obstacle_set_paused :: (main: *NavigationServer3D, obstacle: RID, paused: bool) { sys_call("NavigationServer3D", "obstacle_set_paused", 1265174801, Nil, main.p_object, obstacle, paused);  }  // 124
obstacle_get_paused :: (main: *NavigationServer3D, obstacle: RID) -> bool { call_ret := cast(*bool) sys_call("NavigationServer3D", "obstacle_get_paused", 4155700596, bool, main.p_object, obstacle); return call_ret.*; }  // 125
obstacle_set_radius :: (main: *NavigationServer3D, obstacle: RID, radius: float) { sys_call("NavigationServer3D", "obstacle_set_radius", 1794382983, Nil, main.p_object, obstacle, radius);  }  // 126
obstacle_get_radius :: (main: *NavigationServer3D, obstacle: RID) -> float { call_ret := cast(*float) sys_call("NavigationServer3D", "obstacle_get_radius", 866169185, float, main.p_object, obstacle); return call_ret.*; }  // 127
obstacle_set_height :: (main: *NavigationServer3D, obstacle: RID, height: float) { sys_call("NavigationServer3D", "obstacle_set_height", 1794382983, Nil, main.p_object, obstacle, height);  }  // 128
obstacle_get_height :: (main: *NavigationServer3D, obstacle: RID) -> float { call_ret := cast(*float) sys_call("NavigationServer3D", "obstacle_get_height", 866169185, float, main.p_object, obstacle); return call_ret.*; }  // 129
obstacle_set_velocity :: (main: *NavigationServer3D, obstacle: RID, velocity: Vector3) { sys_call("NavigationServer3D", "obstacle_set_velocity", 3227306858, Nil, main.p_object, obstacle, velocity);  }  // 130
obstacle_get_velocity :: (main: *NavigationServer3D, obstacle: RID) -> Vector3 { call_ret := cast(*Vector3) sys_call("NavigationServer3D", "obstacle_get_velocity", 531438156, Vector3, main.p_object, obstacle); return call_ret.*; }  // 131
obstacle_set_position :: (main: *NavigationServer3D, obstacle: RID, position: Vector3) { sys_call("NavigationServer3D", "obstacle_set_position", 3227306858, Nil, main.p_object, obstacle, position);  }  // 132
obstacle_get_position :: (main: *NavigationServer3D, obstacle: RID) -> Vector3 { call_ret := cast(*Vector3) sys_call("NavigationServer3D", "obstacle_get_position", 531438156, Vector3, main.p_object, obstacle); return call_ret.*; }  // 133
obstacle_set_vertices :: (main: *NavigationServer3D, obstacle: RID, vertices: PackedVector3Array) { sys_call("NavigationServer3D", "obstacle_set_vertices", 4030257846, Nil, main.p_object, obstacle, vertices);  }  // 134
obstacle_get_vertices :: (main: *NavigationServer3D, obstacle: RID) -> PackedVector3Array { call_ret := cast(*PackedVector3Array) sys_call("NavigationServer3D", "obstacle_get_vertices", 808965560, PackedVector3Array, main.p_object, obstacle); return call_ret.*; }  // 135
obstacle_set_avoidance_layers :: (main: *NavigationServer3D, obstacle: RID, layers: int) { sys_call("NavigationServer3D", "obstacle_set_avoidance_layers", 3411492887, Nil, main.p_object, obstacle, layers);  }  // 136
obstacle_get_avoidance_layers :: (main: *NavigationServer3D, obstacle: RID) -> int { call_ret := cast(*int) sys_call("NavigationServer3D", "obstacle_get_avoidance_layers", 2198884583, int, main.p_object, obstacle); return call_ret.*; }  // 137
parse_source_geometry_data :: (main: *NavigationServer3D, navigation_mesh: NavigationMesh, source_geometry_data: NavigationMeshSourceGeometryData3D, root_node: Node) { sys_call("NavigationServer3D", "parse_source_geometry_data", 3172802542, Nil, main.p_object, navigation_mesh, source_geometry_data, root_node);  }  // 138
bake_from_source_geometry_data :: (main: *NavigationServer3D, navigation_mesh: NavigationMesh, source_geometry_data: NavigationMeshSourceGeometryData3D) { sys_call("NavigationServer3D", "bake_from_source_geometry_data", 1286748856, Nil, main.p_object, navigation_mesh, source_geometry_data);  }  // 139
bake_from_source_geometry_data_async :: (main: *NavigationServer3D, navigation_mesh: NavigationMesh, source_geometry_data: NavigationMeshSourceGeometryData3D) { sys_call("NavigationServer3D", "bake_from_source_geometry_data_async", 1286748856, Nil, main.p_object, navigation_mesh, source_geometry_data);  }  // 140
is_baking_navigation_mesh :: (main: *NavigationServer3D, navigation_mesh: NavigationMesh) -> bool { call_ret := cast(*bool) sys_call("NavigationServer3D", "is_baking_navigation_mesh", 3142026141, bool, main.p_object, navigation_mesh); return call_ret.*; }  // 141
source_geometry_parser_create :: (main: *NavigationServer3D) -> RID { call_ret := cast(*RID) sys_call("NavigationServer3D", "source_geometry_parser_create", 529393457, RID, main.p_object); return call_ret.*; }  // 142
source_geometry_parser_set_callback :: (main: *NavigationServer3D, parser: RID, callback: Callable) { sys_call("NavigationServer3D", "source_geometry_parser_set_callback", 3379118538, Nil, main.p_object, parser, callback);  }  // 143
simplify_path :: (main: *NavigationServer3D, path: PackedVector3Array, epsilon: float) -> PackedVector3Array { call_ret := cast(*PackedVector3Array) sys_call("NavigationServer3D", "simplify_path", 2344122170, PackedVector3Array, main.p_object, path, epsilon); return call_ret.*; }  // 144
free_rid :: (main: *NavigationServer3D, rid: RID) { sys_call("NavigationServer3D", "free_rid", 2722037293, Nil, main.p_object, rid);  }  // 145
set_active :: (main: *NavigationServer3D, active: bool) { sys_call("NavigationServer3D", "set_active", 2586408642, Nil, main.p_object, active);  }  // 146
set_debug_enabled :: (main: *NavigationServer3D, enabled: bool) { sys_call("NavigationServer3D", "set_debug_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 147
get_debug_enabled :: (main: *NavigationServer3D) -> bool { call_ret := cast(*bool) sys_call("NavigationServer3D", "get_debug_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 148
get_process_info :: (main: *NavigationServer3D, process_info: NavigationServer3D.ProcessInfo) -> int { call_ret := cast(*int) sys_call("NavigationServer3D", "get_process_info", 1938440894, int, main.p_object, process_info); return call_ret.*; }  // 149

set_texture :: (main: *NinePatchRect, texture: Texture2D) { sys_call("NinePatchRect", "set_texture", 4051416890, Nil, main.p_object, texture);  }  // 0
get_texture :: (main: *NinePatchRect) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("NinePatchRect", "get_texture", 3635182373, Texture2D, main.p_object); return call_ret; }  // 1
set_patch_margin :: (main: *NinePatchRect, margin: Side, value: int) { sys_call("NinePatchRect", "set_patch_margin", 437707142, Nil, main.p_object, margin, value);  }  // 2
get_patch_margin :: (main: *NinePatchRect, margin: Side) -> int { call_ret := cast(*int) sys_call("NinePatchRect", "get_patch_margin", 1983885014, int, main.p_object, margin); return call_ret.*; }  // 3
set_region_rect :: (main: *NinePatchRect, rect: Rect2) { sys_call("NinePatchRect", "set_region_rect", 2046264180, Nil, main.p_object, rect);  }  // 4
get_region_rect :: (main: *NinePatchRect) -> Rect2 { call_ret := cast(*Rect2) sys_call("NinePatchRect", "get_region_rect", 1639390495, Rect2, main.p_object); return call_ret.*; }  // 5
set_draw_center :: (main: *NinePatchRect, draw_center: bool) { sys_call("NinePatchRect", "set_draw_center", 2586408642, Nil, main.p_object, draw_center);  }  // 6
is_draw_center_enabled :: (main: *NinePatchRect) -> bool { call_ret := cast(*bool) sys_call("NinePatchRect", "is_draw_center_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 7
set_h_axis_stretch_mode :: (main: *NinePatchRect, mode: NinePatchRect.AxisStretchMode) { sys_call("NinePatchRect", "set_h_axis_stretch_mode", 3219608417, Nil, main.p_object, mode);  }  // 8
get_h_axis_stretch_mode :: (main: *NinePatchRect) -> NinePatchRect.AxisStretchMode { call_ret := cast(*NinePatchRect.AxisStretchMode) sys_call("NinePatchRect", "get_h_axis_stretch_mode", 3317113799, NinePatchRect.AxisStretchMode, main.p_object); return call_ret.*; }  // 9
set_v_axis_stretch_mode :: (main: *NinePatchRect, mode: NinePatchRect.AxisStretchMode) { sys_call("NinePatchRect", "set_v_axis_stretch_mode", 3219608417, Nil, main.p_object, mode);  }  // 10
get_v_axis_stretch_mode :: (main: *NinePatchRect) -> NinePatchRect.AxisStretchMode { call_ret := cast(*NinePatchRect.AxisStretchMode) sys_call("NinePatchRect", "get_v_axis_stretch_mode", 3317113799, NinePatchRect.AxisStretchMode, main.p_object); return call_ret.*; }  // 11

print_orphan_nodes :: (main: *Node) { sys_call("Node", "print_orphan_nodes", 3218959716, Nil, main.p_object);  }  // 10
add_sibling :: (main: *Node, sibling: Node) { sys_call("Node", "add_sibling", 2570952461, Nil, main.p_object, sibling);  }  // 11
set_name :: (main: *Node, name: string) { sys_call("Node", "set_name", 83702148, Nil, main.p_object, name);  }  // 12
get_name :: (main: *Node) -> StringName { call_ret := cast(*StringName) sys_call("Node", "get_name", 2002593661, StringName, main.p_object); return call_ret.*; }  // 13
add_child :: (main: *Node, node: Node) { sys_call("Node", "add_child", 3863233950, Nil, main.p_object, node);  }  // 14
remove_child :: (main: *Node, node: Node) { sys_call("Node", "remove_child", 1078189570, Nil, main.p_object, node);  }  // 15
reparent :: (main: *Node, new_parent: Node) { sys_call("Node", "reparent", 3685795103, Nil, main.p_object, new_parent);  }  // 16
get_child_count :: (main: *Node) -> int { call_ret := cast(*int) sys_call("Node", "get_child_count", 894402480, int, main.p_object); return call_ret.*; }  // 17
get_children :: (main: *Node) -> [] Node { call_ret := cast(*[] Node) sys_call("Node", "get_children", 873284517, [] Node, main.p_object); return call_ret.*; }  // 18
get_child :: (main: *Node, idx: int) -> *Node { call_ret := cast(*Node) sys_call("Node", "get_child", 541253412, Node, main.p_object, idx); return call_ret; }  // 19
has_node :: (main: *Node, path: string) -> bool { call_ret := cast(*bool) sys_call("Node", "has_node", 861721659, bool, main.p_object, path); return call_ret.*; }  // 20
get_node :: (main: *Node, path: string) -> *Node { call_ret := cast(*Node) sys_call("Node", "get_node", 2734337346, Node, main.p_object, path); return call_ret; }  // 21
get_node_or_null :: (main: *Node, path: string) -> *Node { call_ret := cast(*Node) sys_call("Node", "get_node_or_null", 2734337346, Node, main.p_object, path); return call_ret; }  // 22
get_parent :: (main: *Node) -> *Node { call_ret := cast(*Node) sys_call("Node", "get_parent", 3160264692, Node, main.p_object); return call_ret; }  // 23
find_child :: (main: *Node, pattern: string) -> *Node { call_ret := cast(*Node) sys_call("Node", "find_child", 2008217037, Node, main.p_object, pattern); return call_ret; }  // 24
find_children :: (main: *Node, pattern: string) -> [] Node { call_ret := cast(*[] Node) sys_call("Node", "find_children", 2560337219, [] Node, main.p_object, pattern); return call_ret.*; }  // 25
find_parent :: (main: *Node, pattern: string) -> *Node { call_ret := cast(*Node) sys_call("Node", "find_parent", 1140089439, Node, main.p_object, pattern); return call_ret; }  // 26
has_node_and_resource :: (main: *Node, path: string) -> bool { call_ret := cast(*bool) sys_call("Node", "has_node_and_resource", 861721659, bool, main.p_object, path); return call_ret.*; }  // 27
get_node_and_resource :: (main: *Node, path: string) -> Array { call_ret := cast(*Array) sys_call("Node", "get_node_and_resource", 502563882, Array, main.p_object, path); return call_ret.*; }  // 28
is_inside_tree :: (main: *Node) -> bool { call_ret := cast(*bool) sys_call("Node", "is_inside_tree", 36873697, bool, main.p_object); return call_ret.*; }  // 29
is_part_of_edited_scene :: (main: *Node) -> bool { call_ret := cast(*bool) sys_call("Node", "is_part_of_edited_scene", 36873697, bool, main.p_object); return call_ret.*; }  // 30
is_ancestor_of :: (main: *Node, node: Node) -> bool { call_ret := cast(*bool) sys_call("Node", "is_ancestor_of", 3093956946, bool, main.p_object, node); return call_ret.*; }  // 31
is_greater_than :: (main: *Node, node: Node) -> bool { call_ret := cast(*bool) sys_call("Node", "is_greater_than", 3093956946, bool, main.p_object, node); return call_ret.*; }  // 32
get_path :: (main: *Node) -> NodePath { call_ret := cast(*NodePath) sys_call("Node", "get_path", 4075236667, NodePath, main.p_object); return call_ret.*; }  // 33
get_path_to :: (main: *Node, node: Node) -> NodePath { call_ret := cast(*NodePath) sys_call("Node", "get_path_to", 498846349, NodePath, main.p_object, node); return call_ret.*; }  // 34
add_to_group :: (main: *Node, group: string) { sys_call("Node", "add_to_group", 3683006648, Nil, main.p_object, group);  }  // 35
remove_from_group :: (main: *Node, group: string) { sys_call("Node", "remove_from_group", 3304788590, Nil, main.p_object, group);  }  // 36
is_in_group :: (main: *Node, group: string) -> bool { call_ret := cast(*bool) sys_call("Node", "is_in_group", 2619796661, bool, main.p_object, group); return call_ret.*; }  // 37
move_child :: (main: *Node, child_node: Node, to_index: int) { sys_call("Node", "move_child", 3315886247, Nil, main.p_object, child_node, to_index);  }  // 38
get_groups :: (main: *Node) -> [] StringName { call_ret := cast(*[] StringName) sys_call("Node", "get_groups", 3995934104, [] StringName, main.p_object); return call_ret.*; }  // 39
set_owner :: (main: *Node, owner: Node) { sys_call("Node", "set_owner", 1078189570, Nil, main.p_object, owner);  }  // 40
get_owner :: (main: *Node) -> *Node { call_ret := cast(*Node) sys_call("Node", "get_owner", 3160264692, Node, main.p_object); return call_ret; }  // 41
get_index :: (main: *Node) -> int { call_ret := cast(*int) sys_call("Node", "get_index", 894402480, int, main.p_object); return call_ret.*; }  // 42
print_tree :: (main: *Node) { sys_call("Node", "print_tree", 3218959716, Nil, main.p_object);  }  // 43
print_tree_pretty :: (main: *Node) { sys_call("Node", "print_tree_pretty", 3218959716, Nil, main.p_object);  }  // 44
get_tree_string :: (main: *Node) -> gstring { call_ret := cast(*gstring) sys_call("Node", "get_tree_string", 2841200299, gstring, main.p_object); return call_ret.*; }  // 45
get_tree_string_pretty :: (main: *Node) -> gstring { call_ret := cast(*gstring) sys_call("Node", "get_tree_string_pretty", 2841200299, gstring, main.p_object); return call_ret.*; }  // 46
set_scene_file_path :: (main: *Node, scene_file_path: string) { sys_call("Node", "set_scene_file_path", 83702148, Nil, main.p_object, scene_file_path);  }  // 47
get_scene_file_path :: (main: *Node) -> gstring { call_ret := cast(*gstring) sys_call("Node", "get_scene_file_path", 201670096, gstring, main.p_object); return call_ret.*; }  // 48
propagate_notification :: (main: *Node, what: int) { sys_call("Node", "propagate_notification", 1286410249, Nil, main.p_object, what);  }  // 49
propagate_call :: (main: *Node, method: string) { sys_call("Node", "propagate_call", 1871007965, Nil, main.p_object, method);  }  // 50
set_physics_process :: (main: *Node, enable: bool) { sys_call("Node", "set_physics_process", 2586408642, Nil, main.p_object, enable);  }  // 51
get_physics_process_delta_time :: (main: *Node) -> float { call_ret := cast(*float) sys_call("Node", "get_physics_process_delta_time", 1740695150, float, main.p_object); return call_ret.*; }  // 52
is_physics_processing :: (main: *Node) -> bool { call_ret := cast(*bool) sys_call("Node", "is_physics_processing", 36873697, bool, main.p_object); return call_ret.*; }  // 53
get_process_delta_time :: (main: *Node) -> float { call_ret := cast(*float) sys_call("Node", "get_process_delta_time", 1740695150, float, main.p_object); return call_ret.*; }  // 54
set_process :: (main: *Node, enable: bool) { sys_call("Node", "set_process", 2586408642, Nil, main.p_object, enable);  }  // 55
set_process_priority :: (main: *Node, priority: int) { sys_call("Node", "set_process_priority", 1286410249, Nil, main.p_object, priority);  }  // 56
get_process_priority :: (main: *Node) -> int { call_ret := cast(*int) sys_call("Node", "get_process_priority", 3905245786, int, main.p_object); return call_ret.*; }  // 57
set_physics_process_priority :: (main: *Node, priority: int) { sys_call("Node", "set_physics_process_priority", 1286410249, Nil, main.p_object, priority);  }  // 58
get_physics_process_priority :: (main: *Node) -> int { call_ret := cast(*int) sys_call("Node", "get_physics_process_priority", 3905245786, int, main.p_object); return call_ret.*; }  // 59
is_processing :: (main: *Node) -> bool { call_ret := cast(*bool) sys_call("Node", "is_processing", 36873697, bool, main.p_object); return call_ret.*; }  // 60
set_process_input :: (main: *Node, enable: bool) { sys_call("Node", "set_process_input", 2586408642, Nil, main.p_object, enable);  }  // 61
is_processing_input :: (main: *Node) -> bool { call_ret := cast(*bool) sys_call("Node", "is_processing_input", 36873697, bool, main.p_object); return call_ret.*; }  // 62
set_process_shortcut_input :: (main: *Node, enable: bool) { sys_call("Node", "set_process_shortcut_input", 2586408642, Nil, main.p_object, enable);  }  // 63
is_processing_shortcut_input :: (main: *Node) -> bool { call_ret := cast(*bool) sys_call("Node", "is_processing_shortcut_input", 36873697, bool, main.p_object); return call_ret.*; }  // 64
set_process_unhandled_input :: (main: *Node, enable: bool) { sys_call("Node", "set_process_unhandled_input", 2586408642, Nil, main.p_object, enable);  }  // 65
is_processing_unhandled_input :: (main: *Node) -> bool { call_ret := cast(*bool) sys_call("Node", "is_processing_unhandled_input", 36873697, bool, main.p_object); return call_ret.*; }  // 66
set_process_unhandled_key_input :: (main: *Node, enable: bool) { sys_call("Node", "set_process_unhandled_key_input", 2586408642, Nil, main.p_object, enable);  }  // 67
is_processing_unhandled_key_input :: (main: *Node) -> bool { call_ret := cast(*bool) sys_call("Node", "is_processing_unhandled_key_input", 36873697, bool, main.p_object); return call_ret.*; }  // 68
set_process_mode :: (main: *Node, mode: Node.ProcessMode) { sys_call("Node", "set_process_mode", 1841290486, Nil, main.p_object, mode);  }  // 69
get_process_mode :: (main: *Node) -> Node.ProcessMode { call_ret := cast(*Node.ProcessMode) sys_call("Node", "get_process_mode", 739966102, Node.ProcessMode, main.p_object); return call_ret.*; }  // 70
can_process :: (main: *Node) -> bool { call_ret := cast(*bool) sys_call("Node", "can_process", 36873697, bool, main.p_object); return call_ret.*; }  // 71
set_process_thread_group :: (main: *Node, mode: Node.ProcessThreadGroup) { sys_call("Node", "set_process_thread_group", 2275442745, Nil, main.p_object, mode);  }  // 72
get_process_thread_group :: (main: *Node) -> Node.ProcessThreadGroup { call_ret := cast(*Node.ProcessThreadGroup) sys_call("Node", "get_process_thread_group", 1866404740, Node.ProcessThreadGroup, main.p_object); return call_ret.*; }  // 73
set_process_thread_messages :: (main: *Node, flags: Node.ProcessThreadMessages) { sys_call("Node", "set_process_thread_messages", 1357280998, Nil, main.p_object, flags);  }  // 74
get_process_thread_messages :: (main: *Node) -> Node.ProcessThreadMessages { call_ret := cast(*Node.ProcessThreadMessages) sys_call("Node", "get_process_thread_messages", 4228993612, Node.ProcessThreadMessages, main.p_object); return call_ret.*; }  // 75
set_process_thread_group_order :: (main: *Node, order: int) { sys_call("Node", "set_process_thread_group_order", 1286410249, Nil, main.p_object, order);  }  // 76
get_process_thread_group_order :: (main: *Node) -> int { call_ret := cast(*int) sys_call("Node", "get_process_thread_group_order", 3905245786, int, main.p_object); return call_ret.*; }  // 77
set_display_folded :: (main: *Node, fold: bool) { sys_call("Node", "set_display_folded", 2586408642, Nil, main.p_object, fold);  }  // 78
is_displayed_folded :: (main: *Node) -> bool { call_ret := cast(*bool) sys_call("Node", "is_displayed_folded", 36873697, bool, main.p_object); return call_ret.*; }  // 79
set_process_internal :: (main: *Node, enable: bool) { sys_call("Node", "set_process_internal", 2586408642, Nil, main.p_object, enable);  }  // 80
is_processing_internal :: (main: *Node) -> bool { call_ret := cast(*bool) sys_call("Node", "is_processing_internal", 36873697, bool, main.p_object); return call_ret.*; }  // 81
set_physics_process_internal :: (main: *Node, enable: bool) { sys_call("Node", "set_physics_process_internal", 2586408642, Nil, main.p_object, enable);  }  // 82
is_physics_processing_internal :: (main: *Node) -> bool { call_ret := cast(*bool) sys_call("Node", "is_physics_processing_internal", 36873697, bool, main.p_object); return call_ret.*; }  // 83
set_physics_interpolation_mode :: (main: *Node, mode: Node.PhysicsInterpolationMode) { sys_call("Node", "set_physics_interpolation_mode", 3202404928, Nil, main.p_object, mode);  }  // 84
get_physics_interpolation_mode :: (main: *Node) -> Node.PhysicsInterpolationMode { call_ret := cast(*Node.PhysicsInterpolationMode) sys_call("Node", "get_physics_interpolation_mode", 2920385216, Node.PhysicsInterpolationMode, main.p_object); return call_ret.*; }  // 85
is_physics_interpolated :: (main: *Node) -> bool { call_ret := cast(*bool) sys_call("Node", "is_physics_interpolated", 36873697, bool, main.p_object); return call_ret.*; }  // 86
is_physics_interpolated_and_enabled :: (main: *Node) -> bool { call_ret := cast(*bool) sys_call("Node", "is_physics_interpolated_and_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 87
reset_physics_interpolation :: (main: *Node) { sys_call("Node", "reset_physics_interpolation", 3218959716, Nil, main.p_object);  }  // 88
set_auto_translate_mode :: (main: *Node, mode: Node.AutoTranslateMode) { sys_call("Node", "set_auto_translate_mode", 776149714, Nil, main.p_object, mode);  }  // 89
get_auto_translate_mode :: (main: *Node) -> Node.AutoTranslateMode { call_ret := cast(*Node.AutoTranslateMode) sys_call("Node", "get_auto_translate_mode", 2498906432, Node.AutoTranslateMode, main.p_object); return call_ret.*; }  // 90
set_translation_domain_inherited :: (main: *Node) { sys_call("Node", "set_translation_domain_inherited", 3218959716, Nil, main.p_object);  }  // 91
get_window :: (main: *Node) -> *Window { call_ret := cast(*Window) sys_call("Node", "get_window", 1757182445, Window, main.p_object); return call_ret; }  // 92
get_last_exclusive_window :: (main: *Node) -> *Window { call_ret := cast(*Window) sys_call("Node", "get_last_exclusive_window", 1757182445, Window, main.p_object); return call_ret; }  // 93
get_tree :: (main: *Node) -> *SceneTree { call_ret := cast(*SceneTree) sys_call("Node", "get_tree", 2958820483, SceneTree, main.p_object); return call_ret; }  // 94
create_tween :: (main: *Node) -> *Tween { call_ret := cast(*Tween) sys_call("Node", "create_tween", 3426978995, Tween, main.p_object); return call_ret; }  // 95
duplicate :: (main: *Node) -> *Node { call_ret := cast(*Node) sys_call("Node", "duplicate", 3511555459, Node, main.p_object); return call_ret; }  // 96
replace_by :: (main: *Node, node: Node) { sys_call("Node", "replace_by", 2570952461, Nil, main.p_object, node);  }  // 97
set_scene_instance_load_placeholder :: (main: *Node, load_placeholder: bool) { sys_call("Node", "set_scene_instance_load_placeholder", 2586408642, Nil, main.p_object, load_placeholder);  }  // 98
get_scene_instance_load_placeholder :: (main: *Node) -> bool { call_ret := cast(*bool) sys_call("Node", "get_scene_instance_load_placeholder", 36873697, bool, main.p_object); return call_ret.*; }  // 99
set_editable_instance :: (main: *Node, node: Node, is_editable: bool) { sys_call("Node", "set_editable_instance", 2731852923, Nil, main.p_object, node, is_editable);  }  // 100
is_editable_instance :: (main: *Node, node: Node) -> bool { call_ret := cast(*bool) sys_call("Node", "is_editable_instance", 3093956946, bool, main.p_object, node); return call_ret.*; }  // 101
get_viewport :: (main: *Node) -> *Viewport { call_ret := cast(*Viewport) sys_call("Node", "get_viewport", 3596683776, Viewport, main.p_object); return call_ret; }  // 102
queue_free :: (main: *Node) { sys_call("Node", "queue_free", 3218959716, Nil, main.p_object);  }  // 103
request_ready :: (main: *Node) { sys_call("Node", "request_ready", 3218959716, Nil, main.p_object);  }  // 104
is_node_ready :: (main: *Node) -> bool { call_ret := cast(*bool) sys_call("Node", "is_node_ready", 36873697, bool, main.p_object); return call_ret.*; }  // 105
set_multiplayer_authority :: (main: *Node, id: int) { sys_call("Node", "set_multiplayer_authority", 972357352, Nil, main.p_object, id);  }  // 106
get_multiplayer_authority :: (main: *Node) -> int { call_ret := cast(*int) sys_call("Node", "get_multiplayer_authority", 3905245786, int, main.p_object); return call_ret.*; }  // 107
is_multiplayer_authority :: (main: *Node) -> bool { call_ret := cast(*bool) sys_call("Node", "is_multiplayer_authority", 36873697, bool, main.p_object); return call_ret.*; }  // 108
get_multiplayer :: (main: *Node) -> *MultiplayerAPI { call_ret := cast(*MultiplayerAPI) sys_call("Node", "get_multiplayer", 406750475, MultiplayerAPI, main.p_object); return call_ret; }  // 109
rpc_config :: (main: *Node, method: string, config: Variant) { sys_call("Node", "rpc_config", 3776071444, Nil, main.p_object, method, config);  }  // 110
get_rpc_config :: (main: *Node) -> Variant { call_ret := cast(*Variant) sys_call("Node", "get_rpc_config", 1214101251, Variant, main.p_object); return call_ret.*; }  // 111
set_editor_description :: (main: *Node, editor_description: string) { sys_call("Node", "set_editor_description", 83702148, Nil, main.p_object, editor_description);  }  // 112
get_editor_description :: (main: *Node) -> gstring { call_ret := cast(*gstring) sys_call("Node", "get_editor_description", 201670096, gstring, main.p_object); return call_ret.*; }  // 113
set_unique_name_in_owner :: (main: *Node, enable: bool) { sys_call("Node", "set_unique_name_in_owner", 2586408642, Nil, main.p_object, enable);  }  // 114
is_unique_name_in_owner :: (main: *Node) -> bool { call_ret := cast(*bool) sys_call("Node", "is_unique_name_in_owner", 36873697, bool, main.p_object); return call_ret.*; }  // 115
atr :: (main: *Node, message: string) -> gstring { call_ret := cast(*gstring) sys_call("Node", "atr", 3344478075, gstring, main.p_object, message); return call_ret.*; }  // 116
atr_n :: (main: *Node, message: string, plural_message: string, n: int) -> gstring { call_ret := cast(*gstring) sys_call("Node", "atr_n", 259354841, gstring, main.p_object, message, plural_message, n); return call_ret.*; }  // 117
rpc :: (main: *Node, method: string) -> Error { call_ret := cast(*Error) sys_call("Node", "rpc", 4047867050, Error, main.p_object, method); return call_ret.*; }  // 118
rpc_id :: (main: *Node, peer_id: int, method: string) -> Error { call_ret := cast(*Error) sys_call("Node", "rpc_id", 361499283, Error, main.p_object, peer_id, method); return call_ret.*; }  // 119
update_configuration_warnings :: (main: *Node) { sys_call("Node", "update_configuration_warnings", 3218959716, Nil, main.p_object);  }  // 120
call_deferred_thread_group :: (main: *Node, method: string) -> Variant { call_ret := cast(*Variant) sys_call("Node", "call_deferred_thread_group", 3400424181, Variant, main.p_object, method); return call_ret.*; }  // 121
set_deferred_thread_group :: (main: *Node, property: string, value: Variant) { sys_call("Node", "set_deferred_thread_group", 3776071444, Nil, main.p_object, property, value);  }  // 122
notify_deferred_thread_group :: (main: *Node, what: int) { sys_call("Node", "notify_deferred_thread_group", 1286410249, Nil, main.p_object, what);  }  // 123
call_thread_safe :: (main: *Node, method: string) -> Variant { call_ret := cast(*Variant) sys_call("Node", "call_thread_safe", 3400424181, Variant, main.p_object, method); return call_ret.*; }  // 124
set_thread_safe :: (main: *Node, property: string, value: Variant) { sys_call("Node", "set_thread_safe", 3776071444, Nil, main.p_object, property, value);  }  // 125
notify_thread_safe :: (main: *Node, what: int) { sys_call("Node", "notify_thread_safe", 1286410249, Nil, main.p_object, what);  }  // 126

set_position :: (main: *Node2D, position: Vector2) { sys_call("Node2D", "set_position", 743155724, Nil, main.p_object, position);  }  // 0
set_rotation :: (main: *Node2D, radians: float) { sys_call("Node2D", "set_rotation", 373806689, Nil, main.p_object, radians);  }  // 1
set_rotation_degrees :: (main: *Node2D, degrees: float) { sys_call("Node2D", "set_rotation_degrees", 373806689, Nil, main.p_object, degrees);  }  // 2
set_skew :: (main: *Node2D, radians: float) { sys_call("Node2D", "set_skew", 373806689, Nil, main.p_object, radians);  }  // 3
set_scale :: (main: *Node2D, scale: Vector2) { sys_call("Node2D", "set_scale", 743155724, Nil, main.p_object, scale);  }  // 4
get_position :: (main: *Node2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("Node2D", "get_position", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 5
get_rotation :: (main: *Node2D) -> float { call_ret := cast(*float) sys_call("Node2D", "get_rotation", 1740695150, float, main.p_object); return call_ret.*; }  // 6
get_rotation_degrees :: (main: *Node2D) -> float { call_ret := cast(*float) sys_call("Node2D", "get_rotation_degrees", 1740695150, float, main.p_object); return call_ret.*; }  // 7
get_skew :: (main: *Node2D) -> float { call_ret := cast(*float) sys_call("Node2D", "get_skew", 1740695150, float, main.p_object); return call_ret.*; }  // 8
get_scale :: (main: *Node2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("Node2D", "get_scale", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 9
rotate :: (main: *Node2D, radians: float) { sys_call("Node2D", "rotate", 373806689, Nil, main.p_object, radians);  }  // 10
move_local_x :: (main: *Node2D, delta: float) { sys_call("Node2D", "move_local_x", 2087892650, Nil, main.p_object, delta);  }  // 11
move_local_y :: (main: *Node2D, delta: float) { sys_call("Node2D", "move_local_y", 2087892650, Nil, main.p_object, delta);  }  // 12
translate :: (main: *Node2D, offset: Vector2) { sys_call("Node2D", "translate", 743155724, Nil, main.p_object, offset);  }  // 13
global_translate :: (main: *Node2D, offset: Vector2) { sys_call("Node2D", "global_translate", 743155724, Nil, main.p_object, offset);  }  // 14
apply_scale :: (main: *Node2D, ratio: Vector2) { sys_call("Node2D", "apply_scale", 743155724, Nil, main.p_object, ratio);  }  // 15
set_global_position :: (main: *Node2D, position: Vector2) { sys_call("Node2D", "set_global_position", 743155724, Nil, main.p_object, position);  }  // 16
get_global_position :: (main: *Node2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("Node2D", "get_global_position", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 17
set_global_rotation :: (main: *Node2D, radians: float) { sys_call("Node2D", "set_global_rotation", 373806689, Nil, main.p_object, radians);  }  // 18
set_global_rotation_degrees :: (main: *Node2D, degrees: float) { sys_call("Node2D", "set_global_rotation_degrees", 373806689, Nil, main.p_object, degrees);  }  // 19
get_global_rotation :: (main: *Node2D) -> float { call_ret := cast(*float) sys_call("Node2D", "get_global_rotation", 1740695150, float, main.p_object); return call_ret.*; }  // 20
get_global_rotation_degrees :: (main: *Node2D) -> float { call_ret := cast(*float) sys_call("Node2D", "get_global_rotation_degrees", 1740695150, float, main.p_object); return call_ret.*; }  // 21
set_global_skew :: (main: *Node2D, radians: float) { sys_call("Node2D", "set_global_skew", 373806689, Nil, main.p_object, radians);  }  // 22
get_global_skew :: (main: *Node2D) -> float { call_ret := cast(*float) sys_call("Node2D", "get_global_skew", 1740695150, float, main.p_object); return call_ret.*; }  // 23
set_global_scale :: (main: *Node2D, scale: Vector2) { sys_call("Node2D", "set_global_scale", 743155724, Nil, main.p_object, scale);  }  // 24
get_global_scale :: (main: *Node2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("Node2D", "get_global_scale", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 25
set_transform :: (main: *Node2D, xform: Transform2D) { sys_call("Node2D", "set_transform", 2761652528, Nil, main.p_object, xform);  }  // 26
set_global_transform :: (main: *Node2D, xform: Transform2D) { sys_call("Node2D", "set_global_transform", 2761652528, Nil, main.p_object, xform);  }  // 27
look_at :: (main: *Node2D, point: Vector2) { sys_call("Node2D", "look_at", 743155724, Nil, main.p_object, point);  }  // 28
get_angle_to :: (main: *Node2D, point: Vector2) -> float { call_ret := cast(*float) sys_call("Node2D", "get_angle_to", 2276447920, float, main.p_object, point); return call_ret.*; }  // 29
to_local :: (main: *Node2D, global_point: Vector2) -> Vector2 { call_ret := cast(*Vector2) sys_call("Node2D", "to_local", 2656412154, Vector2, main.p_object, global_point); return call_ret.*; }  // 30
to_global :: (main: *Node2D, local_point: Vector2) -> Vector2 { call_ret := cast(*Vector2) sys_call("Node2D", "to_global", 2656412154, Vector2, main.p_object, local_point); return call_ret.*; }  // 31
get_relative_transform_to_parent :: (main: *Node2D, parent: Node) -> Transform2D { call_ret := cast(*Transform2D) sys_call("Node2D", "get_relative_transform_to_parent", 904556875, Transform2D, main.p_object, parent); return call_ret.*; }  // 32

set_transform :: (main: *Node3D, local: Transform3D) { sys_call("Node3D", "set_transform", 2952846383, Nil, main.p_object, local);  }  // 0
get_transform :: (main: *Node3D) -> Transform3D { call_ret := cast(*Transform3D) sys_call("Node3D", "get_transform", 3229777777, Transform3D, main.p_object); return call_ret.*; }  // 1
set_position :: (main: *Node3D, position: Vector3) { sys_call("Node3D", "set_position", 3460891852, Nil, main.p_object, position);  }  // 2
get_position :: (main: *Node3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("Node3D", "get_position", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 3
set_rotation :: (main: *Node3D, euler_radians: Vector3) { sys_call("Node3D", "set_rotation", 3460891852, Nil, main.p_object, euler_radians);  }  // 4
get_rotation :: (main: *Node3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("Node3D", "get_rotation", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 5
set_rotation_degrees :: (main: *Node3D, euler_degrees: Vector3) { sys_call("Node3D", "set_rotation_degrees", 3460891852, Nil, main.p_object, euler_degrees);  }  // 6
get_rotation_degrees :: (main: *Node3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("Node3D", "get_rotation_degrees", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 7
set_rotation_order :: (main: *Node3D, order: EulerOrder) { sys_call("Node3D", "set_rotation_order", 1820889989, Nil, main.p_object, order);  }  // 8
get_rotation_order :: (main: *Node3D) -> EulerOrder { call_ret := cast(*EulerOrder) sys_call("Node3D", "get_rotation_order", 916939469, EulerOrder, main.p_object); return call_ret.*; }  // 9
set_rotation_edit_mode :: (main: *Node3D, edit_mode: Node3D.RotationEditMode) { sys_call("Node3D", "set_rotation_edit_mode", 141483330, Nil, main.p_object, edit_mode);  }  // 10
get_rotation_edit_mode :: (main: *Node3D) -> Node3D.RotationEditMode { call_ret := cast(*Node3D.RotationEditMode) sys_call("Node3D", "get_rotation_edit_mode", 1572188370, Node3D.RotationEditMode, main.p_object); return call_ret.*; }  // 11
set_scale :: (main: *Node3D, scale: Vector3) { sys_call("Node3D", "set_scale", 3460891852, Nil, main.p_object, scale);  }  // 12
get_scale :: (main: *Node3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("Node3D", "get_scale", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 13
set_quaternion :: (main: *Node3D, quaternion: Quaternion) { sys_call("Node3D", "set_quaternion", 1727505552, Nil, main.p_object, quaternion);  }  // 14
get_quaternion :: (main: *Node3D) -> Quaternion { call_ret := cast(*Quaternion) sys_call("Node3D", "get_quaternion", 1222331677, Quaternion, main.p_object); return call_ret.*; }  // 15
set_basis :: (main: *Node3D, basis: Basis) { sys_call("Node3D", "set_basis", 1055510324, Nil, main.p_object, basis);  }  // 16
get_basis :: (main: *Node3D) -> Basis { call_ret := cast(*Basis) sys_call("Node3D", "get_basis", 2716978435, Basis, main.p_object); return call_ret.*; }  // 17
set_global_transform :: (main: *Node3D, global: Transform3D) { sys_call("Node3D", "set_global_transform", 2952846383, Nil, main.p_object, global);  }  // 18
get_global_transform :: (main: *Node3D) -> Transform3D { call_ret := cast(*Transform3D) sys_call("Node3D", "get_global_transform", 3229777777, Transform3D, main.p_object); return call_ret.*; }  // 19
get_global_transform_interpolated :: (main: *Node3D) -> Transform3D { call_ret := cast(*Transform3D) sys_call("Node3D", "get_global_transform_interpolated", 4183770049, Transform3D, main.p_object); return call_ret.*; }  // 20
set_global_position :: (main: *Node3D, position: Vector3) { sys_call("Node3D", "set_global_position", 3460891852, Nil, main.p_object, position);  }  // 21
get_global_position :: (main: *Node3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("Node3D", "get_global_position", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 22
set_global_basis :: (main: *Node3D, basis: Basis) { sys_call("Node3D", "set_global_basis", 1055510324, Nil, main.p_object, basis);  }  // 23
get_global_basis :: (main: *Node3D) -> Basis { call_ret := cast(*Basis) sys_call("Node3D", "get_global_basis", 2716978435, Basis, main.p_object); return call_ret.*; }  // 24
set_global_rotation :: (main: *Node3D, euler_radians: Vector3) { sys_call("Node3D", "set_global_rotation", 3460891852, Nil, main.p_object, euler_radians);  }  // 25
get_global_rotation :: (main: *Node3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("Node3D", "get_global_rotation", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 26
set_global_rotation_degrees :: (main: *Node3D, euler_degrees: Vector3) { sys_call("Node3D", "set_global_rotation_degrees", 3460891852, Nil, main.p_object, euler_degrees);  }  // 27
get_global_rotation_degrees :: (main: *Node3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("Node3D", "get_global_rotation_degrees", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 28
get_parent_node_3d :: (main: *Node3D) -> *Node3D { call_ret := cast(*Node3D) sys_call("Node3D", "get_parent_node_3d", 151077316, Node3D, main.p_object); return call_ret; }  // 29
set_ignore_transform_notification :: (main: *Node3D, enabled: bool) { sys_call("Node3D", "set_ignore_transform_notification", 2586408642, Nil, main.p_object, enabled);  }  // 30
set_as_top_level :: (main: *Node3D, enable: bool) { sys_call("Node3D", "set_as_top_level", 2586408642, Nil, main.p_object, enable);  }  // 31
is_set_as_top_level :: (main: *Node3D) -> bool { call_ret := cast(*bool) sys_call("Node3D", "is_set_as_top_level", 36873697, bool, main.p_object); return call_ret.*; }  // 32
set_disable_scale :: (main: *Node3D, disable: bool) { sys_call("Node3D", "set_disable_scale", 2586408642, Nil, main.p_object, disable);  }  // 33
is_scale_disabled :: (main: *Node3D) -> bool { call_ret := cast(*bool) sys_call("Node3D", "is_scale_disabled", 36873697, bool, main.p_object); return call_ret.*; }  // 34
get_world_3d :: (main: *Node3D) -> *World3D { call_ret := cast(*World3D) sys_call("Node3D", "get_world_3d", 317588385, World3D, main.p_object); return call_ret; }  // 35
force_update_transform :: (main: *Node3D) { sys_call("Node3D", "force_update_transform", 3218959716, Nil, main.p_object);  }  // 36
set_visibility_parent :: (main: *Node3D, path: string) { sys_call("Node3D", "set_visibility_parent", 1348162250, Nil, main.p_object, path);  }  // 37
get_visibility_parent :: (main: *Node3D) -> NodePath { call_ret := cast(*NodePath) sys_call("Node3D", "get_visibility_parent", 4075236667, NodePath, main.p_object); return call_ret.*; }  // 38
update_gizmos :: (main: *Node3D) { sys_call("Node3D", "update_gizmos", 3218959716, Nil, main.p_object);  }  // 39
add_gizmo :: (main: *Node3D, gizmo: Node3DGizmo) { sys_call("Node3D", "add_gizmo", 1544533845, Nil, main.p_object, gizmo);  }  // 40
get_gizmos :: (main: *Node3D) -> [] Node3DGizmo { call_ret := cast(*[] Node3DGizmo) sys_call("Node3D", "get_gizmos", 3995934104, [] Node3DGizmo, main.p_object); return call_ret.*; }  // 41
clear_gizmos :: (main: *Node3D) { sys_call("Node3D", "clear_gizmos", 3218959716, Nil, main.p_object);  }  // 42
set_subgizmo_selection :: (main: *Node3D, gizmo: Node3DGizmo, id: int, transform: Transform3D) { sys_call("Node3D", "set_subgizmo_selection", 3317607635, Nil, main.p_object, gizmo, id, transform);  }  // 43
clear_subgizmo_selection :: (main: *Node3D) { sys_call("Node3D", "clear_subgizmo_selection", 3218959716, Nil, main.p_object);  }  // 44
set_visible :: (main: *Node3D, visible: bool) { sys_call("Node3D", "set_visible", 2586408642, Nil, main.p_object, visible);  }  // 45
is_visible :: (main: *Node3D) -> bool { call_ret := cast(*bool) sys_call("Node3D", "is_visible", 36873697, bool, main.p_object); return call_ret.*; }  // 46
is_visible_in_tree :: (main: *Node3D) -> bool { call_ret := cast(*bool) sys_call("Node3D", "is_visible_in_tree", 36873697, bool, main.p_object); return call_ret.*; }  // 47
show :: (main: *Node3D) { sys_call("Node3D", "show", 3218959716, Nil, main.p_object);  }  // 48
hide :: (main: *Node3D) { sys_call("Node3D", "hide", 3218959716, Nil, main.p_object);  }  // 49
set_notify_local_transform :: (main: *Node3D, enable: bool) { sys_call("Node3D", "set_notify_local_transform", 2586408642, Nil, main.p_object, enable);  }  // 50
is_local_transform_notification_enabled :: (main: *Node3D) -> bool { call_ret := cast(*bool) sys_call("Node3D", "is_local_transform_notification_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 51
set_notify_transform :: (main: *Node3D, enable: bool) { sys_call("Node3D", "set_notify_transform", 2586408642, Nil, main.p_object, enable);  }  // 52
is_transform_notification_enabled :: (main: *Node3D) -> bool { call_ret := cast(*bool) sys_call("Node3D", "is_transform_notification_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 53
rotate :: (main: *Node3D, axis: Vector3, angle: float) { sys_call("Node3D", "rotate", 3436291937, Nil, main.p_object, axis, angle);  }  // 54
global_rotate :: (main: *Node3D, axis: Vector3, angle: float) { sys_call("Node3D", "global_rotate", 3436291937, Nil, main.p_object, axis, angle);  }  // 55
global_scale :: (main: *Node3D, scale: Vector3) { sys_call("Node3D", "global_scale", 3460891852, Nil, main.p_object, scale);  }  // 56
global_translate :: (main: *Node3D, offset: Vector3) { sys_call("Node3D", "global_translate", 3460891852, Nil, main.p_object, offset);  }  // 57
rotate_object_local :: (main: *Node3D, axis: Vector3, angle: float) { sys_call("Node3D", "rotate_object_local", 3436291937, Nil, main.p_object, axis, angle);  }  // 58
scale_object_local :: (main: *Node3D, scale: Vector3) { sys_call("Node3D", "scale_object_local", 3460891852, Nil, main.p_object, scale);  }  // 59
translate_object_local :: (main: *Node3D, offset: Vector3) { sys_call("Node3D", "translate_object_local", 3460891852, Nil, main.p_object, offset);  }  // 60
rotate_x :: (main: *Node3D, angle: float) { sys_call("Node3D", "rotate_x", 373806689, Nil, main.p_object, angle);  }  // 61
rotate_y :: (main: *Node3D, angle: float) { sys_call("Node3D", "rotate_y", 373806689, Nil, main.p_object, angle);  }  // 62
rotate_z :: (main: *Node3D, angle: float) { sys_call("Node3D", "rotate_z", 373806689, Nil, main.p_object, angle);  }  // 63
translate :: (main: *Node3D, offset: Vector3) { sys_call("Node3D", "translate", 3460891852, Nil, main.p_object, offset);  }  // 64
orthonormalize :: (main: *Node3D) { sys_call("Node3D", "orthonormalize", 3218959716, Nil, main.p_object);  }  // 65
set_identity :: (main: *Node3D) { sys_call("Node3D", "set_identity", 3218959716, Nil, main.p_object);  }  // 66
look_at :: (main: *Node3D, target: Vector3) { sys_call("Node3D", "look_at", 2882425029, Nil, main.p_object, target);  }  // 67
look_at_from_position :: (main: *Node3D, position: Vector3, target: Vector3) { sys_call("Node3D", "look_at_from_position", 2086826090, Nil, main.p_object, position, target);  }  // 68
to_local :: (main: *Node3D, global_point: Vector3) -> Vector3 { call_ret := cast(*Vector3) sys_call("Node3D", "to_local", 192990374, Vector3, main.p_object, global_point); return call_ret.*; }  // 69
to_global :: (main: *Node3D, local_point: Vector3) -> Vector3 { call_ret := cast(*Vector3) sys_call("Node3D", "to_global", 192990374, Vector3, main.p_object, local_point); return call_ret.*; }  // 70


get_noise_1d :: (main: *Noise, x: float) -> float { call_ret := cast(*float) sys_call("Noise", "get_noise_1d", 3919130443, float, main.p_object, x); return call_ret.*; }  // 0
get_noise_2d :: (main: *Noise, x: float, y: float) -> float { call_ret := cast(*float) sys_call("Noise", "get_noise_2d", 2753205203, float, main.p_object, x, y); return call_ret.*; }  // 1
get_noise_2dv :: (main: *Noise, v: Vector2) -> float { call_ret := cast(*float) sys_call("Noise", "get_noise_2dv", 2276447920, float, main.p_object, v); return call_ret.*; }  // 2
get_noise_3d :: (main: *Noise, x: float, y: float, z: float) -> float { call_ret := cast(*float) sys_call("Noise", "get_noise_3d", 973811851, float, main.p_object, x, y, z); return call_ret.*; }  // 3
get_noise_3dv :: (main: *Noise, v: Vector3) -> float { call_ret := cast(*float) sys_call("Noise", "get_noise_3dv", 1109078154, float, main.p_object, v); return call_ret.*; }  // 4
get_image :: (main: *Noise, width: int, height: int) -> *Image { call_ret := cast(*Image) sys_call("Noise", "get_image", 3180683109, Image, main.p_object, width, height); return call_ret; }  // 5
get_seamless_image :: (main: *Noise, width: int, height: int) -> *Image { call_ret := cast(*Image) sys_call("Noise", "get_seamless_image", 2770743602, Image, main.p_object, width, height); return call_ret; }  // 6
get_image_3d :: (main: *Noise, width: int, height: int, depth: int) -> [] Image { call_ret := cast(*[] Image) sys_call("Noise", "get_image_3d", 3977814329, [] Image, main.p_object, width, height, depth); return call_ret.*; }  // 7
get_seamless_image_3d :: (main: *Noise, width: int, height: int, depth: int) -> [] Image { call_ret := cast(*[] Image) sys_call("Noise", "get_seamless_image_3d", 451006340, [] Image, main.p_object, width, height, depth); return call_ret.*; }  // 8

set_width :: (main: *NoiseTexture2D, width: int) { sys_call("NoiseTexture2D", "set_width", 1286410249, Nil, main.p_object, width);  }  // 0
set_height :: (main: *NoiseTexture2D, height: int) { sys_call("NoiseTexture2D", "set_height", 1286410249, Nil, main.p_object, height);  }  // 1
set_invert :: (main: *NoiseTexture2D, invert: bool) { sys_call("NoiseTexture2D", "set_invert", 2586408642, Nil, main.p_object, invert);  }  // 2
get_invert :: (main: *NoiseTexture2D) -> bool { call_ret := cast(*bool) sys_call("NoiseTexture2D", "get_invert", 36873697, bool, main.p_object); return call_ret.*; }  // 3
set_in_3d_space :: (main: *NoiseTexture2D, enable: bool) { sys_call("NoiseTexture2D", "set_in_3d_space", 2586408642, Nil, main.p_object, enable);  }  // 4
is_in_3d_space :: (main: *NoiseTexture2D) -> bool { call_ret := cast(*bool) sys_call("NoiseTexture2D", "is_in_3d_space", 36873697, bool, main.p_object); return call_ret.*; }  // 5
set_generate_mipmaps :: (main: *NoiseTexture2D, invert: bool) { sys_call("NoiseTexture2D", "set_generate_mipmaps", 2586408642, Nil, main.p_object, invert);  }  // 6
is_generating_mipmaps :: (main: *NoiseTexture2D) -> bool { call_ret := cast(*bool) sys_call("NoiseTexture2D", "is_generating_mipmaps", 36873697, bool, main.p_object); return call_ret.*; }  // 7
set_seamless :: (main: *NoiseTexture2D, seamless: bool) { sys_call("NoiseTexture2D", "set_seamless", 2586408642, Nil, main.p_object, seamless);  }  // 8
get_seamless :: (main: *NoiseTexture2D) -> bool { call_ret := cast(*bool) sys_call("NoiseTexture2D", "get_seamless", 2240911060, bool, main.p_object); return call_ret.*; }  // 9
set_seamless_blend_skirt :: (main: *NoiseTexture2D, seamless_blend_skirt: float) { sys_call("NoiseTexture2D", "set_seamless_blend_skirt", 373806689, Nil, main.p_object, seamless_blend_skirt);  }  // 10
get_seamless_blend_skirt :: (main: *NoiseTexture2D) -> float { call_ret := cast(*float) sys_call("NoiseTexture2D", "get_seamless_blend_skirt", 191475506, float, main.p_object); return call_ret.*; }  // 11
set_as_normal_map :: (main: *NoiseTexture2D, as_normal_map: bool) { sys_call("NoiseTexture2D", "set_as_normal_map", 2586408642, Nil, main.p_object, as_normal_map);  }  // 12
is_normal_map :: (main: *NoiseTexture2D) -> bool { call_ret := cast(*bool) sys_call("NoiseTexture2D", "is_normal_map", 2240911060, bool, main.p_object); return call_ret.*; }  // 13
set_bump_strength :: (main: *NoiseTexture2D, bump_strength: float) { sys_call("NoiseTexture2D", "set_bump_strength", 373806689, Nil, main.p_object, bump_strength);  }  // 14
get_bump_strength :: (main: *NoiseTexture2D) -> float { call_ret := cast(*float) sys_call("NoiseTexture2D", "get_bump_strength", 191475506, float, main.p_object); return call_ret.*; }  // 15
set_normalize :: (main: *NoiseTexture2D, normalize: bool) { sys_call("NoiseTexture2D", "set_normalize", 2586408642, Nil, main.p_object, normalize);  }  // 16
is_normalized :: (main: *NoiseTexture2D) -> bool { call_ret := cast(*bool) sys_call("NoiseTexture2D", "is_normalized", 36873697, bool, main.p_object); return call_ret.*; }  // 17
set_color_ramp :: (main: *NoiseTexture2D, gradient: Gradient) { sys_call("NoiseTexture2D", "set_color_ramp", 2756054477, Nil, main.p_object, gradient);  }  // 18
get_color_ramp :: (main: *NoiseTexture2D) -> *Gradient { call_ret := cast(*Gradient) sys_call("NoiseTexture2D", "get_color_ramp", 132272999, Gradient, main.p_object); return call_ret; }  // 19
set_noise :: (main: *NoiseTexture2D, noise: Noise) { sys_call("NoiseTexture2D", "set_noise", 4135492439, Nil, main.p_object, noise);  }  // 20
get_noise :: (main: *NoiseTexture2D) -> *Noise { call_ret := cast(*Noise) sys_call("NoiseTexture2D", "get_noise", 185851837, Noise, main.p_object); return call_ret; }  // 21

set_width :: (main: *NoiseTexture3D, width: int) { sys_call("NoiseTexture3D", "set_width", 1286410249, Nil, main.p_object, width);  }  // 0
set_height :: (main: *NoiseTexture3D, height: int) { sys_call("NoiseTexture3D", "set_height", 1286410249, Nil, main.p_object, height);  }  // 1
set_depth :: (main: *NoiseTexture3D, depth: int) { sys_call("NoiseTexture3D", "set_depth", 1286410249, Nil, main.p_object, depth);  }  // 2
set_invert :: (main: *NoiseTexture3D, invert: bool) { sys_call("NoiseTexture3D", "set_invert", 2586408642, Nil, main.p_object, invert);  }  // 3
get_invert :: (main: *NoiseTexture3D) -> bool { call_ret := cast(*bool) sys_call("NoiseTexture3D", "get_invert", 36873697, bool, main.p_object); return call_ret.*; }  // 4
set_seamless :: (main: *NoiseTexture3D, seamless: bool) { sys_call("NoiseTexture3D", "set_seamless", 2586408642, Nil, main.p_object, seamless);  }  // 5
get_seamless :: (main: *NoiseTexture3D) -> bool { call_ret := cast(*bool) sys_call("NoiseTexture3D", "get_seamless", 2240911060, bool, main.p_object); return call_ret.*; }  // 6
set_seamless_blend_skirt :: (main: *NoiseTexture3D, seamless_blend_skirt: float) { sys_call("NoiseTexture3D", "set_seamless_blend_skirt", 373806689, Nil, main.p_object, seamless_blend_skirt);  }  // 7
get_seamless_blend_skirt :: (main: *NoiseTexture3D) -> float { call_ret := cast(*float) sys_call("NoiseTexture3D", "get_seamless_blend_skirt", 191475506, float, main.p_object); return call_ret.*; }  // 8
set_normalize :: (main: *NoiseTexture3D, normalize: bool) { sys_call("NoiseTexture3D", "set_normalize", 2586408642, Nil, main.p_object, normalize);  }  // 9
is_normalized :: (main: *NoiseTexture3D) -> bool { call_ret := cast(*bool) sys_call("NoiseTexture3D", "is_normalized", 36873697, bool, main.p_object); return call_ret.*; }  // 10
set_color_ramp :: (main: *NoiseTexture3D, gradient: Gradient) { sys_call("NoiseTexture3D", "set_color_ramp", 2756054477, Nil, main.p_object, gradient);  }  // 11
get_color_ramp :: (main: *NoiseTexture3D) -> *Gradient { call_ret := cast(*Gradient) sys_call("NoiseTexture3D", "get_color_ramp", 132272999, Gradient, main.p_object); return call_ret; }  // 12
set_noise :: (main: *NoiseTexture3D, noise: Noise) { sys_call("NoiseTexture3D", "set_noise", 4135492439, Nil, main.p_object, noise);  }  // 13
get_noise :: (main: *NoiseTexture3D) -> *Noise { call_ret := cast(*Noise) sys_call("NoiseTexture3D", "get_noise", 185851837, Noise, main.p_object); return call_ret; }  // 14


get_entropy :: (main: *OS, size: int) -> PackedByteArray { call_ret := cast(*PackedByteArray) sys_call("OS", "get_entropy", 47165747, PackedByteArray, main.p_object, size); return call_ret.*; }  // 0
get_system_ca_certificates :: (main: *OS) -> gstring { call_ret := cast(*gstring) sys_call("OS", "get_system_ca_certificates", 2841200299, gstring, main.p_object); return call_ret.*; }  // 1
get_connected_midi_inputs :: (main: *OS) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("OS", "get_connected_midi_inputs", 2981934095, PackedStringArray, main.p_object); return call_ret.*; }  // 2
open_midi_inputs :: (main: *OS) { sys_call("OS", "open_midi_inputs", 3218959716, Nil, main.p_object);  }  // 3
close_midi_inputs :: (main: *OS) { sys_call("OS", "close_midi_inputs", 3218959716, Nil, main.p_object);  }  // 4
alert :: (main: *OS, text: string) { sys_call("OS", "alert", 1783970740, Nil, main.p_object, text);  }  // 5
crash :: (main: *OS, message: string) { sys_call("OS", "crash", 83702148, Nil, main.p_object, message);  }  // 6
set_low_processor_usage_mode :: (main: *OS, enable: bool) { sys_call("OS", "set_low_processor_usage_mode", 2586408642, Nil, main.p_object, enable);  }  // 7
is_in_low_processor_usage_mode :: (main: *OS) -> bool { call_ret := cast(*bool) sys_call("OS", "is_in_low_processor_usage_mode", 36873697, bool, main.p_object); return call_ret.*; }  // 8
set_low_processor_usage_mode_sleep_usec :: (main: *OS, usec: int) { sys_call("OS", "set_low_processor_usage_mode_sleep_usec", 1286410249, Nil, main.p_object, usec);  }  // 9
get_low_processor_usage_mode_sleep_usec :: (main: *OS) -> int { call_ret := cast(*int) sys_call("OS", "get_low_processor_usage_mode_sleep_usec", 3905245786, int, main.p_object); return call_ret.*; }  // 10
set_delta_smoothing :: (main: *OS, delta_smoothing_enabled: bool) { sys_call("OS", "set_delta_smoothing", 2586408642, Nil, main.p_object, delta_smoothing_enabled);  }  // 11
is_delta_smoothing_enabled :: (main: *OS) -> bool { call_ret := cast(*bool) sys_call("OS", "is_delta_smoothing_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 12
get_processor_count :: (main: *OS) -> int { call_ret := cast(*int) sys_call("OS", "get_processor_count", 3905245786, int, main.p_object); return call_ret.*; }  // 13
get_processor_name :: (main: *OS) -> gstring { call_ret := cast(*gstring) sys_call("OS", "get_processor_name", 201670096, gstring, main.p_object); return call_ret.*; }  // 14
get_system_fonts :: (main: *OS) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("OS", "get_system_fonts", 1139954409, PackedStringArray, main.p_object); return call_ret.*; }  // 15
get_system_font_path :: (main: *OS, font_name: string) -> gstring { call_ret := cast(*gstring) sys_call("OS", "get_system_font_path", 626580860, gstring, main.p_object, font_name); return call_ret.*; }  // 16
get_system_font_path_for_text :: (main: *OS, font_name: string, text: string) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("OS", "get_system_font_path_for_text", 197317981, PackedStringArray, main.p_object, font_name, text); return call_ret.*; }  // 17
get_executable_path :: (main: *OS) -> gstring { call_ret := cast(*gstring) sys_call("OS", "get_executable_path", 201670096, gstring, main.p_object); return call_ret.*; }  // 18
read_string_from_stdin :: (main: *OS, buffer_size: int) -> gstring { call_ret := cast(*gstring) sys_call("OS", "read_string_from_stdin", 990163283, gstring, main.p_object, buffer_size); return call_ret.*; }  // 19
read_buffer_from_stdin :: (main: *OS, buffer_size: int) -> PackedByteArray { call_ret := cast(*PackedByteArray) sys_call("OS", "read_buffer_from_stdin", 47165747, PackedByteArray, main.p_object, buffer_size); return call_ret.*; }  // 20
get_stdin_type :: (main: *OS) -> OS.StdHandleType { call_ret := cast(*OS.StdHandleType) sys_call("OS", "get_stdin_type", 1704816237, OS.StdHandleType, main.p_object); return call_ret.*; }  // 21
get_stdout_type :: (main: *OS) -> OS.StdHandleType { call_ret := cast(*OS.StdHandleType) sys_call("OS", "get_stdout_type", 1704816237, OS.StdHandleType, main.p_object); return call_ret.*; }  // 22
get_stderr_type :: (main: *OS) -> OS.StdHandleType { call_ret := cast(*OS.StdHandleType) sys_call("OS", "get_stderr_type", 1704816237, OS.StdHandleType, main.p_object); return call_ret.*; }  // 23
execute :: (main: *OS, path: string, arguments: PackedStringArray) -> int { call_ret := cast(*int) sys_call("OS", "execute", 1488299882, int, main.p_object, path, arguments); return call_ret.*; }  // 24
execute_with_pipe :: (main: *OS, path: string, arguments: PackedStringArray) -> Dictionary { call_ret := cast(*Dictionary) sys_call("OS", "execute_with_pipe", 2851312030, Dictionary, main.p_object, path, arguments); return call_ret.*; }  // 25
create_process :: (main: *OS, path: string, arguments: PackedStringArray) -> int { call_ret := cast(*int) sys_call("OS", "create_process", 2903767230, int, main.p_object, path, arguments); return call_ret.*; }  // 26
create_instance :: (main: *OS, arguments: PackedStringArray) -> int { call_ret := cast(*int) sys_call("OS", "create_instance", 1080601263, int, main.p_object, arguments); return call_ret.*; }  // 27
kill :: (main: *OS, pid: int) -> Error { call_ret := cast(*Error) sys_call("OS", "kill", 844576869, Error, main.p_object, pid); return call_ret.*; }  // 28
shell_open :: (main: *OS, uri: string) -> Error { call_ret := cast(*Error) sys_call("OS", "shell_open", 166001499, Error, main.p_object, uri); return call_ret.*; }  // 29
shell_show_in_file_manager :: (main: *OS, file_or_dir_path: string) -> Error { call_ret := cast(*Error) sys_call("OS", "shell_show_in_file_manager", 3565188097, Error, main.p_object, file_or_dir_path); return call_ret.*; }  // 30
is_process_running :: (main: *OS, pid: int) -> bool { call_ret := cast(*bool) sys_call("OS", "is_process_running", 1116898809, bool, main.p_object, pid); return call_ret.*; }  // 31
get_process_exit_code :: (main: *OS, pid: int) -> int { call_ret := cast(*int) sys_call("OS", "get_process_exit_code", 923996154, int, main.p_object, pid); return call_ret.*; }  // 32
get_process_id :: (main: *OS) -> int { call_ret := cast(*int) sys_call("OS", "get_process_id", 3905245786, int, main.p_object); return call_ret.*; }  // 33
has_environment :: (main: *OS, variable: string) -> bool { call_ret := cast(*bool) sys_call("OS", "has_environment", 3927539163, bool, main.p_object, variable); return call_ret.*; }  // 34
get_environment :: (main: *OS, variable: string) -> gstring { call_ret := cast(*gstring) sys_call("OS", "get_environment", 3135753539, gstring, main.p_object, variable); return call_ret.*; }  // 35
set_environment :: (main: *OS, variable: string, value: string) { sys_call("OS", "set_environment", 3605043004, Nil, main.p_object, variable, value);  }  // 36
unset_environment :: (main: *OS, variable: string) { sys_call("OS", "unset_environment", 3089850668, Nil, main.p_object, variable);  }  // 37
get_name :: (main: *OS) -> gstring { call_ret := cast(*gstring) sys_call("OS", "get_name", 201670096, gstring, main.p_object); return call_ret.*; }  // 38
get_distribution_name :: (main: *OS) -> gstring { call_ret := cast(*gstring) sys_call("OS", "get_distribution_name", 201670096, gstring, main.p_object); return call_ret.*; }  // 39
get_version :: (main: *OS) -> gstring { call_ret := cast(*gstring) sys_call("OS", "get_version", 201670096, gstring, main.p_object); return call_ret.*; }  // 40
get_version_alias :: (main: *OS) -> gstring { call_ret := cast(*gstring) sys_call("OS", "get_version_alias", 201670096, gstring, main.p_object); return call_ret.*; }  // 41
get_cmdline_args :: (main: *OS) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("OS", "get_cmdline_args", 2981934095, PackedStringArray, main.p_object); return call_ret.*; }  // 42
get_cmdline_user_args :: (main: *OS) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("OS", "get_cmdline_user_args", 2981934095, PackedStringArray, main.p_object); return call_ret.*; }  // 43
get_video_adapter_driver_info :: (main: *OS) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("OS", "get_video_adapter_driver_info", 1139954409, PackedStringArray, main.p_object); return call_ret.*; }  // 44
set_restart_on_exit :: (main: *OS, restart: bool) { sys_call("OS", "set_restart_on_exit", 3331453935, Nil, main.p_object, restart);  }  // 45
is_restart_on_exit_set :: (main: *OS) -> bool { call_ret := cast(*bool) sys_call("OS", "is_restart_on_exit_set", 36873697, bool, main.p_object); return call_ret.*; }  // 46
get_restart_on_exit_arguments :: (main: *OS) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("OS", "get_restart_on_exit_arguments", 1139954409, PackedStringArray, main.p_object); return call_ret.*; }  // 47
delay_usec :: (main: *OS, usec: int) { sys_call("OS", "delay_usec", 998575451, Nil, main.p_object, usec);  }  // 48
delay_msec :: (main: *OS, msec: int) { sys_call("OS", "delay_msec", 998575451, Nil, main.p_object, msec);  }  // 49
get_locale :: (main: *OS) -> gstring { call_ret := cast(*gstring) sys_call("OS", "get_locale", 201670096, gstring, main.p_object); return call_ret.*; }  // 50
get_locale_language :: (main: *OS) -> gstring { call_ret := cast(*gstring) sys_call("OS", "get_locale_language", 201670096, gstring, main.p_object); return call_ret.*; }  // 51
get_model_name :: (main: *OS) -> gstring { call_ret := cast(*gstring) sys_call("OS", "get_model_name", 201670096, gstring, main.p_object); return call_ret.*; }  // 52
is_userfs_persistent :: (main: *OS) -> bool { call_ret := cast(*bool) sys_call("OS", "is_userfs_persistent", 36873697, bool, main.p_object); return call_ret.*; }  // 53
is_stdout_verbose :: (main: *OS) -> bool { call_ret := cast(*bool) sys_call("OS", "is_stdout_verbose", 36873697, bool, main.p_object); return call_ret.*; }  // 54
is_debug_build :: (main: *OS) -> bool { call_ret := cast(*bool) sys_call("OS", "is_debug_build", 36873697, bool, main.p_object); return call_ret.*; }  // 55
get_static_memory_usage :: (main: *OS) -> int { call_ret := cast(*int) sys_call("OS", "get_static_memory_usage", 3905245786, int, main.p_object); return call_ret.*; }  // 56
get_static_memory_peak_usage :: (main: *OS) -> int { call_ret := cast(*int) sys_call("OS", "get_static_memory_peak_usage", 3905245786, int, main.p_object); return call_ret.*; }  // 57
get_memory_info :: (main: *OS) -> Dictionary { call_ret := cast(*Dictionary) sys_call("OS", "get_memory_info", 3102165223, Dictionary, main.p_object); return call_ret.*; }  // 58
move_to_trash :: (main: *OS, path: string) -> Error { call_ret := cast(*Error) sys_call("OS", "move_to_trash", 2113323047, Error, main.p_object, path); return call_ret.*; }  // 59
get_user_data_dir :: (main: *OS) -> gstring { call_ret := cast(*gstring) sys_call("OS", "get_user_data_dir", 201670096, gstring, main.p_object); return call_ret.*; }  // 60
get_system_dir :: (main: *OS, dir: OS.SystemDir) -> gstring { call_ret := cast(*gstring) sys_call("OS", "get_system_dir", 3073895123, gstring, main.p_object, dir); return call_ret.*; }  // 61
get_config_dir :: (main: *OS) -> gstring { call_ret := cast(*gstring) sys_call("OS", "get_config_dir", 201670096, gstring, main.p_object); return call_ret.*; }  // 62
get_data_dir :: (main: *OS) -> gstring { call_ret := cast(*gstring) sys_call("OS", "get_data_dir", 201670096, gstring, main.p_object); return call_ret.*; }  // 63
get_cache_dir :: (main: *OS) -> gstring { call_ret := cast(*gstring) sys_call("OS", "get_cache_dir", 201670096, gstring, main.p_object); return call_ret.*; }  // 64
get_temp_dir :: (main: *OS) -> gstring { call_ret := cast(*gstring) sys_call("OS", "get_temp_dir", 201670096, gstring, main.p_object); return call_ret.*; }  // 65
get_unique_id :: (main: *OS) -> gstring { call_ret := cast(*gstring) sys_call("OS", "get_unique_id", 201670096, gstring, main.p_object); return call_ret.*; }  // 66
get_keycode_string :: (main: *OS, code: Key) -> gstring { call_ret := cast(*gstring) sys_call("OS", "get_keycode_string", 2261993717, gstring, main.p_object, code); return call_ret.*; }  // 67
is_keycode_unicode :: (main: *OS, code: int) -> bool { call_ret := cast(*bool) sys_call("OS", "is_keycode_unicode", 1116898809, bool, main.p_object, code); return call_ret.*; }  // 68
find_keycode_from_string :: (main: *OS, _string: string) -> Key { call_ret := cast(*Key) sys_call("OS", "find_keycode_from_string", 1084858572, Key, main.p_object, _string); return call_ret.*; }  // 69
set_use_file_access_save_and_swap :: (main: *OS, enabled: bool) { sys_call("OS", "set_use_file_access_save_and_swap", 2586408642, Nil, main.p_object, enabled);  }  // 70
set_thread_name :: (main: *OS, name: string) -> Error { call_ret := cast(*Error) sys_call("OS", "set_thread_name", 166001499, Error, main.p_object, name); return call_ret.*; }  // 71
get_thread_caller_id :: (main: *OS) -> int { call_ret := cast(*int) sys_call("OS", "get_thread_caller_id", 3905245786, int, main.p_object); return call_ret.*; }  // 72
get_main_thread_id :: (main: *OS) -> int { call_ret := cast(*int) sys_call("OS", "get_main_thread_id", 3905245786, int, main.p_object); return call_ret.*; }  // 73
has_feature :: (main: *OS, tag_name: string) -> bool { call_ret := cast(*bool) sys_call("OS", "has_feature", 3927539163, bool, main.p_object, tag_name); return call_ret.*; }  // 74
is_sandboxed :: (main: *OS) -> bool { call_ret := cast(*bool) sys_call("OS", "is_sandboxed", 36873697, bool, main.p_object); return call_ret.*; }  // 75
request_permission :: (main: *OS, name: string) -> bool { call_ret := cast(*bool) sys_call("OS", "request_permission", 2323990056, bool, main.p_object, name); return call_ret.*; }  // 76
request_permissions :: (main: *OS) -> bool { call_ret := cast(*bool) sys_call("OS", "request_permissions", 2240911060, bool, main.p_object); return call_ret.*; }  // 77
get_granted_permissions :: (main: *OS) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("OS", "get_granted_permissions", 1139954409, PackedStringArray, main.p_object); return call_ret.*; }  // 78
revoke_granted_permissions :: (main: *OS) { sys_call("OS", "revoke_granted_permissions", 3218959716, Nil, main.p_object);  }  // 79

get_class :: (main: *_Object) -> gstring { call_ret := cast(*gstring) sys_call("_Object", "get_class", 201670096, gstring, main.p_object); return call_ret.*; }  // 0
is_class :: (main: *_Object, class: string) -> bool { call_ret := cast(*bool) sys_call("_Object", "is_class", 3927539163, bool, main.p_object, class); return call_ret.*; }  // 1
set :: (main: *_Object, property: string, value: Variant) { sys_call("_Object", "set", 3776071444, Nil, main.p_object, property, value);  }  // 2
get :: (main: *_Object, property: string) -> Variant { call_ret := cast(*Variant) sys_call("_Object", "get", 2760726917, Variant, main.p_object, property); return call_ret.*; }  // 3
set_indexed :: (main: *_Object, property_path: string, value: Variant) { sys_call("_Object", "set_indexed", 3500910842, Nil, main.p_object, property_path, value);  }  // 4
get_indexed :: (main: *_Object, property_path: string) -> Variant { call_ret := cast(*Variant) sys_call("_Object", "get_indexed", 4006125091, Variant, main.p_object, property_path); return call_ret.*; }  // 5
get_property_list :: (main: *_Object) -> [] Dictionary { call_ret := cast(*[] Dictionary) sys_call("_Object", "get_property_list", 3995934104, [] Dictionary, main.p_object); return call_ret.*; }  // 6
get_method_list :: (main: *_Object) -> [] Dictionary { call_ret := cast(*[] Dictionary) sys_call("_Object", "get_method_list", 3995934104, [] Dictionary, main.p_object); return call_ret.*; }  // 7
property_can_revert :: (main: *_Object, property: string) -> bool { call_ret := cast(*bool) sys_call("_Object", "property_can_revert", 2619796661, bool, main.p_object, property); return call_ret.*; }  // 8
property_get_revert :: (main: *_Object, property: string) -> Variant { call_ret := cast(*Variant) sys_call("_Object", "property_get_revert", 2760726917, Variant, main.p_object, property); return call_ret.*; }  // 9
notification :: (main: *_Object, what: int) { sys_call("_Object", "notification", 4023243586, Nil, main.p_object, what);  }  // 10
to_string :: (main: *_Object) -> gstring { call_ret := cast(*gstring) sys_call("_Object", "to_string", 2841200299, gstring, main.p_object); return call_ret.*; }  // 11
get_instance_id :: (main: *_Object) -> int { call_ret := cast(*int) sys_call("_Object", "get_instance_id", 3905245786, int, main.p_object); return call_ret.*; }  // 12
set_script :: (main: *_Object, script: Variant) { sys_call("_Object", "set_script", 1114965689, Nil, main.p_object, script);  }  // 13
get_script :: (main: *_Object) -> Variant { call_ret := cast(*Variant) sys_call("_Object", "get_script", 1214101251, Variant, main.p_object); return call_ret.*; }  // 14
set_meta :: (main: *_Object, name: string, value: Variant) { sys_call("_Object", "set_meta", 3776071444, Nil, main.p_object, name, value);  }  // 15
remove_meta :: (main: *_Object, name: string) { sys_call("_Object", "remove_meta", 3304788590, Nil, main.p_object, name);  }  // 16
get_meta :: (main: *_Object, name: string) -> Variant { call_ret := cast(*Variant) sys_call("_Object", "get_meta", 3990617847, Variant, main.p_object, name); return call_ret.*; }  // 17
has_meta :: (main: *_Object, name: string) -> bool { call_ret := cast(*bool) sys_call("_Object", "has_meta", 2619796661, bool, main.p_object, name); return call_ret.*; }  // 18
get_meta_list :: (main: *_Object) -> [] StringName { call_ret := cast(*[] StringName) sys_call("_Object", "get_meta_list", 3995934104, [] StringName, main.p_object); return call_ret.*; }  // 19
add_user_signal :: (main: *_Object, signal: string) { sys_call("_Object", "add_user_signal", 85656714, Nil, main.p_object, signal);  }  // 20
has_user_signal :: (main: *_Object, signal: string) -> bool { call_ret := cast(*bool) sys_call("_Object", "has_user_signal", 2619796661, bool, main.p_object, signal); return call_ret.*; }  // 21
remove_user_signal :: (main: *_Object, signal: string) { sys_call("_Object", "remove_user_signal", 3304788590, Nil, main.p_object, signal);  }  // 22
emit_signal :: (main: *_Object, signal: string) -> Error { call_ret := cast(*Error) sys_call("_Object", "emit_signal", 4047867050, Error, main.p_object, signal); return call_ret.*; }  // 23
call :: (main: *_Object, method: string) -> Variant { call_ret := cast(*Variant) sys_call("_Object", "call", 3400424181, Variant, main.p_object, method); return call_ret.*; }  // 24
call_deferred :: (main: *_Object, method: string) -> Variant { call_ret := cast(*Variant) sys_call("_Object", "call_deferred", 3400424181, Variant, main.p_object, method); return call_ret.*; }  // 25
set_deferred :: (main: *_Object, property: string, value: Variant) { sys_call("_Object", "set_deferred", 3776071444, Nil, main.p_object, property, value);  }  // 26
callv :: (main: *_Object, method: string, arg_array: Array) -> Variant { call_ret := cast(*Variant) sys_call("_Object", "callv", 1260104456, Variant, main.p_object, method, arg_array); return call_ret.*; }  // 27
has_method :: (main: *_Object, method: string) -> bool { call_ret := cast(*bool) sys_call("_Object", "has_method", 2619796661, bool, main.p_object, method); return call_ret.*; }  // 28
get_method_argument_count :: (main: *_Object, method: string) -> int { call_ret := cast(*int) sys_call("_Object", "get_method_argument_count", 2458036349, int, main.p_object, method); return call_ret.*; }  // 29
has_signal :: (main: *_Object, signal: string) -> bool { call_ret := cast(*bool) sys_call("_Object", "has_signal", 2619796661, bool, main.p_object, signal); return call_ret.*; }  // 30
get_signal_list :: (main: *_Object) -> [] Dictionary { call_ret := cast(*[] Dictionary) sys_call("_Object", "get_signal_list", 3995934104, [] Dictionary, main.p_object); return call_ret.*; }  // 31
get_signal_connection_list :: (main: *_Object, signal: string) -> [] Dictionary { call_ret := cast(*[] Dictionary) sys_call("_Object", "get_signal_connection_list", 3147814860, [] Dictionary, main.p_object, signal); return call_ret.*; }  // 32
get_incoming_connections :: (main: *_Object) -> [] Dictionary { call_ret := cast(*[] Dictionary) sys_call("_Object", "get_incoming_connections", 3995934104, [] Dictionary, main.p_object); return call_ret.*; }  // 33
connect :: (main: *_Object, signal: string, callable: Callable) -> Error { call_ret := cast(*Error) sys_call("_Object", "connect", 1518946055, Error, main.p_object, signal, callable); return call_ret.*; }  // 34
disconnect :: (main: *_Object, signal: string, callable: Callable) { sys_call("_Object", "disconnect", 1874754934, Nil, main.p_object, signal, callable);  }  // 35
is_connected :: (main: *_Object, signal: string, callable: Callable) -> bool { call_ret := cast(*bool) sys_call("_Object", "is_connected", 768136979, bool, main.p_object, signal, callable); return call_ret.*; }  // 36
has_connections :: (main: *_Object, signal: string) -> bool { call_ret := cast(*bool) sys_call("_Object", "has_connections", 2619796661, bool, main.p_object, signal); return call_ret.*; }  // 37
set_block_signals :: (main: *_Object, enable: bool) { sys_call("_Object", "set_block_signals", 2586408642, Nil, main.p_object, enable);  }  // 38
is_blocking_signals :: (main: *_Object) -> bool { call_ret := cast(*bool) sys_call("_Object", "is_blocking_signals", 36873697, bool, main.p_object); return call_ret.*; }  // 39
notify_property_list_changed :: (main: *_Object) { sys_call("_Object", "notify_property_list_changed", 3218959716, Nil, main.p_object);  }  // 40
set_message_translation :: (main: *_Object, enable: bool) { sys_call("_Object", "set_message_translation", 2586408642, Nil, main.p_object, enable);  }  // 41
can_translate_messages :: (main: *_Object) -> bool { call_ret := cast(*bool) sys_call("_Object", "can_translate_messages", 36873697, bool, main.p_object); return call_ret.*; }  // 42
tr :: (main: *_Object, message: string) -> gstring { call_ret := cast(*gstring) sys_call("_Object", "tr", 1195764410, gstring, main.p_object, message); return call_ret.*; }  // 43
tr_n :: (main: *_Object, message: string, plural_message: string, n: int) -> gstring { call_ret := cast(*gstring) sys_call("_Object", "tr_n", 162698058, gstring, main.p_object, message, plural_message, n); return call_ret.*; }  // 44
get_translation_domain :: (main: *_Object) -> StringName { call_ret := cast(*StringName) sys_call("_Object", "get_translation_domain", 2002593661, StringName, main.p_object); return call_ret.*; }  // 45
set_translation_domain :: (main: *_Object, domain: string) { sys_call("_Object", "set_translation_domain", 3304788590, Nil, main.p_object, domain);  }  // 46
is_queued_for_deletion :: (main: *_Object) -> bool { call_ret := cast(*bool) sys_call("_Object", "is_queued_for_deletion", 36873697, bool, main.p_object); return call_ret.*; }  // 47
cancel_free :: (main: *_Object) { sys_call("_Object", "cancel_free", 3218959716, Nil, main.p_object);  }  // 48

get_vertices :: (main: *Occluder3D) -> PackedVector3Array { call_ret := cast(*PackedVector3Array) sys_call("Occluder3D", "get_vertices", 497664490, PackedVector3Array, main.p_object); return call_ret.*; }  // 0
get_indices :: (main: *Occluder3D) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("Occluder3D", "get_indices", 1930428628, PackedInt32Array, main.p_object); return call_ret.*; }  // 1

set_bake_mask :: (main: *OccluderInstance3D, mask: int) { sys_call("OccluderInstance3D", "set_bake_mask", 1286410249, Nil, main.p_object, mask);  }  // 0
get_bake_mask :: (main: *OccluderInstance3D) -> int { call_ret := cast(*int) sys_call("OccluderInstance3D", "get_bake_mask", 3905245786, int, main.p_object); return call_ret.*; }  // 1
set_bake_mask_value :: (main: *OccluderInstance3D, layer_number: int, value: bool) { sys_call("OccluderInstance3D", "set_bake_mask_value", 300928843, Nil, main.p_object, layer_number, value);  }  // 2
get_bake_mask_value :: (main: *OccluderInstance3D, layer_number: int) -> bool { call_ret := cast(*bool) sys_call("OccluderInstance3D", "get_bake_mask_value", 1116898809, bool, main.p_object, layer_number); return call_ret.*; }  // 3
set_bake_simplification_distance :: (main: *OccluderInstance3D, simplification_distance: float) { sys_call("OccluderInstance3D", "set_bake_simplification_distance", 373806689, Nil, main.p_object, simplification_distance);  }  // 4
get_bake_simplification_distance :: (main: *OccluderInstance3D) -> float { call_ret := cast(*float) sys_call("OccluderInstance3D", "get_bake_simplification_distance", 1740695150, float, main.p_object); return call_ret.*; }  // 5
set_occluder :: (main: *OccluderInstance3D, occluder: Occluder3D) { sys_call("OccluderInstance3D", "set_occluder", 1664878165, Nil, main.p_object, occluder);  }  // 6
get_occluder :: (main: *OccluderInstance3D) -> *Occluder3D { call_ret := cast(*Occluder3D) sys_call("OccluderInstance3D", "get_occluder", 1696836198, Occluder3D, main.p_object); return call_ret; }  // 7

set_closed :: (main: *OccluderPolygon2D, closed: bool) { sys_call("OccluderPolygon2D", "set_closed", 2586408642, Nil, main.p_object, closed);  }  // 0
is_closed :: (main: *OccluderPolygon2D) -> bool { call_ret := cast(*bool) sys_call("OccluderPolygon2D", "is_closed", 36873697, bool, main.p_object); return call_ret.*; }  // 1
set_cull_mode :: (main: *OccluderPolygon2D, cull_mode: OccluderPolygon2D.CullMode) { sys_call("OccluderPolygon2D", "set_cull_mode", 3500863002, Nil, main.p_object, cull_mode);  }  // 2
get_cull_mode :: (main: *OccluderPolygon2D) -> OccluderPolygon2D.CullMode { call_ret := cast(*OccluderPolygon2D.CullMode) sys_call("OccluderPolygon2D", "get_cull_mode", 33931036, OccluderPolygon2D.CullMode, main.p_object); return call_ret.*; }  // 3
set_polygon :: (main: *OccluderPolygon2D, polygon: PackedVector2Array) { sys_call("OccluderPolygon2D", "set_polygon", 1509147220, Nil, main.p_object, polygon);  }  // 4
get_polygon :: (main: *OccluderPolygon2D) -> PackedVector2Array { call_ret := cast(*PackedVector2Array) sys_call("OccluderPolygon2D", "get_polygon", 2961356807, PackedVector2Array, main.p_object); return call_ret.*; }  // 5


set_packet_data :: (main: *OggPacketSequence, packet_data: [] Array) { sys_call("OggPacketSequence", "set_packet_data", 381264803, Nil, main.p_object, packet_data);  }  // 0
get_packet_data :: (main: *OggPacketSequence) -> [] Array { call_ret := cast(*[] Array) sys_call("OggPacketSequence", "get_packet_data", 3995934104, [] Array, main.p_object); return call_ret.*; }  // 1
set_packet_granule_positions :: (main: *OggPacketSequence, granule_positions: PackedInt64Array) { sys_call("OggPacketSequence", "set_packet_granule_positions", 3709968205, Nil, main.p_object, granule_positions);  }  // 2
get_packet_granule_positions :: (main: *OggPacketSequence) -> PackedInt64Array { call_ret := cast(*PackedInt64Array) sys_call("OggPacketSequence", "get_packet_granule_positions", 235988956, PackedInt64Array, main.p_object); return call_ret.*; }  // 3
set_sampling_rate :: (main: *OggPacketSequence, sampling_rate: float) { sys_call("OggPacketSequence", "set_sampling_rate", 373806689, Nil, main.p_object, sampling_rate);  }  // 4
get_sampling_rate :: (main: *OggPacketSequence) -> float { call_ret := cast(*float) sys_call("OggPacketSequence", "get_sampling_rate", 1740695150, float, main.p_object); return call_ret.*; }  // 5
get_length :: (main: *OggPacketSequence) -> float { call_ret := cast(*float) sys_call("OggPacketSequence", "get_length", 1740695150, float, main.p_object); return call_ret.*; }  // 6


set_shadow_mode :: (main: *OmniLight3D, mode: OmniLight3D.ShadowMode) { sys_call("OmniLight3D", "set_shadow_mode", 121862228, Nil, main.p_object, mode);  }  // 0
get_shadow_mode :: (main: *OmniLight3D) -> OmniLight3D.ShadowMode { call_ret := cast(*OmniLight3D.ShadowMode) sys_call("OmniLight3D", "get_shadow_mode", 4181586331, OmniLight3D.ShadowMode, main.p_object); return call_ret.*; }  // 1

get_instance :: (main: *OpenXRAPIExtension) -> int { call_ret := cast(*int) sys_call("OpenXRAPIExtension", "get_instance", 2455072627, int, main.p_object); return call_ret.*; }  // 0
get_system_id :: (main: *OpenXRAPIExtension) -> int { call_ret := cast(*int) sys_call("OpenXRAPIExtension", "get_system_id", 2455072627, int, main.p_object); return call_ret.*; }  // 1
get_session :: (main: *OpenXRAPIExtension) -> int { call_ret := cast(*int) sys_call("OpenXRAPIExtension", "get_session", 2455072627, int, main.p_object); return call_ret.*; }  // 2
transform_from_pose :: (main: *OpenXRAPIExtension, pose: *void) -> Transform3D { call_ret := cast(*Transform3D) sys_call("OpenXRAPIExtension", "transform_from_pose", 2963875352, Transform3D, main.p_object, pose); return call_ret.*; }  // 3
xr_result :: (main: *OpenXRAPIExtension, result: int, format: string, args: Array) -> bool { call_ret := cast(*bool) sys_call("OpenXRAPIExtension", "xr_result", 3886436197, bool, main.p_object, result, format, args); return call_ret.*; }  // 4
openxr_is_enabled :: (main: *OpenXRAPIExtension, check_run_in_editor: bool) -> bool { call_ret := cast(*bool) sys_call("OpenXRAPIExtension", "openxr_is_enabled", 2703660260, bool, main.p_object, check_run_in_editor); return call_ret.*; }  // 5
get_instance_proc_addr :: (main: *OpenXRAPIExtension, name: string) -> int { call_ret := cast(*int) sys_call("OpenXRAPIExtension", "get_instance_proc_addr", 1597066294, int, main.p_object, name); return call_ret.*; }  // 6
get_error_string :: (main: *OpenXRAPIExtension, result: int) -> gstring { call_ret := cast(*gstring) sys_call("OpenXRAPIExtension", "get_error_string", 990163283, gstring, main.p_object, result); return call_ret.*; }  // 7
get_swapchain_format_name :: (main: *OpenXRAPIExtension, swapchain_format: int) -> gstring { call_ret := cast(*gstring) sys_call("OpenXRAPIExtension", "get_swapchain_format_name", 990163283, gstring, main.p_object, swapchain_format); return call_ret.*; }  // 8
set_object_name :: (main: *OpenXRAPIExtension, object_type: int, object_handle: int, object_name: string) { sys_call("OpenXRAPIExtension", "set_object_name", 2285447957, Nil, main.p_object, object_type, object_handle, object_name);  }  // 9
begin_debug_label_region :: (main: *OpenXRAPIExtension, label_name: string) { sys_call("OpenXRAPIExtension", "begin_debug_label_region", 83702148, Nil, main.p_object, label_name);  }  // 10
end_debug_label_region :: (main: *OpenXRAPIExtension) { sys_call("OpenXRAPIExtension", "end_debug_label_region", 3218959716, Nil, main.p_object);  }  // 11
insert_debug_label :: (main: *OpenXRAPIExtension, label_name: string) { sys_call("OpenXRAPIExtension", "insert_debug_label", 83702148, Nil, main.p_object, label_name);  }  // 12
is_initialized :: (main: *OpenXRAPIExtension) -> bool { call_ret := cast(*bool) sys_call("OpenXRAPIExtension", "is_initialized", 2240911060, bool, main.p_object); return call_ret.*; }  // 13
is_running :: (main: *OpenXRAPIExtension) -> bool { call_ret := cast(*bool) sys_call("OpenXRAPIExtension", "is_running", 2240911060, bool, main.p_object); return call_ret.*; }  // 14
get_play_space :: (main: *OpenXRAPIExtension) -> int { call_ret := cast(*int) sys_call("OpenXRAPIExtension", "get_play_space", 2455072627, int, main.p_object); return call_ret.*; }  // 15
get_predicted_display_time :: (main: *OpenXRAPIExtension) -> int { call_ret := cast(*int) sys_call("OpenXRAPIExtension", "get_predicted_display_time", 2455072627, int, main.p_object); return call_ret.*; }  // 16
get_next_frame_time :: (main: *OpenXRAPIExtension) -> int { call_ret := cast(*int) sys_call("OpenXRAPIExtension", "get_next_frame_time", 2455072627, int, main.p_object); return call_ret.*; }  // 17
can_render :: (main: *OpenXRAPIExtension) -> bool { call_ret := cast(*bool) sys_call("OpenXRAPIExtension", "can_render", 2240911060, bool, main.p_object); return call_ret.*; }  // 18
find_action :: (main: *OpenXRAPIExtension, name: string, action_set: RID) -> RID { call_ret := cast(*RID) sys_call("OpenXRAPIExtension", "find_action", 4106179378, RID, main.p_object, name, action_set); return call_ret.*; }  // 19
action_get_handle :: (main: *OpenXRAPIExtension, action: RID) -> int { call_ret := cast(*int) sys_call("OpenXRAPIExtension", "action_get_handle", 3917799429, int, main.p_object, action); return call_ret.*; }  // 20
get_hand_tracker :: (main: *OpenXRAPIExtension, hand_index: int) -> int { call_ret := cast(*int) sys_call("OpenXRAPIExtension", "get_hand_tracker", 3744713108, int, main.p_object, hand_index); return call_ret.*; }  // 21
register_composition_layer_provider :: (main: *OpenXRAPIExtension, extension: OpenXRExtensionWrapperExtension) { sys_call("OpenXRAPIExtension", "register_composition_layer_provider", 1997997368, Nil, main.p_object, extension);  }  // 22
unregister_composition_layer_provider :: (main: *OpenXRAPIExtension, extension: OpenXRExtensionWrapperExtension) { sys_call("OpenXRAPIExtension", "unregister_composition_layer_provider", 1997997368, Nil, main.p_object, extension);  }  // 23
register_projection_views_extension :: (main: *OpenXRAPIExtension, extension: OpenXRExtensionWrapperExtension) { sys_call("OpenXRAPIExtension", "register_projection_views_extension", 1997997368, Nil, main.p_object, extension);  }  // 24
unregister_projection_views_extension :: (main: *OpenXRAPIExtension, extension: OpenXRExtensionWrapperExtension) { sys_call("OpenXRAPIExtension", "unregister_projection_views_extension", 1997997368, Nil, main.p_object, extension);  }  // 25
get_render_state_z_near :: (main: *OpenXRAPIExtension) -> float { call_ret := cast(*float) sys_call("OpenXRAPIExtension", "get_render_state_z_near", 191475506, float, main.p_object); return call_ret.*; }  // 26
get_render_state_z_far :: (main: *OpenXRAPIExtension) -> float { call_ret := cast(*float) sys_call("OpenXRAPIExtension", "get_render_state_z_far", 191475506, float, main.p_object); return call_ret.*; }  // 27
set_velocity_texture :: (main: *OpenXRAPIExtension, render_target: RID) { sys_call("OpenXRAPIExtension", "set_velocity_texture", 2722037293, Nil, main.p_object, render_target);  }  // 28
set_velocity_depth_texture :: (main: *OpenXRAPIExtension, render_target: RID) { sys_call("OpenXRAPIExtension", "set_velocity_depth_texture", 2722037293, Nil, main.p_object, render_target);  }  // 29
set_velocity_target_size :: (main: *OpenXRAPIExtension, target_size: Vector2i) { sys_call("OpenXRAPIExtension", "set_velocity_target_size", 1130785943, Nil, main.p_object, target_size);  }  // 30
get_supported_swapchain_formats :: (main: *OpenXRAPIExtension) -> PackedInt64Array { call_ret := cast(*PackedInt64Array) sys_call("OpenXRAPIExtension", "get_supported_swapchain_formats", 3851388692, PackedInt64Array, main.p_object); return call_ret.*; }  // 31
openxr_swapchain_create :: (main: *OpenXRAPIExtension, create_flags: int, usage_flags: int, swapchain_format: int, width: int, height: int, sample_count: int, array_size: int) -> int { call_ret := cast(*int) sys_call("OpenXRAPIExtension", "openxr_swapchain_create", 2162228999, int, main.p_object, create_flags, usage_flags, swapchain_format, width, height, sample_count, array_size); return call_ret.*; }  // 32
openxr_swapchain_free :: (main: *OpenXRAPIExtension, swapchain: int) { sys_call("OpenXRAPIExtension", "openxr_swapchain_free", 1286410249, Nil, main.p_object, swapchain);  }  // 33
openxr_swapchain_get_swapchain :: (main: *OpenXRAPIExtension, swapchain: int) -> int { call_ret := cast(*int) sys_call("OpenXRAPIExtension", "openxr_swapchain_get_swapchain", 3744713108, int, main.p_object, swapchain); return call_ret.*; }  // 34
openxr_swapchain_acquire :: (main: *OpenXRAPIExtension, swapchain: int) { sys_call("OpenXRAPIExtension", "openxr_swapchain_acquire", 1286410249, Nil, main.p_object, swapchain);  }  // 35
openxr_swapchain_get_image :: (main: *OpenXRAPIExtension, swapchain: int) -> RID { call_ret := cast(*RID) sys_call("OpenXRAPIExtension", "openxr_swapchain_get_image", 937000113, RID, main.p_object, swapchain); return call_ret.*; }  // 36
openxr_swapchain_release :: (main: *OpenXRAPIExtension, swapchain: int) { sys_call("OpenXRAPIExtension", "openxr_swapchain_release", 1286410249, Nil, main.p_object, swapchain);  }  // 37
get_projection_layer :: (main: *OpenXRAPIExtension) -> int { call_ret := cast(*int) sys_call("OpenXRAPIExtension", "get_projection_layer", 2455072627, int, main.p_object); return call_ret.*; }  // 38
set_render_region :: (main: *OpenXRAPIExtension, render_region: Rect2i) { sys_call("OpenXRAPIExtension", "set_render_region", 1763793166, Nil, main.p_object, render_region);  }  // 39
set_emulate_environment_blend_mode_alpha_blend :: (main: *OpenXRAPIExtension, enabled: bool) { sys_call("OpenXRAPIExtension", "set_emulate_environment_blend_mode_alpha_blend", 2586408642, Nil, main.p_object, enabled);  }  // 40
is_environment_blend_mode_alpha_supported :: (main: *OpenXRAPIExtension) -> OpenXRAPIExtension.OpenXRAlphaBlendModeSupport { call_ret := cast(*OpenXRAPIExtension.OpenXRAlphaBlendModeSupport) sys_call("OpenXRAPIExtension", "is_environment_blend_mode_alpha_supported", 1579290861, OpenXRAPIExtension.OpenXRAlphaBlendModeSupport, main.p_object); return call_ret.*; }  // 41

set_localized_name :: (main: *OpenXRAction, localized_name: string) { sys_call("OpenXRAction", "set_localized_name", 83702148, Nil, main.p_object, localized_name);  }  // 0
get_localized_name :: (main: *OpenXRAction) -> gstring { call_ret := cast(*gstring) sys_call("OpenXRAction", "get_localized_name", 201670096, gstring, main.p_object); return call_ret.*; }  // 1
set_action_type :: (main: *OpenXRAction, action_type: OpenXRAction.ActionType) { sys_call("OpenXRAction", "set_action_type", 1675238366, Nil, main.p_object, action_type);  }  // 2
get_action_type :: (main: *OpenXRAction) -> OpenXRAction.ActionType { call_ret := cast(*OpenXRAction.ActionType) sys_call("OpenXRAction", "get_action_type", 3536542431, OpenXRAction.ActionType, main.p_object); return call_ret.*; }  // 3
set_toplevel_paths :: (main: *OpenXRAction, toplevel_paths: PackedStringArray) { sys_call("OpenXRAction", "set_toplevel_paths", 4015028928, Nil, main.p_object, toplevel_paths);  }  // 4
get_toplevel_paths :: (main: *OpenXRAction) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("OpenXRAction", "get_toplevel_paths", 1139954409, PackedStringArray, main.p_object); return call_ret.*; }  // 5


set_action_sets :: (main: *OpenXRActionMap, action_sets: Array) { sys_call("OpenXRActionMap", "set_action_sets", 381264803, Nil, main.p_object, action_sets);  }  // 0
get_action_sets :: (main: *OpenXRActionMap) -> Array { call_ret := cast(*Array) sys_call("OpenXRActionMap", "get_action_sets", 3995934104, Array, main.p_object); return call_ret.*; }  // 1
get_action_set_count :: (main: *OpenXRActionMap) -> int { call_ret := cast(*int) sys_call("OpenXRActionMap", "get_action_set_count", 3905245786, int, main.p_object); return call_ret.*; }  // 2
find_action_set :: (main: *OpenXRActionMap, name: string) -> *OpenXRActionSet { call_ret := cast(*OpenXRActionSet) sys_call("OpenXRActionMap", "find_action_set", 1888809267, OpenXRActionSet, main.p_object, name); return call_ret; }  // 3
get_action_set :: (main: *OpenXRActionMap, idx: int) -> *OpenXRActionSet { call_ret := cast(*OpenXRActionSet) sys_call("OpenXRActionMap", "get_action_set", 1789580336, OpenXRActionSet, main.p_object, idx); return call_ret; }  // 4
add_action_set :: (main: *OpenXRActionMap, action_set: OpenXRActionSet) { sys_call("OpenXRActionMap", "add_action_set", 2093310581, Nil, main.p_object, action_set);  }  // 5
remove_action_set :: (main: *OpenXRActionMap, action_set: OpenXRActionSet) { sys_call("OpenXRActionMap", "remove_action_set", 2093310581, Nil, main.p_object, action_set);  }  // 6
set_interaction_profiles :: (main: *OpenXRActionMap, interaction_profiles: Array) { sys_call("OpenXRActionMap", "set_interaction_profiles", 381264803, Nil, main.p_object, interaction_profiles);  }  // 7
get_interaction_profiles :: (main: *OpenXRActionMap) -> Array { call_ret := cast(*Array) sys_call("OpenXRActionMap", "get_interaction_profiles", 3995934104, Array, main.p_object); return call_ret.*; }  // 8
get_interaction_profile_count :: (main: *OpenXRActionMap) -> int { call_ret := cast(*int) sys_call("OpenXRActionMap", "get_interaction_profile_count", 3905245786, int, main.p_object); return call_ret.*; }  // 9
find_interaction_profile :: (main: *OpenXRActionMap, name: string) -> *OpenXRInteractionProfile { call_ret := cast(*OpenXRInteractionProfile) sys_call("OpenXRActionMap", "find_interaction_profile", 3095875538, OpenXRInteractionProfile, main.p_object, name); return call_ret; }  // 10
get_interaction_profile :: (main: *OpenXRActionMap, idx: int) -> *OpenXRInteractionProfile { call_ret := cast(*OpenXRInteractionProfile) sys_call("OpenXRActionMap", "get_interaction_profile", 2546151210, OpenXRInteractionProfile, main.p_object, idx); return call_ret; }  // 11
add_interaction_profile :: (main: *OpenXRActionMap, interaction_profile: OpenXRInteractionProfile) { sys_call("OpenXRActionMap", "add_interaction_profile", 2697953512, Nil, main.p_object, interaction_profile);  }  // 12
remove_interaction_profile :: (main: *OpenXRActionMap, interaction_profile: OpenXRInteractionProfile) { sys_call("OpenXRActionMap", "remove_interaction_profile", 2697953512, Nil, main.p_object, interaction_profile);  }  // 13
create_default_action_sets :: (main: *OpenXRActionMap) { sys_call("OpenXRActionMap", "create_default_action_sets", 3218959716, Nil, main.p_object);  }  // 14

set_localized_name :: (main: *OpenXRActionSet, localized_name: string) { sys_call("OpenXRActionSet", "set_localized_name", 83702148, Nil, main.p_object, localized_name);  }  // 0
get_localized_name :: (main: *OpenXRActionSet) -> gstring { call_ret := cast(*gstring) sys_call("OpenXRActionSet", "get_localized_name", 201670096, gstring, main.p_object); return call_ret.*; }  // 1
set_priority :: (main: *OpenXRActionSet, priority: int) { sys_call("OpenXRActionSet", "set_priority", 1286410249, Nil, main.p_object, priority);  }  // 2
get_priority :: (main: *OpenXRActionSet) -> int { call_ret := cast(*int) sys_call("OpenXRActionSet", "get_priority", 3905245786, int, main.p_object); return call_ret.*; }  // 3
get_action_count :: (main: *OpenXRActionSet) -> int { call_ret := cast(*int) sys_call("OpenXRActionSet", "get_action_count", 3905245786, int, main.p_object); return call_ret.*; }  // 4
set_actions :: (main: *OpenXRActionSet, actions: Array) { sys_call("OpenXRActionSet", "set_actions", 381264803, Nil, main.p_object, actions);  }  // 5
get_actions :: (main: *OpenXRActionSet) -> Array { call_ret := cast(*Array) sys_call("OpenXRActionSet", "get_actions", 3995934104, Array, main.p_object); return call_ret.*; }  // 6
add_action :: (main: *OpenXRActionSet, action: OpenXRAction) { sys_call("OpenXRActionSet", "add_action", 349361333, Nil, main.p_object, action);  }  // 7
remove_action :: (main: *OpenXRActionSet, action: OpenXRAction) { sys_call("OpenXRActionSet", "remove_action", 349361333, Nil, main.p_object, action);  }  // 8

set_on_threshold :: (main: *OpenXRAnalogThresholdModifier, on_threshold: float) { sys_call("OpenXRAnalogThresholdModifier", "set_on_threshold", 373806689, Nil, main.p_object, on_threshold);  }  // 0
get_on_threshold :: (main: *OpenXRAnalogThresholdModifier) -> float { call_ret := cast(*float) sys_call("OpenXRAnalogThresholdModifier", "get_on_threshold", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_off_threshold :: (main: *OpenXRAnalogThresholdModifier, off_threshold: float) { sys_call("OpenXRAnalogThresholdModifier", "set_off_threshold", 373806689, Nil, main.p_object, off_threshold);  }  // 2
get_off_threshold :: (main: *OpenXRAnalogThresholdModifier) -> float { call_ret := cast(*float) sys_call("OpenXRAnalogThresholdModifier", "get_off_threshold", 1740695150, float, main.p_object); return call_ret.*; }  // 3
set_on_haptic :: (main: *OpenXRAnalogThresholdModifier, haptic: OpenXRHapticBase) { sys_call("OpenXRAnalogThresholdModifier", "set_on_haptic", 2998020150, Nil, main.p_object, haptic);  }  // 4
get_on_haptic :: (main: *OpenXRAnalogThresholdModifier) -> *OpenXRHapticBase { call_ret := cast(*OpenXRHapticBase) sys_call("OpenXRAnalogThresholdModifier", "get_on_haptic", 922310751, OpenXRHapticBase, main.p_object); return call_ret; }  // 5
set_off_haptic :: (main: *OpenXRAnalogThresholdModifier, haptic: OpenXRHapticBase) { sys_call("OpenXRAnalogThresholdModifier", "set_off_haptic", 2998020150, Nil, main.p_object, haptic);  }  // 6
get_off_haptic :: (main: *OpenXRAnalogThresholdModifier) -> *OpenXRHapticBase { call_ret := cast(*OpenXRHapticBase) sys_call("OpenXRAnalogThresholdModifier", "get_off_haptic", 922310751, OpenXRHapticBase, main.p_object); return call_ret; }  // 7


get_binding_modifier :: (main: *OpenXRBindingModifierEditor) -> *OpenXRBindingModifier { call_ret := cast(*OpenXRBindingModifier) sys_call("OpenXRBindingModifierEditor", "get_binding_modifier", 2930765082, OpenXRBindingModifier, main.p_object); return call_ret; }  // 0
setup :: (main: *OpenXRBindingModifierEditor, action_map: OpenXRActionMap, binding_modifier: OpenXRBindingModifier) { sys_call("OpenXRBindingModifierEditor", "setup", 1284787389, Nil, main.p_object, action_map, binding_modifier);  }  // 1

set_layer_viewport :: (main: *OpenXRCompositionLayer, viewport: SubViewport) { sys_call("OpenXRCompositionLayer", "set_layer_viewport", 3888077664, Nil, main.p_object, viewport);  }  // 0
get_layer_viewport :: (main: *OpenXRCompositionLayer) -> *SubViewport { call_ret := cast(*SubViewport) sys_call("OpenXRCompositionLayer", "get_layer_viewport", 3750751911, SubViewport, main.p_object); return call_ret; }  // 1
set_use_android_surface :: (main: *OpenXRCompositionLayer, enable: bool) { sys_call("OpenXRCompositionLayer", "set_use_android_surface", 2586408642, Nil, main.p_object, enable);  }  // 2
get_use_android_surface :: (main: *OpenXRCompositionLayer) -> bool { call_ret := cast(*bool) sys_call("OpenXRCompositionLayer", "get_use_android_surface", 36873697, bool, main.p_object); return call_ret.*; }  // 3
set_android_surface_size :: (main: *OpenXRCompositionLayer, size: Vector2i) { sys_call("OpenXRCompositionLayer", "set_android_surface_size", 1130785943, Nil, main.p_object, size);  }  // 4
get_android_surface_size :: (main: *OpenXRCompositionLayer) -> Vector2i { call_ret := cast(*Vector2i) sys_call("OpenXRCompositionLayer", "get_android_surface_size", 3690982128, Vector2i, main.p_object); return call_ret.*; }  // 5
set_enable_hole_punch :: (main: *OpenXRCompositionLayer, enable: bool) { sys_call("OpenXRCompositionLayer", "set_enable_hole_punch", 2586408642, Nil, main.p_object, enable);  }  // 6
get_enable_hole_punch :: (main: *OpenXRCompositionLayer) -> bool { call_ret := cast(*bool) sys_call("OpenXRCompositionLayer", "get_enable_hole_punch", 36873697, bool, main.p_object); return call_ret.*; }  // 7
set_sort_order :: (main: *OpenXRCompositionLayer, order: int) { sys_call("OpenXRCompositionLayer", "set_sort_order", 1286410249, Nil, main.p_object, order);  }  // 8
get_sort_order :: (main: *OpenXRCompositionLayer) -> int { call_ret := cast(*int) sys_call("OpenXRCompositionLayer", "get_sort_order", 3905245786, int, main.p_object); return call_ret.*; }  // 9
set_alpha_blend :: (main: *OpenXRCompositionLayer, enabled: bool) { sys_call("OpenXRCompositionLayer", "set_alpha_blend", 2586408642, Nil, main.p_object, enabled);  }  // 10
get_alpha_blend :: (main: *OpenXRCompositionLayer) -> bool { call_ret := cast(*bool) sys_call("OpenXRCompositionLayer", "get_alpha_blend", 36873697, bool, main.p_object); return call_ret.*; }  // 11
get_android_surface :: (main: *OpenXRCompositionLayer) -> *JavaObject { call_ret := cast(*JavaObject) sys_call("OpenXRCompositionLayer", "get_android_surface", 3277089691, JavaObject, main.p_object); return call_ret; }  // 12
is_natively_supported :: (main: *OpenXRCompositionLayer) -> bool { call_ret := cast(*bool) sys_call("OpenXRCompositionLayer", "is_natively_supported", 36873697, bool, main.p_object); return call_ret.*; }  // 13
intersects_ray :: (main: *OpenXRCompositionLayer, origin: Vector3, direction: Vector3) -> Vector2 { call_ret := cast(*Vector2) sys_call("OpenXRCompositionLayer", "intersects_ray", 1091262597, Vector2, main.p_object, origin, direction); return call_ret.*; }  // 14

set_radius :: (main: *OpenXRCompositionLayerCylinder, radius: float) { sys_call("OpenXRCompositionLayerCylinder", "set_radius", 373806689, Nil, main.p_object, radius);  }  // 0
get_radius :: (main: *OpenXRCompositionLayerCylinder) -> float { call_ret := cast(*float) sys_call("OpenXRCompositionLayerCylinder", "get_radius", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_aspect_ratio :: (main: *OpenXRCompositionLayerCylinder, aspect_ratio: float) { sys_call("OpenXRCompositionLayerCylinder", "set_aspect_ratio", 373806689, Nil, main.p_object, aspect_ratio);  }  // 2
get_aspect_ratio :: (main: *OpenXRCompositionLayerCylinder) -> float { call_ret := cast(*float) sys_call("OpenXRCompositionLayerCylinder", "get_aspect_ratio", 1740695150, float, main.p_object); return call_ret.*; }  // 3
set_central_angle :: (main: *OpenXRCompositionLayerCylinder, angle: float) { sys_call("OpenXRCompositionLayerCylinder", "set_central_angle", 373806689, Nil, main.p_object, angle);  }  // 4
get_central_angle :: (main: *OpenXRCompositionLayerCylinder) -> float { call_ret := cast(*float) sys_call("OpenXRCompositionLayerCylinder", "get_central_angle", 1740695150, float, main.p_object); return call_ret.*; }  // 5
set_fallback_segments :: (main: *OpenXRCompositionLayerCylinder, segments: int) { sys_call("OpenXRCompositionLayerCylinder", "set_fallback_segments", 1286410249, Nil, main.p_object, segments);  }  // 6
get_fallback_segments :: (main: *OpenXRCompositionLayerCylinder) -> int { call_ret := cast(*int) sys_call("OpenXRCompositionLayerCylinder", "get_fallback_segments", 3905245786, int, main.p_object); return call_ret.*; }  // 7

set_radius :: (main: *OpenXRCompositionLayerEquirect, radius: float) { sys_call("OpenXRCompositionLayerEquirect", "set_radius", 373806689, Nil, main.p_object, radius);  }  // 0
get_radius :: (main: *OpenXRCompositionLayerEquirect) -> float { call_ret := cast(*float) sys_call("OpenXRCompositionLayerEquirect", "get_radius", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_central_horizontal_angle :: (main: *OpenXRCompositionLayerEquirect, angle: float) { sys_call("OpenXRCompositionLayerEquirect", "set_central_horizontal_angle", 373806689, Nil, main.p_object, angle);  }  // 2
get_central_horizontal_angle :: (main: *OpenXRCompositionLayerEquirect) -> float { call_ret := cast(*float) sys_call("OpenXRCompositionLayerEquirect", "get_central_horizontal_angle", 1740695150, float, main.p_object); return call_ret.*; }  // 3
set_upper_vertical_angle :: (main: *OpenXRCompositionLayerEquirect, angle: float) { sys_call("OpenXRCompositionLayerEquirect", "set_upper_vertical_angle", 373806689, Nil, main.p_object, angle);  }  // 4
get_upper_vertical_angle :: (main: *OpenXRCompositionLayerEquirect) -> float { call_ret := cast(*float) sys_call("OpenXRCompositionLayerEquirect", "get_upper_vertical_angle", 1740695150, float, main.p_object); return call_ret.*; }  // 5
set_lower_vertical_angle :: (main: *OpenXRCompositionLayerEquirect, angle: float) { sys_call("OpenXRCompositionLayerEquirect", "set_lower_vertical_angle", 373806689, Nil, main.p_object, angle);  }  // 6
get_lower_vertical_angle :: (main: *OpenXRCompositionLayerEquirect) -> float { call_ret := cast(*float) sys_call("OpenXRCompositionLayerEquirect", "get_lower_vertical_angle", 1740695150, float, main.p_object); return call_ret.*; }  // 7
set_fallback_segments :: (main: *OpenXRCompositionLayerEquirect, segments: int) { sys_call("OpenXRCompositionLayerEquirect", "set_fallback_segments", 1286410249, Nil, main.p_object, segments);  }  // 8
get_fallback_segments :: (main: *OpenXRCompositionLayerEquirect) -> int { call_ret := cast(*int) sys_call("OpenXRCompositionLayerEquirect", "get_fallback_segments", 3905245786, int, main.p_object); return call_ret.*; }  // 9

set_quad_size :: (main: *OpenXRCompositionLayerQuad, size: Vector2) { sys_call("OpenXRCompositionLayerQuad", "set_quad_size", 743155724, Nil, main.p_object, size);  }  // 0
get_quad_size :: (main: *OpenXRCompositionLayerQuad) -> Vector2 { call_ret := cast(*Vector2) sys_call("OpenXRCompositionLayerQuad", "get_quad_size", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 1

set_action_set :: (main: *OpenXRDpadBindingModifier, action_set: OpenXRActionSet) { sys_call("OpenXRDpadBindingModifier", "set_action_set", 2093310581, Nil, main.p_object, action_set);  }  // 0
get_action_set :: (main: *OpenXRDpadBindingModifier) -> *OpenXRActionSet { call_ret := cast(*OpenXRActionSet) sys_call("OpenXRDpadBindingModifier", "get_action_set", 619941079, OpenXRActionSet, main.p_object); return call_ret; }  // 1
set_input_path :: (main: *OpenXRDpadBindingModifier, input_path: string) { sys_call("OpenXRDpadBindingModifier", "set_input_path", 83702148, Nil, main.p_object, input_path);  }  // 2
get_input_path :: (main: *OpenXRDpadBindingModifier) -> gstring { call_ret := cast(*gstring) sys_call("OpenXRDpadBindingModifier", "get_input_path", 201670096, gstring, main.p_object); return call_ret.*; }  // 3
set_threshold :: (main: *OpenXRDpadBindingModifier, threshold: float) { sys_call("OpenXRDpadBindingModifier", "set_threshold", 373806689, Nil, main.p_object, threshold);  }  // 4
get_threshold :: (main: *OpenXRDpadBindingModifier) -> float { call_ret := cast(*float) sys_call("OpenXRDpadBindingModifier", "get_threshold", 1740695150, float, main.p_object); return call_ret.*; }  // 5
set_threshold_released :: (main: *OpenXRDpadBindingModifier, threshold_released: float) { sys_call("OpenXRDpadBindingModifier", "set_threshold_released", 373806689, Nil, main.p_object, threshold_released);  }  // 6
get_threshold_released :: (main: *OpenXRDpadBindingModifier) -> float { call_ret := cast(*float) sys_call("OpenXRDpadBindingModifier", "get_threshold_released", 1740695150, float, main.p_object); return call_ret.*; }  // 7
set_center_region :: (main: *OpenXRDpadBindingModifier, center_region: float) { sys_call("OpenXRDpadBindingModifier", "set_center_region", 373806689, Nil, main.p_object, center_region);  }  // 8
get_center_region :: (main: *OpenXRDpadBindingModifier) -> float { call_ret := cast(*float) sys_call("OpenXRDpadBindingModifier", "get_center_region", 1740695150, float, main.p_object); return call_ret.*; }  // 9
set_wedge_angle :: (main: *OpenXRDpadBindingModifier, wedge_angle: float) { sys_call("OpenXRDpadBindingModifier", "set_wedge_angle", 373806689, Nil, main.p_object, wedge_angle);  }  // 10
get_wedge_angle :: (main: *OpenXRDpadBindingModifier) -> float { call_ret := cast(*float) sys_call("OpenXRDpadBindingModifier", "get_wedge_angle", 1740695150, float, main.p_object); return call_ret.*; }  // 11
set_is_sticky :: (main: *OpenXRDpadBindingModifier, is_sticky: bool) { sys_call("OpenXRDpadBindingModifier", "set_is_sticky", 2586408642, Nil, main.p_object, is_sticky);  }  // 12
get_is_sticky :: (main: *OpenXRDpadBindingModifier) -> bool { call_ret := cast(*bool) sys_call("OpenXRDpadBindingModifier", "get_is_sticky", 36873697, bool, main.p_object); return call_ret.*; }  // 13
set_on_haptic :: (main: *OpenXRDpadBindingModifier, haptic: OpenXRHapticBase) { sys_call("OpenXRDpadBindingModifier", "set_on_haptic", 2998020150, Nil, main.p_object, haptic);  }  // 14
get_on_haptic :: (main: *OpenXRDpadBindingModifier) -> *OpenXRHapticBase { call_ret := cast(*OpenXRHapticBase) sys_call("OpenXRDpadBindingModifier", "get_on_haptic", 922310751, OpenXRHapticBase, main.p_object); return call_ret; }  // 15
set_off_haptic :: (main: *OpenXRDpadBindingModifier, haptic: OpenXRHapticBase) { sys_call("OpenXRDpadBindingModifier", "set_off_haptic", 2998020150, Nil, main.p_object, haptic);  }  // 16
get_off_haptic :: (main: *OpenXRDpadBindingModifier) -> *OpenXRHapticBase { call_ret := cast(*OpenXRHapticBase) sys_call("OpenXRDpadBindingModifier", "get_off_haptic", 922310751, OpenXRHapticBase, main.p_object); return call_ret; }  // 17

get_openxr_api :: (main: *OpenXRExtensionWrapperExtension) -> *OpenXRAPIExtension { call_ret := cast(*OpenXRAPIExtension) sys_call("OpenXRExtensionWrapperExtension", "get_openxr_api", 1637791613, OpenXRAPIExtension, main.p_object); return call_ret; }  // 36
register_extension_wrapper :: (main: *OpenXRExtensionWrapperExtension) { sys_call("OpenXRExtensionWrapperExtension", "register_extension_wrapper", 3218959716, Nil, main.p_object);  }  // 37

set_hand :: (main: *OpenXRHand, hand: OpenXRHand.Hands) { sys_call("OpenXRHand", "set_hand", 1849328560, Nil, main.p_object, hand);  }  // 0
get_hand :: (main: *OpenXRHand) -> OpenXRHand.Hands { call_ret := cast(*OpenXRHand.Hands) sys_call("OpenXRHand", "get_hand", 2850644561, OpenXRHand.Hands, main.p_object); return call_ret.*; }  // 1
set_hand_skeleton :: (main: *OpenXRHand, hand_skeleton: string) { sys_call("OpenXRHand", "set_hand_skeleton", 1348162250, Nil, main.p_object, hand_skeleton);  }  // 2
get_hand_skeleton :: (main: *OpenXRHand) -> NodePath { call_ret := cast(*NodePath) sys_call("OpenXRHand", "get_hand_skeleton", 4075236667, NodePath, main.p_object); return call_ret.*; }  // 3
set_motion_range :: (main: *OpenXRHand, motion_range: OpenXRHand.MotionRange) { sys_call("OpenXRHand", "set_motion_range", 3326516003, Nil, main.p_object, motion_range);  }  // 4
get_motion_range :: (main: *OpenXRHand) -> OpenXRHand.MotionRange { call_ret := cast(*OpenXRHand.MotionRange) sys_call("OpenXRHand", "get_motion_range", 2191822314, OpenXRHand.MotionRange, main.p_object); return call_ret.*; }  // 5
set_skeleton_rig :: (main: *OpenXRHand, skeleton_rig: OpenXRHand.SkeletonRig) { sys_call("OpenXRHand", "set_skeleton_rig", 1528072213, Nil, main.p_object, skeleton_rig);  }  // 6
get_skeleton_rig :: (main: *OpenXRHand) -> OpenXRHand.SkeletonRig { call_ret := cast(*OpenXRHand.SkeletonRig) sys_call("OpenXRHand", "get_skeleton_rig", 968409338, OpenXRHand.SkeletonRig, main.p_object); return call_ret.*; }  // 7
set_bone_update :: (main: *OpenXRHand, bone_update: OpenXRHand.BoneUpdate) { sys_call("OpenXRHand", "set_bone_update", 3144625444, Nil, main.p_object, bone_update);  }  // 8
get_bone_update :: (main: *OpenXRHand) -> OpenXRHand.BoneUpdate { call_ret := cast(*OpenXRHand.BoneUpdate) sys_call("OpenXRHand", "get_bone_update", 1310695248, OpenXRHand.BoneUpdate, main.p_object); return call_ret.*; }  // 9


set_duration :: (main: *OpenXRHapticVibration, duration: int) { sys_call("OpenXRHapticVibration", "set_duration", 1286410249, Nil, main.p_object, duration);  }  // 0
get_duration :: (main: *OpenXRHapticVibration) -> int { call_ret := cast(*int) sys_call("OpenXRHapticVibration", "get_duration", 3905245786, int, main.p_object); return call_ret.*; }  // 1
set_frequency :: (main: *OpenXRHapticVibration, frequency: float) { sys_call("OpenXRHapticVibration", "set_frequency", 373806689, Nil, main.p_object, frequency);  }  // 2
get_frequency :: (main: *OpenXRHapticVibration) -> float { call_ret := cast(*float) sys_call("OpenXRHapticVibration", "get_frequency", 1740695150, float, main.p_object); return call_ret.*; }  // 3
set_amplitude :: (main: *OpenXRHapticVibration, amplitude: float) { sys_call("OpenXRHapticVibration", "set_amplitude", 373806689, Nil, main.p_object, amplitude);  }  // 4
get_amplitude :: (main: *OpenXRHapticVibration) -> float { call_ret := cast(*float) sys_call("OpenXRHapticVibration", "get_amplitude", 1740695150, float, main.p_object); return call_ret.*; }  // 5

set_action :: (main: *OpenXRIPBinding, action: OpenXRAction) { sys_call("OpenXRIPBinding", "set_action", 349361333, Nil, main.p_object, action);  }  // 0
get_action :: (main: *OpenXRIPBinding) -> *OpenXRAction { call_ret := cast(*OpenXRAction) sys_call("OpenXRIPBinding", "get_action", 4072409085, OpenXRAction, main.p_object); return call_ret; }  // 1
set_binding_path :: (main: *OpenXRIPBinding, binding_path: string) { sys_call("OpenXRIPBinding", "set_binding_path", 83702148, Nil, main.p_object, binding_path);  }  // 2
get_binding_path :: (main: *OpenXRIPBinding) -> gstring { call_ret := cast(*gstring) sys_call("OpenXRIPBinding", "get_binding_path", 201670096, gstring, main.p_object); return call_ret.*; }  // 3
get_binding_modifier_count :: (main: *OpenXRIPBinding) -> int { call_ret := cast(*int) sys_call("OpenXRIPBinding", "get_binding_modifier_count", 3905245786, int, main.p_object); return call_ret.*; }  // 4
get_binding_modifier :: (main: *OpenXRIPBinding, index: int) -> *OpenXRActionBindingModifier { call_ret := cast(*OpenXRActionBindingModifier) sys_call("OpenXRIPBinding", "get_binding_modifier", 3538296211, OpenXRActionBindingModifier, main.p_object, index); return call_ret; }  // 5
set_binding_modifiers :: (main: *OpenXRIPBinding, binding_modifiers: Array) { sys_call("OpenXRIPBinding", "set_binding_modifiers", 381264803, Nil, main.p_object, binding_modifiers);  }  // 6
get_binding_modifiers :: (main: *OpenXRIPBinding) -> Array { call_ret := cast(*Array) sys_call("OpenXRIPBinding", "get_binding_modifiers", 3995934104, Array, main.p_object); return call_ret.*; }  // 7
set_paths :: (main: *OpenXRIPBinding, paths: PackedStringArray) { sys_call("OpenXRIPBinding", "set_paths", 4015028928, Nil, main.p_object, paths);  }  // 8
get_paths :: (main: *OpenXRIPBinding) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("OpenXRIPBinding", "get_paths", 1139954409, PackedStringArray, main.p_object); return call_ret.*; }  // 9
get_path_count :: (main: *OpenXRIPBinding) -> int { call_ret := cast(*int) sys_call("OpenXRIPBinding", "get_path_count", 3905245786, int, main.p_object); return call_ret.*; }  // 10
has_path :: (main: *OpenXRIPBinding, path: string) -> bool { call_ret := cast(*bool) sys_call("OpenXRIPBinding", "has_path", 3927539163, bool, main.p_object, path); return call_ret.*; }  // 11
add_path :: (main: *OpenXRIPBinding, path: string) { sys_call("OpenXRIPBinding", "add_path", 83702148, Nil, main.p_object, path);  }  // 12
remove_path :: (main: *OpenXRIPBinding, path: string) { sys_call("OpenXRIPBinding", "remove_path", 83702148, Nil, main.p_object, path);  }  // 13


set_interaction_profile_path :: (main: *OpenXRInteractionProfile, interaction_profile_path: string) { sys_call("OpenXRInteractionProfile", "set_interaction_profile_path", 83702148, Nil, main.p_object, interaction_profile_path);  }  // 0
get_interaction_profile_path :: (main: *OpenXRInteractionProfile) -> gstring { call_ret := cast(*gstring) sys_call("OpenXRInteractionProfile", "get_interaction_profile_path", 201670096, gstring, main.p_object); return call_ret.*; }  // 1
get_binding_count :: (main: *OpenXRInteractionProfile) -> int { call_ret := cast(*int) sys_call("OpenXRInteractionProfile", "get_binding_count", 3905245786, int, main.p_object); return call_ret.*; }  // 2
get_binding :: (main: *OpenXRInteractionProfile, index: int) -> *OpenXRIPBinding { call_ret := cast(*OpenXRIPBinding) sys_call("OpenXRInteractionProfile", "get_binding", 3934429652, OpenXRIPBinding, main.p_object, index); return call_ret; }  // 3
set_bindings :: (main: *OpenXRInteractionProfile, bindings: Array) { sys_call("OpenXRInteractionProfile", "set_bindings", 381264803, Nil, main.p_object, bindings);  }  // 4
get_bindings :: (main: *OpenXRInteractionProfile) -> Array { call_ret := cast(*Array) sys_call("OpenXRInteractionProfile", "get_bindings", 3995934104, Array, main.p_object); return call_ret.*; }  // 5
get_binding_modifier_count :: (main: *OpenXRInteractionProfile) -> int { call_ret := cast(*int) sys_call("OpenXRInteractionProfile", "get_binding_modifier_count", 3905245786, int, main.p_object); return call_ret.*; }  // 6
get_binding_modifier :: (main: *OpenXRInteractionProfile, index: int) -> *OpenXRIPBindingModifier { call_ret := cast(*OpenXRIPBindingModifier) sys_call("OpenXRInteractionProfile", "get_binding_modifier", 2419896583, OpenXRIPBindingModifier, main.p_object, index); return call_ret; }  // 7
set_binding_modifiers :: (main: *OpenXRInteractionProfile, binding_modifiers: Array) { sys_call("OpenXRInteractionProfile", "set_binding_modifiers", 381264803, Nil, main.p_object, binding_modifiers);  }  // 8
get_binding_modifiers :: (main: *OpenXRInteractionProfile) -> Array { call_ret := cast(*Array) sys_call("OpenXRInteractionProfile", "get_binding_modifiers", 3995934104, Array, main.p_object); return call_ret.*; }  // 9


setup :: (main: *OpenXRInteractionProfileEditorBase, action_map: OpenXRActionMap, interaction_profile: OpenXRInteractionProfile) { sys_call("OpenXRInteractionProfileEditorBase", "setup", 421962938, Nil, main.p_object, action_map, interaction_profile);  }  // 0

register_profile_rename :: (main: *OpenXRInteractionProfileMetadata, old_name: string, new_name: string) { sys_call("OpenXRInteractionProfileMetadata", "register_profile_rename", 3186203200, Nil, main.p_object, old_name, new_name);  }  // 0
register_top_level_path :: (main: *OpenXRInteractionProfileMetadata, display_name: string, openxr_path: string, openxr_extension_name: string) { sys_call("OpenXRInteractionProfileMetadata", "register_top_level_path", 254767734, Nil, main.p_object, display_name, openxr_path, openxr_extension_name);  }  // 1
register_interaction_profile :: (main: *OpenXRInteractionProfileMetadata, display_name: string, openxr_path: string, openxr_extension_name: string) { sys_call("OpenXRInteractionProfileMetadata", "register_interaction_profile", 254767734, Nil, main.p_object, display_name, openxr_path, openxr_extension_name);  }  // 2
register_io_path :: (main: *OpenXRInteractionProfileMetadata, interaction_profile: string, display_name: string, toplevel_path: string, openxr_path: string, openxr_extension_name: string, action_type: OpenXRAction.ActionType) { sys_call("OpenXRInteractionProfileMetadata", "register_io_path", 3443511926, Nil, main.p_object, interaction_profile, display_name, toplevel_path, openxr_path, openxr_extension_name, action_type);  }  // 3

get_display_refresh_rate :: (main: *OpenXRInterface) -> float { call_ret := cast(*float) sys_call("OpenXRInterface", "get_display_refresh_rate", 1740695150, float, main.p_object); return call_ret.*; }  // 0
set_display_refresh_rate :: (main: *OpenXRInterface, refresh_rate: float) { sys_call("OpenXRInterface", "set_display_refresh_rate", 373806689, Nil, main.p_object, refresh_rate);  }  // 1
get_render_target_size_multiplier :: (main: *OpenXRInterface) -> float { call_ret := cast(*float) sys_call("OpenXRInterface", "get_render_target_size_multiplier", 1740695150, float, main.p_object); return call_ret.*; }  // 2
set_render_target_size_multiplier :: (main: *OpenXRInterface, multiplier: float) { sys_call("OpenXRInterface", "set_render_target_size_multiplier", 373806689, Nil, main.p_object, multiplier);  }  // 3
is_foveation_supported :: (main: *OpenXRInterface) -> bool { call_ret := cast(*bool) sys_call("OpenXRInterface", "is_foveation_supported", 36873697, bool, main.p_object); return call_ret.*; }  // 4
get_foveation_level :: (main: *OpenXRInterface) -> int { call_ret := cast(*int) sys_call("OpenXRInterface", "get_foveation_level", 3905245786, int, main.p_object); return call_ret.*; }  // 5
set_foveation_level :: (main: *OpenXRInterface, foveation_level: int) { sys_call("OpenXRInterface", "set_foveation_level", 1286410249, Nil, main.p_object, foveation_level);  }  // 6
get_foveation_dynamic :: (main: *OpenXRInterface) -> bool { call_ret := cast(*bool) sys_call("OpenXRInterface", "get_foveation_dynamic", 36873697, bool, main.p_object); return call_ret.*; }  // 7
set_foveation_dynamic :: (main: *OpenXRInterface, foveation_dynamic: bool) { sys_call("OpenXRInterface", "set_foveation_dynamic", 2586408642, Nil, main.p_object, foveation_dynamic);  }  // 8
is_action_set_active :: (main: *OpenXRInterface, name: string) -> bool { call_ret := cast(*bool) sys_call("OpenXRInterface", "is_action_set_active", 3927539163, bool, main.p_object, name); return call_ret.*; }  // 9
set_action_set_active :: (main: *OpenXRInterface, name: string, active: bool) { sys_call("OpenXRInterface", "set_action_set_active", 2678287736, Nil, main.p_object, name, active);  }  // 10
get_action_sets :: (main: *OpenXRInterface) -> Array { call_ret := cast(*Array) sys_call("OpenXRInterface", "get_action_sets", 3995934104, Array, main.p_object); return call_ret.*; }  // 11
get_available_display_refresh_rates :: (main: *OpenXRInterface) -> Array { call_ret := cast(*Array) sys_call("OpenXRInterface", "get_available_display_refresh_rates", 3995934104, Array, main.p_object); return call_ret.*; }  // 12
set_motion_range :: (main: *OpenXRInterface, hand: OpenXRInterface.Hand, motion_range: OpenXRInterface.HandMotionRange) { sys_call("OpenXRInterface", "set_motion_range", 855158159, Nil, main.p_object, hand, motion_range);  }  // 13
get_motion_range :: (main: *OpenXRInterface, hand: OpenXRInterface.Hand) -> OpenXRInterface.HandMotionRange { call_ret := cast(*OpenXRInterface.HandMotionRange) sys_call("OpenXRInterface", "get_motion_range", 3955838114, OpenXRInterface.HandMotionRange, main.p_object, hand); return call_ret.*; }  // 14
get_hand_tracking_source :: (main: *OpenXRInterface, hand: OpenXRInterface.Hand) -> OpenXRInterface.HandTrackedSource { call_ret := cast(*OpenXRInterface.HandTrackedSource) sys_call("OpenXRInterface", "get_hand_tracking_source", 4092421202, OpenXRInterface.HandTrackedSource, main.p_object, hand); return call_ret.*; }  // 15
get_hand_joint_flags :: (main: *OpenXRInterface, hand: OpenXRInterface.Hand, joint: OpenXRInterface.HandJoints) -> OpenXRInterface.HandJointFlags { call_ret := cast(*OpenXRInterface.HandJointFlags) sys_call("OpenXRInterface", "get_hand_joint_flags", 720567706, OpenXRInterface.HandJointFlags, main.p_object, hand, joint); return call_ret.*; }  // 16
get_hand_joint_rotation :: (main: *OpenXRInterface, hand: OpenXRInterface.Hand, joint: OpenXRInterface.HandJoints) -> Quaternion { call_ret := cast(*Quaternion) sys_call("OpenXRInterface", "get_hand_joint_rotation", 1974618321, Quaternion, main.p_object, hand, joint); return call_ret.*; }  // 17
get_hand_joint_position :: (main: *OpenXRInterface, hand: OpenXRInterface.Hand, joint: OpenXRInterface.HandJoints) -> Vector3 { call_ret := cast(*Vector3) sys_call("OpenXRInterface", "get_hand_joint_position", 3529194242, Vector3, main.p_object, hand, joint); return call_ret.*; }  // 18
get_hand_joint_radius :: (main: *OpenXRInterface, hand: OpenXRInterface.Hand, joint: OpenXRInterface.HandJoints) -> float { call_ret := cast(*float) sys_call("OpenXRInterface", "get_hand_joint_radius", 901522724, float, main.p_object, hand, joint); return call_ret.*; }  // 19
get_hand_joint_linear_velocity :: (main: *OpenXRInterface, hand: OpenXRInterface.Hand, joint: OpenXRInterface.HandJoints) -> Vector3 { call_ret := cast(*Vector3) sys_call("OpenXRInterface", "get_hand_joint_linear_velocity", 3529194242, Vector3, main.p_object, hand, joint); return call_ret.*; }  // 20
get_hand_joint_angular_velocity :: (main: *OpenXRInterface, hand: OpenXRInterface.Hand, joint: OpenXRInterface.HandJoints) -> Vector3 { call_ret := cast(*Vector3) sys_call("OpenXRInterface", "get_hand_joint_angular_velocity", 3529194242, Vector3, main.p_object, hand, joint); return call_ret.*; }  // 21
is_hand_tracking_supported :: (main: *OpenXRInterface) -> bool { call_ret := cast(*bool) sys_call("OpenXRInterface", "is_hand_tracking_supported", 2240911060, bool, main.p_object); return call_ret.*; }  // 22
is_hand_interaction_supported :: (main: *OpenXRInterface) -> bool { call_ret := cast(*bool) sys_call("OpenXRInterface", "is_hand_interaction_supported", 36873697, bool, main.p_object); return call_ret.*; }  // 23
is_eye_gaze_interaction_supported :: (main: *OpenXRInterface) -> bool { call_ret := cast(*bool) sys_call("OpenXRInterface", "is_eye_gaze_interaction_supported", 2240911060, bool, main.p_object); return call_ret.*; }  // 24
get_vrs_min_radius :: (main: *OpenXRInterface) -> float { call_ret := cast(*float) sys_call("OpenXRInterface", "get_vrs_min_radius", 1740695150, float, main.p_object); return call_ret.*; }  // 25
set_vrs_min_radius :: (main: *OpenXRInterface, radius: float) { sys_call("OpenXRInterface", "set_vrs_min_radius", 373806689, Nil, main.p_object, radius);  }  // 26
get_vrs_strength :: (main: *OpenXRInterface) -> float { call_ret := cast(*float) sys_call("OpenXRInterface", "get_vrs_strength", 1740695150, float, main.p_object); return call_ret.*; }  // 27
set_vrs_strength :: (main: *OpenXRInterface, strength: float) { sys_call("OpenXRInterface", "set_vrs_strength", 373806689, Nil, main.p_object, strength);  }  // 28


generate :: (main: *OptimizedTranslation, from: Translation) { sys_call("OptimizedTranslation", "generate", 1466479800, Nil, main.p_object, from);  }  // 0

add_item :: (main: *OptionButton, label: string) { sys_call("OptionButton", "add_item", 2697778442, Nil, main.p_object, label);  }  // 0
add_icon_item :: (main: *OptionButton, texture: Texture2D, label: string) { sys_call("OptionButton", "add_icon_item", 3781678508, Nil, main.p_object, texture, label);  }  // 1
set_item_text :: (main: *OptionButton, idx: int, text: string) { sys_call("OptionButton", "set_item_text", 501894301, Nil, main.p_object, idx, text);  }  // 2
set_item_icon :: (main: *OptionButton, idx: int, texture: Texture2D) { sys_call("OptionButton", "set_item_icon", 666127730, Nil, main.p_object, idx, texture);  }  // 3
set_item_disabled :: (main: *OptionButton, idx: int, disabled: bool) { sys_call("OptionButton", "set_item_disabled", 300928843, Nil, main.p_object, idx, disabled);  }  // 4
set_item_id :: (main: *OptionButton, idx: int, id: int) { sys_call("OptionButton", "set_item_id", 3937882851, Nil, main.p_object, idx, id);  }  // 5
set_item_metadata :: (main: *OptionButton, idx: int, metadata: Variant) { sys_call("OptionButton", "set_item_metadata", 2152698145, Nil, main.p_object, idx, metadata);  }  // 6
set_item_tooltip :: (main: *OptionButton, idx: int, tooltip: string) { sys_call("OptionButton", "set_item_tooltip", 501894301, Nil, main.p_object, idx, tooltip);  }  // 7
get_item_text :: (main: *OptionButton, idx: int) -> gstring { call_ret := cast(*gstring) sys_call("OptionButton", "get_item_text", 844755477, gstring, main.p_object, idx); return call_ret.*; }  // 8
get_item_icon :: (main: *OptionButton, idx: int) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("OptionButton", "get_item_icon", 3536238170, Texture2D, main.p_object, idx); return call_ret; }  // 9
get_item_id :: (main: *OptionButton, idx: int) -> int { call_ret := cast(*int) sys_call("OptionButton", "get_item_id", 923996154, int, main.p_object, idx); return call_ret.*; }  // 10
get_item_index :: (main: *OptionButton, id: int) -> int { call_ret := cast(*int) sys_call("OptionButton", "get_item_index", 923996154, int, main.p_object, id); return call_ret.*; }  // 11
get_item_metadata :: (main: *OptionButton, idx: int) -> Variant { call_ret := cast(*Variant) sys_call("OptionButton", "get_item_metadata", 4227898402, Variant, main.p_object, idx); return call_ret.*; }  // 12
get_item_tooltip :: (main: *OptionButton, idx: int) -> gstring { call_ret := cast(*gstring) sys_call("OptionButton", "get_item_tooltip", 844755477, gstring, main.p_object, idx); return call_ret.*; }  // 13
is_item_disabled :: (main: *OptionButton, idx: int) -> bool { call_ret := cast(*bool) sys_call("OptionButton", "is_item_disabled", 1116898809, bool, main.p_object, idx); return call_ret.*; }  // 14
is_item_separator :: (main: *OptionButton, idx: int) -> bool { call_ret := cast(*bool) sys_call("OptionButton", "is_item_separator", 1116898809, bool, main.p_object, idx); return call_ret.*; }  // 15
add_separator :: (main: *OptionButton) { sys_call("OptionButton", "add_separator", 3005725572, Nil, main.p_object);  }  // 16
clear :: (main: *OptionButton) { sys_call("OptionButton", "clear", 3218959716, Nil, main.p_object);  }  // 17
select :: (main: *OptionButton, idx: int) { sys_call("OptionButton", "select", 1286410249, Nil, main.p_object, idx);  }  // 18
get_selected :: (main: *OptionButton) -> int { call_ret := cast(*int) sys_call("OptionButton", "get_selected", 3905245786, int, main.p_object); return call_ret.*; }  // 19
get_selected_id :: (main: *OptionButton) -> int { call_ret := cast(*int) sys_call("OptionButton", "get_selected_id", 3905245786, int, main.p_object); return call_ret.*; }  // 20
get_selected_metadata :: (main: *OptionButton) -> Variant { call_ret := cast(*Variant) sys_call("OptionButton", "get_selected_metadata", 1214101251, Variant, main.p_object); return call_ret.*; }  // 21
remove_item :: (main: *OptionButton, idx: int) { sys_call("OptionButton", "remove_item", 1286410249, Nil, main.p_object, idx);  }  // 22
get_popup :: (main: *OptionButton) -> *PopupMenu { call_ret := cast(*PopupMenu) sys_call("OptionButton", "get_popup", 229722558, PopupMenu, main.p_object); return call_ret; }  // 23
show_popup :: (main: *OptionButton) { sys_call("OptionButton", "show_popup", 3218959716, Nil, main.p_object);  }  // 24
set_item_count :: (main: *OptionButton, count: int) { sys_call("OptionButton", "set_item_count", 1286410249, Nil, main.p_object, count);  }  // 25
get_item_count :: (main: *OptionButton) -> int { call_ret := cast(*int) sys_call("OptionButton", "get_item_count", 3905245786, int, main.p_object); return call_ret.*; }  // 26
has_selectable_items :: (main: *OptionButton) -> bool { call_ret := cast(*bool) sys_call("OptionButton", "has_selectable_items", 36873697, bool, main.p_object); return call_ret.*; }  // 27
get_selectable_item :: (main: *OptionButton) -> int { call_ret := cast(*int) sys_call("OptionButton", "get_selectable_item", 894402480, int, main.p_object); return call_ret.*; }  // 28
set_fit_to_longest_item :: (main: *OptionButton, fit: bool) { sys_call("OptionButton", "set_fit_to_longest_item", 2586408642, Nil, main.p_object, fit);  }  // 29
is_fit_to_longest_item :: (main: *OptionButton) -> bool { call_ret := cast(*bool) sys_call("OptionButton", "is_fit_to_longest_item", 36873697, bool, main.p_object); return call_ret.*; }  // 30
set_allow_reselect :: (main: *OptionButton, allow: bool) { sys_call("OptionButton", "set_allow_reselect", 2586408642, Nil, main.p_object, allow);  }  // 31
get_allow_reselect :: (main: *OptionButton) -> bool { call_ret := cast(*bool) sys_call("OptionButton", "get_allow_reselect", 36873697, bool, main.p_object); return call_ret.*; }  // 32
set_disable_shortcuts :: (main: *OptionButton, disabled: bool) { sys_call("OptionButton", "set_disable_shortcuts", 2586408642, Nil, main.p_object, disabled);  }  // 33

pck_start :: (main: *PCKPacker, pck_path: string) -> Error { call_ret := cast(*Error) sys_call("PCKPacker", "pck_start", 508410629, Error, main.p_object, pck_path); return call_ret.*; }  // 0
add_file :: (main: *PCKPacker, target_path: string, source_path: string) -> Error { call_ret := cast(*Error) sys_call("PCKPacker", "add_file", 2215643711, Error, main.p_object, target_path, source_path); return call_ret.*; }  // 1
add_file_removal :: (main: *PCKPacker, target_path: string) -> Error { call_ret := cast(*Error) sys_call("PCKPacker", "add_file_removal", 166001499, Error, main.p_object, target_path); return call_ret.*; }  // 2
flush :: (main: *PCKPacker) -> Error { call_ret := cast(*Error) sys_call("PCKPacker", "flush", 1633102583, Error, main.p_object); return call_ret.*; }  // 3

pack :: (main: *PackedDataContainer, value: Variant) -> Error { call_ret := cast(*Error) sys_call("PackedDataContainer", "pack", 966674026, Error, main.p_object, value); return call_ret.*; }  // 0
size :: (main: *PackedDataContainer) -> int { call_ret := cast(*int) sys_call("PackedDataContainer", "size", 3905245786, int, main.p_object); return call_ret.*; }  // 1

size :: (main: *PackedDataContainerRef) -> int { call_ret := cast(*int) sys_call("PackedDataContainerRef", "size", 3905245786, int, main.p_object); return call_ret.*; }  // 0

pack :: (main: *PackedScene, path: Node) -> Error { call_ret := cast(*Error) sys_call("PackedScene", "pack", 2584678054, Error, main.p_object, path); return call_ret.*; }  // 0
instantiate :: (main: *PackedScene) -> *Node { call_ret := cast(*Node) sys_call("PackedScene", "instantiate", 2628778455, Node, main.p_object); return call_ret; }  // 1
can_instantiate :: (main: *PackedScene) -> bool { call_ret := cast(*bool) sys_call("PackedScene", "can_instantiate", 36873697, bool, main.p_object); return call_ret.*; }  // 2
get_state :: (main: *PackedScene) -> *SceneState { call_ret := cast(*SceneState) sys_call("PackedScene", "get_state", 3479783971, SceneState, main.p_object); return call_ret; }  // 3

get_var :: (main: *PacketPeer) -> Variant { call_ret := cast(*Variant) sys_call("PacketPeer", "get_var", 3442865206, Variant, main.p_object); return call_ret.*; }  // 0
put_var :: (main: *PacketPeer, var: Variant) -> Error { call_ret := cast(*Error) sys_call("PacketPeer", "put_var", 2436251611, Error, main.p_object, var); return call_ret.*; }  // 1
get_packet :: (main: *PacketPeer) -> PackedByteArray { call_ret := cast(*PackedByteArray) sys_call("PacketPeer", "get_packet", 2115431945, PackedByteArray, main.p_object); return call_ret.*; }  // 2
put_packet :: (main: *PacketPeer, buffer: PackedByteArray) -> Error { call_ret := cast(*Error) sys_call("PacketPeer", "put_packet", 680677267, Error, main.p_object, buffer); return call_ret.*; }  // 3
get_packet_error :: (main: *PacketPeer) -> Error { call_ret := cast(*Error) sys_call("PacketPeer", "get_packet_error", 3185525595, Error, main.p_object); return call_ret.*; }  // 4
get_available_packet_count :: (main: *PacketPeer) -> int { call_ret := cast(*int) sys_call("PacketPeer", "get_available_packet_count", 3905245786, int, main.p_object); return call_ret.*; }  // 5
get_encode_buffer_max_size :: (main: *PacketPeer) -> int { call_ret := cast(*int) sys_call("PacketPeer", "get_encode_buffer_max_size", 3905245786, int, main.p_object); return call_ret.*; }  // 6
set_encode_buffer_max_size :: (main: *PacketPeer, max_size: int) { sys_call("PacketPeer", "set_encode_buffer_max_size", 1286410249, Nil, main.p_object, max_size);  }  // 7

poll :: (main: *PacketPeerDTLS) { sys_call("PacketPeerDTLS", "poll", 3218959716, Nil, main.p_object);  }  // 0
connect_to_peer :: (main: *PacketPeerDTLS, packet_peer: PacketPeerUDP, hostname: string) -> Error { call_ret := cast(*Error) sys_call("PacketPeerDTLS", "connect_to_peer", 2880188099, Error, main.p_object, packet_peer, hostname); return call_ret.*; }  // 1
get_status :: (main: *PacketPeerDTLS) -> PacketPeerDTLS.Status { call_ret := cast(*PacketPeerDTLS.Status) sys_call("PacketPeerDTLS", "get_status", 3248654679, PacketPeerDTLS.Status, main.p_object); return call_ret.*; }  // 2
disconnect_from_peer :: (main: *PacketPeerDTLS) { sys_call("PacketPeerDTLS", "disconnect_from_peer", 3218959716, Nil, main.p_object);  }  // 3


set_stream_peer :: (main: *PacketPeerStream, peer: StreamPeer) { sys_call("PacketPeerStream", "set_stream_peer", 3281897016, Nil, main.p_object, peer);  }  // 0
get_stream_peer :: (main: *PacketPeerStream) -> *StreamPeer { call_ret := cast(*StreamPeer) sys_call("PacketPeerStream", "get_stream_peer", 2741655269, StreamPeer, main.p_object); return call_ret; }  // 1
set_input_buffer_max_size :: (main: *PacketPeerStream, max_size_bytes: int) { sys_call("PacketPeerStream", "set_input_buffer_max_size", 1286410249, Nil, main.p_object, max_size_bytes);  }  // 2
set_output_buffer_max_size :: (main: *PacketPeerStream, max_size_bytes: int) { sys_call("PacketPeerStream", "set_output_buffer_max_size", 1286410249, Nil, main.p_object, max_size_bytes);  }  // 3
get_input_buffer_max_size :: (main: *PacketPeerStream) -> int { call_ret := cast(*int) sys_call("PacketPeerStream", "get_input_buffer_max_size", 3905245786, int, main.p_object); return call_ret.*; }  // 4
get_output_buffer_max_size :: (main: *PacketPeerStream) -> int { call_ret := cast(*int) sys_call("PacketPeerStream", "get_output_buffer_max_size", 3905245786, int, main.p_object); return call_ret.*; }  // 5

bind :: (main: *PacketPeerUDP, port: int) -> Error { call_ret := cast(*Error) sys_call("PacketPeerUDP", "bind", 4051239242, Error, main.p_object, port); return call_ret.*; }  // 0
close :: (main: *PacketPeerUDP) { sys_call("PacketPeerUDP", "close", 3218959716, Nil, main.p_object);  }  // 1
wait :: (main: *PacketPeerUDP) -> Error { call_ret := cast(*Error) sys_call("PacketPeerUDP", "wait", 166280745, Error, main.p_object); return call_ret.*; }  // 2
is_bound :: (main: *PacketPeerUDP) -> bool { call_ret := cast(*bool) sys_call("PacketPeerUDP", "is_bound", 36873697, bool, main.p_object); return call_ret.*; }  // 3
connect_to_host :: (main: *PacketPeerUDP, host: string, port: int) -> Error { call_ret := cast(*Error) sys_call("PacketPeerUDP", "connect_to_host", 993915709, Error, main.p_object, host, port); return call_ret.*; }  // 4
is_socket_connected :: (main: *PacketPeerUDP) -> bool { call_ret := cast(*bool) sys_call("PacketPeerUDP", "is_socket_connected", 36873697, bool, main.p_object); return call_ret.*; }  // 5
get_packet_ip :: (main: *PacketPeerUDP) -> gstring { call_ret := cast(*gstring) sys_call("PacketPeerUDP", "get_packet_ip", 201670096, gstring, main.p_object); return call_ret.*; }  // 6
get_packet_port :: (main: *PacketPeerUDP) -> int { call_ret := cast(*int) sys_call("PacketPeerUDP", "get_packet_port", 3905245786, int, main.p_object); return call_ret.*; }  // 7
get_local_port :: (main: *PacketPeerUDP) -> int { call_ret := cast(*int) sys_call("PacketPeerUDP", "get_local_port", 3905245786, int, main.p_object); return call_ret.*; }  // 8
set_dest_address :: (main: *PacketPeerUDP, host: string, port: int) -> Error { call_ret := cast(*Error) sys_call("PacketPeerUDP", "set_dest_address", 993915709, Error, main.p_object, host, port); return call_ret.*; }  // 9
set_broadcast_enabled :: (main: *PacketPeerUDP, enabled: bool) { sys_call("PacketPeerUDP", "set_broadcast_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 10
join_multicast_group :: (main: *PacketPeerUDP, multicast_address: string, interface_name: string) -> Error { call_ret := cast(*Error) sys_call("PacketPeerUDP", "join_multicast_group", 852856452, Error, main.p_object, multicast_address, interface_name); return call_ret.*; }  // 11
leave_multicast_group :: (main: *PacketPeerUDP, multicast_address: string, interface_name: string) -> Error { call_ret := cast(*Error) sys_call("PacketPeerUDP", "leave_multicast_group", 852856452, Error, main.p_object, multicast_address, interface_name); return call_ret.*; }  // 12



set_panorama :: (main: *PanoramaSkyMaterial, texture: Texture2D) { sys_call("PanoramaSkyMaterial", "set_panorama", 4051416890, Nil, main.p_object, texture);  }  // 0
get_panorama :: (main: *PanoramaSkyMaterial) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("PanoramaSkyMaterial", "get_panorama", 3635182373, Texture2D, main.p_object); return call_ret; }  // 1
set_filtering_enabled :: (main: *PanoramaSkyMaterial, enabled: bool) { sys_call("PanoramaSkyMaterial", "set_filtering_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 2
is_filtering_enabled :: (main: *PanoramaSkyMaterial) -> bool { call_ret := cast(*bool) sys_call("PanoramaSkyMaterial", "is_filtering_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 3
set_energy_multiplier :: (main: *PanoramaSkyMaterial, multiplier: float) { sys_call("PanoramaSkyMaterial", "set_energy_multiplier", 373806689, Nil, main.p_object, multiplier);  }  // 4
get_energy_multiplier :: (main: *PanoramaSkyMaterial) -> float { call_ret := cast(*float) sys_call("PanoramaSkyMaterial", "get_energy_multiplier", 1740695150, float, main.p_object); return call_ret.*; }  // 5

set_scroll_scale :: (main: *Parallax2D, scale: Vector2) { sys_call("Parallax2D", "set_scroll_scale", 743155724, Nil, main.p_object, scale);  }  // 0
get_scroll_scale :: (main: *Parallax2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("Parallax2D", "get_scroll_scale", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 1
set_repeat_size :: (main: *Parallax2D, repeat_size: Vector2) { sys_call("Parallax2D", "set_repeat_size", 743155724, Nil, main.p_object, repeat_size);  }  // 2
get_repeat_size :: (main: *Parallax2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("Parallax2D", "get_repeat_size", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 3
set_repeat_times :: (main: *Parallax2D, repeat_times: int) { sys_call("Parallax2D", "set_repeat_times", 1286410249, Nil, main.p_object, repeat_times);  }  // 4
get_repeat_times :: (main: *Parallax2D) -> int { call_ret := cast(*int) sys_call("Parallax2D", "get_repeat_times", 3905245786, int, main.p_object); return call_ret.*; }  // 5
set_autoscroll :: (main: *Parallax2D, autoscroll: Vector2) { sys_call("Parallax2D", "set_autoscroll", 743155724, Nil, main.p_object, autoscroll);  }  // 6
get_autoscroll :: (main: *Parallax2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("Parallax2D", "get_autoscroll", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 7
set_scroll_offset :: (main: *Parallax2D, offset: Vector2) { sys_call("Parallax2D", "set_scroll_offset", 743155724, Nil, main.p_object, offset);  }  // 8
get_scroll_offset :: (main: *Parallax2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("Parallax2D", "get_scroll_offset", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 9
set_screen_offset :: (main: *Parallax2D, offset: Vector2) { sys_call("Parallax2D", "set_screen_offset", 743155724, Nil, main.p_object, offset);  }  // 10
get_screen_offset :: (main: *Parallax2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("Parallax2D", "get_screen_offset", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 11
set_limit_begin :: (main: *Parallax2D, offset: Vector2) { sys_call("Parallax2D", "set_limit_begin", 743155724, Nil, main.p_object, offset);  }  // 12
get_limit_begin :: (main: *Parallax2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("Parallax2D", "get_limit_begin", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 13
set_limit_end :: (main: *Parallax2D, offset: Vector2) { sys_call("Parallax2D", "set_limit_end", 743155724, Nil, main.p_object, offset);  }  // 14
get_limit_end :: (main: *Parallax2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("Parallax2D", "get_limit_end", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 15
set_follow_viewport :: (main: *Parallax2D, follow: bool) { sys_call("Parallax2D", "set_follow_viewport", 2586408642, Nil, main.p_object, follow);  }  // 16
get_follow_viewport :: (main: *Parallax2D) -> bool { call_ret := cast(*bool) sys_call("Parallax2D", "get_follow_viewport", 2240911060, bool, main.p_object); return call_ret.*; }  // 17
set_ignore_camera_scroll :: (main: *Parallax2D, ignore: bool) { sys_call("Parallax2D", "set_ignore_camera_scroll", 2586408642, Nil, main.p_object, ignore);  }  // 18
is_ignore_camera_scroll :: (main: *Parallax2D) -> bool { call_ret := cast(*bool) sys_call("Parallax2D", "is_ignore_camera_scroll", 2240911060, bool, main.p_object); return call_ret.*; }  // 19

set_scroll_offset :: (main: *ParallaxBackground, offset: Vector2) { sys_call("ParallaxBackground", "set_scroll_offset", 743155724, Nil, main.p_object, offset);  }  // 0
get_scroll_offset :: (main: *ParallaxBackground) -> Vector2 { call_ret := cast(*Vector2) sys_call("ParallaxBackground", "get_scroll_offset", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 1
set_scroll_base_offset :: (main: *ParallaxBackground, offset: Vector2) { sys_call("ParallaxBackground", "set_scroll_base_offset", 743155724, Nil, main.p_object, offset);  }  // 2
get_scroll_base_offset :: (main: *ParallaxBackground) -> Vector2 { call_ret := cast(*Vector2) sys_call("ParallaxBackground", "get_scroll_base_offset", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 3
set_scroll_base_scale :: (main: *ParallaxBackground, scale: Vector2) { sys_call("ParallaxBackground", "set_scroll_base_scale", 743155724, Nil, main.p_object, scale);  }  // 4
get_scroll_base_scale :: (main: *ParallaxBackground) -> Vector2 { call_ret := cast(*Vector2) sys_call("ParallaxBackground", "get_scroll_base_scale", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 5
set_limit_begin :: (main: *ParallaxBackground, offset: Vector2) { sys_call("ParallaxBackground", "set_limit_begin", 743155724, Nil, main.p_object, offset);  }  // 6
get_limit_begin :: (main: *ParallaxBackground) -> Vector2 { call_ret := cast(*Vector2) sys_call("ParallaxBackground", "get_limit_begin", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 7
set_limit_end :: (main: *ParallaxBackground, offset: Vector2) { sys_call("ParallaxBackground", "set_limit_end", 743155724, Nil, main.p_object, offset);  }  // 8
get_limit_end :: (main: *ParallaxBackground) -> Vector2 { call_ret := cast(*Vector2) sys_call("ParallaxBackground", "get_limit_end", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 9
set_ignore_camera_zoom :: (main: *ParallaxBackground, ignore: bool) { sys_call("ParallaxBackground", "set_ignore_camera_zoom", 2586408642, Nil, main.p_object, ignore);  }  // 10
is_ignore_camera_zoom :: (main: *ParallaxBackground) -> bool { call_ret := cast(*bool) sys_call("ParallaxBackground", "is_ignore_camera_zoom", 2240911060, bool, main.p_object); return call_ret.*; }  // 11

set_motion_scale :: (main: *ParallaxLayer, scale: Vector2) { sys_call("ParallaxLayer", "set_motion_scale", 743155724, Nil, main.p_object, scale);  }  // 0
get_motion_scale :: (main: *ParallaxLayer) -> Vector2 { call_ret := cast(*Vector2) sys_call("ParallaxLayer", "get_motion_scale", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 1
set_motion_offset :: (main: *ParallaxLayer, offset: Vector2) { sys_call("ParallaxLayer", "set_motion_offset", 743155724, Nil, main.p_object, offset);  }  // 2
get_motion_offset :: (main: *ParallaxLayer) -> Vector2 { call_ret := cast(*Vector2) sys_call("ParallaxLayer", "get_motion_offset", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 3
set_mirroring :: (main: *ParallaxLayer, mirror: Vector2) { sys_call("ParallaxLayer", "set_mirroring", 743155724, Nil, main.p_object, mirror);  }  // 4
get_mirroring :: (main: *ParallaxLayer) -> Vector2 { call_ret := cast(*Vector2) sys_call("ParallaxLayer", "get_mirroring", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 5

set_direction :: (main: *ParticleProcessMaterial, degrees: Vector3) { sys_call("ParticleProcessMaterial", "set_direction", 3460891852, Nil, main.p_object, degrees);  }  // 0
get_direction :: (main: *ParticleProcessMaterial) -> Vector3 { call_ret := cast(*Vector3) sys_call("ParticleProcessMaterial", "get_direction", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 1
set_inherit_velocity_ratio :: (main: *ParticleProcessMaterial, ratio: float) { sys_call("ParticleProcessMaterial", "set_inherit_velocity_ratio", 373806689, Nil, main.p_object, ratio);  }  // 2
get_inherit_velocity_ratio :: (main: *ParticleProcessMaterial) -> float { call_ret := cast(*float) sys_call("ParticleProcessMaterial", "get_inherit_velocity_ratio", 191475506, float, main.p_object); return call_ret.*; }  // 3
set_spread :: (main: *ParticleProcessMaterial, degrees: float) { sys_call("ParticleProcessMaterial", "set_spread", 373806689, Nil, main.p_object, degrees);  }  // 4
get_spread :: (main: *ParticleProcessMaterial) -> float { call_ret := cast(*float) sys_call("ParticleProcessMaterial", "get_spread", 1740695150, float, main.p_object); return call_ret.*; }  // 5
set_flatness :: (main: *ParticleProcessMaterial, amount: float) { sys_call("ParticleProcessMaterial", "set_flatness", 373806689, Nil, main.p_object, amount);  }  // 6
get_flatness :: (main: *ParticleProcessMaterial) -> float { call_ret := cast(*float) sys_call("ParticleProcessMaterial", "get_flatness", 1740695150, float, main.p_object); return call_ret.*; }  // 7
set_param :: (main: *ParticleProcessMaterial, param: ParticleProcessMaterial.Parameter, value: Vector2) { sys_call("ParticleProcessMaterial", "set_param", 676779352, Nil, main.p_object, param, value);  }  // 8
get_param :: (main: *ParticleProcessMaterial, param: ParticleProcessMaterial.Parameter) -> Vector2 { call_ret := cast(*Vector2) sys_call("ParticleProcessMaterial", "get_param", 2623708480, Vector2, main.p_object, param); return call_ret.*; }  // 9
set_param_min :: (main: *ParticleProcessMaterial, param: ParticleProcessMaterial.Parameter, value: float) { sys_call("ParticleProcessMaterial", "set_param_min", 2295964248, Nil, main.p_object, param, value);  }  // 10
get_param_min :: (main: *ParticleProcessMaterial, param: ParticleProcessMaterial.Parameter) -> float { call_ret := cast(*float) sys_call("ParticleProcessMaterial", "get_param_min", 3903786503, float, main.p_object, param); return call_ret.*; }  // 11
set_param_max :: (main: *ParticleProcessMaterial, param: ParticleProcessMaterial.Parameter, value: float) { sys_call("ParticleProcessMaterial", "set_param_max", 2295964248, Nil, main.p_object, param, value);  }  // 12
get_param_max :: (main: *ParticleProcessMaterial, param: ParticleProcessMaterial.Parameter) -> float { call_ret := cast(*float) sys_call("ParticleProcessMaterial", "get_param_max", 3903786503, float, main.p_object, param); return call_ret.*; }  // 13
set_param_texture :: (main: *ParticleProcessMaterial, param: ParticleProcessMaterial.Parameter, texture: Texture2D) { sys_call("ParticleProcessMaterial", "set_param_texture", 526976089, Nil, main.p_object, param, texture);  }  // 14
get_param_texture :: (main: *ParticleProcessMaterial, param: ParticleProcessMaterial.Parameter) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("ParticleProcessMaterial", "get_param_texture", 3489372978, Texture2D, main.p_object, param); return call_ret; }  // 15
set_color :: (main: *ParticleProcessMaterial, color: Color) { sys_call("ParticleProcessMaterial", "set_color", 2920490490, Nil, main.p_object, color);  }  // 16
get_color :: (main: *ParticleProcessMaterial) -> Color { call_ret := cast(*Color) sys_call("ParticleProcessMaterial", "get_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 17
set_color_ramp :: (main: *ParticleProcessMaterial, ramp: Texture2D) { sys_call("ParticleProcessMaterial", "set_color_ramp", 4051416890, Nil, main.p_object, ramp);  }  // 18
get_color_ramp :: (main: *ParticleProcessMaterial) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("ParticleProcessMaterial", "get_color_ramp", 3635182373, Texture2D, main.p_object); return call_ret; }  // 19
set_alpha_curve :: (main: *ParticleProcessMaterial, curve: Texture2D) { sys_call("ParticleProcessMaterial", "set_alpha_curve", 4051416890, Nil, main.p_object, curve);  }  // 20
get_alpha_curve :: (main: *ParticleProcessMaterial) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("ParticleProcessMaterial", "get_alpha_curve", 3635182373, Texture2D, main.p_object); return call_ret; }  // 21
set_emission_curve :: (main: *ParticleProcessMaterial, curve: Texture2D) { sys_call("ParticleProcessMaterial", "set_emission_curve", 4051416890, Nil, main.p_object, curve);  }  // 22
get_emission_curve :: (main: *ParticleProcessMaterial) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("ParticleProcessMaterial", "get_emission_curve", 3635182373, Texture2D, main.p_object); return call_ret; }  // 23
set_color_initial_ramp :: (main: *ParticleProcessMaterial, ramp: Texture2D) { sys_call("ParticleProcessMaterial", "set_color_initial_ramp", 4051416890, Nil, main.p_object, ramp);  }  // 24
get_color_initial_ramp :: (main: *ParticleProcessMaterial) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("ParticleProcessMaterial", "get_color_initial_ramp", 3635182373, Texture2D, main.p_object); return call_ret; }  // 25
set_velocity_limit_curve :: (main: *ParticleProcessMaterial, curve: Texture2D) { sys_call("ParticleProcessMaterial", "set_velocity_limit_curve", 4051416890, Nil, main.p_object, curve);  }  // 26
get_velocity_limit_curve :: (main: *ParticleProcessMaterial) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("ParticleProcessMaterial", "get_velocity_limit_curve", 3635182373, Texture2D, main.p_object); return call_ret; }  // 27
set_particle_flag :: (main: *ParticleProcessMaterial, particle_flag: ParticleProcessMaterial.ParticleFlags, enable: bool) { sys_call("ParticleProcessMaterial", "set_particle_flag", 1711815571, Nil, main.p_object, particle_flag, enable);  }  // 28
get_particle_flag :: (main: *ParticleProcessMaterial, particle_flag: ParticleProcessMaterial.ParticleFlags) -> bool { call_ret := cast(*bool) sys_call("ParticleProcessMaterial", "get_particle_flag", 3895316907, bool, main.p_object, particle_flag); return call_ret.*; }  // 29
set_velocity_pivot :: (main: *ParticleProcessMaterial, pivot: Vector3) { sys_call("ParticleProcessMaterial", "set_velocity_pivot", 3460891852, Nil, main.p_object, pivot);  }  // 30
get_velocity_pivot :: (main: *ParticleProcessMaterial) -> Vector3 { call_ret := cast(*Vector3) sys_call("ParticleProcessMaterial", "get_velocity_pivot", 3783033775, Vector3, main.p_object); return call_ret.*; }  // 31
set_emission_shape :: (main: *ParticleProcessMaterial, shape: ParticleProcessMaterial.EmissionShape) { sys_call("ParticleProcessMaterial", "set_emission_shape", 461501442, Nil, main.p_object, shape);  }  // 32
get_emission_shape :: (main: *ParticleProcessMaterial) -> ParticleProcessMaterial.EmissionShape { call_ret := cast(*ParticleProcessMaterial.EmissionShape) sys_call("ParticleProcessMaterial", "get_emission_shape", 3719733018, ParticleProcessMaterial.EmissionShape, main.p_object); return call_ret.*; }  // 33
set_emission_sphere_radius :: (main: *ParticleProcessMaterial, radius: float) { sys_call("ParticleProcessMaterial", "set_emission_sphere_radius", 373806689, Nil, main.p_object, radius);  }  // 34
get_emission_sphere_radius :: (main: *ParticleProcessMaterial) -> float { call_ret := cast(*float) sys_call("ParticleProcessMaterial", "get_emission_sphere_radius", 1740695150, float, main.p_object); return call_ret.*; }  // 35
set_emission_box_extents :: (main: *ParticleProcessMaterial, extents: Vector3) { sys_call("ParticleProcessMaterial", "set_emission_box_extents", 3460891852, Nil, main.p_object, extents);  }  // 36
get_emission_box_extents :: (main: *ParticleProcessMaterial) -> Vector3 { call_ret := cast(*Vector3) sys_call("ParticleProcessMaterial", "get_emission_box_extents", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 37
set_emission_point_texture :: (main: *ParticleProcessMaterial, texture: Texture2D) { sys_call("ParticleProcessMaterial", "set_emission_point_texture", 4051416890, Nil, main.p_object, texture);  }  // 38
get_emission_point_texture :: (main: *ParticleProcessMaterial) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("ParticleProcessMaterial", "get_emission_point_texture", 3635182373, Texture2D, main.p_object); return call_ret; }  // 39
set_emission_normal_texture :: (main: *ParticleProcessMaterial, texture: Texture2D) { sys_call("ParticleProcessMaterial", "set_emission_normal_texture", 4051416890, Nil, main.p_object, texture);  }  // 40
get_emission_normal_texture :: (main: *ParticleProcessMaterial) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("ParticleProcessMaterial", "get_emission_normal_texture", 3635182373, Texture2D, main.p_object); return call_ret; }  // 41
set_emission_color_texture :: (main: *ParticleProcessMaterial, texture: Texture2D) { sys_call("ParticleProcessMaterial", "set_emission_color_texture", 4051416890, Nil, main.p_object, texture);  }  // 42
get_emission_color_texture :: (main: *ParticleProcessMaterial) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("ParticleProcessMaterial", "get_emission_color_texture", 3635182373, Texture2D, main.p_object); return call_ret; }  // 43
set_emission_point_count :: (main: *ParticleProcessMaterial, point_count: int) { sys_call("ParticleProcessMaterial", "set_emission_point_count", 1286410249, Nil, main.p_object, point_count);  }  // 44
get_emission_point_count :: (main: *ParticleProcessMaterial) -> int { call_ret := cast(*int) sys_call("ParticleProcessMaterial", "get_emission_point_count", 3905245786, int, main.p_object); return call_ret.*; }  // 45
set_emission_ring_axis :: (main: *ParticleProcessMaterial, axis: Vector3) { sys_call("ParticleProcessMaterial", "set_emission_ring_axis", 3460891852, Nil, main.p_object, axis);  }  // 46
get_emission_ring_axis :: (main: *ParticleProcessMaterial) -> Vector3 { call_ret := cast(*Vector3) sys_call("ParticleProcessMaterial", "get_emission_ring_axis", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 47
set_emission_ring_height :: (main: *ParticleProcessMaterial, height: float) { sys_call("ParticleProcessMaterial", "set_emission_ring_height", 373806689, Nil, main.p_object, height);  }  // 48
get_emission_ring_height :: (main: *ParticleProcessMaterial) -> float { call_ret := cast(*float) sys_call("ParticleProcessMaterial", "get_emission_ring_height", 1740695150, float, main.p_object); return call_ret.*; }  // 49
set_emission_ring_radius :: (main: *ParticleProcessMaterial, radius: float) { sys_call("ParticleProcessMaterial", "set_emission_ring_radius", 373806689, Nil, main.p_object, radius);  }  // 50
get_emission_ring_radius :: (main: *ParticleProcessMaterial) -> float { call_ret := cast(*float) sys_call("ParticleProcessMaterial", "get_emission_ring_radius", 1740695150, float, main.p_object); return call_ret.*; }  // 51
set_emission_ring_inner_radius :: (main: *ParticleProcessMaterial, inner_radius: float) { sys_call("ParticleProcessMaterial", "set_emission_ring_inner_radius", 373806689, Nil, main.p_object, inner_radius);  }  // 52
get_emission_ring_inner_radius :: (main: *ParticleProcessMaterial) -> float { call_ret := cast(*float) sys_call("ParticleProcessMaterial", "get_emission_ring_inner_radius", 1740695150, float, main.p_object); return call_ret.*; }  // 53
set_emission_ring_cone_angle :: (main: *ParticleProcessMaterial, cone_angle: float) { sys_call("ParticleProcessMaterial", "set_emission_ring_cone_angle", 373806689, Nil, main.p_object, cone_angle);  }  // 54
get_emission_ring_cone_angle :: (main: *ParticleProcessMaterial) -> float { call_ret := cast(*float) sys_call("ParticleProcessMaterial", "get_emission_ring_cone_angle", 1740695150, float, main.p_object); return call_ret.*; }  // 55
set_emission_shape_offset :: (main: *ParticleProcessMaterial, emission_shape_offset: Vector3) { sys_call("ParticleProcessMaterial", "set_emission_shape_offset", 3460891852, Nil, main.p_object, emission_shape_offset);  }  // 56
get_emission_shape_offset :: (main: *ParticleProcessMaterial) -> Vector3 { call_ret := cast(*Vector3) sys_call("ParticleProcessMaterial", "get_emission_shape_offset", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 57
set_emission_shape_scale :: (main: *ParticleProcessMaterial, emission_shape_scale: Vector3) { sys_call("ParticleProcessMaterial", "set_emission_shape_scale", 3460891852, Nil, main.p_object, emission_shape_scale);  }  // 58
get_emission_shape_scale :: (main: *ParticleProcessMaterial) -> Vector3 { call_ret := cast(*Vector3) sys_call("ParticleProcessMaterial", "get_emission_shape_scale", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 59
get_turbulence_enabled :: (main: *ParticleProcessMaterial) -> bool { call_ret := cast(*bool) sys_call("ParticleProcessMaterial", "get_turbulence_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 60
set_turbulence_enabled :: (main: *ParticleProcessMaterial, turbulence_enabled: bool) { sys_call("ParticleProcessMaterial", "set_turbulence_enabled", 2586408642, Nil, main.p_object, turbulence_enabled);  }  // 61
get_turbulence_noise_strength :: (main: *ParticleProcessMaterial) -> float { call_ret := cast(*float) sys_call("ParticleProcessMaterial", "get_turbulence_noise_strength", 1740695150, float, main.p_object); return call_ret.*; }  // 62
set_turbulence_noise_strength :: (main: *ParticleProcessMaterial, turbulence_noise_strength: float) { sys_call("ParticleProcessMaterial", "set_turbulence_noise_strength", 373806689, Nil, main.p_object, turbulence_noise_strength);  }  // 63
get_turbulence_noise_scale :: (main: *ParticleProcessMaterial) -> float { call_ret := cast(*float) sys_call("ParticleProcessMaterial", "get_turbulence_noise_scale", 1740695150, float, main.p_object); return call_ret.*; }  // 64
set_turbulence_noise_scale :: (main: *ParticleProcessMaterial, turbulence_noise_scale: float) { sys_call("ParticleProcessMaterial", "set_turbulence_noise_scale", 373806689, Nil, main.p_object, turbulence_noise_scale);  }  // 65
get_turbulence_noise_speed_random :: (main: *ParticleProcessMaterial) -> float { call_ret := cast(*float) sys_call("ParticleProcessMaterial", "get_turbulence_noise_speed_random", 1740695150, float, main.p_object); return call_ret.*; }  // 66
set_turbulence_noise_speed_random :: (main: *ParticleProcessMaterial, turbulence_noise_speed_random: float) { sys_call("ParticleProcessMaterial", "set_turbulence_noise_speed_random", 373806689, Nil, main.p_object, turbulence_noise_speed_random);  }  // 67
get_turbulence_noise_speed :: (main: *ParticleProcessMaterial) -> Vector3 { call_ret := cast(*Vector3) sys_call("ParticleProcessMaterial", "get_turbulence_noise_speed", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 68
set_turbulence_noise_speed :: (main: *ParticleProcessMaterial, turbulence_noise_speed: Vector3) { sys_call("ParticleProcessMaterial", "set_turbulence_noise_speed", 3460891852, Nil, main.p_object, turbulence_noise_speed);  }  // 69
get_gravity :: (main: *ParticleProcessMaterial) -> Vector3 { call_ret := cast(*Vector3) sys_call("ParticleProcessMaterial", "get_gravity", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 70
set_gravity :: (main: *ParticleProcessMaterial, accel_vec: Vector3) { sys_call("ParticleProcessMaterial", "set_gravity", 3460891852, Nil, main.p_object, accel_vec);  }  // 71
set_lifetime_randomness :: (main: *ParticleProcessMaterial, randomness: float) { sys_call("ParticleProcessMaterial", "set_lifetime_randomness", 373806689, Nil, main.p_object, randomness);  }  // 72
get_lifetime_randomness :: (main: *ParticleProcessMaterial) -> float { call_ret := cast(*float) sys_call("ParticleProcessMaterial", "get_lifetime_randomness", 1740695150, float, main.p_object); return call_ret.*; }  // 73
get_sub_emitter_mode :: (main: *ParticleProcessMaterial) -> ParticleProcessMaterial.SubEmitterMode { call_ret := cast(*ParticleProcessMaterial.SubEmitterMode) sys_call("ParticleProcessMaterial", "get_sub_emitter_mode", 2399052877, ParticleProcessMaterial.SubEmitterMode, main.p_object); return call_ret.*; }  // 74
set_sub_emitter_mode :: (main: *ParticleProcessMaterial, mode: ParticleProcessMaterial.SubEmitterMode) { sys_call("ParticleProcessMaterial", "set_sub_emitter_mode", 2161806672, Nil, main.p_object, mode);  }  // 75
get_sub_emitter_frequency :: (main: *ParticleProcessMaterial) -> float { call_ret := cast(*float) sys_call("ParticleProcessMaterial", "get_sub_emitter_frequency", 1740695150, float, main.p_object); return call_ret.*; }  // 76
set_sub_emitter_frequency :: (main: *ParticleProcessMaterial, hz: float) { sys_call("ParticleProcessMaterial", "set_sub_emitter_frequency", 373806689, Nil, main.p_object, hz);  }  // 77
get_sub_emitter_amount_at_end :: (main: *ParticleProcessMaterial) -> int { call_ret := cast(*int) sys_call("ParticleProcessMaterial", "get_sub_emitter_amount_at_end", 3905245786, int, main.p_object); return call_ret.*; }  // 78
set_sub_emitter_amount_at_end :: (main: *ParticleProcessMaterial, amount: int) { sys_call("ParticleProcessMaterial", "set_sub_emitter_amount_at_end", 1286410249, Nil, main.p_object, amount);  }  // 79
get_sub_emitter_amount_at_collision :: (main: *ParticleProcessMaterial) -> int { call_ret := cast(*int) sys_call("ParticleProcessMaterial", "get_sub_emitter_amount_at_collision", 3905245786, int, main.p_object); return call_ret.*; }  // 80
set_sub_emitter_amount_at_collision :: (main: *ParticleProcessMaterial, amount: int) { sys_call("ParticleProcessMaterial", "set_sub_emitter_amount_at_collision", 1286410249, Nil, main.p_object, amount);  }  // 81
get_sub_emitter_amount_at_start :: (main: *ParticleProcessMaterial) -> int { call_ret := cast(*int) sys_call("ParticleProcessMaterial", "get_sub_emitter_amount_at_start", 3905245786, int, main.p_object); return call_ret.*; }  // 82
set_sub_emitter_amount_at_start :: (main: *ParticleProcessMaterial, amount: int) { sys_call("ParticleProcessMaterial", "set_sub_emitter_amount_at_start", 1286410249, Nil, main.p_object, amount);  }  // 83
get_sub_emitter_keep_velocity :: (main: *ParticleProcessMaterial) -> bool { call_ret := cast(*bool) sys_call("ParticleProcessMaterial", "get_sub_emitter_keep_velocity", 36873697, bool, main.p_object); return call_ret.*; }  // 84
set_sub_emitter_keep_velocity :: (main: *ParticleProcessMaterial, enable: bool) { sys_call("ParticleProcessMaterial", "set_sub_emitter_keep_velocity", 2586408642, Nil, main.p_object, enable);  }  // 85
set_attractor_interaction_enabled :: (main: *ParticleProcessMaterial, enabled: bool) { sys_call("ParticleProcessMaterial", "set_attractor_interaction_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 86
is_attractor_interaction_enabled :: (main: *ParticleProcessMaterial) -> bool { call_ret := cast(*bool) sys_call("ParticleProcessMaterial", "is_attractor_interaction_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 87
set_collision_mode :: (main: *ParticleProcessMaterial, mode: ParticleProcessMaterial.CollisionMode) { sys_call("ParticleProcessMaterial", "set_collision_mode", 653804659, Nil, main.p_object, mode);  }  // 88
get_collision_mode :: (main: *ParticleProcessMaterial) -> ParticleProcessMaterial.CollisionMode { call_ret := cast(*ParticleProcessMaterial.CollisionMode) sys_call("ParticleProcessMaterial", "get_collision_mode", 139371864, ParticleProcessMaterial.CollisionMode, main.p_object); return call_ret.*; }  // 89
set_collision_use_scale :: (main: *ParticleProcessMaterial, radius: bool) { sys_call("ParticleProcessMaterial", "set_collision_use_scale", 2586408642, Nil, main.p_object, radius);  }  // 90
is_collision_using_scale :: (main: *ParticleProcessMaterial) -> bool { call_ret := cast(*bool) sys_call("ParticleProcessMaterial", "is_collision_using_scale", 36873697, bool, main.p_object); return call_ret.*; }  // 91
set_collision_friction :: (main: *ParticleProcessMaterial, friction: float) { sys_call("ParticleProcessMaterial", "set_collision_friction", 373806689, Nil, main.p_object, friction);  }  // 92
get_collision_friction :: (main: *ParticleProcessMaterial) -> float { call_ret := cast(*float) sys_call("ParticleProcessMaterial", "get_collision_friction", 1740695150, float, main.p_object); return call_ret.*; }  // 93
set_collision_bounce :: (main: *ParticleProcessMaterial, bounce: float) { sys_call("ParticleProcessMaterial", "set_collision_bounce", 373806689, Nil, main.p_object, bounce);  }  // 94
get_collision_bounce :: (main: *ParticleProcessMaterial) -> float { call_ret := cast(*float) sys_call("ParticleProcessMaterial", "get_collision_bounce", 1740695150, float, main.p_object); return call_ret.*; }  // 95

set_curve :: (main: *Path2D, curve: Curve2D) { sys_call("Path2D", "set_curve", 659985499, Nil, main.p_object, curve);  }  // 0
get_curve :: (main: *Path2D) -> *Curve2D { call_ret := cast(*Curve2D) sys_call("Path2D", "get_curve", 660369445, Curve2D, main.p_object); return call_ret; }  // 1

set_curve :: (main: *Path3D, curve: Curve3D) { sys_call("Path3D", "set_curve", 408955118, Nil, main.p_object, curve);  }  // 0
get_curve :: (main: *Path3D) -> *Curve3D { call_ret := cast(*Curve3D) sys_call("Path3D", "get_curve", 4244715212, Curve3D, main.p_object); return call_ret; }  // 1

set_progress :: (main: *PathFollow2D, progress: float) { sys_call("PathFollow2D", "set_progress", 373806689, Nil, main.p_object, progress);  }  // 0
get_progress :: (main: *PathFollow2D) -> float { call_ret := cast(*float) sys_call("PathFollow2D", "get_progress", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_h_offset :: (main: *PathFollow2D, h_offset: float) { sys_call("PathFollow2D", "set_h_offset", 373806689, Nil, main.p_object, h_offset);  }  // 2
get_h_offset :: (main: *PathFollow2D) -> float { call_ret := cast(*float) sys_call("PathFollow2D", "get_h_offset", 1740695150, float, main.p_object); return call_ret.*; }  // 3
set_v_offset :: (main: *PathFollow2D, v_offset: float) { sys_call("PathFollow2D", "set_v_offset", 373806689, Nil, main.p_object, v_offset);  }  // 4
get_v_offset :: (main: *PathFollow2D) -> float { call_ret := cast(*float) sys_call("PathFollow2D", "get_v_offset", 1740695150, float, main.p_object); return call_ret.*; }  // 5
set_progress_ratio :: (main: *PathFollow2D, ratio: float) { sys_call("PathFollow2D", "set_progress_ratio", 373806689, Nil, main.p_object, ratio);  }  // 6
get_progress_ratio :: (main: *PathFollow2D) -> float { call_ret := cast(*float) sys_call("PathFollow2D", "get_progress_ratio", 1740695150, float, main.p_object); return call_ret.*; }  // 7
set_rotates :: (main: *PathFollow2D, enabled: bool) { sys_call("PathFollow2D", "set_rotates", 2586408642, Nil, main.p_object, enabled);  }  // 8
is_rotating :: (main: *PathFollow2D) -> bool { call_ret := cast(*bool) sys_call("PathFollow2D", "is_rotating", 36873697, bool, main.p_object); return call_ret.*; }  // 9
set_cubic_interpolation :: (main: *PathFollow2D, enabled: bool) { sys_call("PathFollow2D", "set_cubic_interpolation", 2586408642, Nil, main.p_object, enabled);  }  // 10
get_cubic_interpolation :: (main: *PathFollow2D) -> bool { call_ret := cast(*bool) sys_call("PathFollow2D", "get_cubic_interpolation", 36873697, bool, main.p_object); return call_ret.*; }  // 11
set_loop :: (main: *PathFollow2D, loop: bool) { sys_call("PathFollow2D", "set_loop", 2586408642, Nil, main.p_object, loop);  }  // 12
has_loop :: (main: *PathFollow2D) -> bool { call_ret := cast(*bool) sys_call("PathFollow2D", "has_loop", 36873697, bool, main.p_object); return call_ret.*; }  // 13

set_progress :: (main: *PathFollow3D, progress: float) { sys_call("PathFollow3D", "set_progress", 373806689, Nil, main.p_object, progress);  }  // 0
get_progress :: (main: *PathFollow3D) -> float { call_ret := cast(*float) sys_call("PathFollow3D", "get_progress", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_h_offset :: (main: *PathFollow3D, h_offset: float) { sys_call("PathFollow3D", "set_h_offset", 373806689, Nil, main.p_object, h_offset);  }  // 2
get_h_offset :: (main: *PathFollow3D) -> float { call_ret := cast(*float) sys_call("PathFollow3D", "get_h_offset", 1740695150, float, main.p_object); return call_ret.*; }  // 3
set_v_offset :: (main: *PathFollow3D, v_offset: float) { sys_call("PathFollow3D", "set_v_offset", 373806689, Nil, main.p_object, v_offset);  }  // 4
get_v_offset :: (main: *PathFollow3D) -> float { call_ret := cast(*float) sys_call("PathFollow3D", "get_v_offset", 1740695150, float, main.p_object); return call_ret.*; }  // 5
set_progress_ratio :: (main: *PathFollow3D, ratio: float) { sys_call("PathFollow3D", "set_progress_ratio", 373806689, Nil, main.p_object, ratio);  }  // 6
get_progress_ratio :: (main: *PathFollow3D) -> float { call_ret := cast(*float) sys_call("PathFollow3D", "get_progress_ratio", 1740695150, float, main.p_object); return call_ret.*; }  // 7
set_rotation_mode :: (main: *PathFollow3D, rotation_mode: PathFollow3D.RotationMode) { sys_call("PathFollow3D", "set_rotation_mode", 1640311967, Nil, main.p_object, rotation_mode);  }  // 8
get_rotation_mode :: (main: *PathFollow3D) -> PathFollow3D.RotationMode { call_ret := cast(*PathFollow3D.RotationMode) sys_call("PathFollow3D", "get_rotation_mode", 3814010545, PathFollow3D.RotationMode, main.p_object); return call_ret.*; }  // 9
set_cubic_interpolation :: (main: *PathFollow3D, enabled: bool) { sys_call("PathFollow3D", "set_cubic_interpolation", 2586408642, Nil, main.p_object, enabled);  }  // 10
get_cubic_interpolation :: (main: *PathFollow3D) -> bool { call_ret := cast(*bool) sys_call("PathFollow3D", "get_cubic_interpolation", 36873697, bool, main.p_object); return call_ret.*; }  // 11
set_use_model_front :: (main: *PathFollow3D, enabled: bool) { sys_call("PathFollow3D", "set_use_model_front", 2586408642, Nil, main.p_object, enabled);  }  // 12
is_using_model_front :: (main: *PathFollow3D) -> bool { call_ret := cast(*bool) sys_call("PathFollow3D", "is_using_model_front", 36873697, bool, main.p_object); return call_ret.*; }  // 13
set_loop :: (main: *PathFollow3D, loop: bool) { sys_call("PathFollow3D", "set_loop", 2586408642, Nil, main.p_object, loop);  }  // 14
has_loop :: (main: *PathFollow3D) -> bool { call_ret := cast(*bool) sys_call("PathFollow3D", "has_loop", 36873697, bool, main.p_object); return call_ret.*; }  // 15
set_tilt_enabled :: (main: *PathFollow3D, enabled: bool) { sys_call("PathFollow3D", "set_tilt_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 16
is_tilt_enabled :: (main: *PathFollow3D) -> bool { call_ret := cast(*bool) sys_call("PathFollow3D", "is_tilt_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 17
correct_posture :: (main: *PathFollow3D, transform: Transform3D, rotation_mode: PathFollow3D.RotationMode) -> Transform3D { call_ret := cast(*Transform3D) sys_call("PathFollow3D", "correct_posture", 2686588690, Transform3D, main.p_object, transform, rotation_mode); return call_ret.*; }  // 18

get_monitor :: (main: *Performance, monitor: Performance.Monitor) -> float { call_ret := cast(*float) sys_call("Performance", "get_monitor", 1943275655, float, main.p_object, monitor); return call_ret.*; }  // 0
add_custom_monitor :: (main: *Performance, id: string, callable: Callable) { sys_call("Performance", "add_custom_monitor", 4099036814, Nil, main.p_object, id, callable);  }  // 1
remove_custom_monitor :: (main: *Performance, id: string) { sys_call("Performance", "remove_custom_monitor", 3304788590, Nil, main.p_object, id);  }  // 2
has_custom_monitor :: (main: *Performance, id: string) -> bool { call_ret := cast(*bool) sys_call("Performance", "has_custom_monitor", 2041966384, bool, main.p_object, id); return call_ret.*; }  // 3
get_custom_monitor :: (main: *Performance, id: string) -> Variant { call_ret := cast(*Variant) sys_call("Performance", "get_custom_monitor", 2138907829, Variant, main.p_object, id); return call_ret.*; }  // 4
get_monitor_modification_time :: (main: *Performance) -> int { call_ret := cast(*int) sys_call("Performance", "get_monitor_modification_time", 2455072627, int, main.p_object); return call_ret.*; }  // 5
get_custom_monitor_names :: (main: *Performance) -> [] StringName { call_ret := cast(*[] StringName) sys_call("Performance", "get_custom_monitor_names", 2915620761, [] StringName, main.p_object); return call_ret.*; }  // 6

get_joint :: (main: *PhysicalBone2D) -> *Joint2D { call_ret := cast(*Joint2D) sys_call("PhysicalBone2D", "get_joint", 3582132112, Joint2D, main.p_object); return call_ret; }  // 0
get_auto_configure_joint :: (main: *PhysicalBone2D) -> bool { call_ret := cast(*bool) sys_call("PhysicalBone2D", "get_auto_configure_joint", 36873697, bool, main.p_object); return call_ret.*; }  // 1
set_auto_configure_joint :: (main: *PhysicalBone2D, auto_configure_joint: bool) { sys_call("PhysicalBone2D", "set_auto_configure_joint", 2586408642, Nil, main.p_object, auto_configure_joint);  }  // 2
set_simulate_physics :: (main: *PhysicalBone2D, simulate_physics: bool) { sys_call("PhysicalBone2D", "set_simulate_physics", 2586408642, Nil, main.p_object, simulate_physics);  }  // 3
get_simulate_physics :: (main: *PhysicalBone2D) -> bool { call_ret := cast(*bool) sys_call("PhysicalBone2D", "get_simulate_physics", 36873697, bool, main.p_object); return call_ret.*; }  // 4
is_simulating_physics :: (main: *PhysicalBone2D) -> bool { call_ret := cast(*bool) sys_call("PhysicalBone2D", "is_simulating_physics", 36873697, bool, main.p_object); return call_ret.*; }  // 5
set_bone2d_nodepath :: (main: *PhysicalBone2D, nodepath: string) { sys_call("PhysicalBone2D", "set_bone2d_nodepath", 1348162250, Nil, main.p_object, nodepath);  }  // 6
get_bone2d_nodepath :: (main: *PhysicalBone2D) -> NodePath { call_ret := cast(*NodePath) sys_call("PhysicalBone2D", "get_bone2d_nodepath", 4075236667, NodePath, main.p_object); return call_ret.*; }  // 7
set_bone2d_index :: (main: *PhysicalBone2D, bone_index: int) { sys_call("PhysicalBone2D", "set_bone2d_index", 1286410249, Nil, main.p_object, bone_index);  }  // 8
get_bone2d_index :: (main: *PhysicalBone2D) -> int { call_ret := cast(*int) sys_call("PhysicalBone2D", "get_bone2d_index", 3905245786, int, main.p_object); return call_ret.*; }  // 9
set_follow_bone_when_simulating :: (main: *PhysicalBone2D, follow_bone: bool) { sys_call("PhysicalBone2D", "set_follow_bone_when_simulating", 2586408642, Nil, main.p_object, follow_bone);  }  // 10
get_follow_bone_when_simulating :: (main: *PhysicalBone2D) -> bool { call_ret := cast(*bool) sys_call("PhysicalBone2D", "get_follow_bone_when_simulating", 36873697, bool, main.p_object); return call_ret.*; }  // 11

apply_central_impulse :: (main: *PhysicalBone3D, impulse: Vector3) { sys_call("PhysicalBone3D", "apply_central_impulse", 3460891852, Nil, main.p_object, impulse);  }  // 1
apply_impulse :: (main: *PhysicalBone3D, impulse: Vector3) { sys_call("PhysicalBone3D", "apply_impulse", 2754756483, Nil, main.p_object, impulse);  }  // 2
set_joint_type :: (main: *PhysicalBone3D, joint_type: PhysicalBone3D.JointType) { sys_call("PhysicalBone3D", "set_joint_type", 2289552604, Nil, main.p_object, joint_type);  }  // 3
get_joint_type :: (main: *PhysicalBone3D) -> PhysicalBone3D.JointType { call_ret := cast(*PhysicalBone3D.JointType) sys_call("PhysicalBone3D", "get_joint_type", 931347320, PhysicalBone3D.JointType, main.p_object); return call_ret.*; }  // 4
set_joint_offset :: (main: *PhysicalBone3D, offset: Transform3D) { sys_call("PhysicalBone3D", "set_joint_offset", 2952846383, Nil, main.p_object, offset);  }  // 5
get_joint_offset :: (main: *PhysicalBone3D) -> Transform3D { call_ret := cast(*Transform3D) sys_call("PhysicalBone3D", "get_joint_offset", 3229777777, Transform3D, main.p_object); return call_ret.*; }  // 6
set_joint_rotation :: (main: *PhysicalBone3D, euler: Vector3) { sys_call("PhysicalBone3D", "set_joint_rotation", 3460891852, Nil, main.p_object, euler);  }  // 7
get_joint_rotation :: (main: *PhysicalBone3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("PhysicalBone3D", "get_joint_rotation", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 8
set_body_offset :: (main: *PhysicalBone3D, offset: Transform3D) { sys_call("PhysicalBone3D", "set_body_offset", 2952846383, Nil, main.p_object, offset);  }  // 9
get_body_offset :: (main: *PhysicalBone3D) -> Transform3D { call_ret := cast(*Transform3D) sys_call("PhysicalBone3D", "get_body_offset", 3229777777, Transform3D, main.p_object); return call_ret.*; }  // 10
get_simulate_physics :: (main: *PhysicalBone3D) -> bool { call_ret := cast(*bool) sys_call("PhysicalBone3D", "get_simulate_physics", 2240911060, bool, main.p_object); return call_ret.*; }  // 11
is_simulating_physics :: (main: *PhysicalBone3D) -> bool { call_ret := cast(*bool) sys_call("PhysicalBone3D", "is_simulating_physics", 2240911060, bool, main.p_object); return call_ret.*; }  // 12
get_bone_id :: (main: *PhysicalBone3D) -> int { call_ret := cast(*int) sys_call("PhysicalBone3D", "get_bone_id", 3905245786, int, main.p_object); return call_ret.*; }  // 13
set_mass :: (main: *PhysicalBone3D, mass: float) { sys_call("PhysicalBone3D", "set_mass", 373806689, Nil, main.p_object, mass);  }  // 14
get_mass :: (main: *PhysicalBone3D) -> float { call_ret := cast(*float) sys_call("PhysicalBone3D", "get_mass", 1740695150, float, main.p_object); return call_ret.*; }  // 15
set_friction :: (main: *PhysicalBone3D, friction: float) { sys_call("PhysicalBone3D", "set_friction", 373806689, Nil, main.p_object, friction);  }  // 16
get_friction :: (main: *PhysicalBone3D) -> float { call_ret := cast(*float) sys_call("PhysicalBone3D", "get_friction", 1740695150, float, main.p_object); return call_ret.*; }  // 17
set_bounce :: (main: *PhysicalBone3D, bounce: float) { sys_call("PhysicalBone3D", "set_bounce", 373806689, Nil, main.p_object, bounce);  }  // 18
get_bounce :: (main: *PhysicalBone3D) -> float { call_ret := cast(*float) sys_call("PhysicalBone3D", "get_bounce", 1740695150, float, main.p_object); return call_ret.*; }  // 19
set_gravity_scale :: (main: *PhysicalBone3D, gravity_scale: float) { sys_call("PhysicalBone3D", "set_gravity_scale", 373806689, Nil, main.p_object, gravity_scale);  }  // 20
get_gravity_scale :: (main: *PhysicalBone3D) -> float { call_ret := cast(*float) sys_call("PhysicalBone3D", "get_gravity_scale", 1740695150, float, main.p_object); return call_ret.*; }  // 21
set_linear_damp_mode :: (main: *PhysicalBone3D, linear_damp_mode: PhysicalBone3D.DampMode) { sys_call("PhysicalBone3D", "set_linear_damp_mode", 1244972221, Nil, main.p_object, linear_damp_mode);  }  // 22
get_linear_damp_mode :: (main: *PhysicalBone3D) -> PhysicalBone3D.DampMode { call_ret := cast(*PhysicalBone3D.DampMode) sys_call("PhysicalBone3D", "get_linear_damp_mode", 205884699, PhysicalBone3D.DampMode, main.p_object); return call_ret.*; }  // 23
set_angular_damp_mode :: (main: *PhysicalBone3D, angular_damp_mode: PhysicalBone3D.DampMode) { sys_call("PhysicalBone3D", "set_angular_damp_mode", 1244972221, Nil, main.p_object, angular_damp_mode);  }  // 24
get_angular_damp_mode :: (main: *PhysicalBone3D) -> PhysicalBone3D.DampMode { call_ret := cast(*PhysicalBone3D.DampMode) sys_call("PhysicalBone3D", "get_angular_damp_mode", 205884699, PhysicalBone3D.DampMode, main.p_object); return call_ret.*; }  // 25
set_linear_damp :: (main: *PhysicalBone3D, linear_damp: float) { sys_call("PhysicalBone3D", "set_linear_damp", 373806689, Nil, main.p_object, linear_damp);  }  // 26
get_linear_damp :: (main: *PhysicalBone3D) -> float { call_ret := cast(*float) sys_call("PhysicalBone3D", "get_linear_damp", 1740695150, float, main.p_object); return call_ret.*; }  // 27
set_angular_damp :: (main: *PhysicalBone3D, angular_damp: float) { sys_call("PhysicalBone3D", "set_angular_damp", 373806689, Nil, main.p_object, angular_damp);  }  // 28
get_angular_damp :: (main: *PhysicalBone3D) -> float { call_ret := cast(*float) sys_call("PhysicalBone3D", "get_angular_damp", 1740695150, float, main.p_object); return call_ret.*; }  // 29
set_linear_velocity :: (main: *PhysicalBone3D, linear_velocity: Vector3) { sys_call("PhysicalBone3D", "set_linear_velocity", 3460891852, Nil, main.p_object, linear_velocity);  }  // 30
get_linear_velocity :: (main: *PhysicalBone3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("PhysicalBone3D", "get_linear_velocity", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 31
set_angular_velocity :: (main: *PhysicalBone3D, angular_velocity: Vector3) { sys_call("PhysicalBone3D", "set_angular_velocity", 3460891852, Nil, main.p_object, angular_velocity);  }  // 32
get_angular_velocity :: (main: *PhysicalBone3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("PhysicalBone3D", "get_angular_velocity", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 33
set_use_custom_integrator :: (main: *PhysicalBone3D, enable: bool) { sys_call("PhysicalBone3D", "set_use_custom_integrator", 2586408642, Nil, main.p_object, enable);  }  // 34
is_using_custom_integrator :: (main: *PhysicalBone3D) -> bool { call_ret := cast(*bool) sys_call("PhysicalBone3D", "is_using_custom_integrator", 2240911060, bool, main.p_object); return call_ret.*; }  // 35
set_can_sleep :: (main: *PhysicalBone3D, able_to_sleep: bool) { sys_call("PhysicalBone3D", "set_can_sleep", 2586408642, Nil, main.p_object, able_to_sleep);  }  // 36
is_able_to_sleep :: (main: *PhysicalBone3D) -> bool { call_ret := cast(*bool) sys_call("PhysicalBone3D", "is_able_to_sleep", 36873697, bool, main.p_object); return call_ret.*; }  // 37

is_simulating_physics :: (main: *PhysicalBoneSimulator3D) -> bool { call_ret := cast(*bool) sys_call("PhysicalBoneSimulator3D", "is_simulating_physics", 36873697, bool, main.p_object); return call_ret.*; }  // 0
physical_bones_stop_simulation :: (main: *PhysicalBoneSimulator3D) { sys_call("PhysicalBoneSimulator3D", "physical_bones_stop_simulation", 3218959716, Nil, main.p_object);  }  // 1
physical_bones_start_simulation :: (main: *PhysicalBoneSimulator3D) { sys_call("PhysicalBoneSimulator3D", "physical_bones_start_simulation", 2787316981, Nil, main.p_object);  }  // 2
physical_bones_add_collision_exception :: (main: *PhysicalBoneSimulator3D, exception: RID) { sys_call("PhysicalBoneSimulator3D", "physical_bones_add_collision_exception", 2722037293, Nil, main.p_object, exception);  }  // 3
physical_bones_remove_collision_exception :: (main: *PhysicalBoneSimulator3D, exception: RID) { sys_call("PhysicalBoneSimulator3D", "physical_bones_remove_collision_exception", 2722037293, Nil, main.p_object, exception);  }  // 4

set_rayleigh_coefficient :: (main: *PhysicalSkyMaterial, rayleigh: float) { sys_call("PhysicalSkyMaterial", "set_rayleigh_coefficient", 373806689, Nil, main.p_object, rayleigh);  }  // 0
get_rayleigh_coefficient :: (main: *PhysicalSkyMaterial) -> float { call_ret := cast(*float) sys_call("PhysicalSkyMaterial", "get_rayleigh_coefficient", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_rayleigh_color :: (main: *PhysicalSkyMaterial, color: Color) { sys_call("PhysicalSkyMaterial", "set_rayleigh_color", 2920490490, Nil, main.p_object, color);  }  // 2
get_rayleigh_color :: (main: *PhysicalSkyMaterial) -> Color { call_ret := cast(*Color) sys_call("PhysicalSkyMaterial", "get_rayleigh_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 3
set_mie_coefficient :: (main: *PhysicalSkyMaterial, mie: float) { sys_call("PhysicalSkyMaterial", "set_mie_coefficient", 373806689, Nil, main.p_object, mie);  }  // 4
get_mie_coefficient :: (main: *PhysicalSkyMaterial) -> float { call_ret := cast(*float) sys_call("PhysicalSkyMaterial", "get_mie_coefficient", 1740695150, float, main.p_object); return call_ret.*; }  // 5
set_mie_eccentricity :: (main: *PhysicalSkyMaterial, eccentricity: float) { sys_call("PhysicalSkyMaterial", "set_mie_eccentricity", 373806689, Nil, main.p_object, eccentricity);  }  // 6
get_mie_eccentricity :: (main: *PhysicalSkyMaterial) -> float { call_ret := cast(*float) sys_call("PhysicalSkyMaterial", "get_mie_eccentricity", 1740695150, float, main.p_object); return call_ret.*; }  // 7
set_mie_color :: (main: *PhysicalSkyMaterial, color: Color) { sys_call("PhysicalSkyMaterial", "set_mie_color", 2920490490, Nil, main.p_object, color);  }  // 8
get_mie_color :: (main: *PhysicalSkyMaterial) -> Color { call_ret := cast(*Color) sys_call("PhysicalSkyMaterial", "get_mie_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 9
set_turbidity :: (main: *PhysicalSkyMaterial, turbidity: float) { sys_call("PhysicalSkyMaterial", "set_turbidity", 373806689, Nil, main.p_object, turbidity);  }  // 10
get_turbidity :: (main: *PhysicalSkyMaterial) -> float { call_ret := cast(*float) sys_call("PhysicalSkyMaterial", "get_turbidity", 1740695150, float, main.p_object); return call_ret.*; }  // 11
set_sun_disk_scale :: (main: *PhysicalSkyMaterial, scale: float) { sys_call("PhysicalSkyMaterial", "set_sun_disk_scale", 373806689, Nil, main.p_object, scale);  }  // 12
get_sun_disk_scale :: (main: *PhysicalSkyMaterial) -> float { call_ret := cast(*float) sys_call("PhysicalSkyMaterial", "get_sun_disk_scale", 1740695150, float, main.p_object); return call_ret.*; }  // 13
set_ground_color :: (main: *PhysicalSkyMaterial, color: Color) { sys_call("PhysicalSkyMaterial", "set_ground_color", 2920490490, Nil, main.p_object, color);  }  // 14
get_ground_color :: (main: *PhysicalSkyMaterial) -> Color { call_ret := cast(*Color) sys_call("PhysicalSkyMaterial", "get_ground_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 15
set_energy_multiplier :: (main: *PhysicalSkyMaterial, multiplier: float) { sys_call("PhysicalSkyMaterial", "set_energy_multiplier", 373806689, Nil, main.p_object, multiplier);  }  // 16
get_energy_multiplier :: (main: *PhysicalSkyMaterial) -> float { call_ret := cast(*float) sys_call("PhysicalSkyMaterial", "get_energy_multiplier", 1740695150, float, main.p_object); return call_ret.*; }  // 17
set_use_debanding :: (main: *PhysicalSkyMaterial, use_debanding: bool) { sys_call("PhysicalSkyMaterial", "set_use_debanding", 2586408642, Nil, main.p_object, use_debanding);  }  // 18
get_use_debanding :: (main: *PhysicalSkyMaterial) -> bool { call_ret := cast(*bool) sys_call("PhysicalSkyMaterial", "get_use_debanding", 36873697, bool, main.p_object); return call_ret.*; }  // 19
set_night_sky :: (main: *PhysicalSkyMaterial, night_sky: Texture2D) { sys_call("PhysicalSkyMaterial", "set_night_sky", 4051416890, Nil, main.p_object, night_sky);  }  // 20
get_night_sky :: (main: *PhysicalSkyMaterial) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("PhysicalSkyMaterial", "get_night_sky", 3635182373, Texture2D, main.p_object); return call_ret; }  // 21

move_and_collide :: (main: *PhysicsBody2D, motion: Vector2) -> *KinematicCollision2D { call_ret := cast(*KinematicCollision2D) sys_call("PhysicsBody2D", "move_and_collide", 3681923724, KinematicCollision2D, main.p_object, motion); return call_ret; }  // 0
test_move :: (main: *PhysicsBody2D, from: Transform2D, motion: Vector2) -> bool { call_ret := cast(*bool) sys_call("PhysicsBody2D", "test_move", 3324464701, bool, main.p_object, from, motion); return call_ret.*; }  // 1
get_gravity :: (main: *PhysicsBody2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("PhysicsBody2D", "get_gravity", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 2
get_collision_exceptions :: (main: *PhysicsBody2D) -> [] PhysicsBody2D { call_ret := cast(*[] PhysicsBody2D) sys_call("PhysicsBody2D", "get_collision_exceptions", 2915620761, [] PhysicsBody2D, main.p_object); return call_ret.*; }  // 3
add_collision_exception_with :: (main: *PhysicsBody2D, body: Node) { sys_call("PhysicsBody2D", "add_collision_exception_with", 1078189570, Nil, main.p_object, body);  }  // 4
remove_collision_exception_with :: (main: *PhysicsBody2D, body: Node) { sys_call("PhysicsBody2D", "remove_collision_exception_with", 1078189570, Nil, main.p_object, body);  }  // 5

move_and_collide :: (main: *PhysicsBody3D, motion: Vector3) -> *KinematicCollision3D { call_ret := cast(*KinematicCollision3D) sys_call("PhysicsBody3D", "move_and_collide", 3208792678, KinematicCollision3D, main.p_object, motion); return call_ret; }  // 0
test_move :: (main: *PhysicsBody3D, from: Transform3D, motion: Vector3) -> bool { call_ret := cast(*bool) sys_call("PhysicsBody3D", "test_move", 2481691619, bool, main.p_object, from, motion); return call_ret.*; }  // 1
get_gravity :: (main: *PhysicsBody3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("PhysicsBody3D", "get_gravity", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 2
set_axis_lock :: (main: *PhysicsBody3D, axis: PhysicsServer3D.BodyAxis, lock: bool) { sys_call("PhysicsBody3D", "set_axis_lock", 1787895195, Nil, main.p_object, axis, lock);  }  // 3
get_axis_lock :: (main: *PhysicsBody3D, axis: PhysicsServer3D.BodyAxis) -> bool { call_ret := cast(*bool) sys_call("PhysicsBody3D", "get_axis_lock", 2264617709, bool, main.p_object, axis); return call_ret.*; }  // 4
get_collision_exceptions :: (main: *PhysicsBody3D) -> [] PhysicsBody3D { call_ret := cast(*[] PhysicsBody3D) sys_call("PhysicsBody3D", "get_collision_exceptions", 2915620761, [] PhysicsBody3D, main.p_object); return call_ret.*; }  // 5
add_collision_exception_with :: (main: *PhysicsBody3D, body: Node) { sys_call("PhysicsBody3D", "add_collision_exception_with", 1078189570, Nil, main.p_object, body);  }  // 6
remove_collision_exception_with :: (main: *PhysicsBody3D, body: Node) { sys_call("PhysicsBody3D", "remove_collision_exception_with", 1078189570, Nil, main.p_object, body);  }  // 7

get_total_gravity :: (main: *PhysicsDirectBodyState2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("PhysicsDirectBodyState2D", "get_total_gravity", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 0
get_total_linear_damp :: (main: *PhysicsDirectBodyState2D) -> float { call_ret := cast(*float) sys_call("PhysicsDirectBodyState2D", "get_total_linear_damp", 1740695150, float, main.p_object); return call_ret.*; }  // 1
get_total_angular_damp :: (main: *PhysicsDirectBodyState2D) -> float { call_ret := cast(*float) sys_call("PhysicsDirectBodyState2D", "get_total_angular_damp", 1740695150, float, main.p_object); return call_ret.*; }  // 2
get_center_of_mass :: (main: *PhysicsDirectBodyState2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("PhysicsDirectBodyState2D", "get_center_of_mass", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 3
get_center_of_mass_local :: (main: *PhysicsDirectBodyState2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("PhysicsDirectBodyState2D", "get_center_of_mass_local", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 4
get_inverse_mass :: (main: *PhysicsDirectBodyState2D) -> float { call_ret := cast(*float) sys_call("PhysicsDirectBodyState2D", "get_inverse_mass", 1740695150, float, main.p_object); return call_ret.*; }  // 5
get_inverse_inertia :: (main: *PhysicsDirectBodyState2D) -> float { call_ret := cast(*float) sys_call("PhysicsDirectBodyState2D", "get_inverse_inertia", 1740695150, float, main.p_object); return call_ret.*; }  // 6
set_linear_velocity :: (main: *PhysicsDirectBodyState2D, velocity: Vector2) { sys_call("PhysicsDirectBodyState2D", "set_linear_velocity", 743155724, Nil, main.p_object, velocity);  }  // 7
get_linear_velocity :: (main: *PhysicsDirectBodyState2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("PhysicsDirectBodyState2D", "get_linear_velocity", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 8
set_angular_velocity :: (main: *PhysicsDirectBodyState2D, velocity: float) { sys_call("PhysicsDirectBodyState2D", "set_angular_velocity", 373806689, Nil, main.p_object, velocity);  }  // 9
get_angular_velocity :: (main: *PhysicsDirectBodyState2D) -> float { call_ret := cast(*float) sys_call("PhysicsDirectBodyState2D", "get_angular_velocity", 1740695150, float, main.p_object); return call_ret.*; }  // 10
set_transform :: (main: *PhysicsDirectBodyState2D, transform: Transform2D) { sys_call("PhysicsDirectBodyState2D", "set_transform", 2761652528, Nil, main.p_object, transform);  }  // 11
get_transform :: (main: *PhysicsDirectBodyState2D) -> Transform2D { call_ret := cast(*Transform2D) sys_call("PhysicsDirectBodyState2D", "get_transform", 3814499831, Transform2D, main.p_object); return call_ret.*; }  // 12
get_velocity_at_local_position :: (main: *PhysicsDirectBodyState2D, local_position: Vector2) -> Vector2 { call_ret := cast(*Vector2) sys_call("PhysicsDirectBodyState2D", "get_velocity_at_local_position", 2656412154, Vector2, main.p_object, local_position); return call_ret.*; }  // 13
apply_central_impulse :: (main: *PhysicsDirectBodyState2D, impulse: Vector2) { sys_call("PhysicsDirectBodyState2D", "apply_central_impulse", 743155724, Nil, main.p_object, impulse);  }  // 14
apply_torque_impulse :: (main: *PhysicsDirectBodyState2D, impulse: float) { sys_call("PhysicsDirectBodyState2D", "apply_torque_impulse", 373806689, Nil, main.p_object, impulse);  }  // 15
apply_impulse :: (main: *PhysicsDirectBodyState2D, impulse: Vector2) { sys_call("PhysicsDirectBodyState2D", "apply_impulse", 4288681949, Nil, main.p_object, impulse);  }  // 16
apply_central_force :: (main: *PhysicsDirectBodyState2D) { sys_call("PhysicsDirectBodyState2D", "apply_central_force", 3862383994, Nil, main.p_object);  }  // 17
apply_force :: (main: *PhysicsDirectBodyState2D, force: Vector2) { sys_call("PhysicsDirectBodyState2D", "apply_force", 4288681949, Nil, main.p_object, force);  }  // 18
apply_torque :: (main: *PhysicsDirectBodyState2D, torque: float) { sys_call("PhysicsDirectBodyState2D", "apply_torque", 373806689, Nil, main.p_object, torque);  }  // 19
add_constant_central_force :: (main: *PhysicsDirectBodyState2D) { sys_call("PhysicsDirectBodyState2D", "add_constant_central_force", 3862383994, Nil, main.p_object);  }  // 20
add_constant_force :: (main: *PhysicsDirectBodyState2D, force: Vector2) { sys_call("PhysicsDirectBodyState2D", "add_constant_force", 4288681949, Nil, main.p_object, force);  }  // 21
add_constant_torque :: (main: *PhysicsDirectBodyState2D, torque: float) { sys_call("PhysicsDirectBodyState2D", "add_constant_torque", 373806689, Nil, main.p_object, torque);  }  // 22
set_constant_force :: (main: *PhysicsDirectBodyState2D, force: Vector2) { sys_call("PhysicsDirectBodyState2D", "set_constant_force", 743155724, Nil, main.p_object, force);  }  // 23
get_constant_force :: (main: *PhysicsDirectBodyState2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("PhysicsDirectBodyState2D", "get_constant_force", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 24
set_constant_torque :: (main: *PhysicsDirectBodyState2D, torque: float) { sys_call("PhysicsDirectBodyState2D", "set_constant_torque", 373806689, Nil, main.p_object, torque);  }  // 25
get_constant_torque :: (main: *PhysicsDirectBodyState2D) -> float { call_ret := cast(*float) sys_call("PhysicsDirectBodyState2D", "get_constant_torque", 1740695150, float, main.p_object); return call_ret.*; }  // 26
set_sleep_state :: (main: *PhysicsDirectBodyState2D, enabled: bool) { sys_call("PhysicsDirectBodyState2D", "set_sleep_state", 2586408642, Nil, main.p_object, enabled);  }  // 27
is_sleeping :: (main: *PhysicsDirectBodyState2D) -> bool { call_ret := cast(*bool) sys_call("PhysicsDirectBodyState2D", "is_sleeping", 36873697, bool, main.p_object); return call_ret.*; }  // 28
get_contact_count :: (main: *PhysicsDirectBodyState2D) -> int { call_ret := cast(*int) sys_call("PhysicsDirectBodyState2D", "get_contact_count", 3905245786, int, main.p_object); return call_ret.*; }  // 29
get_contact_local_position :: (main: *PhysicsDirectBodyState2D, contact_idx: int) -> Vector2 { call_ret := cast(*Vector2) sys_call("PhysicsDirectBodyState2D", "get_contact_local_position", 2299179447, Vector2, main.p_object, contact_idx); return call_ret.*; }  // 30
get_contact_local_normal :: (main: *PhysicsDirectBodyState2D, contact_idx: int) -> Vector2 { call_ret := cast(*Vector2) sys_call("PhysicsDirectBodyState2D", "get_contact_local_normal", 2299179447, Vector2, main.p_object, contact_idx); return call_ret.*; }  // 31
get_contact_local_shape :: (main: *PhysicsDirectBodyState2D, contact_idx: int) -> int { call_ret := cast(*int) sys_call("PhysicsDirectBodyState2D", "get_contact_local_shape", 923996154, int, main.p_object, contact_idx); return call_ret.*; }  // 32
get_contact_local_velocity_at_position :: (main: *PhysicsDirectBodyState2D, contact_idx: int) -> Vector2 { call_ret := cast(*Vector2) sys_call("PhysicsDirectBodyState2D", "get_contact_local_velocity_at_position", 2299179447, Vector2, main.p_object, contact_idx); return call_ret.*; }  // 33
get_contact_collider :: (main: *PhysicsDirectBodyState2D, contact_idx: int) -> RID { call_ret := cast(*RID) sys_call("PhysicsDirectBodyState2D", "get_contact_collider", 495598643, RID, main.p_object, contact_idx); return call_ret.*; }  // 34
get_contact_collider_position :: (main: *PhysicsDirectBodyState2D, contact_idx: int) -> Vector2 { call_ret := cast(*Vector2) sys_call("PhysicsDirectBodyState2D", "get_contact_collider_position", 2299179447, Vector2, main.p_object, contact_idx); return call_ret.*; }  // 35
get_contact_collider_id :: (main: *PhysicsDirectBodyState2D, contact_idx: int) -> int { call_ret := cast(*int) sys_call("PhysicsDirectBodyState2D", "get_contact_collider_id", 923996154, int, main.p_object, contact_idx); return call_ret.*; }  // 36
get_contact_collider_object :: (main: *PhysicsDirectBodyState2D, contact_idx: int) -> *Object { call_ret := cast(*Object) sys_call("PhysicsDirectBodyState2D", "get_contact_collider_object", 3332903315, Object, main.p_object, contact_idx); return call_ret; }  // 37
get_contact_collider_shape :: (main: *PhysicsDirectBodyState2D, contact_idx: int) -> int { call_ret := cast(*int) sys_call("PhysicsDirectBodyState2D", "get_contact_collider_shape", 923996154, int, main.p_object, contact_idx); return call_ret.*; }  // 38
get_contact_collider_velocity_at_position :: (main: *PhysicsDirectBodyState2D, contact_idx: int) -> Vector2 { call_ret := cast(*Vector2) sys_call("PhysicsDirectBodyState2D", "get_contact_collider_velocity_at_position", 2299179447, Vector2, main.p_object, contact_idx); return call_ret.*; }  // 39
get_contact_impulse :: (main: *PhysicsDirectBodyState2D, contact_idx: int) -> Vector2 { call_ret := cast(*Vector2) sys_call("PhysicsDirectBodyState2D", "get_contact_impulse", 2299179447, Vector2, main.p_object, contact_idx); return call_ret.*; }  // 40
get_step :: (main: *PhysicsDirectBodyState2D) -> float { call_ret := cast(*float) sys_call("PhysicsDirectBodyState2D", "get_step", 1740695150, float, main.p_object); return call_ret.*; }  // 41
integrate_forces :: (main: *PhysicsDirectBodyState2D) { sys_call("PhysicsDirectBodyState2D", "integrate_forces", 3218959716, Nil, main.p_object);  }  // 42
get_space_state :: (main: *PhysicsDirectBodyState2D) -> *PhysicsDirectSpaceState2D { call_ret := cast(*PhysicsDirectSpaceState2D) sys_call("PhysicsDirectBodyState2D", "get_space_state", 2506717822, PhysicsDirectSpaceState2D, main.p_object); return call_ret; }  // 43


get_total_gravity :: (main: *PhysicsDirectBodyState3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("PhysicsDirectBodyState3D", "get_total_gravity", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 0
get_total_linear_damp :: (main: *PhysicsDirectBodyState3D) -> float { call_ret := cast(*float) sys_call("PhysicsDirectBodyState3D", "get_total_linear_damp", 1740695150, float, main.p_object); return call_ret.*; }  // 1
get_total_angular_damp :: (main: *PhysicsDirectBodyState3D) -> float { call_ret := cast(*float) sys_call("PhysicsDirectBodyState3D", "get_total_angular_damp", 1740695150, float, main.p_object); return call_ret.*; }  // 2
get_center_of_mass :: (main: *PhysicsDirectBodyState3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("PhysicsDirectBodyState3D", "get_center_of_mass", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 3
get_center_of_mass_local :: (main: *PhysicsDirectBodyState3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("PhysicsDirectBodyState3D", "get_center_of_mass_local", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 4
get_principal_inertia_axes :: (main: *PhysicsDirectBodyState3D) -> Basis { call_ret := cast(*Basis) sys_call("PhysicsDirectBodyState3D", "get_principal_inertia_axes", 2716978435, Basis, main.p_object); return call_ret.*; }  // 5
get_inverse_mass :: (main: *PhysicsDirectBodyState3D) -> float { call_ret := cast(*float) sys_call("PhysicsDirectBodyState3D", "get_inverse_mass", 1740695150, float, main.p_object); return call_ret.*; }  // 6
get_inverse_inertia :: (main: *PhysicsDirectBodyState3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("PhysicsDirectBodyState3D", "get_inverse_inertia", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 7
get_inverse_inertia_tensor :: (main: *PhysicsDirectBodyState3D) -> Basis { call_ret := cast(*Basis) sys_call("PhysicsDirectBodyState3D", "get_inverse_inertia_tensor", 2716978435, Basis, main.p_object); return call_ret.*; }  // 8
set_linear_velocity :: (main: *PhysicsDirectBodyState3D, velocity: Vector3) { sys_call("PhysicsDirectBodyState3D", "set_linear_velocity", 3460891852, Nil, main.p_object, velocity);  }  // 9
get_linear_velocity :: (main: *PhysicsDirectBodyState3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("PhysicsDirectBodyState3D", "get_linear_velocity", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 10
set_angular_velocity :: (main: *PhysicsDirectBodyState3D, velocity: Vector3) { sys_call("PhysicsDirectBodyState3D", "set_angular_velocity", 3460891852, Nil, main.p_object, velocity);  }  // 11
get_angular_velocity :: (main: *PhysicsDirectBodyState3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("PhysicsDirectBodyState3D", "get_angular_velocity", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 12
set_transform :: (main: *PhysicsDirectBodyState3D, transform: Transform3D) { sys_call("PhysicsDirectBodyState3D", "set_transform", 2952846383, Nil, main.p_object, transform);  }  // 13
get_transform :: (main: *PhysicsDirectBodyState3D) -> Transform3D { call_ret := cast(*Transform3D) sys_call("PhysicsDirectBodyState3D", "get_transform", 3229777777, Transform3D, main.p_object); return call_ret.*; }  // 14
get_velocity_at_local_position :: (main: *PhysicsDirectBodyState3D, local_position: Vector3) -> Vector3 { call_ret := cast(*Vector3) sys_call("PhysicsDirectBodyState3D", "get_velocity_at_local_position", 192990374, Vector3, main.p_object, local_position); return call_ret.*; }  // 15
apply_central_impulse :: (main: *PhysicsDirectBodyState3D) { sys_call("PhysicsDirectBodyState3D", "apply_central_impulse", 2007698547, Nil, main.p_object);  }  // 16
apply_impulse :: (main: *PhysicsDirectBodyState3D, impulse: Vector3) { sys_call("PhysicsDirectBodyState3D", "apply_impulse", 2754756483, Nil, main.p_object, impulse);  }  // 17
apply_torque_impulse :: (main: *PhysicsDirectBodyState3D, impulse: Vector3) { sys_call("PhysicsDirectBodyState3D", "apply_torque_impulse", 3460891852, Nil, main.p_object, impulse);  }  // 18
apply_central_force :: (main: *PhysicsDirectBodyState3D) { sys_call("PhysicsDirectBodyState3D", "apply_central_force", 2007698547, Nil, main.p_object);  }  // 19
apply_force :: (main: *PhysicsDirectBodyState3D, force: Vector3) { sys_call("PhysicsDirectBodyState3D", "apply_force", 2754756483, Nil, main.p_object, force);  }  // 20
apply_torque :: (main: *PhysicsDirectBodyState3D, torque: Vector3) { sys_call("PhysicsDirectBodyState3D", "apply_torque", 3460891852, Nil, main.p_object, torque);  }  // 21
add_constant_central_force :: (main: *PhysicsDirectBodyState3D) { sys_call("PhysicsDirectBodyState3D", "add_constant_central_force", 2007698547, Nil, main.p_object);  }  // 22
add_constant_force :: (main: *PhysicsDirectBodyState3D, force: Vector3) { sys_call("PhysicsDirectBodyState3D", "add_constant_force", 2754756483, Nil, main.p_object, force);  }  // 23
add_constant_torque :: (main: *PhysicsDirectBodyState3D, torque: Vector3) { sys_call("PhysicsDirectBodyState3D", "add_constant_torque", 3460891852, Nil, main.p_object, torque);  }  // 24
set_constant_force :: (main: *PhysicsDirectBodyState3D, force: Vector3) { sys_call("PhysicsDirectBodyState3D", "set_constant_force", 3460891852, Nil, main.p_object, force);  }  // 25
get_constant_force :: (main: *PhysicsDirectBodyState3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("PhysicsDirectBodyState3D", "get_constant_force", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 26
set_constant_torque :: (main: *PhysicsDirectBodyState3D, torque: Vector3) { sys_call("PhysicsDirectBodyState3D", "set_constant_torque", 3460891852, Nil, main.p_object, torque);  }  // 27
get_constant_torque :: (main: *PhysicsDirectBodyState3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("PhysicsDirectBodyState3D", "get_constant_torque", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 28
set_sleep_state :: (main: *PhysicsDirectBodyState3D, enabled: bool) { sys_call("PhysicsDirectBodyState3D", "set_sleep_state", 2586408642, Nil, main.p_object, enabled);  }  // 29
is_sleeping :: (main: *PhysicsDirectBodyState3D) -> bool { call_ret := cast(*bool) sys_call("PhysicsDirectBodyState3D", "is_sleeping", 36873697, bool, main.p_object); return call_ret.*; }  // 30
get_contact_count :: (main: *PhysicsDirectBodyState3D) -> int { call_ret := cast(*int) sys_call("PhysicsDirectBodyState3D", "get_contact_count", 3905245786, int, main.p_object); return call_ret.*; }  // 31
get_contact_local_position :: (main: *PhysicsDirectBodyState3D, contact_idx: int) -> Vector3 { call_ret := cast(*Vector3) sys_call("PhysicsDirectBodyState3D", "get_contact_local_position", 711720468, Vector3, main.p_object, contact_idx); return call_ret.*; }  // 32
get_contact_local_normal :: (main: *PhysicsDirectBodyState3D, contact_idx: int) -> Vector3 { call_ret := cast(*Vector3) sys_call("PhysicsDirectBodyState3D", "get_contact_local_normal", 711720468, Vector3, main.p_object, contact_idx); return call_ret.*; }  // 33
get_contact_impulse :: (main: *PhysicsDirectBodyState3D, contact_idx: int) -> Vector3 { call_ret := cast(*Vector3) sys_call("PhysicsDirectBodyState3D", "get_contact_impulse", 711720468, Vector3, main.p_object, contact_idx); return call_ret.*; }  // 34
get_contact_local_shape :: (main: *PhysicsDirectBodyState3D, contact_idx: int) -> int { call_ret := cast(*int) sys_call("PhysicsDirectBodyState3D", "get_contact_local_shape", 923996154, int, main.p_object, contact_idx); return call_ret.*; }  // 35
get_contact_local_velocity_at_position :: (main: *PhysicsDirectBodyState3D, contact_idx: int) -> Vector3 { call_ret := cast(*Vector3) sys_call("PhysicsDirectBodyState3D", "get_contact_local_velocity_at_position", 711720468, Vector3, main.p_object, contact_idx); return call_ret.*; }  // 36
get_contact_collider :: (main: *PhysicsDirectBodyState3D, contact_idx: int) -> RID { call_ret := cast(*RID) sys_call("PhysicsDirectBodyState3D", "get_contact_collider", 495598643, RID, main.p_object, contact_idx); return call_ret.*; }  // 37
get_contact_collider_position :: (main: *PhysicsDirectBodyState3D, contact_idx: int) -> Vector3 { call_ret := cast(*Vector3) sys_call("PhysicsDirectBodyState3D", "get_contact_collider_position", 711720468, Vector3, main.p_object, contact_idx); return call_ret.*; }  // 38
get_contact_collider_id :: (main: *PhysicsDirectBodyState3D, contact_idx: int) -> int { call_ret := cast(*int) sys_call("PhysicsDirectBodyState3D", "get_contact_collider_id", 923996154, int, main.p_object, contact_idx); return call_ret.*; }  // 39
get_contact_collider_object :: (main: *PhysicsDirectBodyState3D, contact_idx: int) -> *Object { call_ret := cast(*Object) sys_call("PhysicsDirectBodyState3D", "get_contact_collider_object", 3332903315, Object, main.p_object, contact_idx); return call_ret; }  // 40
get_contact_collider_shape :: (main: *PhysicsDirectBodyState3D, contact_idx: int) -> int { call_ret := cast(*int) sys_call("PhysicsDirectBodyState3D", "get_contact_collider_shape", 923996154, int, main.p_object, contact_idx); return call_ret.*; }  // 41
get_contact_collider_velocity_at_position :: (main: *PhysicsDirectBodyState3D, contact_idx: int) -> Vector3 { call_ret := cast(*Vector3) sys_call("PhysicsDirectBodyState3D", "get_contact_collider_velocity_at_position", 711720468, Vector3, main.p_object, contact_idx); return call_ret.*; }  // 42
get_step :: (main: *PhysicsDirectBodyState3D) -> float { call_ret := cast(*float) sys_call("PhysicsDirectBodyState3D", "get_step", 1740695150, float, main.p_object); return call_ret.*; }  // 43
integrate_forces :: (main: *PhysicsDirectBodyState3D) { sys_call("PhysicsDirectBodyState3D", "integrate_forces", 3218959716, Nil, main.p_object);  }  // 44
get_space_state :: (main: *PhysicsDirectBodyState3D) -> *PhysicsDirectSpaceState3D { call_ret := cast(*PhysicsDirectSpaceState3D) sys_call("PhysicsDirectBodyState3D", "get_space_state", 2069328350, PhysicsDirectSpaceState3D, main.p_object); return call_ret; }  // 45


intersect_point :: (main: *PhysicsDirectSpaceState2D, parameters: PhysicsPointQueryParameters2D) -> [] Dictionary { call_ret := cast(*[] Dictionary) sys_call("PhysicsDirectSpaceState2D", "intersect_point", 2118456068, [] Dictionary, main.p_object, parameters); return call_ret.*; }  // 0
intersect_ray :: (main: *PhysicsDirectSpaceState2D, parameters: PhysicsRayQueryParameters2D) -> Dictionary { call_ret := cast(*Dictionary) sys_call("PhysicsDirectSpaceState2D", "intersect_ray", 1590275562, Dictionary, main.p_object, parameters); return call_ret.*; }  // 1
intersect_shape :: (main: *PhysicsDirectSpaceState2D, parameters: PhysicsShapeQueryParameters2D) -> [] Dictionary { call_ret := cast(*[] Dictionary) sys_call("PhysicsDirectSpaceState2D", "intersect_shape", 2488867228, [] Dictionary, main.p_object, parameters); return call_ret.*; }  // 2
cast_motion :: (main: *PhysicsDirectSpaceState2D, parameters: PhysicsShapeQueryParameters2D) -> PackedFloat32Array { call_ret := cast(*PackedFloat32Array) sys_call("PhysicsDirectSpaceState2D", "cast_motion", 711275086, PackedFloat32Array, main.p_object, parameters); return call_ret.*; }  // 3
collide_shape :: (main: *PhysicsDirectSpaceState2D, parameters: PhysicsShapeQueryParameters2D) -> [] Vector2 { call_ret := cast(*[] Vector2) sys_call("PhysicsDirectSpaceState2D", "collide_shape", 2488867228, [] Vector2, main.p_object, parameters); return call_ret.*; }  // 4
get_rest_info :: (main: *PhysicsDirectSpaceState2D, parameters: PhysicsShapeQueryParameters2D) -> Dictionary { call_ret := cast(*Dictionary) sys_call("PhysicsDirectSpaceState2D", "get_rest_info", 2803666496, Dictionary, main.p_object, parameters); return call_ret.*; }  // 5

is_body_excluded_from_query :: (main: *PhysicsDirectSpaceState2DExtension, body: RID) -> bool { call_ret := cast(*bool) sys_call("PhysicsDirectSpaceState2DExtension", "is_body_excluded_from_query", 4155700596, bool, main.p_object, body); return call_ret.*; }  // 6

intersect_point :: (main: *PhysicsDirectSpaceState3D, parameters: PhysicsPointQueryParameters3D) -> [] Dictionary { call_ret := cast(*[] Dictionary) sys_call("PhysicsDirectSpaceState3D", "intersect_point", 975173756, [] Dictionary, main.p_object, parameters); return call_ret.*; }  // 0
intersect_ray :: (main: *PhysicsDirectSpaceState3D, parameters: PhysicsRayQueryParameters3D) -> Dictionary { call_ret := cast(*Dictionary) sys_call("PhysicsDirectSpaceState3D", "intersect_ray", 3957970750, Dictionary, main.p_object, parameters); return call_ret.*; }  // 1
intersect_shape :: (main: *PhysicsDirectSpaceState3D, parameters: PhysicsShapeQueryParameters3D) -> [] Dictionary { call_ret := cast(*[] Dictionary) sys_call("PhysicsDirectSpaceState3D", "intersect_shape", 3762137681, [] Dictionary, main.p_object, parameters); return call_ret.*; }  // 2
cast_motion :: (main: *PhysicsDirectSpaceState3D, parameters: PhysicsShapeQueryParameters3D) -> PackedFloat32Array { call_ret := cast(*PackedFloat32Array) sys_call("PhysicsDirectSpaceState3D", "cast_motion", 1778757334, PackedFloat32Array, main.p_object, parameters); return call_ret.*; }  // 3
collide_shape :: (main: *PhysicsDirectSpaceState3D, parameters: PhysicsShapeQueryParameters3D) -> [] Vector3 { call_ret := cast(*[] Vector3) sys_call("PhysicsDirectSpaceState3D", "collide_shape", 3762137681, [] Vector3, main.p_object, parameters); return call_ret.*; }  // 4
get_rest_info :: (main: *PhysicsDirectSpaceState3D, parameters: PhysicsShapeQueryParameters3D) -> Dictionary { call_ret := cast(*Dictionary) sys_call("PhysicsDirectSpaceState3D", "get_rest_info", 1376751592, Dictionary, main.p_object, parameters); return call_ret.*; }  // 5

is_body_excluded_from_query :: (main: *PhysicsDirectSpaceState3DExtension, body: RID) -> bool { call_ret := cast(*bool) sys_call("PhysicsDirectSpaceState3DExtension", "is_body_excluded_from_query", 4155700596, bool, main.p_object, body); return call_ret.*; }  // 7

set_friction :: (main: *PhysicsMaterial, friction: float) { sys_call("PhysicsMaterial", "set_friction", 373806689, Nil, main.p_object, friction);  }  // 0
get_friction :: (main: *PhysicsMaterial) -> float { call_ret := cast(*float) sys_call("PhysicsMaterial", "get_friction", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_rough :: (main: *PhysicsMaterial, rough: bool) { sys_call("PhysicsMaterial", "set_rough", 2586408642, Nil, main.p_object, rough);  }  // 2
is_rough :: (main: *PhysicsMaterial) -> bool { call_ret := cast(*bool) sys_call("PhysicsMaterial", "is_rough", 36873697, bool, main.p_object); return call_ret.*; }  // 3
set_bounce :: (main: *PhysicsMaterial, bounce: float) { sys_call("PhysicsMaterial", "set_bounce", 373806689, Nil, main.p_object, bounce);  }  // 4
get_bounce :: (main: *PhysicsMaterial) -> float { call_ret := cast(*float) sys_call("PhysicsMaterial", "get_bounce", 1740695150, float, main.p_object); return call_ret.*; }  // 5
set_absorbent :: (main: *PhysicsMaterial, absorbent: bool) { sys_call("PhysicsMaterial", "set_absorbent", 2586408642, Nil, main.p_object, absorbent);  }  // 6
is_absorbent :: (main: *PhysicsMaterial) -> bool { call_ret := cast(*bool) sys_call("PhysicsMaterial", "is_absorbent", 36873697, bool, main.p_object); return call_ret.*; }  // 7

set_position :: (main: *PhysicsPointQueryParameters2D, position: Vector2) { sys_call("PhysicsPointQueryParameters2D", "set_position", 743155724, Nil, main.p_object, position);  }  // 0
get_position :: (main: *PhysicsPointQueryParameters2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("PhysicsPointQueryParameters2D", "get_position", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 1
set_canvas_instance_id :: (main: *PhysicsPointQueryParameters2D, canvas_instance_id: int) { sys_call("PhysicsPointQueryParameters2D", "set_canvas_instance_id", 1286410249, Nil, main.p_object, canvas_instance_id);  }  // 2
get_canvas_instance_id :: (main: *PhysicsPointQueryParameters2D) -> int { call_ret := cast(*int) sys_call("PhysicsPointQueryParameters2D", "get_canvas_instance_id", 3905245786, int, main.p_object); return call_ret.*; }  // 3
set_collision_mask :: (main: *PhysicsPointQueryParameters2D, collision_mask: int) { sys_call("PhysicsPointQueryParameters2D", "set_collision_mask", 1286410249, Nil, main.p_object, collision_mask);  }  // 4
get_collision_mask :: (main: *PhysicsPointQueryParameters2D) -> int { call_ret := cast(*int) sys_call("PhysicsPointQueryParameters2D", "get_collision_mask", 3905245786, int, main.p_object); return call_ret.*; }  // 5
set_exclude :: (main: *PhysicsPointQueryParameters2D, exclude: [] RID) { sys_call("PhysicsPointQueryParameters2D", "set_exclude", 381264803, Nil, main.p_object, exclude);  }  // 6
get_exclude :: (main: *PhysicsPointQueryParameters2D) -> [] RID { call_ret := cast(*[] RID) sys_call("PhysicsPointQueryParameters2D", "get_exclude", 3995934104, [] RID, main.p_object); return call_ret.*; }  // 7
set_collide_with_bodies :: (main: *PhysicsPointQueryParameters2D, enable: bool) { sys_call("PhysicsPointQueryParameters2D", "set_collide_with_bodies", 2586408642, Nil, main.p_object, enable);  }  // 8
is_collide_with_bodies_enabled :: (main: *PhysicsPointQueryParameters2D) -> bool { call_ret := cast(*bool) sys_call("PhysicsPointQueryParameters2D", "is_collide_with_bodies_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 9
set_collide_with_areas :: (main: *PhysicsPointQueryParameters2D, enable: bool) { sys_call("PhysicsPointQueryParameters2D", "set_collide_with_areas", 2586408642, Nil, main.p_object, enable);  }  // 10
is_collide_with_areas_enabled :: (main: *PhysicsPointQueryParameters2D) -> bool { call_ret := cast(*bool) sys_call("PhysicsPointQueryParameters2D", "is_collide_with_areas_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 11

set_position :: (main: *PhysicsPointQueryParameters3D, position: Vector3) { sys_call("PhysicsPointQueryParameters3D", "set_position", 3460891852, Nil, main.p_object, position);  }  // 0
get_position :: (main: *PhysicsPointQueryParameters3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("PhysicsPointQueryParameters3D", "get_position", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 1
set_collision_mask :: (main: *PhysicsPointQueryParameters3D, collision_mask: int) { sys_call("PhysicsPointQueryParameters3D", "set_collision_mask", 1286410249, Nil, main.p_object, collision_mask);  }  // 2
get_collision_mask :: (main: *PhysicsPointQueryParameters3D) -> int { call_ret := cast(*int) sys_call("PhysicsPointQueryParameters3D", "get_collision_mask", 3905245786, int, main.p_object); return call_ret.*; }  // 3
set_exclude :: (main: *PhysicsPointQueryParameters3D, exclude: [] RID) { sys_call("PhysicsPointQueryParameters3D", "set_exclude", 381264803, Nil, main.p_object, exclude);  }  // 4
get_exclude :: (main: *PhysicsPointQueryParameters3D) -> [] RID { call_ret := cast(*[] RID) sys_call("PhysicsPointQueryParameters3D", "get_exclude", 3995934104, [] RID, main.p_object); return call_ret.*; }  // 5
set_collide_with_bodies :: (main: *PhysicsPointQueryParameters3D, enable: bool) { sys_call("PhysicsPointQueryParameters3D", "set_collide_with_bodies", 2586408642, Nil, main.p_object, enable);  }  // 6
is_collide_with_bodies_enabled :: (main: *PhysicsPointQueryParameters3D) -> bool { call_ret := cast(*bool) sys_call("PhysicsPointQueryParameters3D", "is_collide_with_bodies_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 7
set_collide_with_areas :: (main: *PhysicsPointQueryParameters3D, enable: bool) { sys_call("PhysicsPointQueryParameters3D", "set_collide_with_areas", 2586408642, Nil, main.p_object, enable);  }  // 8
is_collide_with_areas_enabled :: (main: *PhysicsPointQueryParameters3D) -> bool { call_ret := cast(*bool) sys_call("PhysicsPointQueryParameters3D", "is_collide_with_areas_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 9

create :: (main: *PhysicsRayQueryParameters2D, from: Vector2, to: Vector2) -> *PhysicsRayQueryParameters2D { call_ret := cast(*PhysicsRayQueryParameters2D) sys_call("PhysicsRayQueryParameters2D", "create", 3196569324, PhysicsRayQueryParameters2D, main.p_object, from, to); return call_ret; }  // 0
set_from :: (main: *PhysicsRayQueryParameters2D, from: Vector2) { sys_call("PhysicsRayQueryParameters2D", "set_from", 743155724, Nil, main.p_object, from);  }  // 1
get_from :: (main: *PhysicsRayQueryParameters2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("PhysicsRayQueryParameters2D", "get_from", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 2
set_to :: (main: *PhysicsRayQueryParameters2D, to: Vector2) { sys_call("PhysicsRayQueryParameters2D", "set_to", 743155724, Nil, main.p_object, to);  }  // 3
get_to :: (main: *PhysicsRayQueryParameters2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("PhysicsRayQueryParameters2D", "get_to", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 4
set_collision_mask :: (main: *PhysicsRayQueryParameters2D, collision_mask: int) { sys_call("PhysicsRayQueryParameters2D", "set_collision_mask", 1286410249, Nil, main.p_object, collision_mask);  }  // 5
get_collision_mask :: (main: *PhysicsRayQueryParameters2D) -> int { call_ret := cast(*int) sys_call("PhysicsRayQueryParameters2D", "get_collision_mask", 3905245786, int, main.p_object); return call_ret.*; }  // 6
set_exclude :: (main: *PhysicsRayQueryParameters2D, exclude: [] RID) { sys_call("PhysicsRayQueryParameters2D", "set_exclude", 381264803, Nil, main.p_object, exclude);  }  // 7
get_exclude :: (main: *PhysicsRayQueryParameters2D) -> [] RID { call_ret := cast(*[] RID) sys_call("PhysicsRayQueryParameters2D", "get_exclude", 3995934104, [] RID, main.p_object); return call_ret.*; }  // 8
set_collide_with_bodies :: (main: *PhysicsRayQueryParameters2D, enable: bool) { sys_call("PhysicsRayQueryParameters2D", "set_collide_with_bodies", 2586408642, Nil, main.p_object, enable);  }  // 9
is_collide_with_bodies_enabled :: (main: *PhysicsRayQueryParameters2D) -> bool { call_ret := cast(*bool) sys_call("PhysicsRayQueryParameters2D", "is_collide_with_bodies_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 10
set_collide_with_areas :: (main: *PhysicsRayQueryParameters2D, enable: bool) { sys_call("PhysicsRayQueryParameters2D", "set_collide_with_areas", 2586408642, Nil, main.p_object, enable);  }  // 11
is_collide_with_areas_enabled :: (main: *PhysicsRayQueryParameters2D) -> bool { call_ret := cast(*bool) sys_call("PhysicsRayQueryParameters2D", "is_collide_with_areas_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 12
set_hit_from_inside :: (main: *PhysicsRayQueryParameters2D, enable: bool) { sys_call("PhysicsRayQueryParameters2D", "set_hit_from_inside", 2586408642, Nil, main.p_object, enable);  }  // 13
is_hit_from_inside_enabled :: (main: *PhysicsRayQueryParameters2D) -> bool { call_ret := cast(*bool) sys_call("PhysicsRayQueryParameters2D", "is_hit_from_inside_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 14

create :: (main: *PhysicsRayQueryParameters3D, from: Vector3, to: Vector3) -> *PhysicsRayQueryParameters3D { call_ret := cast(*PhysicsRayQueryParameters3D) sys_call("PhysicsRayQueryParameters3D", "create", 3110599579, PhysicsRayQueryParameters3D, main.p_object, from, to); return call_ret; }  // 0
set_from :: (main: *PhysicsRayQueryParameters3D, from: Vector3) { sys_call("PhysicsRayQueryParameters3D", "set_from", 3460891852, Nil, main.p_object, from);  }  // 1
get_from :: (main: *PhysicsRayQueryParameters3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("PhysicsRayQueryParameters3D", "get_from", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 2
set_to :: (main: *PhysicsRayQueryParameters3D, to: Vector3) { sys_call("PhysicsRayQueryParameters3D", "set_to", 3460891852, Nil, main.p_object, to);  }  // 3
get_to :: (main: *PhysicsRayQueryParameters3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("PhysicsRayQueryParameters3D", "get_to", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 4
set_collision_mask :: (main: *PhysicsRayQueryParameters3D, collision_mask: int) { sys_call("PhysicsRayQueryParameters3D", "set_collision_mask", 1286410249, Nil, main.p_object, collision_mask);  }  // 5
get_collision_mask :: (main: *PhysicsRayQueryParameters3D) -> int { call_ret := cast(*int) sys_call("PhysicsRayQueryParameters3D", "get_collision_mask", 3905245786, int, main.p_object); return call_ret.*; }  // 6
set_exclude :: (main: *PhysicsRayQueryParameters3D, exclude: [] RID) { sys_call("PhysicsRayQueryParameters3D", "set_exclude", 381264803, Nil, main.p_object, exclude);  }  // 7
get_exclude :: (main: *PhysicsRayQueryParameters3D) -> [] RID { call_ret := cast(*[] RID) sys_call("PhysicsRayQueryParameters3D", "get_exclude", 3995934104, [] RID, main.p_object); return call_ret.*; }  // 8
set_collide_with_bodies :: (main: *PhysicsRayQueryParameters3D, enable: bool) { sys_call("PhysicsRayQueryParameters3D", "set_collide_with_bodies", 2586408642, Nil, main.p_object, enable);  }  // 9
is_collide_with_bodies_enabled :: (main: *PhysicsRayQueryParameters3D) -> bool { call_ret := cast(*bool) sys_call("PhysicsRayQueryParameters3D", "is_collide_with_bodies_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 10
set_collide_with_areas :: (main: *PhysicsRayQueryParameters3D, enable: bool) { sys_call("PhysicsRayQueryParameters3D", "set_collide_with_areas", 2586408642, Nil, main.p_object, enable);  }  // 11
is_collide_with_areas_enabled :: (main: *PhysicsRayQueryParameters3D) -> bool { call_ret := cast(*bool) sys_call("PhysicsRayQueryParameters3D", "is_collide_with_areas_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 12
set_hit_from_inside :: (main: *PhysicsRayQueryParameters3D, enable: bool) { sys_call("PhysicsRayQueryParameters3D", "set_hit_from_inside", 2586408642, Nil, main.p_object, enable);  }  // 13
is_hit_from_inside_enabled :: (main: *PhysicsRayQueryParameters3D) -> bool { call_ret := cast(*bool) sys_call("PhysicsRayQueryParameters3D", "is_hit_from_inside_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 14
set_hit_back_faces :: (main: *PhysicsRayQueryParameters3D, enable: bool) { sys_call("PhysicsRayQueryParameters3D", "set_hit_back_faces", 2586408642, Nil, main.p_object, enable);  }  // 15
is_hit_back_faces_enabled :: (main: *PhysicsRayQueryParameters3D) -> bool { call_ret := cast(*bool) sys_call("PhysicsRayQueryParameters3D", "is_hit_back_faces_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 16

world_boundary_shape_create :: (main: *PhysicsServer2D) -> RID { call_ret := cast(*RID) sys_call("PhysicsServer2D", "world_boundary_shape_create", 529393457, RID, main.p_object); return call_ret.*; }  // 0
separation_ray_shape_create :: (main: *PhysicsServer2D) -> RID { call_ret := cast(*RID) sys_call("PhysicsServer2D", "separation_ray_shape_create", 529393457, RID, main.p_object); return call_ret.*; }  // 1
segment_shape_create :: (main: *PhysicsServer2D) -> RID { call_ret := cast(*RID) sys_call("PhysicsServer2D", "segment_shape_create", 529393457, RID, main.p_object); return call_ret.*; }  // 2
circle_shape_create :: (main: *PhysicsServer2D) -> RID { call_ret := cast(*RID) sys_call("PhysicsServer2D", "circle_shape_create", 529393457, RID, main.p_object); return call_ret.*; }  // 3
rectangle_shape_create :: (main: *PhysicsServer2D) -> RID { call_ret := cast(*RID) sys_call("PhysicsServer2D", "rectangle_shape_create", 529393457, RID, main.p_object); return call_ret.*; }  // 4
capsule_shape_create :: (main: *PhysicsServer2D) -> RID { call_ret := cast(*RID) sys_call("PhysicsServer2D", "capsule_shape_create", 529393457, RID, main.p_object); return call_ret.*; }  // 5
convex_polygon_shape_create :: (main: *PhysicsServer2D) -> RID { call_ret := cast(*RID) sys_call("PhysicsServer2D", "convex_polygon_shape_create", 529393457, RID, main.p_object); return call_ret.*; }  // 6
concave_polygon_shape_create :: (main: *PhysicsServer2D) -> RID { call_ret := cast(*RID) sys_call("PhysicsServer2D", "concave_polygon_shape_create", 529393457, RID, main.p_object); return call_ret.*; }  // 7
shape_set_data :: (main: *PhysicsServer2D, shape: RID, data: Variant) { sys_call("PhysicsServer2D", "shape_set_data", 3175752987, Nil, main.p_object, shape, data);  }  // 8
shape_get_type :: (main: *PhysicsServer2D, shape: RID) -> PhysicsServer2D.ShapeType { call_ret := cast(*PhysicsServer2D.ShapeType) sys_call("PhysicsServer2D", "shape_get_type", 1240598777, PhysicsServer2D.ShapeType, main.p_object, shape); return call_ret.*; }  // 9
shape_get_data :: (main: *PhysicsServer2D, shape: RID) -> Variant { call_ret := cast(*Variant) sys_call("PhysicsServer2D", "shape_get_data", 4171304767, Variant, main.p_object, shape); return call_ret.*; }  // 10
space_create :: (main: *PhysicsServer2D) -> RID { call_ret := cast(*RID) sys_call("PhysicsServer2D", "space_create", 529393457, RID, main.p_object); return call_ret.*; }  // 11
space_set_active :: (main: *PhysicsServer2D, space: RID, active: bool) { sys_call("PhysicsServer2D", "space_set_active", 1265174801, Nil, main.p_object, space, active);  }  // 12
space_is_active :: (main: *PhysicsServer2D, space: RID) -> bool { call_ret := cast(*bool) sys_call("PhysicsServer2D", "space_is_active", 4155700596, bool, main.p_object, space); return call_ret.*; }  // 13
space_set_param :: (main: *PhysicsServer2D, space: RID, param: PhysicsServer2D.SpaceParameter, value: float) { sys_call("PhysicsServer2D", "space_set_param", 949194586, Nil, main.p_object, space, param, value);  }  // 14
space_get_param :: (main: *PhysicsServer2D, space: RID, param: PhysicsServer2D.SpaceParameter) -> float { call_ret := cast(*float) sys_call("PhysicsServer2D", "space_get_param", 874111783, float, main.p_object, space, param); return call_ret.*; }  // 15
space_get_direct_state :: (main: *PhysicsServer2D, space: RID) -> *PhysicsDirectSpaceState2D { call_ret := cast(*PhysicsDirectSpaceState2D) sys_call("PhysicsServer2D", "space_get_direct_state", 3160173886, PhysicsDirectSpaceState2D, main.p_object, space); return call_ret; }  // 16
area_create :: (main: *PhysicsServer2D) -> RID { call_ret := cast(*RID) sys_call("PhysicsServer2D", "area_create", 529393457, RID, main.p_object); return call_ret.*; }  // 17
area_set_space :: (main: *PhysicsServer2D, area: RID, space: RID) { sys_call("PhysicsServer2D", "area_set_space", 395945892, Nil, main.p_object, area, space);  }  // 18
area_get_space :: (main: *PhysicsServer2D, area: RID) -> RID { call_ret := cast(*RID) sys_call("PhysicsServer2D", "area_get_space", 3814569979, RID, main.p_object, area); return call_ret.*; }  // 19
area_add_shape :: (main: *PhysicsServer2D, area: RID, shape: RID) { sys_call("PhysicsServer2D", "area_add_shape", 339056240, Nil, main.p_object, area, shape);  }  // 20
area_set_shape :: (main: *PhysicsServer2D, area: RID, shape_idx: int, shape: RID) { sys_call("PhysicsServer2D", "area_set_shape", 2310537182, Nil, main.p_object, area, shape_idx, shape);  }  // 21
area_set_shape_transform :: (main: *PhysicsServer2D, area: RID, shape_idx: int, transform: Transform2D) { sys_call("PhysicsServer2D", "area_set_shape_transform", 736082694, Nil, main.p_object, area, shape_idx, transform);  }  // 22
area_set_shape_disabled :: (main: *PhysicsServer2D, area: RID, shape_idx: int, disabled: bool) { sys_call("PhysicsServer2D", "area_set_shape_disabled", 2658558584, Nil, main.p_object, area, shape_idx, disabled);  }  // 23
area_get_shape_count :: (main: *PhysicsServer2D, area: RID) -> int { call_ret := cast(*int) sys_call("PhysicsServer2D", "area_get_shape_count", 2198884583, int, main.p_object, area); return call_ret.*; }  // 24
area_get_shape :: (main: *PhysicsServer2D, area: RID, shape_idx: int) -> RID { call_ret := cast(*RID) sys_call("PhysicsServer2D", "area_get_shape", 1066463050, RID, main.p_object, area, shape_idx); return call_ret.*; }  // 25
area_get_shape_transform :: (main: *PhysicsServer2D, area: RID, shape_idx: int) -> Transform2D { call_ret := cast(*Transform2D) sys_call("PhysicsServer2D", "area_get_shape_transform", 1324854622, Transform2D, main.p_object, area, shape_idx); return call_ret.*; }  // 26
area_remove_shape :: (main: *PhysicsServer2D, area: RID, shape_idx: int) { sys_call("PhysicsServer2D", "area_remove_shape", 3411492887, Nil, main.p_object, area, shape_idx);  }  // 27
area_clear_shapes :: (main: *PhysicsServer2D, area: RID) { sys_call("PhysicsServer2D", "area_clear_shapes", 2722037293, Nil, main.p_object, area);  }  // 28
area_set_collision_layer :: (main: *PhysicsServer2D, area: RID, layer: int) { sys_call("PhysicsServer2D", "area_set_collision_layer", 3411492887, Nil, main.p_object, area, layer);  }  // 29
area_get_collision_layer :: (main: *PhysicsServer2D, area: RID) -> int { call_ret := cast(*int) sys_call("PhysicsServer2D", "area_get_collision_layer", 2198884583, int, main.p_object, area); return call_ret.*; }  // 30
area_set_collision_mask :: (main: *PhysicsServer2D, area: RID, mask: int) { sys_call("PhysicsServer2D", "area_set_collision_mask", 3411492887, Nil, main.p_object, area, mask);  }  // 31
area_get_collision_mask :: (main: *PhysicsServer2D, area: RID) -> int { call_ret := cast(*int) sys_call("PhysicsServer2D", "area_get_collision_mask", 2198884583, int, main.p_object, area); return call_ret.*; }  // 32
area_set_param :: (main: *PhysicsServer2D, area: RID, param: PhysicsServer2D.AreaParameter, value: Variant) { sys_call("PhysicsServer2D", "area_set_param", 1257146028, Nil, main.p_object, area, param, value);  }  // 33
area_set_transform :: (main: *PhysicsServer2D, area: RID, transform: Transform2D) { sys_call("PhysicsServer2D", "area_set_transform", 1246044741, Nil, main.p_object, area, transform);  }  // 34
area_get_param :: (main: *PhysicsServer2D, area: RID, param: PhysicsServer2D.AreaParameter) -> Variant { call_ret := cast(*Variant) sys_call("PhysicsServer2D", "area_get_param", 3047435120, Variant, main.p_object, area, param); return call_ret.*; }  // 35
area_get_transform :: (main: *PhysicsServer2D, area: RID) -> Transform2D { call_ret := cast(*Transform2D) sys_call("PhysicsServer2D", "area_get_transform", 213527486, Transform2D, main.p_object, area); return call_ret.*; }  // 36
area_attach_object_instance_id :: (main: *PhysicsServer2D, area: RID, id: int) { sys_call("PhysicsServer2D", "area_attach_object_instance_id", 3411492887, Nil, main.p_object, area, id);  }  // 37
area_get_object_instance_id :: (main: *PhysicsServer2D, area: RID) -> int { call_ret := cast(*int) sys_call("PhysicsServer2D", "area_get_object_instance_id", 2198884583, int, main.p_object, area); return call_ret.*; }  // 38
area_attach_canvas_instance_id :: (main: *PhysicsServer2D, area: RID, id: int) { sys_call("PhysicsServer2D", "area_attach_canvas_instance_id", 3411492887, Nil, main.p_object, area, id);  }  // 39
area_get_canvas_instance_id :: (main: *PhysicsServer2D, area: RID) -> int { call_ret := cast(*int) sys_call("PhysicsServer2D", "area_get_canvas_instance_id", 2198884583, int, main.p_object, area); return call_ret.*; }  // 40
area_set_monitor_callback :: (main: *PhysicsServer2D, area: RID, callback: Callable) { sys_call("PhysicsServer2D", "area_set_monitor_callback", 3379118538, Nil, main.p_object, area, callback);  }  // 41
area_set_area_monitor_callback :: (main: *PhysicsServer2D, area: RID, callback: Callable) { sys_call("PhysicsServer2D", "area_set_area_monitor_callback", 3379118538, Nil, main.p_object, area, callback);  }  // 42
area_set_monitorable :: (main: *PhysicsServer2D, area: RID, monitorable: bool) { sys_call("PhysicsServer2D", "area_set_monitorable", 1265174801, Nil, main.p_object, area, monitorable);  }  // 43
body_create :: (main: *PhysicsServer2D) -> RID { call_ret := cast(*RID) sys_call("PhysicsServer2D", "body_create", 529393457, RID, main.p_object); return call_ret.*; }  // 44
body_set_space :: (main: *PhysicsServer2D, body: RID, space: RID) { sys_call("PhysicsServer2D", "body_set_space", 395945892, Nil, main.p_object, body, space);  }  // 45
body_get_space :: (main: *PhysicsServer2D, body: RID) -> RID { call_ret := cast(*RID) sys_call("PhysicsServer2D", "body_get_space", 3814569979, RID, main.p_object, body); return call_ret.*; }  // 46
body_set_mode :: (main: *PhysicsServer2D, body: RID, mode: PhysicsServer2D.BodyMode) { sys_call("PhysicsServer2D", "body_set_mode", 1658067650, Nil, main.p_object, body, mode);  }  // 47
body_get_mode :: (main: *PhysicsServer2D, body: RID) -> PhysicsServer2D.BodyMode { call_ret := cast(*PhysicsServer2D.BodyMode) sys_call("PhysicsServer2D", "body_get_mode", 3261702585, PhysicsServer2D.BodyMode, main.p_object, body); return call_ret.*; }  // 48
body_add_shape :: (main: *PhysicsServer2D, body: RID, shape: RID) { sys_call("PhysicsServer2D", "body_add_shape", 339056240, Nil, main.p_object, body, shape);  }  // 49
body_set_shape :: (main: *PhysicsServer2D, body: RID, shape_idx: int, shape: RID) { sys_call("PhysicsServer2D", "body_set_shape", 2310537182, Nil, main.p_object, body, shape_idx, shape);  }  // 50
body_set_shape_transform :: (main: *PhysicsServer2D, body: RID, shape_idx: int, transform: Transform2D) { sys_call("PhysicsServer2D", "body_set_shape_transform", 736082694, Nil, main.p_object, body, shape_idx, transform);  }  // 51
body_get_shape_count :: (main: *PhysicsServer2D, body: RID) -> int { call_ret := cast(*int) sys_call("PhysicsServer2D", "body_get_shape_count", 2198884583, int, main.p_object, body); return call_ret.*; }  // 52
body_get_shape :: (main: *PhysicsServer2D, body: RID, shape_idx: int) -> RID { call_ret := cast(*RID) sys_call("PhysicsServer2D", "body_get_shape", 1066463050, RID, main.p_object, body, shape_idx); return call_ret.*; }  // 53
body_get_shape_transform :: (main: *PhysicsServer2D, body: RID, shape_idx: int) -> Transform2D { call_ret := cast(*Transform2D) sys_call("PhysicsServer2D", "body_get_shape_transform", 1324854622, Transform2D, main.p_object, body, shape_idx); return call_ret.*; }  // 54
body_remove_shape :: (main: *PhysicsServer2D, body: RID, shape_idx: int) { sys_call("PhysicsServer2D", "body_remove_shape", 3411492887, Nil, main.p_object, body, shape_idx);  }  // 55
body_clear_shapes :: (main: *PhysicsServer2D, body: RID) { sys_call("PhysicsServer2D", "body_clear_shapes", 2722037293, Nil, main.p_object, body);  }  // 56
body_set_shape_disabled :: (main: *PhysicsServer2D, body: RID, shape_idx: int, disabled: bool) { sys_call("PhysicsServer2D", "body_set_shape_disabled", 2658558584, Nil, main.p_object, body, shape_idx, disabled);  }  // 57
body_set_shape_as_one_way_collision :: (main: *PhysicsServer2D, body: RID, shape_idx: int, enable: bool, margin: float) { sys_call("PhysicsServer2D", "body_set_shape_as_one_way_collision", 2556489974, Nil, main.p_object, body, shape_idx, enable, margin);  }  // 58
body_attach_object_instance_id :: (main: *PhysicsServer2D, body: RID, id: int) { sys_call("PhysicsServer2D", "body_attach_object_instance_id", 3411492887, Nil, main.p_object, body, id);  }  // 59
body_get_object_instance_id :: (main: *PhysicsServer2D, body: RID) -> int { call_ret := cast(*int) sys_call("PhysicsServer2D", "body_get_object_instance_id", 2198884583, int, main.p_object, body); return call_ret.*; }  // 60
body_attach_canvas_instance_id :: (main: *PhysicsServer2D, body: RID, id: int) { sys_call("PhysicsServer2D", "body_attach_canvas_instance_id", 3411492887, Nil, main.p_object, body, id);  }  // 61
body_get_canvas_instance_id :: (main: *PhysicsServer2D, body: RID) -> int { call_ret := cast(*int) sys_call("PhysicsServer2D", "body_get_canvas_instance_id", 2198884583, int, main.p_object, body); return call_ret.*; }  // 62
body_set_continuous_collision_detection_mode :: (main: *PhysicsServer2D, body: RID, mode: PhysicsServer2D.CCDMode) { sys_call("PhysicsServer2D", "body_set_continuous_collision_detection_mode", 1882257015, Nil, main.p_object, body, mode);  }  // 63
body_get_continuous_collision_detection_mode :: (main: *PhysicsServer2D, body: RID) -> PhysicsServer2D.CCDMode { call_ret := cast(*PhysicsServer2D.CCDMode) sys_call("PhysicsServer2D", "body_get_continuous_collision_detection_mode", 2661282217, PhysicsServer2D.CCDMode, main.p_object, body); return call_ret.*; }  // 64
body_set_collision_layer :: (main: *PhysicsServer2D, body: RID, layer: int) { sys_call("PhysicsServer2D", "body_set_collision_layer", 3411492887, Nil, main.p_object, body, layer);  }  // 65
body_get_collision_layer :: (main: *PhysicsServer2D, body: RID) -> int { call_ret := cast(*int) sys_call("PhysicsServer2D", "body_get_collision_layer", 2198884583, int, main.p_object, body); return call_ret.*; }  // 66
body_set_collision_mask :: (main: *PhysicsServer2D, body: RID, mask: int) { sys_call("PhysicsServer2D", "body_set_collision_mask", 3411492887, Nil, main.p_object, body, mask);  }  // 67
body_get_collision_mask :: (main: *PhysicsServer2D, body: RID) -> int { call_ret := cast(*int) sys_call("PhysicsServer2D", "body_get_collision_mask", 2198884583, int, main.p_object, body); return call_ret.*; }  // 68
body_set_collision_priority :: (main: *PhysicsServer2D, body: RID, priority: float) { sys_call("PhysicsServer2D", "body_set_collision_priority", 1794382983, Nil, main.p_object, body, priority);  }  // 69
body_get_collision_priority :: (main: *PhysicsServer2D, body: RID) -> float { call_ret := cast(*float) sys_call("PhysicsServer2D", "body_get_collision_priority", 866169185, float, main.p_object, body); return call_ret.*; }  // 70
body_set_param :: (main: *PhysicsServer2D, body: RID, param: PhysicsServer2D.BodyParameter, value: Variant) { sys_call("PhysicsServer2D", "body_set_param", 2715630609, Nil, main.p_object, body, param, value);  }  // 71
body_get_param :: (main: *PhysicsServer2D, body: RID, param: PhysicsServer2D.BodyParameter) -> Variant { call_ret := cast(*Variant) sys_call("PhysicsServer2D", "body_get_param", 3208033526, Variant, main.p_object, body, param); return call_ret.*; }  // 72
body_reset_mass_properties :: (main: *PhysicsServer2D, body: RID) { sys_call("PhysicsServer2D", "body_reset_mass_properties", 2722037293, Nil, main.p_object, body);  }  // 73
body_set_state :: (main: *PhysicsServer2D, body: RID, state: PhysicsServer2D.BodyState, value: Variant) { sys_call("PhysicsServer2D", "body_set_state", 1706355209, Nil, main.p_object, body, state, value);  }  // 74
body_get_state :: (main: *PhysicsServer2D, body: RID, state: PhysicsServer2D.BodyState) -> Variant { call_ret := cast(*Variant) sys_call("PhysicsServer2D", "body_get_state", 4036367961, Variant, main.p_object, body, state); return call_ret.*; }  // 75
body_apply_central_impulse :: (main: *PhysicsServer2D, body: RID, impulse: Vector2) { sys_call("PhysicsServer2D", "body_apply_central_impulse", 3201125042, Nil, main.p_object, body, impulse);  }  // 76
body_apply_torque_impulse :: (main: *PhysicsServer2D, body: RID, impulse: float) { sys_call("PhysicsServer2D", "body_apply_torque_impulse", 1794382983, Nil, main.p_object, body, impulse);  }  // 77
body_apply_impulse :: (main: *PhysicsServer2D, body: RID, impulse: Vector2) { sys_call("PhysicsServer2D", "body_apply_impulse", 205485391, Nil, main.p_object, body, impulse);  }  // 78
body_apply_central_force :: (main: *PhysicsServer2D, body: RID, force: Vector2) { sys_call("PhysicsServer2D", "body_apply_central_force", 3201125042, Nil, main.p_object, body, force);  }  // 79
body_apply_force :: (main: *PhysicsServer2D, body: RID, force: Vector2) { sys_call("PhysicsServer2D", "body_apply_force", 205485391, Nil, main.p_object, body, force);  }  // 80
body_apply_torque :: (main: *PhysicsServer2D, body: RID, torque: float) { sys_call("PhysicsServer2D", "body_apply_torque", 1794382983, Nil, main.p_object, body, torque);  }  // 81
body_add_constant_central_force :: (main: *PhysicsServer2D, body: RID, force: Vector2) { sys_call("PhysicsServer2D", "body_add_constant_central_force", 3201125042, Nil, main.p_object, body, force);  }  // 82
body_add_constant_force :: (main: *PhysicsServer2D, body: RID, force: Vector2) { sys_call("PhysicsServer2D", "body_add_constant_force", 205485391, Nil, main.p_object, body, force);  }  // 83
body_add_constant_torque :: (main: *PhysicsServer2D, body: RID, torque: float) { sys_call("PhysicsServer2D", "body_add_constant_torque", 1794382983, Nil, main.p_object, body, torque);  }  // 84
body_set_constant_force :: (main: *PhysicsServer2D, body: RID, force: Vector2) { sys_call("PhysicsServer2D", "body_set_constant_force", 3201125042, Nil, main.p_object, body, force);  }  // 85
body_get_constant_force :: (main: *PhysicsServer2D, body: RID) -> Vector2 { call_ret := cast(*Vector2) sys_call("PhysicsServer2D", "body_get_constant_force", 2440833711, Vector2, main.p_object, body); return call_ret.*; }  // 86
body_set_constant_torque :: (main: *PhysicsServer2D, body: RID, torque: float) { sys_call("PhysicsServer2D", "body_set_constant_torque", 1794382983, Nil, main.p_object, body, torque);  }  // 87
body_get_constant_torque :: (main: *PhysicsServer2D, body: RID) -> float { call_ret := cast(*float) sys_call("PhysicsServer2D", "body_get_constant_torque", 866169185, float, main.p_object, body); return call_ret.*; }  // 88
body_set_axis_velocity :: (main: *PhysicsServer2D, body: RID, axis_velocity: Vector2) { sys_call("PhysicsServer2D", "body_set_axis_velocity", 3201125042, Nil, main.p_object, body, axis_velocity);  }  // 89
body_add_collision_exception :: (main: *PhysicsServer2D, body: RID, excepted_body: RID) { sys_call("PhysicsServer2D", "body_add_collision_exception", 395945892, Nil, main.p_object, body, excepted_body);  }  // 90
body_remove_collision_exception :: (main: *PhysicsServer2D, body: RID, excepted_body: RID) { sys_call("PhysicsServer2D", "body_remove_collision_exception", 395945892, Nil, main.p_object, body, excepted_body);  }  // 91
body_set_max_contacts_reported :: (main: *PhysicsServer2D, body: RID, amount: int) { sys_call("PhysicsServer2D", "body_set_max_contacts_reported", 3411492887, Nil, main.p_object, body, amount);  }  // 92
body_get_max_contacts_reported :: (main: *PhysicsServer2D, body: RID) -> int { call_ret := cast(*int) sys_call("PhysicsServer2D", "body_get_max_contacts_reported", 2198884583, int, main.p_object, body); return call_ret.*; }  // 93
body_set_omit_force_integration :: (main: *PhysicsServer2D, body: RID, enable: bool) { sys_call("PhysicsServer2D", "body_set_omit_force_integration", 1265174801, Nil, main.p_object, body, enable);  }  // 94
body_is_omitting_force_integration :: (main: *PhysicsServer2D, body: RID) -> bool { call_ret := cast(*bool) sys_call("PhysicsServer2D", "body_is_omitting_force_integration", 4155700596, bool, main.p_object, body); return call_ret.*; }  // 95
body_set_state_sync_callback :: (main: *PhysicsServer2D, body: RID, callable: Callable) { sys_call("PhysicsServer2D", "body_set_state_sync_callback", 3379118538, Nil, main.p_object, body, callable);  }  // 96
body_set_force_integration_callback :: (main: *PhysicsServer2D, body: RID, callable: Callable) { sys_call("PhysicsServer2D", "body_set_force_integration_callback", 3059434249, Nil, main.p_object, body, callable);  }  // 97
body_test_motion :: (main: *PhysicsServer2D, body: RID, parameters: PhysicsTestMotionParameters2D) -> bool { call_ret := cast(*bool) sys_call("PhysicsServer2D", "body_test_motion", 1699844009, bool, main.p_object, body, parameters); return call_ret.*; }  // 98
body_get_direct_state :: (main: *PhysicsServer2D, body: RID) -> *PhysicsDirectBodyState2D { call_ret := cast(*PhysicsDirectBodyState2D) sys_call("PhysicsServer2D", "body_get_direct_state", 1191931871, PhysicsDirectBodyState2D, main.p_object, body); return call_ret; }  // 99
joint_create :: (main: *PhysicsServer2D) -> RID { call_ret := cast(*RID) sys_call("PhysicsServer2D", "joint_create", 529393457, RID, main.p_object); return call_ret.*; }  // 100
joint_clear :: (main: *PhysicsServer2D, joint: RID) { sys_call("PhysicsServer2D", "joint_clear", 2722037293, Nil, main.p_object, joint);  }  // 101
joint_set_param :: (main: *PhysicsServer2D, joint: RID, param: PhysicsServer2D.JointParam, value: float) { sys_call("PhysicsServer2D", "joint_set_param", 3972556514, Nil, main.p_object, joint, param, value);  }  // 102
joint_get_param :: (main: *PhysicsServer2D, joint: RID, param: PhysicsServer2D.JointParam) -> float { call_ret := cast(*float) sys_call("PhysicsServer2D", "joint_get_param", 4016448949, float, main.p_object, joint, param); return call_ret.*; }  // 103
joint_disable_collisions_between_bodies :: (main: *PhysicsServer2D, joint: RID, disable: bool) { sys_call("PhysicsServer2D", "joint_disable_collisions_between_bodies", 1265174801, Nil, main.p_object, joint, disable);  }  // 104
joint_is_disabled_collisions_between_bodies :: (main: *PhysicsServer2D, joint: RID) -> bool { call_ret := cast(*bool) sys_call("PhysicsServer2D", "joint_is_disabled_collisions_between_bodies", 4155700596, bool, main.p_object, joint); return call_ret.*; }  // 105
joint_make_pin :: (main: *PhysicsServer2D, joint: RID, anchor: Vector2, body_a: RID) { sys_call("PhysicsServer2D", "joint_make_pin", 1612646186, Nil, main.p_object, joint, anchor, body_a);  }  // 106
joint_make_groove :: (main: *PhysicsServer2D, joint: RID, groove1_a: Vector2, groove2_a: Vector2, anchor_b: Vector2) { sys_call("PhysicsServer2D", "joint_make_groove", 481430435, Nil, main.p_object, joint, groove1_a, groove2_a, anchor_b);  }  // 107
joint_make_damped_spring :: (main: *PhysicsServer2D, joint: RID, anchor_a: Vector2, anchor_b: Vector2, body_a: RID) { sys_call("PhysicsServer2D", "joint_make_damped_spring", 1994657646, Nil, main.p_object, joint, anchor_a, anchor_b, body_a);  }  // 108
pin_joint_set_flag :: (main: *PhysicsServer2D, joint: RID, flag: PhysicsServer2D.PinJointFlag, enabled: bool) { sys_call("PhysicsServer2D", "pin_joint_set_flag", 3520002352, Nil, main.p_object, joint, flag, enabled);  }  // 109
pin_joint_get_flag :: (main: *PhysicsServer2D, joint: RID, flag: PhysicsServer2D.PinJointFlag) -> bool { call_ret := cast(*bool) sys_call("PhysicsServer2D", "pin_joint_get_flag", 2647867364, bool, main.p_object, joint, flag); return call_ret.*; }  // 110
pin_joint_set_param :: (main: *PhysicsServer2D, joint: RID, param: PhysicsServer2D.PinJointParam, value: float) { sys_call("PhysicsServer2D", "pin_joint_set_param", 550574241, Nil, main.p_object, joint, param, value);  }  // 111
pin_joint_get_param :: (main: *PhysicsServer2D, joint: RID, param: PhysicsServer2D.PinJointParam) -> float { call_ret := cast(*float) sys_call("PhysicsServer2D", "pin_joint_get_param", 348281383, float, main.p_object, joint, param); return call_ret.*; }  // 112
damped_spring_joint_set_param :: (main: *PhysicsServer2D, joint: RID, param: PhysicsServer2D.DampedSpringParam, value: float) { sys_call("PhysicsServer2D", "damped_spring_joint_set_param", 220564071, Nil, main.p_object, joint, param, value);  }  // 113
damped_spring_joint_get_param :: (main: *PhysicsServer2D, joint: RID, param: PhysicsServer2D.DampedSpringParam) -> float { call_ret := cast(*float) sys_call("PhysicsServer2D", "damped_spring_joint_get_param", 2075871277, float, main.p_object, joint, param); return call_ret.*; }  // 114
joint_get_type :: (main: *PhysicsServer2D, joint: RID) -> PhysicsServer2D.JointType { call_ret := cast(*PhysicsServer2D.JointType) sys_call("PhysicsServer2D", "joint_get_type", 4262502231, PhysicsServer2D.JointType, main.p_object, joint); return call_ret.*; }  // 115
free_rid :: (main: *PhysicsServer2D, rid: RID) { sys_call("PhysicsServer2D", "free_rid", 2722037293, Nil, main.p_object, rid);  }  // 116
set_active :: (main: *PhysicsServer2D, active: bool) { sys_call("PhysicsServer2D", "set_active", 2586408642, Nil, main.p_object, active);  }  // 117
get_process_info :: (main: *PhysicsServer2D, process_info: PhysicsServer2D.ProcessInfo) -> int { call_ret := cast(*int) sys_call("PhysicsServer2D", "get_process_info", 576496006, int, main.p_object, process_info); return call_ret.*; }  // 118

body_test_motion_is_excluding_body :: (main: *PhysicsServer2DExtension, body: RID) -> bool { call_ret := cast(*bool) sys_call("PhysicsServer2DExtension", "body_test_motion_is_excluding_body", 4155700596, bool, main.p_object, body); return call_ret.*; }  // 138
body_test_motion_is_excluding_object :: (main: *PhysicsServer2DExtension, object: int) -> bool { call_ret := cast(*bool) sys_call("PhysicsServer2DExtension", "body_test_motion_is_excluding_object", 1116898809, bool, main.p_object, object); return call_ret.*; }  // 139

register_server :: (main: *PhysicsServer2DManager, name: string, create_callback: Callable) { sys_call("PhysicsServer2DManager", "register_server", 2137474292, Nil, main.p_object, name, create_callback);  }  // 0
set_default_server :: (main: *PhysicsServer2DManager, name: string, priority: int) { sys_call("PhysicsServer2DManager", "set_default_server", 2956805083, Nil, main.p_object, name, priority);  }  // 1

world_boundary_shape_create :: (main: *PhysicsServer3D) -> RID { call_ret := cast(*RID) sys_call("PhysicsServer3D", "world_boundary_shape_create", 529393457, RID, main.p_object); return call_ret.*; }  // 0
separation_ray_shape_create :: (main: *PhysicsServer3D) -> RID { call_ret := cast(*RID) sys_call("PhysicsServer3D", "separation_ray_shape_create", 529393457, RID, main.p_object); return call_ret.*; }  // 1
sphere_shape_create :: (main: *PhysicsServer3D) -> RID { call_ret := cast(*RID) sys_call("PhysicsServer3D", "sphere_shape_create", 529393457, RID, main.p_object); return call_ret.*; }  // 2
box_shape_create :: (main: *PhysicsServer3D) -> RID { call_ret := cast(*RID) sys_call("PhysicsServer3D", "box_shape_create", 529393457, RID, main.p_object); return call_ret.*; }  // 3
capsule_shape_create :: (main: *PhysicsServer3D) -> RID { call_ret := cast(*RID) sys_call("PhysicsServer3D", "capsule_shape_create", 529393457, RID, main.p_object); return call_ret.*; }  // 4
cylinder_shape_create :: (main: *PhysicsServer3D) -> RID { call_ret := cast(*RID) sys_call("PhysicsServer3D", "cylinder_shape_create", 529393457, RID, main.p_object); return call_ret.*; }  // 5
convex_polygon_shape_create :: (main: *PhysicsServer3D) -> RID { call_ret := cast(*RID) sys_call("PhysicsServer3D", "convex_polygon_shape_create", 529393457, RID, main.p_object); return call_ret.*; }  // 6
concave_polygon_shape_create :: (main: *PhysicsServer3D) -> RID { call_ret := cast(*RID) sys_call("PhysicsServer3D", "concave_polygon_shape_create", 529393457, RID, main.p_object); return call_ret.*; }  // 7
heightmap_shape_create :: (main: *PhysicsServer3D) -> RID { call_ret := cast(*RID) sys_call("PhysicsServer3D", "heightmap_shape_create", 529393457, RID, main.p_object); return call_ret.*; }  // 8
custom_shape_create :: (main: *PhysicsServer3D) -> RID { call_ret := cast(*RID) sys_call("PhysicsServer3D", "custom_shape_create", 529393457, RID, main.p_object); return call_ret.*; }  // 9
shape_set_data :: (main: *PhysicsServer3D, shape: RID, data: Variant) { sys_call("PhysicsServer3D", "shape_set_data", 3175752987, Nil, main.p_object, shape, data);  }  // 10
shape_set_margin :: (main: *PhysicsServer3D, shape: RID, margin: float) { sys_call("PhysicsServer3D", "shape_set_margin", 1794382983, Nil, main.p_object, shape, margin);  }  // 11
shape_get_type :: (main: *PhysicsServer3D, shape: RID) -> PhysicsServer3D.ShapeType { call_ret := cast(*PhysicsServer3D.ShapeType) sys_call("PhysicsServer3D", "shape_get_type", 3418923367, PhysicsServer3D.ShapeType, main.p_object, shape); return call_ret.*; }  // 12
shape_get_data :: (main: *PhysicsServer3D, shape: RID) -> Variant { call_ret := cast(*Variant) sys_call("PhysicsServer3D", "shape_get_data", 4171304767, Variant, main.p_object, shape); return call_ret.*; }  // 13
shape_get_margin :: (main: *PhysicsServer3D, shape: RID) -> float { call_ret := cast(*float) sys_call("PhysicsServer3D", "shape_get_margin", 866169185, float, main.p_object, shape); return call_ret.*; }  // 14
space_create :: (main: *PhysicsServer3D) -> RID { call_ret := cast(*RID) sys_call("PhysicsServer3D", "space_create", 529393457, RID, main.p_object); return call_ret.*; }  // 15
space_set_active :: (main: *PhysicsServer3D, space: RID, active: bool) { sys_call("PhysicsServer3D", "space_set_active", 1265174801, Nil, main.p_object, space, active);  }  // 16
space_is_active :: (main: *PhysicsServer3D, space: RID) -> bool { call_ret := cast(*bool) sys_call("PhysicsServer3D", "space_is_active", 4155700596, bool, main.p_object, space); return call_ret.*; }  // 17
space_set_param :: (main: *PhysicsServer3D, space: RID, param: PhysicsServer3D.SpaceParameter, value: float) { sys_call("PhysicsServer3D", "space_set_param", 2406017470, Nil, main.p_object, space, param, value);  }  // 18
space_get_param :: (main: *PhysicsServer3D, space: RID, param: PhysicsServer3D.SpaceParameter) -> float { call_ret := cast(*float) sys_call("PhysicsServer3D", "space_get_param", 1523206731, float, main.p_object, space, param); return call_ret.*; }  // 19
space_get_direct_state :: (main: *PhysicsServer3D, space: RID) -> *PhysicsDirectSpaceState3D { call_ret := cast(*PhysicsDirectSpaceState3D) sys_call("PhysicsServer3D", "space_get_direct_state", 2048616813, PhysicsDirectSpaceState3D, main.p_object, space); return call_ret; }  // 20
area_create :: (main: *PhysicsServer3D) -> RID { call_ret := cast(*RID) sys_call("PhysicsServer3D", "area_create", 529393457, RID, main.p_object); return call_ret.*; }  // 21
area_set_space :: (main: *PhysicsServer3D, area: RID, space: RID) { sys_call("PhysicsServer3D", "area_set_space", 395945892, Nil, main.p_object, area, space);  }  // 22
area_get_space :: (main: *PhysicsServer3D, area: RID) -> RID { call_ret := cast(*RID) sys_call("PhysicsServer3D", "area_get_space", 3814569979, RID, main.p_object, area); return call_ret.*; }  // 23
area_add_shape :: (main: *PhysicsServer3D, area: RID, shape: RID) { sys_call("PhysicsServer3D", "area_add_shape", 3711419014, Nil, main.p_object, area, shape);  }  // 24
area_set_shape :: (main: *PhysicsServer3D, area: RID, shape_idx: int, shape: RID) { sys_call("PhysicsServer3D", "area_set_shape", 2310537182, Nil, main.p_object, area, shape_idx, shape);  }  // 25
area_set_shape_transform :: (main: *PhysicsServer3D, area: RID, shape_idx: int, transform: Transform3D) { sys_call("PhysicsServer3D", "area_set_shape_transform", 675327471, Nil, main.p_object, area, shape_idx, transform);  }  // 26
area_set_shape_disabled :: (main: *PhysicsServer3D, area: RID, shape_idx: int, disabled: bool) { sys_call("PhysicsServer3D", "area_set_shape_disabled", 2658558584, Nil, main.p_object, area, shape_idx, disabled);  }  // 27
area_get_shape_count :: (main: *PhysicsServer3D, area: RID) -> int { call_ret := cast(*int) sys_call("PhysicsServer3D", "area_get_shape_count", 2198884583, int, main.p_object, area); return call_ret.*; }  // 28
area_get_shape :: (main: *PhysicsServer3D, area: RID, shape_idx: int) -> RID { call_ret := cast(*RID) sys_call("PhysicsServer3D", "area_get_shape", 1066463050, RID, main.p_object, area, shape_idx); return call_ret.*; }  // 29
area_get_shape_transform :: (main: *PhysicsServer3D, area: RID, shape_idx: int) -> Transform3D { call_ret := cast(*Transform3D) sys_call("PhysicsServer3D", "area_get_shape_transform", 1050775521, Transform3D, main.p_object, area, shape_idx); return call_ret.*; }  // 30
area_remove_shape :: (main: *PhysicsServer3D, area: RID, shape_idx: int) { sys_call("PhysicsServer3D", "area_remove_shape", 3411492887, Nil, main.p_object, area, shape_idx);  }  // 31
area_clear_shapes :: (main: *PhysicsServer3D, area: RID) { sys_call("PhysicsServer3D", "area_clear_shapes", 2722037293, Nil, main.p_object, area);  }  // 32
area_set_collision_layer :: (main: *PhysicsServer3D, area: RID, layer: int) { sys_call("PhysicsServer3D", "area_set_collision_layer", 3411492887, Nil, main.p_object, area, layer);  }  // 33
area_get_collision_layer :: (main: *PhysicsServer3D, area: RID) -> int { call_ret := cast(*int) sys_call("PhysicsServer3D", "area_get_collision_layer", 2198884583, int, main.p_object, area); return call_ret.*; }  // 34
area_set_collision_mask :: (main: *PhysicsServer3D, area: RID, mask: int) { sys_call("PhysicsServer3D", "area_set_collision_mask", 3411492887, Nil, main.p_object, area, mask);  }  // 35
area_get_collision_mask :: (main: *PhysicsServer3D, area: RID) -> int { call_ret := cast(*int) sys_call("PhysicsServer3D", "area_get_collision_mask", 2198884583, int, main.p_object, area); return call_ret.*; }  // 36
area_set_param :: (main: *PhysicsServer3D, area: RID, param: PhysicsServer3D.AreaParameter, value: Variant) { sys_call("PhysicsServer3D", "area_set_param", 2980114638, Nil, main.p_object, area, param, value);  }  // 37
area_set_transform :: (main: *PhysicsServer3D, area: RID, transform: Transform3D) { sys_call("PhysicsServer3D", "area_set_transform", 3935195649, Nil, main.p_object, area, transform);  }  // 38
area_get_param :: (main: *PhysicsServer3D, area: RID, param: PhysicsServer3D.AreaParameter) -> Variant { call_ret := cast(*Variant) sys_call("PhysicsServer3D", "area_get_param", 890056067, Variant, main.p_object, area, param); return call_ret.*; }  // 39
area_get_transform :: (main: *PhysicsServer3D, area: RID) -> Transform3D { call_ret := cast(*Transform3D) sys_call("PhysicsServer3D", "area_get_transform", 1128465797, Transform3D, main.p_object, area); return call_ret.*; }  // 40
area_attach_object_instance_id :: (main: *PhysicsServer3D, area: RID, id: int) { sys_call("PhysicsServer3D", "area_attach_object_instance_id", 3411492887, Nil, main.p_object, area, id);  }  // 41
area_get_object_instance_id :: (main: *PhysicsServer3D, area: RID) -> int { call_ret := cast(*int) sys_call("PhysicsServer3D", "area_get_object_instance_id", 2198884583, int, main.p_object, area); return call_ret.*; }  // 42
area_set_monitor_callback :: (main: *PhysicsServer3D, area: RID, callback: Callable) { sys_call("PhysicsServer3D", "area_set_monitor_callback", 3379118538, Nil, main.p_object, area, callback);  }  // 43
area_set_area_monitor_callback :: (main: *PhysicsServer3D, area: RID, callback: Callable) { sys_call("PhysicsServer3D", "area_set_area_monitor_callback", 3379118538, Nil, main.p_object, area, callback);  }  // 44
area_set_monitorable :: (main: *PhysicsServer3D, area: RID, monitorable: bool) { sys_call("PhysicsServer3D", "area_set_monitorable", 1265174801, Nil, main.p_object, area, monitorable);  }  // 45
area_set_ray_pickable :: (main: *PhysicsServer3D, area: RID, enable: bool) { sys_call("PhysicsServer3D", "area_set_ray_pickable", 1265174801, Nil, main.p_object, area, enable);  }  // 46
body_create :: (main: *PhysicsServer3D) -> RID { call_ret := cast(*RID) sys_call("PhysicsServer3D", "body_create", 529393457, RID, main.p_object); return call_ret.*; }  // 47
body_set_space :: (main: *PhysicsServer3D, body: RID, space: RID) { sys_call("PhysicsServer3D", "body_set_space", 395945892, Nil, main.p_object, body, space);  }  // 48
body_get_space :: (main: *PhysicsServer3D, body: RID) -> RID { call_ret := cast(*RID) sys_call("PhysicsServer3D", "body_get_space", 3814569979, RID, main.p_object, body); return call_ret.*; }  // 49
body_set_mode :: (main: *PhysicsServer3D, body: RID, mode: PhysicsServer3D.BodyMode) { sys_call("PhysicsServer3D", "body_set_mode", 606803466, Nil, main.p_object, body, mode);  }  // 50
body_get_mode :: (main: *PhysicsServer3D, body: RID) -> PhysicsServer3D.BodyMode { call_ret := cast(*PhysicsServer3D.BodyMode) sys_call("PhysicsServer3D", "body_get_mode", 2488819728, PhysicsServer3D.BodyMode, main.p_object, body); return call_ret.*; }  // 51
body_set_collision_layer :: (main: *PhysicsServer3D, body: RID, layer: int) { sys_call("PhysicsServer3D", "body_set_collision_layer", 3411492887, Nil, main.p_object, body, layer);  }  // 52
body_get_collision_layer :: (main: *PhysicsServer3D, body: RID) -> int { call_ret := cast(*int) sys_call("PhysicsServer3D", "body_get_collision_layer", 2198884583, int, main.p_object, body); return call_ret.*; }  // 53
body_set_collision_mask :: (main: *PhysicsServer3D, body: RID, mask: int) { sys_call("PhysicsServer3D", "body_set_collision_mask", 3411492887, Nil, main.p_object, body, mask);  }  // 54
body_get_collision_mask :: (main: *PhysicsServer3D, body: RID) -> int { call_ret := cast(*int) sys_call("PhysicsServer3D", "body_get_collision_mask", 2198884583, int, main.p_object, body); return call_ret.*; }  // 55
body_set_collision_priority :: (main: *PhysicsServer3D, body: RID, priority: float) { sys_call("PhysicsServer3D", "body_set_collision_priority", 1794382983, Nil, main.p_object, body, priority);  }  // 56
body_get_collision_priority :: (main: *PhysicsServer3D, body: RID) -> float { call_ret := cast(*float) sys_call("PhysicsServer3D", "body_get_collision_priority", 866169185, float, main.p_object, body); return call_ret.*; }  // 57
body_add_shape :: (main: *PhysicsServer3D, body: RID, shape: RID) { sys_call("PhysicsServer3D", "body_add_shape", 3711419014, Nil, main.p_object, body, shape);  }  // 58
body_set_shape :: (main: *PhysicsServer3D, body: RID, shape_idx: int, shape: RID) { sys_call("PhysicsServer3D", "body_set_shape", 2310537182, Nil, main.p_object, body, shape_idx, shape);  }  // 59
body_set_shape_transform :: (main: *PhysicsServer3D, body: RID, shape_idx: int, transform: Transform3D) { sys_call("PhysicsServer3D", "body_set_shape_transform", 675327471, Nil, main.p_object, body, shape_idx, transform);  }  // 60
body_set_shape_disabled :: (main: *PhysicsServer3D, body: RID, shape_idx: int, disabled: bool) { sys_call("PhysicsServer3D", "body_set_shape_disabled", 2658558584, Nil, main.p_object, body, shape_idx, disabled);  }  // 61
body_get_shape_count :: (main: *PhysicsServer3D, body: RID) -> int { call_ret := cast(*int) sys_call("PhysicsServer3D", "body_get_shape_count", 2198884583, int, main.p_object, body); return call_ret.*; }  // 62
body_get_shape :: (main: *PhysicsServer3D, body: RID, shape_idx: int) -> RID { call_ret := cast(*RID) sys_call("PhysicsServer3D", "body_get_shape", 1066463050, RID, main.p_object, body, shape_idx); return call_ret.*; }  // 63
body_get_shape_transform :: (main: *PhysicsServer3D, body: RID, shape_idx: int) -> Transform3D { call_ret := cast(*Transform3D) sys_call("PhysicsServer3D", "body_get_shape_transform", 1050775521, Transform3D, main.p_object, body, shape_idx); return call_ret.*; }  // 64
body_remove_shape :: (main: *PhysicsServer3D, body: RID, shape_idx: int) { sys_call("PhysicsServer3D", "body_remove_shape", 3411492887, Nil, main.p_object, body, shape_idx);  }  // 65
body_clear_shapes :: (main: *PhysicsServer3D, body: RID) { sys_call("PhysicsServer3D", "body_clear_shapes", 2722037293, Nil, main.p_object, body);  }  // 66
body_attach_object_instance_id :: (main: *PhysicsServer3D, body: RID, id: int) { sys_call("PhysicsServer3D", "body_attach_object_instance_id", 3411492887, Nil, main.p_object, body, id);  }  // 67
body_get_object_instance_id :: (main: *PhysicsServer3D, body: RID) -> int { call_ret := cast(*int) sys_call("PhysicsServer3D", "body_get_object_instance_id", 2198884583, int, main.p_object, body); return call_ret.*; }  // 68
body_set_enable_continuous_collision_detection :: (main: *PhysicsServer3D, body: RID, enable: bool) { sys_call("PhysicsServer3D", "body_set_enable_continuous_collision_detection", 1265174801, Nil, main.p_object, body, enable);  }  // 69
body_is_continuous_collision_detection_enabled :: (main: *PhysicsServer3D, body: RID) -> bool { call_ret := cast(*bool) sys_call("PhysicsServer3D", "body_is_continuous_collision_detection_enabled", 4155700596, bool, main.p_object, body); return call_ret.*; }  // 70
body_set_param :: (main: *PhysicsServer3D, body: RID, param: PhysicsServer3D.BodyParameter, value: Variant) { sys_call("PhysicsServer3D", "body_set_param", 910941953, Nil, main.p_object, body, param, value);  }  // 71
body_get_param :: (main: *PhysicsServer3D, body: RID, param: PhysicsServer3D.BodyParameter) -> Variant { call_ret := cast(*Variant) sys_call("PhysicsServer3D", "body_get_param", 3385027841, Variant, main.p_object, body, param); return call_ret.*; }  // 72
body_reset_mass_properties :: (main: *PhysicsServer3D, body: RID) { sys_call("PhysicsServer3D", "body_reset_mass_properties", 2722037293, Nil, main.p_object, body);  }  // 73
body_set_state :: (main: *PhysicsServer3D, body: RID, state: PhysicsServer3D.BodyState, value: Variant) { sys_call("PhysicsServer3D", "body_set_state", 599977762, Nil, main.p_object, body, state, value);  }  // 74
body_get_state :: (main: *PhysicsServer3D, body: RID, state: PhysicsServer3D.BodyState) -> Variant { call_ret := cast(*Variant) sys_call("PhysicsServer3D", "body_get_state", 1850449534, Variant, main.p_object, body, state); return call_ret.*; }  // 75
body_apply_central_impulse :: (main: *PhysicsServer3D, body: RID, impulse: Vector3) { sys_call("PhysicsServer3D", "body_apply_central_impulse", 3227306858, Nil, main.p_object, body, impulse);  }  // 76
body_apply_impulse :: (main: *PhysicsServer3D, body: RID, impulse: Vector3) { sys_call("PhysicsServer3D", "body_apply_impulse", 390416203, Nil, main.p_object, body, impulse);  }  // 77
body_apply_torque_impulse :: (main: *PhysicsServer3D, body: RID, impulse: Vector3) { sys_call("PhysicsServer3D", "body_apply_torque_impulse", 3227306858, Nil, main.p_object, body, impulse);  }  // 78
body_apply_central_force :: (main: *PhysicsServer3D, body: RID, force: Vector3) { sys_call("PhysicsServer3D", "body_apply_central_force", 3227306858, Nil, main.p_object, body, force);  }  // 79
body_apply_force :: (main: *PhysicsServer3D, body: RID, force: Vector3) { sys_call("PhysicsServer3D", "body_apply_force", 390416203, Nil, main.p_object, body, force);  }  // 80
body_apply_torque :: (main: *PhysicsServer3D, body: RID, torque: Vector3) { sys_call("PhysicsServer3D", "body_apply_torque", 3227306858, Nil, main.p_object, body, torque);  }  // 81
body_add_constant_central_force :: (main: *PhysicsServer3D, body: RID, force: Vector3) { sys_call("PhysicsServer3D", "body_add_constant_central_force", 3227306858, Nil, main.p_object, body, force);  }  // 82
body_add_constant_force :: (main: *PhysicsServer3D, body: RID, force: Vector3) { sys_call("PhysicsServer3D", "body_add_constant_force", 390416203, Nil, main.p_object, body, force);  }  // 83
body_add_constant_torque :: (main: *PhysicsServer3D, body: RID, torque: Vector3) { sys_call("PhysicsServer3D", "body_add_constant_torque", 3227306858, Nil, main.p_object, body, torque);  }  // 84
body_set_constant_force :: (main: *PhysicsServer3D, body: RID, force: Vector3) { sys_call("PhysicsServer3D", "body_set_constant_force", 3227306858, Nil, main.p_object, body, force);  }  // 85
body_get_constant_force :: (main: *PhysicsServer3D, body: RID) -> Vector3 { call_ret := cast(*Vector3) sys_call("PhysicsServer3D", "body_get_constant_force", 531438156, Vector3, main.p_object, body); return call_ret.*; }  // 86
body_set_constant_torque :: (main: *PhysicsServer3D, body: RID, torque: Vector3) { sys_call("PhysicsServer3D", "body_set_constant_torque", 3227306858, Nil, main.p_object, body, torque);  }  // 87
body_get_constant_torque :: (main: *PhysicsServer3D, body: RID) -> Vector3 { call_ret := cast(*Vector3) sys_call("PhysicsServer3D", "body_get_constant_torque", 531438156, Vector3, main.p_object, body); return call_ret.*; }  // 88
body_set_axis_velocity :: (main: *PhysicsServer3D, body: RID, axis_velocity: Vector3) { sys_call("PhysicsServer3D", "body_set_axis_velocity", 3227306858, Nil, main.p_object, body, axis_velocity);  }  // 89
body_set_axis_lock :: (main: *PhysicsServer3D, body: RID, axis: PhysicsServer3D.BodyAxis, lock: bool) { sys_call("PhysicsServer3D", "body_set_axis_lock", 2020836892, Nil, main.p_object, body, axis, lock);  }  // 90
body_is_axis_locked :: (main: *PhysicsServer3D, body: RID, axis: PhysicsServer3D.BodyAxis) -> bool { call_ret := cast(*bool) sys_call("PhysicsServer3D", "body_is_axis_locked", 587853580, bool, main.p_object, body, axis); return call_ret.*; }  // 91
body_add_collision_exception :: (main: *PhysicsServer3D, body: RID, excepted_body: RID) { sys_call("PhysicsServer3D", "body_add_collision_exception", 395945892, Nil, main.p_object, body, excepted_body);  }  // 92
body_remove_collision_exception :: (main: *PhysicsServer3D, body: RID, excepted_body: RID) { sys_call("PhysicsServer3D", "body_remove_collision_exception", 395945892, Nil, main.p_object, body, excepted_body);  }  // 93
body_set_max_contacts_reported :: (main: *PhysicsServer3D, body: RID, amount: int) { sys_call("PhysicsServer3D", "body_set_max_contacts_reported", 3411492887, Nil, main.p_object, body, amount);  }  // 94
body_get_max_contacts_reported :: (main: *PhysicsServer3D, body: RID) -> int { call_ret := cast(*int) sys_call("PhysicsServer3D", "body_get_max_contacts_reported", 2198884583, int, main.p_object, body); return call_ret.*; }  // 95
body_set_omit_force_integration :: (main: *PhysicsServer3D, body: RID, enable: bool) { sys_call("PhysicsServer3D", "body_set_omit_force_integration", 1265174801, Nil, main.p_object, body, enable);  }  // 96
body_is_omitting_force_integration :: (main: *PhysicsServer3D, body: RID) -> bool { call_ret := cast(*bool) sys_call("PhysicsServer3D", "body_is_omitting_force_integration", 4155700596, bool, main.p_object, body); return call_ret.*; }  // 97
body_set_state_sync_callback :: (main: *PhysicsServer3D, body: RID, callable: Callable) { sys_call("PhysicsServer3D", "body_set_state_sync_callback", 3379118538, Nil, main.p_object, body, callable);  }  // 98
body_set_force_integration_callback :: (main: *PhysicsServer3D, body: RID, callable: Callable) { sys_call("PhysicsServer3D", "body_set_force_integration_callback", 3059434249, Nil, main.p_object, body, callable);  }  // 99
body_set_ray_pickable :: (main: *PhysicsServer3D, body: RID, enable: bool) { sys_call("PhysicsServer3D", "body_set_ray_pickable", 1265174801, Nil, main.p_object, body, enable);  }  // 100
body_test_motion :: (main: *PhysicsServer3D, body: RID, parameters: PhysicsTestMotionParameters3D) -> bool { call_ret := cast(*bool) sys_call("PhysicsServer3D", "body_test_motion", 1944921792, bool, main.p_object, body, parameters); return call_ret.*; }  // 101
body_get_direct_state :: (main: *PhysicsServer3D, body: RID) -> *PhysicsDirectBodyState3D { call_ret := cast(*PhysicsDirectBodyState3D) sys_call("PhysicsServer3D", "body_get_direct_state", 3029727957, PhysicsDirectBodyState3D, main.p_object, body); return call_ret; }  // 102
soft_body_create :: (main: *PhysicsServer3D) -> RID { call_ret := cast(*RID) sys_call("PhysicsServer3D", "soft_body_create", 529393457, RID, main.p_object); return call_ret.*; }  // 103
soft_body_update_rendering_server :: (main: *PhysicsServer3D, body: RID, rendering_server_handler: PhysicsServer3DRenderingServerHandler) { sys_call("PhysicsServer3D", "soft_body_update_rendering_server", 2218179753, Nil, main.p_object, body, rendering_server_handler);  }  // 104
soft_body_set_space :: (main: *PhysicsServer3D, body: RID, space: RID) { sys_call("PhysicsServer3D", "soft_body_set_space", 395945892, Nil, main.p_object, body, space);  }  // 105
soft_body_get_space :: (main: *PhysicsServer3D, body: RID) -> RID { call_ret := cast(*RID) sys_call("PhysicsServer3D", "soft_body_get_space", 3814569979, RID, main.p_object, body); return call_ret.*; }  // 106
soft_body_set_mesh :: (main: *PhysicsServer3D, body: RID, mesh: RID) { sys_call("PhysicsServer3D", "soft_body_set_mesh", 395945892, Nil, main.p_object, body, mesh);  }  // 107
soft_body_get_bounds :: (main: *PhysicsServer3D, body: RID) -> AABB { call_ret := cast(*AABB) sys_call("PhysicsServer3D", "soft_body_get_bounds", 974181306, AABB, main.p_object, body); return call_ret.*; }  // 108
soft_body_set_collision_layer :: (main: *PhysicsServer3D, body: RID, layer: int) { sys_call("PhysicsServer3D", "soft_body_set_collision_layer", 3411492887, Nil, main.p_object, body, layer);  }  // 109
soft_body_get_collision_layer :: (main: *PhysicsServer3D, body: RID) -> int { call_ret := cast(*int) sys_call("PhysicsServer3D", "soft_body_get_collision_layer", 2198884583, int, main.p_object, body); return call_ret.*; }  // 110
soft_body_set_collision_mask :: (main: *PhysicsServer3D, body: RID, mask: int) { sys_call("PhysicsServer3D", "soft_body_set_collision_mask", 3411492887, Nil, main.p_object, body, mask);  }  // 111
soft_body_get_collision_mask :: (main: *PhysicsServer3D, body: RID) -> int { call_ret := cast(*int) sys_call("PhysicsServer3D", "soft_body_get_collision_mask", 2198884583, int, main.p_object, body); return call_ret.*; }  // 112
soft_body_add_collision_exception :: (main: *PhysicsServer3D, body: RID, body_b: RID) { sys_call("PhysicsServer3D", "soft_body_add_collision_exception", 395945892, Nil, main.p_object, body, body_b);  }  // 113
soft_body_remove_collision_exception :: (main: *PhysicsServer3D, body: RID, body_b: RID) { sys_call("PhysicsServer3D", "soft_body_remove_collision_exception", 395945892, Nil, main.p_object, body, body_b);  }  // 114
soft_body_set_state :: (main: *PhysicsServer3D, body: RID, state: PhysicsServer3D.BodyState, variant: Variant) { sys_call("PhysicsServer3D", "soft_body_set_state", 599977762, Nil, main.p_object, body, state, variant);  }  // 115
soft_body_get_state :: (main: *PhysicsServer3D, body: RID, state: PhysicsServer3D.BodyState) -> Variant { call_ret := cast(*Variant) sys_call("PhysicsServer3D", "soft_body_get_state", 1850449534, Variant, main.p_object, body, state); return call_ret.*; }  // 116
soft_body_set_transform :: (main: *PhysicsServer3D, body: RID, transform: Transform3D) { sys_call("PhysicsServer3D", "soft_body_set_transform", 3935195649, Nil, main.p_object, body, transform);  }  // 117
soft_body_set_ray_pickable :: (main: *PhysicsServer3D, body: RID, enable: bool) { sys_call("PhysicsServer3D", "soft_body_set_ray_pickable", 1265174801, Nil, main.p_object, body, enable);  }  // 118
soft_body_set_simulation_precision :: (main: *PhysicsServer3D, body: RID, simulation_precision: int) { sys_call("PhysicsServer3D", "soft_body_set_simulation_precision", 3411492887, Nil, main.p_object, body, simulation_precision);  }  // 119
soft_body_get_simulation_precision :: (main: *PhysicsServer3D, body: RID) -> int { call_ret := cast(*int) sys_call("PhysicsServer3D", "soft_body_get_simulation_precision", 2198884583, int, main.p_object, body); return call_ret.*; }  // 120
soft_body_set_total_mass :: (main: *PhysicsServer3D, body: RID, total_mass: float) { sys_call("PhysicsServer3D", "soft_body_set_total_mass", 1794382983, Nil, main.p_object, body, total_mass);  }  // 121
soft_body_get_total_mass :: (main: *PhysicsServer3D, body: RID) -> float { call_ret := cast(*float) sys_call("PhysicsServer3D", "soft_body_get_total_mass", 866169185, float, main.p_object, body); return call_ret.*; }  // 122
soft_body_set_linear_stiffness :: (main: *PhysicsServer3D, body: RID, stiffness: float) { sys_call("PhysicsServer3D", "soft_body_set_linear_stiffness", 1794382983, Nil, main.p_object, body, stiffness);  }  // 123
soft_body_get_linear_stiffness :: (main: *PhysicsServer3D, body: RID) -> float { call_ret := cast(*float) sys_call("PhysicsServer3D", "soft_body_get_linear_stiffness", 866169185, float, main.p_object, body); return call_ret.*; }  // 124
soft_body_set_pressure_coefficient :: (main: *PhysicsServer3D, body: RID, pressure_coefficient: float) { sys_call("PhysicsServer3D", "soft_body_set_pressure_coefficient", 1794382983, Nil, main.p_object, body, pressure_coefficient);  }  // 125
soft_body_get_pressure_coefficient :: (main: *PhysicsServer3D, body: RID) -> float { call_ret := cast(*float) sys_call("PhysicsServer3D", "soft_body_get_pressure_coefficient", 866169185, float, main.p_object, body); return call_ret.*; }  // 126
soft_body_set_damping_coefficient :: (main: *PhysicsServer3D, body: RID, damping_coefficient: float) { sys_call("PhysicsServer3D", "soft_body_set_damping_coefficient", 1794382983, Nil, main.p_object, body, damping_coefficient);  }  // 127
soft_body_get_damping_coefficient :: (main: *PhysicsServer3D, body: RID) -> float { call_ret := cast(*float) sys_call("PhysicsServer3D", "soft_body_get_damping_coefficient", 866169185, float, main.p_object, body); return call_ret.*; }  // 128
soft_body_set_drag_coefficient :: (main: *PhysicsServer3D, body: RID, drag_coefficient: float) { sys_call("PhysicsServer3D", "soft_body_set_drag_coefficient", 1794382983, Nil, main.p_object, body, drag_coefficient);  }  // 129
soft_body_get_drag_coefficient :: (main: *PhysicsServer3D, body: RID) -> float { call_ret := cast(*float) sys_call("PhysicsServer3D", "soft_body_get_drag_coefficient", 866169185, float, main.p_object, body); return call_ret.*; }  // 130
soft_body_move_point :: (main: *PhysicsServer3D, body: RID, point_index: int, global_position: Vector3) { sys_call("PhysicsServer3D", "soft_body_move_point", 831953689, Nil, main.p_object, body, point_index, global_position);  }  // 131
soft_body_get_point_global_position :: (main: *PhysicsServer3D, body: RID, point_index: int) -> Vector3 { call_ret := cast(*Vector3) sys_call("PhysicsServer3D", "soft_body_get_point_global_position", 3440143363, Vector3, main.p_object, body, point_index); return call_ret.*; }  // 132
soft_body_remove_all_pinned_points :: (main: *PhysicsServer3D, body: RID) { sys_call("PhysicsServer3D", "soft_body_remove_all_pinned_points", 2722037293, Nil, main.p_object, body);  }  // 133
soft_body_pin_point :: (main: *PhysicsServer3D, body: RID, point_index: int, pin: bool) { sys_call("PhysicsServer3D", "soft_body_pin_point", 2658558584, Nil, main.p_object, body, point_index, pin);  }  // 134
soft_body_is_point_pinned :: (main: *PhysicsServer3D, body: RID, point_index: int) -> bool { call_ret := cast(*bool) sys_call("PhysicsServer3D", "soft_body_is_point_pinned", 3120086654, bool, main.p_object, body, point_index); return call_ret.*; }  // 135
joint_create :: (main: *PhysicsServer3D) -> RID { call_ret := cast(*RID) sys_call("PhysicsServer3D", "joint_create", 529393457, RID, main.p_object); return call_ret.*; }  // 136
joint_clear :: (main: *PhysicsServer3D, joint: RID) { sys_call("PhysicsServer3D", "joint_clear", 2722037293, Nil, main.p_object, joint);  }  // 137
joint_make_pin :: (main: *PhysicsServer3D, joint: RID, body_A: RID, local_A: Vector3, body_B: RID, local_B: Vector3) { sys_call("PhysicsServer3D", "joint_make_pin", 4280171926, Nil, main.p_object, joint, body_A, local_A, body_B, local_B);  }  // 138
pin_joint_set_param :: (main: *PhysicsServer3D, joint: RID, param: PhysicsServer3D.PinJointParam, value: float) { sys_call("PhysicsServer3D", "pin_joint_set_param", 810685294, Nil, main.p_object, joint, param, value);  }  // 139
pin_joint_get_param :: (main: *PhysicsServer3D, joint: RID, param: PhysicsServer3D.PinJointParam) -> float { call_ret := cast(*float) sys_call("PhysicsServer3D", "pin_joint_get_param", 2817972347, float, main.p_object, joint, param); return call_ret.*; }  // 140
pin_joint_set_local_a :: (main: *PhysicsServer3D, joint: RID, local_A: Vector3) { sys_call("PhysicsServer3D", "pin_joint_set_local_a", 3227306858, Nil, main.p_object, joint, local_A);  }  // 141
pin_joint_get_local_a :: (main: *PhysicsServer3D, joint: RID) -> Vector3 { call_ret := cast(*Vector3) sys_call("PhysicsServer3D", "pin_joint_get_local_a", 531438156, Vector3, main.p_object, joint); return call_ret.*; }  // 142
pin_joint_set_local_b :: (main: *PhysicsServer3D, joint: RID, local_B: Vector3) { sys_call("PhysicsServer3D", "pin_joint_set_local_b", 3227306858, Nil, main.p_object, joint, local_B);  }  // 143
pin_joint_get_local_b :: (main: *PhysicsServer3D, joint: RID) -> Vector3 { call_ret := cast(*Vector3) sys_call("PhysicsServer3D", "pin_joint_get_local_b", 531438156, Vector3, main.p_object, joint); return call_ret.*; }  // 144
joint_make_hinge :: (main: *PhysicsServer3D, joint: RID, body_A: RID, hinge_A: Transform3D, body_B: RID, hinge_B: Transform3D) { sys_call("PhysicsServer3D", "joint_make_hinge", 1684107643, Nil, main.p_object, joint, body_A, hinge_A, body_B, hinge_B);  }  // 145
hinge_joint_set_param :: (main: *PhysicsServer3D, joint: RID, param: PhysicsServer3D.HingeJointParam, value: float) { sys_call("PhysicsServer3D", "hinge_joint_set_param", 3165502333, Nil, main.p_object, joint, param, value);  }  // 146
hinge_joint_get_param :: (main: *PhysicsServer3D, joint: RID, param: PhysicsServer3D.HingeJointParam) -> float { call_ret := cast(*float) sys_call("PhysicsServer3D", "hinge_joint_get_param", 2129207581, float, main.p_object, joint, param); return call_ret.*; }  // 147
hinge_joint_set_flag :: (main: *PhysicsServer3D, joint: RID, flag: PhysicsServer3D.HingeJointFlag, enabled: bool) { sys_call("PhysicsServer3D", "hinge_joint_set_flag", 1601626188, Nil, main.p_object, joint, flag, enabled);  }  // 148
hinge_joint_get_flag :: (main: *PhysicsServer3D, joint: RID, flag: PhysicsServer3D.HingeJointFlag) -> bool { call_ret := cast(*bool) sys_call("PhysicsServer3D", "hinge_joint_get_flag", 4165147865, bool, main.p_object, joint, flag); return call_ret.*; }  // 149
joint_make_slider :: (main: *PhysicsServer3D, joint: RID, body_A: RID, local_ref_A: Transform3D, body_B: RID, local_ref_B: Transform3D) { sys_call("PhysicsServer3D", "joint_make_slider", 1684107643, Nil, main.p_object, joint, body_A, local_ref_A, body_B, local_ref_B);  }  // 150
slider_joint_set_param :: (main: *PhysicsServer3D, joint: RID, param: PhysicsServer3D.SliderJointParam, value: float) { sys_call("PhysicsServer3D", "slider_joint_set_param", 2264833593, Nil, main.p_object, joint, param, value);  }  // 151
slider_joint_get_param :: (main: *PhysicsServer3D, joint: RID, param: PhysicsServer3D.SliderJointParam) -> float { call_ret := cast(*float) sys_call("PhysicsServer3D", "slider_joint_get_param", 3498644957, float, main.p_object, joint, param); return call_ret.*; }  // 152
joint_make_cone_twist :: (main: *PhysicsServer3D, joint: RID, body_A: RID, local_ref_A: Transform3D, body_B: RID, local_ref_B: Transform3D) { sys_call("PhysicsServer3D", "joint_make_cone_twist", 1684107643, Nil, main.p_object, joint, body_A, local_ref_A, body_B, local_ref_B);  }  // 153
cone_twist_joint_set_param :: (main: *PhysicsServer3D, joint: RID, param: PhysicsServer3D.ConeTwistJointParam, value: float) { sys_call("PhysicsServer3D", "cone_twist_joint_set_param", 808587618, Nil, main.p_object, joint, param, value);  }  // 154
cone_twist_joint_get_param :: (main: *PhysicsServer3D, joint: RID, param: PhysicsServer3D.ConeTwistJointParam) -> float { call_ret := cast(*float) sys_call("PhysicsServer3D", "cone_twist_joint_get_param", 1134789658, float, main.p_object, joint, param); return call_ret.*; }  // 155
joint_get_type :: (main: *PhysicsServer3D, joint: RID) -> PhysicsServer3D.JointType { call_ret := cast(*PhysicsServer3D.JointType) sys_call("PhysicsServer3D", "joint_get_type", 4290791900, PhysicsServer3D.JointType, main.p_object, joint); return call_ret.*; }  // 156
joint_set_solver_priority :: (main: *PhysicsServer3D, joint: RID, priority: int) { sys_call("PhysicsServer3D", "joint_set_solver_priority", 3411492887, Nil, main.p_object, joint, priority);  }  // 157
joint_get_solver_priority :: (main: *PhysicsServer3D, joint: RID) -> int { call_ret := cast(*int) sys_call("PhysicsServer3D", "joint_get_solver_priority", 2198884583, int, main.p_object, joint); return call_ret.*; }  // 158
joint_disable_collisions_between_bodies :: (main: *PhysicsServer3D, joint: RID, disable: bool) { sys_call("PhysicsServer3D", "joint_disable_collisions_between_bodies", 1265174801, Nil, main.p_object, joint, disable);  }  // 159
joint_is_disabled_collisions_between_bodies :: (main: *PhysicsServer3D, joint: RID) -> bool { call_ret := cast(*bool) sys_call("PhysicsServer3D", "joint_is_disabled_collisions_between_bodies", 4155700596, bool, main.p_object, joint); return call_ret.*; }  // 160
joint_make_generic_6dof :: (main: *PhysicsServer3D, joint: RID, body_A: RID, local_ref_A: Transform3D, body_B: RID, local_ref_B: Transform3D) { sys_call("PhysicsServer3D", "joint_make_generic_6dof", 1684107643, Nil, main.p_object, joint, body_A, local_ref_A, body_B, local_ref_B);  }  // 161
generic_6dof_joint_set_param :: (main: *PhysicsServer3D, joint: RID, axis: Vector3_Axis, param: PhysicsServer3D.G6DOFJointAxisParam, value: float) { sys_call("PhysicsServer3D", "generic_6dof_joint_set_param", 2600081391, Nil, main.p_object, joint, axis, param, value);  }  // 162
generic_6dof_joint_get_param :: (main: *PhysicsServer3D, joint: RID, axis: Vector3_Axis, param: PhysicsServer3D.G6DOFJointAxisParam) -> float { call_ret := cast(*float) sys_call("PhysicsServer3D", "generic_6dof_joint_get_param", 467122058, float, main.p_object, joint, axis, param); return call_ret.*; }  // 163
generic_6dof_joint_set_flag :: (main: *PhysicsServer3D, joint: RID, axis: Vector3_Axis, flag: PhysicsServer3D.G6DOFJointAxisFlag, enable: bool) { sys_call("PhysicsServer3D", "generic_6dof_joint_set_flag", 3570926903, Nil, main.p_object, joint, axis, flag, enable);  }  // 164
generic_6dof_joint_get_flag :: (main: *PhysicsServer3D, joint: RID, axis: Vector3_Axis, flag: PhysicsServer3D.G6DOFJointAxisFlag) -> bool { call_ret := cast(*bool) sys_call("PhysicsServer3D", "generic_6dof_joint_get_flag", 4158090196, bool, main.p_object, joint, axis, flag); return call_ret.*; }  // 165
free_rid :: (main: *PhysicsServer3D, rid: RID) { sys_call("PhysicsServer3D", "free_rid", 2722037293, Nil, main.p_object, rid);  }  // 166
set_active :: (main: *PhysicsServer3D, active: bool) { sys_call("PhysicsServer3D", "set_active", 2586408642, Nil, main.p_object, active);  }  // 167
get_process_info :: (main: *PhysicsServer3D, process_info: PhysicsServer3D.ProcessInfo) -> int { call_ret := cast(*int) sys_call("PhysicsServer3D", "get_process_info", 1332958745, int, main.p_object, process_info); return call_ret.*; }  // 168

body_test_motion_is_excluding_body :: (main: *PhysicsServer3DExtension, body: RID) -> bool { call_ret := cast(*bool) sys_call("PhysicsServer3DExtension", "body_test_motion_is_excluding_body", 4155700596, bool, main.p_object, body); return call_ret.*; }  // 188
body_test_motion_is_excluding_object :: (main: *PhysicsServer3DExtension, object: int) -> bool { call_ret := cast(*bool) sys_call("PhysicsServer3DExtension", "body_test_motion_is_excluding_object", 1116898809, bool, main.p_object, object); return call_ret.*; }  // 189

register_server :: (main: *PhysicsServer3DManager, name: string, create_callback: Callable) { sys_call("PhysicsServer3DManager", "register_server", 2137474292, Nil, main.p_object, name, create_callback);  }  // 0
set_default_server :: (main: *PhysicsServer3DManager, name: string, priority: int) { sys_call("PhysicsServer3DManager", "set_default_server", 2956805083, Nil, main.p_object, name, priority);  }  // 1

set_vertex :: (main: *PhysicsServer3DRenderingServerHandler, vertex_id: int, vertex: Vector3) { sys_call("PhysicsServer3DRenderingServerHandler", "set_vertex", 1530502735, Nil, main.p_object, vertex_id, vertex);  }  // 3
set_normal :: (main: *PhysicsServer3DRenderingServerHandler, vertex_id: int, normal: Vector3) { sys_call("PhysicsServer3DRenderingServerHandler", "set_normal", 1530502735, Nil, main.p_object, vertex_id, normal);  }  // 4
set_aabb :: (main: *PhysicsServer3DRenderingServerHandler, aabb: AABB) { sys_call("PhysicsServer3DRenderingServerHandler", "set_aabb", 259215842, Nil, main.p_object, aabb);  }  // 5

set_shape :: (main: *PhysicsShapeQueryParameters2D, shape: Resource) { sys_call("PhysicsShapeQueryParameters2D", "set_shape", 968641751, Nil, main.p_object, shape);  }  // 0
get_shape :: (main: *PhysicsShapeQueryParameters2D) -> *Resource { call_ret := cast(*Resource) sys_call("PhysicsShapeQueryParameters2D", "get_shape", 121922552, Resource, main.p_object); return call_ret; }  // 1
set_shape_rid :: (main: *PhysicsShapeQueryParameters2D, shape: RID) { sys_call("PhysicsShapeQueryParameters2D", "set_shape_rid", 2722037293, Nil, main.p_object, shape);  }  // 2
get_shape_rid :: (main: *PhysicsShapeQueryParameters2D) -> RID { call_ret := cast(*RID) sys_call("PhysicsShapeQueryParameters2D", "get_shape_rid", 2944877500, RID, main.p_object); return call_ret.*; }  // 3
set_transform :: (main: *PhysicsShapeQueryParameters2D, transform: Transform2D) { sys_call("PhysicsShapeQueryParameters2D", "set_transform", 2761652528, Nil, main.p_object, transform);  }  // 4
get_transform :: (main: *PhysicsShapeQueryParameters2D) -> Transform2D { call_ret := cast(*Transform2D) sys_call("PhysicsShapeQueryParameters2D", "get_transform", 3814499831, Transform2D, main.p_object); return call_ret.*; }  // 5
set_motion :: (main: *PhysicsShapeQueryParameters2D, motion: Vector2) { sys_call("PhysicsShapeQueryParameters2D", "set_motion", 743155724, Nil, main.p_object, motion);  }  // 6
get_motion :: (main: *PhysicsShapeQueryParameters2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("PhysicsShapeQueryParameters2D", "get_motion", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 7
set_margin :: (main: *PhysicsShapeQueryParameters2D, margin: float) { sys_call("PhysicsShapeQueryParameters2D", "set_margin", 373806689, Nil, main.p_object, margin);  }  // 8
get_margin :: (main: *PhysicsShapeQueryParameters2D) -> float { call_ret := cast(*float) sys_call("PhysicsShapeQueryParameters2D", "get_margin", 1740695150, float, main.p_object); return call_ret.*; }  // 9
set_collision_mask :: (main: *PhysicsShapeQueryParameters2D, collision_mask: int) { sys_call("PhysicsShapeQueryParameters2D", "set_collision_mask", 1286410249, Nil, main.p_object, collision_mask);  }  // 10
get_collision_mask :: (main: *PhysicsShapeQueryParameters2D) -> int { call_ret := cast(*int) sys_call("PhysicsShapeQueryParameters2D", "get_collision_mask", 3905245786, int, main.p_object); return call_ret.*; }  // 11
set_exclude :: (main: *PhysicsShapeQueryParameters2D, exclude: [] RID) { sys_call("PhysicsShapeQueryParameters2D", "set_exclude", 381264803, Nil, main.p_object, exclude);  }  // 12
get_exclude :: (main: *PhysicsShapeQueryParameters2D) -> [] RID { call_ret := cast(*[] RID) sys_call("PhysicsShapeQueryParameters2D", "get_exclude", 3995934104, [] RID, main.p_object); return call_ret.*; }  // 13
set_collide_with_bodies :: (main: *PhysicsShapeQueryParameters2D, enable: bool) { sys_call("PhysicsShapeQueryParameters2D", "set_collide_with_bodies", 2586408642, Nil, main.p_object, enable);  }  // 14
is_collide_with_bodies_enabled :: (main: *PhysicsShapeQueryParameters2D) -> bool { call_ret := cast(*bool) sys_call("PhysicsShapeQueryParameters2D", "is_collide_with_bodies_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 15
set_collide_with_areas :: (main: *PhysicsShapeQueryParameters2D, enable: bool) { sys_call("PhysicsShapeQueryParameters2D", "set_collide_with_areas", 2586408642, Nil, main.p_object, enable);  }  // 16
is_collide_with_areas_enabled :: (main: *PhysicsShapeQueryParameters2D) -> bool { call_ret := cast(*bool) sys_call("PhysicsShapeQueryParameters2D", "is_collide_with_areas_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 17

set_shape :: (main: *PhysicsShapeQueryParameters3D, shape: Resource) { sys_call("PhysicsShapeQueryParameters3D", "set_shape", 968641751, Nil, main.p_object, shape);  }  // 0
get_shape :: (main: *PhysicsShapeQueryParameters3D) -> *Resource { call_ret := cast(*Resource) sys_call("PhysicsShapeQueryParameters3D", "get_shape", 121922552, Resource, main.p_object); return call_ret; }  // 1
set_shape_rid :: (main: *PhysicsShapeQueryParameters3D, shape: RID) { sys_call("PhysicsShapeQueryParameters3D", "set_shape_rid", 2722037293, Nil, main.p_object, shape);  }  // 2
get_shape_rid :: (main: *PhysicsShapeQueryParameters3D) -> RID { call_ret := cast(*RID) sys_call("PhysicsShapeQueryParameters3D", "get_shape_rid", 2944877500, RID, main.p_object); return call_ret.*; }  // 3
set_transform :: (main: *PhysicsShapeQueryParameters3D, transform: Transform3D) { sys_call("PhysicsShapeQueryParameters3D", "set_transform", 2952846383, Nil, main.p_object, transform);  }  // 4
get_transform :: (main: *PhysicsShapeQueryParameters3D) -> Transform3D { call_ret := cast(*Transform3D) sys_call("PhysicsShapeQueryParameters3D", "get_transform", 3229777777, Transform3D, main.p_object); return call_ret.*; }  // 5
set_motion :: (main: *PhysicsShapeQueryParameters3D, motion: Vector3) { sys_call("PhysicsShapeQueryParameters3D", "set_motion", 3460891852, Nil, main.p_object, motion);  }  // 6
get_motion :: (main: *PhysicsShapeQueryParameters3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("PhysicsShapeQueryParameters3D", "get_motion", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 7
set_margin :: (main: *PhysicsShapeQueryParameters3D, margin: float) { sys_call("PhysicsShapeQueryParameters3D", "set_margin", 373806689, Nil, main.p_object, margin);  }  // 8
get_margin :: (main: *PhysicsShapeQueryParameters3D) -> float { call_ret := cast(*float) sys_call("PhysicsShapeQueryParameters3D", "get_margin", 1740695150, float, main.p_object); return call_ret.*; }  // 9
set_collision_mask :: (main: *PhysicsShapeQueryParameters3D, collision_mask: int) { sys_call("PhysicsShapeQueryParameters3D", "set_collision_mask", 1286410249, Nil, main.p_object, collision_mask);  }  // 10
get_collision_mask :: (main: *PhysicsShapeQueryParameters3D) -> int { call_ret := cast(*int) sys_call("PhysicsShapeQueryParameters3D", "get_collision_mask", 3905245786, int, main.p_object); return call_ret.*; }  // 11
set_exclude :: (main: *PhysicsShapeQueryParameters3D, exclude: [] RID) { sys_call("PhysicsShapeQueryParameters3D", "set_exclude", 381264803, Nil, main.p_object, exclude);  }  // 12
get_exclude :: (main: *PhysicsShapeQueryParameters3D) -> [] RID { call_ret := cast(*[] RID) sys_call("PhysicsShapeQueryParameters3D", "get_exclude", 3995934104, [] RID, main.p_object); return call_ret.*; }  // 13
set_collide_with_bodies :: (main: *PhysicsShapeQueryParameters3D, enable: bool) { sys_call("PhysicsShapeQueryParameters3D", "set_collide_with_bodies", 2586408642, Nil, main.p_object, enable);  }  // 14
is_collide_with_bodies_enabled :: (main: *PhysicsShapeQueryParameters3D) -> bool { call_ret := cast(*bool) sys_call("PhysicsShapeQueryParameters3D", "is_collide_with_bodies_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 15
set_collide_with_areas :: (main: *PhysicsShapeQueryParameters3D, enable: bool) { sys_call("PhysicsShapeQueryParameters3D", "set_collide_with_areas", 2586408642, Nil, main.p_object, enable);  }  // 16
is_collide_with_areas_enabled :: (main: *PhysicsShapeQueryParameters3D) -> bool { call_ret := cast(*bool) sys_call("PhysicsShapeQueryParameters3D", "is_collide_with_areas_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 17

get_from :: (main: *PhysicsTestMotionParameters2D) -> Transform2D { call_ret := cast(*Transform2D) sys_call("PhysicsTestMotionParameters2D", "get_from", 3814499831, Transform2D, main.p_object); return call_ret.*; }  // 0
set_from :: (main: *PhysicsTestMotionParameters2D, from: Transform2D) { sys_call("PhysicsTestMotionParameters2D", "set_from", 2761652528, Nil, main.p_object, from);  }  // 1
get_motion :: (main: *PhysicsTestMotionParameters2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("PhysicsTestMotionParameters2D", "get_motion", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 2
set_motion :: (main: *PhysicsTestMotionParameters2D, motion: Vector2) { sys_call("PhysicsTestMotionParameters2D", "set_motion", 743155724, Nil, main.p_object, motion);  }  // 3
get_margin :: (main: *PhysicsTestMotionParameters2D) -> float { call_ret := cast(*float) sys_call("PhysicsTestMotionParameters2D", "get_margin", 1740695150, float, main.p_object); return call_ret.*; }  // 4
set_margin :: (main: *PhysicsTestMotionParameters2D, margin: float) { sys_call("PhysicsTestMotionParameters2D", "set_margin", 373806689, Nil, main.p_object, margin);  }  // 5
is_collide_separation_ray_enabled :: (main: *PhysicsTestMotionParameters2D) -> bool { call_ret := cast(*bool) sys_call("PhysicsTestMotionParameters2D", "is_collide_separation_ray_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 6
set_collide_separation_ray_enabled :: (main: *PhysicsTestMotionParameters2D, enabled: bool) { sys_call("PhysicsTestMotionParameters2D", "set_collide_separation_ray_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 7
get_exclude_bodies :: (main: *PhysicsTestMotionParameters2D) -> [] RID { call_ret := cast(*[] RID) sys_call("PhysicsTestMotionParameters2D", "get_exclude_bodies", 3995934104, [] RID, main.p_object); return call_ret.*; }  // 8
set_exclude_bodies :: (main: *PhysicsTestMotionParameters2D, exclude_list: [] RID) { sys_call("PhysicsTestMotionParameters2D", "set_exclude_bodies", 381264803, Nil, main.p_object, exclude_list);  }  // 9
get_exclude_objects :: (main: *PhysicsTestMotionParameters2D) -> [] int { call_ret := cast(*[] int) sys_call("PhysicsTestMotionParameters2D", "get_exclude_objects", 3995934104, [] int, main.p_object); return call_ret.*; }  // 10
set_exclude_objects :: (main: *PhysicsTestMotionParameters2D, exclude_list: [] int) { sys_call("PhysicsTestMotionParameters2D", "set_exclude_objects", 381264803, Nil, main.p_object, exclude_list);  }  // 11
is_recovery_as_collision_enabled :: (main: *PhysicsTestMotionParameters2D) -> bool { call_ret := cast(*bool) sys_call("PhysicsTestMotionParameters2D", "is_recovery_as_collision_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 12
set_recovery_as_collision_enabled :: (main: *PhysicsTestMotionParameters2D, enabled: bool) { sys_call("PhysicsTestMotionParameters2D", "set_recovery_as_collision_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 13

get_from :: (main: *PhysicsTestMotionParameters3D) -> Transform3D { call_ret := cast(*Transform3D) sys_call("PhysicsTestMotionParameters3D", "get_from", 3229777777, Transform3D, main.p_object); return call_ret.*; }  // 0
set_from :: (main: *PhysicsTestMotionParameters3D, from: Transform3D) { sys_call("PhysicsTestMotionParameters3D", "set_from", 2952846383, Nil, main.p_object, from);  }  // 1
get_motion :: (main: *PhysicsTestMotionParameters3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("PhysicsTestMotionParameters3D", "get_motion", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 2
set_motion :: (main: *PhysicsTestMotionParameters3D, motion: Vector3) { sys_call("PhysicsTestMotionParameters3D", "set_motion", 3460891852, Nil, main.p_object, motion);  }  // 3
get_margin :: (main: *PhysicsTestMotionParameters3D) -> float { call_ret := cast(*float) sys_call("PhysicsTestMotionParameters3D", "get_margin", 1740695150, float, main.p_object); return call_ret.*; }  // 4
set_margin :: (main: *PhysicsTestMotionParameters3D, margin: float) { sys_call("PhysicsTestMotionParameters3D", "set_margin", 373806689, Nil, main.p_object, margin);  }  // 5
get_max_collisions :: (main: *PhysicsTestMotionParameters3D) -> int { call_ret := cast(*int) sys_call("PhysicsTestMotionParameters3D", "get_max_collisions", 3905245786, int, main.p_object); return call_ret.*; }  // 6
set_max_collisions :: (main: *PhysicsTestMotionParameters3D, max_collisions: int) { sys_call("PhysicsTestMotionParameters3D", "set_max_collisions", 1286410249, Nil, main.p_object, max_collisions);  }  // 7
is_collide_separation_ray_enabled :: (main: *PhysicsTestMotionParameters3D) -> bool { call_ret := cast(*bool) sys_call("PhysicsTestMotionParameters3D", "is_collide_separation_ray_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 8
set_collide_separation_ray_enabled :: (main: *PhysicsTestMotionParameters3D, enabled: bool) { sys_call("PhysicsTestMotionParameters3D", "set_collide_separation_ray_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 9
get_exclude_bodies :: (main: *PhysicsTestMotionParameters3D) -> [] RID { call_ret := cast(*[] RID) sys_call("PhysicsTestMotionParameters3D", "get_exclude_bodies", 3995934104, [] RID, main.p_object); return call_ret.*; }  // 10
set_exclude_bodies :: (main: *PhysicsTestMotionParameters3D, exclude_list: [] RID) { sys_call("PhysicsTestMotionParameters3D", "set_exclude_bodies", 381264803, Nil, main.p_object, exclude_list);  }  // 11
get_exclude_objects :: (main: *PhysicsTestMotionParameters3D) -> [] int { call_ret := cast(*[] int) sys_call("PhysicsTestMotionParameters3D", "get_exclude_objects", 3995934104, [] int, main.p_object); return call_ret.*; }  // 12
set_exclude_objects :: (main: *PhysicsTestMotionParameters3D, exclude_list: [] int) { sys_call("PhysicsTestMotionParameters3D", "set_exclude_objects", 381264803, Nil, main.p_object, exclude_list);  }  // 13
is_recovery_as_collision_enabled :: (main: *PhysicsTestMotionParameters3D) -> bool { call_ret := cast(*bool) sys_call("PhysicsTestMotionParameters3D", "is_recovery_as_collision_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 14
set_recovery_as_collision_enabled :: (main: *PhysicsTestMotionParameters3D, enabled: bool) { sys_call("PhysicsTestMotionParameters3D", "set_recovery_as_collision_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 15

get_travel :: (main: *PhysicsTestMotionResult2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("PhysicsTestMotionResult2D", "get_travel", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 0
get_remainder :: (main: *PhysicsTestMotionResult2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("PhysicsTestMotionResult2D", "get_remainder", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 1
get_collision_point :: (main: *PhysicsTestMotionResult2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("PhysicsTestMotionResult2D", "get_collision_point", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 2
get_collision_normal :: (main: *PhysicsTestMotionResult2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("PhysicsTestMotionResult2D", "get_collision_normal", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 3
get_collider_velocity :: (main: *PhysicsTestMotionResult2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("PhysicsTestMotionResult2D", "get_collider_velocity", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 4
get_collider_id :: (main: *PhysicsTestMotionResult2D) -> int { call_ret := cast(*int) sys_call("PhysicsTestMotionResult2D", "get_collider_id", 3905245786, int, main.p_object); return call_ret.*; }  // 5
get_collider_rid :: (main: *PhysicsTestMotionResult2D) -> RID { call_ret := cast(*RID) sys_call("PhysicsTestMotionResult2D", "get_collider_rid", 2944877500, RID, main.p_object); return call_ret.*; }  // 6
get_collider :: (main: *PhysicsTestMotionResult2D) -> *Object { call_ret := cast(*Object) sys_call("PhysicsTestMotionResult2D", "get_collider", 1981248198, Object, main.p_object); return call_ret; }  // 7
get_collider_shape :: (main: *PhysicsTestMotionResult2D) -> int { call_ret := cast(*int) sys_call("PhysicsTestMotionResult2D", "get_collider_shape", 3905245786, int, main.p_object); return call_ret.*; }  // 8
get_collision_local_shape :: (main: *PhysicsTestMotionResult2D) -> int { call_ret := cast(*int) sys_call("PhysicsTestMotionResult2D", "get_collision_local_shape", 3905245786, int, main.p_object); return call_ret.*; }  // 9
get_collision_depth :: (main: *PhysicsTestMotionResult2D) -> float { call_ret := cast(*float) sys_call("PhysicsTestMotionResult2D", "get_collision_depth", 1740695150, float, main.p_object); return call_ret.*; }  // 10
get_collision_safe_fraction :: (main: *PhysicsTestMotionResult2D) -> float { call_ret := cast(*float) sys_call("PhysicsTestMotionResult2D", "get_collision_safe_fraction", 1740695150, float, main.p_object); return call_ret.*; }  // 11
get_collision_unsafe_fraction :: (main: *PhysicsTestMotionResult2D) -> float { call_ret := cast(*float) sys_call("PhysicsTestMotionResult2D", "get_collision_unsafe_fraction", 1740695150, float, main.p_object); return call_ret.*; }  // 12

get_travel :: (main: *PhysicsTestMotionResult3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("PhysicsTestMotionResult3D", "get_travel", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 0
get_remainder :: (main: *PhysicsTestMotionResult3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("PhysicsTestMotionResult3D", "get_remainder", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 1
get_collision_safe_fraction :: (main: *PhysicsTestMotionResult3D) -> float { call_ret := cast(*float) sys_call("PhysicsTestMotionResult3D", "get_collision_safe_fraction", 1740695150, float, main.p_object); return call_ret.*; }  // 2
get_collision_unsafe_fraction :: (main: *PhysicsTestMotionResult3D) -> float { call_ret := cast(*float) sys_call("PhysicsTestMotionResult3D", "get_collision_unsafe_fraction", 1740695150, float, main.p_object); return call_ret.*; }  // 3
get_collision_count :: (main: *PhysicsTestMotionResult3D) -> int { call_ret := cast(*int) sys_call("PhysicsTestMotionResult3D", "get_collision_count", 3905245786, int, main.p_object); return call_ret.*; }  // 4
get_collision_point :: (main: *PhysicsTestMotionResult3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("PhysicsTestMotionResult3D", "get_collision_point", 1914908202, Vector3, main.p_object); return call_ret.*; }  // 5
get_collision_normal :: (main: *PhysicsTestMotionResult3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("PhysicsTestMotionResult3D", "get_collision_normal", 1914908202, Vector3, main.p_object); return call_ret.*; }  // 6
get_collider_velocity :: (main: *PhysicsTestMotionResult3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("PhysicsTestMotionResult3D", "get_collider_velocity", 1914908202, Vector3, main.p_object); return call_ret.*; }  // 7
get_collider_id :: (main: *PhysicsTestMotionResult3D) -> int { call_ret := cast(*int) sys_call("PhysicsTestMotionResult3D", "get_collider_id", 1591665591, int, main.p_object); return call_ret.*; }  // 8
get_collider_rid :: (main: *PhysicsTestMotionResult3D) -> RID { call_ret := cast(*RID) sys_call("PhysicsTestMotionResult3D", "get_collider_rid", 1231817359, RID, main.p_object); return call_ret.*; }  // 9
get_collider :: (main: *PhysicsTestMotionResult3D) -> *Object { call_ret := cast(*Object) sys_call("PhysicsTestMotionResult3D", "get_collider", 2639523548, Object, main.p_object); return call_ret; }  // 10
get_collider_shape :: (main: *PhysicsTestMotionResult3D) -> int { call_ret := cast(*int) sys_call("PhysicsTestMotionResult3D", "get_collider_shape", 1591665591, int, main.p_object); return call_ret.*; }  // 11
get_collision_local_shape :: (main: *PhysicsTestMotionResult3D) -> int { call_ret := cast(*int) sys_call("PhysicsTestMotionResult3D", "get_collision_local_shape", 1591665591, int, main.p_object); return call_ret.*; }  // 12
get_collision_depth :: (main: *PhysicsTestMotionResult3D) -> float { call_ret := cast(*float) sys_call("PhysicsTestMotionResult3D", "get_collision_depth", 218038398, float, main.p_object); return call_ret.*; }  // 13

set_softness :: (main: *PinJoint2D, softness: float) { sys_call("PinJoint2D", "set_softness", 373806689, Nil, main.p_object, softness);  }  // 0
get_softness :: (main: *PinJoint2D) -> float { call_ret := cast(*float) sys_call("PinJoint2D", "get_softness", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_angular_limit_lower :: (main: *PinJoint2D, angular_limit_lower: float) { sys_call("PinJoint2D", "set_angular_limit_lower", 373806689, Nil, main.p_object, angular_limit_lower);  }  // 2
get_angular_limit_lower :: (main: *PinJoint2D) -> float { call_ret := cast(*float) sys_call("PinJoint2D", "get_angular_limit_lower", 1740695150, float, main.p_object); return call_ret.*; }  // 3
set_angular_limit_upper :: (main: *PinJoint2D, angular_limit_upper: float) { sys_call("PinJoint2D", "set_angular_limit_upper", 373806689, Nil, main.p_object, angular_limit_upper);  }  // 4
get_angular_limit_upper :: (main: *PinJoint2D) -> float { call_ret := cast(*float) sys_call("PinJoint2D", "get_angular_limit_upper", 1740695150, float, main.p_object); return call_ret.*; }  // 5
set_motor_target_velocity :: (main: *PinJoint2D, motor_target_velocity: float) { sys_call("PinJoint2D", "set_motor_target_velocity", 373806689, Nil, main.p_object, motor_target_velocity);  }  // 6
get_motor_target_velocity :: (main: *PinJoint2D) -> float { call_ret := cast(*float) sys_call("PinJoint2D", "get_motor_target_velocity", 1740695150, float, main.p_object); return call_ret.*; }  // 7
set_motor_enabled :: (main: *PinJoint2D, enabled: bool) { sys_call("PinJoint2D", "set_motor_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 8
is_motor_enabled :: (main: *PinJoint2D) -> bool { call_ret := cast(*bool) sys_call("PinJoint2D", "is_motor_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 9
set_angular_limit_enabled :: (main: *PinJoint2D, enabled: bool) { sys_call("PinJoint2D", "set_angular_limit_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 10
is_angular_limit_enabled :: (main: *PinJoint2D) -> bool { call_ret := cast(*bool) sys_call("PinJoint2D", "is_angular_limit_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 11

set_param :: (main: *PinJoint3D, param: PinJoint3D.Param, value: float) { sys_call("PinJoint3D", "set_param", 2059913726, Nil, main.p_object, param, value);  }  // 0
get_param :: (main: *PinJoint3D, param: PinJoint3D.Param) -> float { call_ret := cast(*float) sys_call("PinJoint3D", "get_param", 1758438771, float, main.p_object, param); return call_ret.*; }  // 1




set_aabb :: (main: *PlaceholderMesh, aabb: AABB) { sys_call("PlaceholderMesh", "set_aabb", 259215842, Nil, main.p_object, aabb);  }  // 0

set_size :: (main: *PlaceholderTexture2D, size: Vector2) { sys_call("PlaceholderTexture2D", "set_size", 743155724, Nil, main.p_object, size);  }  // 0


set_size :: (main: *PlaceholderTexture3D, size: Vector3i) { sys_call("PlaceholderTexture3D", "set_size", 560364750, Nil, main.p_object, size);  }  // 0
get_size :: (main: *PlaceholderTexture3D) -> Vector3i { call_ret := cast(*Vector3i) sys_call("PlaceholderTexture3D", "get_size", 2785653706, Vector3i, main.p_object); return call_ret.*; }  // 1

set_size :: (main: *PlaceholderTextureLayered, size: Vector2i) { sys_call("PlaceholderTextureLayered", "set_size", 1130785943, Nil, main.p_object, size);  }  // 0
get_size :: (main: *PlaceholderTextureLayered) -> Vector2i { call_ret := cast(*Vector2i) sys_call("PlaceholderTextureLayered", "get_size", 3690982128, Vector2i, main.p_object); return call_ret.*; }  // 1
set_layers :: (main: *PlaceholderTextureLayered, layers: int) { sys_call("PlaceholderTextureLayered", "set_layers", 1286410249, Nil, main.p_object, layers);  }  // 2

set_size :: (main: *PlaneMesh, size: Vector2) { sys_call("PlaneMesh", "set_size", 743155724, Nil, main.p_object, size);  }  // 0
get_size :: (main: *PlaneMesh) -> Vector2 { call_ret := cast(*Vector2) sys_call("PlaneMesh", "get_size", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 1
set_subdivide_width :: (main: *PlaneMesh, subdivide: int) { sys_call("PlaneMesh", "set_subdivide_width", 1286410249, Nil, main.p_object, subdivide);  }  // 2
get_subdivide_width :: (main: *PlaneMesh) -> int { call_ret := cast(*int) sys_call("PlaneMesh", "get_subdivide_width", 3905245786, int, main.p_object); return call_ret.*; }  // 3
set_subdivide_depth :: (main: *PlaneMesh, subdivide: int) { sys_call("PlaneMesh", "set_subdivide_depth", 1286410249, Nil, main.p_object, subdivide);  }  // 4
get_subdivide_depth :: (main: *PlaneMesh) -> int { call_ret := cast(*int) sys_call("PlaneMesh", "get_subdivide_depth", 3905245786, int, main.p_object); return call_ret.*; }  // 5
set_center_offset :: (main: *PlaneMesh, offset: Vector3) { sys_call("PlaneMesh", "set_center_offset", 3460891852, Nil, main.p_object, offset);  }  // 6
get_center_offset :: (main: *PlaneMesh) -> Vector3 { call_ret := cast(*Vector3) sys_call("PlaneMesh", "get_center_offset", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 7
set_orientation :: (main: *PlaneMesh, orientation: PlaneMesh.Orientation) { sys_call("PlaneMesh", "set_orientation", 2751399687, Nil, main.p_object, orientation);  }  // 8
get_orientation :: (main: *PlaneMesh) -> PlaneMesh.Orientation { call_ret := cast(*PlaneMesh.Orientation) sys_call("PlaneMesh", "get_orientation", 3227599250, PlaneMesh.Orientation, main.p_object); return call_ret.*; }  // 9

set_texture :: (main: *PointLight2D, texture: Texture2D) { sys_call("PointLight2D", "set_texture", 4051416890, Nil, main.p_object, texture);  }  // 0
get_texture :: (main: *PointLight2D) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("PointLight2D", "get_texture", 3635182373, Texture2D, main.p_object); return call_ret; }  // 1
set_texture_offset :: (main: *PointLight2D, texture_offset: Vector2) { sys_call("PointLight2D", "set_texture_offset", 743155724, Nil, main.p_object, texture_offset);  }  // 2
get_texture_offset :: (main: *PointLight2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("PointLight2D", "get_texture_offset", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 3
set_texture_scale :: (main: *PointLight2D, texture_scale: float) { sys_call("PointLight2D", "set_texture_scale", 373806689, Nil, main.p_object, texture_scale);  }  // 4
get_texture_scale :: (main: *PointLight2D) -> float { call_ret := cast(*float) sys_call("PointLight2D", "get_texture_scale", 1740695150, float, main.p_object); return call_ret.*; }  // 5


set_polygon :: (main: *Polygon2D, polygon: PackedVector2Array) { sys_call("Polygon2D", "set_polygon", 1509147220, Nil, main.p_object, polygon);  }  // 0
get_polygon :: (main: *Polygon2D) -> PackedVector2Array { call_ret := cast(*PackedVector2Array) sys_call("Polygon2D", "get_polygon", 2961356807, PackedVector2Array, main.p_object); return call_ret.*; }  // 1
set_uv :: (main: *Polygon2D, uv: PackedVector2Array) { sys_call("Polygon2D", "set_uv", 1509147220, Nil, main.p_object, uv);  }  // 2
get_uv :: (main: *Polygon2D) -> PackedVector2Array { call_ret := cast(*PackedVector2Array) sys_call("Polygon2D", "get_uv", 2961356807, PackedVector2Array, main.p_object); return call_ret.*; }  // 3
set_color :: (main: *Polygon2D, color: Color) { sys_call("Polygon2D", "set_color", 2920490490, Nil, main.p_object, color);  }  // 4
get_color :: (main: *Polygon2D) -> Color { call_ret := cast(*Color) sys_call("Polygon2D", "get_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 5
set_polygons :: (main: *Polygon2D, polygons: Array) { sys_call("Polygon2D", "set_polygons", 381264803, Nil, main.p_object, polygons);  }  // 6
get_polygons :: (main: *Polygon2D) -> Array { call_ret := cast(*Array) sys_call("Polygon2D", "get_polygons", 3995934104, Array, main.p_object); return call_ret.*; }  // 7
set_vertex_colors :: (main: *Polygon2D, vertex_colors: PackedColorArray) { sys_call("Polygon2D", "set_vertex_colors", 3546319833, Nil, main.p_object, vertex_colors);  }  // 8
get_vertex_colors :: (main: *Polygon2D) -> PackedColorArray { call_ret := cast(*PackedColorArray) sys_call("Polygon2D", "get_vertex_colors", 1392750486, PackedColorArray, main.p_object); return call_ret.*; }  // 9
set_texture :: (main: *Polygon2D, texture: Texture2D) { sys_call("Polygon2D", "set_texture", 4051416890, Nil, main.p_object, texture);  }  // 10
get_texture :: (main: *Polygon2D) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("Polygon2D", "get_texture", 3635182373, Texture2D, main.p_object); return call_ret; }  // 11
set_texture_offset :: (main: *Polygon2D, texture_offset: Vector2) { sys_call("Polygon2D", "set_texture_offset", 743155724, Nil, main.p_object, texture_offset);  }  // 12
get_texture_offset :: (main: *Polygon2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("Polygon2D", "get_texture_offset", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 13
set_texture_rotation :: (main: *Polygon2D, texture_rotation: float) { sys_call("Polygon2D", "set_texture_rotation", 373806689, Nil, main.p_object, texture_rotation);  }  // 14
get_texture_rotation :: (main: *Polygon2D) -> float { call_ret := cast(*float) sys_call("Polygon2D", "get_texture_rotation", 1740695150, float, main.p_object); return call_ret.*; }  // 15
set_texture_scale :: (main: *Polygon2D, texture_scale: Vector2) { sys_call("Polygon2D", "set_texture_scale", 743155724, Nil, main.p_object, texture_scale);  }  // 16
get_texture_scale :: (main: *Polygon2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("Polygon2D", "get_texture_scale", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 17
set_invert_enabled :: (main: *Polygon2D, invert: bool) { sys_call("Polygon2D", "set_invert_enabled", 2586408642, Nil, main.p_object, invert);  }  // 18
get_invert_enabled :: (main: *Polygon2D) -> bool { call_ret := cast(*bool) sys_call("Polygon2D", "get_invert_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 19
set_antialiased :: (main: *Polygon2D, antialiased: bool) { sys_call("Polygon2D", "set_antialiased", 2586408642, Nil, main.p_object, antialiased);  }  // 20
get_antialiased :: (main: *Polygon2D) -> bool { call_ret := cast(*bool) sys_call("Polygon2D", "get_antialiased", 36873697, bool, main.p_object); return call_ret.*; }  // 21
set_invert_border :: (main: *Polygon2D, invert_border: float) { sys_call("Polygon2D", "set_invert_border", 373806689, Nil, main.p_object, invert_border);  }  // 22
get_invert_border :: (main: *Polygon2D) -> float { call_ret := cast(*float) sys_call("Polygon2D", "get_invert_border", 1740695150, float, main.p_object); return call_ret.*; }  // 23
set_offset :: (main: *Polygon2D, offset: Vector2) { sys_call("Polygon2D", "set_offset", 743155724, Nil, main.p_object, offset);  }  // 24
get_offset :: (main: *Polygon2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("Polygon2D", "get_offset", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 25
add_bone :: (main: *Polygon2D, path: string, weights: PackedFloat32Array) { sys_call("Polygon2D", "add_bone", 703042815, Nil, main.p_object, path, weights);  }  // 26
get_bone_count :: (main: *Polygon2D) -> int { call_ret := cast(*int) sys_call("Polygon2D", "get_bone_count", 3905245786, int, main.p_object); return call_ret.*; }  // 27
get_bone_path :: (main: *Polygon2D, index: int) -> NodePath { call_ret := cast(*NodePath) sys_call("Polygon2D", "get_bone_path", 408788394, NodePath, main.p_object, index); return call_ret.*; }  // 28
get_bone_weights :: (main: *Polygon2D, index: int) -> PackedFloat32Array { call_ret := cast(*PackedFloat32Array) sys_call("Polygon2D", "get_bone_weights", 1542882410, PackedFloat32Array, main.p_object, index); return call_ret.*; }  // 29
erase_bone :: (main: *Polygon2D, index: int) { sys_call("Polygon2D", "erase_bone", 1286410249, Nil, main.p_object, index);  }  // 30
clear_bones :: (main: *Polygon2D) { sys_call("Polygon2D", "clear_bones", 3218959716, Nil, main.p_object);  }  // 31
set_bone_path :: (main: *Polygon2D, index: int, path: string) { sys_call("Polygon2D", "set_bone_path", 2761262315, Nil, main.p_object, index, path);  }  // 32
set_bone_weights :: (main: *Polygon2D, index: int, weights: PackedFloat32Array) { sys_call("Polygon2D", "set_bone_weights", 1345852415, Nil, main.p_object, index, weights);  }  // 33
set_skeleton :: (main: *Polygon2D, skeleton: string) { sys_call("Polygon2D", "set_skeleton", 1348162250, Nil, main.p_object, skeleton);  }  // 34
get_skeleton :: (main: *Polygon2D) -> NodePath { call_ret := cast(*NodePath) sys_call("Polygon2D", "get_skeleton", 4075236667, NodePath, main.p_object); return call_ret.*; }  // 35
set_internal_vertex_count :: (main: *Polygon2D, internal_vertex_count: int) { sys_call("Polygon2D", "set_internal_vertex_count", 1286410249, Nil, main.p_object, internal_vertex_count);  }  // 36
get_internal_vertex_count :: (main: *Polygon2D) -> int { call_ret := cast(*int) sys_call("Polygon2D", "get_internal_vertex_count", 3905245786, int, main.p_object); return call_ret.*; }  // 37

set_polygon :: (main: *PolygonOccluder3D, polygon: PackedVector2Array) { sys_call("PolygonOccluder3D", "set_polygon", 1509147220, Nil, main.p_object, polygon);  }  // 0
get_polygon :: (main: *PolygonOccluder3D) -> PackedVector2Array { call_ret := cast(*PackedVector2Array) sys_call("PolygonOccluder3D", "get_polygon", 2961356807, PackedVector2Array, main.p_object); return call_ret.*; }  // 1

setup :: (main: *PolygonPathFinder, points: PackedVector2Array, connections: PackedInt32Array) { sys_call("PolygonPathFinder", "setup", 3251786936, Nil, main.p_object, points, connections);  }  // 0
find_path :: (main: *PolygonPathFinder, from: Vector2, to: Vector2) -> PackedVector2Array { call_ret := cast(*PackedVector2Array) sys_call("PolygonPathFinder", "find_path", 1562168077, PackedVector2Array, main.p_object, from, to); return call_ret.*; }  // 1
get_intersections :: (main: *PolygonPathFinder, from: Vector2, to: Vector2) -> PackedVector2Array { call_ret := cast(*PackedVector2Array) sys_call("PolygonPathFinder", "get_intersections", 3932192302, PackedVector2Array, main.p_object, from, to); return call_ret.*; }  // 2
get_closest_point :: (main: *PolygonPathFinder, point: Vector2) -> Vector2 { call_ret := cast(*Vector2) sys_call("PolygonPathFinder", "get_closest_point", 2656412154, Vector2, main.p_object, point); return call_ret.*; }  // 3
is_point_inside :: (main: *PolygonPathFinder, point: Vector2) -> bool { call_ret := cast(*bool) sys_call("PolygonPathFinder", "is_point_inside", 556197845, bool, main.p_object, point); return call_ret.*; }  // 4
set_point_penalty :: (main: *PolygonPathFinder, idx: int, penalty: float) { sys_call("PolygonPathFinder", "set_point_penalty", 1602489585, Nil, main.p_object, idx, penalty);  }  // 5
get_point_penalty :: (main: *PolygonPathFinder, idx: int) -> float { call_ret := cast(*float) sys_call("PolygonPathFinder", "get_point_penalty", 2339986948, float, main.p_object, idx); return call_ret.*; }  // 6
get_bounds :: (main: *PolygonPathFinder) -> Rect2 { call_ret := cast(*Rect2) sys_call("PolygonPathFinder", "get_bounds", 1639390495, Rect2, main.p_object); return call_ret.*; }  // 7


activate_item_by_event :: (main: *PopupMenu, event: InputEvent) -> bool { call_ret := cast(*bool) sys_call("PopupMenu", "activate_item_by_event", 3716412023, bool, main.p_object, event); return call_ret.*; }  // 0
set_prefer_native_menu :: (main: *PopupMenu, enabled: bool) { sys_call("PopupMenu", "set_prefer_native_menu", 2586408642, Nil, main.p_object, enabled);  }  // 1
is_prefer_native_menu :: (main: *PopupMenu) -> bool { call_ret := cast(*bool) sys_call("PopupMenu", "is_prefer_native_menu", 36873697, bool, main.p_object); return call_ret.*; }  // 2
is_native_menu :: (main: *PopupMenu) -> bool { call_ret := cast(*bool) sys_call("PopupMenu", "is_native_menu", 36873697, bool, main.p_object); return call_ret.*; }  // 3
add_item :: (main: *PopupMenu, label: string) { sys_call("PopupMenu", "add_item", 3674230041, Nil, main.p_object, label);  }  // 4
add_icon_item :: (main: *PopupMenu, texture: Texture2D, label: string) { sys_call("PopupMenu", "add_icon_item", 1086190128, Nil, main.p_object, texture, label);  }  // 5
add_check_item :: (main: *PopupMenu, label: string) { sys_call("PopupMenu", "add_check_item", 3674230041, Nil, main.p_object, label);  }  // 6
add_icon_check_item :: (main: *PopupMenu, texture: Texture2D, label: string) { sys_call("PopupMenu", "add_icon_check_item", 1086190128, Nil, main.p_object, texture, label);  }  // 7
add_radio_check_item :: (main: *PopupMenu, label: string) { sys_call("PopupMenu", "add_radio_check_item", 3674230041, Nil, main.p_object, label);  }  // 8
add_icon_radio_check_item :: (main: *PopupMenu, texture: Texture2D, label: string) { sys_call("PopupMenu", "add_icon_radio_check_item", 1086190128, Nil, main.p_object, texture, label);  }  // 9
add_multistate_item :: (main: *PopupMenu, label: string, max_states: int) { sys_call("PopupMenu", "add_multistate_item", 150780458, Nil, main.p_object, label, max_states);  }  // 10
add_shortcut :: (main: *PopupMenu, shortcut: Shortcut) { sys_call("PopupMenu", "add_shortcut", 3451850107, Nil, main.p_object, shortcut);  }  // 11
add_icon_shortcut :: (main: *PopupMenu, texture: Texture2D, shortcut: Shortcut) { sys_call("PopupMenu", "add_icon_shortcut", 2997871092, Nil, main.p_object, texture, shortcut);  }  // 12
add_check_shortcut :: (main: *PopupMenu, shortcut: Shortcut) { sys_call("PopupMenu", "add_check_shortcut", 1642193386, Nil, main.p_object, shortcut);  }  // 13
add_icon_check_shortcut :: (main: *PopupMenu, texture: Texture2D, shortcut: Shortcut) { sys_call("PopupMenu", "add_icon_check_shortcut", 3856247530, Nil, main.p_object, texture, shortcut);  }  // 14
add_radio_check_shortcut :: (main: *PopupMenu, shortcut: Shortcut) { sys_call("PopupMenu", "add_radio_check_shortcut", 1642193386, Nil, main.p_object, shortcut);  }  // 15
add_icon_radio_check_shortcut :: (main: *PopupMenu, texture: Texture2D, shortcut: Shortcut) { sys_call("PopupMenu", "add_icon_radio_check_shortcut", 3856247530, Nil, main.p_object, texture, shortcut);  }  // 16
add_submenu_item :: (main: *PopupMenu, label: string, submenu: string) { sys_call("PopupMenu", "add_submenu_item", 2979222410, Nil, main.p_object, label, submenu);  }  // 17
add_submenu_node_item :: (main: *PopupMenu, label: string, submenu: PopupMenu) { sys_call("PopupMenu", "add_submenu_node_item", 1325455216, Nil, main.p_object, label, submenu);  }  // 18
set_item_text :: (main: *PopupMenu, index: int, text: string) { sys_call("PopupMenu", "set_item_text", 501894301, Nil, main.p_object, index, text);  }  // 19
set_item_text_direction :: (main: *PopupMenu, index: int, direction: Control.TextDirection) { sys_call("PopupMenu", "set_item_text_direction", 1707680378, Nil, main.p_object, index, direction);  }  // 20
set_item_language :: (main: *PopupMenu, index: int, language: string) { sys_call("PopupMenu", "set_item_language", 501894301, Nil, main.p_object, index, language);  }  // 21
set_item_icon :: (main: *PopupMenu, index: int, icon: Texture2D) { sys_call("PopupMenu", "set_item_icon", 666127730, Nil, main.p_object, index, icon);  }  // 22
set_item_icon_max_width :: (main: *PopupMenu, index: int, width: int) { sys_call("PopupMenu", "set_item_icon_max_width", 3937882851, Nil, main.p_object, index, width);  }  // 23
set_item_icon_modulate :: (main: *PopupMenu, index: int, modulate: Color) { sys_call("PopupMenu", "set_item_icon_modulate", 2878471219, Nil, main.p_object, index, modulate);  }  // 24
set_item_checked :: (main: *PopupMenu, index: int, checked: bool) { sys_call("PopupMenu", "set_item_checked", 300928843, Nil, main.p_object, index, checked);  }  // 25
set_item_id :: (main: *PopupMenu, index: int, id: int) { sys_call("PopupMenu", "set_item_id", 3937882851, Nil, main.p_object, index, id);  }  // 26
set_item_accelerator :: (main: *PopupMenu, index: int, accel: Key) { sys_call("PopupMenu", "set_item_accelerator", 2992817551, Nil, main.p_object, index, accel);  }  // 27
set_item_metadata :: (main: *PopupMenu, index: int, metadata: Variant) { sys_call("PopupMenu", "set_item_metadata", 2152698145, Nil, main.p_object, index, metadata);  }  // 28
set_item_disabled :: (main: *PopupMenu, index: int, disabled: bool) { sys_call("PopupMenu", "set_item_disabled", 300928843, Nil, main.p_object, index, disabled);  }  // 29
set_item_submenu :: (main: *PopupMenu, index: int, submenu: string) { sys_call("PopupMenu", "set_item_submenu", 501894301, Nil, main.p_object, index, submenu);  }  // 30
set_item_submenu_node :: (main: *PopupMenu, index: int, submenu: PopupMenu) { sys_call("PopupMenu", "set_item_submenu_node", 1068370740, Nil, main.p_object, index, submenu);  }  // 31
set_item_as_separator :: (main: *PopupMenu, index: int, enable: bool) { sys_call("PopupMenu", "set_item_as_separator", 300928843, Nil, main.p_object, index, enable);  }  // 32
set_item_as_checkable :: (main: *PopupMenu, index: int, enable: bool) { sys_call("PopupMenu", "set_item_as_checkable", 300928843, Nil, main.p_object, index, enable);  }  // 33
set_item_as_radio_checkable :: (main: *PopupMenu, index: int, enable: bool) { sys_call("PopupMenu", "set_item_as_radio_checkable", 300928843, Nil, main.p_object, index, enable);  }  // 34
set_item_tooltip :: (main: *PopupMenu, index: int, tooltip: string) { sys_call("PopupMenu", "set_item_tooltip", 501894301, Nil, main.p_object, index, tooltip);  }  // 35
set_item_shortcut :: (main: *PopupMenu, index: int, shortcut: Shortcut) { sys_call("PopupMenu", "set_item_shortcut", 825127832, Nil, main.p_object, index, shortcut);  }  // 36
set_item_indent :: (main: *PopupMenu, index: int, indent: int) { sys_call("PopupMenu", "set_item_indent", 3937882851, Nil, main.p_object, index, indent);  }  // 37
set_item_multistate :: (main: *PopupMenu, index: int, state: int) { sys_call("PopupMenu", "set_item_multistate", 3937882851, Nil, main.p_object, index, state);  }  // 38
set_item_multistate_max :: (main: *PopupMenu, index: int, max_states: int) { sys_call("PopupMenu", "set_item_multistate_max", 3937882851, Nil, main.p_object, index, max_states);  }  // 39
set_item_shortcut_disabled :: (main: *PopupMenu, index: int, disabled: bool) { sys_call("PopupMenu", "set_item_shortcut_disabled", 300928843, Nil, main.p_object, index, disabled);  }  // 40
toggle_item_checked :: (main: *PopupMenu, index: int) { sys_call("PopupMenu", "toggle_item_checked", 1286410249, Nil, main.p_object, index);  }  // 41
toggle_item_multistate :: (main: *PopupMenu, index: int) { sys_call("PopupMenu", "toggle_item_multistate", 1286410249, Nil, main.p_object, index);  }  // 42
get_item_text :: (main: *PopupMenu, index: int) -> gstring { call_ret := cast(*gstring) sys_call("PopupMenu", "get_item_text", 844755477, gstring, main.p_object, index); return call_ret.*; }  // 43
get_item_text_direction :: (main: *PopupMenu, index: int) -> Control.TextDirection { call_ret := cast(*Control.TextDirection) sys_call("PopupMenu", "get_item_text_direction", 4235602388, Control.TextDirection, main.p_object, index); return call_ret.*; }  // 44
get_item_language :: (main: *PopupMenu, index: int) -> gstring { call_ret := cast(*gstring) sys_call("PopupMenu", "get_item_language", 844755477, gstring, main.p_object, index); return call_ret.*; }  // 45
get_item_icon :: (main: *PopupMenu, index: int) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("PopupMenu", "get_item_icon", 3536238170, Texture2D, main.p_object, index); return call_ret; }  // 46
get_item_icon_max_width :: (main: *PopupMenu, index: int) -> int { call_ret := cast(*int) sys_call("PopupMenu", "get_item_icon_max_width", 923996154, int, main.p_object, index); return call_ret.*; }  // 47
get_item_icon_modulate :: (main: *PopupMenu, index: int) -> Color { call_ret := cast(*Color) sys_call("PopupMenu", "get_item_icon_modulate", 3457211756, Color, main.p_object, index); return call_ret.*; }  // 48
is_item_checked :: (main: *PopupMenu, index: int) -> bool { call_ret := cast(*bool) sys_call("PopupMenu", "is_item_checked", 1116898809, bool, main.p_object, index); return call_ret.*; }  // 49
get_item_id :: (main: *PopupMenu, index: int) -> int { call_ret := cast(*int) sys_call("PopupMenu", "get_item_id", 923996154, int, main.p_object, index); return call_ret.*; }  // 50
get_item_index :: (main: *PopupMenu, id: int) -> int { call_ret := cast(*int) sys_call("PopupMenu", "get_item_index", 923996154, int, main.p_object, id); return call_ret.*; }  // 51
get_item_accelerator :: (main: *PopupMenu, index: int) -> Key { call_ret := cast(*Key) sys_call("PopupMenu", "get_item_accelerator", 253789942, Key, main.p_object, index); return call_ret.*; }  // 52
get_item_metadata :: (main: *PopupMenu, index: int) -> Variant { call_ret := cast(*Variant) sys_call("PopupMenu", "get_item_metadata", 4227898402, Variant, main.p_object, index); return call_ret.*; }  // 53
is_item_disabled :: (main: *PopupMenu, index: int) -> bool { call_ret := cast(*bool) sys_call("PopupMenu", "is_item_disabled", 1116898809, bool, main.p_object, index); return call_ret.*; }  // 54
get_item_submenu :: (main: *PopupMenu, index: int) -> gstring { call_ret := cast(*gstring) sys_call("PopupMenu", "get_item_submenu", 844755477, gstring, main.p_object, index); return call_ret.*; }  // 55
get_item_submenu_node :: (main: *PopupMenu, index: int) -> *PopupMenu { call_ret := cast(*PopupMenu) sys_call("PopupMenu", "get_item_submenu_node", 2100501353, PopupMenu, main.p_object, index); return call_ret; }  // 56
is_item_separator :: (main: *PopupMenu, index: int) -> bool { call_ret := cast(*bool) sys_call("PopupMenu", "is_item_separator", 1116898809, bool, main.p_object, index); return call_ret.*; }  // 57
is_item_checkable :: (main: *PopupMenu, index: int) -> bool { call_ret := cast(*bool) sys_call("PopupMenu", "is_item_checkable", 1116898809, bool, main.p_object, index); return call_ret.*; }  // 58
is_item_radio_checkable :: (main: *PopupMenu, index: int) -> bool { call_ret := cast(*bool) sys_call("PopupMenu", "is_item_radio_checkable", 1116898809, bool, main.p_object, index); return call_ret.*; }  // 59
is_item_shortcut_disabled :: (main: *PopupMenu, index: int) -> bool { call_ret := cast(*bool) sys_call("PopupMenu", "is_item_shortcut_disabled", 1116898809, bool, main.p_object, index); return call_ret.*; }  // 60
get_item_tooltip :: (main: *PopupMenu, index: int) -> gstring { call_ret := cast(*gstring) sys_call("PopupMenu", "get_item_tooltip", 844755477, gstring, main.p_object, index); return call_ret.*; }  // 61
get_item_shortcut :: (main: *PopupMenu, index: int) -> *Shortcut { call_ret := cast(*Shortcut) sys_call("PopupMenu", "get_item_shortcut", 1449483325, Shortcut, main.p_object, index); return call_ret; }  // 62
get_item_indent :: (main: *PopupMenu, index: int) -> int { call_ret := cast(*int) sys_call("PopupMenu", "get_item_indent", 923996154, int, main.p_object, index); return call_ret.*; }  // 63
get_item_multistate_max :: (main: *PopupMenu, index: int) -> int { call_ret := cast(*int) sys_call("PopupMenu", "get_item_multistate_max", 923996154, int, main.p_object, index); return call_ret.*; }  // 64
get_item_multistate :: (main: *PopupMenu, index: int) -> int { call_ret := cast(*int) sys_call("PopupMenu", "get_item_multistate", 923996154, int, main.p_object, index); return call_ret.*; }  // 65
set_focused_item :: (main: *PopupMenu, index: int) { sys_call("PopupMenu", "set_focused_item", 1286410249, Nil, main.p_object, index);  }  // 66
get_focused_item :: (main: *PopupMenu) -> int { call_ret := cast(*int) sys_call("PopupMenu", "get_focused_item", 3905245786, int, main.p_object); return call_ret.*; }  // 67
set_item_count :: (main: *PopupMenu, count: int) { sys_call("PopupMenu", "set_item_count", 1286410249, Nil, main.p_object, count);  }  // 68
get_item_count :: (main: *PopupMenu) -> int { call_ret := cast(*int) sys_call("PopupMenu", "get_item_count", 3905245786, int, main.p_object); return call_ret.*; }  // 69
scroll_to_item :: (main: *PopupMenu, index: int) { sys_call("PopupMenu", "scroll_to_item", 1286410249, Nil, main.p_object, index);  }  // 70
remove_item :: (main: *PopupMenu, index: int) { sys_call("PopupMenu", "remove_item", 1286410249, Nil, main.p_object, index);  }  // 71
add_separator :: (main: *PopupMenu) { sys_call("PopupMenu", "add_separator", 2266703459, Nil, main.p_object);  }  // 72
clear :: (main: *PopupMenu) { sys_call("PopupMenu", "clear", 107499316, Nil, main.p_object);  }  // 73
set_hide_on_item_selection :: (main: *PopupMenu, enable: bool) { sys_call("PopupMenu", "set_hide_on_item_selection", 2586408642, Nil, main.p_object, enable);  }  // 74
is_hide_on_item_selection :: (main: *PopupMenu) -> bool { call_ret := cast(*bool) sys_call("PopupMenu", "is_hide_on_item_selection", 36873697, bool, main.p_object); return call_ret.*; }  // 75
set_hide_on_checkable_item_selection :: (main: *PopupMenu, enable: bool) { sys_call("PopupMenu", "set_hide_on_checkable_item_selection", 2586408642, Nil, main.p_object, enable);  }  // 76
is_hide_on_checkable_item_selection :: (main: *PopupMenu) -> bool { call_ret := cast(*bool) sys_call("PopupMenu", "is_hide_on_checkable_item_selection", 36873697, bool, main.p_object); return call_ret.*; }  // 77
set_hide_on_state_item_selection :: (main: *PopupMenu, enable: bool) { sys_call("PopupMenu", "set_hide_on_state_item_selection", 2586408642, Nil, main.p_object, enable);  }  // 78
is_hide_on_state_item_selection :: (main: *PopupMenu) -> bool { call_ret := cast(*bool) sys_call("PopupMenu", "is_hide_on_state_item_selection", 36873697, bool, main.p_object); return call_ret.*; }  // 79
set_submenu_popup_delay :: (main: *PopupMenu, seconds: float) { sys_call("PopupMenu", "set_submenu_popup_delay", 373806689, Nil, main.p_object, seconds);  }  // 80
get_submenu_popup_delay :: (main: *PopupMenu) -> float { call_ret := cast(*float) sys_call("PopupMenu", "get_submenu_popup_delay", 1740695150, float, main.p_object); return call_ret.*; }  // 81
set_allow_search :: (main: *PopupMenu, allow: bool) { sys_call("PopupMenu", "set_allow_search", 2586408642, Nil, main.p_object, allow);  }  // 82
get_allow_search :: (main: *PopupMenu) -> bool { call_ret := cast(*bool) sys_call("PopupMenu", "get_allow_search", 36873697, bool, main.p_object); return call_ret.*; }  // 83
is_system_menu :: (main: *PopupMenu) -> bool { call_ret := cast(*bool) sys_call("PopupMenu", "is_system_menu", 36873697, bool, main.p_object); return call_ret.*; }  // 84
set_system_menu :: (main: *PopupMenu, system_menu_id: NativeMenu.SystemMenus) { sys_call("PopupMenu", "set_system_menu", 600639674, Nil, main.p_object, system_menu_id);  }  // 85
get_system_menu :: (main: *PopupMenu) -> NativeMenu.SystemMenus { call_ret := cast(*NativeMenu.SystemMenus) sys_call("PopupMenu", "get_system_menu", 1222557358, NativeMenu.SystemMenus, main.p_object); return call_ret.*; }  // 86


create_from_image :: (main: *PortableCompressedTexture2D, image: Image, compression_mode: PortableCompressedTexture2D.CompressionMode) { sys_call("PortableCompressedTexture2D", "create_from_image", 3679243433, Nil, main.p_object, image, compression_mode);  }  // 0
get_format :: (main: *PortableCompressedTexture2D) -> Image.Format { call_ret := cast(*Image.Format) sys_call("PortableCompressedTexture2D", "get_format", 3847873762, Image.Format, main.p_object); return call_ret.*; }  // 1
get_compression_mode :: (main: *PortableCompressedTexture2D) -> PortableCompressedTexture2D.CompressionMode { call_ret := cast(*PortableCompressedTexture2D.CompressionMode) sys_call("PortableCompressedTexture2D", "get_compression_mode", 3265612739, PortableCompressedTexture2D.CompressionMode, main.p_object); return call_ret.*; }  // 2
set_size_override :: (main: *PortableCompressedTexture2D, size: Vector2) { sys_call("PortableCompressedTexture2D", "set_size_override", 743155724, Nil, main.p_object, size);  }  // 3
get_size_override :: (main: *PortableCompressedTexture2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("PortableCompressedTexture2D", "get_size_override", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 4
set_keep_compressed_buffer :: (main: *PortableCompressedTexture2D, keep: bool) { sys_call("PortableCompressedTexture2D", "set_keep_compressed_buffer", 2586408642, Nil, main.p_object, keep);  }  // 5
is_keeping_compressed_buffer :: (main: *PortableCompressedTexture2D) -> bool { call_ret := cast(*bool) sys_call("PortableCompressedTexture2D", "is_keeping_compressed_buffer", 36873697, bool, main.p_object); return call_ret.*; }  // 6
set_keep_all_compressed_buffers :: (main: *PortableCompressedTexture2D, keep: bool) { sys_call("PortableCompressedTexture2D", "set_keep_all_compressed_buffers", 2586408642, Nil, main.p_object, keep);  }  // 7
is_keeping_all_compressed_buffers :: (main: *PortableCompressedTexture2D) -> bool { call_ret := cast(*bool) sys_call("PortableCompressedTexture2D", "is_keeping_all_compressed_buffers", 2240911060, bool, main.p_object); return call_ret.*; }  // 8

set_material :: (main: *PrimitiveMesh, material: Material) { sys_call("PrimitiveMesh", "set_material", 2757459619, Nil, main.p_object, material);  }  // 1
get_material :: (main: *PrimitiveMesh) -> *Material { call_ret := cast(*Material) sys_call("PrimitiveMesh", "get_material", 5934680, Material, main.p_object); return call_ret; }  // 2
get_mesh_arrays :: (main: *PrimitiveMesh) -> Array { call_ret := cast(*Array) sys_call("PrimitiveMesh", "get_mesh_arrays", 3995934104, Array, main.p_object); return call_ret.*; }  // 3
set_custom_aabb :: (main: *PrimitiveMesh, aabb: AABB) { sys_call("PrimitiveMesh", "set_custom_aabb", 259215842, Nil, main.p_object, aabb);  }  // 4
get_custom_aabb :: (main: *PrimitiveMesh) -> AABB { call_ret := cast(*AABB) sys_call("PrimitiveMesh", "get_custom_aabb", 1068685055, AABB, main.p_object); return call_ret.*; }  // 5
set_flip_faces :: (main: *PrimitiveMesh, flip_faces: bool) { sys_call("PrimitiveMesh", "set_flip_faces", 2586408642, Nil, main.p_object, flip_faces);  }  // 6
get_flip_faces :: (main: *PrimitiveMesh) -> bool { call_ret := cast(*bool) sys_call("PrimitiveMesh", "get_flip_faces", 36873697, bool, main.p_object); return call_ret.*; }  // 7
set_add_uv2 :: (main: *PrimitiveMesh, add_uv2: bool) { sys_call("PrimitiveMesh", "set_add_uv2", 2586408642, Nil, main.p_object, add_uv2);  }  // 8
get_add_uv2 :: (main: *PrimitiveMesh) -> bool { call_ret := cast(*bool) sys_call("PrimitiveMesh", "get_add_uv2", 36873697, bool, main.p_object); return call_ret.*; }  // 9
set_uv2_padding :: (main: *PrimitiveMesh, uv2_padding: float) { sys_call("PrimitiveMesh", "set_uv2_padding", 373806689, Nil, main.p_object, uv2_padding);  }  // 10
get_uv2_padding :: (main: *PrimitiveMesh) -> float { call_ret := cast(*float) sys_call("PrimitiveMesh", "get_uv2_padding", 1740695150, float, main.p_object); return call_ret.*; }  // 11
request_update :: (main: *PrimitiveMesh) { sys_call("PrimitiveMesh", "request_update", 3218959716, Nil, main.p_object);  }  // 12

set_left_to_right :: (main: *PrismMesh, left_to_right: float) { sys_call("PrismMesh", "set_left_to_right", 373806689, Nil, main.p_object, left_to_right);  }  // 0
get_left_to_right :: (main: *PrismMesh) -> float { call_ret := cast(*float) sys_call("PrismMesh", "get_left_to_right", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_size :: (main: *PrismMesh, size: Vector3) { sys_call("PrismMesh", "set_size", 3460891852, Nil, main.p_object, size);  }  // 2
get_size :: (main: *PrismMesh) -> Vector3 { call_ret := cast(*Vector3) sys_call("PrismMesh", "get_size", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 3
set_subdivide_width :: (main: *PrismMesh, segments: int) { sys_call("PrismMesh", "set_subdivide_width", 1286410249, Nil, main.p_object, segments);  }  // 4
get_subdivide_width :: (main: *PrismMesh) -> int { call_ret := cast(*int) sys_call("PrismMesh", "get_subdivide_width", 3905245786, int, main.p_object); return call_ret.*; }  // 5
set_subdivide_height :: (main: *PrismMesh, segments: int) { sys_call("PrismMesh", "set_subdivide_height", 1286410249, Nil, main.p_object, segments);  }  // 6
get_subdivide_height :: (main: *PrismMesh) -> int { call_ret := cast(*int) sys_call("PrismMesh", "get_subdivide_height", 3905245786, int, main.p_object); return call_ret.*; }  // 7
set_subdivide_depth :: (main: *PrismMesh, segments: int) { sys_call("PrismMesh", "set_subdivide_depth", 1286410249, Nil, main.p_object, segments);  }  // 8
get_subdivide_depth :: (main: *PrismMesh) -> int { call_ret := cast(*int) sys_call("PrismMesh", "get_subdivide_depth", 3905245786, int, main.p_object); return call_ret.*; }  // 9

set_sky_top_color :: (main: *ProceduralSkyMaterial, color: Color) { sys_call("ProceduralSkyMaterial", "set_sky_top_color", 2920490490, Nil, main.p_object, color);  }  // 0
get_sky_top_color :: (main: *ProceduralSkyMaterial) -> Color { call_ret := cast(*Color) sys_call("ProceduralSkyMaterial", "get_sky_top_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 1
set_sky_horizon_color :: (main: *ProceduralSkyMaterial, color: Color) { sys_call("ProceduralSkyMaterial", "set_sky_horizon_color", 2920490490, Nil, main.p_object, color);  }  // 2
get_sky_horizon_color :: (main: *ProceduralSkyMaterial) -> Color { call_ret := cast(*Color) sys_call("ProceduralSkyMaterial", "get_sky_horizon_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 3
set_sky_curve :: (main: *ProceduralSkyMaterial, curve: float) { sys_call("ProceduralSkyMaterial", "set_sky_curve", 373806689, Nil, main.p_object, curve);  }  // 4
get_sky_curve :: (main: *ProceduralSkyMaterial) -> float { call_ret := cast(*float) sys_call("ProceduralSkyMaterial", "get_sky_curve", 1740695150, float, main.p_object); return call_ret.*; }  // 5
set_sky_energy_multiplier :: (main: *ProceduralSkyMaterial, multiplier: float) { sys_call("ProceduralSkyMaterial", "set_sky_energy_multiplier", 373806689, Nil, main.p_object, multiplier);  }  // 6
get_sky_energy_multiplier :: (main: *ProceduralSkyMaterial) -> float { call_ret := cast(*float) sys_call("ProceduralSkyMaterial", "get_sky_energy_multiplier", 1740695150, float, main.p_object); return call_ret.*; }  // 7
set_sky_cover :: (main: *ProceduralSkyMaterial, sky_cover: Texture2D) { sys_call("ProceduralSkyMaterial", "set_sky_cover", 4051416890, Nil, main.p_object, sky_cover);  }  // 8
get_sky_cover :: (main: *ProceduralSkyMaterial) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("ProceduralSkyMaterial", "get_sky_cover", 3635182373, Texture2D, main.p_object); return call_ret; }  // 9
set_sky_cover_modulate :: (main: *ProceduralSkyMaterial, color: Color) { sys_call("ProceduralSkyMaterial", "set_sky_cover_modulate", 2920490490, Nil, main.p_object, color);  }  // 10
get_sky_cover_modulate :: (main: *ProceduralSkyMaterial) -> Color { call_ret := cast(*Color) sys_call("ProceduralSkyMaterial", "get_sky_cover_modulate", 3444240500, Color, main.p_object); return call_ret.*; }  // 11
set_ground_bottom_color :: (main: *ProceduralSkyMaterial, color: Color) { sys_call("ProceduralSkyMaterial", "set_ground_bottom_color", 2920490490, Nil, main.p_object, color);  }  // 12
get_ground_bottom_color :: (main: *ProceduralSkyMaterial) -> Color { call_ret := cast(*Color) sys_call("ProceduralSkyMaterial", "get_ground_bottom_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 13
set_ground_horizon_color :: (main: *ProceduralSkyMaterial, color: Color) { sys_call("ProceduralSkyMaterial", "set_ground_horizon_color", 2920490490, Nil, main.p_object, color);  }  // 14
get_ground_horizon_color :: (main: *ProceduralSkyMaterial) -> Color { call_ret := cast(*Color) sys_call("ProceduralSkyMaterial", "get_ground_horizon_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 15
set_ground_curve :: (main: *ProceduralSkyMaterial, curve: float) { sys_call("ProceduralSkyMaterial", "set_ground_curve", 373806689, Nil, main.p_object, curve);  }  // 16
get_ground_curve :: (main: *ProceduralSkyMaterial) -> float { call_ret := cast(*float) sys_call("ProceduralSkyMaterial", "get_ground_curve", 1740695150, float, main.p_object); return call_ret.*; }  // 17
set_ground_energy_multiplier :: (main: *ProceduralSkyMaterial, energy: float) { sys_call("ProceduralSkyMaterial", "set_ground_energy_multiplier", 373806689, Nil, main.p_object, energy);  }  // 18
get_ground_energy_multiplier :: (main: *ProceduralSkyMaterial) -> float { call_ret := cast(*float) sys_call("ProceduralSkyMaterial", "get_ground_energy_multiplier", 1740695150, float, main.p_object); return call_ret.*; }  // 19
set_sun_angle_max :: (main: *ProceduralSkyMaterial, degrees: float) { sys_call("ProceduralSkyMaterial", "set_sun_angle_max", 373806689, Nil, main.p_object, degrees);  }  // 20
get_sun_angle_max :: (main: *ProceduralSkyMaterial) -> float { call_ret := cast(*float) sys_call("ProceduralSkyMaterial", "get_sun_angle_max", 1740695150, float, main.p_object); return call_ret.*; }  // 21
set_sun_curve :: (main: *ProceduralSkyMaterial, curve: float) { sys_call("ProceduralSkyMaterial", "set_sun_curve", 373806689, Nil, main.p_object, curve);  }  // 22
get_sun_curve :: (main: *ProceduralSkyMaterial) -> float { call_ret := cast(*float) sys_call("ProceduralSkyMaterial", "get_sun_curve", 1740695150, float, main.p_object); return call_ret.*; }  // 23
set_use_debanding :: (main: *ProceduralSkyMaterial, use_debanding: bool) { sys_call("ProceduralSkyMaterial", "set_use_debanding", 2586408642, Nil, main.p_object, use_debanding);  }  // 24
get_use_debanding :: (main: *ProceduralSkyMaterial) -> bool { call_ret := cast(*bool) sys_call("ProceduralSkyMaterial", "get_use_debanding", 36873697, bool, main.p_object); return call_ret.*; }  // 25
set_energy_multiplier :: (main: *ProceduralSkyMaterial, multiplier: float) { sys_call("ProceduralSkyMaterial", "set_energy_multiplier", 373806689, Nil, main.p_object, multiplier);  }  // 26
get_energy_multiplier :: (main: *ProceduralSkyMaterial) -> float { call_ret := cast(*float) sys_call("ProceduralSkyMaterial", "get_energy_multiplier", 1740695150, float, main.p_object); return call_ret.*; }  // 27

set_fill_mode :: (main: *ProgressBar, mode: int) { sys_call("ProgressBar", "set_fill_mode", 1286410249, Nil, main.p_object, mode);  }  // 0
get_fill_mode :: (main: *ProgressBar) -> int { call_ret := cast(*int) sys_call("ProgressBar", "get_fill_mode", 2455072627, int, main.p_object); return call_ret.*; }  // 1
set_show_percentage :: (main: *ProgressBar, visible: bool) { sys_call("ProgressBar", "set_show_percentage", 2586408642, Nil, main.p_object, visible);  }  // 2
is_percentage_shown :: (main: *ProgressBar) -> bool { call_ret := cast(*bool) sys_call("ProgressBar", "is_percentage_shown", 36873697, bool, main.p_object); return call_ret.*; }  // 3
set_indeterminate :: (main: *ProgressBar, indeterminate: bool) { sys_call("ProgressBar", "set_indeterminate", 2586408642, Nil, main.p_object, indeterminate);  }  // 4
is_indeterminate :: (main: *ProgressBar) -> bool { call_ret := cast(*bool) sys_call("ProgressBar", "is_indeterminate", 36873697, bool, main.p_object); return call_ret.*; }  // 5
set_editor_preview_indeterminate :: (main: *ProgressBar, preview_indeterminate: bool) { sys_call("ProgressBar", "set_editor_preview_indeterminate", 2586408642, Nil, main.p_object, preview_indeterminate);  }  // 6
is_editor_preview_indeterminate_enabled :: (main: *ProgressBar) -> bool { call_ret := cast(*bool) sys_call("ProgressBar", "is_editor_preview_indeterminate_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 7

has_setting :: (main: *ProjectSettings, name: string) -> bool { call_ret := cast(*bool) sys_call("ProjectSettings", "has_setting", 3927539163, bool, main.p_object, name); return call_ret.*; }  // 0
set_setting :: (main: *ProjectSettings, name: string, value: Variant) { sys_call("ProjectSettings", "set_setting", 402577236, Nil, main.p_object, name, value);  }  // 1
get_setting :: (main: *ProjectSettings, name: string) -> Variant { call_ret := cast(*Variant) sys_call("ProjectSettings", "get_setting", 223050753, Variant, main.p_object, name); return call_ret.*; }  // 2
get_setting_with_override :: (main: *ProjectSettings, name: string) -> Variant { call_ret := cast(*Variant) sys_call("ProjectSettings", "get_setting_with_override", 2760726917, Variant, main.p_object, name); return call_ret.*; }  // 3
get_global_class_list :: (main: *ProjectSettings) -> [] Dictionary { call_ret := cast(*[] Dictionary) sys_call("ProjectSettings", "get_global_class_list", 2915620761, [] Dictionary, main.p_object); return call_ret.*; }  // 4
set_order :: (main: *ProjectSettings, name: string, position: int) { sys_call("ProjectSettings", "set_order", 2956805083, Nil, main.p_object, name, position);  }  // 5
get_order :: (main: *ProjectSettings, name: string) -> int { call_ret := cast(*int) sys_call("ProjectSettings", "get_order", 1321353865, int, main.p_object, name); return call_ret.*; }  // 6
set_initial_value :: (main: *ProjectSettings, name: string, value: Variant) { sys_call("ProjectSettings", "set_initial_value", 402577236, Nil, main.p_object, name, value);  }  // 7
set_as_basic :: (main: *ProjectSettings, name: string, basic: bool) { sys_call("ProjectSettings", "set_as_basic", 2678287736, Nil, main.p_object, name, basic);  }  // 8
set_as_internal :: (main: *ProjectSettings, name: string, internal: bool) { sys_call("ProjectSettings", "set_as_internal", 2678287736, Nil, main.p_object, name, internal);  }  // 9
add_property_info :: (main: *ProjectSettings, hint: Dictionary) { sys_call("ProjectSettings", "add_property_info", 4155329257, Nil, main.p_object, hint);  }  // 10
set_restart_if_changed :: (main: *ProjectSettings, name: string, restart: bool) { sys_call("ProjectSettings", "set_restart_if_changed", 2678287736, Nil, main.p_object, name, restart);  }  // 11
clear :: (main: *ProjectSettings, name: string) { sys_call("ProjectSettings", "clear", 83702148, Nil, main.p_object, name);  }  // 12
localize_path :: (main: *ProjectSettings, path: string) -> gstring { call_ret := cast(*gstring) sys_call("ProjectSettings", "localize_path", 3135753539, gstring, main.p_object, path); return call_ret.*; }  // 13
globalize_path :: (main: *ProjectSettings, path: string) -> gstring { call_ret := cast(*gstring) sys_call("ProjectSettings", "globalize_path", 3135753539, gstring, main.p_object, path); return call_ret.*; }  // 14
save :: (main: *ProjectSettings) -> Error { call_ret := cast(*Error) sys_call("ProjectSettings", "save", 166280745, Error, main.p_object); return call_ret.*; }  // 15
load_resource_pack :: (main: *ProjectSettings, pack: string) -> bool { call_ret := cast(*bool) sys_call("ProjectSettings", "load_resource_pack", 708980503, bool, main.p_object, pack); return call_ret.*; }  // 16
save_custom :: (main: *ProjectSettings, file: string) -> Error { call_ret := cast(*Error) sys_call("ProjectSettings", "save_custom", 166001499, Error, main.p_object, file); return call_ret.*; }  // 17

from :: (main: *PropertyTweener, value: Variant) -> *PropertyTweener { call_ret := cast(*PropertyTweener) sys_call("PropertyTweener", "from", 4190193059, PropertyTweener, main.p_object, value); return call_ret; }  // 0
from_current :: (main: *PropertyTweener) -> *PropertyTweener { call_ret := cast(*PropertyTweener) sys_call("PropertyTweener", "from_current", 4279177709, PropertyTweener, main.p_object); return call_ret; }  // 1
as_relative :: (main: *PropertyTweener) -> *PropertyTweener { call_ret := cast(*PropertyTweener) sys_call("PropertyTweener", "as_relative", 4279177709, PropertyTweener, main.p_object); return call_ret; }  // 2
set_trans :: (main: *PropertyTweener, trans: Tween.TransitionType) -> *PropertyTweener { call_ret := cast(*PropertyTweener) sys_call("PropertyTweener", "set_trans", 1899107404, PropertyTweener, main.p_object, trans); return call_ret; }  // 3
set_ease :: (main: *PropertyTweener, ease: Tween.EaseType) -> *PropertyTweener { call_ret := cast(*PropertyTweener) sys_call("PropertyTweener", "set_ease", 1080455622, PropertyTweener, main.p_object, ease); return call_ret; }  // 4
set_custom_interpolator :: (main: *PropertyTweener, interpolator_method: Callable) -> *PropertyTweener { call_ret := cast(*PropertyTweener) sys_call("PropertyTweener", "set_custom_interpolator", 3174170268, PropertyTweener, main.p_object, interpolator_method); return call_ret; }  // 5
set_delay :: (main: *PropertyTweener, delay: float) -> *PropertyTweener { call_ret := cast(*PropertyTweener) sys_call("PropertyTweener", "set_delay", 2171559331, PropertyTweener, main.p_object, delay); return call_ret; }  // 6


set_size :: (main: *QuadOccluder3D, size: Vector2) { sys_call("QuadOccluder3D", "set_size", 743155724, Nil, main.p_object, size);  }  // 0
get_size :: (main: *QuadOccluder3D) -> Vector2 { call_ret := cast(*Vector2) sys_call("QuadOccluder3D", "get_size", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 1

set_format :: (main: *RDAttachmentFormat, p_member: RenderingDevice.DataFormat) { sys_call("RDAttachmentFormat", "set_format", 565531219, Nil, main.p_object, p_member);  }  // 0
get_format :: (main: *RDAttachmentFormat) -> RenderingDevice.DataFormat { call_ret := cast(*RenderingDevice.DataFormat) sys_call("RDAttachmentFormat", "get_format", 2235804183, RenderingDevice.DataFormat, main.p_object); return call_ret.*; }  // 1
set_samples :: (main: *RDAttachmentFormat, p_member: RenderingDevice.TextureSamples) { sys_call("RDAttachmentFormat", "set_samples", 3774171498, Nil, main.p_object, p_member);  }  // 2
get_samples :: (main: *RDAttachmentFormat) -> RenderingDevice.TextureSamples { call_ret := cast(*RenderingDevice.TextureSamples) sys_call("RDAttachmentFormat", "get_samples", 407791724, RenderingDevice.TextureSamples, main.p_object); return call_ret.*; }  // 3
set_usage_flags :: (main: *RDAttachmentFormat, p_member: int) { sys_call("RDAttachmentFormat", "set_usage_flags", 1286410249, Nil, main.p_object, p_member);  }  // 4
get_usage_flags :: (main: *RDAttachmentFormat) -> int { call_ret := cast(*int) sys_call("RDAttachmentFormat", "get_usage_flags", 3905245786, int, main.p_object); return call_ret.*; }  // 5

set_color_attachments :: (main: *RDFramebufferPass, p_member: PackedInt32Array) { sys_call("RDFramebufferPass", "set_color_attachments", 3614634198, Nil, main.p_object, p_member);  }  // 0
get_color_attachments :: (main: *RDFramebufferPass) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("RDFramebufferPass", "get_color_attachments", 1930428628, PackedInt32Array, main.p_object); return call_ret.*; }  // 1
set_input_attachments :: (main: *RDFramebufferPass, p_member: PackedInt32Array) { sys_call("RDFramebufferPass", "set_input_attachments", 3614634198, Nil, main.p_object, p_member);  }  // 2
get_input_attachments :: (main: *RDFramebufferPass) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("RDFramebufferPass", "get_input_attachments", 1930428628, PackedInt32Array, main.p_object); return call_ret.*; }  // 3
set_resolve_attachments :: (main: *RDFramebufferPass, p_member: PackedInt32Array) { sys_call("RDFramebufferPass", "set_resolve_attachments", 3614634198, Nil, main.p_object, p_member);  }  // 4
get_resolve_attachments :: (main: *RDFramebufferPass) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("RDFramebufferPass", "get_resolve_attachments", 1930428628, PackedInt32Array, main.p_object); return call_ret.*; }  // 5
set_preserve_attachments :: (main: *RDFramebufferPass, p_member: PackedInt32Array) { sys_call("RDFramebufferPass", "set_preserve_attachments", 3614634198, Nil, main.p_object, p_member);  }  // 6
get_preserve_attachments :: (main: *RDFramebufferPass) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("RDFramebufferPass", "get_preserve_attachments", 1930428628, PackedInt32Array, main.p_object); return call_ret.*; }  // 7
set_depth_attachment :: (main: *RDFramebufferPass, p_member: int) { sys_call("RDFramebufferPass", "set_depth_attachment", 1286410249, Nil, main.p_object, p_member);  }  // 8
get_depth_attachment :: (main: *RDFramebufferPass) -> int { call_ret := cast(*int) sys_call("RDFramebufferPass", "get_depth_attachment", 3905245786, int, main.p_object); return call_ret.*; }  // 9

set_enable_logic_op :: (main: *RDPipelineColorBlendState, p_member: bool) { sys_call("RDPipelineColorBlendState", "set_enable_logic_op", 2586408642, Nil, main.p_object, p_member);  }  // 0
get_enable_logic_op :: (main: *RDPipelineColorBlendState) -> bool { call_ret := cast(*bool) sys_call("RDPipelineColorBlendState", "get_enable_logic_op", 36873697, bool, main.p_object); return call_ret.*; }  // 1
set_logic_op :: (main: *RDPipelineColorBlendState, p_member: RenderingDevice.LogicOperation) { sys_call("RDPipelineColorBlendState", "set_logic_op", 3610841058, Nil, main.p_object, p_member);  }  // 2
get_logic_op :: (main: *RDPipelineColorBlendState) -> RenderingDevice.LogicOperation { call_ret := cast(*RenderingDevice.LogicOperation) sys_call("RDPipelineColorBlendState", "get_logic_op", 988254690, RenderingDevice.LogicOperation, main.p_object); return call_ret.*; }  // 3
set_blend_constant :: (main: *RDPipelineColorBlendState, p_member: Color) { sys_call("RDPipelineColorBlendState", "set_blend_constant", 2920490490, Nil, main.p_object, p_member);  }  // 4
get_blend_constant :: (main: *RDPipelineColorBlendState) -> Color { call_ret := cast(*Color) sys_call("RDPipelineColorBlendState", "get_blend_constant", 3444240500, Color, main.p_object); return call_ret.*; }  // 5
set_attachments :: (main: *RDPipelineColorBlendState, attachments: [] RDPipelineColorBlendStateAttachment) { sys_call("RDPipelineColorBlendState", "set_attachments", 381264803, Nil, main.p_object, attachments);  }  // 6
get_attachments :: (main: *RDPipelineColorBlendState) -> [] RDPipelineColorBlendStateAttachment { call_ret := cast(*[] RDPipelineColorBlendStateAttachment) sys_call("RDPipelineColorBlendState", "get_attachments", 3995934104, [] RDPipelineColorBlendStateAttachment, main.p_object); return call_ret.*; }  // 7

set_as_mix :: (main: *RDPipelineColorBlendStateAttachment) { sys_call("RDPipelineColorBlendStateAttachment", "set_as_mix", 3218959716, Nil, main.p_object);  }  // 0
set_enable_blend :: (main: *RDPipelineColorBlendStateAttachment, p_member: bool) { sys_call("RDPipelineColorBlendStateAttachment", "set_enable_blend", 2586408642, Nil, main.p_object, p_member);  }  // 1
get_enable_blend :: (main: *RDPipelineColorBlendStateAttachment) -> bool { call_ret := cast(*bool) sys_call("RDPipelineColorBlendStateAttachment", "get_enable_blend", 36873697, bool, main.p_object); return call_ret.*; }  // 2
set_src_color_blend_factor :: (main: *RDPipelineColorBlendStateAttachment, p_member: RenderingDevice.BlendFactor) { sys_call("RDPipelineColorBlendStateAttachment", "set_src_color_blend_factor", 2251019273, Nil, main.p_object, p_member);  }  // 3
get_src_color_blend_factor :: (main: *RDPipelineColorBlendStateAttachment) -> RenderingDevice.BlendFactor { call_ret := cast(*RenderingDevice.BlendFactor) sys_call("RDPipelineColorBlendStateAttachment", "get_src_color_blend_factor", 3691288359, RenderingDevice.BlendFactor, main.p_object); return call_ret.*; }  // 4
set_dst_color_blend_factor :: (main: *RDPipelineColorBlendStateAttachment, p_member: RenderingDevice.BlendFactor) { sys_call("RDPipelineColorBlendStateAttachment", "set_dst_color_blend_factor", 2251019273, Nil, main.p_object, p_member);  }  // 5
get_dst_color_blend_factor :: (main: *RDPipelineColorBlendStateAttachment) -> RenderingDevice.BlendFactor { call_ret := cast(*RenderingDevice.BlendFactor) sys_call("RDPipelineColorBlendStateAttachment", "get_dst_color_blend_factor", 3691288359, RenderingDevice.BlendFactor, main.p_object); return call_ret.*; }  // 6
set_color_blend_op :: (main: *RDPipelineColorBlendStateAttachment, p_member: RenderingDevice.BlendOperation) { sys_call("RDPipelineColorBlendStateAttachment", "set_color_blend_op", 3073022720, Nil, main.p_object, p_member);  }  // 7
get_color_blend_op :: (main: *RDPipelineColorBlendStateAttachment) -> RenderingDevice.BlendOperation { call_ret := cast(*RenderingDevice.BlendOperation) sys_call("RDPipelineColorBlendStateAttachment", "get_color_blend_op", 1385093561, RenderingDevice.BlendOperation, main.p_object); return call_ret.*; }  // 8
set_src_alpha_blend_factor :: (main: *RDPipelineColorBlendStateAttachment, p_member: RenderingDevice.BlendFactor) { sys_call("RDPipelineColorBlendStateAttachment", "set_src_alpha_blend_factor", 2251019273, Nil, main.p_object, p_member);  }  // 9
get_src_alpha_blend_factor :: (main: *RDPipelineColorBlendStateAttachment) -> RenderingDevice.BlendFactor { call_ret := cast(*RenderingDevice.BlendFactor) sys_call("RDPipelineColorBlendStateAttachment", "get_src_alpha_blend_factor", 3691288359, RenderingDevice.BlendFactor, main.p_object); return call_ret.*; }  // 10
set_dst_alpha_blend_factor :: (main: *RDPipelineColorBlendStateAttachment, p_member: RenderingDevice.BlendFactor) { sys_call("RDPipelineColorBlendStateAttachment", "set_dst_alpha_blend_factor", 2251019273, Nil, main.p_object, p_member);  }  // 11
get_dst_alpha_blend_factor :: (main: *RDPipelineColorBlendStateAttachment) -> RenderingDevice.BlendFactor { call_ret := cast(*RenderingDevice.BlendFactor) sys_call("RDPipelineColorBlendStateAttachment", "get_dst_alpha_blend_factor", 3691288359, RenderingDevice.BlendFactor, main.p_object); return call_ret.*; }  // 12
set_alpha_blend_op :: (main: *RDPipelineColorBlendStateAttachment, p_member: RenderingDevice.BlendOperation) { sys_call("RDPipelineColorBlendStateAttachment", "set_alpha_blend_op", 3073022720, Nil, main.p_object, p_member);  }  // 13
get_alpha_blend_op :: (main: *RDPipelineColorBlendStateAttachment) -> RenderingDevice.BlendOperation { call_ret := cast(*RenderingDevice.BlendOperation) sys_call("RDPipelineColorBlendStateAttachment", "get_alpha_blend_op", 1385093561, RenderingDevice.BlendOperation, main.p_object); return call_ret.*; }  // 14
set_write_r :: (main: *RDPipelineColorBlendStateAttachment, p_member: bool) { sys_call("RDPipelineColorBlendStateAttachment", "set_write_r", 2586408642, Nil, main.p_object, p_member);  }  // 15
get_write_r :: (main: *RDPipelineColorBlendStateAttachment) -> bool { call_ret := cast(*bool) sys_call("RDPipelineColorBlendStateAttachment", "get_write_r", 36873697, bool, main.p_object); return call_ret.*; }  // 16
set_write_g :: (main: *RDPipelineColorBlendStateAttachment, p_member: bool) { sys_call("RDPipelineColorBlendStateAttachment", "set_write_g", 2586408642, Nil, main.p_object, p_member);  }  // 17
get_write_g :: (main: *RDPipelineColorBlendStateAttachment) -> bool { call_ret := cast(*bool) sys_call("RDPipelineColorBlendStateAttachment", "get_write_g", 36873697, bool, main.p_object); return call_ret.*; }  // 18
set_write_b :: (main: *RDPipelineColorBlendStateAttachment, p_member: bool) { sys_call("RDPipelineColorBlendStateAttachment", "set_write_b", 2586408642, Nil, main.p_object, p_member);  }  // 19
get_write_b :: (main: *RDPipelineColorBlendStateAttachment) -> bool { call_ret := cast(*bool) sys_call("RDPipelineColorBlendStateAttachment", "get_write_b", 36873697, bool, main.p_object); return call_ret.*; }  // 20
set_write_a :: (main: *RDPipelineColorBlendStateAttachment, p_member: bool) { sys_call("RDPipelineColorBlendStateAttachment", "set_write_a", 2586408642, Nil, main.p_object, p_member);  }  // 21
get_write_a :: (main: *RDPipelineColorBlendStateAttachment) -> bool { call_ret := cast(*bool) sys_call("RDPipelineColorBlendStateAttachment", "get_write_a", 36873697, bool, main.p_object); return call_ret.*; }  // 22

set_enable_depth_test :: (main: *RDPipelineDepthStencilState, p_member: bool) { sys_call("RDPipelineDepthStencilState", "set_enable_depth_test", 2586408642, Nil, main.p_object, p_member);  }  // 0
get_enable_depth_test :: (main: *RDPipelineDepthStencilState) -> bool { call_ret := cast(*bool) sys_call("RDPipelineDepthStencilState", "get_enable_depth_test", 36873697, bool, main.p_object); return call_ret.*; }  // 1
set_enable_depth_write :: (main: *RDPipelineDepthStencilState, p_member: bool) { sys_call("RDPipelineDepthStencilState", "set_enable_depth_write", 2586408642, Nil, main.p_object, p_member);  }  // 2
get_enable_depth_write :: (main: *RDPipelineDepthStencilState) -> bool { call_ret := cast(*bool) sys_call("RDPipelineDepthStencilState", "get_enable_depth_write", 36873697, bool, main.p_object); return call_ret.*; }  // 3
set_depth_compare_operator :: (main: *RDPipelineDepthStencilState, p_member: RenderingDevice.CompareOperator) { sys_call("RDPipelineDepthStencilState", "set_depth_compare_operator", 2573711505, Nil, main.p_object, p_member);  }  // 4
get_depth_compare_operator :: (main: *RDPipelineDepthStencilState) -> RenderingDevice.CompareOperator { call_ret := cast(*RenderingDevice.CompareOperator) sys_call("RDPipelineDepthStencilState", "get_depth_compare_operator", 269730778, RenderingDevice.CompareOperator, main.p_object); return call_ret.*; }  // 5
set_enable_depth_range :: (main: *RDPipelineDepthStencilState, p_member: bool) { sys_call("RDPipelineDepthStencilState", "set_enable_depth_range", 2586408642, Nil, main.p_object, p_member);  }  // 6
get_enable_depth_range :: (main: *RDPipelineDepthStencilState) -> bool { call_ret := cast(*bool) sys_call("RDPipelineDepthStencilState", "get_enable_depth_range", 36873697, bool, main.p_object); return call_ret.*; }  // 7
set_depth_range_min :: (main: *RDPipelineDepthStencilState, p_member: float) { sys_call("RDPipelineDepthStencilState", "set_depth_range_min", 373806689, Nil, main.p_object, p_member);  }  // 8
get_depth_range_min :: (main: *RDPipelineDepthStencilState) -> float { call_ret := cast(*float) sys_call("RDPipelineDepthStencilState", "get_depth_range_min", 1740695150, float, main.p_object); return call_ret.*; }  // 9
set_depth_range_max :: (main: *RDPipelineDepthStencilState, p_member: float) { sys_call("RDPipelineDepthStencilState", "set_depth_range_max", 373806689, Nil, main.p_object, p_member);  }  // 10
get_depth_range_max :: (main: *RDPipelineDepthStencilState) -> float { call_ret := cast(*float) sys_call("RDPipelineDepthStencilState", "get_depth_range_max", 1740695150, float, main.p_object); return call_ret.*; }  // 11
set_enable_stencil :: (main: *RDPipelineDepthStencilState, p_member: bool) { sys_call("RDPipelineDepthStencilState", "set_enable_stencil", 2586408642, Nil, main.p_object, p_member);  }  // 12
get_enable_stencil :: (main: *RDPipelineDepthStencilState) -> bool { call_ret := cast(*bool) sys_call("RDPipelineDepthStencilState", "get_enable_stencil", 36873697, bool, main.p_object); return call_ret.*; }  // 13
set_front_op_fail :: (main: *RDPipelineDepthStencilState, p_member: RenderingDevice.StencilOperation) { sys_call("RDPipelineDepthStencilState", "set_front_op_fail", 2092799566, Nil, main.p_object, p_member);  }  // 14
get_front_op_fail :: (main: *RDPipelineDepthStencilState) -> RenderingDevice.StencilOperation { call_ret := cast(*RenderingDevice.StencilOperation) sys_call("RDPipelineDepthStencilState", "get_front_op_fail", 1714732389, RenderingDevice.StencilOperation, main.p_object); return call_ret.*; }  // 15
set_front_op_pass :: (main: *RDPipelineDepthStencilState, p_member: RenderingDevice.StencilOperation) { sys_call("RDPipelineDepthStencilState", "set_front_op_pass", 2092799566, Nil, main.p_object, p_member);  }  // 16
get_front_op_pass :: (main: *RDPipelineDepthStencilState) -> RenderingDevice.StencilOperation { call_ret := cast(*RenderingDevice.StencilOperation) sys_call("RDPipelineDepthStencilState", "get_front_op_pass", 1714732389, RenderingDevice.StencilOperation, main.p_object); return call_ret.*; }  // 17
set_front_op_depth_fail :: (main: *RDPipelineDepthStencilState, p_member: RenderingDevice.StencilOperation) { sys_call("RDPipelineDepthStencilState", "set_front_op_depth_fail", 2092799566, Nil, main.p_object, p_member);  }  // 18
get_front_op_depth_fail :: (main: *RDPipelineDepthStencilState) -> RenderingDevice.StencilOperation { call_ret := cast(*RenderingDevice.StencilOperation) sys_call("RDPipelineDepthStencilState", "get_front_op_depth_fail", 1714732389, RenderingDevice.StencilOperation, main.p_object); return call_ret.*; }  // 19
set_front_op_compare :: (main: *RDPipelineDepthStencilState, p_member: RenderingDevice.CompareOperator) { sys_call("RDPipelineDepthStencilState", "set_front_op_compare", 2573711505, Nil, main.p_object, p_member);  }  // 20
get_front_op_compare :: (main: *RDPipelineDepthStencilState) -> RenderingDevice.CompareOperator { call_ret := cast(*RenderingDevice.CompareOperator) sys_call("RDPipelineDepthStencilState", "get_front_op_compare", 269730778, RenderingDevice.CompareOperator, main.p_object); return call_ret.*; }  // 21
set_front_op_compare_mask :: (main: *RDPipelineDepthStencilState, p_member: int) { sys_call("RDPipelineDepthStencilState", "set_front_op_compare_mask", 1286410249, Nil, main.p_object, p_member);  }  // 22
get_front_op_compare_mask :: (main: *RDPipelineDepthStencilState) -> int { call_ret := cast(*int) sys_call("RDPipelineDepthStencilState", "get_front_op_compare_mask", 3905245786, int, main.p_object); return call_ret.*; }  // 23
set_front_op_write_mask :: (main: *RDPipelineDepthStencilState, p_member: int) { sys_call("RDPipelineDepthStencilState", "set_front_op_write_mask", 1286410249, Nil, main.p_object, p_member);  }  // 24
get_front_op_write_mask :: (main: *RDPipelineDepthStencilState) -> int { call_ret := cast(*int) sys_call("RDPipelineDepthStencilState", "get_front_op_write_mask", 3905245786, int, main.p_object); return call_ret.*; }  // 25
set_front_op_reference :: (main: *RDPipelineDepthStencilState, p_member: int) { sys_call("RDPipelineDepthStencilState", "set_front_op_reference", 1286410249, Nil, main.p_object, p_member);  }  // 26
get_front_op_reference :: (main: *RDPipelineDepthStencilState) -> int { call_ret := cast(*int) sys_call("RDPipelineDepthStencilState", "get_front_op_reference", 3905245786, int, main.p_object); return call_ret.*; }  // 27
set_back_op_fail :: (main: *RDPipelineDepthStencilState, p_member: RenderingDevice.StencilOperation) { sys_call("RDPipelineDepthStencilState", "set_back_op_fail", 2092799566, Nil, main.p_object, p_member);  }  // 28
get_back_op_fail :: (main: *RDPipelineDepthStencilState) -> RenderingDevice.StencilOperation { call_ret := cast(*RenderingDevice.StencilOperation) sys_call("RDPipelineDepthStencilState", "get_back_op_fail", 1714732389, RenderingDevice.StencilOperation, main.p_object); return call_ret.*; }  // 29
set_back_op_pass :: (main: *RDPipelineDepthStencilState, p_member: RenderingDevice.StencilOperation) { sys_call("RDPipelineDepthStencilState", "set_back_op_pass", 2092799566, Nil, main.p_object, p_member);  }  // 30
get_back_op_pass :: (main: *RDPipelineDepthStencilState) -> RenderingDevice.StencilOperation { call_ret := cast(*RenderingDevice.StencilOperation) sys_call("RDPipelineDepthStencilState", "get_back_op_pass", 1714732389, RenderingDevice.StencilOperation, main.p_object); return call_ret.*; }  // 31
set_back_op_depth_fail :: (main: *RDPipelineDepthStencilState, p_member: RenderingDevice.StencilOperation) { sys_call("RDPipelineDepthStencilState", "set_back_op_depth_fail", 2092799566, Nil, main.p_object, p_member);  }  // 32
get_back_op_depth_fail :: (main: *RDPipelineDepthStencilState) -> RenderingDevice.StencilOperation { call_ret := cast(*RenderingDevice.StencilOperation) sys_call("RDPipelineDepthStencilState", "get_back_op_depth_fail", 1714732389, RenderingDevice.StencilOperation, main.p_object); return call_ret.*; }  // 33
set_back_op_compare :: (main: *RDPipelineDepthStencilState, p_member: RenderingDevice.CompareOperator) { sys_call("RDPipelineDepthStencilState", "set_back_op_compare", 2573711505, Nil, main.p_object, p_member);  }  // 34
get_back_op_compare :: (main: *RDPipelineDepthStencilState) -> RenderingDevice.CompareOperator { call_ret := cast(*RenderingDevice.CompareOperator) sys_call("RDPipelineDepthStencilState", "get_back_op_compare", 269730778, RenderingDevice.CompareOperator, main.p_object); return call_ret.*; }  // 35
set_back_op_compare_mask :: (main: *RDPipelineDepthStencilState, p_member: int) { sys_call("RDPipelineDepthStencilState", "set_back_op_compare_mask", 1286410249, Nil, main.p_object, p_member);  }  // 36
get_back_op_compare_mask :: (main: *RDPipelineDepthStencilState) -> int { call_ret := cast(*int) sys_call("RDPipelineDepthStencilState", "get_back_op_compare_mask", 3905245786, int, main.p_object); return call_ret.*; }  // 37
set_back_op_write_mask :: (main: *RDPipelineDepthStencilState, p_member: int) { sys_call("RDPipelineDepthStencilState", "set_back_op_write_mask", 1286410249, Nil, main.p_object, p_member);  }  // 38
get_back_op_write_mask :: (main: *RDPipelineDepthStencilState) -> int { call_ret := cast(*int) sys_call("RDPipelineDepthStencilState", "get_back_op_write_mask", 3905245786, int, main.p_object); return call_ret.*; }  // 39
set_back_op_reference :: (main: *RDPipelineDepthStencilState, p_member: int) { sys_call("RDPipelineDepthStencilState", "set_back_op_reference", 1286410249, Nil, main.p_object, p_member);  }  // 40
get_back_op_reference :: (main: *RDPipelineDepthStencilState) -> int { call_ret := cast(*int) sys_call("RDPipelineDepthStencilState", "get_back_op_reference", 3905245786, int, main.p_object); return call_ret.*; }  // 41

set_sample_count :: (main: *RDPipelineMultisampleState, p_member: RenderingDevice.TextureSamples) { sys_call("RDPipelineMultisampleState", "set_sample_count", 3774171498, Nil, main.p_object, p_member);  }  // 0
get_sample_count :: (main: *RDPipelineMultisampleState) -> RenderingDevice.TextureSamples { call_ret := cast(*RenderingDevice.TextureSamples) sys_call("RDPipelineMultisampleState", "get_sample_count", 407791724, RenderingDevice.TextureSamples, main.p_object); return call_ret.*; }  // 1
set_enable_sample_shading :: (main: *RDPipelineMultisampleState, p_member: bool) { sys_call("RDPipelineMultisampleState", "set_enable_sample_shading", 2586408642, Nil, main.p_object, p_member);  }  // 2
get_enable_sample_shading :: (main: *RDPipelineMultisampleState) -> bool { call_ret := cast(*bool) sys_call("RDPipelineMultisampleState", "get_enable_sample_shading", 36873697, bool, main.p_object); return call_ret.*; }  // 3
set_min_sample_shading :: (main: *RDPipelineMultisampleState, p_member: float) { sys_call("RDPipelineMultisampleState", "set_min_sample_shading", 373806689, Nil, main.p_object, p_member);  }  // 4
get_min_sample_shading :: (main: *RDPipelineMultisampleState) -> float { call_ret := cast(*float) sys_call("RDPipelineMultisampleState", "get_min_sample_shading", 1740695150, float, main.p_object); return call_ret.*; }  // 5
set_enable_alpha_to_coverage :: (main: *RDPipelineMultisampleState, p_member: bool) { sys_call("RDPipelineMultisampleState", "set_enable_alpha_to_coverage", 2586408642, Nil, main.p_object, p_member);  }  // 6
get_enable_alpha_to_coverage :: (main: *RDPipelineMultisampleState) -> bool { call_ret := cast(*bool) sys_call("RDPipelineMultisampleState", "get_enable_alpha_to_coverage", 36873697, bool, main.p_object); return call_ret.*; }  // 7
set_enable_alpha_to_one :: (main: *RDPipelineMultisampleState, p_member: bool) { sys_call("RDPipelineMultisampleState", "set_enable_alpha_to_one", 2586408642, Nil, main.p_object, p_member);  }  // 8
get_enable_alpha_to_one :: (main: *RDPipelineMultisampleState) -> bool { call_ret := cast(*bool) sys_call("RDPipelineMultisampleState", "get_enable_alpha_to_one", 36873697, bool, main.p_object); return call_ret.*; }  // 9
set_sample_masks :: (main: *RDPipelineMultisampleState, masks: [] int) { sys_call("RDPipelineMultisampleState", "set_sample_masks", 381264803, Nil, main.p_object, masks);  }  // 10
get_sample_masks :: (main: *RDPipelineMultisampleState) -> [] int { call_ret := cast(*[] int) sys_call("RDPipelineMultisampleState", "get_sample_masks", 3995934104, [] int, main.p_object); return call_ret.*; }  // 11

set_enable_depth_clamp :: (main: *RDPipelineRasterizationState, p_member: bool) { sys_call("RDPipelineRasterizationState", "set_enable_depth_clamp", 2586408642, Nil, main.p_object, p_member);  }  // 0
get_enable_depth_clamp :: (main: *RDPipelineRasterizationState) -> bool { call_ret := cast(*bool) sys_call("RDPipelineRasterizationState", "get_enable_depth_clamp", 36873697, bool, main.p_object); return call_ret.*; }  // 1
set_discard_primitives :: (main: *RDPipelineRasterizationState, p_member: bool) { sys_call("RDPipelineRasterizationState", "set_discard_primitives", 2586408642, Nil, main.p_object, p_member);  }  // 2
get_discard_primitives :: (main: *RDPipelineRasterizationState) -> bool { call_ret := cast(*bool) sys_call("RDPipelineRasterizationState", "get_discard_primitives", 36873697, bool, main.p_object); return call_ret.*; }  // 3
set_wireframe :: (main: *RDPipelineRasterizationState, p_member: bool) { sys_call("RDPipelineRasterizationState", "set_wireframe", 2586408642, Nil, main.p_object, p_member);  }  // 4
get_wireframe :: (main: *RDPipelineRasterizationState) -> bool { call_ret := cast(*bool) sys_call("RDPipelineRasterizationState", "get_wireframe", 36873697, bool, main.p_object); return call_ret.*; }  // 5
set_cull_mode :: (main: *RDPipelineRasterizationState, p_member: RenderingDevice.PolygonCullMode) { sys_call("RDPipelineRasterizationState", "set_cull_mode", 2662586502, Nil, main.p_object, p_member);  }  // 6
get_cull_mode :: (main: *RDPipelineRasterizationState) -> RenderingDevice.PolygonCullMode { call_ret := cast(*RenderingDevice.PolygonCullMode) sys_call("RDPipelineRasterizationState", "get_cull_mode", 2192484313, RenderingDevice.PolygonCullMode, main.p_object); return call_ret.*; }  // 7
set_front_face :: (main: *RDPipelineRasterizationState, p_member: RenderingDevice.PolygonFrontFace) { sys_call("RDPipelineRasterizationState", "set_front_face", 2637251213, Nil, main.p_object, p_member);  }  // 8
get_front_face :: (main: *RDPipelineRasterizationState) -> RenderingDevice.PolygonFrontFace { call_ret := cast(*RenderingDevice.PolygonFrontFace) sys_call("RDPipelineRasterizationState", "get_front_face", 708793786, RenderingDevice.PolygonFrontFace, main.p_object); return call_ret.*; }  // 9
set_depth_bias_enabled :: (main: *RDPipelineRasterizationState, p_member: bool) { sys_call("RDPipelineRasterizationState", "set_depth_bias_enabled", 2586408642, Nil, main.p_object, p_member);  }  // 10
get_depth_bias_enabled :: (main: *RDPipelineRasterizationState) -> bool { call_ret := cast(*bool) sys_call("RDPipelineRasterizationState", "get_depth_bias_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 11
set_depth_bias_constant_factor :: (main: *RDPipelineRasterizationState, p_member: float) { sys_call("RDPipelineRasterizationState", "set_depth_bias_constant_factor", 373806689, Nil, main.p_object, p_member);  }  // 12
get_depth_bias_constant_factor :: (main: *RDPipelineRasterizationState) -> float { call_ret := cast(*float) sys_call("RDPipelineRasterizationState", "get_depth_bias_constant_factor", 1740695150, float, main.p_object); return call_ret.*; }  // 13
set_depth_bias_clamp :: (main: *RDPipelineRasterizationState, p_member: float) { sys_call("RDPipelineRasterizationState", "set_depth_bias_clamp", 373806689, Nil, main.p_object, p_member);  }  // 14
get_depth_bias_clamp :: (main: *RDPipelineRasterizationState) -> float { call_ret := cast(*float) sys_call("RDPipelineRasterizationState", "get_depth_bias_clamp", 1740695150, float, main.p_object); return call_ret.*; }  // 15
set_depth_bias_slope_factor :: (main: *RDPipelineRasterizationState, p_member: float) { sys_call("RDPipelineRasterizationState", "set_depth_bias_slope_factor", 373806689, Nil, main.p_object, p_member);  }  // 16
get_depth_bias_slope_factor :: (main: *RDPipelineRasterizationState) -> float { call_ret := cast(*float) sys_call("RDPipelineRasterizationState", "get_depth_bias_slope_factor", 1740695150, float, main.p_object); return call_ret.*; }  // 17
set_line_width :: (main: *RDPipelineRasterizationState, p_member: float) { sys_call("RDPipelineRasterizationState", "set_line_width", 373806689, Nil, main.p_object, p_member);  }  // 18
get_line_width :: (main: *RDPipelineRasterizationState) -> float { call_ret := cast(*float) sys_call("RDPipelineRasterizationState", "get_line_width", 1740695150, float, main.p_object); return call_ret.*; }  // 19
set_patch_control_points :: (main: *RDPipelineRasterizationState, p_member: int) { sys_call("RDPipelineRasterizationState", "set_patch_control_points", 1286410249, Nil, main.p_object, p_member);  }  // 20
get_patch_control_points :: (main: *RDPipelineRasterizationState) -> int { call_ret := cast(*int) sys_call("RDPipelineRasterizationState", "get_patch_control_points", 3905245786, int, main.p_object); return call_ret.*; }  // 21

set_value :: (main: *RDPipelineSpecializationConstant, value: Variant) { sys_call("RDPipelineSpecializationConstant", "set_value", 1114965689, Nil, main.p_object, value);  }  // 0
get_value :: (main: *RDPipelineSpecializationConstant) -> Variant { call_ret := cast(*Variant) sys_call("RDPipelineSpecializationConstant", "get_value", 1214101251, Variant, main.p_object); return call_ret.*; }  // 1
set_constant_id :: (main: *RDPipelineSpecializationConstant, constant_id: int) { sys_call("RDPipelineSpecializationConstant", "set_constant_id", 1286410249, Nil, main.p_object, constant_id);  }  // 2
get_constant_id :: (main: *RDPipelineSpecializationConstant) -> int { call_ret := cast(*int) sys_call("RDPipelineSpecializationConstant", "get_constant_id", 3905245786, int, main.p_object); return call_ret.*; }  // 3

set_mag_filter :: (main: *RDSamplerState, p_member: RenderingDevice.SamplerFilter) { sys_call("RDSamplerState", "set_mag_filter", 1493420382, Nil, main.p_object, p_member);  }  // 0
get_mag_filter :: (main: *RDSamplerState) -> RenderingDevice.SamplerFilter { call_ret := cast(*RenderingDevice.SamplerFilter) sys_call("RDSamplerState", "get_mag_filter", 2209202801, RenderingDevice.SamplerFilter, main.p_object); return call_ret.*; }  // 1
set_min_filter :: (main: *RDSamplerState, p_member: RenderingDevice.SamplerFilter) { sys_call("RDSamplerState", "set_min_filter", 1493420382, Nil, main.p_object, p_member);  }  // 2
get_min_filter :: (main: *RDSamplerState) -> RenderingDevice.SamplerFilter { call_ret := cast(*RenderingDevice.SamplerFilter) sys_call("RDSamplerState", "get_min_filter", 2209202801, RenderingDevice.SamplerFilter, main.p_object); return call_ret.*; }  // 3
set_mip_filter :: (main: *RDSamplerState, p_member: RenderingDevice.SamplerFilter) { sys_call("RDSamplerState", "set_mip_filter", 1493420382, Nil, main.p_object, p_member);  }  // 4
get_mip_filter :: (main: *RDSamplerState) -> RenderingDevice.SamplerFilter { call_ret := cast(*RenderingDevice.SamplerFilter) sys_call("RDSamplerState", "get_mip_filter", 2209202801, RenderingDevice.SamplerFilter, main.p_object); return call_ret.*; }  // 5
set_repeat_u :: (main: *RDSamplerState, p_member: RenderingDevice.SamplerRepeatMode) { sys_call("RDSamplerState", "set_repeat_u", 246127626, Nil, main.p_object, p_member);  }  // 6
get_repeat_u :: (main: *RDSamplerState) -> RenderingDevice.SamplerRepeatMode { call_ret := cast(*RenderingDevice.SamplerRepeatMode) sys_call("RDSamplerState", "get_repeat_u", 3227895872, RenderingDevice.SamplerRepeatMode, main.p_object); return call_ret.*; }  // 7
set_repeat_v :: (main: *RDSamplerState, p_member: RenderingDevice.SamplerRepeatMode) { sys_call("RDSamplerState", "set_repeat_v", 246127626, Nil, main.p_object, p_member);  }  // 8
get_repeat_v :: (main: *RDSamplerState) -> RenderingDevice.SamplerRepeatMode { call_ret := cast(*RenderingDevice.SamplerRepeatMode) sys_call("RDSamplerState", "get_repeat_v", 3227895872, RenderingDevice.SamplerRepeatMode, main.p_object); return call_ret.*; }  // 9
set_repeat_w :: (main: *RDSamplerState, p_member: RenderingDevice.SamplerRepeatMode) { sys_call("RDSamplerState", "set_repeat_w", 246127626, Nil, main.p_object, p_member);  }  // 10
get_repeat_w :: (main: *RDSamplerState) -> RenderingDevice.SamplerRepeatMode { call_ret := cast(*RenderingDevice.SamplerRepeatMode) sys_call("RDSamplerState", "get_repeat_w", 3227895872, RenderingDevice.SamplerRepeatMode, main.p_object); return call_ret.*; }  // 11
set_lod_bias :: (main: *RDSamplerState, p_member: float) { sys_call("RDSamplerState", "set_lod_bias", 373806689, Nil, main.p_object, p_member);  }  // 12
get_lod_bias :: (main: *RDSamplerState) -> float { call_ret := cast(*float) sys_call("RDSamplerState", "get_lod_bias", 1740695150, float, main.p_object); return call_ret.*; }  // 13
set_use_anisotropy :: (main: *RDSamplerState, p_member: bool) { sys_call("RDSamplerState", "set_use_anisotropy", 2586408642, Nil, main.p_object, p_member);  }  // 14
get_use_anisotropy :: (main: *RDSamplerState) -> bool { call_ret := cast(*bool) sys_call("RDSamplerState", "get_use_anisotropy", 36873697, bool, main.p_object); return call_ret.*; }  // 15
set_anisotropy_max :: (main: *RDSamplerState, p_member: float) { sys_call("RDSamplerState", "set_anisotropy_max", 373806689, Nil, main.p_object, p_member);  }  // 16
get_anisotropy_max :: (main: *RDSamplerState) -> float { call_ret := cast(*float) sys_call("RDSamplerState", "get_anisotropy_max", 1740695150, float, main.p_object); return call_ret.*; }  // 17
set_enable_compare :: (main: *RDSamplerState, p_member: bool) { sys_call("RDSamplerState", "set_enable_compare", 2586408642, Nil, main.p_object, p_member);  }  // 18
get_enable_compare :: (main: *RDSamplerState) -> bool { call_ret := cast(*bool) sys_call("RDSamplerState", "get_enable_compare", 36873697, bool, main.p_object); return call_ret.*; }  // 19
set_compare_op :: (main: *RDSamplerState, p_member: RenderingDevice.CompareOperator) { sys_call("RDSamplerState", "set_compare_op", 2573711505, Nil, main.p_object, p_member);  }  // 20
get_compare_op :: (main: *RDSamplerState) -> RenderingDevice.CompareOperator { call_ret := cast(*RenderingDevice.CompareOperator) sys_call("RDSamplerState", "get_compare_op", 269730778, RenderingDevice.CompareOperator, main.p_object); return call_ret.*; }  // 21
set_min_lod :: (main: *RDSamplerState, p_member: float) { sys_call("RDSamplerState", "set_min_lod", 373806689, Nil, main.p_object, p_member);  }  // 22
get_min_lod :: (main: *RDSamplerState) -> float { call_ret := cast(*float) sys_call("RDSamplerState", "get_min_lod", 1740695150, float, main.p_object); return call_ret.*; }  // 23
set_max_lod :: (main: *RDSamplerState, p_member: float) { sys_call("RDSamplerState", "set_max_lod", 373806689, Nil, main.p_object, p_member);  }  // 24
get_max_lod :: (main: *RDSamplerState) -> float { call_ret := cast(*float) sys_call("RDSamplerState", "get_max_lod", 1740695150, float, main.p_object); return call_ret.*; }  // 25
set_border_color :: (main: *RDSamplerState, p_member: RenderingDevice.SamplerBorderColor) { sys_call("RDSamplerState", "set_border_color", 1115869595, Nil, main.p_object, p_member);  }  // 26
get_border_color :: (main: *RDSamplerState) -> RenderingDevice.SamplerBorderColor { call_ret := cast(*RenderingDevice.SamplerBorderColor) sys_call("RDSamplerState", "get_border_color", 3514246478, RenderingDevice.SamplerBorderColor, main.p_object); return call_ret.*; }  // 27
set_unnormalized_uvw :: (main: *RDSamplerState, p_member: bool) { sys_call("RDSamplerState", "set_unnormalized_uvw", 2586408642, Nil, main.p_object, p_member);  }  // 28
get_unnormalized_uvw :: (main: *RDSamplerState) -> bool { call_ret := cast(*bool) sys_call("RDSamplerState", "get_unnormalized_uvw", 36873697, bool, main.p_object); return call_ret.*; }  // 29

set_bytecode :: (main: *RDShaderFile, bytecode: RDShaderSPIRV) { sys_call("RDShaderFile", "set_bytecode", 1526857008, Nil, main.p_object, bytecode);  }  // 0
get_spirv :: (main: *RDShaderFile) -> *RDShaderSPIRV { call_ret := cast(*RDShaderSPIRV) sys_call("RDShaderFile", "get_spirv", 2689310080, RDShaderSPIRV, main.p_object); return call_ret; }  // 1
get_version_list :: (main: *RDShaderFile) -> [] StringName { call_ret := cast(*[] StringName) sys_call("RDShaderFile", "get_version_list", 3995934104, [] StringName, main.p_object); return call_ret.*; }  // 2
set_base_error :: (main: *RDShaderFile, error: string) { sys_call("RDShaderFile", "set_base_error", 83702148, Nil, main.p_object, error);  }  // 3
get_base_error :: (main: *RDShaderFile) -> gstring { call_ret := cast(*gstring) sys_call("RDShaderFile", "get_base_error", 201670096, gstring, main.p_object); return call_ret.*; }  // 4

set_stage_bytecode :: (main: *RDShaderSPIRV, stage: RenderingDevice.ShaderStage, bytecode: PackedByteArray) { sys_call("RDShaderSPIRV", "set_stage_bytecode", 3514097977, Nil, main.p_object, stage, bytecode);  }  // 0
get_stage_bytecode :: (main: *RDShaderSPIRV, stage: RenderingDevice.ShaderStage) -> PackedByteArray { call_ret := cast(*PackedByteArray) sys_call("RDShaderSPIRV", "get_stage_bytecode", 3816765404, PackedByteArray, main.p_object, stage); return call_ret.*; }  // 1
set_stage_compile_error :: (main: *RDShaderSPIRV, stage: RenderingDevice.ShaderStage, compile_error: string) { sys_call("RDShaderSPIRV", "set_stage_compile_error", 620821314, Nil, main.p_object, stage, compile_error);  }  // 2
get_stage_compile_error :: (main: *RDShaderSPIRV, stage: RenderingDevice.ShaderStage) -> gstring { call_ret := cast(*gstring) sys_call("RDShaderSPIRV", "get_stage_compile_error", 3354920045, gstring, main.p_object, stage); return call_ret.*; }  // 3

set_stage_source :: (main: *RDShaderSource, stage: RenderingDevice.ShaderStage, source: string) { sys_call("RDShaderSource", "set_stage_source", 620821314, Nil, main.p_object, stage, source);  }  // 0
get_stage_source :: (main: *RDShaderSource, stage: RenderingDevice.ShaderStage) -> gstring { call_ret := cast(*gstring) sys_call("RDShaderSource", "get_stage_source", 3354920045, gstring, main.p_object, stage); return call_ret.*; }  // 1
set_language :: (main: *RDShaderSource, language: RenderingDevice.ShaderLanguage) { sys_call("RDShaderSource", "set_language", 3422186742, Nil, main.p_object, language);  }  // 2
get_language :: (main: *RDShaderSource) -> RenderingDevice.ShaderLanguage { call_ret := cast(*RenderingDevice.ShaderLanguage) sys_call("RDShaderSource", "get_language", 1063538261, RenderingDevice.ShaderLanguage, main.p_object); return call_ret.*; }  // 3

set_format :: (main: *RDTextureFormat, p_member: RenderingDevice.DataFormat) { sys_call("RDTextureFormat", "set_format", 565531219, Nil, main.p_object, p_member);  }  // 0
get_format :: (main: *RDTextureFormat) -> RenderingDevice.DataFormat { call_ret := cast(*RenderingDevice.DataFormat) sys_call("RDTextureFormat", "get_format", 2235804183, RenderingDevice.DataFormat, main.p_object); return call_ret.*; }  // 1
set_width :: (main: *RDTextureFormat, p_member: int) { sys_call("RDTextureFormat", "set_width", 1286410249, Nil, main.p_object, p_member);  }  // 2
get_width :: (main: *RDTextureFormat) -> int { call_ret := cast(*int) sys_call("RDTextureFormat", "get_width", 3905245786, int, main.p_object); return call_ret.*; }  // 3
set_height :: (main: *RDTextureFormat, p_member: int) { sys_call("RDTextureFormat", "set_height", 1286410249, Nil, main.p_object, p_member);  }  // 4
get_height :: (main: *RDTextureFormat) -> int { call_ret := cast(*int) sys_call("RDTextureFormat", "get_height", 3905245786, int, main.p_object); return call_ret.*; }  // 5
set_depth :: (main: *RDTextureFormat, p_member: int) { sys_call("RDTextureFormat", "set_depth", 1286410249, Nil, main.p_object, p_member);  }  // 6
get_depth :: (main: *RDTextureFormat) -> int { call_ret := cast(*int) sys_call("RDTextureFormat", "get_depth", 3905245786, int, main.p_object); return call_ret.*; }  // 7
set_array_layers :: (main: *RDTextureFormat, p_member: int) { sys_call("RDTextureFormat", "set_array_layers", 1286410249, Nil, main.p_object, p_member);  }  // 8
get_array_layers :: (main: *RDTextureFormat) -> int { call_ret := cast(*int) sys_call("RDTextureFormat", "get_array_layers", 3905245786, int, main.p_object); return call_ret.*; }  // 9
set_mipmaps :: (main: *RDTextureFormat, p_member: int) { sys_call("RDTextureFormat", "set_mipmaps", 1286410249, Nil, main.p_object, p_member);  }  // 10
get_mipmaps :: (main: *RDTextureFormat) -> int { call_ret := cast(*int) sys_call("RDTextureFormat", "get_mipmaps", 3905245786, int, main.p_object); return call_ret.*; }  // 11
set_texture_type :: (main: *RDTextureFormat, p_member: RenderingDevice.TextureType) { sys_call("RDTextureFormat", "set_texture_type", 652343381, Nil, main.p_object, p_member);  }  // 12
get_texture_type :: (main: *RDTextureFormat) -> RenderingDevice.TextureType { call_ret := cast(*RenderingDevice.TextureType) sys_call("RDTextureFormat", "get_texture_type", 4036357416, RenderingDevice.TextureType, main.p_object); return call_ret.*; }  // 13
set_samples :: (main: *RDTextureFormat, p_member: RenderingDevice.TextureSamples) { sys_call("RDTextureFormat", "set_samples", 3774171498, Nil, main.p_object, p_member);  }  // 14
get_samples :: (main: *RDTextureFormat) -> RenderingDevice.TextureSamples { call_ret := cast(*RenderingDevice.TextureSamples) sys_call("RDTextureFormat", "get_samples", 407791724, RenderingDevice.TextureSamples, main.p_object); return call_ret.*; }  // 15
set_usage_bits :: (main: *RDTextureFormat, p_member: RenderingDevice.TextureUsageBits) { sys_call("RDTextureFormat", "set_usage_bits", 245642367, Nil, main.p_object, p_member);  }  // 16
get_usage_bits :: (main: *RDTextureFormat) -> RenderingDevice.TextureUsageBits { call_ret := cast(*RenderingDevice.TextureUsageBits) sys_call("RDTextureFormat", "get_usage_bits", 1313398998, RenderingDevice.TextureUsageBits, main.p_object); return call_ret.*; }  // 17
set_is_resolve_buffer :: (main: *RDTextureFormat, p_member: bool) { sys_call("RDTextureFormat", "set_is_resolve_buffer", 2586408642, Nil, main.p_object, p_member);  }  // 18
get_is_resolve_buffer :: (main: *RDTextureFormat) -> bool { call_ret := cast(*bool) sys_call("RDTextureFormat", "get_is_resolve_buffer", 36873697, bool, main.p_object); return call_ret.*; }  // 19
set_is_discardable :: (main: *RDTextureFormat, p_member: bool) { sys_call("RDTextureFormat", "set_is_discardable", 2586408642, Nil, main.p_object, p_member);  }  // 20
get_is_discardable :: (main: *RDTextureFormat) -> bool { call_ret := cast(*bool) sys_call("RDTextureFormat", "get_is_discardable", 36873697, bool, main.p_object); return call_ret.*; }  // 21
add_shareable_format :: (main: *RDTextureFormat, format: RenderingDevice.DataFormat) { sys_call("RDTextureFormat", "add_shareable_format", 565531219, Nil, main.p_object, format);  }  // 22
remove_shareable_format :: (main: *RDTextureFormat, format: RenderingDevice.DataFormat) { sys_call("RDTextureFormat", "remove_shareable_format", 565531219, Nil, main.p_object, format);  }  // 23

set_format_override :: (main: *RDTextureView, p_member: RenderingDevice.DataFormat) { sys_call("RDTextureView", "set_format_override", 565531219, Nil, main.p_object, p_member);  }  // 0
get_format_override :: (main: *RDTextureView) -> RenderingDevice.DataFormat { call_ret := cast(*RenderingDevice.DataFormat) sys_call("RDTextureView", "get_format_override", 2235804183, RenderingDevice.DataFormat, main.p_object); return call_ret.*; }  // 1
set_swizzle_r :: (main: *RDTextureView, p_member: RenderingDevice.TextureSwizzle) { sys_call("RDTextureView", "set_swizzle_r", 3833362581, Nil, main.p_object, p_member);  }  // 2
get_swizzle_r :: (main: *RDTextureView) -> RenderingDevice.TextureSwizzle { call_ret := cast(*RenderingDevice.TextureSwizzle) sys_call("RDTextureView", "get_swizzle_r", 4150792614, RenderingDevice.TextureSwizzle, main.p_object); return call_ret.*; }  // 3
set_swizzle_g :: (main: *RDTextureView, p_member: RenderingDevice.TextureSwizzle) { sys_call("RDTextureView", "set_swizzle_g", 3833362581, Nil, main.p_object, p_member);  }  // 4
get_swizzle_g :: (main: *RDTextureView) -> RenderingDevice.TextureSwizzle { call_ret := cast(*RenderingDevice.TextureSwizzle) sys_call("RDTextureView", "get_swizzle_g", 4150792614, RenderingDevice.TextureSwizzle, main.p_object); return call_ret.*; }  // 5
set_swizzle_b :: (main: *RDTextureView, p_member: RenderingDevice.TextureSwizzle) { sys_call("RDTextureView", "set_swizzle_b", 3833362581, Nil, main.p_object, p_member);  }  // 6
get_swizzle_b :: (main: *RDTextureView) -> RenderingDevice.TextureSwizzle { call_ret := cast(*RenderingDevice.TextureSwizzle) sys_call("RDTextureView", "get_swizzle_b", 4150792614, RenderingDevice.TextureSwizzle, main.p_object); return call_ret.*; }  // 7
set_swizzle_a :: (main: *RDTextureView, p_member: RenderingDevice.TextureSwizzle) { sys_call("RDTextureView", "set_swizzle_a", 3833362581, Nil, main.p_object, p_member);  }  // 8
get_swizzle_a :: (main: *RDTextureView) -> RenderingDevice.TextureSwizzle { call_ret := cast(*RenderingDevice.TextureSwizzle) sys_call("RDTextureView", "get_swizzle_a", 4150792614, RenderingDevice.TextureSwizzle, main.p_object); return call_ret.*; }  // 9

set_uniform_type :: (main: *RDUniform, p_member: RenderingDevice.UniformType) { sys_call("RDUniform", "set_uniform_type", 1664894931, Nil, main.p_object, p_member);  }  // 0
get_uniform_type :: (main: *RDUniform) -> RenderingDevice.UniformType { call_ret := cast(*RenderingDevice.UniformType) sys_call("RDUniform", "get_uniform_type", 475470040, RenderingDevice.UniformType, main.p_object); return call_ret.*; }  // 1
set_binding :: (main: *RDUniform, p_member: int) { sys_call("RDUniform", "set_binding", 1286410249, Nil, main.p_object, p_member);  }  // 2
get_binding :: (main: *RDUniform) -> int { call_ret := cast(*int) sys_call("RDUniform", "get_binding", 3905245786, int, main.p_object); return call_ret.*; }  // 3
add_id :: (main: *RDUniform, id: RID) { sys_call("RDUniform", "add_id", 2722037293, Nil, main.p_object, id);  }  // 4
clear_ids :: (main: *RDUniform) { sys_call("RDUniform", "clear_ids", 3218959716, Nil, main.p_object);  }  // 5
get_ids :: (main: *RDUniform) -> [] RID { call_ret := cast(*[] RID) sys_call("RDUniform", "get_ids", 3995934104, [] RID, main.p_object); return call_ret.*; }  // 6

set_location :: (main: *RDVertexAttribute, p_member: int) { sys_call("RDVertexAttribute", "set_location", 1286410249, Nil, main.p_object, p_member);  }  // 0
get_location :: (main: *RDVertexAttribute) -> int { call_ret := cast(*int) sys_call("RDVertexAttribute", "get_location", 3905245786, int, main.p_object); return call_ret.*; }  // 1
set_offset :: (main: *RDVertexAttribute, p_member: int) { sys_call("RDVertexAttribute", "set_offset", 1286410249, Nil, main.p_object, p_member);  }  // 2
get_offset :: (main: *RDVertexAttribute) -> int { call_ret := cast(*int) sys_call("RDVertexAttribute", "get_offset", 3905245786, int, main.p_object); return call_ret.*; }  // 3
set_format :: (main: *RDVertexAttribute, p_member: RenderingDevice.DataFormat) { sys_call("RDVertexAttribute", "set_format", 565531219, Nil, main.p_object, p_member);  }  // 4
get_format :: (main: *RDVertexAttribute) -> RenderingDevice.DataFormat { call_ret := cast(*RenderingDevice.DataFormat) sys_call("RDVertexAttribute", "get_format", 2235804183, RenderingDevice.DataFormat, main.p_object); return call_ret.*; }  // 5
set_stride :: (main: *RDVertexAttribute, p_member: int) { sys_call("RDVertexAttribute", "set_stride", 1286410249, Nil, main.p_object, p_member);  }  // 6
get_stride :: (main: *RDVertexAttribute) -> int { call_ret := cast(*int) sys_call("RDVertexAttribute", "get_stride", 3905245786, int, main.p_object); return call_ret.*; }  // 7
set_frequency :: (main: *RDVertexAttribute, p_member: RenderingDevice.VertexFrequency) { sys_call("RDVertexAttribute", "set_frequency", 522141836, Nil, main.p_object, p_member);  }  // 8
get_frequency :: (main: *RDVertexAttribute) -> RenderingDevice.VertexFrequency { call_ret := cast(*RenderingDevice.VertexFrequency) sys_call("RDVertexAttribute", "get_frequency", 4154106413, RenderingDevice.VertexFrequency, main.p_object); return call_ret.*; }  // 9

set_seed :: (main: *RandomNumberGenerator, seed: int) { sys_call("RandomNumberGenerator", "set_seed", 1286410249, Nil, main.p_object, seed);  }  // 0
get_seed :: (main: *RandomNumberGenerator) -> int { call_ret := cast(*int) sys_call("RandomNumberGenerator", "get_seed", 2455072627, int, main.p_object); return call_ret.*; }  // 1
set_state :: (main: *RandomNumberGenerator, state: int) { sys_call("RandomNumberGenerator", "set_state", 1286410249, Nil, main.p_object, state);  }  // 2
get_state :: (main: *RandomNumberGenerator) -> int { call_ret := cast(*int) sys_call("RandomNumberGenerator", "get_state", 3905245786, int, main.p_object); return call_ret.*; }  // 3
randi :: (main: *RandomNumberGenerator) -> int { call_ret := cast(*int) sys_call("RandomNumberGenerator", "randi", 2455072627, int, main.p_object); return call_ret.*; }  // 4
randf :: (main: *RandomNumberGenerator) -> float { call_ret := cast(*float) sys_call("RandomNumberGenerator", "randf", 191475506, float, main.p_object); return call_ret.*; }  // 5
randfn :: (main: *RandomNumberGenerator) -> float { call_ret := cast(*float) sys_call("RandomNumberGenerator", "randfn", 837325100, float, main.p_object); return call_ret.*; }  // 6
randf_range :: (main: *RandomNumberGenerator, from: float, to: float) -> float { call_ret := cast(*float) sys_call("RandomNumberGenerator", "randf_range", 4269894367, float, main.p_object, from, to); return call_ret.*; }  // 7
randi_range :: (main: *RandomNumberGenerator, from: int, to: int) -> int { call_ret := cast(*int) sys_call("RandomNumberGenerator", "randi_range", 50157827, int, main.p_object, from, to); return call_ret.*; }  // 8
rand_weighted :: (main: *RandomNumberGenerator, weights: PackedFloat32Array) -> int { call_ret := cast(*int) sys_call("RandomNumberGenerator", "rand_weighted", 4189642986, int, main.p_object, weights); return call_ret.*; }  // 9
randomize :: (main: *RandomNumberGenerator) { sys_call("RandomNumberGenerator", "randomize", 3218959716, Nil, main.p_object);  }  // 10

get_value :: (main: *Range) -> float { call_ret := cast(*float) sys_call("Range", "get_value", 1740695150, float, main.p_object); return call_ret.*; }  // 1
get_min :: (main: *Range) -> float { call_ret := cast(*float) sys_call("Range", "get_min", 1740695150, float, main.p_object); return call_ret.*; }  // 2
get_max :: (main: *Range) -> float { call_ret := cast(*float) sys_call("Range", "get_max", 1740695150, float, main.p_object); return call_ret.*; }  // 3
get_step :: (main: *Range) -> float { call_ret := cast(*float) sys_call("Range", "get_step", 1740695150, float, main.p_object); return call_ret.*; }  // 4
get_page :: (main: *Range) -> float { call_ret := cast(*float) sys_call("Range", "get_page", 1740695150, float, main.p_object); return call_ret.*; }  // 5
get_as_ratio :: (main: *Range) -> float { call_ret := cast(*float) sys_call("Range", "get_as_ratio", 1740695150, float, main.p_object); return call_ret.*; }  // 6
set_value :: (main: *Range, value: float) { sys_call("Range", "set_value", 373806689, Nil, main.p_object, value);  }  // 7
set_value_no_signal :: (main: *Range, value: float) { sys_call("Range", "set_value_no_signal", 373806689, Nil, main.p_object, value);  }  // 8
set_min :: (main: *Range, minimum: float) { sys_call("Range", "set_min", 373806689, Nil, main.p_object, minimum);  }  // 9
set_max :: (main: *Range, maximum: float) { sys_call("Range", "set_max", 373806689, Nil, main.p_object, maximum);  }  // 10
set_step :: (main: *Range, step: float) { sys_call("Range", "set_step", 373806689, Nil, main.p_object, step);  }  // 11
set_page :: (main: *Range, pagesize: float) { sys_call("Range", "set_page", 373806689, Nil, main.p_object, pagesize);  }  // 12
set_as_ratio :: (main: *Range, value: float) { sys_call("Range", "set_as_ratio", 373806689, Nil, main.p_object, value);  }  // 13
set_use_rounded_values :: (main: *Range, enabled: bool) { sys_call("Range", "set_use_rounded_values", 2586408642, Nil, main.p_object, enabled);  }  // 14
is_using_rounded_values :: (main: *Range) -> bool { call_ret := cast(*bool) sys_call("Range", "is_using_rounded_values", 36873697, bool, main.p_object); return call_ret.*; }  // 15
set_exp_ratio :: (main: *Range, enabled: bool) { sys_call("Range", "set_exp_ratio", 2586408642, Nil, main.p_object, enabled);  }  // 16
is_ratio_exp :: (main: *Range) -> bool { call_ret := cast(*bool) sys_call("Range", "is_ratio_exp", 36873697, bool, main.p_object); return call_ret.*; }  // 17
set_allow_greater :: (main: *Range, allow: bool) { sys_call("Range", "set_allow_greater", 2586408642, Nil, main.p_object, allow);  }  // 18
is_greater_allowed :: (main: *Range) -> bool { call_ret := cast(*bool) sys_call("Range", "is_greater_allowed", 36873697, bool, main.p_object); return call_ret.*; }  // 19
set_allow_lesser :: (main: *Range, allow: bool) { sys_call("Range", "set_allow_lesser", 2586408642, Nil, main.p_object, allow);  }  // 20
is_lesser_allowed :: (main: *Range) -> bool { call_ret := cast(*bool) sys_call("Range", "is_lesser_allowed", 36873697, bool, main.p_object); return call_ret.*; }  // 21
share :: (main: *Range, with: Node) { sys_call("Range", "share", 1078189570, Nil, main.p_object, with);  }  // 22
unshare :: (main: *Range) { sys_call("Range", "unshare", 3218959716, Nil, main.p_object);  }  // 23

set_enabled :: (main: *RayCast2D, enabled: bool) { sys_call("RayCast2D", "set_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 0
is_enabled :: (main: *RayCast2D) -> bool { call_ret := cast(*bool) sys_call("RayCast2D", "is_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 1
set_target_position :: (main: *RayCast2D, local_point: Vector2) { sys_call("RayCast2D", "set_target_position", 743155724, Nil, main.p_object, local_point);  }  // 2
get_target_position :: (main: *RayCast2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("RayCast2D", "get_target_position", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 3
is_colliding :: (main: *RayCast2D) -> bool { call_ret := cast(*bool) sys_call("RayCast2D", "is_colliding", 36873697, bool, main.p_object); return call_ret.*; }  // 4
force_raycast_update :: (main: *RayCast2D) { sys_call("RayCast2D", "force_raycast_update", 3218959716, Nil, main.p_object);  }  // 5
get_collider :: (main: *RayCast2D) -> *Object { call_ret := cast(*Object) sys_call("RayCast2D", "get_collider", 1981248198, Object, main.p_object); return call_ret; }  // 6
get_collider_rid :: (main: *RayCast2D) -> RID { call_ret := cast(*RID) sys_call("RayCast2D", "get_collider_rid", 2944877500, RID, main.p_object); return call_ret.*; }  // 7
get_collider_shape :: (main: *RayCast2D) -> int { call_ret := cast(*int) sys_call("RayCast2D", "get_collider_shape", 3905245786, int, main.p_object); return call_ret.*; }  // 8
get_collision_point :: (main: *RayCast2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("RayCast2D", "get_collision_point", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 9
get_collision_normal :: (main: *RayCast2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("RayCast2D", "get_collision_normal", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 10
add_exception_rid :: (main: *RayCast2D, rid: RID) { sys_call("RayCast2D", "add_exception_rid", 2722037293, Nil, main.p_object, rid);  }  // 11
add_exception :: (main: *RayCast2D, node: CollisionObject2D) { sys_call("RayCast2D", "add_exception", 3090941106, Nil, main.p_object, node);  }  // 12
remove_exception_rid :: (main: *RayCast2D, rid: RID) { sys_call("RayCast2D", "remove_exception_rid", 2722037293, Nil, main.p_object, rid);  }  // 13
remove_exception :: (main: *RayCast2D, node: CollisionObject2D) { sys_call("RayCast2D", "remove_exception", 3090941106, Nil, main.p_object, node);  }  // 14
clear_exceptions :: (main: *RayCast2D) { sys_call("RayCast2D", "clear_exceptions", 3218959716, Nil, main.p_object);  }  // 15
set_collision_mask :: (main: *RayCast2D, mask: int) { sys_call("RayCast2D", "set_collision_mask", 1286410249, Nil, main.p_object, mask);  }  // 16
get_collision_mask :: (main: *RayCast2D) -> int { call_ret := cast(*int) sys_call("RayCast2D", "get_collision_mask", 3905245786, int, main.p_object); return call_ret.*; }  // 17
set_collision_mask_value :: (main: *RayCast2D, layer_number: int, value: bool) { sys_call("RayCast2D", "set_collision_mask_value", 300928843, Nil, main.p_object, layer_number, value);  }  // 18
get_collision_mask_value :: (main: *RayCast2D, layer_number: int) -> bool { call_ret := cast(*bool) sys_call("RayCast2D", "get_collision_mask_value", 1116898809, bool, main.p_object, layer_number); return call_ret.*; }  // 19
set_exclude_parent_body :: (main: *RayCast2D, mask: bool) { sys_call("RayCast2D", "set_exclude_parent_body", 2586408642, Nil, main.p_object, mask);  }  // 20
get_exclude_parent_body :: (main: *RayCast2D) -> bool { call_ret := cast(*bool) sys_call("RayCast2D", "get_exclude_parent_body", 36873697, bool, main.p_object); return call_ret.*; }  // 21
set_collide_with_areas :: (main: *RayCast2D, enable: bool) { sys_call("RayCast2D", "set_collide_with_areas", 2586408642, Nil, main.p_object, enable);  }  // 22
is_collide_with_areas_enabled :: (main: *RayCast2D) -> bool { call_ret := cast(*bool) sys_call("RayCast2D", "is_collide_with_areas_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 23
set_collide_with_bodies :: (main: *RayCast2D, enable: bool) { sys_call("RayCast2D", "set_collide_with_bodies", 2586408642, Nil, main.p_object, enable);  }  // 24
is_collide_with_bodies_enabled :: (main: *RayCast2D) -> bool { call_ret := cast(*bool) sys_call("RayCast2D", "is_collide_with_bodies_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 25
set_hit_from_inside :: (main: *RayCast2D, enable: bool) { sys_call("RayCast2D", "set_hit_from_inside", 2586408642, Nil, main.p_object, enable);  }  // 26
is_hit_from_inside_enabled :: (main: *RayCast2D) -> bool { call_ret := cast(*bool) sys_call("RayCast2D", "is_hit_from_inside_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 27

set_enabled :: (main: *RayCast3D, enabled: bool) { sys_call("RayCast3D", "set_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 0
is_enabled :: (main: *RayCast3D) -> bool { call_ret := cast(*bool) sys_call("RayCast3D", "is_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 1
set_target_position :: (main: *RayCast3D, local_point: Vector3) { sys_call("RayCast3D", "set_target_position", 3460891852, Nil, main.p_object, local_point);  }  // 2
get_target_position :: (main: *RayCast3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("RayCast3D", "get_target_position", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 3
is_colliding :: (main: *RayCast3D) -> bool { call_ret := cast(*bool) sys_call("RayCast3D", "is_colliding", 36873697, bool, main.p_object); return call_ret.*; }  // 4
force_raycast_update :: (main: *RayCast3D) { sys_call("RayCast3D", "force_raycast_update", 3218959716, Nil, main.p_object);  }  // 5
get_collider :: (main: *RayCast3D) -> *Object { call_ret := cast(*Object) sys_call("RayCast3D", "get_collider", 1981248198, Object, main.p_object); return call_ret; }  // 6
get_collider_rid :: (main: *RayCast3D) -> RID { call_ret := cast(*RID) sys_call("RayCast3D", "get_collider_rid", 2944877500, RID, main.p_object); return call_ret.*; }  // 7
get_collider_shape :: (main: *RayCast3D) -> int { call_ret := cast(*int) sys_call("RayCast3D", "get_collider_shape", 3905245786, int, main.p_object); return call_ret.*; }  // 8
get_collision_point :: (main: *RayCast3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("RayCast3D", "get_collision_point", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 9
get_collision_normal :: (main: *RayCast3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("RayCast3D", "get_collision_normal", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 10
get_collision_face_index :: (main: *RayCast3D) -> int { call_ret := cast(*int) sys_call("RayCast3D", "get_collision_face_index", 3905245786, int, main.p_object); return call_ret.*; }  // 11
add_exception_rid :: (main: *RayCast3D, rid: RID) { sys_call("RayCast3D", "add_exception_rid", 2722037293, Nil, main.p_object, rid);  }  // 12
add_exception :: (main: *RayCast3D, node: CollisionObject3D) { sys_call("RayCast3D", "add_exception", 1976431078, Nil, main.p_object, node);  }  // 13
remove_exception_rid :: (main: *RayCast3D, rid: RID) { sys_call("RayCast3D", "remove_exception_rid", 2722037293, Nil, main.p_object, rid);  }  // 14
remove_exception :: (main: *RayCast3D, node: CollisionObject3D) { sys_call("RayCast3D", "remove_exception", 1976431078, Nil, main.p_object, node);  }  // 15
clear_exceptions :: (main: *RayCast3D) { sys_call("RayCast3D", "clear_exceptions", 3218959716, Nil, main.p_object);  }  // 16
set_collision_mask :: (main: *RayCast3D, mask: int) { sys_call("RayCast3D", "set_collision_mask", 1286410249, Nil, main.p_object, mask);  }  // 17
get_collision_mask :: (main: *RayCast3D) -> int { call_ret := cast(*int) sys_call("RayCast3D", "get_collision_mask", 3905245786, int, main.p_object); return call_ret.*; }  // 18
set_collision_mask_value :: (main: *RayCast3D, layer_number: int, value: bool) { sys_call("RayCast3D", "set_collision_mask_value", 300928843, Nil, main.p_object, layer_number, value);  }  // 19
get_collision_mask_value :: (main: *RayCast3D, layer_number: int) -> bool { call_ret := cast(*bool) sys_call("RayCast3D", "get_collision_mask_value", 1116898809, bool, main.p_object, layer_number); return call_ret.*; }  // 20
set_exclude_parent_body :: (main: *RayCast3D, mask: bool) { sys_call("RayCast3D", "set_exclude_parent_body", 2586408642, Nil, main.p_object, mask);  }  // 21
get_exclude_parent_body :: (main: *RayCast3D) -> bool { call_ret := cast(*bool) sys_call("RayCast3D", "get_exclude_parent_body", 36873697, bool, main.p_object); return call_ret.*; }  // 22
set_collide_with_areas :: (main: *RayCast3D, enable: bool) { sys_call("RayCast3D", "set_collide_with_areas", 2586408642, Nil, main.p_object, enable);  }  // 23
is_collide_with_areas_enabled :: (main: *RayCast3D) -> bool { call_ret := cast(*bool) sys_call("RayCast3D", "is_collide_with_areas_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 24
set_collide_with_bodies :: (main: *RayCast3D, enable: bool) { sys_call("RayCast3D", "set_collide_with_bodies", 2586408642, Nil, main.p_object, enable);  }  // 25
is_collide_with_bodies_enabled :: (main: *RayCast3D) -> bool { call_ret := cast(*bool) sys_call("RayCast3D", "is_collide_with_bodies_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 26
set_hit_from_inside :: (main: *RayCast3D, enable: bool) { sys_call("RayCast3D", "set_hit_from_inside", 2586408642, Nil, main.p_object, enable);  }  // 27
is_hit_from_inside_enabled :: (main: *RayCast3D) -> bool { call_ret := cast(*bool) sys_call("RayCast3D", "is_hit_from_inside_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 28
set_hit_back_faces :: (main: *RayCast3D, enable: bool) { sys_call("RayCast3D", "set_hit_back_faces", 2586408642, Nil, main.p_object, enable);  }  // 29
is_hit_back_faces_enabled :: (main: *RayCast3D) -> bool { call_ret := cast(*bool) sys_call("RayCast3D", "is_hit_back_faces_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 30
set_debug_shape_custom_color :: (main: *RayCast3D, debug_shape_custom_color: Color) { sys_call("RayCast3D", "set_debug_shape_custom_color", 2920490490, Nil, main.p_object, debug_shape_custom_color);  }  // 31
get_debug_shape_custom_color :: (main: *RayCast3D) -> Color { call_ret := cast(*Color) sys_call("RayCast3D", "get_debug_shape_custom_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 32
set_debug_shape_thickness :: (main: *RayCast3D, debug_shape_thickness: int) { sys_call("RayCast3D", "set_debug_shape_thickness", 1286410249, Nil, main.p_object, debug_shape_thickness);  }  // 33
get_debug_shape_thickness :: (main: *RayCast3D) -> int { call_ret := cast(*int) sys_call("RayCast3D", "get_debug_shape_thickness", 3905245786, int, main.p_object); return call_ret.*; }  // 34

set_size :: (main: *RectangleShape2D, size: Vector2) { sys_call("RectangleShape2D", "set_size", 743155724, Nil, main.p_object, size);  }  // 0
get_size :: (main: *RectangleShape2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("RectangleShape2D", "get_size", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 1

init_ref :: (main: *RefCounted) -> bool { call_ret := cast(*bool) sys_call("RefCounted", "init_ref", 2240911060, bool, main.p_object); return call_ret.*; }  // 0
reference :: (main: *RefCounted) -> bool { call_ret := cast(*bool) sys_call("RefCounted", "reference", 2240911060, bool, main.p_object); return call_ret.*; }  // 1
unreference :: (main: *RefCounted) -> bool { call_ret := cast(*bool) sys_call("RefCounted", "unreference", 2240911060, bool, main.p_object); return call_ret.*; }  // 2
get_reference_count :: (main: *RefCounted) -> int { call_ret := cast(*int) sys_call("RefCounted", "get_reference_count", 3905245786, int, main.p_object); return call_ret.*; }  // 3

get_border_color :: (main: *ReferenceRect) -> Color { call_ret := cast(*Color) sys_call("ReferenceRect", "get_border_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 0
set_border_color :: (main: *ReferenceRect, color: Color) { sys_call("ReferenceRect", "set_border_color", 2920490490, Nil, main.p_object, color);  }  // 1
get_border_width :: (main: *ReferenceRect) -> float { call_ret := cast(*float) sys_call("ReferenceRect", "get_border_width", 1740695150, float, main.p_object); return call_ret.*; }  // 2
set_border_width :: (main: *ReferenceRect, width: float) { sys_call("ReferenceRect", "set_border_width", 373806689, Nil, main.p_object, width);  }  // 3
get_editor_only :: (main: *ReferenceRect) -> bool { call_ret := cast(*bool) sys_call("ReferenceRect", "get_editor_only", 36873697, bool, main.p_object); return call_ret.*; }  // 4
set_editor_only :: (main: *ReferenceRect, enabled: bool) { sys_call("ReferenceRect", "set_editor_only", 2586408642, Nil, main.p_object, enabled);  }  // 5

set_intensity :: (main: *ReflectionProbe, intensity: float) { sys_call("ReflectionProbe", "set_intensity", 373806689, Nil, main.p_object, intensity);  }  // 0
get_intensity :: (main: *ReflectionProbe) -> float { call_ret := cast(*float) sys_call("ReflectionProbe", "get_intensity", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_blend_distance :: (main: *ReflectionProbe, blend_distance: float) { sys_call("ReflectionProbe", "set_blend_distance", 373806689, Nil, main.p_object, blend_distance);  }  // 2
get_blend_distance :: (main: *ReflectionProbe) -> float { call_ret := cast(*float) sys_call("ReflectionProbe", "get_blend_distance", 1740695150, float, main.p_object); return call_ret.*; }  // 3
set_ambient_mode :: (main: *ReflectionProbe, ambient: ReflectionProbe.AmbientMode) { sys_call("ReflectionProbe", "set_ambient_mode", 1748981278, Nil, main.p_object, ambient);  }  // 4
get_ambient_mode :: (main: *ReflectionProbe) -> ReflectionProbe.AmbientMode { call_ret := cast(*ReflectionProbe.AmbientMode) sys_call("ReflectionProbe", "get_ambient_mode", 1014607621, ReflectionProbe.AmbientMode, main.p_object); return call_ret.*; }  // 5
set_ambient_color :: (main: *ReflectionProbe, ambient: Color) { sys_call("ReflectionProbe", "set_ambient_color", 2920490490, Nil, main.p_object, ambient);  }  // 6
get_ambient_color :: (main: *ReflectionProbe) -> Color { call_ret := cast(*Color) sys_call("ReflectionProbe", "get_ambient_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 7
set_ambient_color_energy :: (main: *ReflectionProbe, ambient_energy: float) { sys_call("ReflectionProbe", "set_ambient_color_energy", 373806689, Nil, main.p_object, ambient_energy);  }  // 8
get_ambient_color_energy :: (main: *ReflectionProbe) -> float { call_ret := cast(*float) sys_call("ReflectionProbe", "get_ambient_color_energy", 1740695150, float, main.p_object); return call_ret.*; }  // 9
set_max_distance :: (main: *ReflectionProbe, max_distance: float) { sys_call("ReflectionProbe", "set_max_distance", 373806689, Nil, main.p_object, max_distance);  }  // 10
get_max_distance :: (main: *ReflectionProbe) -> float { call_ret := cast(*float) sys_call("ReflectionProbe", "get_max_distance", 1740695150, float, main.p_object); return call_ret.*; }  // 11
set_mesh_lod_threshold :: (main: *ReflectionProbe, ratio: float) { sys_call("ReflectionProbe", "set_mesh_lod_threshold", 373806689, Nil, main.p_object, ratio);  }  // 12
get_mesh_lod_threshold :: (main: *ReflectionProbe) -> float { call_ret := cast(*float) sys_call("ReflectionProbe", "get_mesh_lod_threshold", 1740695150, float, main.p_object); return call_ret.*; }  // 13
set_size :: (main: *ReflectionProbe, size: Vector3) { sys_call("ReflectionProbe", "set_size", 3460891852, Nil, main.p_object, size);  }  // 14
get_size :: (main: *ReflectionProbe) -> Vector3 { call_ret := cast(*Vector3) sys_call("ReflectionProbe", "get_size", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 15
set_origin_offset :: (main: *ReflectionProbe, origin_offset: Vector3) { sys_call("ReflectionProbe", "set_origin_offset", 3460891852, Nil, main.p_object, origin_offset);  }  // 16
get_origin_offset :: (main: *ReflectionProbe) -> Vector3 { call_ret := cast(*Vector3) sys_call("ReflectionProbe", "get_origin_offset", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 17
set_as_interior :: (main: *ReflectionProbe, enable: bool) { sys_call("ReflectionProbe", "set_as_interior", 2586408642, Nil, main.p_object, enable);  }  // 18
is_set_as_interior :: (main: *ReflectionProbe) -> bool { call_ret := cast(*bool) sys_call("ReflectionProbe", "is_set_as_interior", 36873697, bool, main.p_object); return call_ret.*; }  // 19
set_enable_box_projection :: (main: *ReflectionProbe, enable: bool) { sys_call("ReflectionProbe", "set_enable_box_projection", 2586408642, Nil, main.p_object, enable);  }  // 20
is_box_projection_enabled :: (main: *ReflectionProbe) -> bool { call_ret := cast(*bool) sys_call("ReflectionProbe", "is_box_projection_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 21
set_enable_shadows :: (main: *ReflectionProbe, enable: bool) { sys_call("ReflectionProbe", "set_enable_shadows", 2586408642, Nil, main.p_object, enable);  }  // 22
are_shadows_enabled :: (main: *ReflectionProbe) -> bool { call_ret := cast(*bool) sys_call("ReflectionProbe", "are_shadows_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 23
set_cull_mask :: (main: *ReflectionProbe, layers: int) { sys_call("ReflectionProbe", "set_cull_mask", 1286410249, Nil, main.p_object, layers);  }  // 24
get_cull_mask :: (main: *ReflectionProbe) -> int { call_ret := cast(*int) sys_call("ReflectionProbe", "get_cull_mask", 3905245786, int, main.p_object); return call_ret.*; }  // 25
set_reflection_mask :: (main: *ReflectionProbe, layers: int) { sys_call("ReflectionProbe", "set_reflection_mask", 1286410249, Nil, main.p_object, layers);  }  // 26
get_reflection_mask :: (main: *ReflectionProbe) -> int { call_ret := cast(*int) sys_call("ReflectionProbe", "get_reflection_mask", 3905245786, int, main.p_object); return call_ret.*; }  // 27
set_update_mode :: (main: *ReflectionProbe, mode: ReflectionProbe.UpdateMode) { sys_call("ReflectionProbe", "set_update_mode", 4090221187, Nil, main.p_object, mode);  }  // 28
get_update_mode :: (main: *ReflectionProbe) -> ReflectionProbe.UpdateMode { call_ret := cast(*ReflectionProbe.UpdateMode) sys_call("ReflectionProbe", "get_update_mode", 2367550552, ReflectionProbe.UpdateMode, main.p_object); return call_ret.*; }  // 29

create_from_string :: (main: *RegEx, pattern: string) -> *RegEx { call_ret := cast(*RegEx) sys_call("RegEx", "create_from_string", 4249111514, RegEx, main.p_object, pattern); return call_ret; }  // 0
clear :: (main: *RegEx) { sys_call("RegEx", "clear", 3218959716, Nil, main.p_object);  }  // 1
compile :: (main: *RegEx, pattern: string) -> Error { call_ret := cast(*Error) sys_call("RegEx", "compile", 3565188097, Error, main.p_object, pattern); return call_ret.*; }  // 2
search :: (main: *RegEx, subject: string) -> *RegExMatch { call_ret := cast(*RegExMatch) sys_call("RegEx", "search", 3365977994, RegExMatch, main.p_object, subject); return call_ret; }  // 3
search_all :: (main: *RegEx, subject: string) -> [] RegExMatch { call_ret := cast(*[] RegExMatch) sys_call("RegEx", "search_all", 849021363, [] RegExMatch, main.p_object, subject); return call_ret.*; }  // 4
sub :: (main: *RegEx, subject: string, replacement: string) -> gstring { call_ret := cast(*gstring) sys_call("RegEx", "sub", 54019702, gstring, main.p_object, subject, replacement); return call_ret.*; }  // 5
is_valid :: (main: *RegEx) -> bool { call_ret := cast(*bool) sys_call("RegEx", "is_valid", 36873697, bool, main.p_object); return call_ret.*; }  // 6
get_pattern :: (main: *RegEx) -> gstring { call_ret := cast(*gstring) sys_call("RegEx", "get_pattern", 201670096, gstring, main.p_object); return call_ret.*; }  // 7
get_group_count :: (main: *RegEx) -> int { call_ret := cast(*int) sys_call("RegEx", "get_group_count", 3905245786, int, main.p_object); return call_ret.*; }  // 8
get_names :: (main: *RegEx) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("RegEx", "get_names", 1139954409, PackedStringArray, main.p_object); return call_ret.*; }  // 9

get_subject :: (main: *RegExMatch) -> gstring { call_ret := cast(*gstring) sys_call("RegExMatch", "get_subject", 201670096, gstring, main.p_object); return call_ret.*; }  // 0
get_group_count :: (main: *RegExMatch) -> int { call_ret := cast(*int) sys_call("RegExMatch", "get_group_count", 3905245786, int, main.p_object); return call_ret.*; }  // 1
get_names :: (main: *RegExMatch) -> Dictionary { call_ret := cast(*Dictionary) sys_call("RegExMatch", "get_names", 3102165223, Dictionary, main.p_object); return call_ret.*; }  // 2
get_strings :: (main: *RegExMatch) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("RegExMatch", "get_strings", 1139954409, PackedStringArray, main.p_object); return call_ret.*; }  // 3
get_string :: (main: *RegExMatch) -> gstring { call_ret := cast(*gstring) sys_call("RegExMatch", "get_string", 687115856, gstring, main.p_object); return call_ret.*; }  // 4
get_start :: (main: *RegExMatch) -> int { call_ret := cast(*int) sys_call("RegExMatch", "get_start", 490464691, int, main.p_object); return call_ret.*; }  // 5
get_end :: (main: *RegExMatch) -> int { call_ret := cast(*int) sys_call("RegExMatch", "get_end", 490464691, int, main.p_object); return call_ret.*; }  // 6

set_remote_node :: (main: *RemoteTransform2D, path: string) { sys_call("RemoteTransform2D", "set_remote_node", 1348162250, Nil, main.p_object, path);  }  // 0
get_remote_node :: (main: *RemoteTransform2D) -> NodePath { call_ret := cast(*NodePath) sys_call("RemoteTransform2D", "get_remote_node", 4075236667, NodePath, main.p_object); return call_ret.*; }  // 1
force_update_cache :: (main: *RemoteTransform2D) { sys_call("RemoteTransform2D", "force_update_cache", 3218959716, Nil, main.p_object);  }  // 2
set_use_global_coordinates :: (main: *RemoteTransform2D, use_global_coordinates: bool) { sys_call("RemoteTransform2D", "set_use_global_coordinates", 2586408642, Nil, main.p_object, use_global_coordinates);  }  // 3
get_use_global_coordinates :: (main: *RemoteTransform2D) -> bool { call_ret := cast(*bool) sys_call("RemoteTransform2D", "get_use_global_coordinates", 36873697, bool, main.p_object); return call_ret.*; }  // 4
set_update_position :: (main: *RemoteTransform2D, update_remote_position: bool) { sys_call("RemoteTransform2D", "set_update_position", 2586408642, Nil, main.p_object, update_remote_position);  }  // 5
get_update_position :: (main: *RemoteTransform2D) -> bool { call_ret := cast(*bool) sys_call("RemoteTransform2D", "get_update_position", 36873697, bool, main.p_object); return call_ret.*; }  // 6
set_update_rotation :: (main: *RemoteTransform2D, update_remote_rotation: bool) { sys_call("RemoteTransform2D", "set_update_rotation", 2586408642, Nil, main.p_object, update_remote_rotation);  }  // 7
get_update_rotation :: (main: *RemoteTransform2D) -> bool { call_ret := cast(*bool) sys_call("RemoteTransform2D", "get_update_rotation", 36873697, bool, main.p_object); return call_ret.*; }  // 8
set_update_scale :: (main: *RemoteTransform2D, update_remote_scale: bool) { sys_call("RemoteTransform2D", "set_update_scale", 2586408642, Nil, main.p_object, update_remote_scale);  }  // 9
get_update_scale :: (main: *RemoteTransform2D) -> bool { call_ret := cast(*bool) sys_call("RemoteTransform2D", "get_update_scale", 36873697, bool, main.p_object); return call_ret.*; }  // 10

set_remote_node :: (main: *RemoteTransform3D, path: string) { sys_call("RemoteTransform3D", "set_remote_node", 1348162250, Nil, main.p_object, path);  }  // 0
get_remote_node :: (main: *RemoteTransform3D) -> NodePath { call_ret := cast(*NodePath) sys_call("RemoteTransform3D", "get_remote_node", 4075236667, NodePath, main.p_object); return call_ret.*; }  // 1
force_update_cache :: (main: *RemoteTransform3D) { sys_call("RemoteTransform3D", "force_update_cache", 3218959716, Nil, main.p_object);  }  // 2
set_use_global_coordinates :: (main: *RemoteTransform3D, use_global_coordinates: bool) { sys_call("RemoteTransform3D", "set_use_global_coordinates", 2586408642, Nil, main.p_object, use_global_coordinates);  }  // 3
get_use_global_coordinates :: (main: *RemoteTransform3D) -> bool { call_ret := cast(*bool) sys_call("RemoteTransform3D", "get_use_global_coordinates", 36873697, bool, main.p_object); return call_ret.*; }  // 4
set_update_position :: (main: *RemoteTransform3D, update_remote_position: bool) { sys_call("RemoteTransform3D", "set_update_position", 2586408642, Nil, main.p_object, update_remote_position);  }  // 5
get_update_position :: (main: *RemoteTransform3D) -> bool { call_ret := cast(*bool) sys_call("RemoteTransform3D", "get_update_position", 36873697, bool, main.p_object); return call_ret.*; }  // 6
set_update_rotation :: (main: *RemoteTransform3D, update_remote_rotation: bool) { sys_call("RemoteTransform3D", "set_update_rotation", 2586408642, Nil, main.p_object, update_remote_rotation);  }  // 7
get_update_rotation :: (main: *RemoteTransform3D) -> bool { call_ret := cast(*bool) sys_call("RemoteTransform3D", "get_update_rotation", 36873697, bool, main.p_object); return call_ret.*; }  // 8
set_update_scale :: (main: *RemoteTransform3D, update_remote_scale: bool) { sys_call("RemoteTransform3D", "set_update_scale", 2586408642, Nil, main.p_object, update_remote_scale);  }  // 9
get_update_scale :: (main: *RemoteTransform3D) -> bool { call_ret := cast(*bool) sys_call("RemoteTransform3D", "get_update_scale", 36873697, bool, main.p_object); return call_ret.*; }  // 10

get_render_scene_buffers :: (main: *RenderData) -> *RenderSceneBuffers { call_ret := cast(*RenderSceneBuffers) sys_call("RenderData", "get_render_scene_buffers", 2793216201, RenderSceneBuffers, main.p_object); return call_ret; }  // 0
get_render_scene_data :: (main: *RenderData) -> *RenderSceneData { call_ret := cast(*RenderSceneData) sys_call("RenderData", "get_render_scene_data", 1288715698, RenderSceneData, main.p_object); return call_ret; }  // 1
get_environment :: (main: *RenderData) -> RID { call_ret := cast(*RID) sys_call("RenderData", "get_environment", 2944877500, RID, main.p_object); return call_ret.*; }  // 2
get_camera_attributes :: (main: *RenderData) -> RID { call_ret := cast(*RID) sys_call("RenderData", "get_camera_attributes", 2944877500, RID, main.p_object); return call_ret.*; }  // 3



configure :: (main: *RenderSceneBuffers, config: RenderSceneBuffersConfiguration) { sys_call("RenderSceneBuffers", "configure", 3072623270, Nil, main.p_object, config);  }  // 0

get_render_target :: (main: *RenderSceneBuffersConfiguration) -> RID { call_ret := cast(*RID) sys_call("RenderSceneBuffersConfiguration", "get_render_target", 2944877500, RID, main.p_object); return call_ret.*; }  // 0
set_render_target :: (main: *RenderSceneBuffersConfiguration, render_target: RID) { sys_call("RenderSceneBuffersConfiguration", "set_render_target", 2722037293, Nil, main.p_object, render_target);  }  // 1
get_internal_size :: (main: *RenderSceneBuffersConfiguration) -> Vector2i { call_ret := cast(*Vector2i) sys_call("RenderSceneBuffersConfiguration", "get_internal_size", 3690982128, Vector2i, main.p_object); return call_ret.*; }  // 2
set_internal_size :: (main: *RenderSceneBuffersConfiguration, internal_size: Vector2i) { sys_call("RenderSceneBuffersConfiguration", "set_internal_size", 1130785943, Nil, main.p_object, internal_size);  }  // 3
get_target_size :: (main: *RenderSceneBuffersConfiguration) -> Vector2i { call_ret := cast(*Vector2i) sys_call("RenderSceneBuffersConfiguration", "get_target_size", 3690982128, Vector2i, main.p_object); return call_ret.*; }  // 4
set_target_size :: (main: *RenderSceneBuffersConfiguration, target_size: Vector2i) { sys_call("RenderSceneBuffersConfiguration", "set_target_size", 1130785943, Nil, main.p_object, target_size);  }  // 5
get_view_count :: (main: *RenderSceneBuffersConfiguration) -> int { call_ret := cast(*int) sys_call("RenderSceneBuffersConfiguration", "get_view_count", 3905245786, int, main.p_object); return call_ret.*; }  // 6
set_view_count :: (main: *RenderSceneBuffersConfiguration, view_count: int) { sys_call("RenderSceneBuffersConfiguration", "set_view_count", 1286410249, Nil, main.p_object, view_count);  }  // 7
get_scaling_3d_mode :: (main: *RenderSceneBuffersConfiguration) -> RenderingServer.ViewportScaling3DMode { call_ret := cast(*RenderingServer.ViewportScaling3DMode) sys_call("RenderSceneBuffersConfiguration", "get_scaling_3d_mode", 976778074, RenderingServer.ViewportScaling3DMode, main.p_object); return call_ret.*; }  // 8
set_scaling_3d_mode :: (main: *RenderSceneBuffersConfiguration, scaling_3d_mode: RenderingServer.ViewportScaling3DMode) { sys_call("RenderSceneBuffersConfiguration", "set_scaling_3d_mode", 447477857, Nil, main.p_object, scaling_3d_mode);  }  // 9
get_msaa_3d :: (main: *RenderSceneBuffersConfiguration) -> RenderingServer.ViewportMSAA { call_ret := cast(*RenderingServer.ViewportMSAA) sys_call("RenderSceneBuffersConfiguration", "get_msaa_3d", 3109158617, RenderingServer.ViewportMSAA, main.p_object); return call_ret.*; }  // 10
set_msaa_3d :: (main: *RenderSceneBuffersConfiguration, msaa_3d: RenderingServer.ViewportMSAA) { sys_call("RenderSceneBuffersConfiguration", "set_msaa_3d", 3952630748, Nil, main.p_object, msaa_3d);  }  // 11
get_screen_space_aa :: (main: *RenderSceneBuffersConfiguration) -> RenderingServer.ViewportScreenSpaceAA { call_ret := cast(*RenderingServer.ViewportScreenSpaceAA) sys_call("RenderSceneBuffersConfiguration", "get_screen_space_aa", 641513172, RenderingServer.ViewportScreenSpaceAA, main.p_object); return call_ret.*; }  // 12
set_screen_space_aa :: (main: *RenderSceneBuffersConfiguration, screen_space_aa: RenderingServer.ViewportScreenSpaceAA) { sys_call("RenderSceneBuffersConfiguration", "set_screen_space_aa", 139543108, Nil, main.p_object, screen_space_aa);  }  // 13
get_fsr_sharpness :: (main: *RenderSceneBuffersConfiguration) -> float { call_ret := cast(*float) sys_call("RenderSceneBuffersConfiguration", "get_fsr_sharpness", 1740695150, float, main.p_object); return call_ret.*; }  // 14
set_fsr_sharpness :: (main: *RenderSceneBuffersConfiguration, fsr_sharpness: float) { sys_call("RenderSceneBuffersConfiguration", "set_fsr_sharpness", 373806689, Nil, main.p_object, fsr_sharpness);  }  // 15
get_texture_mipmap_bias :: (main: *RenderSceneBuffersConfiguration) -> float { call_ret := cast(*float) sys_call("RenderSceneBuffersConfiguration", "get_texture_mipmap_bias", 1740695150, float, main.p_object); return call_ret.*; }  // 16
set_texture_mipmap_bias :: (main: *RenderSceneBuffersConfiguration, texture_mipmap_bias: float) { sys_call("RenderSceneBuffersConfiguration", "set_texture_mipmap_bias", 373806689, Nil, main.p_object, texture_mipmap_bias);  }  // 17
get_anisotropic_filtering_level :: (main: *RenderSceneBuffersConfiguration) -> RenderingServer.ViewportAnisotropicFiltering { call_ret := cast(*RenderingServer.ViewportAnisotropicFiltering) sys_call("RenderSceneBuffersConfiguration", "get_anisotropic_filtering_level", 1617414954, RenderingServer.ViewportAnisotropicFiltering, main.p_object); return call_ret.*; }  // 18
set_anisotropic_filtering_level :: (main: *RenderSceneBuffersConfiguration, anisotropic_filtering_level: RenderingServer.ViewportAnisotropicFiltering) { sys_call("RenderSceneBuffersConfiguration", "set_anisotropic_filtering_level", 2559658741, Nil, main.p_object, anisotropic_filtering_level);  }  // 19


has_texture :: (main: *RenderSceneBuffersRD, _context: string, name: string) -> bool { call_ret := cast(*bool) sys_call("RenderSceneBuffersRD", "has_texture", 471820014, bool, main.p_object, _context, name); return call_ret.*; }  // 0
create_texture :: (main: *RenderSceneBuffersRD, _context: string, name: string, data_format: RenderingDevice.DataFormat, usage_bits: int, texture_samples: RenderingDevice.TextureSamples, size: Vector2i, layers: int, mipmaps: int, unique: bool, discardable: bool) -> RID { call_ret := cast(*RID) sys_call("RenderSceneBuffersRD", "create_texture", 2950875024, RID, main.p_object, _context, name, data_format, usage_bits, texture_samples, size, layers, mipmaps, unique, discardable); return call_ret.*; }  // 1
create_texture_from_format :: (main: *RenderSceneBuffersRD, _context: string, name: string, format: RDTextureFormat, view: RDTextureView, unique: bool) -> RID { call_ret := cast(*RID) sys_call("RenderSceneBuffersRD", "create_texture_from_format", 3344669382, RID, main.p_object, _context, name, format, view, unique); return call_ret.*; }  // 2
create_texture_view :: (main: *RenderSceneBuffersRD, _context: string, name: string, view_name: string, view: RDTextureView) -> RID { call_ret := cast(*RID) sys_call("RenderSceneBuffersRD", "create_texture_view", 283055834, RID, main.p_object, _context, name, view_name, view); return call_ret.*; }  // 3
get_texture :: (main: *RenderSceneBuffersRD, _context: string, name: string) -> RID { call_ret := cast(*RID) sys_call("RenderSceneBuffersRD", "get_texture", 750006389, RID, main.p_object, _context, name); return call_ret.*; }  // 4
get_texture_format :: (main: *RenderSceneBuffersRD, _context: string, name: string) -> *RDTextureFormat { call_ret := cast(*RDTextureFormat) sys_call("RenderSceneBuffersRD", "get_texture_format", 371461758, RDTextureFormat, main.p_object, _context, name); return call_ret; }  // 5
get_texture_slice :: (main: *RenderSceneBuffersRD, _context: string, name: string, layer: int, mipmap: int, layers: int, mipmaps: int) -> RID { call_ret := cast(*RID) sys_call("RenderSceneBuffersRD", "get_texture_slice", 588440706, RID, main.p_object, _context, name, layer, mipmap, layers, mipmaps); return call_ret.*; }  // 6
get_texture_slice_view :: (main: *RenderSceneBuffersRD, _context: string, name: string, layer: int, mipmap: int, layers: int, mipmaps: int, view: RDTextureView) -> RID { call_ret := cast(*RID) sys_call("RenderSceneBuffersRD", "get_texture_slice_view", 682451778, RID, main.p_object, _context, name, layer, mipmap, layers, mipmaps, view); return call_ret.*; }  // 7
get_texture_slice_size :: (main: *RenderSceneBuffersRD, _context: string, name: string, mipmap: int) -> Vector2i { call_ret := cast(*Vector2i) sys_call("RenderSceneBuffersRD", "get_texture_slice_size", 2617625368, Vector2i, main.p_object, _context, name, mipmap); return call_ret.*; }  // 8
clear_context :: (main: *RenderSceneBuffersRD, _context: string) { sys_call("RenderSceneBuffersRD", "clear_context", 3304788590, Nil, main.p_object, _context);  }  // 9
get_color_texture :: (main: *RenderSceneBuffersRD) -> RID { call_ret := cast(*RID) sys_call("RenderSceneBuffersRD", "get_color_texture", 3050822880, RID, main.p_object); return call_ret.*; }  // 10
get_color_layer :: (main: *RenderSceneBuffersRD, layer: int) -> RID { call_ret := cast(*RID) sys_call("RenderSceneBuffersRD", "get_color_layer", 3087988589, RID, main.p_object, layer); return call_ret.*; }  // 11
get_depth_texture :: (main: *RenderSceneBuffersRD) -> RID { call_ret := cast(*RID) sys_call("RenderSceneBuffersRD", "get_depth_texture", 3050822880, RID, main.p_object); return call_ret.*; }  // 12
get_depth_layer :: (main: *RenderSceneBuffersRD, layer: int) -> RID { call_ret := cast(*RID) sys_call("RenderSceneBuffersRD", "get_depth_layer", 3087988589, RID, main.p_object, layer); return call_ret.*; }  // 13
get_velocity_texture :: (main: *RenderSceneBuffersRD) -> RID { call_ret := cast(*RID) sys_call("RenderSceneBuffersRD", "get_velocity_texture", 3050822880, RID, main.p_object); return call_ret.*; }  // 14
get_velocity_layer :: (main: *RenderSceneBuffersRD, layer: int) -> RID { call_ret := cast(*RID) sys_call("RenderSceneBuffersRD", "get_velocity_layer", 3087988589, RID, main.p_object, layer); return call_ret.*; }  // 15
get_render_target :: (main: *RenderSceneBuffersRD) -> RID { call_ret := cast(*RID) sys_call("RenderSceneBuffersRD", "get_render_target", 2944877500, RID, main.p_object); return call_ret.*; }  // 16
get_view_count :: (main: *RenderSceneBuffersRD) -> int { call_ret := cast(*int) sys_call("RenderSceneBuffersRD", "get_view_count", 3905245786, int, main.p_object); return call_ret.*; }  // 17
get_internal_size :: (main: *RenderSceneBuffersRD) -> Vector2i { call_ret := cast(*Vector2i) sys_call("RenderSceneBuffersRD", "get_internal_size", 3690982128, Vector2i, main.p_object); return call_ret.*; }  // 18
get_target_size :: (main: *RenderSceneBuffersRD) -> Vector2i { call_ret := cast(*Vector2i) sys_call("RenderSceneBuffersRD", "get_target_size", 3690982128, Vector2i, main.p_object); return call_ret.*; }  // 19
get_scaling_3d_mode :: (main: *RenderSceneBuffersRD) -> RenderingServer.ViewportScaling3DMode { call_ret := cast(*RenderingServer.ViewportScaling3DMode) sys_call("RenderSceneBuffersRD", "get_scaling_3d_mode", 976778074, RenderingServer.ViewportScaling3DMode, main.p_object); return call_ret.*; }  // 20
get_fsr_sharpness :: (main: *RenderSceneBuffersRD) -> float { call_ret := cast(*float) sys_call("RenderSceneBuffersRD", "get_fsr_sharpness", 1740695150, float, main.p_object); return call_ret.*; }  // 21
get_msaa_3d :: (main: *RenderSceneBuffersRD) -> RenderingServer.ViewportMSAA { call_ret := cast(*RenderingServer.ViewportMSAA) sys_call("RenderSceneBuffersRD", "get_msaa_3d", 3109158617, RenderingServer.ViewportMSAA, main.p_object); return call_ret.*; }  // 22
get_texture_samples :: (main: *RenderSceneBuffersRD) -> RenderingDevice.TextureSamples { call_ret := cast(*RenderingDevice.TextureSamples) sys_call("RenderSceneBuffersRD", "get_texture_samples", 407791724, RenderingDevice.TextureSamples, main.p_object); return call_ret.*; }  // 23
get_screen_space_aa :: (main: *RenderSceneBuffersRD) -> RenderingServer.ViewportScreenSpaceAA { call_ret := cast(*RenderingServer.ViewportScreenSpaceAA) sys_call("RenderSceneBuffersRD", "get_screen_space_aa", 641513172, RenderingServer.ViewportScreenSpaceAA, main.p_object); return call_ret.*; }  // 24
get_use_taa :: (main: *RenderSceneBuffersRD) -> bool { call_ret := cast(*bool) sys_call("RenderSceneBuffersRD", "get_use_taa", 36873697, bool, main.p_object); return call_ret.*; }  // 25
get_use_debanding :: (main: *RenderSceneBuffersRD) -> bool { call_ret := cast(*bool) sys_call("RenderSceneBuffersRD", "get_use_debanding", 36873697, bool, main.p_object); return call_ret.*; }  // 26

get_cam_transform :: (main: *RenderSceneData) -> Transform3D { call_ret := cast(*Transform3D) sys_call("RenderSceneData", "get_cam_transform", 3229777777, Transform3D, main.p_object); return call_ret.*; }  // 0
get_cam_projection :: (main: *RenderSceneData) -> Projection { call_ret := cast(*Projection) sys_call("RenderSceneData", "get_cam_projection", 2910717950, Projection, main.p_object); return call_ret.*; }  // 1
get_view_count :: (main: *RenderSceneData) -> int { call_ret := cast(*int) sys_call("RenderSceneData", "get_view_count", 3905245786, int, main.p_object); return call_ret.*; }  // 2
get_view_eye_offset :: (main: *RenderSceneData, view: int) -> Vector3 { call_ret := cast(*Vector3) sys_call("RenderSceneData", "get_view_eye_offset", 711720468, Vector3, main.p_object, view); return call_ret.*; }  // 3
get_view_projection :: (main: *RenderSceneData, view: int) -> Projection { call_ret := cast(*Projection) sys_call("RenderSceneData", "get_view_projection", 3179846605, Projection, main.p_object, view); return call_ret.*; }  // 4
get_uniform_buffer :: (main: *RenderSceneData) -> RID { call_ret := cast(*RID) sys_call("RenderSceneData", "get_uniform_buffer", 2944877500, RID, main.p_object); return call_ret.*; }  // 5



texture_create :: (main: *RenderingDevice, format: RDTextureFormat, view: RDTextureView) -> RID { call_ret := cast(*RID) sys_call("RenderingDevice", "texture_create", 3709173589, RID, main.p_object, format, view); return call_ret.*; }  // 0
texture_create_shared :: (main: *RenderingDevice, view: RDTextureView, with_texture: RID) -> RID { call_ret := cast(*RID) sys_call("RenderingDevice", "texture_create_shared", 3178156134, RID, main.p_object, view, with_texture); return call_ret.*; }  // 1
texture_create_shared_from_slice :: (main: *RenderingDevice, view: RDTextureView, with_texture: RID, layer: int, mipmap: int) -> RID { call_ret := cast(*RID) sys_call("RenderingDevice", "texture_create_shared_from_slice", 1808971279, RID, main.p_object, view, with_texture, layer, mipmap); return call_ret.*; }  // 2
texture_create_from_extension :: (main: *RenderingDevice, type: RenderingDevice.TextureType, format: RenderingDevice.DataFormat, samples: RenderingDevice.TextureSamples, usage_flags: RenderingDevice.TextureUsageBits, image: int, width: int, height: int, depth: int, layers: int) -> RID { call_ret := cast(*RID) sys_call("RenderingDevice", "texture_create_from_extension", 1397171480, RID, main.p_object, type, format, samples, usage_flags, image, width, height, depth, layers); return call_ret.*; }  // 3
texture_update :: (main: *RenderingDevice, texture: RID, layer: int, data: PackedByteArray) -> Error { call_ret := cast(*Error) sys_call("RenderingDevice", "texture_update", 1349464008, Error, main.p_object, texture, layer, data); return call_ret.*; }  // 4
texture_get_data :: (main: *RenderingDevice, texture: RID, layer: int) -> PackedByteArray { call_ret := cast(*PackedByteArray) sys_call("RenderingDevice", "texture_get_data", 1859412099, PackedByteArray, main.p_object, texture, layer); return call_ret.*; }  // 5
texture_get_data_async :: (main: *RenderingDevice, texture: RID, layer: int, callback: Callable) -> Error { call_ret := cast(*Error) sys_call("RenderingDevice", "texture_get_data_async", 498832090, Error, main.p_object, texture, layer, callback); return call_ret.*; }  // 6
texture_is_format_supported_for_usage :: (main: *RenderingDevice, format: RenderingDevice.DataFormat, usage_flags: RenderingDevice.TextureUsageBits) -> bool { call_ret := cast(*bool) sys_call("RenderingDevice", "texture_is_format_supported_for_usage", 2592520478, bool, main.p_object, format, usage_flags); return call_ret.*; }  // 7
texture_is_shared :: (main: *RenderingDevice, texture: RID) -> bool { call_ret := cast(*bool) sys_call("RenderingDevice", "texture_is_shared", 3521089500, bool, main.p_object, texture); return call_ret.*; }  // 8
texture_is_valid :: (main: *RenderingDevice, texture: RID) -> bool { call_ret := cast(*bool) sys_call("RenderingDevice", "texture_is_valid", 3521089500, bool, main.p_object, texture); return call_ret.*; }  // 9
texture_set_discardable :: (main: *RenderingDevice, texture: RID, discardable: bool) { sys_call("RenderingDevice", "texture_set_discardable", 1265174801, Nil, main.p_object, texture, discardable);  }  // 10
texture_is_discardable :: (main: *RenderingDevice, texture: RID) -> bool { call_ret := cast(*bool) sys_call("RenderingDevice", "texture_is_discardable", 3521089500, bool, main.p_object, texture); return call_ret.*; }  // 11
texture_copy :: (main: *RenderingDevice, from_texture: RID, to_texture: RID, from_pos: Vector3, to_pos: Vector3, size: Vector3, src_mipmap: int, dst_mipmap: int, src_layer: int, dst_layer: int) -> Error { call_ret := cast(*Error) sys_call("RenderingDevice", "texture_copy", 2859522160, Error, main.p_object, from_texture, to_texture, from_pos, to_pos, size, src_mipmap, dst_mipmap, src_layer, dst_layer); return call_ret.*; }  // 12
texture_clear :: (main: *RenderingDevice, texture: RID, color: Color, base_mipmap: int, mipmap_count: int, base_layer: int, layer_count: int) -> Error { call_ret := cast(*Error) sys_call("RenderingDevice", "texture_clear", 3477703247, Error, main.p_object, texture, color, base_mipmap, mipmap_count, base_layer, layer_count); return call_ret.*; }  // 13
texture_resolve_multisample :: (main: *RenderingDevice, from_texture: RID, to_texture: RID) -> Error { call_ret := cast(*Error) sys_call("RenderingDevice", "texture_resolve_multisample", 3181288260, Error, main.p_object, from_texture, to_texture); return call_ret.*; }  // 14
texture_get_format :: (main: *RenderingDevice, texture: RID) -> *RDTextureFormat { call_ret := cast(*RDTextureFormat) sys_call("RenderingDevice", "texture_get_format", 1374471690, RDTextureFormat, main.p_object, texture); return call_ret; }  // 15
texture_get_native_handle :: (main: *RenderingDevice, texture: RID) -> int { call_ret := cast(*int) sys_call("RenderingDevice", "texture_get_native_handle", 3917799429, int, main.p_object, texture); return call_ret.*; }  // 16
framebuffer_format_create :: (main: *RenderingDevice, attachments: [] RDAttachmentFormat) -> int { call_ret := cast(*int) sys_call("RenderingDevice", "framebuffer_format_create", 697032759, int, main.p_object, attachments); return call_ret.*; }  // 17
framebuffer_format_create_multipass :: (main: *RenderingDevice, attachments: [] RDAttachmentFormat, passes: [] RDFramebufferPass) -> int { call_ret := cast(*int) sys_call("RenderingDevice", "framebuffer_format_create_multipass", 2647479094, int, main.p_object, attachments, passes); return call_ret.*; }  // 18
framebuffer_format_create_empty :: (main: *RenderingDevice) -> int { call_ret := cast(*int) sys_call("RenderingDevice", "framebuffer_format_create_empty", 555930169, int, main.p_object); return call_ret.*; }  // 19
framebuffer_format_get_texture_samples :: (main: *RenderingDevice, format: int) -> RenderingDevice.TextureSamples { call_ret := cast(*RenderingDevice.TextureSamples) sys_call("RenderingDevice", "framebuffer_format_get_texture_samples", 4223391010, RenderingDevice.TextureSamples, main.p_object, format); return call_ret.*; }  // 20
framebuffer_create :: (main: *RenderingDevice, textures: [] RID) -> RID { call_ret := cast(*RID) sys_call("RenderingDevice", "framebuffer_create", 3284231055, RID, main.p_object, textures); return call_ret.*; }  // 21
framebuffer_create_multipass :: (main: *RenderingDevice, textures: [] RID, passes: [] RDFramebufferPass) -> RID { call_ret := cast(*RID) sys_call("RenderingDevice", "framebuffer_create_multipass", 1750306695, RID, main.p_object, textures, passes); return call_ret.*; }  // 22
framebuffer_create_empty :: (main: *RenderingDevice, size: Vector2i) -> RID { call_ret := cast(*RID) sys_call("RenderingDevice", "framebuffer_create_empty", 3058360618, RID, main.p_object, size); return call_ret.*; }  // 23
framebuffer_get_format :: (main: *RenderingDevice, framebuffer: RID) -> int { call_ret := cast(*int) sys_call("RenderingDevice", "framebuffer_get_format", 3917799429, int, main.p_object, framebuffer); return call_ret.*; }  // 24
framebuffer_is_valid :: (main: *RenderingDevice, framebuffer: RID) -> bool { call_ret := cast(*bool) sys_call("RenderingDevice", "framebuffer_is_valid", 4155700596, bool, main.p_object, framebuffer); return call_ret.*; }  // 25
sampler_create :: (main: *RenderingDevice, state: RDSamplerState) -> RID { call_ret := cast(*RID) sys_call("RenderingDevice", "sampler_create", 2327892535, RID, main.p_object, state); return call_ret.*; }  // 26
sampler_is_format_supported_for_filter :: (main: *RenderingDevice, format: RenderingDevice.DataFormat, sampler_filter: RenderingDevice.SamplerFilter) -> bool { call_ret := cast(*bool) sys_call("RenderingDevice", "sampler_is_format_supported_for_filter", 2247922238, bool, main.p_object, format, sampler_filter); return call_ret.*; }  // 27
vertex_buffer_create :: (main: *RenderingDevice, size_bytes: int) -> RID { call_ret := cast(*RID) sys_call("RenderingDevice", "vertex_buffer_create", 2089548973, RID, main.p_object, size_bytes); return call_ret.*; }  // 28
vertex_format_create :: (main: *RenderingDevice, vertex_descriptions: [] RDVertexAttribute) -> int { call_ret := cast(*int) sys_call("RenderingDevice", "vertex_format_create", 1242678479, int, main.p_object, vertex_descriptions); return call_ret.*; }  // 29
vertex_array_create :: (main: *RenderingDevice, vertex_count: int, vertex_format: int, src_buffers: [] RID) -> RID { call_ret := cast(*RID) sys_call("RenderingDevice", "vertex_array_create", 3799816279, RID, main.p_object, vertex_count, vertex_format, src_buffers); return call_ret.*; }  // 30
index_buffer_create :: (main: *RenderingDevice, size_indices: int, format: RenderingDevice.IndexBufferFormat) -> RID { call_ret := cast(*RID) sys_call("RenderingDevice", "index_buffer_create", 2368684885, RID, main.p_object, size_indices, format); return call_ret.*; }  // 31
index_array_create :: (main: *RenderingDevice, index_buffer: RID, index_offset: int, index_count: int) -> RID { call_ret := cast(*RID) sys_call("RenderingDevice", "index_array_create", 2256026069, RID, main.p_object, index_buffer, index_offset, index_count); return call_ret.*; }  // 32
shader_compile_spirv_from_source :: (main: *RenderingDevice, shader_source: RDShaderSource) -> *RDShaderSPIRV { call_ret := cast(*RDShaderSPIRV) sys_call("RenderingDevice", "shader_compile_spirv_from_source", 1178973306, RDShaderSPIRV, main.p_object, shader_source); return call_ret; }  // 33
shader_compile_binary_from_spirv :: (main: *RenderingDevice, spirv_data: RDShaderSPIRV) -> PackedByteArray { call_ret := cast(*PackedByteArray) sys_call("RenderingDevice", "shader_compile_binary_from_spirv", 134910450, PackedByteArray, main.p_object, spirv_data); return call_ret.*; }  // 34
shader_create_from_spirv :: (main: *RenderingDevice, spirv_data: RDShaderSPIRV) -> RID { call_ret := cast(*RID) sys_call("RenderingDevice", "shader_create_from_spirv", 342949005, RID, main.p_object, spirv_data); return call_ret.*; }  // 35
shader_create_from_bytecode :: (main: *RenderingDevice, binary_data: PackedByteArray) -> RID { call_ret := cast(*RID) sys_call("RenderingDevice", "shader_create_from_bytecode", 1687031350, RID, main.p_object, binary_data); return call_ret.*; }  // 36
shader_create_placeholder :: (main: *RenderingDevice) -> RID { call_ret := cast(*RID) sys_call("RenderingDevice", "shader_create_placeholder", 529393457, RID, main.p_object); return call_ret.*; }  // 37
shader_get_vertex_input_attribute_mask :: (main: *RenderingDevice, shader: RID) -> int { call_ret := cast(*int) sys_call("RenderingDevice", "shader_get_vertex_input_attribute_mask", 3917799429, int, main.p_object, shader); return call_ret.*; }  // 38
uniform_buffer_create :: (main: *RenderingDevice, size_bytes: int) -> RID { call_ret := cast(*RID) sys_call("RenderingDevice", "uniform_buffer_create", 2089548973, RID, main.p_object, size_bytes); return call_ret.*; }  // 39
storage_buffer_create :: (main: *RenderingDevice, size_bytes: int) -> RID { call_ret := cast(*RID) sys_call("RenderingDevice", "storage_buffer_create", 1609052553, RID, main.p_object, size_bytes); return call_ret.*; }  // 40
texture_buffer_create :: (main: *RenderingDevice, size_bytes: int, format: RenderingDevice.DataFormat) -> RID { call_ret := cast(*RID) sys_call("RenderingDevice", "texture_buffer_create", 1470338698, RID, main.p_object, size_bytes, format); return call_ret.*; }  // 41
uniform_set_create :: (main: *RenderingDevice, uniforms: [] RDUniform, shader: RID, shader_set: int) -> RID { call_ret := cast(*RID) sys_call("RenderingDevice", "uniform_set_create", 2280795797, RID, main.p_object, uniforms, shader, shader_set); return call_ret.*; }  // 42
uniform_set_is_valid :: (main: *RenderingDevice, uniform_set: RID) -> bool { call_ret := cast(*bool) sys_call("RenderingDevice", "uniform_set_is_valid", 3521089500, bool, main.p_object, uniform_set); return call_ret.*; }  // 43
buffer_copy :: (main: *RenderingDevice, src_buffer: RID, dst_buffer: RID, src_offset: int, dst_offset: int, size: int) -> Error { call_ret := cast(*Error) sys_call("RenderingDevice", "buffer_copy", 864257779, Error, main.p_object, src_buffer, dst_buffer, src_offset, dst_offset, size); return call_ret.*; }  // 44
buffer_update :: (main: *RenderingDevice, buffer: RID, offset: int, size_bytes: int, data: PackedByteArray) -> Error { call_ret := cast(*Error) sys_call("RenderingDevice", "buffer_update", 3454956949, Error, main.p_object, buffer, offset, size_bytes, data); return call_ret.*; }  // 45
buffer_clear :: (main: *RenderingDevice, buffer: RID, offset: int, size_bytes: int) -> Error { call_ret := cast(*Error) sys_call("RenderingDevice", "buffer_clear", 2452320800, Error, main.p_object, buffer, offset, size_bytes); return call_ret.*; }  // 46
buffer_get_data :: (main: *RenderingDevice, buffer: RID) -> PackedByteArray { call_ret := cast(*PackedByteArray) sys_call("RenderingDevice", "buffer_get_data", 3101830688, PackedByteArray, main.p_object, buffer); return call_ret.*; }  // 47
buffer_get_data_async :: (main: *RenderingDevice, buffer: RID, callback: Callable) -> Error { call_ret := cast(*Error) sys_call("RenderingDevice", "buffer_get_data_async", 2370287848, Error, main.p_object, buffer, callback); return call_ret.*; }  // 48
buffer_get_device_address :: (main: *RenderingDevice, buffer: RID) -> int { call_ret := cast(*int) sys_call("RenderingDevice", "buffer_get_device_address", 3917799429, int, main.p_object, buffer); return call_ret.*; }  // 49
render_pipeline_create :: (main: *RenderingDevice, shader: RID, framebuffer_format: int, vertex_format: int, primitive: RenderingDevice.RenderPrimitive, rasterization_state: RDPipelineRasterizationState, multisample_state: RDPipelineMultisampleState, stencil_state: RDPipelineDepthStencilState, color_blend_state: RDPipelineColorBlendState) -> RID { call_ret := cast(*RID) sys_call("RenderingDevice", "render_pipeline_create", 2385451958, RID, main.p_object, shader, framebuffer_format, vertex_format, primitive, rasterization_state, multisample_state, stencil_state, color_blend_state); return call_ret.*; }  // 50
render_pipeline_is_valid :: (main: *RenderingDevice, render_pipeline: RID) -> bool { call_ret := cast(*bool) sys_call("RenderingDevice", "render_pipeline_is_valid", 3521089500, bool, main.p_object, render_pipeline); return call_ret.*; }  // 51
compute_pipeline_create :: (main: *RenderingDevice, shader: RID) -> RID { call_ret := cast(*RID) sys_call("RenderingDevice", "compute_pipeline_create", 1448838280, RID, main.p_object, shader); return call_ret.*; }  // 52
compute_pipeline_is_valid :: (main: *RenderingDevice, compute_pipeline: RID) -> bool { call_ret := cast(*bool) sys_call("RenderingDevice", "compute_pipeline_is_valid", 3521089500, bool, main.p_object, compute_pipeline); return call_ret.*; }  // 53
screen_get_width :: (main: *RenderingDevice) -> int { call_ret := cast(*int) sys_call("RenderingDevice", "screen_get_width", 1591665591, int, main.p_object); return call_ret.*; }  // 54
screen_get_height :: (main: *RenderingDevice) -> int { call_ret := cast(*int) sys_call("RenderingDevice", "screen_get_height", 1591665591, int, main.p_object); return call_ret.*; }  // 55
screen_get_framebuffer_format :: (main: *RenderingDevice) -> int { call_ret := cast(*int) sys_call("RenderingDevice", "screen_get_framebuffer_format", 1591665591, int, main.p_object); return call_ret.*; }  // 56
draw_list_begin_for_screen :: (main: *RenderingDevice) -> int { call_ret := cast(*int) sys_call("RenderingDevice", "draw_list_begin_for_screen", 3988079995, int, main.p_object); return call_ret.*; }  // 57
draw_list_begin :: (main: *RenderingDevice, framebuffer: RID) -> int { call_ret := cast(*int) sys_call("RenderingDevice", "draw_list_begin", 1317926357, int, main.p_object, framebuffer); return call_ret.*; }  // 58
draw_list_begin_split :: (main: *RenderingDevice, framebuffer: RID, splits: int, initial_color_action: RenderingDevice.InitialAction, final_color_action: RenderingDevice.FinalAction, initial_depth_action: RenderingDevice.InitialAction, final_depth_action: RenderingDevice.FinalAction) -> PackedInt64Array { call_ret := cast(*PackedInt64Array) sys_call("RenderingDevice", "draw_list_begin_split", 2406300660, PackedInt64Array, main.p_object, framebuffer, splits, initial_color_action, final_color_action, initial_depth_action, final_depth_action); return call_ret.*; }  // 59
draw_list_set_blend_constants :: (main: *RenderingDevice, draw_list: int, color: Color) { sys_call("RenderingDevice", "draw_list_set_blend_constants", 2878471219, Nil, main.p_object, draw_list, color);  }  // 60
draw_list_bind_render_pipeline :: (main: *RenderingDevice, draw_list: int, render_pipeline: RID) { sys_call("RenderingDevice", "draw_list_bind_render_pipeline", 4040184819, Nil, main.p_object, draw_list, render_pipeline);  }  // 61
draw_list_bind_uniform_set :: (main: *RenderingDevice, draw_list: int, uniform_set: RID, set_index: int) { sys_call("RenderingDevice", "draw_list_bind_uniform_set", 749655778, Nil, main.p_object, draw_list, uniform_set, set_index);  }  // 62
draw_list_bind_vertex_array :: (main: *RenderingDevice, draw_list: int, vertex_array: RID) { sys_call("RenderingDevice", "draw_list_bind_vertex_array", 4040184819, Nil, main.p_object, draw_list, vertex_array);  }  // 63
draw_list_bind_index_array :: (main: *RenderingDevice, draw_list: int, index_array: RID) { sys_call("RenderingDevice", "draw_list_bind_index_array", 4040184819, Nil, main.p_object, draw_list, index_array);  }  // 64
draw_list_set_push_constant :: (main: *RenderingDevice, draw_list: int, buffer: PackedByteArray, size_bytes: int) { sys_call("RenderingDevice", "draw_list_set_push_constant", 2772371345, Nil, main.p_object, draw_list, buffer, size_bytes);  }  // 65
draw_list_draw :: (main: *RenderingDevice, draw_list: int, use_indices: bool, instances: int) { sys_call("RenderingDevice", "draw_list_draw", 4230067973, Nil, main.p_object, draw_list, use_indices, instances);  }  // 66
draw_list_draw_indirect :: (main: *RenderingDevice, draw_list: int, use_indices: bool, buffer: RID) { sys_call("RenderingDevice", "draw_list_draw_indirect", 1092133571, Nil, main.p_object, draw_list, use_indices, buffer);  }  // 67
draw_list_enable_scissor :: (main: *RenderingDevice, draw_list: int) { sys_call("RenderingDevice", "draw_list_enable_scissor", 244650101, Nil, main.p_object, draw_list);  }  // 68
draw_list_disable_scissor :: (main: *RenderingDevice, draw_list: int) { sys_call("RenderingDevice", "draw_list_disable_scissor", 1286410249, Nil, main.p_object, draw_list);  }  // 69
draw_list_switch_to_next_pass :: (main: *RenderingDevice) -> int { call_ret := cast(*int) sys_call("RenderingDevice", "draw_list_switch_to_next_pass", 2455072627, int, main.p_object); return call_ret.*; }  // 70
draw_list_switch_to_next_pass_split :: (main: *RenderingDevice, splits: int) -> PackedInt64Array { call_ret := cast(*PackedInt64Array) sys_call("RenderingDevice", "draw_list_switch_to_next_pass_split", 2865087369, PackedInt64Array, main.p_object, splits); return call_ret.*; }  // 71
draw_list_end :: (main: *RenderingDevice) { sys_call("RenderingDevice", "draw_list_end", 3218959716, Nil, main.p_object);  }  // 72
compute_list_begin :: (main: *RenderingDevice) -> int { call_ret := cast(*int) sys_call("RenderingDevice", "compute_list_begin", 2455072627, int, main.p_object); return call_ret.*; }  // 73
compute_list_bind_compute_pipeline :: (main: *RenderingDevice, compute_list: int, compute_pipeline: RID) { sys_call("RenderingDevice", "compute_list_bind_compute_pipeline", 4040184819, Nil, main.p_object, compute_list, compute_pipeline);  }  // 74
compute_list_set_push_constant :: (main: *RenderingDevice, compute_list: int, buffer: PackedByteArray, size_bytes: int) { sys_call("RenderingDevice", "compute_list_set_push_constant", 2772371345, Nil, main.p_object, compute_list, buffer, size_bytes);  }  // 75
compute_list_bind_uniform_set :: (main: *RenderingDevice, compute_list: int, uniform_set: RID, set_index: int) { sys_call("RenderingDevice", "compute_list_bind_uniform_set", 749655778, Nil, main.p_object, compute_list, uniform_set, set_index);  }  // 76
compute_list_dispatch :: (main: *RenderingDevice, compute_list: int, x_groups: int, y_groups: int, z_groups: int) { sys_call("RenderingDevice", "compute_list_dispatch", 4275841770, Nil, main.p_object, compute_list, x_groups, y_groups, z_groups);  }  // 77
compute_list_dispatch_indirect :: (main: *RenderingDevice, compute_list: int, buffer: RID, offset: int) { sys_call("RenderingDevice", "compute_list_dispatch_indirect", 749655778, Nil, main.p_object, compute_list, buffer, offset);  }  // 78
compute_list_add_barrier :: (main: *RenderingDevice, compute_list: int) { sys_call("RenderingDevice", "compute_list_add_barrier", 1286410249, Nil, main.p_object, compute_list);  }  // 79
compute_list_end :: (main: *RenderingDevice) { sys_call("RenderingDevice", "compute_list_end", 3218959716, Nil, main.p_object);  }  // 80
free_rid :: (main: *RenderingDevice, rid: RID) { sys_call("RenderingDevice", "free_rid", 2722037293, Nil, main.p_object, rid);  }  // 81
capture_timestamp :: (main: *RenderingDevice, name: string) { sys_call("RenderingDevice", "capture_timestamp", 83702148, Nil, main.p_object, name);  }  // 82
get_captured_timestamps_count :: (main: *RenderingDevice) -> int { call_ret := cast(*int) sys_call("RenderingDevice", "get_captured_timestamps_count", 3905245786, int, main.p_object); return call_ret.*; }  // 83
get_captured_timestamps_frame :: (main: *RenderingDevice) -> int { call_ret := cast(*int) sys_call("RenderingDevice", "get_captured_timestamps_frame", 3905245786, int, main.p_object); return call_ret.*; }  // 84
get_captured_timestamp_gpu_time :: (main: *RenderingDevice, index: int) -> int { call_ret := cast(*int) sys_call("RenderingDevice", "get_captured_timestamp_gpu_time", 923996154, int, main.p_object, index); return call_ret.*; }  // 85
get_captured_timestamp_cpu_time :: (main: *RenderingDevice, index: int) -> int { call_ret := cast(*int) sys_call("RenderingDevice", "get_captured_timestamp_cpu_time", 923996154, int, main.p_object, index); return call_ret.*; }  // 86
get_captured_timestamp_name :: (main: *RenderingDevice, index: int) -> gstring { call_ret := cast(*gstring) sys_call("RenderingDevice", "get_captured_timestamp_name", 844755477, gstring, main.p_object, index); return call_ret.*; }  // 87
has_feature :: (main: *RenderingDevice, feature: RenderingDevice.Features) -> bool { call_ret := cast(*bool) sys_call("RenderingDevice", "has_feature", 1772728326, bool, main.p_object, feature); return call_ret.*; }  // 88
limit_get :: (main: *RenderingDevice, limit: RenderingDevice.Limit) -> int { call_ret := cast(*int) sys_call("RenderingDevice", "limit_get", 1559202131, int, main.p_object, limit); return call_ret.*; }  // 89
get_frame_delay :: (main: *RenderingDevice) -> int { call_ret := cast(*int) sys_call("RenderingDevice", "get_frame_delay", 3905245786, int, main.p_object); return call_ret.*; }  // 90
submit :: (main: *RenderingDevice) { sys_call("RenderingDevice", "submit", 3218959716, Nil, main.p_object);  }  // 91
sync :: (main: *RenderingDevice) { sys_call("RenderingDevice", "sync", 3218959716, Nil, main.p_object);  }  // 92
barrier :: (main: *RenderingDevice) { sys_call("RenderingDevice", "barrier", 3718155691, Nil, main.p_object);  }  // 93
full_barrier :: (main: *RenderingDevice) { sys_call("RenderingDevice", "full_barrier", 3218959716, Nil, main.p_object);  }  // 94
create_local_device :: (main: *RenderingDevice) -> *RenderingDevice { call_ret := cast(*RenderingDevice) sys_call("RenderingDevice", "create_local_device", 2846302423, RenderingDevice, main.p_object); return call_ret; }  // 95
set_resource_name :: (main: *RenderingDevice, id: RID, name: string) { sys_call("RenderingDevice", "set_resource_name", 2726140452, Nil, main.p_object, id, name);  }  // 96
draw_command_begin_label :: (main: *RenderingDevice, name: string, color: Color) { sys_call("RenderingDevice", "draw_command_begin_label", 1636512886, Nil, main.p_object, name, color);  }  // 97
draw_command_insert_label :: (main: *RenderingDevice, name: string, color: Color) { sys_call("RenderingDevice", "draw_command_insert_label", 1636512886, Nil, main.p_object, name, color);  }  // 98
draw_command_end_label :: (main: *RenderingDevice) { sys_call("RenderingDevice", "draw_command_end_label", 3218959716, Nil, main.p_object);  }  // 99
get_device_vendor_name :: (main: *RenderingDevice) -> gstring { call_ret := cast(*gstring) sys_call("RenderingDevice", "get_device_vendor_name", 201670096, gstring, main.p_object); return call_ret.*; }  // 100
get_device_name :: (main: *RenderingDevice) -> gstring { call_ret := cast(*gstring) sys_call("RenderingDevice", "get_device_name", 201670096, gstring, main.p_object); return call_ret.*; }  // 101
get_device_pipeline_cache_uuid :: (main: *RenderingDevice) -> gstring { call_ret := cast(*gstring) sys_call("RenderingDevice", "get_device_pipeline_cache_uuid", 201670096, gstring, main.p_object); return call_ret.*; }  // 102
get_memory_usage :: (main: *RenderingDevice, type: RenderingDevice.MemoryType) -> int { call_ret := cast(*int) sys_call("RenderingDevice", "get_memory_usage", 251690689, int, main.p_object, type); return call_ret.*; }  // 103
get_driver_resource :: (main: *RenderingDevice, resource: RenderingDevice.DriverResource, rid: RID, index: int) -> int { call_ret := cast(*int) sys_call("RenderingDevice", "get_driver_resource", 501815484, int, main.p_object, resource, rid, index); return call_ret.*; }  // 104
get_perf_report :: (main: *RenderingDevice) -> gstring { call_ret := cast(*gstring) sys_call("RenderingDevice", "get_perf_report", 201670096, gstring, main.p_object); return call_ret.*; }  // 105
get_driver_and_device_memory_report :: (main: *RenderingDevice) -> gstring { call_ret := cast(*gstring) sys_call("RenderingDevice", "get_driver_and_device_memory_report", 201670096, gstring, main.p_object); return call_ret.*; }  // 106
get_tracked_object_name :: (main: *RenderingDevice, type_index: int) -> gstring { call_ret := cast(*gstring) sys_call("RenderingDevice", "get_tracked_object_name", 844755477, gstring, main.p_object, type_index); return call_ret.*; }  // 107
get_tracked_object_type_count :: (main: *RenderingDevice) -> int { call_ret := cast(*int) sys_call("RenderingDevice", "get_tracked_object_type_count", 3905245786, int, main.p_object); return call_ret.*; }  // 108
get_driver_total_memory :: (main: *RenderingDevice) -> int { call_ret := cast(*int) sys_call("RenderingDevice", "get_driver_total_memory", 3905245786, int, main.p_object); return call_ret.*; }  // 109
get_driver_allocation_count :: (main: *RenderingDevice) -> int { call_ret := cast(*int) sys_call("RenderingDevice", "get_driver_allocation_count", 3905245786, int, main.p_object); return call_ret.*; }  // 110
get_driver_memory_by_object_type :: (main: *RenderingDevice, type: int) -> int { call_ret := cast(*int) sys_call("RenderingDevice", "get_driver_memory_by_object_type", 923996154, int, main.p_object, type); return call_ret.*; }  // 111
get_driver_allocs_by_object_type :: (main: *RenderingDevice, type: int) -> int { call_ret := cast(*int) sys_call("RenderingDevice", "get_driver_allocs_by_object_type", 923996154, int, main.p_object, type); return call_ret.*; }  // 112
get_device_total_memory :: (main: *RenderingDevice) -> int { call_ret := cast(*int) sys_call("RenderingDevice", "get_device_total_memory", 3905245786, int, main.p_object); return call_ret.*; }  // 113
get_device_allocation_count :: (main: *RenderingDevice) -> int { call_ret := cast(*int) sys_call("RenderingDevice", "get_device_allocation_count", 3905245786, int, main.p_object); return call_ret.*; }  // 114
get_device_memory_by_object_type :: (main: *RenderingDevice, type: int) -> int { call_ret := cast(*int) sys_call("RenderingDevice", "get_device_memory_by_object_type", 923996154, int, main.p_object, type); return call_ret.*; }  // 115
get_device_allocs_by_object_type :: (main: *RenderingDevice, type: int) -> int { call_ret := cast(*int) sys_call("RenderingDevice", "get_device_allocs_by_object_type", 923996154, int, main.p_object, type); return call_ret.*; }  // 116

texture_2d_create :: (main: *RenderingServer, image: Image) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "texture_2d_create", 2010018390, RID, main.p_object, image); return call_ret.*; }  // 0
texture_2d_layered_create :: (main: *RenderingServer, layers: [] Image, layered_type: RenderingServer.TextureLayeredType) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "texture_2d_layered_create", 913689023, RID, main.p_object, layers, layered_type); return call_ret.*; }  // 1
texture_3d_create :: (main: *RenderingServer, format: Image.Format, width: int, height: int, depth: int, mipmaps: bool, data: [] Image) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "texture_3d_create", 4036838706, RID, main.p_object, format, width, height, depth, mipmaps, data); return call_ret.*; }  // 2
texture_proxy_create :: (main: *RenderingServer, base: RID) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "texture_proxy_create", 41030802, RID, main.p_object, base); return call_ret.*; }  // 3
texture_create_from_native_handle :: (main: *RenderingServer, type: RenderingServer.TextureType, format: Image.Format, native_handle: int, width: int, height: int, depth: int) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "texture_create_from_native_handle", 1682977582, RID, main.p_object, type, format, native_handle, width, height, depth); return call_ret.*; }  // 4
texture_2d_update :: (main: *RenderingServer, texture: RID, image: Image, layer: int) { sys_call("RenderingServer", "texture_2d_update", 999539803, Nil, main.p_object, texture, image, layer);  }  // 5
texture_3d_update :: (main: *RenderingServer, texture: RID, data: [] Image) { sys_call("RenderingServer", "texture_3d_update", 684822712, Nil, main.p_object, texture, data);  }  // 6
texture_proxy_update :: (main: *RenderingServer, texture: RID, proxy_to: RID) { sys_call("RenderingServer", "texture_proxy_update", 395945892, Nil, main.p_object, texture, proxy_to);  }  // 7
texture_2d_placeholder_create :: (main: *RenderingServer) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "texture_2d_placeholder_create", 529393457, RID, main.p_object); return call_ret.*; }  // 8
texture_2d_layered_placeholder_create :: (main: *RenderingServer, layered_type: RenderingServer.TextureLayeredType) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "texture_2d_layered_placeholder_create", 1394585590, RID, main.p_object, layered_type); return call_ret.*; }  // 9
texture_3d_placeholder_create :: (main: *RenderingServer) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "texture_3d_placeholder_create", 529393457, RID, main.p_object); return call_ret.*; }  // 10
texture_2d_get :: (main: *RenderingServer, texture: RID) -> *Image { call_ret := cast(*Image) sys_call("RenderingServer", "texture_2d_get", 4206205781, Image, main.p_object, texture); return call_ret; }  // 11
texture_2d_layer_get :: (main: *RenderingServer, texture: RID, layer: int) -> *Image { call_ret := cast(*Image) sys_call("RenderingServer", "texture_2d_layer_get", 2705440895, Image, main.p_object, texture, layer); return call_ret; }  // 12
texture_3d_get :: (main: *RenderingServer, texture: RID) -> [] Image { call_ret := cast(*[] Image) sys_call("RenderingServer", "texture_3d_get", 2684255073, [] Image, main.p_object, texture); return call_ret.*; }  // 13
texture_replace :: (main: *RenderingServer, texture: RID, by_texture: RID) { sys_call("RenderingServer", "texture_replace", 395945892, Nil, main.p_object, texture, by_texture);  }  // 14
texture_set_size_override :: (main: *RenderingServer, texture: RID, width: int, height: int) { sys_call("RenderingServer", "texture_set_size_override", 4288446313, Nil, main.p_object, texture, width, height);  }  // 15
texture_set_path :: (main: *RenderingServer, texture: RID, path: string) { sys_call("RenderingServer", "texture_set_path", 2726140452, Nil, main.p_object, texture, path);  }  // 16
texture_get_path :: (main: *RenderingServer, texture: RID) -> gstring { call_ret := cast(*gstring) sys_call("RenderingServer", "texture_get_path", 642473191, gstring, main.p_object, texture); return call_ret.*; }  // 17
texture_get_format :: (main: *RenderingServer, texture: RID) -> Image.Format { call_ret := cast(*Image.Format) sys_call("RenderingServer", "texture_get_format", 1932918979, Image.Format, main.p_object, texture); return call_ret.*; }  // 18
texture_set_force_redraw_if_visible :: (main: *RenderingServer, texture: RID, enable: bool) { sys_call("RenderingServer", "texture_set_force_redraw_if_visible", 1265174801, Nil, main.p_object, texture, enable);  }  // 19
texture_rd_create :: (main: *RenderingServer, rd_texture: RID) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "texture_rd_create", 1434128712, RID, main.p_object, rd_texture); return call_ret.*; }  // 20
texture_get_rd_texture :: (main: *RenderingServer, texture: RID) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "texture_get_rd_texture", 2790148051, RID, main.p_object, texture); return call_ret.*; }  // 21
texture_get_native_handle :: (main: *RenderingServer, texture: RID) -> int { call_ret := cast(*int) sys_call("RenderingServer", "texture_get_native_handle", 1834114100, int, main.p_object, texture); return call_ret.*; }  // 22
shader_create :: (main: *RenderingServer) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "shader_create", 529393457, RID, main.p_object); return call_ret.*; }  // 23
shader_set_code :: (main: *RenderingServer, shader: RID, code: string) { sys_call("RenderingServer", "shader_set_code", 2726140452, Nil, main.p_object, shader, code);  }  // 24
shader_set_path_hint :: (main: *RenderingServer, shader: RID, path: string) { sys_call("RenderingServer", "shader_set_path_hint", 2726140452, Nil, main.p_object, shader, path);  }  // 25
shader_get_code :: (main: *RenderingServer, shader: RID) -> gstring { call_ret := cast(*gstring) sys_call("RenderingServer", "shader_get_code", 642473191, gstring, main.p_object, shader); return call_ret.*; }  // 26
get_shader_parameter_list :: (main: *RenderingServer, shader: RID) -> [] Dictionary { call_ret := cast(*[] Dictionary) sys_call("RenderingServer", "get_shader_parameter_list", 2684255073, [] Dictionary, main.p_object, shader); return call_ret.*; }  // 27
shader_get_parameter_default :: (main: *RenderingServer, shader: RID, name: string) -> Variant { call_ret := cast(*Variant) sys_call("RenderingServer", "shader_get_parameter_default", 2621281810, Variant, main.p_object, shader, name); return call_ret.*; }  // 28
shader_set_default_texture_parameter :: (main: *RenderingServer, shader: RID, name: string, texture: RID) { sys_call("RenderingServer", "shader_set_default_texture_parameter", 4094001817, Nil, main.p_object, shader, name, texture);  }  // 29
shader_get_default_texture_parameter :: (main: *RenderingServer, shader: RID, name: string) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "shader_get_default_texture_parameter", 1464608890, RID, main.p_object, shader, name); return call_ret.*; }  // 30
material_create :: (main: *RenderingServer) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "material_create", 529393457, RID, main.p_object); return call_ret.*; }  // 31
material_set_shader :: (main: *RenderingServer, shader_material: RID, shader: RID) { sys_call("RenderingServer", "material_set_shader", 395945892, Nil, main.p_object, shader_material, shader);  }  // 32
material_set_param :: (main: *RenderingServer, material: RID, parameter: string, value: Variant) { sys_call("RenderingServer", "material_set_param", 3477296213, Nil, main.p_object, material, parameter, value);  }  // 33
material_get_param :: (main: *RenderingServer, material: RID, parameter: string) -> Variant { call_ret := cast(*Variant) sys_call("RenderingServer", "material_get_param", 2621281810, Variant, main.p_object, material, parameter); return call_ret.*; }  // 34
material_set_render_priority :: (main: *RenderingServer, material: RID, priority: int) { sys_call("RenderingServer", "material_set_render_priority", 3411492887, Nil, main.p_object, material, priority);  }  // 35
material_set_next_pass :: (main: *RenderingServer, material: RID, next_material: RID) { sys_call("RenderingServer", "material_set_next_pass", 395945892, Nil, main.p_object, material, next_material);  }  // 36
mesh_create_from_surfaces :: (main: *RenderingServer, surfaces: [] Dictionary) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "mesh_create_from_surfaces", 4291747531, RID, main.p_object, surfaces); return call_ret.*; }  // 37
mesh_create :: (main: *RenderingServer) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "mesh_create", 529393457, RID, main.p_object); return call_ret.*; }  // 38
mesh_surface_get_format_offset :: (main: *RenderingServer, format: RenderingServer.ArrayFormat, vertex_count: int, array_index: int) -> int { call_ret := cast(*int) sys_call("RenderingServer", "mesh_surface_get_format_offset", 2981368685, int, main.p_object, format, vertex_count, array_index); return call_ret.*; }  // 39
mesh_surface_get_format_vertex_stride :: (main: *RenderingServer, format: RenderingServer.ArrayFormat, vertex_count: int) -> int { call_ret := cast(*int) sys_call("RenderingServer", "mesh_surface_get_format_vertex_stride", 3188363337, int, main.p_object, format, vertex_count); return call_ret.*; }  // 40
mesh_surface_get_format_normal_tangent_stride :: (main: *RenderingServer, format: RenderingServer.ArrayFormat, vertex_count: int) -> int { call_ret := cast(*int) sys_call("RenderingServer", "mesh_surface_get_format_normal_tangent_stride", 3188363337, int, main.p_object, format, vertex_count); return call_ret.*; }  // 41
mesh_surface_get_format_attribute_stride :: (main: *RenderingServer, format: RenderingServer.ArrayFormat, vertex_count: int) -> int { call_ret := cast(*int) sys_call("RenderingServer", "mesh_surface_get_format_attribute_stride", 3188363337, int, main.p_object, format, vertex_count); return call_ret.*; }  // 42
mesh_surface_get_format_skin_stride :: (main: *RenderingServer, format: RenderingServer.ArrayFormat, vertex_count: int) -> int { call_ret := cast(*int) sys_call("RenderingServer", "mesh_surface_get_format_skin_stride", 3188363337, int, main.p_object, format, vertex_count); return call_ret.*; }  // 43
mesh_add_surface :: (main: *RenderingServer, mesh: RID, surface: Dictionary) { sys_call("RenderingServer", "mesh_add_surface", 1217542888, Nil, main.p_object, mesh, surface);  }  // 44
mesh_add_surface_from_arrays :: (main: *RenderingServer, mesh: RID, primitive: RenderingServer.PrimitiveType, arrays: Array) { sys_call("RenderingServer", "mesh_add_surface_from_arrays", 2342446560, Nil, main.p_object, mesh, primitive, arrays);  }  // 45
mesh_get_blend_shape_count :: (main: *RenderingServer, mesh: RID) -> int { call_ret := cast(*int) sys_call("RenderingServer", "mesh_get_blend_shape_count", 2198884583, int, main.p_object, mesh); return call_ret.*; }  // 46
mesh_set_blend_shape_mode :: (main: *RenderingServer, mesh: RID, mode: RenderingServer.BlendShapeMode) { sys_call("RenderingServer", "mesh_set_blend_shape_mode", 1294662092, Nil, main.p_object, mesh, mode);  }  // 47
mesh_get_blend_shape_mode :: (main: *RenderingServer, mesh: RID) -> RenderingServer.BlendShapeMode { call_ret := cast(*RenderingServer.BlendShapeMode) sys_call("RenderingServer", "mesh_get_blend_shape_mode", 4282291819, RenderingServer.BlendShapeMode, main.p_object, mesh); return call_ret.*; }  // 48
mesh_surface_set_material :: (main: *RenderingServer, mesh: RID, surface: int, material: RID) { sys_call("RenderingServer", "mesh_surface_set_material", 2310537182, Nil, main.p_object, mesh, surface, material);  }  // 49
mesh_surface_get_material :: (main: *RenderingServer, mesh: RID, surface: int) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "mesh_surface_get_material", 1066463050, RID, main.p_object, mesh, surface); return call_ret.*; }  // 50
mesh_get_surface :: (main: *RenderingServer, mesh: RID, surface: int) -> Dictionary { call_ret := cast(*Dictionary) sys_call("RenderingServer", "mesh_get_surface", 186674697, Dictionary, main.p_object, mesh, surface); return call_ret.*; }  // 51
mesh_surface_get_arrays :: (main: *RenderingServer, mesh: RID, surface: int) -> Array { call_ret := cast(*Array) sys_call("RenderingServer", "mesh_surface_get_arrays", 1778388067, Array, main.p_object, mesh, surface); return call_ret.*; }  // 52
mesh_surface_get_blend_shape_arrays :: (main: *RenderingServer, mesh: RID, surface: int) -> [] Array { call_ret := cast(*[] Array) sys_call("RenderingServer", "mesh_surface_get_blend_shape_arrays", 1778388067, [] Array, main.p_object, mesh, surface); return call_ret.*; }  // 53
mesh_get_surface_count :: (main: *RenderingServer, mesh: RID) -> int { call_ret := cast(*int) sys_call("RenderingServer", "mesh_get_surface_count", 2198884583, int, main.p_object, mesh); return call_ret.*; }  // 54
mesh_set_custom_aabb :: (main: *RenderingServer, mesh: RID, aabb: AABB) { sys_call("RenderingServer", "mesh_set_custom_aabb", 3696536120, Nil, main.p_object, mesh, aabb);  }  // 55
mesh_get_custom_aabb :: (main: *RenderingServer, mesh: RID) -> AABB { call_ret := cast(*AABB) sys_call("RenderingServer", "mesh_get_custom_aabb", 974181306, AABB, main.p_object, mesh); return call_ret.*; }  // 56
mesh_surface_remove :: (main: *RenderingServer, mesh: RID, surface: int) { sys_call("RenderingServer", "mesh_surface_remove", 3411492887, Nil, main.p_object, mesh, surface);  }  // 57
mesh_clear :: (main: *RenderingServer, mesh: RID) { sys_call("RenderingServer", "mesh_clear", 2722037293, Nil, main.p_object, mesh);  }  // 58
mesh_surface_update_vertex_region :: (main: *RenderingServer, mesh: RID, surface: int, offset: int, data: PackedByteArray) { sys_call("RenderingServer", "mesh_surface_update_vertex_region", 2900195149, Nil, main.p_object, mesh, surface, offset, data);  }  // 59
mesh_surface_update_attribute_region :: (main: *RenderingServer, mesh: RID, surface: int, offset: int, data: PackedByteArray) { sys_call("RenderingServer", "mesh_surface_update_attribute_region", 2900195149, Nil, main.p_object, mesh, surface, offset, data);  }  // 60
mesh_surface_update_skin_region :: (main: *RenderingServer, mesh: RID, surface: int, offset: int, data: PackedByteArray) { sys_call("RenderingServer", "mesh_surface_update_skin_region", 2900195149, Nil, main.p_object, mesh, surface, offset, data);  }  // 61
mesh_set_shadow_mesh :: (main: *RenderingServer, mesh: RID, shadow_mesh: RID) { sys_call("RenderingServer", "mesh_set_shadow_mesh", 395945892, Nil, main.p_object, mesh, shadow_mesh);  }  // 62
multimesh_create :: (main: *RenderingServer) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "multimesh_create", 529393457, RID, main.p_object); return call_ret.*; }  // 63
multimesh_allocate_data :: (main: *RenderingServer, multimesh: RID, instances: int, transform_format: RenderingServer.MultimeshTransformFormat) { sys_call("RenderingServer", "multimesh_allocate_data", 557240154, Nil, main.p_object, multimesh, instances, transform_format);  }  // 64
multimesh_get_instance_count :: (main: *RenderingServer, multimesh: RID) -> int { call_ret := cast(*int) sys_call("RenderingServer", "multimesh_get_instance_count", 2198884583, int, main.p_object, multimesh); return call_ret.*; }  // 65
multimesh_set_mesh :: (main: *RenderingServer, multimesh: RID, mesh: RID) { sys_call("RenderingServer", "multimesh_set_mesh", 395945892, Nil, main.p_object, multimesh, mesh);  }  // 66
multimesh_instance_set_transform :: (main: *RenderingServer, multimesh: RID, index: int, transform: Transform3D) { sys_call("RenderingServer", "multimesh_instance_set_transform", 675327471, Nil, main.p_object, multimesh, index, transform);  }  // 67
multimesh_instance_set_transform_2d :: (main: *RenderingServer, multimesh: RID, index: int, transform: Transform2D) { sys_call("RenderingServer", "multimesh_instance_set_transform_2d", 736082694, Nil, main.p_object, multimesh, index, transform);  }  // 68
multimesh_instance_set_color :: (main: *RenderingServer, multimesh: RID, index: int, color: Color) { sys_call("RenderingServer", "multimesh_instance_set_color", 176975443, Nil, main.p_object, multimesh, index, color);  }  // 69
multimesh_instance_set_custom_data :: (main: *RenderingServer, multimesh: RID, index: int, custom_data: Color) { sys_call("RenderingServer", "multimesh_instance_set_custom_data", 176975443, Nil, main.p_object, multimesh, index, custom_data);  }  // 70
multimesh_get_mesh :: (main: *RenderingServer, multimesh: RID) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "multimesh_get_mesh", 3814569979, RID, main.p_object, multimesh); return call_ret.*; }  // 71
multimesh_get_aabb :: (main: *RenderingServer, multimesh: RID) -> AABB { call_ret := cast(*AABB) sys_call("RenderingServer", "multimesh_get_aabb", 974181306, AABB, main.p_object, multimesh); return call_ret.*; }  // 72
multimesh_set_custom_aabb :: (main: *RenderingServer, multimesh: RID, aabb: AABB) { sys_call("RenderingServer", "multimesh_set_custom_aabb", 3696536120, Nil, main.p_object, multimesh, aabb);  }  // 73
multimesh_get_custom_aabb :: (main: *RenderingServer, multimesh: RID) -> AABB { call_ret := cast(*AABB) sys_call("RenderingServer", "multimesh_get_custom_aabb", 974181306, AABB, main.p_object, multimesh); return call_ret.*; }  // 74
multimesh_instance_get_transform :: (main: *RenderingServer, multimesh: RID, index: int) -> Transform3D { call_ret := cast(*Transform3D) sys_call("RenderingServer", "multimesh_instance_get_transform", 1050775521, Transform3D, main.p_object, multimesh, index); return call_ret.*; }  // 75
multimesh_instance_get_transform_2d :: (main: *RenderingServer, multimesh: RID, index: int) -> Transform2D { call_ret := cast(*Transform2D) sys_call("RenderingServer", "multimesh_instance_get_transform_2d", 1324854622, Transform2D, main.p_object, multimesh, index); return call_ret.*; }  // 76
multimesh_instance_get_color :: (main: *RenderingServer, multimesh: RID, index: int) -> Color { call_ret := cast(*Color) sys_call("RenderingServer", "multimesh_instance_get_color", 2946315076, Color, main.p_object, multimesh, index); return call_ret.*; }  // 77
multimesh_instance_get_custom_data :: (main: *RenderingServer, multimesh: RID, index: int) -> Color { call_ret := cast(*Color) sys_call("RenderingServer", "multimesh_instance_get_custom_data", 2946315076, Color, main.p_object, multimesh, index); return call_ret.*; }  // 78
multimesh_set_visible_instances :: (main: *RenderingServer, multimesh: RID, visible: int) { sys_call("RenderingServer", "multimesh_set_visible_instances", 3411492887, Nil, main.p_object, multimesh, visible);  }  // 79
multimesh_get_visible_instances :: (main: *RenderingServer, multimesh: RID) -> int { call_ret := cast(*int) sys_call("RenderingServer", "multimesh_get_visible_instances", 2198884583, int, main.p_object, multimesh); return call_ret.*; }  // 80
multimesh_set_buffer :: (main: *RenderingServer, multimesh: RID, buffer: PackedFloat32Array) { sys_call("RenderingServer", "multimesh_set_buffer", 2960552364, Nil, main.p_object, multimesh, buffer);  }  // 81
multimesh_get_command_buffer_rd_rid :: (main: *RenderingServer, multimesh: RID) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "multimesh_get_command_buffer_rd_rid", 3814569979, RID, main.p_object, multimesh); return call_ret.*; }  // 82
multimesh_get_buffer_rd_rid :: (main: *RenderingServer, multimesh: RID) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "multimesh_get_buffer_rd_rid", 3814569979, RID, main.p_object, multimesh); return call_ret.*; }  // 83
multimesh_get_buffer :: (main: *RenderingServer, multimesh: RID) -> PackedFloat32Array { call_ret := cast(*PackedFloat32Array) sys_call("RenderingServer", "multimesh_get_buffer", 3964669176, PackedFloat32Array, main.p_object, multimesh); return call_ret.*; }  // 84
multimesh_set_buffer_interpolated :: (main: *RenderingServer, multimesh: RID, buffer: PackedFloat32Array, buffer_previous: PackedFloat32Array) { sys_call("RenderingServer", "multimesh_set_buffer_interpolated", 659844711, Nil, main.p_object, multimesh, buffer, buffer_previous);  }  // 85
multimesh_set_physics_interpolated :: (main: *RenderingServer, multimesh: RID, interpolated: bool) { sys_call("RenderingServer", "multimesh_set_physics_interpolated", 1265174801, Nil, main.p_object, multimesh, interpolated);  }  // 86
multimesh_set_physics_interpolation_quality :: (main: *RenderingServer, multimesh: RID, quality: RenderingServer.MultimeshPhysicsInterpolationQuality) { sys_call("RenderingServer", "multimesh_set_physics_interpolation_quality", 3934808223, Nil, main.p_object, multimesh, quality);  }  // 87
multimesh_instance_reset_physics_interpolation :: (main: *RenderingServer, multimesh: RID, index: int) { sys_call("RenderingServer", "multimesh_instance_reset_physics_interpolation", 3411492887, Nil, main.p_object, multimesh, index);  }  // 88
skeleton_create :: (main: *RenderingServer) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "skeleton_create", 529393457, RID, main.p_object); return call_ret.*; }  // 89
skeleton_allocate_data :: (main: *RenderingServer, skeleton: RID, bones: int) { sys_call("RenderingServer", "skeleton_allocate_data", 1904426712, Nil, main.p_object, skeleton, bones);  }  // 90
skeleton_get_bone_count :: (main: *RenderingServer, skeleton: RID) -> int { call_ret := cast(*int) sys_call("RenderingServer", "skeleton_get_bone_count", 2198884583, int, main.p_object, skeleton); return call_ret.*; }  // 91
skeleton_bone_set_transform :: (main: *RenderingServer, skeleton: RID, bone: int, transform: Transform3D) { sys_call("RenderingServer", "skeleton_bone_set_transform", 675327471, Nil, main.p_object, skeleton, bone, transform);  }  // 92
skeleton_bone_get_transform :: (main: *RenderingServer, skeleton: RID, bone: int) -> Transform3D { call_ret := cast(*Transform3D) sys_call("RenderingServer", "skeleton_bone_get_transform", 1050775521, Transform3D, main.p_object, skeleton, bone); return call_ret.*; }  // 93
skeleton_bone_set_transform_2d :: (main: *RenderingServer, skeleton: RID, bone: int, transform: Transform2D) { sys_call("RenderingServer", "skeleton_bone_set_transform_2d", 736082694, Nil, main.p_object, skeleton, bone, transform);  }  // 94
skeleton_bone_get_transform_2d :: (main: *RenderingServer, skeleton: RID, bone: int) -> Transform2D { call_ret := cast(*Transform2D) sys_call("RenderingServer", "skeleton_bone_get_transform_2d", 1324854622, Transform2D, main.p_object, skeleton, bone); return call_ret.*; }  // 95
skeleton_set_base_transform_2d :: (main: *RenderingServer, skeleton: RID, base_transform: Transform2D) { sys_call("RenderingServer", "skeleton_set_base_transform_2d", 1246044741, Nil, main.p_object, skeleton, base_transform);  }  // 96
directional_light_create :: (main: *RenderingServer) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "directional_light_create", 529393457, RID, main.p_object); return call_ret.*; }  // 97
omni_light_create :: (main: *RenderingServer) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "omni_light_create", 529393457, RID, main.p_object); return call_ret.*; }  // 98
spot_light_create :: (main: *RenderingServer) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "spot_light_create", 529393457, RID, main.p_object); return call_ret.*; }  // 99
light_set_color :: (main: *RenderingServer, light: RID, color: Color) { sys_call("RenderingServer", "light_set_color", 2948539648, Nil, main.p_object, light, color);  }  // 100
light_set_param :: (main: *RenderingServer, light: RID, param: RenderingServer.LightParam, value: float) { sys_call("RenderingServer", "light_set_param", 501936875, Nil, main.p_object, light, param, value);  }  // 101
light_set_shadow :: (main: *RenderingServer, light: RID, enabled: bool) { sys_call("RenderingServer", "light_set_shadow", 1265174801, Nil, main.p_object, light, enabled);  }  // 102
light_set_projector :: (main: *RenderingServer, light: RID, texture: RID) { sys_call("RenderingServer", "light_set_projector", 395945892, Nil, main.p_object, light, texture);  }  // 103
light_set_negative :: (main: *RenderingServer, light: RID, enable: bool) { sys_call("RenderingServer", "light_set_negative", 1265174801, Nil, main.p_object, light, enable);  }  // 104
light_set_cull_mask :: (main: *RenderingServer, light: RID, mask: int) { sys_call("RenderingServer", "light_set_cull_mask", 3411492887, Nil, main.p_object, light, mask);  }  // 105
light_set_distance_fade :: (main: *RenderingServer, decal: RID, enabled: bool, begin: float, shadow: float, length: float) { sys_call("RenderingServer", "light_set_distance_fade", 1622292572, Nil, main.p_object, decal, enabled, begin, shadow, length);  }  // 106
light_set_reverse_cull_face_mode :: (main: *RenderingServer, light: RID, enabled: bool) { sys_call("RenderingServer", "light_set_reverse_cull_face_mode", 1265174801, Nil, main.p_object, light, enabled);  }  // 107
light_set_shadow_caster_mask :: (main: *RenderingServer, light: RID, mask: int) { sys_call("RenderingServer", "light_set_shadow_caster_mask", 3411492887, Nil, main.p_object, light, mask);  }  // 108
light_set_bake_mode :: (main: *RenderingServer, light: RID, bake_mode: RenderingServer.LightBakeMode) { sys_call("RenderingServer", "light_set_bake_mode", 1048525260, Nil, main.p_object, light, bake_mode);  }  // 109
light_set_max_sdfgi_cascade :: (main: *RenderingServer, light: RID, cascade: int) { sys_call("RenderingServer", "light_set_max_sdfgi_cascade", 3411492887, Nil, main.p_object, light, cascade);  }  // 110
light_omni_set_shadow_mode :: (main: *RenderingServer, light: RID, mode: RenderingServer.LightOmniShadowMode) { sys_call("RenderingServer", "light_omni_set_shadow_mode", 2552677200, Nil, main.p_object, light, mode);  }  // 111
light_directional_set_shadow_mode :: (main: *RenderingServer, light: RID, mode: RenderingServer.LightDirectionalShadowMode) { sys_call("RenderingServer", "light_directional_set_shadow_mode", 380462970, Nil, main.p_object, light, mode);  }  // 112
light_directional_set_blend_splits :: (main: *RenderingServer, light: RID, enable: bool) { sys_call("RenderingServer", "light_directional_set_blend_splits", 1265174801, Nil, main.p_object, light, enable);  }  // 113
light_directional_set_sky_mode :: (main: *RenderingServer, light: RID, mode: RenderingServer.LightDirectionalSkyMode) { sys_call("RenderingServer", "light_directional_set_sky_mode", 2559740754, Nil, main.p_object, light, mode);  }  // 114
light_projectors_set_filter :: (main: *RenderingServer, filter: RenderingServer.LightProjectorFilter) { sys_call("RenderingServer", "light_projectors_set_filter", 43944325, Nil, main.p_object, filter);  }  // 115
lightmaps_set_bicubic_filter :: (main: *RenderingServer, enable: bool) { sys_call("RenderingServer", "lightmaps_set_bicubic_filter", 2586408642, Nil, main.p_object, enable);  }  // 116
positional_soft_shadow_filter_set_quality :: (main: *RenderingServer, quality: RenderingServer.ShadowQuality) { sys_call("RenderingServer", "positional_soft_shadow_filter_set_quality", 3613045266, Nil, main.p_object, quality);  }  // 117
directional_soft_shadow_filter_set_quality :: (main: *RenderingServer, quality: RenderingServer.ShadowQuality) { sys_call("RenderingServer", "directional_soft_shadow_filter_set_quality", 3613045266, Nil, main.p_object, quality);  }  // 118
directional_shadow_atlas_set_size :: (main: *RenderingServer, size: int, is_16bits: bool) { sys_call("RenderingServer", "directional_shadow_atlas_set_size", 300928843, Nil, main.p_object, size, is_16bits);  }  // 119
reflection_probe_create :: (main: *RenderingServer) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "reflection_probe_create", 529393457, RID, main.p_object); return call_ret.*; }  // 120
reflection_probe_set_update_mode :: (main: *RenderingServer, probe: RID, mode: RenderingServer.ReflectionProbeUpdateMode) { sys_call("RenderingServer", "reflection_probe_set_update_mode", 3853670147, Nil, main.p_object, probe, mode);  }  // 121
reflection_probe_set_intensity :: (main: *RenderingServer, probe: RID, intensity: float) { sys_call("RenderingServer", "reflection_probe_set_intensity", 1794382983, Nil, main.p_object, probe, intensity);  }  // 122
reflection_probe_set_blend_distance :: (main: *RenderingServer, probe: RID, blend_distance: float) { sys_call("RenderingServer", "reflection_probe_set_blend_distance", 1794382983, Nil, main.p_object, probe, blend_distance);  }  // 123
reflection_probe_set_ambient_mode :: (main: *RenderingServer, probe: RID, mode: RenderingServer.ReflectionProbeAmbientMode) { sys_call("RenderingServer", "reflection_probe_set_ambient_mode", 184163074, Nil, main.p_object, probe, mode);  }  // 124
reflection_probe_set_ambient_color :: (main: *RenderingServer, probe: RID, color: Color) { sys_call("RenderingServer", "reflection_probe_set_ambient_color", 2948539648, Nil, main.p_object, probe, color);  }  // 125
reflection_probe_set_ambient_energy :: (main: *RenderingServer, probe: RID, energy: float) { sys_call("RenderingServer", "reflection_probe_set_ambient_energy", 1794382983, Nil, main.p_object, probe, energy);  }  // 126
reflection_probe_set_max_distance :: (main: *RenderingServer, probe: RID, distance: float) { sys_call("RenderingServer", "reflection_probe_set_max_distance", 1794382983, Nil, main.p_object, probe, distance);  }  // 127
reflection_probe_set_size :: (main: *RenderingServer, probe: RID, size: Vector3) { sys_call("RenderingServer", "reflection_probe_set_size", 3227306858, Nil, main.p_object, probe, size);  }  // 128
reflection_probe_set_origin_offset :: (main: *RenderingServer, probe: RID, offset: Vector3) { sys_call("RenderingServer", "reflection_probe_set_origin_offset", 3227306858, Nil, main.p_object, probe, offset);  }  // 129
reflection_probe_set_as_interior :: (main: *RenderingServer, probe: RID, enable: bool) { sys_call("RenderingServer", "reflection_probe_set_as_interior", 1265174801, Nil, main.p_object, probe, enable);  }  // 130
reflection_probe_set_enable_box_projection :: (main: *RenderingServer, probe: RID, enable: bool) { sys_call("RenderingServer", "reflection_probe_set_enable_box_projection", 1265174801, Nil, main.p_object, probe, enable);  }  // 131
reflection_probe_set_enable_shadows :: (main: *RenderingServer, probe: RID, enable: bool) { sys_call("RenderingServer", "reflection_probe_set_enable_shadows", 1265174801, Nil, main.p_object, probe, enable);  }  // 132
reflection_probe_set_cull_mask :: (main: *RenderingServer, probe: RID, layers: int) { sys_call("RenderingServer", "reflection_probe_set_cull_mask", 3411492887, Nil, main.p_object, probe, layers);  }  // 133
reflection_probe_set_reflection_mask :: (main: *RenderingServer, probe: RID, layers: int) { sys_call("RenderingServer", "reflection_probe_set_reflection_mask", 3411492887, Nil, main.p_object, probe, layers);  }  // 134
reflection_probe_set_resolution :: (main: *RenderingServer, probe: RID, resolution: int) { sys_call("RenderingServer", "reflection_probe_set_resolution", 3411492887, Nil, main.p_object, probe, resolution);  }  // 135
reflection_probe_set_mesh_lod_threshold :: (main: *RenderingServer, probe: RID, pixels: float) { sys_call("RenderingServer", "reflection_probe_set_mesh_lod_threshold", 1794382983, Nil, main.p_object, probe, pixels);  }  // 136
decal_create :: (main: *RenderingServer) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "decal_create", 529393457, RID, main.p_object); return call_ret.*; }  // 137
decal_set_size :: (main: *RenderingServer, decal: RID, size: Vector3) { sys_call("RenderingServer", "decal_set_size", 3227306858, Nil, main.p_object, decal, size);  }  // 138
decal_set_texture :: (main: *RenderingServer, decal: RID, type: RenderingServer.DecalTexture, texture: RID) { sys_call("RenderingServer", "decal_set_texture", 3953344054, Nil, main.p_object, decal, type, texture);  }  // 139
decal_set_emission_energy :: (main: *RenderingServer, decal: RID, energy: float) { sys_call("RenderingServer", "decal_set_emission_energy", 1794382983, Nil, main.p_object, decal, energy);  }  // 140
decal_set_albedo_mix :: (main: *RenderingServer, decal: RID, albedo_mix: float) { sys_call("RenderingServer", "decal_set_albedo_mix", 1794382983, Nil, main.p_object, decal, albedo_mix);  }  // 141
decal_set_modulate :: (main: *RenderingServer, decal: RID, color: Color) { sys_call("RenderingServer", "decal_set_modulate", 2948539648, Nil, main.p_object, decal, color);  }  // 142
decal_set_cull_mask :: (main: *RenderingServer, decal: RID, mask: int) { sys_call("RenderingServer", "decal_set_cull_mask", 3411492887, Nil, main.p_object, decal, mask);  }  // 143
decal_set_distance_fade :: (main: *RenderingServer, decal: RID, enabled: bool, begin: float, length: float) { sys_call("RenderingServer", "decal_set_distance_fade", 2972769666, Nil, main.p_object, decal, enabled, begin, length);  }  // 144
decal_set_fade :: (main: *RenderingServer, decal: RID, above: float, below: float) { sys_call("RenderingServer", "decal_set_fade", 2513314492, Nil, main.p_object, decal, above, below);  }  // 145
decal_set_normal_fade :: (main: *RenderingServer, decal: RID, fade: float) { sys_call("RenderingServer", "decal_set_normal_fade", 1794382983, Nil, main.p_object, decal, fade);  }  // 146
decals_set_filter :: (main: *RenderingServer, filter: RenderingServer.DecalFilter) { sys_call("RenderingServer", "decals_set_filter", 3519875702, Nil, main.p_object, filter);  }  // 147
gi_set_use_half_resolution :: (main: *RenderingServer, half_resolution: bool) { sys_call("RenderingServer", "gi_set_use_half_resolution", 2586408642, Nil, main.p_object, half_resolution);  }  // 148
voxel_gi_create :: (main: *RenderingServer) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "voxel_gi_create", 529393457, RID, main.p_object); return call_ret.*; }  // 149
voxel_gi_allocate_data :: (main: *RenderingServer, voxel_gi: RID, to_cell_xform: Transform3D, aabb: AABB, octree_size: Vector3i, octree_cells: PackedByteArray, data_cells: PackedByteArray, distance_field: PackedByteArray, level_counts: PackedInt32Array) { sys_call("RenderingServer", "voxel_gi_allocate_data", 4108223027, Nil, main.p_object, voxel_gi, to_cell_xform, aabb, octree_size, octree_cells, data_cells, distance_field, level_counts);  }  // 150
voxel_gi_get_octree_size :: (main: *RenderingServer, voxel_gi: RID) -> Vector3i { call_ret := cast(*Vector3i) sys_call("RenderingServer", "voxel_gi_get_octree_size", 2607699645, Vector3i, main.p_object, voxel_gi); return call_ret.*; }  // 151
voxel_gi_get_octree_cells :: (main: *RenderingServer, voxel_gi: RID) -> PackedByteArray { call_ret := cast(*PackedByteArray) sys_call("RenderingServer", "voxel_gi_get_octree_cells", 3348040486, PackedByteArray, main.p_object, voxel_gi); return call_ret.*; }  // 152
voxel_gi_get_data_cells :: (main: *RenderingServer, voxel_gi: RID) -> PackedByteArray { call_ret := cast(*PackedByteArray) sys_call("RenderingServer", "voxel_gi_get_data_cells", 3348040486, PackedByteArray, main.p_object, voxel_gi); return call_ret.*; }  // 153
voxel_gi_get_distance_field :: (main: *RenderingServer, voxel_gi: RID) -> PackedByteArray { call_ret := cast(*PackedByteArray) sys_call("RenderingServer", "voxel_gi_get_distance_field", 3348040486, PackedByteArray, main.p_object, voxel_gi); return call_ret.*; }  // 154
voxel_gi_get_level_counts :: (main: *RenderingServer, voxel_gi: RID) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("RenderingServer", "voxel_gi_get_level_counts", 788230395, PackedInt32Array, main.p_object, voxel_gi); return call_ret.*; }  // 155
voxel_gi_get_to_cell_xform :: (main: *RenderingServer, voxel_gi: RID) -> Transform3D { call_ret := cast(*Transform3D) sys_call("RenderingServer", "voxel_gi_get_to_cell_xform", 1128465797, Transform3D, main.p_object, voxel_gi); return call_ret.*; }  // 156
voxel_gi_set_dynamic_range :: (main: *RenderingServer, voxel_gi: RID, range: float) { sys_call("RenderingServer", "voxel_gi_set_dynamic_range", 1794382983, Nil, main.p_object, voxel_gi, range);  }  // 157
voxel_gi_set_propagation :: (main: *RenderingServer, voxel_gi: RID, amount: float) { sys_call("RenderingServer", "voxel_gi_set_propagation", 1794382983, Nil, main.p_object, voxel_gi, amount);  }  // 158
voxel_gi_set_energy :: (main: *RenderingServer, voxel_gi: RID, energy: float) { sys_call("RenderingServer", "voxel_gi_set_energy", 1794382983, Nil, main.p_object, voxel_gi, energy);  }  // 159
voxel_gi_set_baked_exposure_normalization :: (main: *RenderingServer, voxel_gi: RID, baked_exposure: float) { sys_call("RenderingServer", "voxel_gi_set_baked_exposure_normalization", 1794382983, Nil, main.p_object, voxel_gi, baked_exposure);  }  // 160
voxel_gi_set_bias :: (main: *RenderingServer, voxel_gi: RID, bias: float) { sys_call("RenderingServer", "voxel_gi_set_bias", 1794382983, Nil, main.p_object, voxel_gi, bias);  }  // 161
voxel_gi_set_normal_bias :: (main: *RenderingServer, voxel_gi: RID, bias: float) { sys_call("RenderingServer", "voxel_gi_set_normal_bias", 1794382983, Nil, main.p_object, voxel_gi, bias);  }  // 162
voxel_gi_set_interior :: (main: *RenderingServer, voxel_gi: RID, enable: bool) { sys_call("RenderingServer", "voxel_gi_set_interior", 1265174801, Nil, main.p_object, voxel_gi, enable);  }  // 163
voxel_gi_set_use_two_bounces :: (main: *RenderingServer, voxel_gi: RID, enable: bool) { sys_call("RenderingServer", "voxel_gi_set_use_two_bounces", 1265174801, Nil, main.p_object, voxel_gi, enable);  }  // 164
voxel_gi_set_quality :: (main: *RenderingServer, quality: RenderingServer.VoxelGIQuality) { sys_call("RenderingServer", "voxel_gi_set_quality", 1538689978, Nil, main.p_object, quality);  }  // 165
lightmap_create :: (main: *RenderingServer) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "lightmap_create", 529393457, RID, main.p_object); return call_ret.*; }  // 166
lightmap_set_textures :: (main: *RenderingServer, lightmap: RID, light: RID, uses_sh: bool) { sys_call("RenderingServer", "lightmap_set_textures", 2646464759, Nil, main.p_object, lightmap, light, uses_sh);  }  // 167
lightmap_set_probe_bounds :: (main: *RenderingServer, lightmap: RID, bounds: AABB) { sys_call("RenderingServer", "lightmap_set_probe_bounds", 3696536120, Nil, main.p_object, lightmap, bounds);  }  // 168
lightmap_set_probe_interior :: (main: *RenderingServer, lightmap: RID, interior: bool) { sys_call("RenderingServer", "lightmap_set_probe_interior", 1265174801, Nil, main.p_object, lightmap, interior);  }  // 169
lightmap_set_probe_capture_data :: (main: *RenderingServer, lightmap: RID, points: PackedVector3Array, point_sh: PackedColorArray, tetrahedra: PackedInt32Array, bsp_tree: PackedInt32Array) { sys_call("RenderingServer", "lightmap_set_probe_capture_data", 3217845880, Nil, main.p_object, lightmap, points, point_sh, tetrahedra, bsp_tree);  }  // 170
lightmap_get_probe_capture_points :: (main: *RenderingServer, lightmap: RID) -> PackedVector3Array { call_ret := cast(*PackedVector3Array) sys_call("RenderingServer", "lightmap_get_probe_capture_points", 808965560, PackedVector3Array, main.p_object, lightmap); return call_ret.*; }  // 171
lightmap_get_probe_capture_sh :: (main: *RenderingServer, lightmap: RID) -> PackedColorArray { call_ret := cast(*PackedColorArray) sys_call("RenderingServer", "lightmap_get_probe_capture_sh", 1569415609, PackedColorArray, main.p_object, lightmap); return call_ret.*; }  // 172
lightmap_get_probe_capture_tetrahedra :: (main: *RenderingServer, lightmap: RID) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("RenderingServer", "lightmap_get_probe_capture_tetrahedra", 788230395, PackedInt32Array, main.p_object, lightmap); return call_ret.*; }  // 173
lightmap_get_probe_capture_bsp_tree :: (main: *RenderingServer, lightmap: RID) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("RenderingServer", "lightmap_get_probe_capture_bsp_tree", 788230395, PackedInt32Array, main.p_object, lightmap); return call_ret.*; }  // 174
lightmap_set_baked_exposure_normalization :: (main: *RenderingServer, lightmap: RID, baked_exposure: float) { sys_call("RenderingServer", "lightmap_set_baked_exposure_normalization", 1794382983, Nil, main.p_object, lightmap, baked_exposure);  }  // 175
lightmap_set_probe_capture_update_speed :: (main: *RenderingServer, speed: float) { sys_call("RenderingServer", "lightmap_set_probe_capture_update_speed", 373806689, Nil, main.p_object, speed);  }  // 176
particles_create :: (main: *RenderingServer) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "particles_create", 529393457, RID, main.p_object); return call_ret.*; }  // 177
particles_set_mode :: (main: *RenderingServer, particles: RID, mode: RenderingServer.ParticlesMode) { sys_call("RenderingServer", "particles_set_mode", 3492270028, Nil, main.p_object, particles, mode);  }  // 178
particles_set_emitting :: (main: *RenderingServer, particles: RID, emitting: bool) { sys_call("RenderingServer", "particles_set_emitting", 1265174801, Nil, main.p_object, particles, emitting);  }  // 179
particles_get_emitting :: (main: *RenderingServer, particles: RID) -> bool { call_ret := cast(*bool) sys_call("RenderingServer", "particles_get_emitting", 3521089500, bool, main.p_object, particles); return call_ret.*; }  // 180
particles_set_amount :: (main: *RenderingServer, particles: RID, amount: int) { sys_call("RenderingServer", "particles_set_amount", 3411492887, Nil, main.p_object, particles, amount);  }  // 181
particles_set_amount_ratio :: (main: *RenderingServer, particles: RID, ratio: float) { sys_call("RenderingServer", "particles_set_amount_ratio", 1794382983, Nil, main.p_object, particles, ratio);  }  // 182
particles_set_lifetime :: (main: *RenderingServer, particles: RID, lifetime: float) { sys_call("RenderingServer", "particles_set_lifetime", 1794382983, Nil, main.p_object, particles, lifetime);  }  // 183
particles_set_one_shot :: (main: *RenderingServer, particles: RID, one_shot: bool) { sys_call("RenderingServer", "particles_set_one_shot", 1265174801, Nil, main.p_object, particles, one_shot);  }  // 184
particles_set_pre_process_time :: (main: *RenderingServer, particles: RID, time: float) { sys_call("RenderingServer", "particles_set_pre_process_time", 1794382983, Nil, main.p_object, particles, time);  }  // 185
particles_request_process_time :: (main: *RenderingServer, particles: RID, time: float) { sys_call("RenderingServer", "particles_request_process_time", 1794382983, Nil, main.p_object, particles, time);  }  // 186
particles_set_explosiveness_ratio :: (main: *RenderingServer, particles: RID, ratio: float) { sys_call("RenderingServer", "particles_set_explosiveness_ratio", 1794382983, Nil, main.p_object, particles, ratio);  }  // 187
particles_set_randomness_ratio :: (main: *RenderingServer, particles: RID, ratio: float) { sys_call("RenderingServer", "particles_set_randomness_ratio", 1794382983, Nil, main.p_object, particles, ratio);  }  // 188
particles_set_interp_to_end :: (main: *RenderingServer, particles: RID, factor: float) { sys_call("RenderingServer", "particles_set_interp_to_end", 1794382983, Nil, main.p_object, particles, factor);  }  // 189
particles_set_emitter_velocity :: (main: *RenderingServer, particles: RID, velocity: Vector3) { sys_call("RenderingServer", "particles_set_emitter_velocity", 3227306858, Nil, main.p_object, particles, velocity);  }  // 190
particles_set_custom_aabb :: (main: *RenderingServer, particles: RID, aabb: AABB) { sys_call("RenderingServer", "particles_set_custom_aabb", 3696536120, Nil, main.p_object, particles, aabb);  }  // 191
particles_set_speed_scale :: (main: *RenderingServer, particles: RID, scale: float) { sys_call("RenderingServer", "particles_set_speed_scale", 1794382983, Nil, main.p_object, particles, scale);  }  // 192
particles_set_use_local_coordinates :: (main: *RenderingServer, particles: RID, enable: bool) { sys_call("RenderingServer", "particles_set_use_local_coordinates", 1265174801, Nil, main.p_object, particles, enable);  }  // 193
particles_set_process_material :: (main: *RenderingServer, particles: RID, material: RID) { sys_call("RenderingServer", "particles_set_process_material", 395945892, Nil, main.p_object, particles, material);  }  // 194
particles_set_fixed_fps :: (main: *RenderingServer, particles: RID, fps: int) { sys_call("RenderingServer", "particles_set_fixed_fps", 3411492887, Nil, main.p_object, particles, fps);  }  // 195
particles_set_interpolate :: (main: *RenderingServer, particles: RID, enable: bool) { sys_call("RenderingServer", "particles_set_interpolate", 1265174801, Nil, main.p_object, particles, enable);  }  // 196
particles_set_fractional_delta :: (main: *RenderingServer, particles: RID, enable: bool) { sys_call("RenderingServer", "particles_set_fractional_delta", 1265174801, Nil, main.p_object, particles, enable);  }  // 197
particles_set_collision_base_size :: (main: *RenderingServer, particles: RID, size: float) { sys_call("RenderingServer", "particles_set_collision_base_size", 1794382983, Nil, main.p_object, particles, size);  }  // 198
particles_set_transform_align :: (main: *RenderingServer, particles: RID, align: RenderingServer.ParticlesTransformAlign) { sys_call("RenderingServer", "particles_set_transform_align", 3264971368, Nil, main.p_object, particles, align);  }  // 199
particles_set_trails :: (main: *RenderingServer, particles: RID, enable: bool, length_sec: float) { sys_call("RenderingServer", "particles_set_trails", 2010054925, Nil, main.p_object, particles, enable, length_sec);  }  // 200
particles_set_trail_bind_poses :: (main: *RenderingServer, particles: RID, bind_poses: [] Transform3D) { sys_call("RenderingServer", "particles_set_trail_bind_poses", 684822712, Nil, main.p_object, particles, bind_poses);  }  // 201
particles_is_inactive :: (main: *RenderingServer, particles: RID) -> bool { call_ret := cast(*bool) sys_call("RenderingServer", "particles_is_inactive", 3521089500, bool, main.p_object, particles); return call_ret.*; }  // 202
particles_request_process :: (main: *RenderingServer, particles: RID) { sys_call("RenderingServer", "particles_request_process", 2722037293, Nil, main.p_object, particles);  }  // 203
particles_restart :: (main: *RenderingServer, particles: RID) { sys_call("RenderingServer", "particles_restart", 2722037293, Nil, main.p_object, particles);  }  // 204
particles_set_subemitter :: (main: *RenderingServer, particles: RID, subemitter_particles: RID) { sys_call("RenderingServer", "particles_set_subemitter", 395945892, Nil, main.p_object, particles, subemitter_particles);  }  // 205
particles_emit :: (main: *RenderingServer, particles: RID, transform: Transform3D, velocity: Vector3, color: Color, custom: Color, emit_flags: int) { sys_call("RenderingServer", "particles_emit", 4043136117, Nil, main.p_object, particles, transform, velocity, color, custom, emit_flags);  }  // 206
particles_set_draw_order :: (main: *RenderingServer, particles: RID, order: RenderingServer.ParticlesDrawOrder) { sys_call("RenderingServer", "particles_set_draw_order", 935028487, Nil, main.p_object, particles, order);  }  // 207
particles_set_draw_passes :: (main: *RenderingServer, particles: RID, count: int) { sys_call("RenderingServer", "particles_set_draw_passes", 3411492887, Nil, main.p_object, particles, count);  }  // 208
particles_set_draw_pass_mesh :: (main: *RenderingServer, particles: RID, pass: int, mesh: RID) { sys_call("RenderingServer", "particles_set_draw_pass_mesh", 2310537182, Nil, main.p_object, particles, pass, mesh);  }  // 209
particles_get_current_aabb :: (main: *RenderingServer, particles: RID) -> AABB { call_ret := cast(*AABB) sys_call("RenderingServer", "particles_get_current_aabb", 3952830260, AABB, main.p_object, particles); return call_ret.*; }  // 210
particles_set_emission_transform :: (main: *RenderingServer, particles: RID, transform: Transform3D) { sys_call("RenderingServer", "particles_set_emission_transform", 3935195649, Nil, main.p_object, particles, transform);  }  // 211
particles_collision_create :: (main: *RenderingServer) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "particles_collision_create", 529393457, RID, main.p_object); return call_ret.*; }  // 212
particles_collision_set_collision_type :: (main: *RenderingServer, particles_collision: RID, type: RenderingServer.ParticlesCollisionType) { sys_call("RenderingServer", "particles_collision_set_collision_type", 1497044930, Nil, main.p_object, particles_collision, type);  }  // 213
particles_collision_set_cull_mask :: (main: *RenderingServer, particles_collision: RID, mask: int) { sys_call("RenderingServer", "particles_collision_set_cull_mask", 3411492887, Nil, main.p_object, particles_collision, mask);  }  // 214
particles_collision_set_sphere_radius :: (main: *RenderingServer, particles_collision: RID, radius: float) { sys_call("RenderingServer", "particles_collision_set_sphere_radius", 1794382983, Nil, main.p_object, particles_collision, radius);  }  // 215
particles_collision_set_box_extents :: (main: *RenderingServer, particles_collision: RID, extents: Vector3) { sys_call("RenderingServer", "particles_collision_set_box_extents", 3227306858, Nil, main.p_object, particles_collision, extents);  }  // 216
particles_collision_set_attractor_strength :: (main: *RenderingServer, particles_collision: RID, strength: float) { sys_call("RenderingServer", "particles_collision_set_attractor_strength", 1794382983, Nil, main.p_object, particles_collision, strength);  }  // 217
particles_collision_set_attractor_directionality :: (main: *RenderingServer, particles_collision: RID, amount: float) { sys_call("RenderingServer", "particles_collision_set_attractor_directionality", 1794382983, Nil, main.p_object, particles_collision, amount);  }  // 218
particles_collision_set_attractor_attenuation :: (main: *RenderingServer, particles_collision: RID, curve: float) { sys_call("RenderingServer", "particles_collision_set_attractor_attenuation", 1794382983, Nil, main.p_object, particles_collision, curve);  }  // 219
particles_collision_set_field_texture :: (main: *RenderingServer, particles_collision: RID, texture: RID) { sys_call("RenderingServer", "particles_collision_set_field_texture", 395945892, Nil, main.p_object, particles_collision, texture);  }  // 220
particles_collision_height_field_update :: (main: *RenderingServer, particles_collision: RID) { sys_call("RenderingServer", "particles_collision_height_field_update", 2722037293, Nil, main.p_object, particles_collision);  }  // 221
particles_collision_set_height_field_resolution :: (main: *RenderingServer, particles_collision: RID, resolution: RenderingServer.ParticlesCollisionHeightfieldResolution) { sys_call("RenderingServer", "particles_collision_set_height_field_resolution", 962977297, Nil, main.p_object, particles_collision, resolution);  }  // 222
particles_collision_set_height_field_mask :: (main: *RenderingServer, particles_collision: RID, mask: int) { sys_call("RenderingServer", "particles_collision_set_height_field_mask", 3411492887, Nil, main.p_object, particles_collision, mask);  }  // 223
fog_volume_create :: (main: *RenderingServer) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "fog_volume_create", 529393457, RID, main.p_object); return call_ret.*; }  // 224
fog_volume_set_shape :: (main: *RenderingServer, fog_volume: RID, shape: RenderingServer.FogVolumeShape) { sys_call("RenderingServer", "fog_volume_set_shape", 3818703106, Nil, main.p_object, fog_volume, shape);  }  // 225
fog_volume_set_size :: (main: *RenderingServer, fog_volume: RID, size: Vector3) { sys_call("RenderingServer", "fog_volume_set_size", 3227306858, Nil, main.p_object, fog_volume, size);  }  // 226
fog_volume_set_material :: (main: *RenderingServer, fog_volume: RID, material: RID) { sys_call("RenderingServer", "fog_volume_set_material", 395945892, Nil, main.p_object, fog_volume, material);  }  // 227
visibility_notifier_create :: (main: *RenderingServer) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "visibility_notifier_create", 529393457, RID, main.p_object); return call_ret.*; }  // 228
visibility_notifier_set_aabb :: (main: *RenderingServer, notifier: RID, aabb: AABB) { sys_call("RenderingServer", "visibility_notifier_set_aabb", 3696536120, Nil, main.p_object, notifier, aabb);  }  // 229
visibility_notifier_set_callbacks :: (main: *RenderingServer, notifier: RID, enter_callable: Callable, exit_callable: Callable) { sys_call("RenderingServer", "visibility_notifier_set_callbacks", 2689735388, Nil, main.p_object, notifier, enter_callable, exit_callable);  }  // 230
occluder_create :: (main: *RenderingServer) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "occluder_create", 529393457, RID, main.p_object); return call_ret.*; }  // 231
occluder_set_mesh :: (main: *RenderingServer, occluder: RID, vertices: PackedVector3Array, indices: PackedInt32Array) { sys_call("RenderingServer", "occluder_set_mesh", 3854404263, Nil, main.p_object, occluder, vertices, indices);  }  // 232
camera_create :: (main: *RenderingServer) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "camera_create", 529393457, RID, main.p_object); return call_ret.*; }  // 233
camera_set_perspective :: (main: *RenderingServer, camera: RID, fovy_degrees: float, z_near: float, z_far: float) { sys_call("RenderingServer", "camera_set_perspective", 157498339, Nil, main.p_object, camera, fovy_degrees, z_near, z_far);  }  // 234
camera_set_orthogonal :: (main: *RenderingServer, camera: RID, size: float, z_near: float, z_far: float) { sys_call("RenderingServer", "camera_set_orthogonal", 157498339, Nil, main.p_object, camera, size, z_near, z_far);  }  // 235
camera_set_frustum :: (main: *RenderingServer, camera: RID, size: float, offset: Vector2, z_near: float, z_far: float) { sys_call("RenderingServer", "camera_set_frustum", 1889878953, Nil, main.p_object, camera, size, offset, z_near, z_far);  }  // 236
camera_set_transform :: (main: *RenderingServer, camera: RID, transform: Transform3D) { sys_call("RenderingServer", "camera_set_transform", 3935195649, Nil, main.p_object, camera, transform);  }  // 237
camera_set_cull_mask :: (main: *RenderingServer, camera: RID, layers: int) { sys_call("RenderingServer", "camera_set_cull_mask", 3411492887, Nil, main.p_object, camera, layers);  }  // 238
camera_set_environment :: (main: *RenderingServer, camera: RID, env: RID) { sys_call("RenderingServer", "camera_set_environment", 395945892, Nil, main.p_object, camera, env);  }  // 239
camera_set_camera_attributes :: (main: *RenderingServer, camera: RID, effects: RID) { sys_call("RenderingServer", "camera_set_camera_attributes", 395945892, Nil, main.p_object, camera, effects);  }  // 240
camera_set_compositor :: (main: *RenderingServer, camera: RID, compositor: RID) { sys_call("RenderingServer", "camera_set_compositor", 395945892, Nil, main.p_object, camera, compositor);  }  // 241
camera_set_use_vertical_aspect :: (main: *RenderingServer, camera: RID, enable: bool) { sys_call("RenderingServer", "camera_set_use_vertical_aspect", 1265174801, Nil, main.p_object, camera, enable);  }  // 242
viewport_create :: (main: *RenderingServer) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "viewport_create", 529393457, RID, main.p_object); return call_ret.*; }  // 243
viewport_set_use_xr :: (main: *RenderingServer, viewport: RID, use_xr: bool) { sys_call("RenderingServer", "viewport_set_use_xr", 1265174801, Nil, main.p_object, viewport, use_xr);  }  // 244
viewport_set_size :: (main: *RenderingServer, viewport: RID, width: int, height: int) { sys_call("RenderingServer", "viewport_set_size", 4288446313, Nil, main.p_object, viewport, width, height);  }  // 245
viewport_set_active :: (main: *RenderingServer, viewport: RID, active: bool) { sys_call("RenderingServer", "viewport_set_active", 1265174801, Nil, main.p_object, viewport, active);  }  // 246
viewport_set_parent_viewport :: (main: *RenderingServer, viewport: RID, parent_viewport: RID) { sys_call("RenderingServer", "viewport_set_parent_viewport", 395945892, Nil, main.p_object, viewport, parent_viewport);  }  // 247
viewport_attach_to_screen :: (main: *RenderingServer, viewport: RID) { sys_call("RenderingServer", "viewport_attach_to_screen", 1062245816, Nil, main.p_object, viewport);  }  // 248
viewport_set_render_direct_to_screen :: (main: *RenderingServer, viewport: RID, enabled: bool) { sys_call("RenderingServer", "viewport_set_render_direct_to_screen", 1265174801, Nil, main.p_object, viewport, enabled);  }  // 249
viewport_set_canvas_cull_mask :: (main: *RenderingServer, viewport: RID, canvas_cull_mask: int) { sys_call("RenderingServer", "viewport_set_canvas_cull_mask", 3411492887, Nil, main.p_object, viewport, canvas_cull_mask);  }  // 250
viewport_set_scaling_3d_mode :: (main: *RenderingServer, viewport: RID, scaling_3d_mode: RenderingServer.ViewportScaling3DMode) { sys_call("RenderingServer", "viewport_set_scaling_3d_mode", 2386524376, Nil, main.p_object, viewport, scaling_3d_mode);  }  // 251
viewport_set_scaling_3d_scale :: (main: *RenderingServer, viewport: RID, scale: float) { sys_call("RenderingServer", "viewport_set_scaling_3d_scale", 1794382983, Nil, main.p_object, viewport, scale);  }  // 252
viewport_set_fsr_sharpness :: (main: *RenderingServer, viewport: RID, sharpness: float) { sys_call("RenderingServer", "viewport_set_fsr_sharpness", 1794382983, Nil, main.p_object, viewport, sharpness);  }  // 253
viewport_set_texture_mipmap_bias :: (main: *RenderingServer, viewport: RID, mipmap_bias: float) { sys_call("RenderingServer", "viewport_set_texture_mipmap_bias", 1794382983, Nil, main.p_object, viewport, mipmap_bias);  }  // 254
viewport_set_anisotropic_filtering_level :: (main: *RenderingServer, viewport: RID, anisotropic_filtering_level: RenderingServer.ViewportAnisotropicFiltering) { sys_call("RenderingServer", "viewport_set_anisotropic_filtering_level", 3953214029, Nil, main.p_object, viewport, anisotropic_filtering_level);  }  // 255
viewport_set_update_mode :: (main: *RenderingServer, viewport: RID, update_mode: RenderingServer.ViewportUpdateMode) { sys_call("RenderingServer", "viewport_set_update_mode", 3161116010, Nil, main.p_object, viewport, update_mode);  }  // 256
viewport_get_update_mode :: (main: *RenderingServer, viewport: RID) -> RenderingServer.ViewportUpdateMode { call_ret := cast(*RenderingServer.ViewportUpdateMode) sys_call("RenderingServer", "viewport_get_update_mode", 3803901472, RenderingServer.ViewportUpdateMode, main.p_object, viewport); return call_ret.*; }  // 257
viewport_set_clear_mode :: (main: *RenderingServer, viewport: RID, clear_mode: RenderingServer.ViewportClearMode) { sys_call("RenderingServer", "viewport_set_clear_mode", 3628367896, Nil, main.p_object, viewport, clear_mode);  }  // 258
viewport_get_render_target :: (main: *RenderingServer, viewport: RID) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "viewport_get_render_target", 3814569979, RID, main.p_object, viewport); return call_ret.*; }  // 259
viewport_get_texture :: (main: *RenderingServer, viewport: RID) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "viewport_get_texture", 3814569979, RID, main.p_object, viewport); return call_ret.*; }  // 260
viewport_set_disable_3d :: (main: *RenderingServer, viewport: RID, disable: bool) { sys_call("RenderingServer", "viewport_set_disable_3d", 1265174801, Nil, main.p_object, viewport, disable);  }  // 261
viewport_set_disable_2d :: (main: *RenderingServer, viewport: RID, disable: bool) { sys_call("RenderingServer", "viewport_set_disable_2d", 1265174801, Nil, main.p_object, viewport, disable);  }  // 262
viewport_set_environment_mode :: (main: *RenderingServer, viewport: RID, mode: RenderingServer.ViewportEnvironmentMode) { sys_call("RenderingServer", "viewport_set_environment_mode", 2196892182, Nil, main.p_object, viewport, mode);  }  // 263
viewport_attach_camera :: (main: *RenderingServer, viewport: RID, camera: RID) { sys_call("RenderingServer", "viewport_attach_camera", 395945892, Nil, main.p_object, viewport, camera);  }  // 264
viewport_set_scenario :: (main: *RenderingServer, viewport: RID, scenario: RID) { sys_call("RenderingServer", "viewport_set_scenario", 395945892, Nil, main.p_object, viewport, scenario);  }  // 265
viewport_attach_canvas :: (main: *RenderingServer, viewport: RID, canvas: RID) { sys_call("RenderingServer", "viewport_attach_canvas", 395945892, Nil, main.p_object, viewport, canvas);  }  // 266
viewport_remove_canvas :: (main: *RenderingServer, viewport: RID, canvas: RID) { sys_call("RenderingServer", "viewport_remove_canvas", 395945892, Nil, main.p_object, viewport, canvas);  }  // 267
viewport_set_snap_2d_transforms_to_pixel :: (main: *RenderingServer, viewport: RID, enabled: bool) { sys_call("RenderingServer", "viewport_set_snap_2d_transforms_to_pixel", 1265174801, Nil, main.p_object, viewport, enabled);  }  // 268
viewport_set_snap_2d_vertices_to_pixel :: (main: *RenderingServer, viewport: RID, enabled: bool) { sys_call("RenderingServer", "viewport_set_snap_2d_vertices_to_pixel", 1265174801, Nil, main.p_object, viewport, enabled);  }  // 269
viewport_set_default_canvas_item_texture_filter :: (main: *RenderingServer, viewport: RID, filter: RenderingServer.CanvasItemTextureFilter) { sys_call("RenderingServer", "viewport_set_default_canvas_item_texture_filter", 1155129294, Nil, main.p_object, viewport, filter);  }  // 270
viewport_set_default_canvas_item_texture_repeat :: (main: *RenderingServer, viewport: RID, repeat: RenderingServer.CanvasItemTextureRepeat) { sys_call("RenderingServer", "viewport_set_default_canvas_item_texture_repeat", 1652956681, Nil, main.p_object, viewport, repeat);  }  // 271
viewport_set_canvas_transform :: (main: *RenderingServer, viewport: RID, canvas: RID, offset: Transform2D) { sys_call("RenderingServer", "viewport_set_canvas_transform", 3608606053, Nil, main.p_object, viewport, canvas, offset);  }  // 272
viewport_set_canvas_stacking :: (main: *RenderingServer, viewport: RID, canvas: RID, layer: int, sublayer: int) { sys_call("RenderingServer", "viewport_set_canvas_stacking", 3713930247, Nil, main.p_object, viewport, canvas, layer, sublayer);  }  // 273
viewport_set_transparent_background :: (main: *RenderingServer, viewport: RID, enabled: bool) { sys_call("RenderingServer", "viewport_set_transparent_background", 1265174801, Nil, main.p_object, viewport, enabled);  }  // 274
viewport_set_global_canvas_transform :: (main: *RenderingServer, viewport: RID, transform: Transform2D) { sys_call("RenderingServer", "viewport_set_global_canvas_transform", 1246044741, Nil, main.p_object, viewport, transform);  }  // 275
viewport_set_sdf_oversize_and_scale :: (main: *RenderingServer, viewport: RID, oversize: RenderingServer.ViewportSDFOversize, scale: RenderingServer.ViewportSDFScale) { sys_call("RenderingServer", "viewport_set_sdf_oversize_and_scale", 1329198632, Nil, main.p_object, viewport, oversize, scale);  }  // 276
viewport_set_positional_shadow_atlas_size :: (main: *RenderingServer, viewport: RID, size: int) { sys_call("RenderingServer", "viewport_set_positional_shadow_atlas_size", 1904426712, Nil, main.p_object, viewport, size);  }  // 277
viewport_set_positional_shadow_atlas_quadrant_subdivision :: (main: *RenderingServer, viewport: RID, quadrant: int, subdivision: int) { sys_call("RenderingServer", "viewport_set_positional_shadow_atlas_quadrant_subdivision", 4288446313, Nil, main.p_object, viewport, quadrant, subdivision);  }  // 278
viewport_set_msaa_3d :: (main: *RenderingServer, viewport: RID, msaa: RenderingServer.ViewportMSAA) { sys_call("RenderingServer", "viewport_set_msaa_3d", 3764433340, Nil, main.p_object, viewport, msaa);  }  // 279
viewport_set_msaa_2d :: (main: *RenderingServer, viewport: RID, msaa: RenderingServer.ViewportMSAA) { sys_call("RenderingServer", "viewport_set_msaa_2d", 3764433340, Nil, main.p_object, viewport, msaa);  }  // 280
viewport_set_use_hdr_2d :: (main: *RenderingServer, viewport: RID, enabled: bool) { sys_call("RenderingServer", "viewport_set_use_hdr_2d", 1265174801, Nil, main.p_object, viewport, enabled);  }  // 281
viewport_set_screen_space_aa :: (main: *RenderingServer, viewport: RID, mode: RenderingServer.ViewportScreenSpaceAA) { sys_call("RenderingServer", "viewport_set_screen_space_aa", 1447279591, Nil, main.p_object, viewport, mode);  }  // 282
viewport_set_use_taa :: (main: *RenderingServer, viewport: RID, enable: bool) { sys_call("RenderingServer", "viewport_set_use_taa", 1265174801, Nil, main.p_object, viewport, enable);  }  // 283
viewport_set_use_debanding :: (main: *RenderingServer, viewport: RID, enable: bool) { sys_call("RenderingServer", "viewport_set_use_debanding", 1265174801, Nil, main.p_object, viewport, enable);  }  // 284
viewport_set_use_occlusion_culling :: (main: *RenderingServer, viewport: RID, enable: bool) { sys_call("RenderingServer", "viewport_set_use_occlusion_culling", 1265174801, Nil, main.p_object, viewport, enable);  }  // 285
viewport_set_occlusion_rays_per_thread :: (main: *RenderingServer, rays_per_thread: int) { sys_call("RenderingServer", "viewport_set_occlusion_rays_per_thread", 1286410249, Nil, main.p_object, rays_per_thread);  }  // 286
viewport_set_occlusion_culling_build_quality :: (main: *RenderingServer, quality: RenderingServer.ViewportOcclusionCullingBuildQuality) { sys_call("RenderingServer", "viewport_set_occlusion_culling_build_quality", 2069725696, Nil, main.p_object, quality);  }  // 287
viewport_get_render_info :: (main: *RenderingServer, viewport: RID, type: RenderingServer.ViewportRenderInfoType, info: RenderingServer.ViewportRenderInfo) -> int { call_ret := cast(*int) sys_call("RenderingServer", "viewport_get_render_info", 2041262392, int, main.p_object, viewport, type, info); return call_ret.*; }  // 288
viewport_set_debug_draw :: (main: *RenderingServer, viewport: RID, draw: RenderingServer.ViewportDebugDraw) { sys_call("RenderingServer", "viewport_set_debug_draw", 2089420930, Nil, main.p_object, viewport, draw);  }  // 289
viewport_set_measure_render_time :: (main: *RenderingServer, viewport: RID, enable: bool) { sys_call("RenderingServer", "viewport_set_measure_render_time", 1265174801, Nil, main.p_object, viewport, enable);  }  // 290
viewport_get_measured_render_time_cpu :: (main: *RenderingServer, viewport: RID) -> float { call_ret := cast(*float) sys_call("RenderingServer", "viewport_get_measured_render_time_cpu", 866169185, float, main.p_object, viewport); return call_ret.*; }  // 291
viewport_get_measured_render_time_gpu :: (main: *RenderingServer, viewport: RID) -> float { call_ret := cast(*float) sys_call("RenderingServer", "viewport_get_measured_render_time_gpu", 866169185, float, main.p_object, viewport); return call_ret.*; }  // 292
viewport_set_vrs_mode :: (main: *RenderingServer, viewport: RID, mode: RenderingServer.ViewportVRSMode) { sys_call("RenderingServer", "viewport_set_vrs_mode", 398809874, Nil, main.p_object, viewport, mode);  }  // 293
viewport_set_vrs_update_mode :: (main: *RenderingServer, viewport: RID, mode: RenderingServer.ViewportVRSUpdateMode) { sys_call("RenderingServer", "viewport_set_vrs_update_mode", 2696154815, Nil, main.p_object, viewport, mode);  }  // 294
viewport_set_vrs_texture :: (main: *RenderingServer, viewport: RID, texture: RID) { sys_call("RenderingServer", "viewport_set_vrs_texture", 395945892, Nil, main.p_object, viewport, texture);  }  // 295
sky_create :: (main: *RenderingServer) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "sky_create", 529393457, RID, main.p_object); return call_ret.*; }  // 296
sky_set_radiance_size :: (main: *RenderingServer, sky: RID, radiance_size: int) { sys_call("RenderingServer", "sky_set_radiance_size", 3411492887, Nil, main.p_object, sky, radiance_size);  }  // 297
sky_set_mode :: (main: *RenderingServer, sky: RID, mode: RenderingServer.SkyMode) { sys_call("RenderingServer", "sky_set_mode", 3279019937, Nil, main.p_object, sky, mode);  }  // 298
sky_set_material :: (main: *RenderingServer, sky: RID, material: RID) { sys_call("RenderingServer", "sky_set_material", 395945892, Nil, main.p_object, sky, material);  }  // 299
sky_bake_panorama :: (main: *RenderingServer, sky: RID, energy: float, bake_irradiance: bool, size: Vector2i) -> *Image { call_ret := cast(*Image) sys_call("RenderingServer", "sky_bake_panorama", 3875285818, Image, main.p_object, sky, energy, bake_irradiance, size); return call_ret; }  // 300
compositor_effect_create :: (main: *RenderingServer) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "compositor_effect_create", 529393457, RID, main.p_object); return call_ret.*; }  // 301
compositor_effect_set_enabled :: (main: *RenderingServer, effect: RID, enabled: bool) { sys_call("RenderingServer", "compositor_effect_set_enabled", 1265174801, Nil, main.p_object, effect, enabled);  }  // 302
compositor_effect_set_callback :: (main: *RenderingServer, effect: RID, callback_type: RenderingServer.CompositorEffectCallbackType, callback: Callable) { sys_call("RenderingServer", "compositor_effect_set_callback", 487412485, Nil, main.p_object, effect, callback_type, callback);  }  // 303
compositor_effect_set_flag :: (main: *RenderingServer, effect: RID, flag: RenderingServer.CompositorEffectFlags, set: bool) { sys_call("RenderingServer", "compositor_effect_set_flag", 3659527075, Nil, main.p_object, effect, flag, set);  }  // 304
compositor_create :: (main: *RenderingServer) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "compositor_create", 529393457, RID, main.p_object); return call_ret.*; }  // 305
compositor_set_compositor_effects :: (main: *RenderingServer, compositor: RID, effects: [] RID) { sys_call("RenderingServer", "compositor_set_compositor_effects", 684822712, Nil, main.p_object, compositor, effects);  }  // 306
environment_create :: (main: *RenderingServer) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "environment_create", 529393457, RID, main.p_object); return call_ret.*; }  // 307
environment_set_background :: (main: *RenderingServer, env: RID, bg: RenderingServer.EnvironmentBG) { sys_call("RenderingServer", "environment_set_background", 3937328877, Nil, main.p_object, env, bg);  }  // 308
environment_set_camera_id :: (main: *RenderingServer, env: RID, id: int) { sys_call("RenderingServer", "environment_set_camera_id", 3411492887, Nil, main.p_object, env, id);  }  // 309
environment_set_sky :: (main: *RenderingServer, env: RID, sky: RID) { sys_call("RenderingServer", "environment_set_sky", 395945892, Nil, main.p_object, env, sky);  }  // 310
environment_set_sky_custom_fov :: (main: *RenderingServer, env: RID, scale: float) { sys_call("RenderingServer", "environment_set_sky_custom_fov", 1794382983, Nil, main.p_object, env, scale);  }  // 311
environment_set_sky_orientation :: (main: *RenderingServer, env: RID, orientation: Basis) { sys_call("RenderingServer", "environment_set_sky_orientation", 1735850857, Nil, main.p_object, env, orientation);  }  // 312
environment_set_bg_color :: (main: *RenderingServer, env: RID, color: Color) { sys_call("RenderingServer", "environment_set_bg_color", 2948539648, Nil, main.p_object, env, color);  }  // 313
environment_set_bg_energy :: (main: *RenderingServer, env: RID, multiplier: float, exposure_value: float) { sys_call("RenderingServer", "environment_set_bg_energy", 2513314492, Nil, main.p_object, env, multiplier, exposure_value);  }  // 314
environment_set_canvas_max_layer :: (main: *RenderingServer, env: RID, max_layer: int) { sys_call("RenderingServer", "environment_set_canvas_max_layer", 3411492887, Nil, main.p_object, env, max_layer);  }  // 315
environment_set_ambient_light :: (main: *RenderingServer, env: RID, color: Color) { sys_call("RenderingServer", "environment_set_ambient_light", 1214961493, Nil, main.p_object, env, color);  }  // 316
environment_set_glow :: (main: *RenderingServer, env: RID, enable: bool, levels: PackedFloat32Array, intensity: float, strength: float, mix: float, bloom_threshold: float, blend_mode: RenderingServer.EnvironmentGlowBlendMode, hdr_bleed_threshold: float, hdr_bleed_scale: float, hdr_luminance_cap: float, glow_map_strength: float, glow_map: RID) { sys_call("RenderingServer", "environment_set_glow", 2421724940, Nil, main.p_object, env, enable, levels, intensity, strength, mix, bloom_threshold, blend_mode, hdr_bleed_threshold, hdr_bleed_scale, hdr_luminance_cap, glow_map_strength, glow_map);  }  // 317
environment_set_tonemap :: (main: *RenderingServer, env: RID, tone_mapper: RenderingServer.EnvironmentToneMapper, exposure: float, white: float) { sys_call("RenderingServer", "environment_set_tonemap", 2914312638, Nil, main.p_object, env, tone_mapper, exposure, white);  }  // 318
environment_set_adjustment :: (main: *RenderingServer, env: RID, enable: bool, brightness: float, contrast: float, saturation: float, use_1d_color_correction: bool, color_correction: RID) { sys_call("RenderingServer", "environment_set_adjustment", 876799838, Nil, main.p_object, env, enable, brightness, contrast, saturation, use_1d_color_correction, color_correction);  }  // 319
environment_set_ssr :: (main: *RenderingServer, env: RID, enable: bool, max_steps: int, fade_in: float, fade_out: float, depth_tolerance: float) { sys_call("RenderingServer", "environment_set_ssr", 3607294374, Nil, main.p_object, env, enable, max_steps, fade_in, fade_out, depth_tolerance);  }  // 320
environment_set_ssao :: (main: *RenderingServer, env: RID, enable: bool, radius: float, intensity: float, power: float, detail: float, horizon: float, sharpness: float, light_affect: float, ao_channel_affect: float) { sys_call("RenderingServer", "environment_set_ssao", 3994732740, Nil, main.p_object, env, enable, radius, intensity, power, detail, horizon, sharpness, light_affect, ao_channel_affect);  }  // 321
environment_set_fog :: (main: *RenderingServer, env: RID, enable: bool, light_color: Color, light_energy: float, sun_scatter: float, density: float, height: float, height_density: float, aerial_perspective: float, sky_affect: float) { sys_call("RenderingServer", "environment_set_fog", 105051629, Nil, main.p_object, env, enable, light_color, light_energy, sun_scatter, density, height, height_density, aerial_perspective, sky_affect);  }  // 322
environment_set_sdfgi :: (main: *RenderingServer, env: RID, enable: bool, cascades: int, min_cell_size: float, y_scale: RenderingServer.EnvironmentSDFGIYScale, use_occlusion: bool, bounce_feedback: float, read_sky: bool, energy: float, normal_bias: float, probe_bias: float) { sys_call("RenderingServer", "environment_set_sdfgi", 3519144388, Nil, main.p_object, env, enable, cascades, min_cell_size, y_scale, use_occlusion, bounce_feedback, read_sky, energy, normal_bias, probe_bias);  }  // 323
environment_set_volumetric_fog :: (main: *RenderingServer, env: RID, enable: bool, density: float, albedo: Color, emission: Color, emission_energy: float, anisotropy: float, length: float, p_detail_spread: float, gi_inject: float, temporal_reprojection: bool, temporal_reprojection_amount: float, ambient_inject: float, sky_affect: float) { sys_call("RenderingServer", "environment_set_volumetric_fog", 1553633833, Nil, main.p_object, env, enable, density, albedo, emission, emission_energy, anisotropy, length, p_detail_spread, gi_inject, temporal_reprojection, temporal_reprojection_amount, ambient_inject, sky_affect);  }  // 324
environment_glow_set_use_bicubic_upscale :: (main: *RenderingServer, enable: bool) { sys_call("RenderingServer", "environment_glow_set_use_bicubic_upscale", 2586408642, Nil, main.p_object, enable);  }  // 325
environment_set_ssr_roughness_quality :: (main: *RenderingServer, quality: RenderingServer.EnvironmentSSRRoughnessQuality) { sys_call("RenderingServer", "environment_set_ssr_roughness_quality", 1190026788, Nil, main.p_object, quality);  }  // 326
environment_set_ssao_quality :: (main: *RenderingServer, quality: RenderingServer.EnvironmentSSAOQuality, half_size: bool, adaptive_target: float, blur_passes: int, fadeout_from: float, fadeout_to: float) { sys_call("RenderingServer", "environment_set_ssao_quality", 189753569, Nil, main.p_object, quality, half_size, adaptive_target, blur_passes, fadeout_from, fadeout_to);  }  // 327
environment_set_ssil_quality :: (main: *RenderingServer, quality: RenderingServer.EnvironmentSSILQuality, half_size: bool, adaptive_target: float, blur_passes: int, fadeout_from: float, fadeout_to: float) { sys_call("RenderingServer", "environment_set_ssil_quality", 1713836683, Nil, main.p_object, quality, half_size, adaptive_target, blur_passes, fadeout_from, fadeout_to);  }  // 328
environment_set_sdfgi_ray_count :: (main: *RenderingServer, ray_count: RenderingServer.EnvironmentSDFGIRayCount) { sys_call("RenderingServer", "environment_set_sdfgi_ray_count", 340137951, Nil, main.p_object, ray_count);  }  // 329
environment_set_sdfgi_frames_to_converge :: (main: *RenderingServer, frames: RenderingServer.EnvironmentSDFGIFramesToConverge) { sys_call("RenderingServer", "environment_set_sdfgi_frames_to_converge", 2182444374, Nil, main.p_object, frames);  }  // 330
environment_set_sdfgi_frames_to_update_light :: (main: *RenderingServer, frames: RenderingServer.EnvironmentSDFGIFramesToUpdateLight) { sys_call("RenderingServer", "environment_set_sdfgi_frames_to_update_light", 1251144068, Nil, main.p_object, frames);  }  // 331
environment_set_volumetric_fog_volume_size :: (main: *RenderingServer, size: int, depth: int) { sys_call("RenderingServer", "environment_set_volumetric_fog_volume_size", 3937882851, Nil, main.p_object, size, depth);  }  // 332
environment_set_volumetric_fog_filter_active :: (main: *RenderingServer, active: bool) { sys_call("RenderingServer", "environment_set_volumetric_fog_filter_active", 2586408642, Nil, main.p_object, active);  }  // 333
environment_bake_panorama :: (main: *RenderingServer, environment: RID, bake_irradiance: bool, size: Vector2i) -> *Image { call_ret := cast(*Image) sys_call("RenderingServer", "environment_bake_panorama", 2452908646, Image, main.p_object, environment, bake_irradiance, size); return call_ret; }  // 334
screen_space_roughness_limiter_set_active :: (main: *RenderingServer, enable: bool, amount: float, limit: float) { sys_call("RenderingServer", "screen_space_roughness_limiter_set_active", 916716790, Nil, main.p_object, enable, amount, limit);  }  // 335
sub_surface_scattering_set_quality :: (main: *RenderingServer, quality: RenderingServer.SubSurfaceScatteringQuality) { sys_call("RenderingServer", "sub_surface_scattering_set_quality", 64571803, Nil, main.p_object, quality);  }  // 336
sub_surface_scattering_set_scale :: (main: *RenderingServer, scale: float, depth_scale: float) { sys_call("RenderingServer", "sub_surface_scattering_set_scale", 1017552074, Nil, main.p_object, scale, depth_scale);  }  // 337
camera_attributes_create :: (main: *RenderingServer) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "camera_attributes_create", 529393457, RID, main.p_object); return call_ret.*; }  // 338
camera_attributes_set_dof_blur_quality :: (main: *RenderingServer, quality: RenderingServer.DOFBlurQuality, use_jitter: bool) { sys_call("RenderingServer", "camera_attributes_set_dof_blur_quality", 2220136795, Nil, main.p_object, quality, use_jitter);  }  // 339
camera_attributes_set_dof_blur_bokeh_shape :: (main: *RenderingServer, shape: RenderingServer.DOFBokehShape) { sys_call("RenderingServer", "camera_attributes_set_dof_blur_bokeh_shape", 1205058394, Nil, main.p_object, shape);  }  // 340
camera_attributes_set_dof_blur :: (main: *RenderingServer, camera_attributes: RID, far_enable: bool, far_distance: float, far_transition: float, near_enable: bool, near_distance: float, near_transition: float, amount: float) { sys_call("RenderingServer", "camera_attributes_set_dof_blur", 316272616, Nil, main.p_object, camera_attributes, far_enable, far_distance, far_transition, near_enable, near_distance, near_transition, amount);  }  // 341
camera_attributes_set_exposure :: (main: *RenderingServer, camera_attributes: RID, multiplier: float, normalization: float) { sys_call("RenderingServer", "camera_attributes_set_exposure", 2513314492, Nil, main.p_object, camera_attributes, multiplier, normalization);  }  // 342
camera_attributes_set_auto_exposure :: (main: *RenderingServer, camera_attributes: RID, enable: bool, min_sensitivity: float, max_sensitivity: float, speed: float, scale: float) { sys_call("RenderingServer", "camera_attributes_set_auto_exposure", 4266986332, Nil, main.p_object, camera_attributes, enable, min_sensitivity, max_sensitivity, speed, scale);  }  // 343
scenario_create :: (main: *RenderingServer) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "scenario_create", 529393457, RID, main.p_object); return call_ret.*; }  // 344
scenario_set_environment :: (main: *RenderingServer, scenario: RID, environment: RID) { sys_call("RenderingServer", "scenario_set_environment", 395945892, Nil, main.p_object, scenario, environment);  }  // 345
scenario_set_fallback_environment :: (main: *RenderingServer, scenario: RID, environment: RID) { sys_call("RenderingServer", "scenario_set_fallback_environment", 395945892, Nil, main.p_object, scenario, environment);  }  // 346
scenario_set_camera_attributes :: (main: *RenderingServer, scenario: RID, effects: RID) { sys_call("RenderingServer", "scenario_set_camera_attributes", 395945892, Nil, main.p_object, scenario, effects);  }  // 347
scenario_set_compositor :: (main: *RenderingServer, scenario: RID, compositor: RID) { sys_call("RenderingServer", "scenario_set_compositor", 395945892, Nil, main.p_object, scenario, compositor);  }  // 348
instance_create2 :: (main: *RenderingServer, base: RID, scenario: RID) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "instance_create2", 746547085, RID, main.p_object, base, scenario); return call_ret.*; }  // 349
instance_create :: (main: *RenderingServer) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "instance_create", 529393457, RID, main.p_object); return call_ret.*; }  // 350
instance_set_base :: (main: *RenderingServer, instance: RID, base: RID) { sys_call("RenderingServer", "instance_set_base", 395945892, Nil, main.p_object, instance, base);  }  // 351
instance_set_scenario :: (main: *RenderingServer, instance: RID, scenario: RID) { sys_call("RenderingServer", "instance_set_scenario", 395945892, Nil, main.p_object, instance, scenario);  }  // 352
instance_set_layer_mask :: (main: *RenderingServer, instance: RID, mask: int) { sys_call("RenderingServer", "instance_set_layer_mask", 3411492887, Nil, main.p_object, instance, mask);  }  // 353
instance_set_pivot_data :: (main: *RenderingServer, instance: RID, sorting_offset: float, use_aabb_center: bool) { sys_call("RenderingServer", "instance_set_pivot_data", 1280615259, Nil, main.p_object, instance, sorting_offset, use_aabb_center);  }  // 354
instance_set_transform :: (main: *RenderingServer, instance: RID, transform: Transform3D) { sys_call("RenderingServer", "instance_set_transform", 3935195649, Nil, main.p_object, instance, transform);  }  // 355
instance_set_interpolated :: (main: *RenderingServer, instance: RID, interpolated: bool) { sys_call("RenderingServer", "instance_set_interpolated", 1265174801, Nil, main.p_object, instance, interpolated);  }  // 356
instance_reset_physics_interpolation :: (main: *RenderingServer, instance: RID) { sys_call("RenderingServer", "instance_reset_physics_interpolation", 2722037293, Nil, main.p_object, instance);  }  // 357
instance_attach_object_instance_id :: (main: *RenderingServer, instance: RID, id: int) { sys_call("RenderingServer", "instance_attach_object_instance_id", 3411492887, Nil, main.p_object, instance, id);  }  // 358
instance_set_blend_shape_weight :: (main: *RenderingServer, instance: RID, shape: int, weight: float) { sys_call("RenderingServer", "instance_set_blend_shape_weight", 1892459533, Nil, main.p_object, instance, shape, weight);  }  // 359
instance_set_surface_override_material :: (main: *RenderingServer, instance: RID, surface: int, material: RID) { sys_call("RenderingServer", "instance_set_surface_override_material", 2310537182, Nil, main.p_object, instance, surface, material);  }  // 360
instance_set_visible :: (main: *RenderingServer, instance: RID, visible: bool) { sys_call("RenderingServer", "instance_set_visible", 1265174801, Nil, main.p_object, instance, visible);  }  // 361
instance_geometry_set_transparency :: (main: *RenderingServer, instance: RID, transparency: float) { sys_call("RenderingServer", "instance_geometry_set_transparency", 1794382983, Nil, main.p_object, instance, transparency);  }  // 362
instance_set_custom_aabb :: (main: *RenderingServer, instance: RID, aabb: AABB) { sys_call("RenderingServer", "instance_set_custom_aabb", 3696536120, Nil, main.p_object, instance, aabb);  }  // 363
instance_attach_skeleton :: (main: *RenderingServer, instance: RID, skeleton: RID) { sys_call("RenderingServer", "instance_attach_skeleton", 395945892, Nil, main.p_object, instance, skeleton);  }  // 364
instance_set_extra_visibility_margin :: (main: *RenderingServer, instance: RID, margin: float) { sys_call("RenderingServer", "instance_set_extra_visibility_margin", 1794382983, Nil, main.p_object, instance, margin);  }  // 365
instance_set_visibility_parent :: (main: *RenderingServer, instance: RID, parent: RID) { sys_call("RenderingServer", "instance_set_visibility_parent", 395945892, Nil, main.p_object, instance, parent);  }  // 366
instance_set_ignore_culling :: (main: *RenderingServer, instance: RID, enabled: bool) { sys_call("RenderingServer", "instance_set_ignore_culling", 1265174801, Nil, main.p_object, instance, enabled);  }  // 367
instance_geometry_set_flag :: (main: *RenderingServer, instance: RID, flag: RenderingServer.InstanceFlags, enabled: bool) { sys_call("RenderingServer", "instance_geometry_set_flag", 1014989537, Nil, main.p_object, instance, flag, enabled);  }  // 368
instance_geometry_set_cast_shadows_setting :: (main: *RenderingServer, instance: RID, shadow_casting_setting: RenderingServer.ShadowCastingSetting) { sys_call("RenderingServer", "instance_geometry_set_cast_shadows_setting", 3768836020, Nil, main.p_object, instance, shadow_casting_setting);  }  // 369
instance_geometry_set_material_override :: (main: *RenderingServer, instance: RID, material: RID) { sys_call("RenderingServer", "instance_geometry_set_material_override", 395945892, Nil, main.p_object, instance, material);  }  // 370
instance_geometry_set_material_overlay :: (main: *RenderingServer, instance: RID, material: RID) { sys_call("RenderingServer", "instance_geometry_set_material_overlay", 395945892, Nil, main.p_object, instance, material);  }  // 371
instance_geometry_set_visibility_range :: (main: *RenderingServer, instance: RID, min: float, max: float, min_margin: float, max_margin: float, fade_mode: RenderingServer.VisibilityRangeFadeMode) { sys_call("RenderingServer", "instance_geometry_set_visibility_range", 4263925858, Nil, main.p_object, instance, min, max, min_margin, max_margin, fade_mode);  }  // 372
instance_geometry_set_lightmap :: (main: *RenderingServer, instance: RID, lightmap: RID, lightmap_uv_scale: Rect2, lightmap_slice: int) { sys_call("RenderingServer", "instance_geometry_set_lightmap", 536974962, Nil, main.p_object, instance, lightmap, lightmap_uv_scale, lightmap_slice);  }  // 373
instance_geometry_set_lod_bias :: (main: *RenderingServer, instance: RID, lod_bias: float) { sys_call("RenderingServer", "instance_geometry_set_lod_bias", 1794382983, Nil, main.p_object, instance, lod_bias);  }  // 374
instance_geometry_set_shader_parameter :: (main: *RenderingServer, instance: RID, parameter: string, value: Variant) { sys_call("RenderingServer", "instance_geometry_set_shader_parameter", 3477296213, Nil, main.p_object, instance, parameter, value);  }  // 375
instance_geometry_get_shader_parameter :: (main: *RenderingServer, instance: RID, parameter: string) -> Variant { call_ret := cast(*Variant) sys_call("RenderingServer", "instance_geometry_get_shader_parameter", 2621281810, Variant, main.p_object, instance, parameter); return call_ret.*; }  // 376
instance_geometry_get_shader_parameter_default_value :: (main: *RenderingServer, instance: RID, parameter: string) -> Variant { call_ret := cast(*Variant) sys_call("RenderingServer", "instance_geometry_get_shader_parameter_default_value", 2621281810, Variant, main.p_object, instance, parameter); return call_ret.*; }  // 377
instance_geometry_get_shader_parameter_list :: (main: *RenderingServer, instance: RID) -> [] Dictionary { call_ret := cast(*[] Dictionary) sys_call("RenderingServer", "instance_geometry_get_shader_parameter_list", 2684255073, [] Dictionary, main.p_object, instance); return call_ret.*; }  // 378
instances_cull_aabb :: (main: *RenderingServer, aabb: AABB) -> PackedInt64Array { call_ret := cast(*PackedInt64Array) sys_call("RenderingServer", "instances_cull_aabb", 2570105777, PackedInt64Array, main.p_object, aabb); return call_ret.*; }  // 379
instances_cull_ray :: (main: *RenderingServer, from: Vector3, to: Vector3) -> PackedInt64Array { call_ret := cast(*PackedInt64Array) sys_call("RenderingServer", "instances_cull_ray", 2208759584, PackedInt64Array, main.p_object, from, to); return call_ret.*; }  // 380
instances_cull_convex :: (main: *RenderingServer, convex: [] Plane) -> PackedInt64Array { call_ret := cast(*PackedInt64Array) sys_call("RenderingServer", "instances_cull_convex", 2488539944, PackedInt64Array, main.p_object, convex); return call_ret.*; }  // 381
bake_render_uv2 :: (main: *RenderingServer, base: RID, material_overrides: [] RID, image_size: Vector2i) -> [] Image { call_ret := cast(*[] Image) sys_call("RenderingServer", "bake_render_uv2", 1904608558, [] Image, main.p_object, base, material_overrides, image_size); return call_ret.*; }  // 382
canvas_create :: (main: *RenderingServer) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "canvas_create", 529393457, RID, main.p_object); return call_ret.*; }  // 383
canvas_set_item_mirroring :: (main: *RenderingServer, canvas: RID, item: RID, mirroring: Vector2) { sys_call("RenderingServer", "canvas_set_item_mirroring", 2343975398, Nil, main.p_object, canvas, item, mirroring);  }  // 384
canvas_set_item_repeat :: (main: *RenderingServer, item: RID, repeat_size: Vector2, repeat_times: int) { sys_call("RenderingServer", "canvas_set_item_repeat", 1739512717, Nil, main.p_object, item, repeat_size, repeat_times);  }  // 385
canvas_set_modulate :: (main: *RenderingServer, canvas: RID, color: Color) { sys_call("RenderingServer", "canvas_set_modulate", 2948539648, Nil, main.p_object, canvas, color);  }  // 386
canvas_set_disable_scale :: (main: *RenderingServer, disable: bool) { sys_call("RenderingServer", "canvas_set_disable_scale", 2586408642, Nil, main.p_object, disable);  }  // 387
canvas_texture_create :: (main: *RenderingServer) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "canvas_texture_create", 529393457, RID, main.p_object); return call_ret.*; }  // 388
canvas_texture_set_channel :: (main: *RenderingServer, canvas_texture: RID, channel: RenderingServer.CanvasTextureChannel, texture: RID) { sys_call("RenderingServer", "canvas_texture_set_channel", 3822119138, Nil, main.p_object, canvas_texture, channel, texture);  }  // 389
canvas_texture_set_shading_parameters :: (main: *RenderingServer, canvas_texture: RID, base_color: Color, shininess: float) { sys_call("RenderingServer", "canvas_texture_set_shading_parameters", 2124967469, Nil, main.p_object, canvas_texture, base_color, shininess);  }  // 390
canvas_texture_set_texture_filter :: (main: *RenderingServer, canvas_texture: RID, filter: RenderingServer.CanvasItemTextureFilter) { sys_call("RenderingServer", "canvas_texture_set_texture_filter", 1155129294, Nil, main.p_object, canvas_texture, filter);  }  // 391
canvas_texture_set_texture_repeat :: (main: *RenderingServer, canvas_texture: RID, repeat: RenderingServer.CanvasItemTextureRepeat) { sys_call("RenderingServer", "canvas_texture_set_texture_repeat", 1652956681, Nil, main.p_object, canvas_texture, repeat);  }  // 392
canvas_item_create :: (main: *RenderingServer) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "canvas_item_create", 529393457, RID, main.p_object); return call_ret.*; }  // 393
canvas_item_set_parent :: (main: *RenderingServer, item: RID, parent: RID) { sys_call("RenderingServer", "canvas_item_set_parent", 395945892, Nil, main.p_object, item, parent);  }  // 394
canvas_item_set_default_texture_filter :: (main: *RenderingServer, item: RID, filter: RenderingServer.CanvasItemTextureFilter) { sys_call("RenderingServer", "canvas_item_set_default_texture_filter", 1155129294, Nil, main.p_object, item, filter);  }  // 395
canvas_item_set_default_texture_repeat :: (main: *RenderingServer, item: RID, repeat: RenderingServer.CanvasItemTextureRepeat) { sys_call("RenderingServer", "canvas_item_set_default_texture_repeat", 1652956681, Nil, main.p_object, item, repeat);  }  // 396
canvas_item_set_visible :: (main: *RenderingServer, item: RID, visible: bool) { sys_call("RenderingServer", "canvas_item_set_visible", 1265174801, Nil, main.p_object, item, visible);  }  // 397
canvas_item_set_light_mask :: (main: *RenderingServer, item: RID, mask: int) { sys_call("RenderingServer", "canvas_item_set_light_mask", 3411492887, Nil, main.p_object, item, mask);  }  // 398
canvas_item_set_visibility_layer :: (main: *RenderingServer, item: RID, visibility_layer: int) { sys_call("RenderingServer", "canvas_item_set_visibility_layer", 3411492887, Nil, main.p_object, item, visibility_layer);  }  // 399
canvas_item_set_transform :: (main: *RenderingServer, item: RID, transform: Transform2D) { sys_call("RenderingServer", "canvas_item_set_transform", 1246044741, Nil, main.p_object, item, transform);  }  // 400
canvas_item_set_clip :: (main: *RenderingServer, item: RID, clip: bool) { sys_call("RenderingServer", "canvas_item_set_clip", 1265174801, Nil, main.p_object, item, clip);  }  // 401
canvas_item_set_distance_field_mode :: (main: *RenderingServer, item: RID, enabled: bool) { sys_call("RenderingServer", "canvas_item_set_distance_field_mode", 1265174801, Nil, main.p_object, item, enabled);  }  // 402
canvas_item_set_custom_rect :: (main: *RenderingServer, item: RID, use_custom_rect: bool) { sys_call("RenderingServer", "canvas_item_set_custom_rect", 1333997032, Nil, main.p_object, item, use_custom_rect);  }  // 403
canvas_item_set_modulate :: (main: *RenderingServer, item: RID, color: Color) { sys_call("RenderingServer", "canvas_item_set_modulate", 2948539648, Nil, main.p_object, item, color);  }  // 404
canvas_item_set_self_modulate :: (main: *RenderingServer, item: RID, color: Color) { sys_call("RenderingServer", "canvas_item_set_self_modulate", 2948539648, Nil, main.p_object, item, color);  }  // 405
canvas_item_set_draw_behind_parent :: (main: *RenderingServer, item: RID, enabled: bool) { sys_call("RenderingServer", "canvas_item_set_draw_behind_parent", 1265174801, Nil, main.p_object, item, enabled);  }  // 406
canvas_item_set_interpolated :: (main: *RenderingServer, item: RID, interpolated: bool) { sys_call("RenderingServer", "canvas_item_set_interpolated", 1265174801, Nil, main.p_object, item, interpolated);  }  // 407
canvas_item_reset_physics_interpolation :: (main: *RenderingServer, item: RID) { sys_call("RenderingServer", "canvas_item_reset_physics_interpolation", 2722037293, Nil, main.p_object, item);  }  // 408
canvas_item_transform_physics_interpolation :: (main: *RenderingServer, item: RID, transform: Transform2D) { sys_call("RenderingServer", "canvas_item_transform_physics_interpolation", 1246044741, Nil, main.p_object, item, transform);  }  // 409
canvas_item_add_line :: (main: *RenderingServer, item: RID, from: Vector2, to: Vector2, color: Color) { sys_call("RenderingServer", "canvas_item_add_line", 1819681853, Nil, main.p_object, item, from, to, color);  }  // 410
canvas_item_add_polyline :: (main: *RenderingServer, item: RID, points: PackedVector2Array, colors: PackedColorArray) { sys_call("RenderingServer", "canvas_item_add_polyline", 3098767073, Nil, main.p_object, item, points, colors);  }  // 411
canvas_item_add_multiline :: (main: *RenderingServer, item: RID, points: PackedVector2Array, colors: PackedColorArray) { sys_call("RenderingServer", "canvas_item_add_multiline", 3098767073, Nil, main.p_object, item, points, colors);  }  // 412
canvas_item_add_rect :: (main: *RenderingServer, item: RID, rect: Rect2, color: Color) { sys_call("RenderingServer", "canvas_item_add_rect", 3523446176, Nil, main.p_object, item, rect, color);  }  // 413
canvas_item_add_circle :: (main: *RenderingServer, item: RID, pos: Vector2, radius: float, color: Color) { sys_call("RenderingServer", "canvas_item_add_circle", 333077949, Nil, main.p_object, item, pos, radius, color);  }  // 414
canvas_item_add_texture_rect :: (main: *RenderingServer, item: RID, rect: Rect2, texture: RID) { sys_call("RenderingServer", "canvas_item_add_texture_rect", 324864032, Nil, main.p_object, item, rect, texture);  }  // 415
canvas_item_add_msdf_texture_rect_region :: (main: *RenderingServer, item: RID, rect: Rect2, texture: RID, src_rect: Rect2) { sys_call("RenderingServer", "canvas_item_add_msdf_texture_rect_region", 97408773, Nil, main.p_object, item, rect, texture, src_rect);  }  // 416
canvas_item_add_lcd_texture_rect_region :: (main: *RenderingServer, item: RID, rect: Rect2, texture: RID, src_rect: Rect2, modulate: Color) { sys_call("RenderingServer", "canvas_item_add_lcd_texture_rect_region", 359793297, Nil, main.p_object, item, rect, texture, src_rect, modulate);  }  // 417
canvas_item_add_texture_rect_region :: (main: *RenderingServer, item: RID, rect: Rect2, texture: RID, src_rect: Rect2) { sys_call("RenderingServer", "canvas_item_add_texture_rect_region", 485157892, Nil, main.p_object, item, rect, texture, src_rect);  }  // 418
canvas_item_add_nine_patch :: (main: *RenderingServer, item: RID, rect: Rect2, source: Rect2, texture: RID, topleft: Vector2, bottomright: Vector2) { sys_call("RenderingServer", "canvas_item_add_nine_patch", 389957886, Nil, main.p_object, item, rect, source, texture, topleft, bottomright);  }  // 419
canvas_item_add_primitive :: (main: *RenderingServer, item: RID, points: PackedVector2Array, colors: PackedColorArray, uvs: PackedVector2Array, texture: RID) { sys_call("RenderingServer", "canvas_item_add_primitive", 3731601077, Nil, main.p_object, item, points, colors, uvs, texture);  }  // 420
canvas_item_add_polygon :: (main: *RenderingServer, item: RID, points: PackedVector2Array, colors: PackedColorArray) { sys_call("RenderingServer", "canvas_item_add_polygon", 3580000528, Nil, main.p_object, item, points, colors);  }  // 421
canvas_item_add_triangle_array :: (main: *RenderingServer, item: RID, indices: PackedInt32Array, points: PackedVector2Array, colors: PackedColorArray) { sys_call("RenderingServer", "canvas_item_add_triangle_array", 660261329, Nil, main.p_object, item, indices, points, colors);  }  // 422
canvas_item_add_mesh :: (main: *RenderingServer, item: RID, mesh: RID) { sys_call("RenderingServer", "canvas_item_add_mesh", 316450961, Nil, main.p_object, item, mesh);  }  // 423
canvas_item_add_multimesh :: (main: *RenderingServer, item: RID, mesh: RID) { sys_call("RenderingServer", "canvas_item_add_multimesh", 2131855138, Nil, main.p_object, item, mesh);  }  // 424
canvas_item_add_particles :: (main: *RenderingServer, item: RID, particles: RID, texture: RID) { sys_call("RenderingServer", "canvas_item_add_particles", 2575754278, Nil, main.p_object, item, particles, texture);  }  // 425
canvas_item_add_set_transform :: (main: *RenderingServer, item: RID, transform: Transform2D) { sys_call("RenderingServer", "canvas_item_add_set_transform", 1246044741, Nil, main.p_object, item, transform);  }  // 426
canvas_item_add_clip_ignore :: (main: *RenderingServer, item: RID, ignore: bool) { sys_call("RenderingServer", "canvas_item_add_clip_ignore", 1265174801, Nil, main.p_object, item, ignore);  }  // 427
canvas_item_add_animation_slice :: (main: *RenderingServer, item: RID, animation_length: float, slice_begin: float, slice_end: float) { sys_call("RenderingServer", "canvas_item_add_animation_slice", 2646834499, Nil, main.p_object, item, animation_length, slice_begin, slice_end);  }  // 428
canvas_item_set_sort_children_by_y :: (main: *RenderingServer, item: RID, enabled: bool) { sys_call("RenderingServer", "canvas_item_set_sort_children_by_y", 1265174801, Nil, main.p_object, item, enabled);  }  // 429
canvas_item_set_z_index :: (main: *RenderingServer, item: RID, z_index: int) { sys_call("RenderingServer", "canvas_item_set_z_index", 3411492887, Nil, main.p_object, item, z_index);  }  // 430
canvas_item_set_z_as_relative_to_parent :: (main: *RenderingServer, item: RID, enabled: bool) { sys_call("RenderingServer", "canvas_item_set_z_as_relative_to_parent", 1265174801, Nil, main.p_object, item, enabled);  }  // 431
canvas_item_set_copy_to_backbuffer :: (main: *RenderingServer, item: RID, enabled: bool, rect: Rect2) { sys_call("RenderingServer", "canvas_item_set_copy_to_backbuffer", 2429202503, Nil, main.p_object, item, enabled, rect);  }  // 432
canvas_item_attach_skeleton :: (main: *RenderingServer, item: RID, skeleton: RID) { sys_call("RenderingServer", "canvas_item_attach_skeleton", 395945892, Nil, main.p_object, item, skeleton);  }  // 433
canvas_item_clear :: (main: *RenderingServer, item: RID) { sys_call("RenderingServer", "canvas_item_clear", 2722037293, Nil, main.p_object, item);  }  // 434
canvas_item_set_draw_index :: (main: *RenderingServer, item: RID, index: int) { sys_call("RenderingServer", "canvas_item_set_draw_index", 3411492887, Nil, main.p_object, item, index);  }  // 435
canvas_item_set_material :: (main: *RenderingServer, item: RID, material: RID) { sys_call("RenderingServer", "canvas_item_set_material", 395945892, Nil, main.p_object, item, material);  }  // 436
canvas_item_set_use_parent_material :: (main: *RenderingServer, item: RID, enabled: bool) { sys_call("RenderingServer", "canvas_item_set_use_parent_material", 1265174801, Nil, main.p_object, item, enabled);  }  // 437
canvas_item_set_instance_shader_parameter :: (main: *RenderingServer, instance: RID, parameter: string, value: Variant) { sys_call("RenderingServer", "canvas_item_set_instance_shader_parameter", 3477296213, Nil, main.p_object, instance, parameter, value);  }  // 438
canvas_item_get_instance_shader_parameter :: (main: *RenderingServer, instance: RID, parameter: string) -> Variant { call_ret := cast(*Variant) sys_call("RenderingServer", "canvas_item_get_instance_shader_parameter", 2621281810, Variant, main.p_object, instance, parameter); return call_ret.*; }  // 439
canvas_item_get_instance_shader_parameter_default_value :: (main: *RenderingServer, instance: RID, parameter: string) -> Variant { call_ret := cast(*Variant) sys_call("RenderingServer", "canvas_item_get_instance_shader_parameter_default_value", 2621281810, Variant, main.p_object, instance, parameter); return call_ret.*; }  // 440
canvas_item_get_instance_shader_parameter_list :: (main: *RenderingServer, instance: RID) -> [] Dictionary { call_ret := cast(*[] Dictionary) sys_call("RenderingServer", "canvas_item_get_instance_shader_parameter_list", 2684255073, [] Dictionary, main.p_object, instance); return call_ret.*; }  // 441
canvas_item_set_visibility_notifier :: (main: *RenderingServer, item: RID, enable: bool, area: Rect2, enter_callable: Callable, exit_callable: Callable) { sys_call("RenderingServer", "canvas_item_set_visibility_notifier", 3568945579, Nil, main.p_object, item, enable, area, enter_callable, exit_callable);  }  // 442
canvas_item_set_canvas_group_mode :: (main: *RenderingServer, item: RID, mode: RenderingServer.CanvasGroupMode) { sys_call("RenderingServer", "canvas_item_set_canvas_group_mode", 3973586316, Nil, main.p_object, item, mode);  }  // 443
debug_canvas_item_get_rect :: (main: *RenderingServer, item: RID) -> Rect2 { call_ret := cast(*Rect2) sys_call("RenderingServer", "debug_canvas_item_get_rect", 624227424, Rect2, main.p_object, item); return call_ret.*; }  // 444
canvas_light_create :: (main: *RenderingServer) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "canvas_light_create", 529393457, RID, main.p_object); return call_ret.*; }  // 445
canvas_light_attach_to_canvas :: (main: *RenderingServer, light: RID, canvas: RID) { sys_call("RenderingServer", "canvas_light_attach_to_canvas", 395945892, Nil, main.p_object, light, canvas);  }  // 446
canvas_light_set_enabled :: (main: *RenderingServer, light: RID, enabled: bool) { sys_call("RenderingServer", "canvas_light_set_enabled", 1265174801, Nil, main.p_object, light, enabled);  }  // 447
canvas_light_set_texture_scale :: (main: *RenderingServer, light: RID, scale: float) { sys_call("RenderingServer", "canvas_light_set_texture_scale", 1794382983, Nil, main.p_object, light, scale);  }  // 448
canvas_light_set_transform :: (main: *RenderingServer, light: RID, transform: Transform2D) { sys_call("RenderingServer", "canvas_light_set_transform", 1246044741, Nil, main.p_object, light, transform);  }  // 449
canvas_light_set_texture :: (main: *RenderingServer, light: RID, texture: RID) { sys_call("RenderingServer", "canvas_light_set_texture", 395945892, Nil, main.p_object, light, texture);  }  // 450
canvas_light_set_texture_offset :: (main: *RenderingServer, light: RID, offset: Vector2) { sys_call("RenderingServer", "canvas_light_set_texture_offset", 3201125042, Nil, main.p_object, light, offset);  }  // 451
canvas_light_set_color :: (main: *RenderingServer, light: RID, color: Color) { sys_call("RenderingServer", "canvas_light_set_color", 2948539648, Nil, main.p_object, light, color);  }  // 452
canvas_light_set_height :: (main: *RenderingServer, light: RID, height: float) { sys_call("RenderingServer", "canvas_light_set_height", 1794382983, Nil, main.p_object, light, height);  }  // 453
canvas_light_set_energy :: (main: *RenderingServer, light: RID, energy: float) { sys_call("RenderingServer", "canvas_light_set_energy", 1794382983, Nil, main.p_object, light, energy);  }  // 454
canvas_light_set_z_range :: (main: *RenderingServer, light: RID, min_z: int, max_z: int) { sys_call("RenderingServer", "canvas_light_set_z_range", 4288446313, Nil, main.p_object, light, min_z, max_z);  }  // 455
canvas_light_set_layer_range :: (main: *RenderingServer, light: RID, min_layer: int, max_layer: int) { sys_call("RenderingServer", "canvas_light_set_layer_range", 4288446313, Nil, main.p_object, light, min_layer, max_layer);  }  // 456
canvas_light_set_item_cull_mask :: (main: *RenderingServer, light: RID, mask: int) { sys_call("RenderingServer", "canvas_light_set_item_cull_mask", 3411492887, Nil, main.p_object, light, mask);  }  // 457
canvas_light_set_item_shadow_cull_mask :: (main: *RenderingServer, light: RID, mask: int) { sys_call("RenderingServer", "canvas_light_set_item_shadow_cull_mask", 3411492887, Nil, main.p_object, light, mask);  }  // 458
canvas_light_set_mode :: (main: *RenderingServer, light: RID, mode: RenderingServer.CanvasLightMode) { sys_call("RenderingServer", "canvas_light_set_mode", 2957564891, Nil, main.p_object, light, mode);  }  // 459
canvas_light_set_shadow_enabled :: (main: *RenderingServer, light: RID, enabled: bool) { sys_call("RenderingServer", "canvas_light_set_shadow_enabled", 1265174801, Nil, main.p_object, light, enabled);  }  // 460
canvas_light_set_shadow_filter :: (main: *RenderingServer, light: RID, filter: RenderingServer.CanvasLightShadowFilter) { sys_call("RenderingServer", "canvas_light_set_shadow_filter", 393119659, Nil, main.p_object, light, filter);  }  // 461
canvas_light_set_shadow_color :: (main: *RenderingServer, light: RID, color: Color) { sys_call("RenderingServer", "canvas_light_set_shadow_color", 2948539648, Nil, main.p_object, light, color);  }  // 462
canvas_light_set_shadow_smooth :: (main: *RenderingServer, light: RID, smooth: float) { sys_call("RenderingServer", "canvas_light_set_shadow_smooth", 1794382983, Nil, main.p_object, light, smooth);  }  // 463
canvas_light_set_blend_mode :: (main: *RenderingServer, light: RID, mode: RenderingServer.CanvasLightBlendMode) { sys_call("RenderingServer", "canvas_light_set_blend_mode", 804895945, Nil, main.p_object, light, mode);  }  // 464
canvas_light_set_interpolated :: (main: *RenderingServer, light: RID, interpolated: bool) { sys_call("RenderingServer", "canvas_light_set_interpolated", 1265174801, Nil, main.p_object, light, interpolated);  }  // 465
canvas_light_reset_physics_interpolation :: (main: *RenderingServer, light: RID) { sys_call("RenderingServer", "canvas_light_reset_physics_interpolation", 2722037293, Nil, main.p_object, light);  }  // 466
canvas_light_transform_physics_interpolation :: (main: *RenderingServer, light: RID, transform: Transform2D) { sys_call("RenderingServer", "canvas_light_transform_physics_interpolation", 1246044741, Nil, main.p_object, light, transform);  }  // 467
canvas_light_occluder_create :: (main: *RenderingServer) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "canvas_light_occluder_create", 529393457, RID, main.p_object); return call_ret.*; }  // 468
canvas_light_occluder_attach_to_canvas :: (main: *RenderingServer, occluder: RID, canvas: RID) { sys_call("RenderingServer", "canvas_light_occluder_attach_to_canvas", 395945892, Nil, main.p_object, occluder, canvas);  }  // 469
canvas_light_occluder_set_enabled :: (main: *RenderingServer, occluder: RID, enabled: bool) { sys_call("RenderingServer", "canvas_light_occluder_set_enabled", 1265174801, Nil, main.p_object, occluder, enabled);  }  // 470
canvas_light_occluder_set_polygon :: (main: *RenderingServer, occluder: RID, polygon: RID) { sys_call("RenderingServer", "canvas_light_occluder_set_polygon", 395945892, Nil, main.p_object, occluder, polygon);  }  // 471
canvas_light_occluder_set_as_sdf_collision :: (main: *RenderingServer, occluder: RID, enable: bool) { sys_call("RenderingServer", "canvas_light_occluder_set_as_sdf_collision", 1265174801, Nil, main.p_object, occluder, enable);  }  // 472
canvas_light_occluder_set_transform :: (main: *RenderingServer, occluder: RID, transform: Transform2D) { sys_call("RenderingServer", "canvas_light_occluder_set_transform", 1246044741, Nil, main.p_object, occluder, transform);  }  // 473
canvas_light_occluder_set_light_mask :: (main: *RenderingServer, occluder: RID, mask: int) { sys_call("RenderingServer", "canvas_light_occluder_set_light_mask", 3411492887, Nil, main.p_object, occluder, mask);  }  // 474
canvas_light_occluder_set_interpolated :: (main: *RenderingServer, occluder: RID, interpolated: bool) { sys_call("RenderingServer", "canvas_light_occluder_set_interpolated", 1265174801, Nil, main.p_object, occluder, interpolated);  }  // 475
canvas_light_occluder_reset_physics_interpolation :: (main: *RenderingServer, occluder: RID) { sys_call("RenderingServer", "canvas_light_occluder_reset_physics_interpolation", 2722037293, Nil, main.p_object, occluder);  }  // 476
canvas_light_occluder_transform_physics_interpolation :: (main: *RenderingServer, occluder: RID, transform: Transform2D) { sys_call("RenderingServer", "canvas_light_occluder_transform_physics_interpolation", 1246044741, Nil, main.p_object, occluder, transform);  }  // 477
canvas_occluder_polygon_create :: (main: *RenderingServer) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "canvas_occluder_polygon_create", 529393457, RID, main.p_object); return call_ret.*; }  // 478
canvas_occluder_polygon_set_shape :: (main: *RenderingServer, occluder_polygon: RID, shape: PackedVector2Array, closed: bool) { sys_call("RenderingServer", "canvas_occluder_polygon_set_shape", 2103882027, Nil, main.p_object, occluder_polygon, shape, closed);  }  // 479
canvas_occluder_polygon_set_cull_mode :: (main: *RenderingServer, occluder_polygon: RID, mode: RenderingServer.CanvasOccluderPolygonCullMode) { sys_call("RenderingServer", "canvas_occluder_polygon_set_cull_mode", 1839404663, Nil, main.p_object, occluder_polygon, mode);  }  // 480
canvas_set_shadow_texture_size :: (main: *RenderingServer, size: int) { sys_call("RenderingServer", "canvas_set_shadow_texture_size", 1286410249, Nil, main.p_object, size);  }  // 481
global_shader_parameter_add :: (main: *RenderingServer, name: string, type: RenderingServer.GlobalShaderParameterType, default_value: Variant) { sys_call("RenderingServer", "global_shader_parameter_add", 463390080, Nil, main.p_object, name, type, default_value);  }  // 482
global_shader_parameter_remove :: (main: *RenderingServer, name: string) { sys_call("RenderingServer", "global_shader_parameter_remove", 3304788590, Nil, main.p_object, name);  }  // 483
global_shader_parameter_get_list :: (main: *RenderingServer) -> [] StringName { call_ret := cast(*[] StringName) sys_call("RenderingServer", "global_shader_parameter_get_list", 3995934104, [] StringName, main.p_object); return call_ret.*; }  // 484
global_shader_parameter_set :: (main: *RenderingServer, name: string, value: Variant) { sys_call("RenderingServer", "global_shader_parameter_set", 3776071444, Nil, main.p_object, name, value);  }  // 485
global_shader_parameter_set_override :: (main: *RenderingServer, name: string, value: Variant) { sys_call("RenderingServer", "global_shader_parameter_set_override", 3776071444, Nil, main.p_object, name, value);  }  // 486
global_shader_parameter_get :: (main: *RenderingServer, name: string) -> Variant { call_ret := cast(*Variant) sys_call("RenderingServer", "global_shader_parameter_get", 2760726917, Variant, main.p_object, name); return call_ret.*; }  // 487
global_shader_parameter_get_type :: (main: *RenderingServer, name: string) -> RenderingServer.GlobalShaderParameterType { call_ret := cast(*RenderingServer.GlobalShaderParameterType) sys_call("RenderingServer", "global_shader_parameter_get_type", 1601414142, RenderingServer.GlobalShaderParameterType, main.p_object, name); return call_ret.*; }  // 488
free_rid :: (main: *RenderingServer, rid: RID) { sys_call("RenderingServer", "free_rid", 2722037293, Nil, main.p_object, rid);  }  // 489
request_frame_drawn_callback :: (main: *RenderingServer, callable: Callable) { sys_call("RenderingServer", "request_frame_drawn_callback", 1611583062, Nil, main.p_object, callable);  }  // 490
has_changed :: (main: *RenderingServer) -> bool { call_ret := cast(*bool) sys_call("RenderingServer", "has_changed", 36873697, bool, main.p_object); return call_ret.*; }  // 491
get_rendering_info :: (main: *RenderingServer, info: RenderingServer.RenderingInfo) -> int { call_ret := cast(*int) sys_call("RenderingServer", "get_rendering_info", 3763192241, int, main.p_object, info); return call_ret.*; }  // 492
get_video_adapter_name :: (main: *RenderingServer) -> gstring { call_ret := cast(*gstring) sys_call("RenderingServer", "get_video_adapter_name", 201670096, gstring, main.p_object); return call_ret.*; }  // 493
get_video_adapter_vendor :: (main: *RenderingServer) -> gstring { call_ret := cast(*gstring) sys_call("RenderingServer", "get_video_adapter_vendor", 201670096, gstring, main.p_object); return call_ret.*; }  // 494
get_video_adapter_type :: (main: *RenderingServer) -> RenderingDevice.DeviceType { call_ret := cast(*RenderingDevice.DeviceType) sys_call("RenderingServer", "get_video_adapter_type", 3099547011, RenderingDevice.DeviceType, main.p_object); return call_ret.*; }  // 495
get_video_adapter_api_version :: (main: *RenderingServer) -> gstring { call_ret := cast(*gstring) sys_call("RenderingServer", "get_video_adapter_api_version", 201670096, gstring, main.p_object); return call_ret.*; }  // 496
get_current_rendering_driver_name :: (main: *RenderingServer) -> gstring { call_ret := cast(*gstring) sys_call("RenderingServer", "get_current_rendering_driver_name", 201670096, gstring, main.p_object); return call_ret.*; }  // 497
get_current_rendering_method :: (main: *RenderingServer) -> gstring { call_ret := cast(*gstring) sys_call("RenderingServer", "get_current_rendering_method", 201670096, gstring, main.p_object); return call_ret.*; }  // 498
make_sphere_mesh :: (main: *RenderingServer, latitudes: int, longitudes: int, radius: float) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "make_sphere_mesh", 2251015897, RID, main.p_object, latitudes, longitudes, radius); return call_ret.*; }  // 499
get_test_cube :: (main: *RenderingServer) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "get_test_cube", 529393457, RID, main.p_object); return call_ret.*; }  // 500
get_test_texture :: (main: *RenderingServer) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "get_test_texture", 529393457, RID, main.p_object); return call_ret.*; }  // 501
get_white_texture :: (main: *RenderingServer) -> RID { call_ret := cast(*RID) sys_call("RenderingServer", "get_white_texture", 529393457, RID, main.p_object); return call_ret.*; }  // 502
set_boot_image :: (main: *RenderingServer, image: Image, color: Color, scale: bool) { sys_call("RenderingServer", "set_boot_image", 3759744527, Nil, main.p_object, image, color, scale);  }  // 503
get_default_clear_color :: (main: *RenderingServer) -> Color { call_ret := cast(*Color) sys_call("RenderingServer", "get_default_clear_color", 3200896285, Color, main.p_object); return call_ret.*; }  // 504
set_default_clear_color :: (main: *RenderingServer, color: Color) { sys_call("RenderingServer", "set_default_clear_color", 2920490490, Nil, main.p_object, color);  }  // 505
has_os_feature :: (main: *RenderingServer, feature: string) -> bool { call_ret := cast(*bool) sys_call("RenderingServer", "has_os_feature", 3927539163, bool, main.p_object, feature); return call_ret.*; }  // 506
set_debug_generate_wireframes :: (main: *RenderingServer, generate: bool) { sys_call("RenderingServer", "set_debug_generate_wireframes", 2586408642, Nil, main.p_object, generate);  }  // 507
is_render_loop_enabled :: (main: *RenderingServer) -> bool { call_ret := cast(*bool) sys_call("RenderingServer", "is_render_loop_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 508
set_render_loop_enabled :: (main: *RenderingServer, enabled: bool) { sys_call("RenderingServer", "set_render_loop_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 509
get_frame_setup_time_cpu :: (main: *RenderingServer) -> float { call_ret := cast(*float) sys_call("RenderingServer", "get_frame_setup_time_cpu", 1740695150, float, main.p_object); return call_ret.*; }  // 510
force_sync :: (main: *RenderingServer) { sys_call("RenderingServer", "force_sync", 3218959716, Nil, main.p_object);  }  // 511
force_draw :: (main: *RenderingServer) { sys_call("RenderingServer", "force_draw", 1076185472, Nil, main.p_object);  }  // 512
get_rendering_device :: (main: *RenderingServer) -> *RenderingDevice { call_ret := cast(*RenderingDevice) sys_call("RenderingServer", "get_rendering_device", 1405107940, RenderingDevice, main.p_object); return call_ret; }  // 513
create_local_rendering_device :: (main: *RenderingServer) -> *RenderingDevice { call_ret := cast(*RenderingDevice) sys_call("RenderingServer", "create_local_rendering_device", 1405107940, RenderingDevice, main.p_object); return call_ret; }  // 514
is_on_render_thread :: (main: *RenderingServer) -> bool { call_ret := cast(*bool) sys_call("RenderingServer", "is_on_render_thread", 2240911060, bool, main.p_object); return call_ret.*; }  // 515
call_on_render_thread :: (main: *RenderingServer, callable: Callable) { sys_call("RenderingServer", "call_on_render_thread", 1611583062, Nil, main.p_object, callable);  }  // 516
has_feature :: (main: *RenderingServer, feature: RenderingServer.Features) -> bool { call_ret := cast(*bool) sys_call("RenderingServer", "has_feature", 598462696, bool, main.p_object, feature); return call_ret.*; }  // 517

set_path :: (main: *Resource, path: string) { sys_call("Resource", "set_path", 83702148, Nil, main.p_object, path);  }  // 4
take_over_path :: (main: *Resource, path: string) { sys_call("Resource", "take_over_path", 83702148, Nil, main.p_object, path);  }  // 5
get_path :: (main: *Resource) -> gstring { call_ret := cast(*gstring) sys_call("Resource", "get_path", 201670096, gstring, main.p_object); return call_ret.*; }  // 6
set_path_cache :: (main: *Resource, path: string) { sys_call("Resource", "set_path_cache", 83702148, Nil, main.p_object, path);  }  // 7
set_name :: (main: *Resource, name: string) { sys_call("Resource", "set_name", 83702148, Nil, main.p_object, name);  }  // 8
get_name :: (main: *Resource) -> gstring { call_ret := cast(*gstring) sys_call("Resource", "get_name", 201670096, gstring, main.p_object); return call_ret.*; }  // 9
get_rid :: (main: *Resource) -> RID { call_ret := cast(*RID) sys_call("Resource", "get_rid", 2944877500, RID, main.p_object); return call_ret.*; }  // 10
set_local_to_scene :: (main: *Resource, enable: bool) { sys_call("Resource", "set_local_to_scene", 2586408642, Nil, main.p_object, enable);  }  // 11
is_local_to_scene :: (main: *Resource) -> bool { call_ret := cast(*bool) sys_call("Resource", "is_local_to_scene", 36873697, bool, main.p_object); return call_ret.*; }  // 12
get_local_scene :: (main: *Resource) -> *Node { call_ret := cast(*Node) sys_call("Resource", "get_local_scene", 3160264692, Node, main.p_object); return call_ret; }  // 13
setup_local_to_scene :: (main: *Resource) { sys_call("Resource", "setup_local_to_scene", 3218959716, Nil, main.p_object);  }  // 14
reset_state :: (main: *Resource) { sys_call("Resource", "reset_state", 3218959716, Nil, main.p_object);  }  // 15
set_id_for_path :: (main: *Resource, path: string, id: string) { sys_call("Resource", "set_id_for_path", 3186203200, Nil, main.p_object, path, id);  }  // 16
get_id_for_path :: (main: *Resource, path: string) -> gstring { call_ret := cast(*gstring) sys_call("Resource", "get_id_for_path", 3135753539, gstring, main.p_object, path); return call_ret.*; }  // 17
is_built_in :: (main: *Resource) -> bool { call_ret := cast(*bool) sys_call("Resource", "is_built_in", 36873697, bool, main.p_object); return call_ret.*; }  // 18
generate_scene_unique_id :: (main: *Resource) -> gstring { call_ret := cast(*gstring) sys_call("Resource", "generate_scene_unique_id", 2841200299, gstring, main.p_object); return call_ret.*; }  // 19
set_scene_unique_id :: (main: *Resource, id: string) { sys_call("Resource", "set_scene_unique_id", 83702148, Nil, main.p_object, id);  }  // 20
get_scene_unique_id :: (main: *Resource) -> gstring { call_ret := cast(*gstring) sys_call("Resource", "get_scene_unique_id", 201670096, gstring, main.p_object); return call_ret.*; }  // 21
emit_changed :: (main: *Resource) { sys_call("Resource", "emit_changed", 3218959716, Nil, main.p_object);  }  // 22
duplicate :: (main: *Resource) -> *Resource { call_ret := cast(*Resource) sys_call("Resource", "duplicate", 482882304, Resource, main.p_object); return call_ret; }  // 23













load_from_buffer :: (main: *ResourceImporterOggVorbis, stream_data: PackedByteArray) -> *AudioStreamOggVorbis { call_ret := cast(*AudioStreamOggVorbis) sys_call("ResourceImporterOggVorbis", "load_from_buffer", 354904730, AudioStreamOggVorbis, main.p_object, stream_data); return call_ret; }  // 0
load_from_file :: (main: *ResourceImporterOggVorbis, path: string) -> *AudioStreamOggVorbis { call_ret := cast(*AudioStreamOggVorbis) sys_call("ResourceImporterOggVorbis", "load_from_file", 797568536, AudioStreamOggVorbis, main.p_object, path); return call_ret; }  // 1






load_threaded_request :: (main: *ResourceLoader, path: string) -> Error { call_ret := cast(*Error) sys_call("ResourceLoader", "load_threaded_request", 3614384323, Error, main.p_object, path); return call_ret.*; }  // 0
load_threaded_get_status :: (main: *ResourceLoader, path: string) -> ResourceLoader.ThreadLoadStatus { call_ret := cast(*ResourceLoader.ThreadLoadStatus) sys_call("ResourceLoader", "load_threaded_get_status", 4137685479, ResourceLoader.ThreadLoadStatus, main.p_object, path); return call_ret.*; }  // 1
load_threaded_get :: (main: *ResourceLoader, path: string) -> *Resource { call_ret := cast(*Resource) sys_call("ResourceLoader", "load_threaded_get", 1748875256, Resource, main.p_object, path); return call_ret; }  // 2
load :: (main: *ResourceLoader, path: string) -> *Resource { call_ret := cast(*Resource) sys_call("ResourceLoader", "load", 3358495409, Resource, main.p_object, path); return call_ret; }  // 3
get_recognized_extensions_for_type :: (main: *ResourceLoader, type: string) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("ResourceLoader", "get_recognized_extensions_for_type", 3538744774, PackedStringArray, main.p_object, type); return call_ret.*; }  // 4
add_resource_format_loader :: (main: *ResourceLoader, format_loader: ResourceFormatLoader) { sys_call("ResourceLoader", "add_resource_format_loader", 2896595483, Nil, main.p_object, format_loader);  }  // 5
remove_resource_format_loader :: (main: *ResourceLoader, format_loader: ResourceFormatLoader) { sys_call("ResourceLoader", "remove_resource_format_loader", 405397102, Nil, main.p_object, format_loader);  }  // 6
set_abort_on_missing_resources :: (main: *ResourceLoader, abort: bool) { sys_call("ResourceLoader", "set_abort_on_missing_resources", 2586408642, Nil, main.p_object, abort);  }  // 7
get_dependencies :: (main: *ResourceLoader, path: string) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("ResourceLoader", "get_dependencies", 3538744774, PackedStringArray, main.p_object, path); return call_ret.*; }  // 8
has_cached :: (main: *ResourceLoader, path: string) -> bool { call_ret := cast(*bool) sys_call("ResourceLoader", "has_cached", 2323990056, bool, main.p_object, path); return call_ret.*; }  // 9
get_cached_ref :: (main: *ResourceLoader, path: string) -> *Resource { call_ret := cast(*Resource) sys_call("ResourceLoader", "get_cached_ref", 1748875256, Resource, main.p_object, path); return call_ret; }  // 10
exists :: (main: *ResourceLoader, path: string) -> bool { call_ret := cast(*bool) sys_call("ResourceLoader", "exists", 4185558881, bool, main.p_object, path); return call_ret.*; }  // 11
get_resource_uid :: (main: *ResourceLoader, path: string) -> int { call_ret := cast(*int) sys_call("ResourceLoader", "get_resource_uid", 1597066294, int, main.p_object, path); return call_ret.*; }  // 12
list_directory :: (main: *ResourceLoader, directory_path: string) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("ResourceLoader", "list_directory", 3538744774, PackedStringArray, main.p_object, directory_path); return call_ret.*; }  // 13

add_resource :: (main: *ResourcePreloader, name: string, resource: Resource) { sys_call("ResourcePreloader", "add_resource", 1168801743, Nil, main.p_object, name, resource);  }  // 0
remove_resource :: (main: *ResourcePreloader, name: string) { sys_call("ResourcePreloader", "remove_resource", 3304788590, Nil, main.p_object, name);  }  // 1
rename_resource :: (main: *ResourcePreloader, name: string, newname: string) { sys_call("ResourcePreloader", "rename_resource", 3740211285, Nil, main.p_object, name, newname);  }  // 2
has_resource :: (main: *ResourcePreloader, name: string) -> bool { call_ret := cast(*bool) sys_call("ResourcePreloader", "has_resource", 2619796661, bool, main.p_object, name); return call_ret.*; }  // 3
get_resource :: (main: *ResourcePreloader, name: string) -> *Resource { call_ret := cast(*Resource) sys_call("ResourcePreloader", "get_resource", 3742749261, Resource, main.p_object, name); return call_ret; }  // 4
get_resource_list :: (main: *ResourcePreloader) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("ResourcePreloader", "get_resource_list", 1139954409, PackedStringArray, main.p_object); return call_ret.*; }  // 5

save :: (main: *ResourceSaver, resource: Resource) -> Error { call_ret := cast(*Error) sys_call("ResourceSaver", "save", 2983274697, Error, main.p_object, resource); return call_ret.*; }  // 0
get_recognized_extensions :: (main: *ResourceSaver, type: Resource) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("ResourceSaver", "get_recognized_extensions", 4223597960, PackedStringArray, main.p_object, type); return call_ret.*; }  // 1
add_resource_format_saver :: (main: *ResourceSaver, format_saver: ResourceFormatSaver) { sys_call("ResourceSaver", "add_resource_format_saver", 362894272, Nil, main.p_object, format_saver);  }  // 2
remove_resource_format_saver :: (main: *ResourceSaver, format_saver: ResourceFormatSaver) { sys_call("ResourceSaver", "remove_resource_format_saver", 3373026878, Nil, main.p_object, format_saver);  }  // 3
get_resource_id_for_path :: (main: *ResourceSaver, path: string) -> int { call_ret := cast(*int) sys_call("ResourceSaver", "get_resource_id_for_path", 150756522, int, main.p_object, path); return call_ret.*; }  // 4

id_to_text :: (main: *ResourceUID, id: int) -> gstring { call_ret := cast(*gstring) sys_call("ResourceUID", "id_to_text", 844755477, gstring, main.p_object, id); return call_ret.*; }  // 0
text_to_id :: (main: *ResourceUID, text_id: string) -> int { call_ret := cast(*int) sys_call("ResourceUID", "text_to_id", 1321353865, int, main.p_object, text_id); return call_ret.*; }  // 1
create_id :: (main: *ResourceUID) -> int { call_ret := cast(*int) sys_call("ResourceUID", "create_id", 2455072627, int, main.p_object); return call_ret.*; }  // 2
has_id :: (main: *ResourceUID, id: int) -> bool { call_ret := cast(*bool) sys_call("ResourceUID", "has_id", 1116898809, bool, main.p_object, id); return call_ret.*; }  // 3
add_id :: (main: *ResourceUID, id: int, path: string) { sys_call("ResourceUID", "add_id", 501894301, Nil, main.p_object, id, path);  }  // 4
set_id :: (main: *ResourceUID, id: int, path: string) { sys_call("ResourceUID", "set_id", 501894301, Nil, main.p_object, id, path);  }  // 5
get_id_path :: (main: *ResourceUID, id: int) -> gstring { call_ret := cast(*gstring) sys_call("ResourceUID", "get_id_path", 844755477, gstring, main.p_object, id); return call_ret.*; }  // 6
remove_id :: (main: *ResourceUID, id: int) { sys_call("ResourceUID", "remove_id", 1286410249, Nil, main.p_object, id);  }  // 7

set_profile :: (main: *RetargetModifier3D, profile: SkeletonProfile) { sys_call("RetargetModifier3D", "set_profile", 3870374136, Nil, main.p_object, profile);  }  // 0
get_profile :: (main: *RetargetModifier3D) -> *SkeletonProfile { call_ret := cast(*SkeletonProfile) sys_call("RetargetModifier3D", "get_profile", 4291782652, SkeletonProfile, main.p_object); return call_ret; }  // 1
set_use_global_pose :: (main: *RetargetModifier3D, use_global_pose: bool) { sys_call("RetargetModifier3D", "set_use_global_pose", 2586408642, Nil, main.p_object, use_global_pose);  }  // 2
is_using_global_pose :: (main: *RetargetModifier3D) -> bool { call_ret := cast(*bool) sys_call("RetargetModifier3D", "is_using_global_pose", 36873697, bool, main.p_object); return call_ret.*; }  // 3
set_enable_flags :: (main: *RetargetModifier3D, enable_flags: RetargetModifier3D.TransformFlag) { sys_call("RetargetModifier3D", "set_enable_flags", 2687954213, Nil, main.p_object, enable_flags);  }  // 4
get_enable_flags :: (main: *RetargetModifier3D) -> RetargetModifier3D.TransformFlag { call_ret := cast(*RetargetModifier3D.TransformFlag) sys_call("RetargetModifier3D", "get_enable_flags", 358995420, RetargetModifier3D.TransformFlag, main.p_object); return call_ret.*; }  // 5
set_position_enabled :: (main: *RetargetModifier3D, enabled: bool) { sys_call("RetargetModifier3D", "set_position_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 6
is_position_enabled :: (main: *RetargetModifier3D) -> bool { call_ret := cast(*bool) sys_call("RetargetModifier3D", "is_position_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 7
set_rotation_enabled :: (main: *RetargetModifier3D, enabled: bool) { sys_call("RetargetModifier3D", "set_rotation_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 8
is_rotation_enabled :: (main: *RetargetModifier3D) -> bool { call_ret := cast(*bool) sys_call("RetargetModifier3D", "is_rotation_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 9
set_scale_enabled :: (main: *RetargetModifier3D, enabled: bool) { sys_call("RetargetModifier3D", "set_scale_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 10
is_scale_enabled :: (main: *RetargetModifier3D) -> bool { call_ret := cast(*bool) sys_call("RetargetModifier3D", "is_scale_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 11

set_size :: (main: *RibbonTrailMesh, size: float) { sys_call("RibbonTrailMesh", "set_size", 373806689, Nil, main.p_object, size);  }  // 0
get_size :: (main: *RibbonTrailMesh) -> float { call_ret := cast(*float) sys_call("RibbonTrailMesh", "get_size", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_sections :: (main: *RibbonTrailMesh, sections: int) { sys_call("RibbonTrailMesh", "set_sections", 1286410249, Nil, main.p_object, sections);  }  // 2
get_sections :: (main: *RibbonTrailMesh) -> int { call_ret := cast(*int) sys_call("RibbonTrailMesh", "get_sections", 3905245786, int, main.p_object); return call_ret.*; }  // 3
set_section_length :: (main: *RibbonTrailMesh, section_length: float) { sys_call("RibbonTrailMesh", "set_section_length", 373806689, Nil, main.p_object, section_length);  }  // 4
get_section_length :: (main: *RibbonTrailMesh) -> float { call_ret := cast(*float) sys_call("RibbonTrailMesh", "get_section_length", 1740695150, float, main.p_object); return call_ret.*; }  // 5
set_section_segments :: (main: *RibbonTrailMesh, section_segments: int) { sys_call("RibbonTrailMesh", "set_section_segments", 1286410249, Nil, main.p_object, section_segments);  }  // 6
get_section_segments :: (main: *RibbonTrailMesh) -> int { call_ret := cast(*int) sys_call("RibbonTrailMesh", "get_section_segments", 3905245786, int, main.p_object); return call_ret.*; }  // 7
set_curve :: (main: *RibbonTrailMesh, curve: Curve) { sys_call("RibbonTrailMesh", "set_curve", 270443179, Nil, main.p_object, curve);  }  // 8
get_curve :: (main: *RibbonTrailMesh) -> *Curve { call_ret := cast(*Curve) sys_call("RibbonTrailMesh", "get_curve", 2460114913, Curve, main.p_object); return call_ret; }  // 9
set_shape :: (main: *RibbonTrailMesh, shape: RibbonTrailMesh.Shape) { sys_call("RibbonTrailMesh", "set_shape", 1684440262, Nil, main.p_object, shape);  }  // 10
get_shape :: (main: *RibbonTrailMesh) -> RibbonTrailMesh.Shape { call_ret := cast(*RibbonTrailMesh.Shape) sys_call("RibbonTrailMesh", "get_shape", 1317484155, RibbonTrailMesh.Shape, main.p_object); return call_ret.*; }  // 11


get_parsed_text :: (main: *RichTextLabel) -> gstring { call_ret := cast(*gstring) sys_call("RichTextLabel", "get_parsed_text", 201670096, gstring, main.p_object); return call_ret.*; }  // 0
add_text :: (main: *RichTextLabel, text: string) { sys_call("RichTextLabel", "add_text", 83702148, Nil, main.p_object, text);  }  // 1
set_text :: (main: *RichTextLabel, text: string) { sys_call("RichTextLabel", "set_text", 83702148, Nil, main.p_object, text);  }  // 2
add_image :: (main: *RichTextLabel, image: Texture2D) { sys_call("RichTextLabel", "add_image", 3017663154, Nil, main.p_object, image);  }  // 3
update_image :: (main: *RichTextLabel, key: Variant, mask: RichTextLabel.ImageUpdateMask, image: Texture2D) { sys_call("RichTextLabel", "update_image", 815048486, Nil, main.p_object, key, mask, image);  }  // 4
newline :: (main: *RichTextLabel) { sys_call("RichTextLabel", "newline", 3218959716, Nil, main.p_object);  }  // 5
remove_paragraph :: (main: *RichTextLabel, paragraph: int) -> bool { call_ret := cast(*bool) sys_call("RichTextLabel", "remove_paragraph", 3262369265, bool, main.p_object, paragraph); return call_ret.*; }  // 6
invalidate_paragraph :: (main: *RichTextLabel, paragraph: int) -> bool { call_ret := cast(*bool) sys_call("RichTextLabel", "invalidate_paragraph", 3067735520, bool, main.p_object, paragraph); return call_ret.*; }  // 7
push_font :: (main: *RichTextLabel, font: Font) { sys_call("RichTextLabel", "push_font", 2347424842, Nil, main.p_object, font);  }  // 8
push_font_size :: (main: *RichTextLabel, font_size: int) { sys_call("RichTextLabel", "push_font_size", 1286410249, Nil, main.p_object, font_size);  }  // 9
push_normal :: (main: *RichTextLabel) { sys_call("RichTextLabel", "push_normal", 3218959716, Nil, main.p_object);  }  // 10
push_bold :: (main: *RichTextLabel) { sys_call("RichTextLabel", "push_bold", 3218959716, Nil, main.p_object);  }  // 11
push_bold_italics :: (main: *RichTextLabel) { sys_call("RichTextLabel", "push_bold_italics", 3218959716, Nil, main.p_object);  }  // 12
push_italics :: (main: *RichTextLabel) { sys_call("RichTextLabel", "push_italics", 3218959716, Nil, main.p_object);  }  // 13
push_mono :: (main: *RichTextLabel) { sys_call("RichTextLabel", "push_mono", 3218959716, Nil, main.p_object);  }  // 14
push_color :: (main: *RichTextLabel, color: Color) { sys_call("RichTextLabel", "push_color", 2920490490, Nil, main.p_object, color);  }  // 15
push_outline_size :: (main: *RichTextLabel, outline_size: int) { sys_call("RichTextLabel", "push_outline_size", 1286410249, Nil, main.p_object, outline_size);  }  // 16
push_outline_color :: (main: *RichTextLabel, color: Color) { sys_call("RichTextLabel", "push_outline_color", 2920490490, Nil, main.p_object, color);  }  // 17
push_paragraph :: (main: *RichTextLabel, alignment: HorizontalAlignment) { sys_call("RichTextLabel", "push_paragraph", 3089306873, Nil, main.p_object, alignment);  }  // 18
push_indent :: (main: *RichTextLabel, level: int) { sys_call("RichTextLabel", "push_indent", 1286410249, Nil, main.p_object, level);  }  // 19
push_list :: (main: *RichTextLabel, level: int, type: RichTextLabel.ListType, capitalize: bool) { sys_call("RichTextLabel", "push_list", 3017143144, Nil, main.p_object, level, type, capitalize);  }  // 20
push_meta :: (main: *RichTextLabel, data: Variant) { sys_call("RichTextLabel", "push_meta", 3765356747, Nil, main.p_object, data);  }  // 21
push_hint :: (main: *RichTextLabel, description: string) { sys_call("RichTextLabel", "push_hint", 83702148, Nil, main.p_object, description);  }  // 22
push_language :: (main: *RichTextLabel, language: string) { sys_call("RichTextLabel", "push_language", 83702148, Nil, main.p_object, language);  }  // 23
push_underline :: (main: *RichTextLabel) { sys_call("RichTextLabel", "push_underline", 3218959716, Nil, main.p_object);  }  // 24
push_strikethrough :: (main: *RichTextLabel) { sys_call("RichTextLabel", "push_strikethrough", 3218959716, Nil, main.p_object);  }  // 25
push_table :: (main: *RichTextLabel, columns: int) { sys_call("RichTextLabel", "push_table", 2623499273, Nil, main.p_object, columns);  }  // 26
push_dropcap :: (main: *RichTextLabel, _string: string, font: Font, size: int) { sys_call("RichTextLabel", "push_dropcap", 4061635501, Nil, main.p_object, _string, font, size);  }  // 27
set_table_column_expand :: (main: *RichTextLabel, column: int, expand: bool) { sys_call("RichTextLabel", "set_table_column_expand", 117236061, Nil, main.p_object, column, expand);  }  // 28
set_cell_row_background_color :: (main: *RichTextLabel, odd_row_bg: Color, even_row_bg: Color) { sys_call("RichTextLabel", "set_cell_row_background_color", 3465483165, Nil, main.p_object, odd_row_bg, even_row_bg);  }  // 29
set_cell_border_color :: (main: *RichTextLabel, color: Color) { sys_call("RichTextLabel", "set_cell_border_color", 2920490490, Nil, main.p_object, color);  }  // 30
set_cell_size_override :: (main: *RichTextLabel, min_size: Vector2, max_size: Vector2) { sys_call("RichTextLabel", "set_cell_size_override", 3108078480, Nil, main.p_object, min_size, max_size);  }  // 31
set_cell_padding :: (main: *RichTextLabel, padding: Rect2) { sys_call("RichTextLabel", "set_cell_padding", 2046264180, Nil, main.p_object, padding);  }  // 32
push_cell :: (main: *RichTextLabel) { sys_call("RichTextLabel", "push_cell", 3218959716, Nil, main.p_object);  }  // 33
push_fgcolor :: (main: *RichTextLabel, fgcolor: Color) { sys_call("RichTextLabel", "push_fgcolor", 2920490490, Nil, main.p_object, fgcolor);  }  // 34
push_bgcolor :: (main: *RichTextLabel, bgcolor: Color) { sys_call("RichTextLabel", "push_bgcolor", 2920490490, Nil, main.p_object, bgcolor);  }  // 35
push_customfx :: (main: *RichTextLabel, effect: RichTextEffect, env: Dictionary) { sys_call("RichTextLabel", "push_customfx", 2337942958, Nil, main.p_object, effect, env);  }  // 36
_push_context :: (main: *RichTextLabel) { sys_call("RichTextLabel", "_push_context", 3218959716, Nil, main.p_object);  }  // 37
pop_context :: (main: *RichTextLabel) { sys_call("RichTextLabel", "pop_context", 3218959716, Nil, main.p_object);  }  // 38
pop :: (main: *RichTextLabel) { sys_call("RichTextLabel", "pop", 3218959716, Nil, main.p_object);  }  // 39
pop_all :: (main: *RichTextLabel) { sys_call("RichTextLabel", "pop_all", 3218959716, Nil, main.p_object);  }  // 40
clear :: (main: *RichTextLabel) { sys_call("RichTextLabel", "clear", 3218959716, Nil, main.p_object);  }  // 41
set_structured_text_bidi_override :: (main: *RichTextLabel, parser: TextServer.StructuredTextParser) { sys_call("RichTextLabel", "set_structured_text_bidi_override", 55961453, Nil, main.p_object, parser);  }  // 42
get_structured_text_bidi_override :: (main: *RichTextLabel) -> TextServer.StructuredTextParser { call_ret := cast(*TextServer.StructuredTextParser) sys_call("RichTextLabel", "get_structured_text_bidi_override", 3385126229, TextServer.StructuredTextParser, main.p_object); return call_ret.*; }  // 43
set_structured_text_bidi_override_options :: (main: *RichTextLabel, args: Array) { sys_call("RichTextLabel", "set_structured_text_bidi_override_options", 381264803, Nil, main.p_object, args);  }  // 44
get_structured_text_bidi_override_options :: (main: *RichTextLabel) -> Array { call_ret := cast(*Array) sys_call("RichTextLabel", "get_structured_text_bidi_override_options", 3995934104, Array, main.p_object); return call_ret.*; }  // 45
set_text_direction :: (main: *RichTextLabel, direction: Control.TextDirection) { sys_call("RichTextLabel", "set_text_direction", 119160795, Nil, main.p_object, direction);  }  // 46
get_text_direction :: (main: *RichTextLabel) -> Control.TextDirection { call_ret := cast(*Control.TextDirection) sys_call("RichTextLabel", "get_text_direction", 797257663, Control.TextDirection, main.p_object); return call_ret.*; }  // 47
set_language :: (main: *RichTextLabel, language: string) { sys_call("RichTextLabel", "set_language", 83702148, Nil, main.p_object, language);  }  // 48
get_language :: (main: *RichTextLabel) -> gstring { call_ret := cast(*gstring) sys_call("RichTextLabel", "get_language", 201670096, gstring, main.p_object); return call_ret.*; }  // 49
set_horizontal_alignment :: (main: *RichTextLabel, alignment: HorizontalAlignment) { sys_call("RichTextLabel", "set_horizontal_alignment", 2312603777, Nil, main.p_object, alignment);  }  // 50
get_horizontal_alignment :: (main: *RichTextLabel) -> HorizontalAlignment { call_ret := cast(*HorizontalAlignment) sys_call("RichTextLabel", "get_horizontal_alignment", 341400642, HorizontalAlignment, main.p_object); return call_ret.*; }  // 51
set_vertical_alignment :: (main: *RichTextLabel, alignment: VerticalAlignment) { sys_call("RichTextLabel", "set_vertical_alignment", 1796458609, Nil, main.p_object, alignment);  }  // 52
get_vertical_alignment :: (main: *RichTextLabel) -> VerticalAlignment { call_ret := cast(*VerticalAlignment) sys_call("RichTextLabel", "get_vertical_alignment", 3274884059, VerticalAlignment, main.p_object); return call_ret.*; }  // 53
set_justification_flags :: (main: *RichTextLabel, justification_flags: TextServer.JustificationFlag) { sys_call("RichTextLabel", "set_justification_flags", 2877345813, Nil, main.p_object, justification_flags);  }  // 54
get_justification_flags :: (main: *RichTextLabel) -> TextServer.JustificationFlag { call_ret := cast(*TextServer.JustificationFlag) sys_call("RichTextLabel", "get_justification_flags", 1583363614, TextServer.JustificationFlag, main.p_object); return call_ret.*; }  // 55
set_tab_stops :: (main: *RichTextLabel, tab_stops: PackedFloat32Array) { sys_call("RichTextLabel", "set_tab_stops", 2899603908, Nil, main.p_object, tab_stops);  }  // 56
get_tab_stops :: (main: *RichTextLabel) -> PackedFloat32Array { call_ret := cast(*PackedFloat32Array) sys_call("RichTextLabel", "get_tab_stops", 675695659, PackedFloat32Array, main.p_object); return call_ret.*; }  // 57
set_autowrap_mode :: (main: *RichTextLabel, autowrap_mode: TextServer.AutowrapMode) { sys_call("RichTextLabel", "set_autowrap_mode", 3289138044, Nil, main.p_object, autowrap_mode);  }  // 58
get_autowrap_mode :: (main: *RichTextLabel) -> TextServer.AutowrapMode { call_ret := cast(*TextServer.AutowrapMode) sys_call("RichTextLabel", "get_autowrap_mode", 1549071663, TextServer.AutowrapMode, main.p_object); return call_ret.*; }  // 59
set_meta_underline :: (main: *RichTextLabel, enable: bool) { sys_call("RichTextLabel", "set_meta_underline", 2586408642, Nil, main.p_object, enable);  }  // 60
is_meta_underlined :: (main: *RichTextLabel) -> bool { call_ret := cast(*bool) sys_call("RichTextLabel", "is_meta_underlined", 36873697, bool, main.p_object); return call_ret.*; }  // 61
set_hint_underline :: (main: *RichTextLabel, enable: bool) { sys_call("RichTextLabel", "set_hint_underline", 2586408642, Nil, main.p_object, enable);  }  // 62
is_hint_underlined :: (main: *RichTextLabel) -> bool { call_ret := cast(*bool) sys_call("RichTextLabel", "is_hint_underlined", 36873697, bool, main.p_object); return call_ret.*; }  // 63
set_scroll_active :: (main: *RichTextLabel, active: bool) { sys_call("RichTextLabel", "set_scroll_active", 2586408642, Nil, main.p_object, active);  }  // 64
is_scroll_active :: (main: *RichTextLabel) -> bool { call_ret := cast(*bool) sys_call("RichTextLabel", "is_scroll_active", 36873697, bool, main.p_object); return call_ret.*; }  // 65
set_scroll_follow :: (main: *RichTextLabel, follow: bool) { sys_call("RichTextLabel", "set_scroll_follow", 2586408642, Nil, main.p_object, follow);  }  // 66
is_scroll_following :: (main: *RichTextLabel) -> bool { call_ret := cast(*bool) sys_call("RichTextLabel", "is_scroll_following", 36873697, bool, main.p_object); return call_ret.*; }  // 67
get_v_scroll_bar :: (main: *RichTextLabel) -> *VScrollBar { call_ret := cast(*VScrollBar) sys_call("RichTextLabel", "get_v_scroll_bar", 2630340773, VScrollBar, main.p_object); return call_ret; }  // 68
scroll_to_line :: (main: *RichTextLabel, line: int) { sys_call("RichTextLabel", "scroll_to_line", 1286410249, Nil, main.p_object, line);  }  // 69
scroll_to_paragraph :: (main: *RichTextLabel, paragraph: int) { sys_call("RichTextLabel", "scroll_to_paragraph", 1286410249, Nil, main.p_object, paragraph);  }  // 70
scroll_to_selection :: (main: *RichTextLabel) { sys_call("RichTextLabel", "scroll_to_selection", 3218959716, Nil, main.p_object);  }  // 71
set_tab_size :: (main: *RichTextLabel, spaces: int) { sys_call("RichTextLabel", "set_tab_size", 1286410249, Nil, main.p_object, spaces);  }  // 72
get_tab_size :: (main: *RichTextLabel) -> int { call_ret := cast(*int) sys_call("RichTextLabel", "get_tab_size", 3905245786, int, main.p_object); return call_ret.*; }  // 73
set_fit_content :: (main: *RichTextLabel, enabled: bool) { sys_call("RichTextLabel", "set_fit_content", 2586408642, Nil, main.p_object, enabled);  }  // 74
is_fit_content_enabled :: (main: *RichTextLabel) -> bool { call_ret := cast(*bool) sys_call("RichTextLabel", "is_fit_content_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 75
set_selection_enabled :: (main: *RichTextLabel, enabled: bool) { sys_call("RichTextLabel", "set_selection_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 76
is_selection_enabled :: (main: *RichTextLabel) -> bool { call_ret := cast(*bool) sys_call("RichTextLabel", "is_selection_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 77
set_context_menu_enabled :: (main: *RichTextLabel, enabled: bool) { sys_call("RichTextLabel", "set_context_menu_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 78
is_context_menu_enabled :: (main: *RichTextLabel) -> bool { call_ret := cast(*bool) sys_call("RichTextLabel", "is_context_menu_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 79
set_shortcut_keys_enabled :: (main: *RichTextLabel, enabled: bool) { sys_call("RichTextLabel", "set_shortcut_keys_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 80
is_shortcut_keys_enabled :: (main: *RichTextLabel) -> bool { call_ret := cast(*bool) sys_call("RichTextLabel", "is_shortcut_keys_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 81
set_deselect_on_focus_loss_enabled :: (main: *RichTextLabel, enable: bool) { sys_call("RichTextLabel", "set_deselect_on_focus_loss_enabled", 2586408642, Nil, main.p_object, enable);  }  // 82
is_deselect_on_focus_loss_enabled :: (main: *RichTextLabel) -> bool { call_ret := cast(*bool) sys_call("RichTextLabel", "is_deselect_on_focus_loss_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 83
set_drag_and_drop_selection_enabled :: (main: *RichTextLabel, enable: bool) { sys_call("RichTextLabel", "set_drag_and_drop_selection_enabled", 2586408642, Nil, main.p_object, enable);  }  // 84
is_drag_and_drop_selection_enabled :: (main: *RichTextLabel) -> bool { call_ret := cast(*bool) sys_call("RichTextLabel", "is_drag_and_drop_selection_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 85
get_selection_from :: (main: *RichTextLabel) -> int { call_ret := cast(*int) sys_call("RichTextLabel", "get_selection_from", 3905245786, int, main.p_object); return call_ret.*; }  // 86
get_selection_to :: (main: *RichTextLabel) -> int { call_ret := cast(*int) sys_call("RichTextLabel", "get_selection_to", 3905245786, int, main.p_object); return call_ret.*; }  // 87
get_selection_line_offset :: (main: *RichTextLabel) -> float { call_ret := cast(*float) sys_call("RichTextLabel", "get_selection_line_offset", 1740695150, float, main.p_object); return call_ret.*; }  // 88
select_all :: (main: *RichTextLabel) { sys_call("RichTextLabel", "select_all", 3218959716, Nil, main.p_object);  }  // 89
get_selected_text :: (main: *RichTextLabel) -> gstring { call_ret := cast(*gstring) sys_call("RichTextLabel", "get_selected_text", 201670096, gstring, main.p_object); return call_ret.*; }  // 90
deselect :: (main: *RichTextLabel) { sys_call("RichTextLabel", "deselect", 3218959716, Nil, main.p_object);  }  // 91
parse_bbcode :: (main: *RichTextLabel, bbcode: string) { sys_call("RichTextLabel", "parse_bbcode", 83702148, Nil, main.p_object, bbcode);  }  // 92
append_text :: (main: *RichTextLabel, bbcode: string) { sys_call("RichTextLabel", "append_text", 83702148, Nil, main.p_object, bbcode);  }  // 93
get_text :: (main: *RichTextLabel) -> gstring { call_ret := cast(*gstring) sys_call("RichTextLabel", "get_text", 201670096, gstring, main.p_object); return call_ret.*; }  // 94
is_ready :: (main: *RichTextLabel) -> bool { call_ret := cast(*bool) sys_call("RichTextLabel", "is_ready", 36873697, bool, main.p_object); return call_ret.*; }  // 95
is_finished :: (main: *RichTextLabel) -> bool { call_ret := cast(*bool) sys_call("RichTextLabel", "is_finished", 36873697, bool, main.p_object); return call_ret.*; }  // 96
set_threaded :: (main: *RichTextLabel, threaded: bool) { sys_call("RichTextLabel", "set_threaded", 2586408642, Nil, main.p_object, threaded);  }  // 97
is_threaded :: (main: *RichTextLabel) -> bool { call_ret := cast(*bool) sys_call("RichTextLabel", "is_threaded", 36873697, bool, main.p_object); return call_ret.*; }  // 98
set_progress_bar_delay :: (main: *RichTextLabel, delay_ms: int) { sys_call("RichTextLabel", "set_progress_bar_delay", 1286410249, Nil, main.p_object, delay_ms);  }  // 99
get_progress_bar_delay :: (main: *RichTextLabel) -> int { call_ret := cast(*int) sys_call("RichTextLabel", "get_progress_bar_delay", 3905245786, int, main.p_object); return call_ret.*; }  // 100
set_visible_characters :: (main: *RichTextLabel, amount: int) { sys_call("RichTextLabel", "set_visible_characters", 1286410249, Nil, main.p_object, amount);  }  // 101
get_visible_characters :: (main: *RichTextLabel) -> int { call_ret := cast(*int) sys_call("RichTextLabel", "get_visible_characters", 3905245786, int, main.p_object); return call_ret.*; }  // 102
get_visible_characters_behavior :: (main: *RichTextLabel) -> TextServer.VisibleCharactersBehavior { call_ret := cast(*TextServer.VisibleCharactersBehavior) sys_call("RichTextLabel", "get_visible_characters_behavior", 258789322, TextServer.VisibleCharactersBehavior, main.p_object); return call_ret.*; }  // 103
set_visible_characters_behavior :: (main: *RichTextLabel, behavior: TextServer.VisibleCharactersBehavior) { sys_call("RichTextLabel", "set_visible_characters_behavior", 3383839701, Nil, main.p_object, behavior);  }  // 104
set_visible_ratio :: (main: *RichTextLabel, ratio: float) { sys_call("RichTextLabel", "set_visible_ratio", 373806689, Nil, main.p_object, ratio);  }  // 105
get_visible_ratio :: (main: *RichTextLabel) -> float { call_ret := cast(*float) sys_call("RichTextLabel", "get_visible_ratio", 1740695150, float, main.p_object); return call_ret.*; }  // 106
get_character_line :: (main: *RichTextLabel, character: int) -> int { call_ret := cast(*int) sys_call("RichTextLabel", "get_character_line", 3744713108, int, main.p_object, character); return call_ret.*; }  // 107
get_character_paragraph :: (main: *RichTextLabel, character: int) -> int { call_ret := cast(*int) sys_call("RichTextLabel", "get_character_paragraph", 3744713108, int, main.p_object, character); return call_ret.*; }  // 108
get_total_character_count :: (main: *RichTextLabel) -> int { call_ret := cast(*int) sys_call("RichTextLabel", "get_total_character_count", 3905245786, int, main.p_object); return call_ret.*; }  // 109
set_use_bbcode :: (main: *RichTextLabel, enable: bool) { sys_call("RichTextLabel", "set_use_bbcode", 2586408642, Nil, main.p_object, enable);  }  // 110
is_using_bbcode :: (main: *RichTextLabel) -> bool { call_ret := cast(*bool) sys_call("RichTextLabel", "is_using_bbcode", 36873697, bool, main.p_object); return call_ret.*; }  // 111
get_line_count :: (main: *RichTextLabel) -> int { call_ret := cast(*int) sys_call("RichTextLabel", "get_line_count", 3905245786, int, main.p_object); return call_ret.*; }  // 112
get_line_range :: (main: *RichTextLabel, line: int) -> Vector2i { call_ret := cast(*Vector2i) sys_call("RichTextLabel", "get_line_range", 3665014314, Vector2i, main.p_object, line); return call_ret.*; }  // 113
get_visible_line_count :: (main: *RichTextLabel) -> int { call_ret := cast(*int) sys_call("RichTextLabel", "get_visible_line_count", 3905245786, int, main.p_object); return call_ret.*; }  // 114
get_paragraph_count :: (main: *RichTextLabel) -> int { call_ret := cast(*int) sys_call("RichTextLabel", "get_paragraph_count", 3905245786, int, main.p_object); return call_ret.*; }  // 115
get_visible_paragraph_count :: (main: *RichTextLabel) -> int { call_ret := cast(*int) sys_call("RichTextLabel", "get_visible_paragraph_count", 3905245786, int, main.p_object); return call_ret.*; }  // 116
get_content_height :: (main: *RichTextLabel) -> int { call_ret := cast(*int) sys_call("RichTextLabel", "get_content_height", 3905245786, int, main.p_object); return call_ret.*; }  // 117
get_content_width :: (main: *RichTextLabel) -> int { call_ret := cast(*int) sys_call("RichTextLabel", "get_content_width", 3905245786, int, main.p_object); return call_ret.*; }  // 118
get_line_offset :: (main: *RichTextLabel, line: int) -> float { call_ret := cast(*float) sys_call("RichTextLabel", "get_line_offset", 4025615559, float, main.p_object, line); return call_ret.*; }  // 119
get_paragraph_offset :: (main: *RichTextLabel, paragraph: int) -> float { call_ret := cast(*float) sys_call("RichTextLabel", "get_paragraph_offset", 4025615559, float, main.p_object, paragraph); return call_ret.*; }  // 120
parse_expressions_for_values :: (main: *RichTextLabel, expressions: PackedStringArray) -> Dictionary { call_ret := cast(*Dictionary) sys_call("RichTextLabel", "parse_expressions_for_values", 1522900837, Dictionary, main.p_object, expressions); return call_ret.*; }  // 121
set_effects :: (main: *RichTextLabel, effects: Array) { sys_call("RichTextLabel", "set_effects", 381264803, Nil, main.p_object, effects);  }  // 122
get_effects :: (main: *RichTextLabel) -> Array { call_ret := cast(*Array) sys_call("RichTextLabel", "get_effects", 2915620761, Array, main.p_object); return call_ret.*; }  // 123
install_effect :: (main: *RichTextLabel, effect: Variant) { sys_call("RichTextLabel", "install_effect", 1114965689, Nil, main.p_object, effect);  }  // 124
get_menu :: (main: *RichTextLabel) -> *PopupMenu { call_ret := cast(*PopupMenu) sys_call("RichTextLabel", "get_menu", 229722558, PopupMenu, main.p_object); return call_ret; }  // 125
is_menu_visible :: (main: *RichTextLabel) -> bool { call_ret := cast(*bool) sys_call("RichTextLabel", "is_menu_visible", 36873697, bool, main.p_object); return call_ret.*; }  // 126
menu_option :: (main: *RichTextLabel, option: int) { sys_call("RichTextLabel", "menu_option", 1286410249, Nil, main.p_object, option);  }  // 127

set_mass :: (main: *RigidBody2D, mass: float) { sys_call("RigidBody2D", "set_mass", 373806689, Nil, main.p_object, mass);  }  // 1
get_mass :: (main: *RigidBody2D) -> float { call_ret := cast(*float) sys_call("RigidBody2D", "get_mass", 1740695150, float, main.p_object); return call_ret.*; }  // 2
get_inertia :: (main: *RigidBody2D) -> float { call_ret := cast(*float) sys_call("RigidBody2D", "get_inertia", 1740695150, float, main.p_object); return call_ret.*; }  // 3
set_inertia :: (main: *RigidBody2D, inertia: float) { sys_call("RigidBody2D", "set_inertia", 373806689, Nil, main.p_object, inertia);  }  // 4
set_center_of_mass_mode :: (main: *RigidBody2D, mode: RigidBody2D.CenterOfMassMode) { sys_call("RigidBody2D", "set_center_of_mass_mode", 1757235706, Nil, main.p_object, mode);  }  // 5
get_center_of_mass_mode :: (main: *RigidBody2D) -> RigidBody2D.CenterOfMassMode { call_ret := cast(*RigidBody2D.CenterOfMassMode) sys_call("RigidBody2D", "get_center_of_mass_mode", 3277132817, RigidBody2D.CenterOfMassMode, main.p_object); return call_ret.*; }  // 6
set_center_of_mass :: (main: *RigidBody2D, center_of_mass: Vector2) { sys_call("RigidBody2D", "set_center_of_mass", 743155724, Nil, main.p_object, center_of_mass);  }  // 7
get_center_of_mass :: (main: *RigidBody2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("RigidBody2D", "get_center_of_mass", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 8
set_physics_material_override :: (main: *RigidBody2D, physics_material_override: PhysicsMaterial) { sys_call("RigidBody2D", "set_physics_material_override", 1784508650, Nil, main.p_object, physics_material_override);  }  // 9
get_physics_material_override :: (main: *RigidBody2D) -> *PhysicsMaterial { call_ret := cast(*PhysicsMaterial) sys_call("RigidBody2D", "get_physics_material_override", 2521850424, PhysicsMaterial, main.p_object); return call_ret; }  // 10
set_gravity_scale :: (main: *RigidBody2D, gravity_scale: float) { sys_call("RigidBody2D", "set_gravity_scale", 373806689, Nil, main.p_object, gravity_scale);  }  // 11
get_gravity_scale :: (main: *RigidBody2D) -> float { call_ret := cast(*float) sys_call("RigidBody2D", "get_gravity_scale", 1740695150, float, main.p_object); return call_ret.*; }  // 12
set_linear_damp_mode :: (main: *RigidBody2D, linear_damp_mode: RigidBody2D.DampMode) { sys_call("RigidBody2D", "set_linear_damp_mode", 3406533708, Nil, main.p_object, linear_damp_mode);  }  // 13
get_linear_damp_mode :: (main: *RigidBody2D) -> RigidBody2D.DampMode { call_ret := cast(*RigidBody2D.DampMode) sys_call("RigidBody2D", "get_linear_damp_mode", 2970511462, RigidBody2D.DampMode, main.p_object); return call_ret.*; }  // 14
set_angular_damp_mode :: (main: *RigidBody2D, angular_damp_mode: RigidBody2D.DampMode) { sys_call("RigidBody2D", "set_angular_damp_mode", 3406533708, Nil, main.p_object, angular_damp_mode);  }  // 15
get_angular_damp_mode :: (main: *RigidBody2D) -> RigidBody2D.DampMode { call_ret := cast(*RigidBody2D.DampMode) sys_call("RigidBody2D", "get_angular_damp_mode", 2970511462, RigidBody2D.DampMode, main.p_object); return call_ret.*; }  // 16
set_linear_damp :: (main: *RigidBody2D, linear_damp: float) { sys_call("RigidBody2D", "set_linear_damp", 373806689, Nil, main.p_object, linear_damp);  }  // 17
get_linear_damp :: (main: *RigidBody2D) -> float { call_ret := cast(*float) sys_call("RigidBody2D", "get_linear_damp", 1740695150, float, main.p_object); return call_ret.*; }  // 18
set_angular_damp :: (main: *RigidBody2D, angular_damp: float) { sys_call("RigidBody2D", "set_angular_damp", 373806689, Nil, main.p_object, angular_damp);  }  // 19
get_angular_damp :: (main: *RigidBody2D) -> float { call_ret := cast(*float) sys_call("RigidBody2D", "get_angular_damp", 1740695150, float, main.p_object); return call_ret.*; }  // 20
set_linear_velocity :: (main: *RigidBody2D, linear_velocity: Vector2) { sys_call("RigidBody2D", "set_linear_velocity", 743155724, Nil, main.p_object, linear_velocity);  }  // 21
get_linear_velocity :: (main: *RigidBody2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("RigidBody2D", "get_linear_velocity", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 22
set_angular_velocity :: (main: *RigidBody2D, angular_velocity: float) { sys_call("RigidBody2D", "set_angular_velocity", 373806689, Nil, main.p_object, angular_velocity);  }  // 23
get_angular_velocity :: (main: *RigidBody2D) -> float { call_ret := cast(*float) sys_call("RigidBody2D", "get_angular_velocity", 1740695150, float, main.p_object); return call_ret.*; }  // 24
set_max_contacts_reported :: (main: *RigidBody2D, amount: int) { sys_call("RigidBody2D", "set_max_contacts_reported", 1286410249, Nil, main.p_object, amount);  }  // 25
get_max_contacts_reported :: (main: *RigidBody2D) -> int { call_ret := cast(*int) sys_call("RigidBody2D", "get_max_contacts_reported", 3905245786, int, main.p_object); return call_ret.*; }  // 26
get_contact_count :: (main: *RigidBody2D) -> int { call_ret := cast(*int) sys_call("RigidBody2D", "get_contact_count", 3905245786, int, main.p_object); return call_ret.*; }  // 27
set_use_custom_integrator :: (main: *RigidBody2D, enable: bool) { sys_call("RigidBody2D", "set_use_custom_integrator", 2586408642, Nil, main.p_object, enable);  }  // 28
is_using_custom_integrator :: (main: *RigidBody2D) -> bool { call_ret := cast(*bool) sys_call("RigidBody2D", "is_using_custom_integrator", 2240911060, bool, main.p_object); return call_ret.*; }  // 29
set_contact_monitor :: (main: *RigidBody2D, enabled: bool) { sys_call("RigidBody2D", "set_contact_monitor", 2586408642, Nil, main.p_object, enabled);  }  // 30
is_contact_monitor_enabled :: (main: *RigidBody2D) -> bool { call_ret := cast(*bool) sys_call("RigidBody2D", "is_contact_monitor_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 31
set_continuous_collision_detection_mode :: (main: *RigidBody2D, mode: RigidBody2D.CCDMode) { sys_call("RigidBody2D", "set_continuous_collision_detection_mode", 1000241384, Nil, main.p_object, mode);  }  // 32
get_continuous_collision_detection_mode :: (main: *RigidBody2D) -> RigidBody2D.CCDMode { call_ret := cast(*RigidBody2D.CCDMode) sys_call("RigidBody2D", "get_continuous_collision_detection_mode", 815214376, RigidBody2D.CCDMode, main.p_object); return call_ret.*; }  // 33
set_axis_velocity :: (main: *RigidBody2D, axis_velocity: Vector2) { sys_call("RigidBody2D", "set_axis_velocity", 743155724, Nil, main.p_object, axis_velocity);  }  // 34
apply_central_impulse :: (main: *RigidBody2D) { sys_call("RigidBody2D", "apply_central_impulse", 3862383994, Nil, main.p_object);  }  // 35
apply_impulse :: (main: *RigidBody2D, impulse: Vector2) { sys_call("RigidBody2D", "apply_impulse", 4288681949, Nil, main.p_object, impulse);  }  // 36
apply_torque_impulse :: (main: *RigidBody2D, torque: float) { sys_call("RigidBody2D", "apply_torque_impulse", 373806689, Nil, main.p_object, torque);  }  // 37
apply_central_force :: (main: *RigidBody2D, force: Vector2) { sys_call("RigidBody2D", "apply_central_force", 743155724, Nil, main.p_object, force);  }  // 38
apply_force :: (main: *RigidBody2D, force: Vector2) { sys_call("RigidBody2D", "apply_force", 4288681949, Nil, main.p_object, force);  }  // 39
apply_torque :: (main: *RigidBody2D, torque: float) { sys_call("RigidBody2D", "apply_torque", 373806689, Nil, main.p_object, torque);  }  // 40
add_constant_central_force :: (main: *RigidBody2D, force: Vector2) { sys_call("RigidBody2D", "add_constant_central_force", 743155724, Nil, main.p_object, force);  }  // 41
add_constant_force :: (main: *RigidBody2D, force: Vector2) { sys_call("RigidBody2D", "add_constant_force", 4288681949, Nil, main.p_object, force);  }  // 42
add_constant_torque :: (main: *RigidBody2D, torque: float) { sys_call("RigidBody2D", "add_constant_torque", 373806689, Nil, main.p_object, torque);  }  // 43
set_constant_force :: (main: *RigidBody2D, force: Vector2) { sys_call("RigidBody2D", "set_constant_force", 743155724, Nil, main.p_object, force);  }  // 44
get_constant_force :: (main: *RigidBody2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("RigidBody2D", "get_constant_force", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 45
set_constant_torque :: (main: *RigidBody2D, torque: float) { sys_call("RigidBody2D", "set_constant_torque", 373806689, Nil, main.p_object, torque);  }  // 46
get_constant_torque :: (main: *RigidBody2D) -> float { call_ret := cast(*float) sys_call("RigidBody2D", "get_constant_torque", 1740695150, float, main.p_object); return call_ret.*; }  // 47
set_sleeping :: (main: *RigidBody2D, sleeping: bool) { sys_call("RigidBody2D", "set_sleeping", 2586408642, Nil, main.p_object, sleeping);  }  // 48
is_sleeping :: (main: *RigidBody2D) -> bool { call_ret := cast(*bool) sys_call("RigidBody2D", "is_sleeping", 36873697, bool, main.p_object); return call_ret.*; }  // 49
set_can_sleep :: (main: *RigidBody2D, able_to_sleep: bool) { sys_call("RigidBody2D", "set_can_sleep", 2586408642, Nil, main.p_object, able_to_sleep);  }  // 50
is_able_to_sleep :: (main: *RigidBody2D) -> bool { call_ret := cast(*bool) sys_call("RigidBody2D", "is_able_to_sleep", 36873697, bool, main.p_object); return call_ret.*; }  // 51
set_lock_rotation_enabled :: (main: *RigidBody2D, lock_rotation: bool) { sys_call("RigidBody2D", "set_lock_rotation_enabled", 2586408642, Nil, main.p_object, lock_rotation);  }  // 52
is_lock_rotation_enabled :: (main: *RigidBody2D) -> bool { call_ret := cast(*bool) sys_call("RigidBody2D", "is_lock_rotation_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 53
set_freeze_enabled :: (main: *RigidBody2D, freeze_mode: bool) { sys_call("RigidBody2D", "set_freeze_enabled", 2586408642, Nil, main.p_object, freeze_mode);  }  // 54
is_freeze_enabled :: (main: *RigidBody2D) -> bool { call_ret := cast(*bool) sys_call("RigidBody2D", "is_freeze_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 55
set_freeze_mode :: (main: *RigidBody2D, freeze_mode: RigidBody2D.FreezeMode) { sys_call("RigidBody2D", "set_freeze_mode", 1705112154, Nil, main.p_object, freeze_mode);  }  // 56
get_freeze_mode :: (main: *RigidBody2D) -> RigidBody2D.FreezeMode { call_ret := cast(*RigidBody2D.FreezeMode) sys_call("RigidBody2D", "get_freeze_mode", 2016872314, RigidBody2D.FreezeMode, main.p_object); return call_ret.*; }  // 57
get_colliding_bodies :: (main: *RigidBody2D) -> [] Node2D { call_ret := cast(*[] Node2D) sys_call("RigidBody2D", "get_colliding_bodies", 3995934104, [] Node2D, main.p_object); return call_ret.*; }  // 58

set_mass :: (main: *RigidBody3D, mass: float) { sys_call("RigidBody3D", "set_mass", 373806689, Nil, main.p_object, mass);  }  // 1
get_mass :: (main: *RigidBody3D) -> float { call_ret := cast(*float) sys_call("RigidBody3D", "get_mass", 1740695150, float, main.p_object); return call_ret.*; }  // 2
set_inertia :: (main: *RigidBody3D, inertia: Vector3) { sys_call("RigidBody3D", "set_inertia", 3460891852, Nil, main.p_object, inertia);  }  // 3
get_inertia :: (main: *RigidBody3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("RigidBody3D", "get_inertia", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 4
set_center_of_mass_mode :: (main: *RigidBody3D, mode: RigidBody3D.CenterOfMassMode) { sys_call("RigidBody3D", "set_center_of_mass_mode", 3625866032, Nil, main.p_object, mode);  }  // 5
get_center_of_mass_mode :: (main: *RigidBody3D) -> RigidBody3D.CenterOfMassMode { call_ret := cast(*RigidBody3D.CenterOfMassMode) sys_call("RigidBody3D", "get_center_of_mass_mode", 237405040, RigidBody3D.CenterOfMassMode, main.p_object); return call_ret.*; }  // 6
set_center_of_mass :: (main: *RigidBody3D, center_of_mass: Vector3) { sys_call("RigidBody3D", "set_center_of_mass", 3460891852, Nil, main.p_object, center_of_mass);  }  // 7
get_center_of_mass :: (main: *RigidBody3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("RigidBody3D", "get_center_of_mass", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 8
set_physics_material_override :: (main: *RigidBody3D, physics_material_override: PhysicsMaterial) { sys_call("RigidBody3D", "set_physics_material_override", 1784508650, Nil, main.p_object, physics_material_override);  }  // 9
get_physics_material_override :: (main: *RigidBody3D) -> *PhysicsMaterial { call_ret := cast(*PhysicsMaterial) sys_call("RigidBody3D", "get_physics_material_override", 2521850424, PhysicsMaterial, main.p_object); return call_ret; }  // 10
set_linear_velocity :: (main: *RigidBody3D, linear_velocity: Vector3) { sys_call("RigidBody3D", "set_linear_velocity", 3460891852, Nil, main.p_object, linear_velocity);  }  // 11
get_linear_velocity :: (main: *RigidBody3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("RigidBody3D", "get_linear_velocity", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 12
set_angular_velocity :: (main: *RigidBody3D, angular_velocity: Vector3) { sys_call("RigidBody3D", "set_angular_velocity", 3460891852, Nil, main.p_object, angular_velocity);  }  // 13
get_angular_velocity :: (main: *RigidBody3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("RigidBody3D", "get_angular_velocity", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 14
get_inverse_inertia_tensor :: (main: *RigidBody3D) -> Basis { call_ret := cast(*Basis) sys_call("RigidBody3D", "get_inverse_inertia_tensor", 2716978435, Basis, main.p_object); return call_ret.*; }  // 15
set_gravity_scale :: (main: *RigidBody3D, gravity_scale: float) { sys_call("RigidBody3D", "set_gravity_scale", 373806689, Nil, main.p_object, gravity_scale);  }  // 16
get_gravity_scale :: (main: *RigidBody3D) -> float { call_ret := cast(*float) sys_call("RigidBody3D", "get_gravity_scale", 1740695150, float, main.p_object); return call_ret.*; }  // 17
set_linear_damp_mode :: (main: *RigidBody3D, linear_damp_mode: RigidBody3D.DampMode) { sys_call("RigidBody3D", "set_linear_damp_mode", 1802035050, Nil, main.p_object, linear_damp_mode);  }  // 18
get_linear_damp_mode :: (main: *RigidBody3D) -> RigidBody3D.DampMode { call_ret := cast(*RigidBody3D.DampMode) sys_call("RigidBody3D", "get_linear_damp_mode", 1366206940, RigidBody3D.DampMode, main.p_object); return call_ret.*; }  // 19
set_angular_damp_mode :: (main: *RigidBody3D, angular_damp_mode: RigidBody3D.DampMode) { sys_call("RigidBody3D", "set_angular_damp_mode", 1802035050, Nil, main.p_object, angular_damp_mode);  }  // 20
get_angular_damp_mode :: (main: *RigidBody3D) -> RigidBody3D.DampMode { call_ret := cast(*RigidBody3D.DampMode) sys_call("RigidBody3D", "get_angular_damp_mode", 1366206940, RigidBody3D.DampMode, main.p_object); return call_ret.*; }  // 21
set_linear_damp :: (main: *RigidBody3D, linear_damp: float) { sys_call("RigidBody3D", "set_linear_damp", 373806689, Nil, main.p_object, linear_damp);  }  // 22
get_linear_damp :: (main: *RigidBody3D) -> float { call_ret := cast(*float) sys_call("RigidBody3D", "get_linear_damp", 1740695150, float, main.p_object); return call_ret.*; }  // 23
set_angular_damp :: (main: *RigidBody3D, angular_damp: float) { sys_call("RigidBody3D", "set_angular_damp", 373806689, Nil, main.p_object, angular_damp);  }  // 24
get_angular_damp :: (main: *RigidBody3D) -> float { call_ret := cast(*float) sys_call("RigidBody3D", "get_angular_damp", 1740695150, float, main.p_object); return call_ret.*; }  // 25
set_max_contacts_reported :: (main: *RigidBody3D, amount: int) { sys_call("RigidBody3D", "set_max_contacts_reported", 1286410249, Nil, main.p_object, amount);  }  // 26
get_max_contacts_reported :: (main: *RigidBody3D) -> int { call_ret := cast(*int) sys_call("RigidBody3D", "get_max_contacts_reported", 3905245786, int, main.p_object); return call_ret.*; }  // 27
get_contact_count :: (main: *RigidBody3D) -> int { call_ret := cast(*int) sys_call("RigidBody3D", "get_contact_count", 3905245786, int, main.p_object); return call_ret.*; }  // 28
set_use_custom_integrator :: (main: *RigidBody3D, enable: bool) { sys_call("RigidBody3D", "set_use_custom_integrator", 2586408642, Nil, main.p_object, enable);  }  // 29
is_using_custom_integrator :: (main: *RigidBody3D) -> bool { call_ret := cast(*bool) sys_call("RigidBody3D", "is_using_custom_integrator", 2240911060, bool, main.p_object); return call_ret.*; }  // 30
set_contact_monitor :: (main: *RigidBody3D, enabled: bool) { sys_call("RigidBody3D", "set_contact_monitor", 2586408642, Nil, main.p_object, enabled);  }  // 31
is_contact_monitor_enabled :: (main: *RigidBody3D) -> bool { call_ret := cast(*bool) sys_call("RigidBody3D", "is_contact_monitor_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 32
set_use_continuous_collision_detection :: (main: *RigidBody3D, enable: bool) { sys_call("RigidBody3D", "set_use_continuous_collision_detection", 2586408642, Nil, main.p_object, enable);  }  // 33
is_using_continuous_collision_detection :: (main: *RigidBody3D) -> bool { call_ret := cast(*bool) sys_call("RigidBody3D", "is_using_continuous_collision_detection", 36873697, bool, main.p_object); return call_ret.*; }  // 34
set_axis_velocity :: (main: *RigidBody3D, axis_velocity: Vector3) { sys_call("RigidBody3D", "set_axis_velocity", 3460891852, Nil, main.p_object, axis_velocity);  }  // 35
apply_central_impulse :: (main: *RigidBody3D, impulse: Vector3) { sys_call("RigidBody3D", "apply_central_impulse", 3460891852, Nil, main.p_object, impulse);  }  // 36
apply_impulse :: (main: *RigidBody3D, impulse: Vector3) { sys_call("RigidBody3D", "apply_impulse", 2754756483, Nil, main.p_object, impulse);  }  // 37
apply_torque_impulse :: (main: *RigidBody3D, impulse: Vector3) { sys_call("RigidBody3D", "apply_torque_impulse", 3460891852, Nil, main.p_object, impulse);  }  // 38
apply_central_force :: (main: *RigidBody3D, force: Vector3) { sys_call("RigidBody3D", "apply_central_force", 3460891852, Nil, main.p_object, force);  }  // 39
apply_force :: (main: *RigidBody3D, force: Vector3) { sys_call("RigidBody3D", "apply_force", 2754756483, Nil, main.p_object, force);  }  // 40
apply_torque :: (main: *RigidBody3D, torque: Vector3) { sys_call("RigidBody3D", "apply_torque", 3460891852, Nil, main.p_object, torque);  }  // 41
add_constant_central_force :: (main: *RigidBody3D, force: Vector3) { sys_call("RigidBody3D", "add_constant_central_force", 3460891852, Nil, main.p_object, force);  }  // 42
add_constant_force :: (main: *RigidBody3D, force: Vector3) { sys_call("RigidBody3D", "add_constant_force", 2754756483, Nil, main.p_object, force);  }  // 43
add_constant_torque :: (main: *RigidBody3D, torque: Vector3) { sys_call("RigidBody3D", "add_constant_torque", 3460891852, Nil, main.p_object, torque);  }  // 44
set_constant_force :: (main: *RigidBody3D, force: Vector3) { sys_call("RigidBody3D", "set_constant_force", 3460891852, Nil, main.p_object, force);  }  // 45
get_constant_force :: (main: *RigidBody3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("RigidBody3D", "get_constant_force", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 46
set_constant_torque :: (main: *RigidBody3D, torque: Vector3) { sys_call("RigidBody3D", "set_constant_torque", 3460891852, Nil, main.p_object, torque);  }  // 47
get_constant_torque :: (main: *RigidBody3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("RigidBody3D", "get_constant_torque", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 48
set_sleeping :: (main: *RigidBody3D, sleeping: bool) { sys_call("RigidBody3D", "set_sleeping", 2586408642, Nil, main.p_object, sleeping);  }  // 49
is_sleeping :: (main: *RigidBody3D) -> bool { call_ret := cast(*bool) sys_call("RigidBody3D", "is_sleeping", 36873697, bool, main.p_object); return call_ret.*; }  // 50
set_can_sleep :: (main: *RigidBody3D, able_to_sleep: bool) { sys_call("RigidBody3D", "set_can_sleep", 2586408642, Nil, main.p_object, able_to_sleep);  }  // 51
is_able_to_sleep :: (main: *RigidBody3D) -> bool { call_ret := cast(*bool) sys_call("RigidBody3D", "is_able_to_sleep", 36873697, bool, main.p_object); return call_ret.*; }  // 52
set_lock_rotation_enabled :: (main: *RigidBody3D, lock_rotation: bool) { sys_call("RigidBody3D", "set_lock_rotation_enabled", 2586408642, Nil, main.p_object, lock_rotation);  }  // 53
is_lock_rotation_enabled :: (main: *RigidBody3D) -> bool { call_ret := cast(*bool) sys_call("RigidBody3D", "is_lock_rotation_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 54
set_freeze_enabled :: (main: *RigidBody3D, freeze_mode: bool) { sys_call("RigidBody3D", "set_freeze_enabled", 2586408642, Nil, main.p_object, freeze_mode);  }  // 55
is_freeze_enabled :: (main: *RigidBody3D) -> bool { call_ret := cast(*bool) sys_call("RigidBody3D", "is_freeze_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 56
set_freeze_mode :: (main: *RigidBody3D, freeze_mode: RigidBody3D.FreezeMode) { sys_call("RigidBody3D", "set_freeze_mode", 1319914653, Nil, main.p_object, freeze_mode);  }  // 57
get_freeze_mode :: (main: *RigidBody3D) -> RigidBody3D.FreezeMode { call_ret := cast(*RigidBody3D.FreezeMode) sys_call("RigidBody3D", "get_freeze_mode", 2008423905, RigidBody3D.FreezeMode, main.p_object); return call_ret.*; }  // 58
get_colliding_bodies :: (main: *RigidBody3D) -> [] Node3D { call_ret := cast(*[] Node3D) sys_call("RigidBody3D", "get_colliding_bodies", 3995934104, [] Node3D, main.p_object); return call_ret.*; }  // 59

set_animation_path :: (main: *RootMotionView, path: string) { sys_call("RootMotionView", "set_animation_path", 1348162250, Nil, main.p_object, path);  }  // 0
get_animation_path :: (main: *RootMotionView) -> NodePath { call_ret := cast(*NodePath) sys_call("RootMotionView", "get_animation_path", 4075236667, NodePath, main.p_object); return call_ret.*; }  // 1
set_color :: (main: *RootMotionView, color: Color) { sys_call("RootMotionView", "set_color", 2920490490, Nil, main.p_object, color);  }  // 2
get_color :: (main: *RootMotionView) -> Color { call_ret := cast(*Color) sys_call("RootMotionView", "get_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 3
set_cell_size :: (main: *RootMotionView, size: float) { sys_call("RootMotionView", "set_cell_size", 373806689, Nil, main.p_object, size);  }  // 4
get_cell_size :: (main: *RootMotionView) -> float { call_ret := cast(*float) sys_call("RootMotionView", "get_cell_size", 1740695150, float, main.p_object); return call_ret.*; }  // 5
set_radius :: (main: *RootMotionView, size: float) { sys_call("RootMotionView", "set_radius", 373806689, Nil, main.p_object, size);  }  // 6
get_radius :: (main: *RootMotionView) -> float { call_ret := cast(*float) sys_call("RootMotionView", "get_radius", 1740695150, float, main.p_object); return call_ret.*; }  // 7
set_zero_y :: (main: *RootMotionView, enable: bool) { sys_call("RootMotionView", "set_zero_y", 2586408642, Nil, main.p_object, enable);  }  // 8
get_zero_y :: (main: *RootMotionView) -> bool { call_ret := cast(*bool) sys_call("RootMotionView", "get_zero_y", 36873697, bool, main.p_object); return call_ret.*; }  // 9

set_root_path :: (main: *SceneMultiplayer, path: string) { sys_call("SceneMultiplayer", "set_root_path", 1348162250, Nil, main.p_object, path);  }  // 0
get_root_path :: (main: *SceneMultiplayer) -> NodePath { call_ret := cast(*NodePath) sys_call("SceneMultiplayer", "get_root_path", 4075236667, NodePath, main.p_object); return call_ret.*; }  // 1
clear :: (main: *SceneMultiplayer) { sys_call("SceneMultiplayer", "clear", 3218959716, Nil, main.p_object);  }  // 2
disconnect_peer :: (main: *SceneMultiplayer, id: int) { sys_call("SceneMultiplayer", "disconnect_peer", 1286410249, Nil, main.p_object, id);  }  // 3
get_authenticating_peers :: (main: *SceneMultiplayer) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("SceneMultiplayer", "get_authenticating_peers", 969006518, PackedInt32Array, main.p_object); return call_ret.*; }  // 4
send_auth :: (main: *SceneMultiplayer, id: int, data: PackedByteArray) -> Error { call_ret := cast(*Error) sys_call("SceneMultiplayer", "send_auth", 506032537, Error, main.p_object, id, data); return call_ret.*; }  // 5
complete_auth :: (main: *SceneMultiplayer, id: int) -> Error { call_ret := cast(*Error) sys_call("SceneMultiplayer", "complete_auth", 844576869, Error, main.p_object, id); return call_ret.*; }  // 6
set_auth_callback :: (main: *SceneMultiplayer, callback: Callable) { sys_call("SceneMultiplayer", "set_auth_callback", 1611583062, Nil, main.p_object, callback);  }  // 7
get_auth_callback :: (main: *SceneMultiplayer) -> Callable { call_ret := cast(*Callable) sys_call("SceneMultiplayer", "get_auth_callback", 1307783378, Callable, main.p_object); return call_ret.*; }  // 8
set_auth_timeout :: (main: *SceneMultiplayer, timeout: float) { sys_call("SceneMultiplayer", "set_auth_timeout", 373806689, Nil, main.p_object, timeout);  }  // 9
get_auth_timeout :: (main: *SceneMultiplayer) -> float { call_ret := cast(*float) sys_call("SceneMultiplayer", "get_auth_timeout", 1740695150, float, main.p_object); return call_ret.*; }  // 10
set_refuse_new_connections :: (main: *SceneMultiplayer, refuse: bool) { sys_call("SceneMultiplayer", "set_refuse_new_connections", 2586408642, Nil, main.p_object, refuse);  }  // 11
is_refusing_new_connections :: (main: *SceneMultiplayer) -> bool { call_ret := cast(*bool) sys_call("SceneMultiplayer", "is_refusing_new_connections", 36873697, bool, main.p_object); return call_ret.*; }  // 12
set_allow_object_decoding :: (main: *SceneMultiplayer, enable: bool) { sys_call("SceneMultiplayer", "set_allow_object_decoding", 2586408642, Nil, main.p_object, enable);  }  // 13
is_object_decoding_allowed :: (main: *SceneMultiplayer) -> bool { call_ret := cast(*bool) sys_call("SceneMultiplayer", "is_object_decoding_allowed", 36873697, bool, main.p_object); return call_ret.*; }  // 14
set_server_relay_enabled :: (main: *SceneMultiplayer, enabled: bool) { sys_call("SceneMultiplayer", "set_server_relay_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 15
is_server_relay_enabled :: (main: *SceneMultiplayer) -> bool { call_ret := cast(*bool) sys_call("SceneMultiplayer", "is_server_relay_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 16
send_bytes :: (main: *SceneMultiplayer, bytes: PackedByteArray) -> Error { call_ret := cast(*Error) sys_call("SceneMultiplayer", "send_bytes", 1307428718, Error, main.p_object, bytes); return call_ret.*; }  // 17
get_max_sync_packet_size :: (main: *SceneMultiplayer) -> int { call_ret := cast(*int) sys_call("SceneMultiplayer", "get_max_sync_packet_size", 3905245786, int, main.p_object); return call_ret.*; }  // 18
set_max_sync_packet_size :: (main: *SceneMultiplayer, size: int) { sys_call("SceneMultiplayer", "set_max_sync_packet_size", 1286410249, Nil, main.p_object, size);  }  // 19
get_max_delta_packet_size :: (main: *SceneMultiplayer) -> int { call_ret := cast(*int) sys_call("SceneMultiplayer", "get_max_delta_packet_size", 3905245786, int, main.p_object); return call_ret.*; }  // 20
set_max_delta_packet_size :: (main: *SceneMultiplayer, size: int) { sys_call("SceneMultiplayer", "set_max_delta_packet_size", 1286410249, Nil, main.p_object, size);  }  // 21

get_properties :: (main: *SceneReplicationConfig) -> [] NodePath { call_ret := cast(*[] NodePath) sys_call("SceneReplicationConfig", "get_properties", 3995934104, [] NodePath, main.p_object); return call_ret.*; }  // 0
add_property :: (main: *SceneReplicationConfig, path: string) { sys_call("SceneReplicationConfig", "add_property", 4094619021, Nil, main.p_object, path);  }  // 1
has_property :: (main: *SceneReplicationConfig, path: string) -> bool { call_ret := cast(*bool) sys_call("SceneReplicationConfig", "has_property", 861721659, bool, main.p_object, path); return call_ret.*; }  // 2
remove_property :: (main: *SceneReplicationConfig, path: string) { sys_call("SceneReplicationConfig", "remove_property", 1348162250, Nil, main.p_object, path);  }  // 3
property_get_index :: (main: *SceneReplicationConfig, path: string) -> int { call_ret := cast(*int) sys_call("SceneReplicationConfig", "property_get_index", 1382022557, int, main.p_object, path); return call_ret.*; }  // 4
property_get_spawn :: (main: *SceneReplicationConfig, path: string) -> bool { call_ret := cast(*bool) sys_call("SceneReplicationConfig", "property_get_spawn", 3456846888, bool, main.p_object, path); return call_ret.*; }  // 5
property_set_spawn :: (main: *SceneReplicationConfig, path: string, enabled: bool) { sys_call("SceneReplicationConfig", "property_set_spawn", 3868023870, Nil, main.p_object, path, enabled);  }  // 6
property_get_replication_mode :: (main: *SceneReplicationConfig, path: string) -> SceneReplicationConfig.ReplicationMode { call_ret := cast(*SceneReplicationConfig.ReplicationMode) sys_call("SceneReplicationConfig", "property_get_replication_mode", 2870606336, SceneReplicationConfig.ReplicationMode, main.p_object, path); return call_ret.*; }  // 7
property_set_replication_mode :: (main: *SceneReplicationConfig, path: string, mode: SceneReplicationConfig.ReplicationMode) { sys_call("SceneReplicationConfig", "property_set_replication_mode", 3200083865, Nil, main.p_object, path, mode);  }  // 8
property_get_sync :: (main: *SceneReplicationConfig, path: string) -> bool { call_ret := cast(*bool) sys_call("SceneReplicationConfig", "property_get_sync", 3456846888, bool, main.p_object, path); return call_ret.*; }  // 9
property_set_sync :: (main: *SceneReplicationConfig, path: string, enabled: bool) { sys_call("SceneReplicationConfig", "property_set_sync", 3868023870, Nil, main.p_object, path, enabled);  }  // 10
property_get_watch :: (main: *SceneReplicationConfig, path: string) -> bool { call_ret := cast(*bool) sys_call("SceneReplicationConfig", "property_get_watch", 3456846888, bool, main.p_object, path); return call_ret.*; }  // 11
property_set_watch :: (main: *SceneReplicationConfig, path: string, enabled: bool) { sys_call("SceneReplicationConfig", "property_set_watch", 3868023870, Nil, main.p_object, path, enabled);  }  // 12

get_node_count :: (main: *SceneState) -> int { call_ret := cast(*int) sys_call("SceneState", "get_node_count", 3905245786, int, main.p_object); return call_ret.*; }  // 0
get_node_type :: (main: *SceneState, idx: int) -> StringName { call_ret := cast(*StringName) sys_call("SceneState", "get_node_type", 659327637, StringName, main.p_object, idx); return call_ret.*; }  // 1
get_node_name :: (main: *SceneState, idx: int) -> StringName { call_ret := cast(*StringName) sys_call("SceneState", "get_node_name", 659327637, StringName, main.p_object, idx); return call_ret.*; }  // 2
get_node_path :: (main: *SceneState, idx: int) -> NodePath { call_ret := cast(*NodePath) sys_call("SceneState", "get_node_path", 2272487792, NodePath, main.p_object, idx); return call_ret.*; }  // 3
get_node_owner_path :: (main: *SceneState, idx: int) -> NodePath { call_ret := cast(*NodePath) sys_call("SceneState", "get_node_owner_path", 408788394, NodePath, main.p_object, idx); return call_ret.*; }  // 4
is_node_instance_placeholder :: (main: *SceneState, idx: int) -> bool { call_ret := cast(*bool) sys_call("SceneState", "is_node_instance_placeholder", 1116898809, bool, main.p_object, idx); return call_ret.*; }  // 5
get_node_instance_placeholder :: (main: *SceneState, idx: int) -> gstring { call_ret := cast(*gstring) sys_call("SceneState", "get_node_instance_placeholder", 844755477, gstring, main.p_object, idx); return call_ret.*; }  // 6
get_node_instance :: (main: *SceneState, idx: int) -> *PackedScene { call_ret := cast(*PackedScene) sys_call("SceneState", "get_node_instance", 511017218, PackedScene, main.p_object, idx); return call_ret; }  // 7
get_node_groups :: (main: *SceneState, idx: int) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("SceneState", "get_node_groups", 647634434, PackedStringArray, main.p_object, idx); return call_ret.*; }  // 8
get_node_index :: (main: *SceneState, idx: int) -> int { call_ret := cast(*int) sys_call("SceneState", "get_node_index", 923996154, int, main.p_object, idx); return call_ret.*; }  // 9
get_node_property_count :: (main: *SceneState, idx: int) -> int { call_ret := cast(*int) sys_call("SceneState", "get_node_property_count", 923996154, int, main.p_object, idx); return call_ret.*; }  // 10
get_node_property_name :: (main: *SceneState, idx: int, prop_idx: int) -> StringName { call_ret := cast(*StringName) sys_call("SceneState", "get_node_property_name", 351665558, StringName, main.p_object, idx, prop_idx); return call_ret.*; }  // 11
get_node_property_value :: (main: *SceneState, idx: int, prop_idx: int) -> Variant { call_ret := cast(*Variant) sys_call("SceneState", "get_node_property_value", 678354945, Variant, main.p_object, idx, prop_idx); return call_ret.*; }  // 12
get_connection_count :: (main: *SceneState) -> int { call_ret := cast(*int) sys_call("SceneState", "get_connection_count", 3905245786, int, main.p_object); return call_ret.*; }  // 13
get_connection_source :: (main: *SceneState, idx: int) -> NodePath { call_ret := cast(*NodePath) sys_call("SceneState", "get_connection_source", 408788394, NodePath, main.p_object, idx); return call_ret.*; }  // 14
get_connection_signal :: (main: *SceneState, idx: int) -> StringName { call_ret := cast(*StringName) sys_call("SceneState", "get_connection_signal", 659327637, StringName, main.p_object, idx); return call_ret.*; }  // 15
get_connection_target :: (main: *SceneState, idx: int) -> NodePath { call_ret := cast(*NodePath) sys_call("SceneState", "get_connection_target", 408788394, NodePath, main.p_object, idx); return call_ret.*; }  // 16
get_connection_method :: (main: *SceneState, idx: int) -> StringName { call_ret := cast(*StringName) sys_call("SceneState", "get_connection_method", 659327637, StringName, main.p_object, idx); return call_ret.*; }  // 17
get_connection_flags :: (main: *SceneState, idx: int) -> int { call_ret := cast(*int) sys_call("SceneState", "get_connection_flags", 923996154, int, main.p_object, idx); return call_ret.*; }  // 18
get_connection_binds :: (main: *SceneState, idx: int) -> Array { call_ret := cast(*Array) sys_call("SceneState", "get_connection_binds", 663333327, Array, main.p_object, idx); return call_ret.*; }  // 19
get_connection_unbinds :: (main: *SceneState, idx: int) -> int { call_ret := cast(*int) sys_call("SceneState", "get_connection_unbinds", 923996154, int, main.p_object, idx); return call_ret.*; }  // 20

get_root :: (main: *SceneTree) -> *Window { call_ret := cast(*Window) sys_call("SceneTree", "get_root", 1757182445, Window, main.p_object); return call_ret; }  // 0
has_group :: (main: *SceneTree, name: string) -> bool { call_ret := cast(*bool) sys_call("SceneTree", "has_group", 2619796661, bool, main.p_object, name); return call_ret.*; }  // 1
is_auto_accept_quit :: (main: *SceneTree) -> bool { call_ret := cast(*bool) sys_call("SceneTree", "is_auto_accept_quit", 36873697, bool, main.p_object); return call_ret.*; }  // 2
set_auto_accept_quit :: (main: *SceneTree, enabled: bool) { sys_call("SceneTree", "set_auto_accept_quit", 2586408642, Nil, main.p_object, enabled);  }  // 3
is_quit_on_go_back :: (main: *SceneTree) -> bool { call_ret := cast(*bool) sys_call("SceneTree", "is_quit_on_go_back", 36873697, bool, main.p_object); return call_ret.*; }  // 4
set_quit_on_go_back :: (main: *SceneTree, enabled: bool) { sys_call("SceneTree", "set_quit_on_go_back", 2586408642, Nil, main.p_object, enabled);  }  // 5
set_debug_collisions_hint :: (main: *SceneTree, enable: bool) { sys_call("SceneTree", "set_debug_collisions_hint", 2586408642, Nil, main.p_object, enable);  }  // 6
is_debugging_collisions_hint :: (main: *SceneTree) -> bool { call_ret := cast(*bool) sys_call("SceneTree", "is_debugging_collisions_hint", 36873697, bool, main.p_object); return call_ret.*; }  // 7
set_debug_paths_hint :: (main: *SceneTree, enable: bool) { sys_call("SceneTree", "set_debug_paths_hint", 2586408642, Nil, main.p_object, enable);  }  // 8
is_debugging_paths_hint :: (main: *SceneTree) -> bool { call_ret := cast(*bool) sys_call("SceneTree", "is_debugging_paths_hint", 36873697, bool, main.p_object); return call_ret.*; }  // 9
set_debug_navigation_hint :: (main: *SceneTree, enable: bool) { sys_call("SceneTree", "set_debug_navigation_hint", 2586408642, Nil, main.p_object, enable);  }  // 10
is_debugging_navigation_hint :: (main: *SceneTree) -> bool { call_ret := cast(*bool) sys_call("SceneTree", "is_debugging_navigation_hint", 36873697, bool, main.p_object); return call_ret.*; }  // 11
set_edited_scene_root :: (main: *SceneTree, scene: Node) { sys_call("SceneTree", "set_edited_scene_root", 1078189570, Nil, main.p_object, scene);  }  // 12
get_edited_scene_root :: (main: *SceneTree) -> *Node { call_ret := cast(*Node) sys_call("SceneTree", "get_edited_scene_root", 3160264692, Node, main.p_object); return call_ret; }  // 13
set_pause :: (main: *SceneTree, enable: bool) { sys_call("SceneTree", "set_pause", 2586408642, Nil, main.p_object, enable);  }  // 14
is_paused :: (main: *SceneTree) -> bool { call_ret := cast(*bool) sys_call("SceneTree", "is_paused", 36873697, bool, main.p_object); return call_ret.*; }  // 15
create_timer :: (main: *SceneTree, time_sec: float) -> *SceneTreeTimer { call_ret := cast(*SceneTreeTimer) sys_call("SceneTree", "create_timer", 2709170273, SceneTreeTimer, main.p_object, time_sec); return call_ret; }  // 16
create_tween :: (main: *SceneTree) -> *Tween { call_ret := cast(*Tween) sys_call("SceneTree", "create_tween", 3426978995, Tween, main.p_object); return call_ret; }  // 17
get_processed_tweens :: (main: *SceneTree) -> [] Tween { call_ret := cast(*[] Tween) sys_call("SceneTree", "get_processed_tweens", 2915620761, [] Tween, main.p_object); return call_ret.*; }  // 18
get_node_count :: (main: *SceneTree) -> int { call_ret := cast(*int) sys_call("SceneTree", "get_node_count", 3905245786, int, main.p_object); return call_ret.*; }  // 19
get_frame :: (main: *SceneTree) -> int { call_ret := cast(*int) sys_call("SceneTree", "get_frame", 3905245786, int, main.p_object); return call_ret.*; }  // 20
quit :: (main: *SceneTree) { sys_call("SceneTree", "quit", 1995695955, Nil, main.p_object);  }  // 21
set_physics_interpolation_enabled :: (main: *SceneTree, enabled: bool) { sys_call("SceneTree", "set_physics_interpolation_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 22
is_physics_interpolation_enabled :: (main: *SceneTree) -> bool { call_ret := cast(*bool) sys_call("SceneTree", "is_physics_interpolation_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 23
queue_delete :: (main: *SceneTree, obj: Object) { sys_call("SceneTree", "queue_delete", 3975164845, Nil, main.p_object, obj);  }  // 24
call_group_flags :: (main: *SceneTree, flags: int, group: string, method: string) { sys_call("SceneTree", "call_group_flags", 1527739229, Nil, main.p_object, flags, group, method);  }  // 25
notify_group_flags :: (main: *SceneTree, call_flags: int, group: string, notification: int) { sys_call("SceneTree", "notify_group_flags", 1245489420, Nil, main.p_object, call_flags, group, notification);  }  // 26
set_group_flags :: (main: *SceneTree, call_flags: int, group: string, property: string, value: Variant) { sys_call("SceneTree", "set_group_flags", 3497599527, Nil, main.p_object, call_flags, group, property, value);  }  // 27
call_group :: (main: *SceneTree, group: string, method: string) { sys_call("SceneTree", "call_group", 1257962832, Nil, main.p_object, group, method);  }  // 28
notify_group :: (main: *SceneTree, group: string, notification: int) { sys_call("SceneTree", "notify_group", 2415702435, Nil, main.p_object, group, notification);  }  // 29
set_group :: (main: *SceneTree, group: string, property: string, value: Variant) { sys_call("SceneTree", "set_group", 1279312029, Nil, main.p_object, group, property, value);  }  // 30
get_nodes_in_group :: (main: *SceneTree, group: string) -> [] Node { call_ret := cast(*[] Node) sys_call("SceneTree", "get_nodes_in_group", 689397652, [] Node, main.p_object, group); return call_ret.*; }  // 31
get_first_node_in_group :: (main: *SceneTree, group: string) -> *Node { call_ret := cast(*Node) sys_call("SceneTree", "get_first_node_in_group", 4071044623, Node, main.p_object, group); return call_ret; }  // 32
get_node_count_in_group :: (main: *SceneTree, group: string) -> int { call_ret := cast(*int) sys_call("SceneTree", "get_node_count_in_group", 2458036349, int, main.p_object, group); return call_ret.*; }  // 33
set_current_scene :: (main: *SceneTree, child_node: Node) { sys_call("SceneTree", "set_current_scene", 1078189570, Nil, main.p_object, child_node);  }  // 34
get_current_scene :: (main: *SceneTree) -> *Node { call_ret := cast(*Node) sys_call("SceneTree", "get_current_scene", 3160264692, Node, main.p_object); return call_ret; }  // 35
change_scene_to_file :: (main: *SceneTree, path: string) -> Error { call_ret := cast(*Error) sys_call("SceneTree", "change_scene_to_file", 166001499, Error, main.p_object, path); return call_ret.*; }  // 36
change_scene_to_packed :: (main: *SceneTree, packed_scene: PackedScene) -> Error { call_ret := cast(*Error) sys_call("SceneTree", "change_scene_to_packed", 107349098, Error, main.p_object, packed_scene); return call_ret.*; }  // 37
reload_current_scene :: (main: *SceneTree) -> Error { call_ret := cast(*Error) sys_call("SceneTree", "reload_current_scene", 166280745, Error, main.p_object); return call_ret.*; }  // 38
unload_current_scene :: (main: *SceneTree) { sys_call("SceneTree", "unload_current_scene", 3218959716, Nil, main.p_object);  }  // 39
set_multiplayer :: (main: *SceneTree, multiplayer: MultiplayerAPI) { sys_call("SceneTree", "set_multiplayer", 2385607013, Nil, main.p_object, multiplayer);  }  // 40
get_multiplayer :: (main: *SceneTree) -> *MultiplayerAPI { call_ret := cast(*MultiplayerAPI) sys_call("SceneTree", "get_multiplayer", 3453401404, MultiplayerAPI, main.p_object); return call_ret; }  // 41
set_multiplayer_poll_enabled :: (main: *SceneTree, enabled: bool) { sys_call("SceneTree", "set_multiplayer_poll_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 42
is_multiplayer_poll_enabled :: (main: *SceneTree) -> bool { call_ret := cast(*bool) sys_call("SceneTree", "is_multiplayer_poll_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 43

set_time_left :: (main: *SceneTreeTimer, time: float) { sys_call("SceneTreeTimer", "set_time_left", 373806689, Nil, main.p_object, time);  }  // 0
get_time_left :: (main: *SceneTreeTimer) -> float { call_ret := cast(*float) sys_call("SceneTreeTimer", "get_time_left", 1740695150, float, main.p_object); return call_ret.*; }  // 1

can_instantiate :: (main: *Script) -> bool { call_ret := cast(*bool) sys_call("Script", "can_instantiate", 36873697, bool, main.p_object); return call_ret.*; }  // 0
instance_has :: (main: *Script, base_object: Object) -> bool { call_ret := cast(*bool) sys_call("Script", "instance_has", 397768994, bool, main.p_object, base_object); return call_ret.*; }  // 1
has_source_code :: (main: *Script) -> bool { call_ret := cast(*bool) sys_call("Script", "has_source_code", 36873697, bool, main.p_object); return call_ret.*; }  // 2
get_source_code :: (main: *Script) -> gstring { call_ret := cast(*gstring) sys_call("Script", "get_source_code", 201670096, gstring, main.p_object); return call_ret.*; }  // 3
set_source_code :: (main: *Script, source: string) { sys_call("Script", "set_source_code", 83702148, Nil, main.p_object, source);  }  // 4
reload :: (main: *Script) -> Error { call_ret := cast(*Error) sys_call("Script", "reload", 1633102583, Error, main.p_object); return call_ret.*; }  // 5
get_base_script :: (main: *Script) -> *Script { call_ret := cast(*Script) sys_call("Script", "get_base_script", 278624046, Script, main.p_object); return call_ret; }  // 6
get_instance_base_type :: (main: *Script) -> StringName { call_ret := cast(*StringName) sys_call("Script", "get_instance_base_type", 2002593661, StringName, main.p_object); return call_ret.*; }  // 7
get_global_name :: (main: *Script) -> StringName { call_ret := cast(*StringName) sys_call("Script", "get_global_name", 2002593661, StringName, main.p_object); return call_ret.*; }  // 8
has_script_signal :: (main: *Script, signal_name: string) -> bool { call_ret := cast(*bool) sys_call("Script", "has_script_signal", 2619796661, bool, main.p_object, signal_name); return call_ret.*; }  // 9
get_script_property_list :: (main: *Script) -> [] Dictionary { call_ret := cast(*[] Dictionary) sys_call("Script", "get_script_property_list", 2915620761, [] Dictionary, main.p_object); return call_ret.*; }  // 10
get_script_method_list :: (main: *Script) -> [] Dictionary { call_ret := cast(*[] Dictionary) sys_call("Script", "get_script_method_list", 2915620761, [] Dictionary, main.p_object); return call_ret.*; }  // 11
get_script_signal_list :: (main: *Script) -> [] Dictionary { call_ret := cast(*[] Dictionary) sys_call("Script", "get_script_signal_list", 2915620761, [] Dictionary, main.p_object); return call_ret.*; }  // 12
get_script_constant_map :: (main: *Script) -> Dictionary { call_ret := cast(*Dictionary) sys_call("Script", "get_script_constant_map", 2382534195, Dictionary, main.p_object); return call_ret.*; }  // 13
get_property_default_value :: (main: *Script, property: string) -> Variant { call_ret := cast(*Variant) sys_call("Script", "get_property_default_value", 2138907829, Variant, main.p_object, property); return call_ret.*; }  // 14
is_tool :: (main: *Script) -> bool { call_ret := cast(*bool) sys_call("Script", "is_tool", 36873697, bool, main.p_object); return call_ret.*; }  // 15
is_abstract :: (main: *Script) -> bool { call_ret := cast(*bool) sys_call("Script", "is_abstract", 36873697, bool, main.p_object); return call_ret.*; }  // 16
get_rpc_config :: (main: *Script) -> Variant { call_ret := cast(*Variant) sys_call("Script", "get_rpc_config", 1214101251, Variant, main.p_object); return call_ret.*; }  // 17

config :: (main: *ScriptCreateDialog, inherits: string, path: string) { sys_call("ScriptCreateDialog", "config", 869314288, Nil, main.p_object, inherits, path);  }  // 0

get_current_editor :: (main: *ScriptEditor) -> *ScriptEditorBase { call_ret := cast(*ScriptEditorBase) sys_call("ScriptEditor", "get_current_editor", 1906266726, ScriptEditorBase, main.p_object); return call_ret; }  // 0
get_open_script_editors :: (main: *ScriptEditor) -> [] ScriptEditorBase { call_ret := cast(*[] ScriptEditorBase) sys_call("ScriptEditor", "get_open_script_editors", 3995934104, [] ScriptEditorBase, main.p_object); return call_ret.*; }  // 1
get_breakpoints :: (main: *ScriptEditor) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("ScriptEditor", "get_breakpoints", 2981934095, PackedStringArray, main.p_object); return call_ret.*; }  // 2
register_syntax_highlighter :: (main: *ScriptEditor, syntax_highlighter: EditorSyntaxHighlighter) { sys_call("ScriptEditor", "register_syntax_highlighter", 1092774468, Nil, main.p_object, syntax_highlighter);  }  // 3
unregister_syntax_highlighter :: (main: *ScriptEditor, syntax_highlighter: EditorSyntaxHighlighter) { sys_call("ScriptEditor", "unregister_syntax_highlighter", 1092774468, Nil, main.p_object, syntax_highlighter);  }  // 4
goto_line :: (main: *ScriptEditor, line_number: int) { sys_call("ScriptEditor", "goto_line", 1286410249, Nil, main.p_object, line_number);  }  // 5
get_current_script :: (main: *ScriptEditor) -> *Script { call_ret := cast(*Script) sys_call("ScriptEditor", "get_current_script", 2146468882, Script, main.p_object); return call_ret; }  // 6
get_open_scripts :: (main: *ScriptEditor) -> [] Script { call_ret := cast(*[] Script) sys_call("ScriptEditor", "get_open_scripts", 3995934104, [] Script, main.p_object); return call_ret.*; }  // 7
open_script_create_dialog :: (main: *ScriptEditor, base_name: string, base_path: string) { sys_call("ScriptEditor", "open_script_create_dialog", 3186203200, Nil, main.p_object, base_name, base_path);  }  // 8
goto_help :: (main: *ScriptEditor, topic: string) { sys_call("ScriptEditor", "goto_help", 83702148, Nil, main.p_object, topic);  }  // 9
update_docs_from_script :: (main: *ScriptEditor, script: Script) { sys_call("ScriptEditor", "update_docs_from_script", 3657522847, Nil, main.p_object, script);  }  // 10

get_base_editor :: (main: *ScriptEditorBase) -> *Control { call_ret := cast(*Control) sys_call("ScriptEditorBase", "get_base_editor", 2783021301, Control, main.p_object); return call_ret; }  // 0
add_syntax_highlighter :: (main: *ScriptEditorBase, highlighter: EditorSyntaxHighlighter) { sys_call("ScriptEditorBase", "add_syntax_highlighter", 1092774468, Nil, main.p_object, highlighter);  }  // 1




set_custom_step :: (main: *ScrollBar, step: float) { sys_call("ScrollBar", "set_custom_step", 373806689, Nil, main.p_object, step);  }  // 0
get_custom_step :: (main: *ScrollBar) -> float { call_ret := cast(*float) sys_call("ScrollBar", "get_custom_step", 1740695150, float, main.p_object); return call_ret.*; }  // 1

set_h_scroll :: (main: *ScrollContainer, value: int) { sys_call("ScrollContainer", "set_h_scroll", 1286410249, Nil, main.p_object, value);  }  // 0
get_h_scroll :: (main: *ScrollContainer) -> int { call_ret := cast(*int) sys_call("ScrollContainer", "get_h_scroll", 3905245786, int, main.p_object); return call_ret.*; }  // 1
set_v_scroll :: (main: *ScrollContainer, value: int) { sys_call("ScrollContainer", "set_v_scroll", 1286410249, Nil, main.p_object, value);  }  // 2
get_v_scroll :: (main: *ScrollContainer) -> int { call_ret := cast(*int) sys_call("ScrollContainer", "get_v_scroll", 3905245786, int, main.p_object); return call_ret.*; }  // 3
set_horizontal_custom_step :: (main: *ScrollContainer, value: float) { sys_call("ScrollContainer", "set_horizontal_custom_step", 373806689, Nil, main.p_object, value);  }  // 4
get_horizontal_custom_step :: (main: *ScrollContainer) -> float { call_ret := cast(*float) sys_call("ScrollContainer", "get_horizontal_custom_step", 1740695150, float, main.p_object); return call_ret.*; }  // 5
set_vertical_custom_step :: (main: *ScrollContainer, value: float) { sys_call("ScrollContainer", "set_vertical_custom_step", 373806689, Nil, main.p_object, value);  }  // 6
get_vertical_custom_step :: (main: *ScrollContainer) -> float { call_ret := cast(*float) sys_call("ScrollContainer", "get_vertical_custom_step", 1740695150, float, main.p_object); return call_ret.*; }  // 7
set_horizontal_scroll_mode :: (main: *ScrollContainer, enable: ScrollContainer.ScrollMode) { sys_call("ScrollContainer", "set_horizontal_scroll_mode", 2750506364, Nil, main.p_object, enable);  }  // 8
get_horizontal_scroll_mode :: (main: *ScrollContainer) -> ScrollContainer.ScrollMode { call_ret := cast(*ScrollContainer.ScrollMode) sys_call("ScrollContainer", "get_horizontal_scroll_mode", 3987985145, ScrollContainer.ScrollMode, main.p_object); return call_ret.*; }  // 9
set_vertical_scroll_mode :: (main: *ScrollContainer, enable: ScrollContainer.ScrollMode) { sys_call("ScrollContainer", "set_vertical_scroll_mode", 2750506364, Nil, main.p_object, enable);  }  // 10
get_vertical_scroll_mode :: (main: *ScrollContainer) -> ScrollContainer.ScrollMode { call_ret := cast(*ScrollContainer.ScrollMode) sys_call("ScrollContainer", "get_vertical_scroll_mode", 3987985145, ScrollContainer.ScrollMode, main.p_object); return call_ret.*; }  // 11
set_deadzone :: (main: *ScrollContainer, deadzone: int) { sys_call("ScrollContainer", "set_deadzone", 1286410249, Nil, main.p_object, deadzone);  }  // 12
get_deadzone :: (main: *ScrollContainer) -> int { call_ret := cast(*int) sys_call("ScrollContainer", "get_deadzone", 3905245786, int, main.p_object); return call_ret.*; }  // 13
set_follow_focus :: (main: *ScrollContainer, enabled: bool) { sys_call("ScrollContainer", "set_follow_focus", 2586408642, Nil, main.p_object, enabled);  }  // 14
is_following_focus :: (main: *ScrollContainer) -> bool { call_ret := cast(*bool) sys_call("ScrollContainer", "is_following_focus", 36873697, bool, main.p_object); return call_ret.*; }  // 15
get_h_scroll_bar :: (main: *ScrollContainer) -> *HScrollBar { call_ret := cast(*HScrollBar) sys_call("ScrollContainer", "get_h_scroll_bar", 4004517983, HScrollBar, main.p_object); return call_ret; }  // 16
get_v_scroll_bar :: (main: *ScrollContainer) -> *VScrollBar { call_ret := cast(*VScrollBar) sys_call("ScrollContainer", "get_v_scroll_bar", 2630340773, VScrollBar, main.p_object); return call_ret; }  // 17
ensure_control_visible :: (main: *ScrollContainer, control: Control) { sys_call("ScrollContainer", "ensure_control_visible", 1496901182, Nil, main.p_object, control);  }  // 18
set_draw_focus_border :: (main: *ScrollContainer, draw: bool) { sys_call("ScrollContainer", "set_draw_focus_border", 2586408642, Nil, main.p_object, draw);  }  // 19
get_draw_focus_border :: (main: *ScrollContainer) -> bool { call_ret := cast(*bool) sys_call("ScrollContainer", "get_draw_focus_border", 2240911060, bool, main.p_object); return call_ret.*; }  // 20

set_a :: (main: *SegmentShape2D, a: Vector2) { sys_call("SegmentShape2D", "set_a", 743155724, Nil, main.p_object, a);  }  // 0
get_a :: (main: *SegmentShape2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("SegmentShape2D", "get_a", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 1
set_b :: (main: *SegmentShape2D, b: Vector2) { sys_call("SegmentShape2D", "set_b", 743155724, Nil, main.p_object, b);  }  // 2
get_b :: (main: *SegmentShape2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("SegmentShape2D", "get_b", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 3

wait :: (main: *Semaphore) { sys_call("Semaphore", "wait", 3218959716, Nil, main.p_object);  }  // 0
try_wait :: (main: *Semaphore) -> bool { call_ret := cast(*bool) sys_call("Semaphore", "try_wait", 2240911060, bool, main.p_object); return call_ret.*; }  // 1
post :: (main: *Semaphore) { sys_call("Semaphore", "post", 1667783136, Nil, main.p_object);  }  // 2

set_length :: (main: *SeparationRayShape2D, length: float) { sys_call("SeparationRayShape2D", "set_length", 373806689, Nil, main.p_object, length);  }  // 0
get_length :: (main: *SeparationRayShape2D) -> float { call_ret := cast(*float) sys_call("SeparationRayShape2D", "get_length", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_slide_on_slope :: (main: *SeparationRayShape2D, active: bool) { sys_call("SeparationRayShape2D", "set_slide_on_slope", 2586408642, Nil, main.p_object, active);  }  // 2
get_slide_on_slope :: (main: *SeparationRayShape2D) -> bool { call_ret := cast(*bool) sys_call("SeparationRayShape2D", "get_slide_on_slope", 36873697, bool, main.p_object); return call_ret.*; }  // 3

set_length :: (main: *SeparationRayShape3D, length: float) { sys_call("SeparationRayShape3D", "set_length", 373806689, Nil, main.p_object, length);  }  // 0
get_length :: (main: *SeparationRayShape3D) -> float { call_ret := cast(*float) sys_call("SeparationRayShape3D", "get_length", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_slide_on_slope :: (main: *SeparationRayShape3D, active: bool) { sys_call("SeparationRayShape3D", "set_slide_on_slope", 2586408642, Nil, main.p_object, active);  }  // 2
get_slide_on_slope :: (main: *SeparationRayShape3D) -> bool { call_ret := cast(*bool) sys_call("SeparationRayShape3D", "get_slide_on_slope", 36873697, bool, main.p_object); return call_ret.*; }  // 3


get_mode :: (main: *Shader) -> Shader.Mode { call_ret := cast(*Shader.Mode) sys_call("Shader", "get_mode", 3392948163, Shader.Mode, main.p_object); return call_ret.*; }  // 0
set_code :: (main: *Shader, code: string) { sys_call("Shader", "set_code", 83702148, Nil, main.p_object, code);  }  // 1
get_code :: (main: *Shader) -> gstring { call_ret := cast(*gstring) sys_call("Shader", "get_code", 201670096, gstring, main.p_object); return call_ret.*; }  // 2
set_default_texture_parameter :: (main: *Shader, name: string, texture: Texture) { sys_call("Shader", "set_default_texture_parameter", 3850209648, Nil, main.p_object, name, texture);  }  // 3
get_default_texture_parameter :: (main: *Shader, name: string) -> *Texture { call_ret := cast(*Texture) sys_call("Shader", "get_default_texture_parameter", 4213877425, Texture, main.p_object, name); return call_ret; }  // 4
get_shader_uniform_list :: (main: *Shader) -> Array { call_ret := cast(*Array) sys_call("Shader", "get_shader_uniform_list", 1230511656, Array, main.p_object); return call_ret.*; }  // 5
inspect_native_shader_code :: (main: *Shader) { sys_call("Shader", "inspect_native_shader_code", 3218959716, Nil, main.p_object);  }  // 6


set_code :: (main: *ShaderInclude, code: string) { sys_call("ShaderInclude", "set_code", 83702148, Nil, main.p_object, code);  }  // 0
get_code :: (main: *ShaderInclude) -> gstring { call_ret := cast(*gstring) sys_call("ShaderInclude", "get_code", 201670096, gstring, main.p_object); return call_ret.*; }  // 1

list_built_in_include_files :: (main: *ShaderIncludeDB) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("ShaderIncludeDB", "list_built_in_include_files", 2981934095, PackedStringArray, main.p_object); return call_ret.*; }  // 0
has_built_in_include_file :: (main: *ShaderIncludeDB, filename: string) -> bool { call_ret := cast(*bool) sys_call("ShaderIncludeDB", "has_built_in_include_file", 2323990056, bool, main.p_object, filename); return call_ret.*; }  // 1
get_built_in_include_file :: (main: *ShaderIncludeDB, filename: string) -> gstring { call_ret := cast(*gstring) sys_call("ShaderIncludeDB", "get_built_in_include_file", 1703090593, gstring, main.p_object, filename); return call_ret.*; }  // 2

set_shader :: (main: *ShaderMaterial, shader: Shader) { sys_call("ShaderMaterial", "set_shader", 3341921675, Nil, main.p_object, shader);  }  // 0
get_shader :: (main: *ShaderMaterial) -> *Shader { call_ret := cast(*Shader) sys_call("ShaderMaterial", "get_shader", 2078273437, Shader, main.p_object); return call_ret; }  // 1
set_shader_parameter :: (main: *ShaderMaterial, param: string, value: Variant) { sys_call("ShaderMaterial", "set_shader_parameter", 3776071444, Nil, main.p_object, param, value);  }  // 2
get_shader_parameter :: (main: *ShaderMaterial, param: string) -> Variant { call_ret := cast(*Variant) sys_call("ShaderMaterial", "get_shader_parameter", 2760726917, Variant, main.p_object, param); return call_ret.*; }  // 3

set_custom_solver_bias :: (main: *Shape2D, bias: float) { sys_call("Shape2D", "set_custom_solver_bias", 373806689, Nil, main.p_object, bias);  }  // 0
get_custom_solver_bias :: (main: *Shape2D) -> float { call_ret := cast(*float) sys_call("Shape2D", "get_custom_solver_bias", 1740695150, float, main.p_object); return call_ret.*; }  // 1
collide :: (main: *Shape2D, local_xform: Transform2D, with_shape: Shape2D, shape_xform: Transform2D) -> bool { call_ret := cast(*bool) sys_call("Shape2D", "collide", 3709843132, bool, main.p_object, local_xform, with_shape, shape_xform); return call_ret.*; }  // 2
collide_with_motion :: (main: *Shape2D, local_xform: Transform2D, local_motion: Vector2, with_shape: Shape2D, shape_xform: Transform2D, shape_motion: Vector2) -> bool { call_ret := cast(*bool) sys_call("Shape2D", "collide_with_motion", 2869556801, bool, main.p_object, local_xform, local_motion, with_shape, shape_xform, shape_motion); return call_ret.*; }  // 3
collide_and_get_contacts :: (main: *Shape2D, local_xform: Transform2D, with_shape: Shape2D, shape_xform: Transform2D) -> PackedVector2Array { call_ret := cast(*PackedVector2Array) sys_call("Shape2D", "collide_and_get_contacts", 3056932662, PackedVector2Array, main.p_object, local_xform, with_shape, shape_xform); return call_ret.*; }  // 4
collide_with_motion_and_get_contacts :: (main: *Shape2D, local_xform: Transform2D, local_motion: Vector2, with_shape: Shape2D, shape_xform: Transform2D, shape_motion: Vector2) -> PackedVector2Array { call_ret := cast(*PackedVector2Array) sys_call("Shape2D", "collide_with_motion_and_get_contacts", 3620351573, PackedVector2Array, main.p_object, local_xform, local_motion, with_shape, shape_xform, shape_motion); return call_ret.*; }  // 5
draw :: (main: *Shape2D, canvas_item: RID, color: Color) { sys_call("Shape2D", "draw", 2948539648, Nil, main.p_object, canvas_item, color);  }  // 6
get_rect :: (main: *Shape2D) -> Rect2 { call_ret := cast(*Rect2) sys_call("Shape2D", "get_rect", 1639390495, Rect2, main.p_object); return call_ret.*; }  // 7

set_custom_solver_bias :: (main: *Shape3D, bias: float) { sys_call("Shape3D", "set_custom_solver_bias", 373806689, Nil, main.p_object, bias);  }  // 0
get_custom_solver_bias :: (main: *Shape3D) -> float { call_ret := cast(*float) sys_call("Shape3D", "get_custom_solver_bias", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_margin :: (main: *Shape3D, margin: float) { sys_call("Shape3D", "set_margin", 373806689, Nil, main.p_object, margin);  }  // 2
get_margin :: (main: *Shape3D) -> float { call_ret := cast(*float) sys_call("Shape3D", "get_margin", 1740695150, float, main.p_object); return call_ret.*; }  // 3
get_debug_mesh :: (main: *Shape3D) -> *ArrayMesh { call_ret := cast(*ArrayMesh) sys_call("Shape3D", "get_debug_mesh", 1605880883, ArrayMesh, main.p_object); return call_ret; }  // 4

set_enabled :: (main: *ShapeCast2D, enabled: bool) { sys_call("ShapeCast2D", "set_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 0
is_enabled :: (main: *ShapeCast2D) -> bool { call_ret := cast(*bool) sys_call("ShapeCast2D", "is_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 1
set_shape :: (main: *ShapeCast2D, shape: Shape2D) { sys_call("ShapeCast2D", "set_shape", 771364740, Nil, main.p_object, shape);  }  // 2
get_shape :: (main: *ShapeCast2D) -> *Shape2D { call_ret := cast(*Shape2D) sys_call("ShapeCast2D", "get_shape", 522005891, Shape2D, main.p_object); return call_ret; }  // 3
set_target_position :: (main: *ShapeCast2D, local_point: Vector2) { sys_call("ShapeCast2D", "set_target_position", 743155724, Nil, main.p_object, local_point);  }  // 4
get_target_position :: (main: *ShapeCast2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("ShapeCast2D", "get_target_position", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 5
set_margin :: (main: *ShapeCast2D, margin: float) { sys_call("ShapeCast2D", "set_margin", 373806689, Nil, main.p_object, margin);  }  // 6
get_margin :: (main: *ShapeCast2D) -> float { call_ret := cast(*float) sys_call("ShapeCast2D", "get_margin", 1740695150, float, main.p_object); return call_ret.*; }  // 7
set_max_results :: (main: *ShapeCast2D, max_results: int) { sys_call("ShapeCast2D", "set_max_results", 1286410249, Nil, main.p_object, max_results);  }  // 8
get_max_results :: (main: *ShapeCast2D) -> int { call_ret := cast(*int) sys_call("ShapeCast2D", "get_max_results", 3905245786, int, main.p_object); return call_ret.*; }  // 9
is_colliding :: (main: *ShapeCast2D) -> bool { call_ret := cast(*bool) sys_call("ShapeCast2D", "is_colliding", 36873697, bool, main.p_object); return call_ret.*; }  // 10
get_collision_count :: (main: *ShapeCast2D) -> int { call_ret := cast(*int) sys_call("ShapeCast2D", "get_collision_count", 3905245786, int, main.p_object); return call_ret.*; }  // 11
force_shapecast_update :: (main: *ShapeCast2D) { sys_call("ShapeCast2D", "force_shapecast_update", 3218959716, Nil, main.p_object);  }  // 12
get_collider :: (main: *ShapeCast2D, index: int) -> *Object { call_ret := cast(*Object) sys_call("ShapeCast2D", "get_collider", 3332903315, Object, main.p_object, index); return call_ret; }  // 13
get_collider_rid :: (main: *ShapeCast2D, index: int) -> RID { call_ret := cast(*RID) sys_call("ShapeCast2D", "get_collider_rid", 495598643, RID, main.p_object, index); return call_ret.*; }  // 14
get_collider_shape :: (main: *ShapeCast2D, index: int) -> int { call_ret := cast(*int) sys_call("ShapeCast2D", "get_collider_shape", 923996154, int, main.p_object, index); return call_ret.*; }  // 15
get_collision_point :: (main: *ShapeCast2D, index: int) -> Vector2 { call_ret := cast(*Vector2) sys_call("ShapeCast2D", "get_collision_point", 2299179447, Vector2, main.p_object, index); return call_ret.*; }  // 16
get_collision_normal :: (main: *ShapeCast2D, index: int) -> Vector2 { call_ret := cast(*Vector2) sys_call("ShapeCast2D", "get_collision_normal", 2299179447, Vector2, main.p_object, index); return call_ret.*; }  // 17
get_closest_collision_safe_fraction :: (main: *ShapeCast2D) -> float { call_ret := cast(*float) sys_call("ShapeCast2D", "get_closest_collision_safe_fraction", 1740695150, float, main.p_object); return call_ret.*; }  // 18
get_closest_collision_unsafe_fraction :: (main: *ShapeCast2D) -> float { call_ret := cast(*float) sys_call("ShapeCast2D", "get_closest_collision_unsafe_fraction", 1740695150, float, main.p_object); return call_ret.*; }  // 19
add_exception_rid :: (main: *ShapeCast2D, rid: RID) { sys_call("ShapeCast2D", "add_exception_rid", 2722037293, Nil, main.p_object, rid);  }  // 20
add_exception :: (main: *ShapeCast2D, node: CollisionObject2D) { sys_call("ShapeCast2D", "add_exception", 3090941106, Nil, main.p_object, node);  }  // 21
remove_exception_rid :: (main: *ShapeCast2D, rid: RID) { sys_call("ShapeCast2D", "remove_exception_rid", 2722037293, Nil, main.p_object, rid);  }  // 22
remove_exception :: (main: *ShapeCast2D, node: CollisionObject2D) { sys_call("ShapeCast2D", "remove_exception", 3090941106, Nil, main.p_object, node);  }  // 23
clear_exceptions :: (main: *ShapeCast2D) { sys_call("ShapeCast2D", "clear_exceptions", 3218959716, Nil, main.p_object);  }  // 24
set_collision_mask :: (main: *ShapeCast2D, mask: int) { sys_call("ShapeCast2D", "set_collision_mask", 1286410249, Nil, main.p_object, mask);  }  // 25
get_collision_mask :: (main: *ShapeCast2D) -> int { call_ret := cast(*int) sys_call("ShapeCast2D", "get_collision_mask", 3905245786, int, main.p_object); return call_ret.*; }  // 26
set_collision_mask_value :: (main: *ShapeCast2D, layer_number: int, value: bool) { sys_call("ShapeCast2D", "set_collision_mask_value", 300928843, Nil, main.p_object, layer_number, value);  }  // 27
get_collision_mask_value :: (main: *ShapeCast2D, layer_number: int) -> bool { call_ret := cast(*bool) sys_call("ShapeCast2D", "get_collision_mask_value", 1116898809, bool, main.p_object, layer_number); return call_ret.*; }  // 28
set_exclude_parent_body :: (main: *ShapeCast2D, mask: bool) { sys_call("ShapeCast2D", "set_exclude_parent_body", 2586408642, Nil, main.p_object, mask);  }  // 29
get_exclude_parent_body :: (main: *ShapeCast2D) -> bool { call_ret := cast(*bool) sys_call("ShapeCast2D", "get_exclude_parent_body", 36873697, bool, main.p_object); return call_ret.*; }  // 30
set_collide_with_areas :: (main: *ShapeCast2D, enable: bool) { sys_call("ShapeCast2D", "set_collide_with_areas", 2586408642, Nil, main.p_object, enable);  }  // 31
is_collide_with_areas_enabled :: (main: *ShapeCast2D) -> bool { call_ret := cast(*bool) sys_call("ShapeCast2D", "is_collide_with_areas_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 32
set_collide_with_bodies :: (main: *ShapeCast2D, enable: bool) { sys_call("ShapeCast2D", "set_collide_with_bodies", 2586408642, Nil, main.p_object, enable);  }  // 33
is_collide_with_bodies_enabled :: (main: *ShapeCast2D) -> bool { call_ret := cast(*bool) sys_call("ShapeCast2D", "is_collide_with_bodies_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 34
get_collision_result :: (main: *ShapeCast2D) -> Array { call_ret := cast(*Array) sys_call("ShapeCast2D", "get_collision_result", 3995934104, Array, main.p_object); return call_ret.*; }  // 35

resource_changed :: (main: *ShapeCast3D, resource: Resource) { sys_call("ShapeCast3D", "resource_changed", 968641751, Nil, main.p_object, resource);  }  // 0
set_enabled :: (main: *ShapeCast3D, enabled: bool) { sys_call("ShapeCast3D", "set_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 1
is_enabled :: (main: *ShapeCast3D) -> bool { call_ret := cast(*bool) sys_call("ShapeCast3D", "is_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 2
set_shape :: (main: *ShapeCast3D, shape: Shape3D) { sys_call("ShapeCast3D", "set_shape", 1549710052, Nil, main.p_object, shape);  }  // 3
get_shape :: (main: *ShapeCast3D) -> *Shape3D { call_ret := cast(*Shape3D) sys_call("ShapeCast3D", "get_shape", 3214262478, Shape3D, main.p_object); return call_ret; }  // 4
set_target_position :: (main: *ShapeCast3D, local_point: Vector3) { sys_call("ShapeCast3D", "set_target_position", 3460891852, Nil, main.p_object, local_point);  }  // 5
get_target_position :: (main: *ShapeCast3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("ShapeCast3D", "get_target_position", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 6
set_margin :: (main: *ShapeCast3D, margin: float) { sys_call("ShapeCast3D", "set_margin", 373806689, Nil, main.p_object, margin);  }  // 7
get_margin :: (main: *ShapeCast3D) -> float { call_ret := cast(*float) sys_call("ShapeCast3D", "get_margin", 1740695150, float, main.p_object); return call_ret.*; }  // 8
set_max_results :: (main: *ShapeCast3D, max_results: int) { sys_call("ShapeCast3D", "set_max_results", 1286410249, Nil, main.p_object, max_results);  }  // 9
get_max_results :: (main: *ShapeCast3D) -> int { call_ret := cast(*int) sys_call("ShapeCast3D", "get_max_results", 3905245786, int, main.p_object); return call_ret.*; }  // 10
is_colliding :: (main: *ShapeCast3D) -> bool { call_ret := cast(*bool) sys_call("ShapeCast3D", "is_colliding", 36873697, bool, main.p_object); return call_ret.*; }  // 11
get_collision_count :: (main: *ShapeCast3D) -> int { call_ret := cast(*int) sys_call("ShapeCast3D", "get_collision_count", 3905245786, int, main.p_object); return call_ret.*; }  // 12
force_shapecast_update :: (main: *ShapeCast3D) { sys_call("ShapeCast3D", "force_shapecast_update", 3218959716, Nil, main.p_object);  }  // 13
get_collider :: (main: *ShapeCast3D, index: int) -> *Object { call_ret := cast(*Object) sys_call("ShapeCast3D", "get_collider", 3332903315, Object, main.p_object, index); return call_ret; }  // 14
get_collider_rid :: (main: *ShapeCast3D, index: int) -> RID { call_ret := cast(*RID) sys_call("ShapeCast3D", "get_collider_rid", 495598643, RID, main.p_object, index); return call_ret.*; }  // 15
get_collider_shape :: (main: *ShapeCast3D, index: int) -> int { call_ret := cast(*int) sys_call("ShapeCast3D", "get_collider_shape", 923996154, int, main.p_object, index); return call_ret.*; }  // 16
get_collision_point :: (main: *ShapeCast3D, index: int) -> Vector3 { call_ret := cast(*Vector3) sys_call("ShapeCast3D", "get_collision_point", 711720468, Vector3, main.p_object, index); return call_ret.*; }  // 17
get_collision_normal :: (main: *ShapeCast3D, index: int) -> Vector3 { call_ret := cast(*Vector3) sys_call("ShapeCast3D", "get_collision_normal", 711720468, Vector3, main.p_object, index); return call_ret.*; }  // 18
get_closest_collision_safe_fraction :: (main: *ShapeCast3D) -> float { call_ret := cast(*float) sys_call("ShapeCast3D", "get_closest_collision_safe_fraction", 1740695150, float, main.p_object); return call_ret.*; }  // 19
get_closest_collision_unsafe_fraction :: (main: *ShapeCast3D) -> float { call_ret := cast(*float) sys_call("ShapeCast3D", "get_closest_collision_unsafe_fraction", 1740695150, float, main.p_object); return call_ret.*; }  // 20
add_exception_rid :: (main: *ShapeCast3D, rid: RID) { sys_call("ShapeCast3D", "add_exception_rid", 2722037293, Nil, main.p_object, rid);  }  // 21
add_exception :: (main: *ShapeCast3D, node: CollisionObject3D) { sys_call("ShapeCast3D", "add_exception", 1976431078, Nil, main.p_object, node);  }  // 22
remove_exception_rid :: (main: *ShapeCast3D, rid: RID) { sys_call("ShapeCast3D", "remove_exception_rid", 2722037293, Nil, main.p_object, rid);  }  // 23
remove_exception :: (main: *ShapeCast3D, node: CollisionObject3D) { sys_call("ShapeCast3D", "remove_exception", 1976431078, Nil, main.p_object, node);  }  // 24
clear_exceptions :: (main: *ShapeCast3D) { sys_call("ShapeCast3D", "clear_exceptions", 3218959716, Nil, main.p_object);  }  // 25
set_collision_mask :: (main: *ShapeCast3D, mask: int) { sys_call("ShapeCast3D", "set_collision_mask", 1286410249, Nil, main.p_object, mask);  }  // 26
get_collision_mask :: (main: *ShapeCast3D) -> int { call_ret := cast(*int) sys_call("ShapeCast3D", "get_collision_mask", 3905245786, int, main.p_object); return call_ret.*; }  // 27
set_collision_mask_value :: (main: *ShapeCast3D, layer_number: int, value: bool) { sys_call("ShapeCast3D", "set_collision_mask_value", 300928843, Nil, main.p_object, layer_number, value);  }  // 28
get_collision_mask_value :: (main: *ShapeCast3D, layer_number: int) -> bool { call_ret := cast(*bool) sys_call("ShapeCast3D", "get_collision_mask_value", 1116898809, bool, main.p_object, layer_number); return call_ret.*; }  // 29
set_exclude_parent_body :: (main: *ShapeCast3D, mask: bool) { sys_call("ShapeCast3D", "set_exclude_parent_body", 2586408642, Nil, main.p_object, mask);  }  // 30
get_exclude_parent_body :: (main: *ShapeCast3D) -> bool { call_ret := cast(*bool) sys_call("ShapeCast3D", "get_exclude_parent_body", 36873697, bool, main.p_object); return call_ret.*; }  // 31
set_collide_with_areas :: (main: *ShapeCast3D, enable: bool) { sys_call("ShapeCast3D", "set_collide_with_areas", 2586408642, Nil, main.p_object, enable);  }  // 32
is_collide_with_areas_enabled :: (main: *ShapeCast3D) -> bool { call_ret := cast(*bool) sys_call("ShapeCast3D", "is_collide_with_areas_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 33
set_collide_with_bodies :: (main: *ShapeCast3D, enable: bool) { sys_call("ShapeCast3D", "set_collide_with_bodies", 2586408642, Nil, main.p_object, enable);  }  // 34
is_collide_with_bodies_enabled :: (main: *ShapeCast3D) -> bool { call_ret := cast(*bool) sys_call("ShapeCast3D", "is_collide_with_bodies_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 35
get_collision_result :: (main: *ShapeCast3D) -> Array { call_ret := cast(*Array) sys_call("ShapeCast3D", "get_collision_result", 3995934104, Array, main.p_object); return call_ret.*; }  // 36
set_debug_shape_custom_color :: (main: *ShapeCast3D, debug_shape_custom_color: Color) { sys_call("ShapeCast3D", "set_debug_shape_custom_color", 2920490490, Nil, main.p_object, debug_shape_custom_color);  }  // 37
get_debug_shape_custom_color :: (main: *ShapeCast3D) -> Color { call_ret := cast(*Color) sys_call("ShapeCast3D", "get_debug_shape_custom_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 38

set_events :: (main: *Shortcut, events: Array) { sys_call("Shortcut", "set_events", 381264803, Nil, main.p_object, events);  }  // 0
get_events :: (main: *Shortcut) -> Array { call_ret := cast(*Array) sys_call("Shortcut", "get_events", 3995934104, Array, main.p_object); return call_ret.*; }  // 1
has_valid_event :: (main: *Shortcut) -> bool { call_ret := cast(*bool) sys_call("Shortcut", "has_valid_event", 36873697, bool, main.p_object); return call_ret.*; }  // 2
matches_event :: (main: *Shortcut, event: InputEvent) -> bool { call_ret := cast(*bool) sys_call("Shortcut", "matches_event", 3738334489, bool, main.p_object, event); return call_ret.*; }  // 3
get_as_text :: (main: *Shortcut) -> gstring { call_ret := cast(*gstring) sys_call("Shortcut", "get_as_text", 201670096, gstring, main.p_object); return call_ret.*; }  // 4

get_bone_count :: (main: *Skeleton2D) -> int { call_ret := cast(*int) sys_call("Skeleton2D", "get_bone_count", 3905245786, int, main.p_object); return call_ret.*; }  // 0
get_bone :: (main: *Skeleton2D, idx: int) -> *Bone2D { call_ret := cast(*Bone2D) sys_call("Skeleton2D", "get_bone", 2556267111, Bone2D, main.p_object, idx); return call_ret; }  // 1
get_skeleton :: (main: *Skeleton2D) -> RID { call_ret := cast(*RID) sys_call("Skeleton2D", "get_skeleton", 2944877500, RID, main.p_object); return call_ret.*; }  // 2
set_modification_stack :: (main: *Skeleton2D, modification_stack: SkeletonModificationStack2D) { sys_call("Skeleton2D", "set_modification_stack", 3907307132, Nil, main.p_object, modification_stack);  }  // 3
get_modification_stack :: (main: *Skeleton2D) -> *SkeletonModificationStack2D { call_ret := cast(*SkeletonModificationStack2D) sys_call("Skeleton2D", "get_modification_stack", 2107508396, SkeletonModificationStack2D, main.p_object); return call_ret; }  // 4
execute_modifications :: (main: *Skeleton2D, delta: float, execution_mode: int) { sys_call("Skeleton2D", "execute_modifications", 1005356550, Nil, main.p_object, delta, execution_mode);  }  // 5
set_bone_local_pose_override :: (main: *Skeleton2D, bone_idx: int, override_pose: Transform2D, strength: float, persistent: bool) { sys_call("Skeleton2D", "set_bone_local_pose_override", 555457532, Nil, main.p_object, bone_idx, override_pose, strength, persistent);  }  // 6
get_bone_local_pose_override :: (main: *Skeleton2D, bone_idx: int) -> Transform2D { call_ret := cast(*Transform2D) sys_call("Skeleton2D", "get_bone_local_pose_override", 2995540667, Transform2D, main.p_object, bone_idx); return call_ret.*; }  // 7

add_bone :: (main: *Skeleton3D, name: string) -> int { call_ret := cast(*int) sys_call("Skeleton3D", "add_bone", 1597066294, int, main.p_object, name); return call_ret.*; }  // 0
find_bone :: (main: *Skeleton3D, name: string) -> int { call_ret := cast(*int) sys_call("Skeleton3D", "find_bone", 1321353865, int, main.p_object, name); return call_ret.*; }  // 1
get_bone_name :: (main: *Skeleton3D, bone_idx: int) -> gstring { call_ret := cast(*gstring) sys_call("Skeleton3D", "get_bone_name", 844755477, gstring, main.p_object, bone_idx); return call_ret.*; }  // 2
set_bone_name :: (main: *Skeleton3D, bone_idx: int, name: string) { sys_call("Skeleton3D", "set_bone_name", 501894301, Nil, main.p_object, bone_idx, name);  }  // 3
get_bone_meta :: (main: *Skeleton3D, bone_idx: int, key: string) -> Variant { call_ret := cast(*Variant) sys_call("Skeleton3D", "get_bone_meta", 203112058, Variant, main.p_object, bone_idx, key); return call_ret.*; }  // 4
get_bone_meta_list :: (main: *Skeleton3D, bone_idx: int) -> [] StringName { call_ret := cast(*[] StringName) sys_call("Skeleton3D", "get_bone_meta_list", 663333327, [] StringName, main.p_object, bone_idx); return call_ret.*; }  // 5
has_bone_meta :: (main: *Skeleton3D, bone_idx: int, key: string) -> bool { call_ret := cast(*bool) sys_call("Skeleton3D", "has_bone_meta", 921227809, bool, main.p_object, bone_idx, key); return call_ret.*; }  // 6
set_bone_meta :: (main: *Skeleton3D, bone_idx: int, key: string, value: Variant) { sys_call("Skeleton3D", "set_bone_meta", 702482756, Nil, main.p_object, bone_idx, key, value);  }  // 7
get_concatenated_bone_names :: (main: *Skeleton3D) -> StringName { call_ret := cast(*StringName) sys_call("Skeleton3D", "get_concatenated_bone_names", 2002593661, StringName, main.p_object); return call_ret.*; }  // 8
get_bone_parent :: (main: *Skeleton3D, bone_idx: int) -> int { call_ret := cast(*int) sys_call("Skeleton3D", "get_bone_parent", 923996154, int, main.p_object, bone_idx); return call_ret.*; }  // 9
set_bone_parent :: (main: *Skeleton3D, bone_idx: int, parent_idx: int) { sys_call("Skeleton3D", "set_bone_parent", 3937882851, Nil, main.p_object, bone_idx, parent_idx);  }  // 10
get_bone_count :: (main: *Skeleton3D) -> int { call_ret := cast(*int) sys_call("Skeleton3D", "get_bone_count", 3905245786, int, main.p_object); return call_ret.*; }  // 11
get_version :: (main: *Skeleton3D) -> int { call_ret := cast(*int) sys_call("Skeleton3D", "get_version", 3905245786, int, main.p_object); return call_ret.*; }  // 12
unparent_bone_and_rest :: (main: *Skeleton3D, bone_idx: int) { sys_call("Skeleton3D", "unparent_bone_and_rest", 1286410249, Nil, main.p_object, bone_idx);  }  // 13
get_bone_children :: (main: *Skeleton3D, bone_idx: int) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("Skeleton3D", "get_bone_children", 1706082319, PackedInt32Array, main.p_object, bone_idx); return call_ret.*; }  // 14
get_parentless_bones :: (main: *Skeleton3D) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("Skeleton3D", "get_parentless_bones", 1930428628, PackedInt32Array, main.p_object); return call_ret.*; }  // 15
get_bone_rest :: (main: *Skeleton3D, bone_idx: int) -> Transform3D { call_ret := cast(*Transform3D) sys_call("Skeleton3D", "get_bone_rest", 1965739696, Transform3D, main.p_object, bone_idx); return call_ret.*; }  // 16
set_bone_rest :: (main: *Skeleton3D, bone_idx: int, rest: Transform3D) { sys_call("Skeleton3D", "set_bone_rest", 3616898986, Nil, main.p_object, bone_idx, rest);  }  // 17
get_bone_global_rest :: (main: *Skeleton3D, bone_idx: int) -> Transform3D { call_ret := cast(*Transform3D) sys_call("Skeleton3D", "get_bone_global_rest", 1965739696, Transform3D, main.p_object, bone_idx); return call_ret.*; }  // 18
create_skin_from_rest_transforms :: (main: *Skeleton3D) -> *Skin { call_ret := cast(*Skin) sys_call("Skeleton3D", "create_skin_from_rest_transforms", 1032037385, Skin, main.p_object); return call_ret; }  // 19
register_skin :: (main: *Skeleton3D, skin: Skin) -> *SkinReference { call_ret := cast(*SkinReference) sys_call("Skeleton3D", "register_skin", 3405789568, SkinReference, main.p_object, skin); return call_ret; }  // 20
localize_rests :: (main: *Skeleton3D) { sys_call("Skeleton3D", "localize_rests", 3218959716, Nil, main.p_object);  }  // 21
clear_bones :: (main: *Skeleton3D) { sys_call("Skeleton3D", "clear_bones", 3218959716, Nil, main.p_object);  }  // 22
get_bone_pose :: (main: *Skeleton3D, bone_idx: int) -> Transform3D { call_ret := cast(*Transform3D) sys_call("Skeleton3D", "get_bone_pose", 1965739696, Transform3D, main.p_object, bone_idx); return call_ret.*; }  // 23
set_bone_pose :: (main: *Skeleton3D, bone_idx: int, pose: Transform3D) { sys_call("Skeleton3D", "set_bone_pose", 3616898986, Nil, main.p_object, bone_idx, pose);  }  // 24
set_bone_pose_position :: (main: *Skeleton3D, bone_idx: int, position: Vector3) { sys_call("Skeleton3D", "set_bone_pose_position", 1530502735, Nil, main.p_object, bone_idx, position);  }  // 25
set_bone_pose_rotation :: (main: *Skeleton3D, bone_idx: int, rotation: Quaternion) { sys_call("Skeleton3D", "set_bone_pose_rotation", 2823819782, Nil, main.p_object, bone_idx, rotation);  }  // 26
set_bone_pose_scale :: (main: *Skeleton3D, bone_idx: int, scale: Vector3) { sys_call("Skeleton3D", "set_bone_pose_scale", 1530502735, Nil, main.p_object, bone_idx, scale);  }  // 27
get_bone_pose_position :: (main: *Skeleton3D, bone_idx: int) -> Vector3 { call_ret := cast(*Vector3) sys_call("Skeleton3D", "get_bone_pose_position", 711720468, Vector3, main.p_object, bone_idx); return call_ret.*; }  // 28
get_bone_pose_rotation :: (main: *Skeleton3D, bone_idx: int) -> Quaternion { call_ret := cast(*Quaternion) sys_call("Skeleton3D", "get_bone_pose_rotation", 476865136, Quaternion, main.p_object, bone_idx); return call_ret.*; }  // 29
get_bone_pose_scale :: (main: *Skeleton3D, bone_idx: int) -> Vector3 { call_ret := cast(*Vector3) sys_call("Skeleton3D", "get_bone_pose_scale", 711720468, Vector3, main.p_object, bone_idx); return call_ret.*; }  // 30
reset_bone_pose :: (main: *Skeleton3D, bone_idx: int) { sys_call("Skeleton3D", "reset_bone_pose", 1286410249, Nil, main.p_object, bone_idx);  }  // 31
reset_bone_poses :: (main: *Skeleton3D) { sys_call("Skeleton3D", "reset_bone_poses", 3218959716, Nil, main.p_object);  }  // 32
is_bone_enabled :: (main: *Skeleton3D, bone_idx: int) -> bool { call_ret := cast(*bool) sys_call("Skeleton3D", "is_bone_enabled", 1116898809, bool, main.p_object, bone_idx); return call_ret.*; }  // 33
set_bone_enabled :: (main: *Skeleton3D, bone_idx: int) { sys_call("Skeleton3D", "set_bone_enabled", 972357352, Nil, main.p_object, bone_idx);  }  // 34
get_bone_global_pose :: (main: *Skeleton3D, bone_idx: int) -> Transform3D { call_ret := cast(*Transform3D) sys_call("Skeleton3D", "get_bone_global_pose", 1965739696, Transform3D, main.p_object, bone_idx); return call_ret.*; }  // 35
set_bone_global_pose :: (main: *Skeleton3D, bone_idx: int, pose: Transform3D) { sys_call("Skeleton3D", "set_bone_global_pose", 3616898986, Nil, main.p_object, bone_idx, pose);  }  // 36
force_update_all_bone_transforms :: (main: *Skeleton3D) { sys_call("Skeleton3D", "force_update_all_bone_transforms", 3218959716, Nil, main.p_object);  }  // 37
force_update_bone_child_transform :: (main: *Skeleton3D, bone_idx: int) { sys_call("Skeleton3D", "force_update_bone_child_transform", 1286410249, Nil, main.p_object, bone_idx);  }  // 38
set_motion_scale :: (main: *Skeleton3D, motion_scale: float) { sys_call("Skeleton3D", "set_motion_scale", 373806689, Nil, main.p_object, motion_scale);  }  // 39
get_motion_scale :: (main: *Skeleton3D) -> float { call_ret := cast(*float) sys_call("Skeleton3D", "get_motion_scale", 1740695150, float, main.p_object); return call_ret.*; }  // 40
set_show_rest_only :: (main: *Skeleton3D, enabled: bool) { sys_call("Skeleton3D", "set_show_rest_only", 2586408642, Nil, main.p_object, enabled);  }  // 41
is_show_rest_only :: (main: *Skeleton3D) -> bool { call_ret := cast(*bool) sys_call("Skeleton3D", "is_show_rest_only", 36873697, bool, main.p_object); return call_ret.*; }  // 42
set_modifier_callback_mode_process :: (main: *Skeleton3D, mode: Skeleton3D.ModifierCallbackModeProcess) { sys_call("Skeleton3D", "set_modifier_callback_mode_process", 3916362634, Nil, main.p_object, mode);  }  // 43
get_modifier_callback_mode_process :: (main: *Skeleton3D) -> Skeleton3D.ModifierCallbackModeProcess { call_ret := cast(*Skeleton3D.ModifierCallbackModeProcess) sys_call("Skeleton3D", "get_modifier_callback_mode_process", 997182536, Skeleton3D.ModifierCallbackModeProcess, main.p_object); return call_ret.*; }  // 44
clear_bones_global_pose_override :: (main: *Skeleton3D) { sys_call("Skeleton3D", "clear_bones_global_pose_override", 3218959716, Nil, main.p_object);  }  // 45
set_bone_global_pose_override :: (main: *Skeleton3D, bone_idx: int, pose: Transform3D, amount: float) { sys_call("Skeleton3D", "set_bone_global_pose_override", 3483398371, Nil, main.p_object, bone_idx, pose, amount);  }  // 46
get_bone_global_pose_override :: (main: *Skeleton3D, bone_idx: int) -> Transform3D { call_ret := cast(*Transform3D) sys_call("Skeleton3D", "get_bone_global_pose_override", 1965739696, Transform3D, main.p_object, bone_idx); return call_ret.*; }  // 47
get_bone_global_pose_no_override :: (main: *Skeleton3D, bone_idx: int) -> Transform3D { call_ret := cast(*Transform3D) sys_call("Skeleton3D", "get_bone_global_pose_no_override", 1965739696, Transform3D, main.p_object, bone_idx); return call_ret.*; }  // 48
set_animate_physical_bones :: (main: *Skeleton3D, enabled: bool) { sys_call("Skeleton3D", "set_animate_physical_bones", 2586408642, Nil, main.p_object, enabled);  }  // 49
get_animate_physical_bones :: (main: *Skeleton3D) -> bool { call_ret := cast(*bool) sys_call("Skeleton3D", "get_animate_physical_bones", 36873697, bool, main.p_object); return call_ret.*; }  // 50
physical_bones_stop_simulation :: (main: *Skeleton3D) { sys_call("Skeleton3D", "physical_bones_stop_simulation", 3218959716, Nil, main.p_object);  }  // 51
physical_bones_start_simulation :: (main: *Skeleton3D) { sys_call("Skeleton3D", "physical_bones_start_simulation", 2787316981, Nil, main.p_object);  }  // 52
physical_bones_add_collision_exception :: (main: *Skeleton3D, exception: RID) { sys_call("Skeleton3D", "physical_bones_add_collision_exception", 2722037293, Nil, main.p_object, exception);  }  // 53
physical_bones_remove_collision_exception :: (main: *Skeleton3D, exception: RID) { sys_call("Skeleton3D", "physical_bones_remove_collision_exception", 2722037293, Nil, main.p_object, exception);  }  // 54

set_root_bone :: (main: *SkeletonIK3D, root_bone: string) { sys_call("SkeletonIK3D", "set_root_bone", 3304788590, Nil, main.p_object, root_bone);  }  // 0
get_root_bone :: (main: *SkeletonIK3D) -> StringName { call_ret := cast(*StringName) sys_call("SkeletonIK3D", "get_root_bone", 2002593661, StringName, main.p_object); return call_ret.*; }  // 1
set_tip_bone :: (main: *SkeletonIK3D, tip_bone: string) { sys_call("SkeletonIK3D", "set_tip_bone", 3304788590, Nil, main.p_object, tip_bone);  }  // 2
get_tip_bone :: (main: *SkeletonIK3D) -> StringName { call_ret := cast(*StringName) sys_call("SkeletonIK3D", "get_tip_bone", 2002593661, StringName, main.p_object); return call_ret.*; }  // 3
set_target_transform :: (main: *SkeletonIK3D, target: Transform3D) { sys_call("SkeletonIK3D", "set_target_transform", 2952846383, Nil, main.p_object, target);  }  // 4
get_target_transform :: (main: *SkeletonIK3D) -> Transform3D { call_ret := cast(*Transform3D) sys_call("SkeletonIK3D", "get_target_transform", 3229777777, Transform3D, main.p_object); return call_ret.*; }  // 5
set_target_node :: (main: *SkeletonIK3D, node: string) { sys_call("SkeletonIK3D", "set_target_node", 1348162250, Nil, main.p_object, node);  }  // 6
get_target_node :: (main: *SkeletonIK3D) -> NodePath { call_ret := cast(*NodePath) sys_call("SkeletonIK3D", "get_target_node", 277076166, NodePath, main.p_object); return call_ret.*; }  // 7
set_override_tip_basis :: (main: *SkeletonIK3D, override: bool) { sys_call("SkeletonIK3D", "set_override_tip_basis", 2586408642, Nil, main.p_object, override);  }  // 8
is_override_tip_basis :: (main: *SkeletonIK3D) -> bool { call_ret := cast(*bool) sys_call("SkeletonIK3D", "is_override_tip_basis", 36873697, bool, main.p_object); return call_ret.*; }  // 9
set_use_magnet :: (main: *SkeletonIK3D, use: bool) { sys_call("SkeletonIK3D", "set_use_magnet", 2586408642, Nil, main.p_object, use);  }  // 10
is_using_magnet :: (main: *SkeletonIK3D) -> bool { call_ret := cast(*bool) sys_call("SkeletonIK3D", "is_using_magnet", 36873697, bool, main.p_object); return call_ret.*; }  // 11
set_magnet_position :: (main: *SkeletonIK3D, local_position: Vector3) { sys_call("SkeletonIK3D", "set_magnet_position", 3460891852, Nil, main.p_object, local_position);  }  // 12
get_magnet_position :: (main: *SkeletonIK3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("SkeletonIK3D", "get_magnet_position", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 13
get_parent_skeleton :: (main: *SkeletonIK3D) -> *Skeleton3D { call_ret := cast(*Skeleton3D) sys_call("SkeletonIK3D", "get_parent_skeleton", 1488626673, Skeleton3D, main.p_object); return call_ret; }  // 14
is_running :: (main: *SkeletonIK3D) -> bool { call_ret := cast(*bool) sys_call("SkeletonIK3D", "is_running", 2240911060, bool, main.p_object); return call_ret.*; }  // 15
set_min_distance :: (main: *SkeletonIK3D, min_distance: float) { sys_call("SkeletonIK3D", "set_min_distance", 373806689, Nil, main.p_object, min_distance);  }  // 16
get_min_distance :: (main: *SkeletonIK3D) -> float { call_ret := cast(*float) sys_call("SkeletonIK3D", "get_min_distance", 1740695150, float, main.p_object); return call_ret.*; }  // 17
set_max_iterations :: (main: *SkeletonIK3D, iterations: int) { sys_call("SkeletonIK3D", "set_max_iterations", 1286410249, Nil, main.p_object, iterations);  }  // 18
get_max_iterations :: (main: *SkeletonIK3D) -> int { call_ret := cast(*int) sys_call("SkeletonIK3D", "get_max_iterations", 3905245786, int, main.p_object); return call_ret.*; }  // 19
start :: (main: *SkeletonIK3D) { sys_call("SkeletonIK3D", "start", 107499316, Nil, main.p_object);  }  // 20
stop :: (main: *SkeletonIK3D) { sys_call("SkeletonIK3D", "stop", 3218959716, Nil, main.p_object);  }  // 21
set_interpolation :: (main: *SkeletonIK3D, interpolation: float) { sys_call("SkeletonIK3D", "set_interpolation", 373806689, Nil, main.p_object, interpolation);  }  // 22
get_interpolation :: (main: *SkeletonIK3D) -> float { call_ret := cast(*float) sys_call("SkeletonIK3D", "get_interpolation", 1740695150, float, main.p_object); return call_ret.*; }  // 23

set_enabled :: (main: *SkeletonModification2D, enabled: bool) { sys_call("SkeletonModification2D", "set_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 3
get_enabled :: (main: *SkeletonModification2D) -> bool { call_ret := cast(*bool) sys_call("SkeletonModification2D", "get_enabled", 2240911060, bool, main.p_object); return call_ret.*; }  // 4
get_modification_stack :: (main: *SkeletonModification2D) -> *SkeletonModificationStack2D { call_ret := cast(*SkeletonModificationStack2D) sys_call("SkeletonModification2D", "get_modification_stack", 2137761694, SkeletonModificationStack2D, main.p_object); return call_ret; }  // 5
set_is_setup :: (main: *SkeletonModification2D, is_setup: bool) { sys_call("SkeletonModification2D", "set_is_setup", 2586408642, Nil, main.p_object, is_setup);  }  // 6
get_is_setup :: (main: *SkeletonModification2D) -> bool { call_ret := cast(*bool) sys_call("SkeletonModification2D", "get_is_setup", 36873697, bool, main.p_object); return call_ret.*; }  // 7
set_execution_mode :: (main: *SkeletonModification2D, execution_mode: int) { sys_call("SkeletonModification2D", "set_execution_mode", 1286410249, Nil, main.p_object, execution_mode);  }  // 8
get_execution_mode :: (main: *SkeletonModification2D) -> int { call_ret := cast(*int) sys_call("SkeletonModification2D", "get_execution_mode", 3905245786, int, main.p_object); return call_ret.*; }  // 9
clamp_angle :: (main: *SkeletonModification2D, angle: float, min: float, max: float, invert: bool) -> float { call_ret := cast(*float) sys_call("SkeletonModification2D", "clamp_angle", 1229502682, float, main.p_object, angle, min, max, invert); return call_ret.*; }  // 10
set_editor_draw_gizmo :: (main: *SkeletonModification2D, draw_gizmo: bool) { sys_call("SkeletonModification2D", "set_editor_draw_gizmo", 2586408642, Nil, main.p_object, draw_gizmo);  }  // 11
get_editor_draw_gizmo :: (main: *SkeletonModification2D) -> bool { call_ret := cast(*bool) sys_call("SkeletonModification2D", "get_editor_draw_gizmo", 36873697, bool, main.p_object); return call_ret.*; }  // 12

set_target_node :: (main: *SkeletonModification2DCCDIK, target_nodepath: string) { sys_call("SkeletonModification2DCCDIK", "set_target_node", 1348162250, Nil, main.p_object, target_nodepath);  }  // 0
get_target_node :: (main: *SkeletonModification2DCCDIK) -> NodePath { call_ret := cast(*NodePath) sys_call("SkeletonModification2DCCDIK", "get_target_node", 4075236667, NodePath, main.p_object); return call_ret.*; }  // 1
set_tip_node :: (main: *SkeletonModification2DCCDIK, tip_nodepath: string) { sys_call("SkeletonModification2DCCDIK", "set_tip_node", 1348162250, Nil, main.p_object, tip_nodepath);  }  // 2
get_tip_node :: (main: *SkeletonModification2DCCDIK) -> NodePath { call_ret := cast(*NodePath) sys_call("SkeletonModification2DCCDIK", "get_tip_node", 4075236667, NodePath, main.p_object); return call_ret.*; }  // 3
set_ccdik_data_chain_length :: (main: *SkeletonModification2DCCDIK, length: int) { sys_call("SkeletonModification2DCCDIK", "set_ccdik_data_chain_length", 1286410249, Nil, main.p_object, length);  }  // 4
get_ccdik_data_chain_length :: (main: *SkeletonModification2DCCDIK) -> int { call_ret := cast(*int) sys_call("SkeletonModification2DCCDIK", "get_ccdik_data_chain_length", 2455072627, int, main.p_object); return call_ret.*; }  // 5
set_ccdik_joint_bone2d_node :: (main: *SkeletonModification2DCCDIK, joint_idx: int, bone2d_nodepath: string) { sys_call("SkeletonModification2DCCDIK", "set_ccdik_joint_bone2d_node", 2761262315, Nil, main.p_object, joint_idx, bone2d_nodepath);  }  // 6
get_ccdik_joint_bone2d_node :: (main: *SkeletonModification2DCCDIK, joint_idx: int) -> NodePath { call_ret := cast(*NodePath) sys_call("SkeletonModification2DCCDIK", "get_ccdik_joint_bone2d_node", 408788394, NodePath, main.p_object, joint_idx); return call_ret.*; }  // 7
set_ccdik_joint_bone_index :: (main: *SkeletonModification2DCCDIK, joint_idx: int, bone_idx: int) { sys_call("SkeletonModification2DCCDIK", "set_ccdik_joint_bone_index", 3937882851, Nil, main.p_object, joint_idx, bone_idx);  }  // 8
get_ccdik_joint_bone_index :: (main: *SkeletonModification2DCCDIK, joint_idx: int) -> int { call_ret := cast(*int) sys_call("SkeletonModification2DCCDIK", "get_ccdik_joint_bone_index", 923996154, int, main.p_object, joint_idx); return call_ret.*; }  // 9
set_ccdik_joint_rotate_from_joint :: (main: *SkeletonModification2DCCDIK, joint_idx: int, rotate_from_joint: bool) { sys_call("SkeletonModification2DCCDIK", "set_ccdik_joint_rotate_from_joint", 300928843, Nil, main.p_object, joint_idx, rotate_from_joint);  }  // 10
get_ccdik_joint_rotate_from_joint :: (main: *SkeletonModification2DCCDIK, joint_idx: int) -> bool { call_ret := cast(*bool) sys_call("SkeletonModification2DCCDIK", "get_ccdik_joint_rotate_from_joint", 1116898809, bool, main.p_object, joint_idx); return call_ret.*; }  // 11
set_ccdik_joint_enable_constraint :: (main: *SkeletonModification2DCCDIK, joint_idx: int, enable_constraint: bool) { sys_call("SkeletonModification2DCCDIK", "set_ccdik_joint_enable_constraint", 300928843, Nil, main.p_object, joint_idx, enable_constraint);  }  // 12
get_ccdik_joint_enable_constraint :: (main: *SkeletonModification2DCCDIK, joint_idx: int) -> bool { call_ret := cast(*bool) sys_call("SkeletonModification2DCCDIK", "get_ccdik_joint_enable_constraint", 1116898809, bool, main.p_object, joint_idx); return call_ret.*; }  // 13
set_ccdik_joint_constraint_angle_min :: (main: *SkeletonModification2DCCDIK, joint_idx: int, angle_min: float) { sys_call("SkeletonModification2DCCDIK", "set_ccdik_joint_constraint_angle_min", 1602489585, Nil, main.p_object, joint_idx, angle_min);  }  // 14
get_ccdik_joint_constraint_angle_min :: (main: *SkeletonModification2DCCDIK, joint_idx: int) -> float { call_ret := cast(*float) sys_call("SkeletonModification2DCCDIK", "get_ccdik_joint_constraint_angle_min", 2339986948, float, main.p_object, joint_idx); return call_ret.*; }  // 15
set_ccdik_joint_constraint_angle_max :: (main: *SkeletonModification2DCCDIK, joint_idx: int, angle_max: float) { sys_call("SkeletonModification2DCCDIK", "set_ccdik_joint_constraint_angle_max", 1602489585, Nil, main.p_object, joint_idx, angle_max);  }  // 16
get_ccdik_joint_constraint_angle_max :: (main: *SkeletonModification2DCCDIK, joint_idx: int) -> float { call_ret := cast(*float) sys_call("SkeletonModification2DCCDIK", "get_ccdik_joint_constraint_angle_max", 2339986948, float, main.p_object, joint_idx); return call_ret.*; }  // 17
set_ccdik_joint_constraint_angle_invert :: (main: *SkeletonModification2DCCDIK, joint_idx: int, invert: bool) { sys_call("SkeletonModification2DCCDIK", "set_ccdik_joint_constraint_angle_invert", 300928843, Nil, main.p_object, joint_idx, invert);  }  // 18
get_ccdik_joint_constraint_angle_invert :: (main: *SkeletonModification2DCCDIK, joint_idx: int) -> bool { call_ret := cast(*bool) sys_call("SkeletonModification2DCCDIK", "get_ccdik_joint_constraint_angle_invert", 1116898809, bool, main.p_object, joint_idx); return call_ret.*; }  // 19

set_target_node :: (main: *SkeletonModification2DFABRIK, target_nodepath: string) { sys_call("SkeletonModification2DFABRIK", "set_target_node", 1348162250, Nil, main.p_object, target_nodepath);  }  // 0
get_target_node :: (main: *SkeletonModification2DFABRIK) -> NodePath { call_ret := cast(*NodePath) sys_call("SkeletonModification2DFABRIK", "get_target_node", 4075236667, NodePath, main.p_object); return call_ret.*; }  // 1
set_fabrik_data_chain_length :: (main: *SkeletonModification2DFABRIK, length: int) { sys_call("SkeletonModification2DFABRIK", "set_fabrik_data_chain_length", 1286410249, Nil, main.p_object, length);  }  // 2
get_fabrik_data_chain_length :: (main: *SkeletonModification2DFABRIK) -> int { call_ret := cast(*int) sys_call("SkeletonModification2DFABRIK", "get_fabrik_data_chain_length", 2455072627, int, main.p_object); return call_ret.*; }  // 3
set_fabrik_joint_bone2d_node :: (main: *SkeletonModification2DFABRIK, joint_idx: int, bone2d_nodepath: string) { sys_call("SkeletonModification2DFABRIK", "set_fabrik_joint_bone2d_node", 2761262315, Nil, main.p_object, joint_idx, bone2d_nodepath);  }  // 4
get_fabrik_joint_bone2d_node :: (main: *SkeletonModification2DFABRIK, joint_idx: int) -> NodePath { call_ret := cast(*NodePath) sys_call("SkeletonModification2DFABRIK", "get_fabrik_joint_bone2d_node", 408788394, NodePath, main.p_object, joint_idx); return call_ret.*; }  // 5
set_fabrik_joint_bone_index :: (main: *SkeletonModification2DFABRIK, joint_idx: int, bone_idx: int) { sys_call("SkeletonModification2DFABRIK", "set_fabrik_joint_bone_index", 3937882851, Nil, main.p_object, joint_idx, bone_idx);  }  // 6
get_fabrik_joint_bone_index :: (main: *SkeletonModification2DFABRIK, joint_idx: int) -> int { call_ret := cast(*int) sys_call("SkeletonModification2DFABRIK", "get_fabrik_joint_bone_index", 923996154, int, main.p_object, joint_idx); return call_ret.*; }  // 7
set_fabrik_joint_magnet_position :: (main: *SkeletonModification2DFABRIK, joint_idx: int, magnet_position: Vector2) { sys_call("SkeletonModification2DFABRIK", "set_fabrik_joint_magnet_position", 163021252, Nil, main.p_object, joint_idx, magnet_position);  }  // 8
get_fabrik_joint_magnet_position :: (main: *SkeletonModification2DFABRIK, joint_idx: int) -> Vector2 { call_ret := cast(*Vector2) sys_call("SkeletonModification2DFABRIK", "get_fabrik_joint_magnet_position", 2299179447, Vector2, main.p_object, joint_idx); return call_ret.*; }  // 9
set_fabrik_joint_use_target_rotation :: (main: *SkeletonModification2DFABRIK, joint_idx: int, use_target_rotation: bool) { sys_call("SkeletonModification2DFABRIK", "set_fabrik_joint_use_target_rotation", 300928843, Nil, main.p_object, joint_idx, use_target_rotation);  }  // 10
get_fabrik_joint_use_target_rotation :: (main: *SkeletonModification2DFABRIK, joint_idx: int) -> bool { call_ret := cast(*bool) sys_call("SkeletonModification2DFABRIK", "get_fabrik_joint_use_target_rotation", 1116898809, bool, main.p_object, joint_idx); return call_ret.*; }  // 11

set_target_node :: (main: *SkeletonModification2DJiggle, target_nodepath: string) { sys_call("SkeletonModification2DJiggle", "set_target_node", 1348162250, Nil, main.p_object, target_nodepath);  }  // 0
get_target_node :: (main: *SkeletonModification2DJiggle) -> NodePath { call_ret := cast(*NodePath) sys_call("SkeletonModification2DJiggle", "get_target_node", 4075236667, NodePath, main.p_object); return call_ret.*; }  // 1
set_jiggle_data_chain_length :: (main: *SkeletonModification2DJiggle, length: int) { sys_call("SkeletonModification2DJiggle", "set_jiggle_data_chain_length", 1286410249, Nil, main.p_object, length);  }  // 2
get_jiggle_data_chain_length :: (main: *SkeletonModification2DJiggle) -> int { call_ret := cast(*int) sys_call("SkeletonModification2DJiggle", "get_jiggle_data_chain_length", 2455072627, int, main.p_object); return call_ret.*; }  // 3
set_stiffness :: (main: *SkeletonModification2DJiggle, stiffness: float) { sys_call("SkeletonModification2DJiggle", "set_stiffness", 373806689, Nil, main.p_object, stiffness);  }  // 4
get_stiffness :: (main: *SkeletonModification2DJiggle) -> float { call_ret := cast(*float) sys_call("SkeletonModification2DJiggle", "get_stiffness", 1740695150, float, main.p_object); return call_ret.*; }  // 5
set_mass :: (main: *SkeletonModification2DJiggle, mass: float) { sys_call("SkeletonModification2DJiggle", "set_mass", 373806689, Nil, main.p_object, mass);  }  // 6
get_mass :: (main: *SkeletonModification2DJiggle) -> float { call_ret := cast(*float) sys_call("SkeletonModification2DJiggle", "get_mass", 1740695150, float, main.p_object); return call_ret.*; }  // 7
set_damping :: (main: *SkeletonModification2DJiggle, damping: float) { sys_call("SkeletonModification2DJiggle", "set_damping", 373806689, Nil, main.p_object, damping);  }  // 8
get_damping :: (main: *SkeletonModification2DJiggle) -> float { call_ret := cast(*float) sys_call("SkeletonModification2DJiggle", "get_damping", 1740695150, float, main.p_object); return call_ret.*; }  // 9
set_use_gravity :: (main: *SkeletonModification2DJiggle, use_gravity: bool) { sys_call("SkeletonModification2DJiggle", "set_use_gravity", 2586408642, Nil, main.p_object, use_gravity);  }  // 10
get_use_gravity :: (main: *SkeletonModification2DJiggle) -> bool { call_ret := cast(*bool) sys_call("SkeletonModification2DJiggle", "get_use_gravity", 36873697, bool, main.p_object); return call_ret.*; }  // 11
set_gravity :: (main: *SkeletonModification2DJiggle, gravity: Vector2) { sys_call("SkeletonModification2DJiggle", "set_gravity", 743155724, Nil, main.p_object, gravity);  }  // 12
get_gravity :: (main: *SkeletonModification2DJiggle) -> Vector2 { call_ret := cast(*Vector2) sys_call("SkeletonModification2DJiggle", "get_gravity", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 13
set_use_colliders :: (main: *SkeletonModification2DJiggle, use_colliders: bool) { sys_call("SkeletonModification2DJiggle", "set_use_colliders", 2586408642, Nil, main.p_object, use_colliders);  }  // 14
get_use_colliders :: (main: *SkeletonModification2DJiggle) -> bool { call_ret := cast(*bool) sys_call("SkeletonModification2DJiggle", "get_use_colliders", 36873697, bool, main.p_object); return call_ret.*; }  // 15
set_collision_mask :: (main: *SkeletonModification2DJiggle, collision_mask: int) { sys_call("SkeletonModification2DJiggle", "set_collision_mask", 1286410249, Nil, main.p_object, collision_mask);  }  // 16
get_collision_mask :: (main: *SkeletonModification2DJiggle) -> int { call_ret := cast(*int) sys_call("SkeletonModification2DJiggle", "get_collision_mask", 3905245786, int, main.p_object); return call_ret.*; }  // 17
set_jiggle_joint_bone2d_node :: (main: *SkeletonModification2DJiggle, joint_idx: int, bone2d_node: string) { sys_call("SkeletonModification2DJiggle", "set_jiggle_joint_bone2d_node", 2761262315, Nil, main.p_object, joint_idx, bone2d_node);  }  // 18
get_jiggle_joint_bone2d_node :: (main: *SkeletonModification2DJiggle, joint_idx: int) -> NodePath { call_ret := cast(*NodePath) sys_call("SkeletonModification2DJiggle", "get_jiggle_joint_bone2d_node", 408788394, NodePath, main.p_object, joint_idx); return call_ret.*; }  // 19
set_jiggle_joint_bone_index :: (main: *SkeletonModification2DJiggle, joint_idx: int, bone_idx: int) { sys_call("SkeletonModification2DJiggle", "set_jiggle_joint_bone_index", 3937882851, Nil, main.p_object, joint_idx, bone_idx);  }  // 20
get_jiggle_joint_bone_index :: (main: *SkeletonModification2DJiggle, joint_idx: int) -> int { call_ret := cast(*int) sys_call("SkeletonModification2DJiggle", "get_jiggle_joint_bone_index", 923996154, int, main.p_object, joint_idx); return call_ret.*; }  // 21
set_jiggle_joint_override :: (main: *SkeletonModification2DJiggle, joint_idx: int, override: bool) { sys_call("SkeletonModification2DJiggle", "set_jiggle_joint_override", 300928843, Nil, main.p_object, joint_idx, override);  }  // 22
get_jiggle_joint_override :: (main: *SkeletonModification2DJiggle, joint_idx: int) -> bool { call_ret := cast(*bool) sys_call("SkeletonModification2DJiggle", "get_jiggle_joint_override", 1116898809, bool, main.p_object, joint_idx); return call_ret.*; }  // 23
set_jiggle_joint_stiffness :: (main: *SkeletonModification2DJiggle, joint_idx: int, stiffness: float) { sys_call("SkeletonModification2DJiggle", "set_jiggle_joint_stiffness", 1602489585, Nil, main.p_object, joint_idx, stiffness);  }  // 24
get_jiggle_joint_stiffness :: (main: *SkeletonModification2DJiggle, joint_idx: int) -> float { call_ret := cast(*float) sys_call("SkeletonModification2DJiggle", "get_jiggle_joint_stiffness", 2339986948, float, main.p_object, joint_idx); return call_ret.*; }  // 25
set_jiggle_joint_mass :: (main: *SkeletonModification2DJiggle, joint_idx: int, mass: float) { sys_call("SkeletonModification2DJiggle", "set_jiggle_joint_mass", 1602489585, Nil, main.p_object, joint_idx, mass);  }  // 26
get_jiggle_joint_mass :: (main: *SkeletonModification2DJiggle, joint_idx: int) -> float { call_ret := cast(*float) sys_call("SkeletonModification2DJiggle", "get_jiggle_joint_mass", 2339986948, float, main.p_object, joint_idx); return call_ret.*; }  // 27
set_jiggle_joint_damping :: (main: *SkeletonModification2DJiggle, joint_idx: int, damping: float) { sys_call("SkeletonModification2DJiggle", "set_jiggle_joint_damping", 1602489585, Nil, main.p_object, joint_idx, damping);  }  // 28
get_jiggle_joint_damping :: (main: *SkeletonModification2DJiggle, joint_idx: int) -> float { call_ret := cast(*float) sys_call("SkeletonModification2DJiggle", "get_jiggle_joint_damping", 2339986948, float, main.p_object, joint_idx); return call_ret.*; }  // 29
set_jiggle_joint_use_gravity :: (main: *SkeletonModification2DJiggle, joint_idx: int, use_gravity: bool) { sys_call("SkeletonModification2DJiggle", "set_jiggle_joint_use_gravity", 300928843, Nil, main.p_object, joint_idx, use_gravity);  }  // 30
get_jiggle_joint_use_gravity :: (main: *SkeletonModification2DJiggle, joint_idx: int) -> bool { call_ret := cast(*bool) sys_call("SkeletonModification2DJiggle", "get_jiggle_joint_use_gravity", 1116898809, bool, main.p_object, joint_idx); return call_ret.*; }  // 31
set_jiggle_joint_gravity :: (main: *SkeletonModification2DJiggle, joint_idx: int, gravity: Vector2) { sys_call("SkeletonModification2DJiggle", "set_jiggle_joint_gravity", 163021252, Nil, main.p_object, joint_idx, gravity);  }  // 32
get_jiggle_joint_gravity :: (main: *SkeletonModification2DJiggle, joint_idx: int) -> Vector2 { call_ret := cast(*Vector2) sys_call("SkeletonModification2DJiggle", "get_jiggle_joint_gravity", 2299179447, Vector2, main.p_object, joint_idx); return call_ret.*; }  // 33

set_bone2d_node :: (main: *SkeletonModification2DLookAt, bone2d_nodepath: string) { sys_call("SkeletonModification2DLookAt", "set_bone2d_node", 1348162250, Nil, main.p_object, bone2d_nodepath);  }  // 0
get_bone2d_node :: (main: *SkeletonModification2DLookAt) -> NodePath { call_ret := cast(*NodePath) sys_call("SkeletonModification2DLookAt", "get_bone2d_node", 4075236667, NodePath, main.p_object); return call_ret.*; }  // 1
set_bone_index :: (main: *SkeletonModification2DLookAt, bone_idx: int) { sys_call("SkeletonModification2DLookAt", "set_bone_index", 1286410249, Nil, main.p_object, bone_idx);  }  // 2
get_bone_index :: (main: *SkeletonModification2DLookAt) -> int { call_ret := cast(*int) sys_call("SkeletonModification2DLookAt", "get_bone_index", 3905245786, int, main.p_object); return call_ret.*; }  // 3
set_target_node :: (main: *SkeletonModification2DLookAt, target_nodepath: string) { sys_call("SkeletonModification2DLookAt", "set_target_node", 1348162250, Nil, main.p_object, target_nodepath);  }  // 4
get_target_node :: (main: *SkeletonModification2DLookAt) -> NodePath { call_ret := cast(*NodePath) sys_call("SkeletonModification2DLookAt", "get_target_node", 4075236667, NodePath, main.p_object); return call_ret.*; }  // 5
set_additional_rotation :: (main: *SkeletonModification2DLookAt, rotation: float) { sys_call("SkeletonModification2DLookAt", "set_additional_rotation", 373806689, Nil, main.p_object, rotation);  }  // 6
get_additional_rotation :: (main: *SkeletonModification2DLookAt) -> float { call_ret := cast(*float) sys_call("SkeletonModification2DLookAt", "get_additional_rotation", 1740695150, float, main.p_object); return call_ret.*; }  // 7
set_enable_constraint :: (main: *SkeletonModification2DLookAt, enable_constraint: bool) { sys_call("SkeletonModification2DLookAt", "set_enable_constraint", 2586408642, Nil, main.p_object, enable_constraint);  }  // 8
get_enable_constraint :: (main: *SkeletonModification2DLookAt) -> bool { call_ret := cast(*bool) sys_call("SkeletonModification2DLookAt", "get_enable_constraint", 36873697, bool, main.p_object); return call_ret.*; }  // 9
set_constraint_angle_min :: (main: *SkeletonModification2DLookAt, angle_min: float) { sys_call("SkeletonModification2DLookAt", "set_constraint_angle_min", 373806689, Nil, main.p_object, angle_min);  }  // 10
get_constraint_angle_min :: (main: *SkeletonModification2DLookAt) -> float { call_ret := cast(*float) sys_call("SkeletonModification2DLookAt", "get_constraint_angle_min", 1740695150, float, main.p_object); return call_ret.*; }  // 11
set_constraint_angle_max :: (main: *SkeletonModification2DLookAt, angle_max: float) { sys_call("SkeletonModification2DLookAt", "set_constraint_angle_max", 373806689, Nil, main.p_object, angle_max);  }  // 12
get_constraint_angle_max :: (main: *SkeletonModification2DLookAt) -> float { call_ret := cast(*float) sys_call("SkeletonModification2DLookAt", "get_constraint_angle_max", 1740695150, float, main.p_object); return call_ret.*; }  // 13
set_constraint_angle_invert :: (main: *SkeletonModification2DLookAt, invert: bool) { sys_call("SkeletonModification2DLookAt", "set_constraint_angle_invert", 2586408642, Nil, main.p_object, invert);  }  // 14
get_constraint_angle_invert :: (main: *SkeletonModification2DLookAt) -> bool { call_ret := cast(*bool) sys_call("SkeletonModification2DLookAt", "get_constraint_angle_invert", 36873697, bool, main.p_object); return call_ret.*; }  // 15

set_physical_bone_chain_length :: (main: *SkeletonModification2DPhysicalBones, length: int) { sys_call("SkeletonModification2DPhysicalBones", "set_physical_bone_chain_length", 1286410249, Nil, main.p_object, length);  }  // 0
get_physical_bone_chain_length :: (main: *SkeletonModification2DPhysicalBones) -> int { call_ret := cast(*int) sys_call("SkeletonModification2DPhysicalBones", "get_physical_bone_chain_length", 2455072627, int, main.p_object); return call_ret.*; }  // 1
set_physical_bone_node :: (main: *SkeletonModification2DPhysicalBones, joint_idx: int, physicalbone2d_node: string) { sys_call("SkeletonModification2DPhysicalBones", "set_physical_bone_node", 2761262315, Nil, main.p_object, joint_idx, physicalbone2d_node);  }  // 2
get_physical_bone_node :: (main: *SkeletonModification2DPhysicalBones, joint_idx: int) -> NodePath { call_ret := cast(*NodePath) sys_call("SkeletonModification2DPhysicalBones", "get_physical_bone_node", 408788394, NodePath, main.p_object, joint_idx); return call_ret.*; }  // 3
fetch_physical_bones :: (main: *SkeletonModification2DPhysicalBones) { sys_call("SkeletonModification2DPhysicalBones", "fetch_physical_bones", 3218959716, Nil, main.p_object);  }  // 4
start_simulation :: (main: *SkeletonModification2DPhysicalBones) { sys_call("SkeletonModification2DPhysicalBones", "start_simulation", 2787316981, Nil, main.p_object);  }  // 5
stop_simulation :: (main: *SkeletonModification2DPhysicalBones) { sys_call("SkeletonModification2DPhysicalBones", "stop_simulation", 2787316981, Nil, main.p_object);  }  // 6

set_held_modification_stack :: (main: *SkeletonModification2DStackHolder, held_modification_stack: SkeletonModificationStack2D) { sys_call("SkeletonModification2DStackHolder", "set_held_modification_stack", 3907307132, Nil, main.p_object, held_modification_stack);  }  // 0
get_held_modification_stack :: (main: *SkeletonModification2DStackHolder) -> *SkeletonModificationStack2D { call_ret := cast(*SkeletonModificationStack2D) sys_call("SkeletonModification2DStackHolder", "get_held_modification_stack", 2107508396, SkeletonModificationStack2D, main.p_object); return call_ret; }  // 1

set_target_node :: (main: *SkeletonModification2DTwoBoneIK, target_nodepath: string) { sys_call("SkeletonModification2DTwoBoneIK", "set_target_node", 1348162250, Nil, main.p_object, target_nodepath);  }  // 0
get_target_node :: (main: *SkeletonModification2DTwoBoneIK) -> NodePath { call_ret := cast(*NodePath) sys_call("SkeletonModification2DTwoBoneIK", "get_target_node", 4075236667, NodePath, main.p_object); return call_ret.*; }  // 1
set_target_minimum_distance :: (main: *SkeletonModification2DTwoBoneIK, minimum_distance: float) { sys_call("SkeletonModification2DTwoBoneIK", "set_target_minimum_distance", 373806689, Nil, main.p_object, minimum_distance);  }  // 2
get_target_minimum_distance :: (main: *SkeletonModification2DTwoBoneIK) -> float { call_ret := cast(*float) sys_call("SkeletonModification2DTwoBoneIK", "get_target_minimum_distance", 1740695150, float, main.p_object); return call_ret.*; }  // 3
set_target_maximum_distance :: (main: *SkeletonModification2DTwoBoneIK, maximum_distance: float) { sys_call("SkeletonModification2DTwoBoneIK", "set_target_maximum_distance", 373806689, Nil, main.p_object, maximum_distance);  }  // 4
get_target_maximum_distance :: (main: *SkeletonModification2DTwoBoneIK) -> float { call_ret := cast(*float) sys_call("SkeletonModification2DTwoBoneIK", "get_target_maximum_distance", 1740695150, float, main.p_object); return call_ret.*; }  // 5
set_flip_bend_direction :: (main: *SkeletonModification2DTwoBoneIK, flip_direction: bool) { sys_call("SkeletonModification2DTwoBoneIK", "set_flip_bend_direction", 2586408642, Nil, main.p_object, flip_direction);  }  // 6
get_flip_bend_direction :: (main: *SkeletonModification2DTwoBoneIK) -> bool { call_ret := cast(*bool) sys_call("SkeletonModification2DTwoBoneIK", "get_flip_bend_direction", 36873697, bool, main.p_object); return call_ret.*; }  // 7
set_joint_one_bone2d_node :: (main: *SkeletonModification2DTwoBoneIK, bone2d_node: string) { sys_call("SkeletonModification2DTwoBoneIK", "set_joint_one_bone2d_node", 1348162250, Nil, main.p_object, bone2d_node);  }  // 8
get_joint_one_bone2d_node :: (main: *SkeletonModification2DTwoBoneIK) -> NodePath { call_ret := cast(*NodePath) sys_call("SkeletonModification2DTwoBoneIK", "get_joint_one_bone2d_node", 4075236667, NodePath, main.p_object); return call_ret.*; }  // 9
set_joint_one_bone_idx :: (main: *SkeletonModification2DTwoBoneIK, bone_idx: int) { sys_call("SkeletonModification2DTwoBoneIK", "set_joint_one_bone_idx", 1286410249, Nil, main.p_object, bone_idx);  }  // 10
get_joint_one_bone_idx :: (main: *SkeletonModification2DTwoBoneIK) -> int { call_ret := cast(*int) sys_call("SkeletonModification2DTwoBoneIK", "get_joint_one_bone_idx", 3905245786, int, main.p_object); return call_ret.*; }  // 11
set_joint_two_bone2d_node :: (main: *SkeletonModification2DTwoBoneIK, bone2d_node: string) { sys_call("SkeletonModification2DTwoBoneIK", "set_joint_two_bone2d_node", 1348162250, Nil, main.p_object, bone2d_node);  }  // 12
get_joint_two_bone2d_node :: (main: *SkeletonModification2DTwoBoneIK) -> NodePath { call_ret := cast(*NodePath) sys_call("SkeletonModification2DTwoBoneIK", "get_joint_two_bone2d_node", 4075236667, NodePath, main.p_object); return call_ret.*; }  // 13
set_joint_two_bone_idx :: (main: *SkeletonModification2DTwoBoneIK, bone_idx: int) { sys_call("SkeletonModification2DTwoBoneIK", "set_joint_two_bone_idx", 1286410249, Nil, main.p_object, bone_idx);  }  // 14
get_joint_two_bone_idx :: (main: *SkeletonModification2DTwoBoneIK) -> int { call_ret := cast(*int) sys_call("SkeletonModification2DTwoBoneIK", "get_joint_two_bone_idx", 3905245786, int, main.p_object); return call_ret.*; }  // 15

setup :: (main: *SkeletonModificationStack2D) { sys_call("SkeletonModificationStack2D", "setup", 3218959716, Nil, main.p_object);  }  // 0
execute :: (main: *SkeletonModificationStack2D, delta: float, execution_mode: int) { sys_call("SkeletonModificationStack2D", "execute", 1005356550, Nil, main.p_object, delta, execution_mode);  }  // 1
enable_all_modifications :: (main: *SkeletonModificationStack2D, enabled: bool) { sys_call("SkeletonModificationStack2D", "enable_all_modifications", 2586408642, Nil, main.p_object, enabled);  }  // 2
get_modification :: (main: *SkeletonModificationStack2D, mod_idx: int) -> *SkeletonModification2D { call_ret := cast(*SkeletonModification2D) sys_call("SkeletonModificationStack2D", "get_modification", 2570274329, SkeletonModification2D, main.p_object, mod_idx); return call_ret; }  // 3
add_modification :: (main: *SkeletonModificationStack2D, modification: SkeletonModification2D) { sys_call("SkeletonModificationStack2D", "add_modification", 354162120, Nil, main.p_object, modification);  }  // 4
delete_modification :: (main: *SkeletonModificationStack2D, mod_idx: int) { sys_call("SkeletonModificationStack2D", "delete_modification", 1286410249, Nil, main.p_object, mod_idx);  }  // 5
set_modification :: (main: *SkeletonModificationStack2D, mod_idx: int, modification: SkeletonModification2D) { sys_call("SkeletonModificationStack2D", "set_modification", 1098262544, Nil, main.p_object, mod_idx, modification);  }  // 6
set_modification_count :: (main: *SkeletonModificationStack2D, count: int) { sys_call("SkeletonModificationStack2D", "set_modification_count", 1286410249, Nil, main.p_object, count);  }  // 7
get_modification_count :: (main: *SkeletonModificationStack2D) -> int { call_ret := cast(*int) sys_call("SkeletonModificationStack2D", "get_modification_count", 3905245786, int, main.p_object); return call_ret.*; }  // 8
get_is_setup :: (main: *SkeletonModificationStack2D) -> bool { call_ret := cast(*bool) sys_call("SkeletonModificationStack2D", "get_is_setup", 36873697, bool, main.p_object); return call_ret.*; }  // 9
set_enabled :: (main: *SkeletonModificationStack2D, enabled: bool) { sys_call("SkeletonModificationStack2D", "set_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 10
get_enabled :: (main: *SkeletonModificationStack2D) -> bool { call_ret := cast(*bool) sys_call("SkeletonModificationStack2D", "get_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 11
set_strength :: (main: *SkeletonModificationStack2D, strength: float) { sys_call("SkeletonModificationStack2D", "set_strength", 373806689, Nil, main.p_object, strength);  }  // 12
get_strength :: (main: *SkeletonModificationStack2D) -> float { call_ret := cast(*float) sys_call("SkeletonModificationStack2D", "get_strength", 1740695150, float, main.p_object); return call_ret.*; }  // 13
get_skeleton :: (main: *SkeletonModificationStack2D) -> *Skeleton2D { call_ret := cast(*Skeleton2D) sys_call("SkeletonModificationStack2D", "get_skeleton", 1697361217, Skeleton2D, main.p_object); return call_ret; }  // 14

get_skeleton :: (main: *SkeletonModifier3D) -> *Skeleton3D { call_ret := cast(*Skeleton3D) sys_call("SkeletonModifier3D", "get_skeleton", 1488626673, Skeleton3D, main.p_object); return call_ret; }  // 1
set_active :: (main: *SkeletonModifier3D, active: bool) { sys_call("SkeletonModifier3D", "set_active", 2586408642, Nil, main.p_object, active);  }  // 2
is_active :: (main: *SkeletonModifier3D) -> bool { call_ret := cast(*bool) sys_call("SkeletonModifier3D", "is_active", 36873697, bool, main.p_object); return call_ret.*; }  // 3
set_influence :: (main: *SkeletonModifier3D, influence: float) { sys_call("SkeletonModifier3D", "set_influence", 373806689, Nil, main.p_object, influence);  }  // 4
get_influence :: (main: *SkeletonModifier3D) -> float { call_ret := cast(*float) sys_call("SkeletonModifier3D", "get_influence", 1740695150, float, main.p_object); return call_ret.*; }  // 5

set_root_bone :: (main: *SkeletonProfile, bone_name: string) { sys_call("SkeletonProfile", "set_root_bone", 3304788590, Nil, main.p_object, bone_name);  }  // 0
get_root_bone :: (main: *SkeletonProfile) -> StringName { call_ret := cast(*StringName) sys_call("SkeletonProfile", "get_root_bone", 2737447660, StringName, main.p_object); return call_ret.*; }  // 1
set_scale_base_bone :: (main: *SkeletonProfile, bone_name: string) { sys_call("SkeletonProfile", "set_scale_base_bone", 3304788590, Nil, main.p_object, bone_name);  }  // 2
get_scale_base_bone :: (main: *SkeletonProfile) -> StringName { call_ret := cast(*StringName) sys_call("SkeletonProfile", "get_scale_base_bone", 2737447660, StringName, main.p_object); return call_ret.*; }  // 3
set_group_size :: (main: *SkeletonProfile, size: int) { sys_call("SkeletonProfile", "set_group_size", 1286410249, Nil, main.p_object, size);  }  // 4
get_group_size :: (main: *SkeletonProfile) -> int { call_ret := cast(*int) sys_call("SkeletonProfile", "get_group_size", 2455072627, int, main.p_object); return call_ret.*; }  // 5
get_group_name :: (main: *SkeletonProfile, group_idx: int) -> StringName { call_ret := cast(*StringName) sys_call("SkeletonProfile", "get_group_name", 659327637, StringName, main.p_object, group_idx); return call_ret.*; }  // 6
set_group_name :: (main: *SkeletonProfile, group_idx: int, group_name: string) { sys_call("SkeletonProfile", "set_group_name", 3780747571, Nil, main.p_object, group_idx, group_name);  }  // 7
get_texture :: (main: *SkeletonProfile, group_idx: int) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("SkeletonProfile", "get_texture", 3536238170, Texture2D, main.p_object, group_idx); return call_ret; }  // 8
set_texture :: (main: *SkeletonProfile, group_idx: int, texture: Texture2D) { sys_call("SkeletonProfile", "set_texture", 666127730, Nil, main.p_object, group_idx, texture);  }  // 9
set_bone_size :: (main: *SkeletonProfile, size: int) { sys_call("SkeletonProfile", "set_bone_size", 1286410249, Nil, main.p_object, size);  }  // 10
get_bone_size :: (main: *SkeletonProfile) -> int { call_ret := cast(*int) sys_call("SkeletonProfile", "get_bone_size", 2455072627, int, main.p_object); return call_ret.*; }  // 11
find_bone :: (main: *SkeletonProfile, bone_name: string) -> int { call_ret := cast(*int) sys_call("SkeletonProfile", "find_bone", 2458036349, int, main.p_object, bone_name); return call_ret.*; }  // 12
get_bone_name :: (main: *SkeletonProfile, bone_idx: int) -> StringName { call_ret := cast(*StringName) sys_call("SkeletonProfile", "get_bone_name", 659327637, StringName, main.p_object, bone_idx); return call_ret.*; }  // 13
set_bone_name :: (main: *SkeletonProfile, bone_idx: int, bone_name: string) { sys_call("SkeletonProfile", "set_bone_name", 3780747571, Nil, main.p_object, bone_idx, bone_name);  }  // 14
get_bone_parent :: (main: *SkeletonProfile, bone_idx: int) -> StringName { call_ret := cast(*StringName) sys_call("SkeletonProfile", "get_bone_parent", 659327637, StringName, main.p_object, bone_idx); return call_ret.*; }  // 15
set_bone_parent :: (main: *SkeletonProfile, bone_idx: int, bone_parent: string) { sys_call("SkeletonProfile", "set_bone_parent", 3780747571, Nil, main.p_object, bone_idx, bone_parent);  }  // 16
get_tail_direction :: (main: *SkeletonProfile, bone_idx: int) -> SkeletonProfile.TailDirection { call_ret := cast(*SkeletonProfile.TailDirection) sys_call("SkeletonProfile", "get_tail_direction", 2675997574, SkeletonProfile.TailDirection, main.p_object, bone_idx); return call_ret.*; }  // 17
set_tail_direction :: (main: *SkeletonProfile, bone_idx: int, tail_direction: SkeletonProfile.TailDirection) { sys_call("SkeletonProfile", "set_tail_direction", 1231951015, Nil, main.p_object, bone_idx, tail_direction);  }  // 18
get_bone_tail :: (main: *SkeletonProfile, bone_idx: int) -> StringName { call_ret := cast(*StringName) sys_call("SkeletonProfile", "get_bone_tail", 659327637, StringName, main.p_object, bone_idx); return call_ret.*; }  // 19
set_bone_tail :: (main: *SkeletonProfile, bone_idx: int, bone_tail: string) { sys_call("SkeletonProfile", "set_bone_tail", 3780747571, Nil, main.p_object, bone_idx, bone_tail);  }  // 20
get_reference_pose :: (main: *SkeletonProfile, bone_idx: int) -> Transform3D { call_ret := cast(*Transform3D) sys_call("SkeletonProfile", "get_reference_pose", 1965739696, Transform3D, main.p_object, bone_idx); return call_ret.*; }  // 21
set_reference_pose :: (main: *SkeletonProfile, bone_idx: int, bone_name: Transform3D) { sys_call("SkeletonProfile", "set_reference_pose", 3616898986, Nil, main.p_object, bone_idx, bone_name);  }  // 22
get_handle_offset :: (main: *SkeletonProfile, bone_idx: int) -> Vector2 { call_ret := cast(*Vector2) sys_call("SkeletonProfile", "get_handle_offset", 2299179447, Vector2, main.p_object, bone_idx); return call_ret.*; }  // 23
set_handle_offset :: (main: *SkeletonProfile, bone_idx: int, handle_offset: Vector2) { sys_call("SkeletonProfile", "set_handle_offset", 163021252, Nil, main.p_object, bone_idx, handle_offset);  }  // 24
get_group :: (main: *SkeletonProfile, bone_idx: int) -> StringName { call_ret := cast(*StringName) sys_call("SkeletonProfile", "get_group", 659327637, StringName, main.p_object, bone_idx); return call_ret.*; }  // 25
set_group :: (main: *SkeletonProfile, bone_idx: int, group: string) { sys_call("SkeletonProfile", "set_group", 3780747571, Nil, main.p_object, bone_idx, group);  }  // 26
is_required :: (main: *SkeletonProfile, bone_idx: int) -> bool { call_ret := cast(*bool) sys_call("SkeletonProfile", "is_required", 1116898809, bool, main.p_object, bone_idx); return call_ret.*; }  // 27
set_required :: (main: *SkeletonProfile, bone_idx: int, required: bool) { sys_call("SkeletonProfile", "set_required", 300928843, Nil, main.p_object, bone_idx, required);  }  // 28


set_bind_count :: (main: *Skin, bind_count: int) { sys_call("Skin", "set_bind_count", 1286410249, Nil, main.p_object, bind_count);  }  // 0
get_bind_count :: (main: *Skin) -> int { call_ret := cast(*int) sys_call("Skin", "get_bind_count", 3905245786, int, main.p_object); return call_ret.*; }  // 1
add_bind :: (main: *Skin, bone: int, pose: Transform3D) { sys_call("Skin", "add_bind", 3616898986, Nil, main.p_object, bone, pose);  }  // 2
add_named_bind :: (main: *Skin, name: string, pose: Transform3D) { sys_call("Skin", "add_named_bind", 3154712474, Nil, main.p_object, name, pose);  }  // 3
set_bind_pose :: (main: *Skin, bind_index: int, pose: Transform3D) { sys_call("Skin", "set_bind_pose", 3616898986, Nil, main.p_object, bind_index, pose);  }  // 4
get_bind_pose :: (main: *Skin, bind_index: int) -> Transform3D { call_ret := cast(*Transform3D) sys_call("Skin", "get_bind_pose", 1965739696, Transform3D, main.p_object, bind_index); return call_ret.*; }  // 5
set_bind_name :: (main: *Skin, bind_index: int, name: string) { sys_call("Skin", "set_bind_name", 3780747571, Nil, main.p_object, bind_index, name);  }  // 6
get_bind_name :: (main: *Skin, bind_index: int) -> StringName { call_ret := cast(*StringName) sys_call("Skin", "get_bind_name", 659327637, StringName, main.p_object, bind_index); return call_ret.*; }  // 7
set_bind_bone :: (main: *Skin, bind_index: int, bone: int) { sys_call("Skin", "set_bind_bone", 3937882851, Nil, main.p_object, bind_index, bone);  }  // 8
get_bind_bone :: (main: *Skin, bind_index: int) -> int { call_ret := cast(*int) sys_call("Skin", "get_bind_bone", 923996154, int, main.p_object, bind_index); return call_ret.*; }  // 9
clear_binds :: (main: *Skin) { sys_call("Skin", "clear_binds", 3218959716, Nil, main.p_object);  }  // 10

get_skeleton :: (main: *SkinReference) -> RID { call_ret := cast(*RID) sys_call("SkinReference", "get_skeleton", 2944877500, RID, main.p_object); return call_ret.*; }  // 0
get_skin :: (main: *SkinReference) -> *Skin { call_ret := cast(*Skin) sys_call("SkinReference", "get_skin", 2074563878, Skin, main.p_object); return call_ret; }  // 1

set_radiance_size :: (main: *Sky, size: Sky.RadianceSize) { sys_call("Sky", "set_radiance_size", 1512957179, Nil, main.p_object, size);  }  // 0
get_radiance_size :: (main: *Sky) -> Sky.RadianceSize { call_ret := cast(*Sky.RadianceSize) sys_call("Sky", "get_radiance_size", 2708733976, Sky.RadianceSize, main.p_object); return call_ret.*; }  // 1
set_process_mode :: (main: *Sky, mode: Sky.ProcessMode) { sys_call("Sky", "set_process_mode", 875986769, Nil, main.p_object, mode);  }  // 2
get_process_mode :: (main: *Sky) -> Sky.ProcessMode { call_ret := cast(*Sky.ProcessMode) sys_call("Sky", "get_process_mode", 731245043, Sky.ProcessMode, main.p_object); return call_ret.*; }  // 3
set_material :: (main: *Sky, material: Material) { sys_call("Sky", "set_material", 2757459619, Nil, main.p_object, material);  }  // 4
get_material :: (main: *Sky) -> *Material { call_ret := cast(*Material) sys_call("Sky", "get_material", 5934680, Material, main.p_object); return call_ret; }  // 5

set_ticks :: (main: *Slider, count: int) { sys_call("Slider", "set_ticks", 1286410249, Nil, main.p_object, count);  }  // 0
get_ticks :: (main: *Slider) -> int { call_ret := cast(*int) sys_call("Slider", "get_ticks", 3905245786, int, main.p_object); return call_ret.*; }  // 1
get_ticks_on_borders :: (main: *Slider) -> bool { call_ret := cast(*bool) sys_call("Slider", "get_ticks_on_borders", 36873697, bool, main.p_object); return call_ret.*; }  // 2
set_ticks_on_borders :: (main: *Slider, ticks_on_border: bool) { sys_call("Slider", "set_ticks_on_borders", 2586408642, Nil, main.p_object, ticks_on_border);  }  // 3
set_editable :: (main: *Slider, editable: bool) { sys_call("Slider", "set_editable", 2586408642, Nil, main.p_object, editable);  }  // 4
is_editable :: (main: *Slider) -> bool { call_ret := cast(*bool) sys_call("Slider", "is_editable", 36873697, bool, main.p_object); return call_ret.*; }  // 5
set_scrollable :: (main: *Slider, scrollable: bool) { sys_call("Slider", "set_scrollable", 2586408642, Nil, main.p_object, scrollable);  }  // 6
is_scrollable :: (main: *Slider) -> bool { call_ret := cast(*bool) sys_call("Slider", "is_scrollable", 36873697, bool, main.p_object); return call_ret.*; }  // 7

set_param :: (main: *SliderJoint3D, param: SliderJoint3D.Param, value: float) { sys_call("SliderJoint3D", "set_param", 918243683, Nil, main.p_object, param, value);  }  // 0
get_param :: (main: *SliderJoint3D, param: SliderJoint3D.Param) -> float { call_ret := cast(*float) sys_call("SliderJoint3D", "get_param", 959925627, float, main.p_object, param); return call_ret.*; }  // 1

get_physics_rid :: (main: *SoftBody3D) -> RID { call_ret := cast(*RID) sys_call("SoftBody3D", "get_physics_rid", 2944877500, RID, main.p_object); return call_ret.*; }  // 0
set_collision_mask :: (main: *SoftBody3D, collision_mask: int) { sys_call("SoftBody3D", "set_collision_mask", 1286410249, Nil, main.p_object, collision_mask);  }  // 1
get_collision_mask :: (main: *SoftBody3D) -> int { call_ret := cast(*int) sys_call("SoftBody3D", "get_collision_mask", 3905245786, int, main.p_object); return call_ret.*; }  // 2
set_collision_layer :: (main: *SoftBody3D, collision_layer: int) { sys_call("SoftBody3D", "set_collision_layer", 1286410249, Nil, main.p_object, collision_layer);  }  // 3
get_collision_layer :: (main: *SoftBody3D) -> int { call_ret := cast(*int) sys_call("SoftBody3D", "get_collision_layer", 3905245786, int, main.p_object); return call_ret.*; }  // 4
set_collision_mask_value :: (main: *SoftBody3D, layer_number: int, value: bool) { sys_call("SoftBody3D", "set_collision_mask_value", 300928843, Nil, main.p_object, layer_number, value);  }  // 5
get_collision_mask_value :: (main: *SoftBody3D, layer_number: int) -> bool { call_ret := cast(*bool) sys_call("SoftBody3D", "get_collision_mask_value", 1116898809, bool, main.p_object, layer_number); return call_ret.*; }  // 6
set_collision_layer_value :: (main: *SoftBody3D, layer_number: int, value: bool) { sys_call("SoftBody3D", "set_collision_layer_value", 300928843, Nil, main.p_object, layer_number, value);  }  // 7
get_collision_layer_value :: (main: *SoftBody3D, layer_number: int) -> bool { call_ret := cast(*bool) sys_call("SoftBody3D", "get_collision_layer_value", 1116898809, bool, main.p_object, layer_number); return call_ret.*; }  // 8
set_parent_collision_ignore :: (main: *SoftBody3D, parent_collision_ignore: string) { sys_call("SoftBody3D", "set_parent_collision_ignore", 1348162250, Nil, main.p_object, parent_collision_ignore);  }  // 9
get_parent_collision_ignore :: (main: *SoftBody3D) -> NodePath { call_ret := cast(*NodePath) sys_call("SoftBody3D", "get_parent_collision_ignore", 4075236667, NodePath, main.p_object); return call_ret.*; }  // 10
set_disable_mode :: (main: *SoftBody3D, mode: SoftBody3D.DisableMode) { sys_call("SoftBody3D", "set_disable_mode", 1104158384, Nil, main.p_object, mode);  }  // 11
get_disable_mode :: (main: *SoftBody3D) -> SoftBody3D.DisableMode { call_ret := cast(*SoftBody3D.DisableMode) sys_call("SoftBody3D", "get_disable_mode", 4135042476, SoftBody3D.DisableMode, main.p_object); return call_ret.*; }  // 12
get_collision_exceptions :: (main: *SoftBody3D) -> [] PhysicsBody3D { call_ret := cast(*[] PhysicsBody3D) sys_call("SoftBody3D", "get_collision_exceptions", 2915620761, [] PhysicsBody3D, main.p_object); return call_ret.*; }  // 13
add_collision_exception_with :: (main: *SoftBody3D, body: Node) { sys_call("SoftBody3D", "add_collision_exception_with", 1078189570, Nil, main.p_object, body);  }  // 14
remove_collision_exception_with :: (main: *SoftBody3D, body: Node) { sys_call("SoftBody3D", "remove_collision_exception_with", 1078189570, Nil, main.p_object, body);  }  // 15
set_simulation_precision :: (main: *SoftBody3D, simulation_precision: int) { sys_call("SoftBody3D", "set_simulation_precision", 1286410249, Nil, main.p_object, simulation_precision);  }  // 16
get_simulation_precision :: (main: *SoftBody3D) -> int { call_ret := cast(*int) sys_call("SoftBody3D", "get_simulation_precision", 2455072627, int, main.p_object); return call_ret.*; }  // 17
set_total_mass :: (main: *SoftBody3D, mass: float) { sys_call("SoftBody3D", "set_total_mass", 373806689, Nil, main.p_object, mass);  }  // 18
get_total_mass :: (main: *SoftBody3D) -> float { call_ret := cast(*float) sys_call("SoftBody3D", "get_total_mass", 191475506, float, main.p_object); return call_ret.*; }  // 19
set_linear_stiffness :: (main: *SoftBody3D, linear_stiffness: float) { sys_call("SoftBody3D", "set_linear_stiffness", 373806689, Nil, main.p_object, linear_stiffness);  }  // 20
get_linear_stiffness :: (main: *SoftBody3D) -> float { call_ret := cast(*float) sys_call("SoftBody3D", "get_linear_stiffness", 191475506, float, main.p_object); return call_ret.*; }  // 21
set_pressure_coefficient :: (main: *SoftBody3D, pressure_coefficient: float) { sys_call("SoftBody3D", "set_pressure_coefficient", 373806689, Nil, main.p_object, pressure_coefficient);  }  // 22
get_pressure_coefficient :: (main: *SoftBody3D) -> float { call_ret := cast(*float) sys_call("SoftBody3D", "get_pressure_coefficient", 191475506, float, main.p_object); return call_ret.*; }  // 23
set_damping_coefficient :: (main: *SoftBody3D, damping_coefficient: float) { sys_call("SoftBody3D", "set_damping_coefficient", 373806689, Nil, main.p_object, damping_coefficient);  }  // 24
get_damping_coefficient :: (main: *SoftBody3D) -> float { call_ret := cast(*float) sys_call("SoftBody3D", "get_damping_coefficient", 191475506, float, main.p_object); return call_ret.*; }  // 25
set_drag_coefficient :: (main: *SoftBody3D, drag_coefficient: float) { sys_call("SoftBody3D", "set_drag_coefficient", 373806689, Nil, main.p_object, drag_coefficient);  }  // 26
get_drag_coefficient :: (main: *SoftBody3D) -> float { call_ret := cast(*float) sys_call("SoftBody3D", "get_drag_coefficient", 191475506, float, main.p_object); return call_ret.*; }  // 27
get_point_transform :: (main: *SoftBody3D, point_index: int) -> Vector3 { call_ret := cast(*Vector3) sys_call("SoftBody3D", "get_point_transform", 871989493, Vector3, main.p_object, point_index); return call_ret.*; }  // 28
set_point_pinned :: (main: *SoftBody3D, point_index: int, pinned: bool) { sys_call("SoftBody3D", "set_point_pinned", 528784402, Nil, main.p_object, point_index, pinned);  }  // 29
is_point_pinned :: (main: *SoftBody3D, point_index: int) -> bool { call_ret := cast(*bool) sys_call("SoftBody3D", "is_point_pinned", 1116898809, bool, main.p_object, point_index); return call_ret.*; }  // 30
set_ray_pickable :: (main: *SoftBody3D, ray_pickable: bool) { sys_call("SoftBody3D", "set_ray_pickable", 2586408642, Nil, main.p_object, ray_pickable);  }  // 31
is_ray_pickable :: (main: *SoftBody3D) -> bool { call_ret := cast(*bool) sys_call("SoftBody3D", "is_ray_pickable", 36873697, bool, main.p_object); return call_ret.*; }  // 32

set_radius :: (main: *SphereMesh, radius: float) { sys_call("SphereMesh", "set_radius", 373806689, Nil, main.p_object, radius);  }  // 0
get_radius :: (main: *SphereMesh) -> float { call_ret := cast(*float) sys_call("SphereMesh", "get_radius", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_height :: (main: *SphereMesh, height: float) { sys_call("SphereMesh", "set_height", 373806689, Nil, main.p_object, height);  }  // 2
get_height :: (main: *SphereMesh) -> float { call_ret := cast(*float) sys_call("SphereMesh", "get_height", 1740695150, float, main.p_object); return call_ret.*; }  // 3
set_radial_segments :: (main: *SphereMesh, radial_segments: int) { sys_call("SphereMesh", "set_radial_segments", 1286410249, Nil, main.p_object, radial_segments);  }  // 4
get_radial_segments :: (main: *SphereMesh) -> int { call_ret := cast(*int) sys_call("SphereMesh", "get_radial_segments", 3905245786, int, main.p_object); return call_ret.*; }  // 5
set_rings :: (main: *SphereMesh, rings: int) { sys_call("SphereMesh", "set_rings", 1286410249, Nil, main.p_object, rings);  }  // 6
get_rings :: (main: *SphereMesh) -> int { call_ret := cast(*int) sys_call("SphereMesh", "get_rings", 3905245786, int, main.p_object); return call_ret.*; }  // 7
set_is_hemisphere :: (main: *SphereMesh, is_hemisphere: bool) { sys_call("SphereMesh", "set_is_hemisphere", 2586408642, Nil, main.p_object, is_hemisphere);  }  // 8
get_is_hemisphere :: (main: *SphereMesh) -> bool { call_ret := cast(*bool) sys_call("SphereMesh", "get_is_hemisphere", 36873697, bool, main.p_object); return call_ret.*; }  // 9

set_radius :: (main: *SphereOccluder3D, radius: float) { sys_call("SphereOccluder3D", "set_radius", 373806689, Nil, main.p_object, radius);  }  // 0
get_radius :: (main: *SphereOccluder3D) -> float { call_ret := cast(*float) sys_call("SphereOccluder3D", "get_radius", 1740695150, float, main.p_object); return call_ret.*; }  // 1

set_radius :: (main: *SphereShape3D, radius: float) { sys_call("SphereShape3D", "set_radius", 373806689, Nil, main.p_object, radius);  }  // 0
get_radius :: (main: *SphereShape3D) -> float { call_ret := cast(*float) sys_call("SphereShape3D", "get_radius", 1740695150, float, main.p_object); return call_ret.*; }  // 1

set_horizontal_alignment :: (main: *SpinBox, alignment: HorizontalAlignment) { sys_call("SpinBox", "set_horizontal_alignment", 2312603777, Nil, main.p_object, alignment);  }  // 0
get_horizontal_alignment :: (main: *SpinBox) -> HorizontalAlignment { call_ret := cast(*HorizontalAlignment) sys_call("SpinBox", "get_horizontal_alignment", 341400642, HorizontalAlignment, main.p_object); return call_ret.*; }  // 1
set_suffix :: (main: *SpinBox, suffix: string) { sys_call("SpinBox", "set_suffix", 83702148, Nil, main.p_object, suffix);  }  // 2
get_suffix :: (main: *SpinBox) -> gstring { call_ret := cast(*gstring) sys_call("SpinBox", "get_suffix", 201670096, gstring, main.p_object); return call_ret.*; }  // 3
set_prefix :: (main: *SpinBox, prefix: string) { sys_call("SpinBox", "set_prefix", 83702148, Nil, main.p_object, prefix);  }  // 4
get_prefix :: (main: *SpinBox) -> gstring { call_ret := cast(*gstring) sys_call("SpinBox", "get_prefix", 201670096, gstring, main.p_object); return call_ret.*; }  // 5
set_editable :: (main: *SpinBox, enabled: bool) { sys_call("SpinBox", "set_editable", 2586408642, Nil, main.p_object, enabled);  }  // 6
set_custom_arrow_step :: (main: *SpinBox, arrow_step: float) { sys_call("SpinBox", "set_custom_arrow_step", 373806689, Nil, main.p_object, arrow_step);  }  // 7
get_custom_arrow_step :: (main: *SpinBox) -> float { call_ret := cast(*float) sys_call("SpinBox", "get_custom_arrow_step", 1740695150, float, main.p_object); return call_ret.*; }  // 8
is_editable :: (main: *SpinBox) -> bool { call_ret := cast(*bool) sys_call("SpinBox", "is_editable", 36873697, bool, main.p_object); return call_ret.*; }  // 9
set_update_on_text_changed :: (main: *SpinBox, enabled: bool) { sys_call("SpinBox", "set_update_on_text_changed", 2586408642, Nil, main.p_object, enabled);  }  // 10
get_update_on_text_changed :: (main: *SpinBox) -> bool { call_ret := cast(*bool) sys_call("SpinBox", "get_update_on_text_changed", 36873697, bool, main.p_object); return call_ret.*; }  // 11
set_select_all_on_focus :: (main: *SpinBox, enabled: bool) { sys_call("SpinBox", "set_select_all_on_focus", 2586408642, Nil, main.p_object, enabled);  }  // 12
is_select_all_on_focus :: (main: *SpinBox) -> bool { call_ret := cast(*bool) sys_call("SpinBox", "is_select_all_on_focus", 36873697, bool, main.p_object); return call_ret.*; }  // 13
apply :: (main: *SpinBox) { sys_call("SpinBox", "apply", 3218959716, Nil, main.p_object);  }  // 14
get_line_edit :: (main: *SpinBox) -> *LineEdit { call_ret := cast(*LineEdit) sys_call("SpinBox", "get_line_edit", 4071694264, LineEdit, main.p_object); return call_ret; }  // 15

set_split_offset :: (main: *SplitContainer, offset: int) { sys_call("SplitContainer", "set_split_offset", 1286410249, Nil, main.p_object, offset);  }  // 0
get_split_offset :: (main: *SplitContainer) -> int { call_ret := cast(*int) sys_call("SplitContainer", "get_split_offset", 3905245786, int, main.p_object); return call_ret.*; }  // 1
clamp_split_offset :: (main: *SplitContainer) { sys_call("SplitContainer", "clamp_split_offset", 3218959716, Nil, main.p_object);  }  // 2
set_collapsed :: (main: *SplitContainer, collapsed: bool) { sys_call("SplitContainer", "set_collapsed", 2586408642, Nil, main.p_object, collapsed);  }  // 3
is_collapsed :: (main: *SplitContainer) -> bool { call_ret := cast(*bool) sys_call("SplitContainer", "is_collapsed", 36873697, bool, main.p_object); return call_ret.*; }  // 4
set_dragger_visibility :: (main: *SplitContainer, mode: SplitContainer.DraggerVisibility) { sys_call("SplitContainer", "set_dragger_visibility", 1168273952, Nil, main.p_object, mode);  }  // 5
get_dragger_visibility :: (main: *SplitContainer) -> SplitContainer.DraggerVisibility { call_ret := cast(*SplitContainer.DraggerVisibility) sys_call("SplitContainer", "get_dragger_visibility", 967297479, SplitContainer.DraggerVisibility, main.p_object); return call_ret.*; }  // 6
set_vertical :: (main: *SplitContainer, vertical: bool) { sys_call("SplitContainer", "set_vertical", 2586408642, Nil, main.p_object, vertical);  }  // 7
is_vertical :: (main: *SplitContainer) -> bool { call_ret := cast(*bool) sys_call("SplitContainer", "is_vertical", 36873697, bool, main.p_object); return call_ret.*; }  // 8
set_dragging_enabled :: (main: *SplitContainer, dragging_enabled: bool) { sys_call("SplitContainer", "set_dragging_enabled", 2586408642, Nil, main.p_object, dragging_enabled);  }  // 9
is_dragging_enabled :: (main: *SplitContainer) -> bool { call_ret := cast(*bool) sys_call("SplitContainer", "is_dragging_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 10
set_drag_area_margin_begin :: (main: *SplitContainer, margin: int) { sys_call("SplitContainer", "set_drag_area_margin_begin", 1286410249, Nil, main.p_object, margin);  }  // 11
get_drag_area_margin_begin :: (main: *SplitContainer) -> int { call_ret := cast(*int) sys_call("SplitContainer", "get_drag_area_margin_begin", 3905245786, int, main.p_object); return call_ret.*; }  // 12
set_drag_area_margin_end :: (main: *SplitContainer, margin: int) { sys_call("SplitContainer", "set_drag_area_margin_end", 1286410249, Nil, main.p_object, margin);  }  // 13
get_drag_area_margin_end :: (main: *SplitContainer) -> int { call_ret := cast(*int) sys_call("SplitContainer", "get_drag_area_margin_end", 3905245786, int, main.p_object); return call_ret.*; }  // 14
set_drag_area_offset :: (main: *SplitContainer, offset: int) { sys_call("SplitContainer", "set_drag_area_offset", 1286410249, Nil, main.p_object, offset);  }  // 15
get_drag_area_offset :: (main: *SplitContainer) -> int { call_ret := cast(*int) sys_call("SplitContainer", "get_drag_area_offset", 3905245786, int, main.p_object); return call_ret.*; }  // 16
set_drag_area_highlight_in_editor :: (main: *SplitContainer, drag_area_highlight_in_editor: bool) { sys_call("SplitContainer", "set_drag_area_highlight_in_editor", 2586408642, Nil, main.p_object, drag_area_highlight_in_editor);  }  // 17
is_drag_area_highlight_in_editor_enabled :: (main: *SplitContainer) -> bool { call_ret := cast(*bool) sys_call("SplitContainer", "is_drag_area_highlight_in_editor_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 18
get_drag_area_control :: (main: *SplitContainer) -> *Control { call_ret := cast(*Control) sys_call("SplitContainer", "get_drag_area_control", 829782337, Control, main.p_object); return call_ret; }  // 19


get_hit_length :: (main: *SpringArm3D) -> float { call_ret := cast(*float) sys_call("SpringArm3D", "get_hit_length", 191475506, float, main.p_object); return call_ret.*; }  // 0
set_length :: (main: *SpringArm3D, length: float) { sys_call("SpringArm3D", "set_length", 373806689, Nil, main.p_object, length);  }  // 1
get_length :: (main: *SpringArm3D) -> float { call_ret := cast(*float) sys_call("SpringArm3D", "get_length", 1740695150, float, main.p_object); return call_ret.*; }  // 2
set_shape :: (main: *SpringArm3D, shape: Shape3D) { sys_call("SpringArm3D", "set_shape", 1549710052, Nil, main.p_object, shape);  }  // 3
get_shape :: (main: *SpringArm3D) -> *Shape3D { call_ret := cast(*Shape3D) sys_call("SpringArm3D", "get_shape", 3214262478, Shape3D, main.p_object); return call_ret; }  // 4
add_excluded_object :: (main: *SpringArm3D, rid: RID) { sys_call("SpringArm3D", "add_excluded_object", 2722037293, Nil, main.p_object, rid);  }  // 5
remove_excluded_object :: (main: *SpringArm3D, rid: RID) -> bool { call_ret := cast(*bool) sys_call("SpringArm3D", "remove_excluded_object", 3521089500, bool, main.p_object, rid); return call_ret.*; }  // 6
clear_excluded_objects :: (main: *SpringArm3D) { sys_call("SpringArm3D", "clear_excluded_objects", 3218959716, Nil, main.p_object);  }  // 7
set_collision_mask :: (main: *SpringArm3D, mask: int) { sys_call("SpringArm3D", "set_collision_mask", 1286410249, Nil, main.p_object, mask);  }  // 8
get_collision_mask :: (main: *SpringArm3D) -> int { call_ret := cast(*int) sys_call("SpringArm3D", "get_collision_mask", 2455072627, int, main.p_object); return call_ret.*; }  // 9
set_margin :: (main: *SpringArm3D, margin: float) { sys_call("SpringArm3D", "set_margin", 373806689, Nil, main.p_object, margin);  }  // 10
get_margin :: (main: *SpringArm3D) -> float { call_ret := cast(*float) sys_call("SpringArm3D", "get_margin", 191475506, float, main.p_object); return call_ret.*; }  // 11

get_skeleton :: (main: *SpringBoneCollision3D) -> *Skeleton3D { call_ret := cast(*Skeleton3D) sys_call("SpringBoneCollision3D", "get_skeleton", 1488626673, Skeleton3D, main.p_object); return call_ret; }  // 0
set_bone_name :: (main: *SpringBoneCollision3D, bone_name: string) { sys_call("SpringBoneCollision3D", "set_bone_name", 83702148, Nil, main.p_object, bone_name);  }  // 1
get_bone_name :: (main: *SpringBoneCollision3D) -> gstring { call_ret := cast(*gstring) sys_call("SpringBoneCollision3D", "get_bone_name", 201670096, gstring, main.p_object); return call_ret.*; }  // 2
set_bone :: (main: *SpringBoneCollision3D, bone: int) { sys_call("SpringBoneCollision3D", "set_bone", 1286410249, Nil, main.p_object, bone);  }  // 3
get_bone :: (main: *SpringBoneCollision3D) -> int { call_ret := cast(*int) sys_call("SpringBoneCollision3D", "get_bone", 3905245786, int, main.p_object); return call_ret.*; }  // 4
set_position_offset :: (main: *SpringBoneCollision3D, offset: Vector3) { sys_call("SpringBoneCollision3D", "set_position_offset", 3460891852, Nil, main.p_object, offset);  }  // 5
get_position_offset :: (main: *SpringBoneCollision3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("SpringBoneCollision3D", "get_position_offset", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 6
set_rotation_offset :: (main: *SpringBoneCollision3D, offset: Quaternion) { sys_call("SpringBoneCollision3D", "set_rotation_offset", 1727505552, Nil, main.p_object, offset);  }  // 7
get_rotation_offset :: (main: *SpringBoneCollision3D) -> Quaternion { call_ret := cast(*Quaternion) sys_call("SpringBoneCollision3D", "get_rotation_offset", 1222331677, Quaternion, main.p_object); return call_ret.*; }  // 8

set_radius :: (main: *SpringBoneCollisionCapsule3D, radius: float) { sys_call("SpringBoneCollisionCapsule3D", "set_radius", 373806689, Nil, main.p_object, radius);  }  // 0
get_radius :: (main: *SpringBoneCollisionCapsule3D) -> float { call_ret := cast(*float) sys_call("SpringBoneCollisionCapsule3D", "get_radius", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_height :: (main: *SpringBoneCollisionCapsule3D, height: float) { sys_call("SpringBoneCollisionCapsule3D", "set_height", 373806689, Nil, main.p_object, height);  }  // 2
get_height :: (main: *SpringBoneCollisionCapsule3D) -> float { call_ret := cast(*float) sys_call("SpringBoneCollisionCapsule3D", "get_height", 1740695150, float, main.p_object); return call_ret.*; }  // 3
set_inside :: (main: *SpringBoneCollisionCapsule3D, enabled: bool) { sys_call("SpringBoneCollisionCapsule3D", "set_inside", 2586408642, Nil, main.p_object, enabled);  }  // 4
is_inside :: (main: *SpringBoneCollisionCapsule3D) -> bool { call_ret := cast(*bool) sys_call("SpringBoneCollisionCapsule3D", "is_inside", 36873697, bool, main.p_object); return call_ret.*; }  // 5


set_radius :: (main: *SpringBoneCollisionSphere3D, radius: float) { sys_call("SpringBoneCollisionSphere3D", "set_radius", 373806689, Nil, main.p_object, radius);  }  // 0
get_radius :: (main: *SpringBoneCollisionSphere3D) -> float { call_ret := cast(*float) sys_call("SpringBoneCollisionSphere3D", "get_radius", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_inside :: (main: *SpringBoneCollisionSphere3D, enabled: bool) { sys_call("SpringBoneCollisionSphere3D", "set_inside", 2586408642, Nil, main.p_object, enabled);  }  // 2
is_inside :: (main: *SpringBoneCollisionSphere3D) -> bool { call_ret := cast(*bool) sys_call("SpringBoneCollisionSphere3D", "is_inside", 36873697, bool, main.p_object); return call_ret.*; }  // 3

set_root_bone_name :: (main: *SpringBoneSimulator3D, index: int, bone_name: string) { sys_call("SpringBoneSimulator3D", "set_root_bone_name", 501894301, Nil, main.p_object, index, bone_name);  }  // 0
get_root_bone_name :: (main: *SpringBoneSimulator3D, index: int) -> gstring { call_ret := cast(*gstring) sys_call("SpringBoneSimulator3D", "get_root_bone_name", 844755477, gstring, main.p_object, index); return call_ret.*; }  // 1
set_root_bone :: (main: *SpringBoneSimulator3D, index: int, bone: int) { sys_call("SpringBoneSimulator3D", "set_root_bone", 3937882851, Nil, main.p_object, index, bone);  }  // 2
get_root_bone :: (main: *SpringBoneSimulator3D, index: int) -> int { call_ret := cast(*int) sys_call("SpringBoneSimulator3D", "get_root_bone", 923996154, int, main.p_object, index); return call_ret.*; }  // 3
set_end_bone_name :: (main: *SpringBoneSimulator3D, index: int, bone_name: string) { sys_call("SpringBoneSimulator3D", "set_end_bone_name", 501894301, Nil, main.p_object, index, bone_name);  }  // 4
get_end_bone_name :: (main: *SpringBoneSimulator3D, index: int) -> gstring { call_ret := cast(*gstring) sys_call("SpringBoneSimulator3D", "get_end_bone_name", 844755477, gstring, main.p_object, index); return call_ret.*; }  // 5
set_end_bone :: (main: *SpringBoneSimulator3D, index: int, bone: int) { sys_call("SpringBoneSimulator3D", "set_end_bone", 3937882851, Nil, main.p_object, index, bone);  }  // 6
get_end_bone :: (main: *SpringBoneSimulator3D, index: int) -> int { call_ret := cast(*int) sys_call("SpringBoneSimulator3D", "get_end_bone", 923996154, int, main.p_object, index); return call_ret.*; }  // 7
set_extend_end_bone :: (main: *SpringBoneSimulator3D, index: int, enabled: bool) { sys_call("SpringBoneSimulator3D", "set_extend_end_bone", 300928843, Nil, main.p_object, index, enabled);  }  // 8
is_end_bone_extended :: (main: *SpringBoneSimulator3D, index: int) -> bool { call_ret := cast(*bool) sys_call("SpringBoneSimulator3D", "is_end_bone_extended", 1116898809, bool, main.p_object, index); return call_ret.*; }  // 9
set_end_bone_direction :: (main: *SpringBoneSimulator3D, index: int, bone_direction: SpringBoneSimulator3D.BoneDirection) { sys_call("SpringBoneSimulator3D", "set_end_bone_direction", 204796492, Nil, main.p_object, index, bone_direction);  }  // 10
get_end_bone_direction :: (main: *SpringBoneSimulator3D, index: int) -> SpringBoneSimulator3D.BoneDirection { call_ret := cast(*SpringBoneSimulator3D.BoneDirection) sys_call("SpringBoneSimulator3D", "get_end_bone_direction", 2438315700, SpringBoneSimulator3D.BoneDirection, main.p_object, index); return call_ret.*; }  // 11
set_end_bone_length :: (main: *SpringBoneSimulator3D, index: int, length: float) { sys_call("SpringBoneSimulator3D", "set_end_bone_length", 1602489585, Nil, main.p_object, index, length);  }  // 12
get_end_bone_length :: (main: *SpringBoneSimulator3D, index: int) -> float { call_ret := cast(*float) sys_call("SpringBoneSimulator3D", "get_end_bone_length", 2339986948, float, main.p_object, index); return call_ret.*; }  // 13
set_center_from :: (main: *SpringBoneSimulator3D, index: int, center_from: SpringBoneSimulator3D.CenterFrom) { sys_call("SpringBoneSimulator3D", "set_center_from", 2551505749, Nil, main.p_object, index, center_from);  }  // 14
get_center_from :: (main: *SpringBoneSimulator3D, index: int) -> SpringBoneSimulator3D.CenterFrom { call_ret := cast(*SpringBoneSimulator3D.CenterFrom) sys_call("SpringBoneSimulator3D", "get_center_from", 2721930813, SpringBoneSimulator3D.CenterFrom, main.p_object, index); return call_ret.*; }  // 15
set_center_node :: (main: *SpringBoneSimulator3D, index: int, node_path: string) { sys_call("SpringBoneSimulator3D", "set_center_node", 2761262315, Nil, main.p_object, index, node_path);  }  // 16
get_center_node :: (main: *SpringBoneSimulator3D, index: int) -> NodePath { call_ret := cast(*NodePath) sys_call("SpringBoneSimulator3D", "get_center_node", 408788394, NodePath, main.p_object, index); return call_ret.*; }  // 17
set_center_bone_name :: (main: *SpringBoneSimulator3D, index: int, bone_name: string) { sys_call("SpringBoneSimulator3D", "set_center_bone_name", 501894301, Nil, main.p_object, index, bone_name);  }  // 18
get_center_bone_name :: (main: *SpringBoneSimulator3D, index: int) -> gstring { call_ret := cast(*gstring) sys_call("SpringBoneSimulator3D", "get_center_bone_name", 844755477, gstring, main.p_object, index); return call_ret.*; }  // 19
set_center_bone :: (main: *SpringBoneSimulator3D, index: int, bone: int) { sys_call("SpringBoneSimulator3D", "set_center_bone", 3937882851, Nil, main.p_object, index, bone);  }  // 20
get_center_bone :: (main: *SpringBoneSimulator3D, index: int) -> int { call_ret := cast(*int) sys_call("SpringBoneSimulator3D", "get_center_bone", 923996154, int, main.p_object, index); return call_ret.*; }  // 21
set_radius :: (main: *SpringBoneSimulator3D, index: int, radius: float) { sys_call("SpringBoneSimulator3D", "set_radius", 1602489585, Nil, main.p_object, index, radius);  }  // 22
get_radius :: (main: *SpringBoneSimulator3D, index: int) -> float { call_ret := cast(*float) sys_call("SpringBoneSimulator3D", "get_radius", 2339986948, float, main.p_object, index); return call_ret.*; }  // 23
set_rotation_axis :: (main: *SpringBoneSimulator3D, index: int, axis: SpringBoneSimulator3D.RotationAxis) { sys_call("SpringBoneSimulator3D", "set_rotation_axis", 3534169209, Nil, main.p_object, index, axis);  }  // 24
get_rotation_axis :: (main: *SpringBoneSimulator3D, index: int) -> SpringBoneSimulator3D.RotationAxis { call_ret := cast(*SpringBoneSimulator3D.RotationAxis) sys_call("SpringBoneSimulator3D", "get_rotation_axis", 748837671, SpringBoneSimulator3D.RotationAxis, main.p_object, index); return call_ret.*; }  // 25
set_radius_damping_curve :: (main: *SpringBoneSimulator3D, index: int, curve: Curve) { sys_call("SpringBoneSimulator3D", "set_radius_damping_curve", 1447180063, Nil, main.p_object, index, curve);  }  // 26
get_radius_damping_curve :: (main: *SpringBoneSimulator3D, index: int) -> *Curve { call_ret := cast(*Curve) sys_call("SpringBoneSimulator3D", "get_radius_damping_curve", 747537754, Curve, main.p_object, index); return call_ret; }  // 27
set_stiffness :: (main: *SpringBoneSimulator3D, index: int, stiffness: float) { sys_call("SpringBoneSimulator3D", "set_stiffness", 1602489585, Nil, main.p_object, index, stiffness);  }  // 28
get_stiffness :: (main: *SpringBoneSimulator3D, index: int) -> float { call_ret := cast(*float) sys_call("SpringBoneSimulator3D", "get_stiffness", 2339986948, float, main.p_object, index); return call_ret.*; }  // 29
set_stiffness_damping_curve :: (main: *SpringBoneSimulator3D, index: int, curve: Curve) { sys_call("SpringBoneSimulator3D", "set_stiffness_damping_curve", 1447180063, Nil, main.p_object, index, curve);  }  // 30
get_stiffness_damping_curve :: (main: *SpringBoneSimulator3D, index: int) -> *Curve { call_ret := cast(*Curve) sys_call("SpringBoneSimulator3D", "get_stiffness_damping_curve", 747537754, Curve, main.p_object, index); return call_ret; }  // 31
set_drag :: (main: *SpringBoneSimulator3D, index: int, drag: float) { sys_call("SpringBoneSimulator3D", "set_drag", 1602489585, Nil, main.p_object, index, drag);  }  // 32
get_drag :: (main: *SpringBoneSimulator3D, index: int) -> float { call_ret := cast(*float) sys_call("SpringBoneSimulator3D", "get_drag", 2339986948, float, main.p_object, index); return call_ret.*; }  // 33
set_drag_damping_curve :: (main: *SpringBoneSimulator3D, index: int, curve: Curve) { sys_call("SpringBoneSimulator3D", "set_drag_damping_curve", 1447180063, Nil, main.p_object, index, curve);  }  // 34
get_drag_damping_curve :: (main: *SpringBoneSimulator3D, index: int) -> *Curve { call_ret := cast(*Curve) sys_call("SpringBoneSimulator3D", "get_drag_damping_curve", 747537754, Curve, main.p_object, index); return call_ret; }  // 35
set_gravity :: (main: *SpringBoneSimulator3D, index: int, gravity: float) { sys_call("SpringBoneSimulator3D", "set_gravity", 1602489585, Nil, main.p_object, index, gravity);  }  // 36
get_gravity :: (main: *SpringBoneSimulator3D, index: int) -> float { call_ret := cast(*float) sys_call("SpringBoneSimulator3D", "get_gravity", 2339986948, float, main.p_object, index); return call_ret.*; }  // 37
set_gravity_damping_curve :: (main: *SpringBoneSimulator3D, index: int, curve: Curve) { sys_call("SpringBoneSimulator3D", "set_gravity_damping_curve", 1447180063, Nil, main.p_object, index, curve);  }  // 38
get_gravity_damping_curve :: (main: *SpringBoneSimulator3D, index: int) -> *Curve { call_ret := cast(*Curve) sys_call("SpringBoneSimulator3D", "get_gravity_damping_curve", 747537754, Curve, main.p_object, index); return call_ret; }  // 39
set_gravity_direction :: (main: *SpringBoneSimulator3D, index: int, gravity_direction: Vector3) { sys_call("SpringBoneSimulator3D", "set_gravity_direction", 1530502735, Nil, main.p_object, index, gravity_direction);  }  // 40
get_gravity_direction :: (main: *SpringBoneSimulator3D, index: int) -> Vector3 { call_ret := cast(*Vector3) sys_call("SpringBoneSimulator3D", "get_gravity_direction", 711720468, Vector3, main.p_object, index); return call_ret.*; }  // 41
set_setting_count :: (main: *SpringBoneSimulator3D, count: int) { sys_call("SpringBoneSimulator3D", "set_setting_count", 1286410249, Nil, main.p_object, count);  }  // 42
get_setting_count :: (main: *SpringBoneSimulator3D) -> int { call_ret := cast(*int) sys_call("SpringBoneSimulator3D", "get_setting_count", 3905245786, int, main.p_object); return call_ret.*; }  // 43
clear_settings :: (main: *SpringBoneSimulator3D) { sys_call("SpringBoneSimulator3D", "clear_settings", 3218959716, Nil, main.p_object);  }  // 44
set_individual_config :: (main: *SpringBoneSimulator3D, index: int, enabled: bool) { sys_call("SpringBoneSimulator3D", "set_individual_config", 300928843, Nil, main.p_object, index, enabled);  }  // 45
is_config_individual :: (main: *SpringBoneSimulator3D, index: int) -> bool { call_ret := cast(*bool) sys_call("SpringBoneSimulator3D", "is_config_individual", 1116898809, bool, main.p_object, index); return call_ret.*; }  // 46
get_joint_bone_name :: (main: *SpringBoneSimulator3D, index: int, joint: int) -> gstring { call_ret := cast(*gstring) sys_call("SpringBoneSimulator3D", "get_joint_bone_name", 1391810591, gstring, main.p_object, index, joint); return call_ret.*; }  // 47
get_joint_bone :: (main: *SpringBoneSimulator3D, index: int, joint: int) -> int { call_ret := cast(*int) sys_call("SpringBoneSimulator3D", "get_joint_bone", 3175239445, int, main.p_object, index, joint); return call_ret.*; }  // 48
set_joint_rotation_axis :: (main: *SpringBoneSimulator3D, index: int, joint: int, axis: SpringBoneSimulator3D.RotationAxis) { sys_call("SpringBoneSimulator3D", "set_joint_rotation_axis", 4224018032, Nil, main.p_object, index, joint, axis);  }  // 49
get_joint_rotation_axis :: (main: *SpringBoneSimulator3D, index: int, joint: int) -> SpringBoneSimulator3D.RotationAxis { call_ret := cast(*SpringBoneSimulator3D.RotationAxis) sys_call("SpringBoneSimulator3D", "get_joint_rotation_axis", 2488679199, SpringBoneSimulator3D.RotationAxis, main.p_object, index, joint); return call_ret.*; }  // 50
set_joint_radius :: (main: *SpringBoneSimulator3D, index: int, joint: int, radius: float) { sys_call("SpringBoneSimulator3D", "set_joint_radius", 3506521499, Nil, main.p_object, index, joint, radius);  }  // 51
get_joint_radius :: (main: *SpringBoneSimulator3D, index: int, joint: int) -> float { call_ret := cast(*float) sys_call("SpringBoneSimulator3D", "get_joint_radius", 3085491603, float, main.p_object, index, joint); return call_ret.*; }  // 52
set_joint_stiffness :: (main: *SpringBoneSimulator3D, index: int, joint: int, stiffness: float) { sys_call("SpringBoneSimulator3D", "set_joint_stiffness", 3506521499, Nil, main.p_object, index, joint, stiffness);  }  // 53
get_joint_stiffness :: (main: *SpringBoneSimulator3D, index: int, joint: int) -> float { call_ret := cast(*float) sys_call("SpringBoneSimulator3D", "get_joint_stiffness", 3085491603, float, main.p_object, index, joint); return call_ret.*; }  // 54
set_joint_drag :: (main: *SpringBoneSimulator3D, index: int, joint: int, drag: float) { sys_call("SpringBoneSimulator3D", "set_joint_drag", 3506521499, Nil, main.p_object, index, joint, drag);  }  // 55
get_joint_drag :: (main: *SpringBoneSimulator3D, index: int, joint: int) -> float { call_ret := cast(*float) sys_call("SpringBoneSimulator3D", "get_joint_drag", 3085491603, float, main.p_object, index, joint); return call_ret.*; }  // 56
set_joint_gravity :: (main: *SpringBoneSimulator3D, index: int, joint: int, gravity: float) { sys_call("SpringBoneSimulator3D", "set_joint_gravity", 3506521499, Nil, main.p_object, index, joint, gravity);  }  // 57
get_joint_gravity :: (main: *SpringBoneSimulator3D, index: int, joint: int) -> float { call_ret := cast(*float) sys_call("SpringBoneSimulator3D", "get_joint_gravity", 3085491603, float, main.p_object, index, joint); return call_ret.*; }  // 58
set_joint_gravity_direction :: (main: *SpringBoneSimulator3D, index: int, joint: int, gravity_direction: Vector3) { sys_call("SpringBoneSimulator3D", "set_joint_gravity_direction", 2866752138, Nil, main.p_object, index, joint, gravity_direction);  }  // 59
get_joint_gravity_direction :: (main: *SpringBoneSimulator3D, index: int, joint: int) -> Vector3 { call_ret := cast(*Vector3) sys_call("SpringBoneSimulator3D", "get_joint_gravity_direction", 1592972041, Vector3, main.p_object, index, joint); return call_ret.*; }  // 60
get_joint_count :: (main: *SpringBoneSimulator3D, index: int) -> int { call_ret := cast(*int) sys_call("SpringBoneSimulator3D", "get_joint_count", 923996154, int, main.p_object, index); return call_ret.*; }  // 61
set_enable_all_child_collisions :: (main: *SpringBoneSimulator3D, index: int, enabled: bool) { sys_call("SpringBoneSimulator3D", "set_enable_all_child_collisions", 300928843, Nil, main.p_object, index, enabled);  }  // 62
are_all_child_collisions_enabled :: (main: *SpringBoneSimulator3D, index: int) -> bool { call_ret := cast(*bool) sys_call("SpringBoneSimulator3D", "are_all_child_collisions_enabled", 1116898809, bool, main.p_object, index); return call_ret.*; }  // 63
set_exclude_collision_path :: (main: *SpringBoneSimulator3D, index: int, collision: int, node_path: string) { sys_call("SpringBoneSimulator3D", "set_exclude_collision_path", 132481804, Nil, main.p_object, index, collision, node_path);  }  // 64
get_exclude_collision_path :: (main: *SpringBoneSimulator3D, index: int, collision: int) -> NodePath { call_ret := cast(*NodePath) sys_call("SpringBoneSimulator3D", "get_exclude_collision_path", 464924783, NodePath, main.p_object, index, collision); return call_ret.*; }  // 65
set_exclude_collision_count :: (main: *SpringBoneSimulator3D, index: int, count: int) { sys_call("SpringBoneSimulator3D", "set_exclude_collision_count", 3937882851, Nil, main.p_object, index, count);  }  // 66
get_exclude_collision_count :: (main: *SpringBoneSimulator3D, index: int) -> int { call_ret := cast(*int) sys_call("SpringBoneSimulator3D", "get_exclude_collision_count", 923996154, int, main.p_object, index); return call_ret.*; }  // 67
clear_exclude_collisions :: (main: *SpringBoneSimulator3D, index: int) { sys_call("SpringBoneSimulator3D", "clear_exclude_collisions", 1286410249, Nil, main.p_object, index);  }  // 68
set_collision_path :: (main: *SpringBoneSimulator3D, index: int, collision: int, node_path: string) { sys_call("SpringBoneSimulator3D", "set_collision_path", 132481804, Nil, main.p_object, index, collision, node_path);  }  // 69
get_collision_path :: (main: *SpringBoneSimulator3D, index: int, collision: int) -> NodePath { call_ret := cast(*NodePath) sys_call("SpringBoneSimulator3D", "get_collision_path", 464924783, NodePath, main.p_object, index, collision); return call_ret.*; }  // 70
set_collision_count :: (main: *SpringBoneSimulator3D, index: int, count: int) { sys_call("SpringBoneSimulator3D", "set_collision_count", 3937882851, Nil, main.p_object, index, count);  }  // 71
get_collision_count :: (main: *SpringBoneSimulator3D, index: int) -> int { call_ret := cast(*int) sys_call("SpringBoneSimulator3D", "get_collision_count", 923996154, int, main.p_object, index); return call_ret.*; }  // 72
clear_collisions :: (main: *SpringBoneSimulator3D, index: int) { sys_call("SpringBoneSimulator3D", "clear_collisions", 1286410249, Nil, main.p_object, index);  }  // 73
reset :: (main: *SpringBoneSimulator3D) { sys_call("SpringBoneSimulator3D", "reset", 3218959716, Nil, main.p_object);  }  // 74

set_texture :: (main: *Sprite2D, texture: Texture2D) { sys_call("Sprite2D", "set_texture", 4051416890, Nil, main.p_object, texture);  }  // 0
get_texture :: (main: *Sprite2D) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("Sprite2D", "get_texture", 3635182373, Texture2D, main.p_object); return call_ret; }  // 1
set_centered :: (main: *Sprite2D, centered: bool) { sys_call("Sprite2D", "set_centered", 2586408642, Nil, main.p_object, centered);  }  // 2
is_centered :: (main: *Sprite2D) -> bool { call_ret := cast(*bool) sys_call("Sprite2D", "is_centered", 36873697, bool, main.p_object); return call_ret.*; }  // 3
set_offset :: (main: *Sprite2D, offset: Vector2) { sys_call("Sprite2D", "set_offset", 743155724, Nil, main.p_object, offset);  }  // 4
get_offset :: (main: *Sprite2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("Sprite2D", "get_offset", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 5
set_flip_h :: (main: *Sprite2D, flip_h: bool) { sys_call("Sprite2D", "set_flip_h", 2586408642, Nil, main.p_object, flip_h);  }  // 6
is_flipped_h :: (main: *Sprite2D) -> bool { call_ret := cast(*bool) sys_call("Sprite2D", "is_flipped_h", 36873697, bool, main.p_object); return call_ret.*; }  // 7
set_flip_v :: (main: *Sprite2D, flip_v: bool) { sys_call("Sprite2D", "set_flip_v", 2586408642, Nil, main.p_object, flip_v);  }  // 8
is_flipped_v :: (main: *Sprite2D) -> bool { call_ret := cast(*bool) sys_call("Sprite2D", "is_flipped_v", 36873697, bool, main.p_object); return call_ret.*; }  // 9
set_region_enabled :: (main: *Sprite2D, enabled: bool) { sys_call("Sprite2D", "set_region_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 10
is_region_enabled :: (main: *Sprite2D) -> bool { call_ret := cast(*bool) sys_call("Sprite2D", "is_region_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 11
is_pixel_opaque :: (main: *Sprite2D, pos: Vector2) -> bool { call_ret := cast(*bool) sys_call("Sprite2D", "is_pixel_opaque", 556197845, bool, main.p_object, pos); return call_ret.*; }  // 12
set_region_rect :: (main: *Sprite2D, rect: Rect2) { sys_call("Sprite2D", "set_region_rect", 2046264180, Nil, main.p_object, rect);  }  // 13
get_region_rect :: (main: *Sprite2D) -> Rect2 { call_ret := cast(*Rect2) sys_call("Sprite2D", "get_region_rect", 1639390495, Rect2, main.p_object); return call_ret.*; }  // 14
set_region_filter_clip_enabled :: (main: *Sprite2D, enabled: bool) { sys_call("Sprite2D", "set_region_filter_clip_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 15
is_region_filter_clip_enabled :: (main: *Sprite2D) -> bool { call_ret := cast(*bool) sys_call("Sprite2D", "is_region_filter_clip_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 16
set_frame :: (main: *Sprite2D, frame: int) { sys_call("Sprite2D", "set_frame", 1286410249, Nil, main.p_object, frame);  }  // 17
get_frame :: (main: *Sprite2D) -> int { call_ret := cast(*int) sys_call("Sprite2D", "get_frame", 3905245786, int, main.p_object); return call_ret.*; }  // 18
set_frame_coords :: (main: *Sprite2D, coords: Vector2i) { sys_call("Sprite2D", "set_frame_coords", 1130785943, Nil, main.p_object, coords);  }  // 19
get_frame_coords :: (main: *Sprite2D) -> Vector2i { call_ret := cast(*Vector2i) sys_call("Sprite2D", "get_frame_coords", 3690982128, Vector2i, main.p_object); return call_ret.*; }  // 20
set_vframes :: (main: *Sprite2D, vframes: int) { sys_call("Sprite2D", "set_vframes", 1286410249, Nil, main.p_object, vframes);  }  // 21
get_vframes :: (main: *Sprite2D) -> int { call_ret := cast(*int) sys_call("Sprite2D", "get_vframes", 3905245786, int, main.p_object); return call_ret.*; }  // 22
set_hframes :: (main: *Sprite2D, hframes: int) { sys_call("Sprite2D", "set_hframes", 1286410249, Nil, main.p_object, hframes);  }  // 23
get_hframes :: (main: *Sprite2D) -> int { call_ret := cast(*int) sys_call("Sprite2D", "get_hframes", 3905245786, int, main.p_object); return call_ret.*; }  // 24
get_rect :: (main: *Sprite2D) -> Rect2 { call_ret := cast(*Rect2) sys_call("Sprite2D", "get_rect", 1639390495, Rect2, main.p_object); return call_ret.*; }  // 25

set_texture :: (main: *Sprite3D, texture: Texture2D) { sys_call("Sprite3D", "set_texture", 4051416890, Nil, main.p_object, texture);  }  // 0
get_texture :: (main: *Sprite3D) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("Sprite3D", "get_texture", 3635182373, Texture2D, main.p_object); return call_ret; }  // 1
set_region_enabled :: (main: *Sprite3D, enabled: bool) { sys_call("Sprite3D", "set_region_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 2
is_region_enabled :: (main: *Sprite3D) -> bool { call_ret := cast(*bool) sys_call("Sprite3D", "is_region_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 3
set_region_rect :: (main: *Sprite3D, rect: Rect2) { sys_call("Sprite3D", "set_region_rect", 2046264180, Nil, main.p_object, rect);  }  // 4
get_region_rect :: (main: *Sprite3D) -> Rect2 { call_ret := cast(*Rect2) sys_call("Sprite3D", "get_region_rect", 1639390495, Rect2, main.p_object); return call_ret.*; }  // 5
set_frame :: (main: *Sprite3D, frame: int) { sys_call("Sprite3D", "set_frame", 1286410249, Nil, main.p_object, frame);  }  // 6
get_frame :: (main: *Sprite3D) -> int { call_ret := cast(*int) sys_call("Sprite3D", "get_frame", 3905245786, int, main.p_object); return call_ret.*; }  // 7
set_frame_coords :: (main: *Sprite3D, coords: Vector2i) { sys_call("Sprite3D", "set_frame_coords", 1130785943, Nil, main.p_object, coords);  }  // 8
get_frame_coords :: (main: *Sprite3D) -> Vector2i { call_ret := cast(*Vector2i) sys_call("Sprite3D", "get_frame_coords", 3690982128, Vector2i, main.p_object); return call_ret.*; }  // 9
set_vframes :: (main: *Sprite3D, vframes: int) { sys_call("Sprite3D", "set_vframes", 1286410249, Nil, main.p_object, vframes);  }  // 10
get_vframes :: (main: *Sprite3D) -> int { call_ret := cast(*int) sys_call("Sprite3D", "get_vframes", 3905245786, int, main.p_object); return call_ret.*; }  // 11
set_hframes :: (main: *Sprite3D, hframes: int) { sys_call("Sprite3D", "set_hframes", 1286410249, Nil, main.p_object, hframes);  }  // 12
get_hframes :: (main: *Sprite3D) -> int { call_ret := cast(*int) sys_call("Sprite3D", "get_hframes", 3905245786, int, main.p_object); return call_ret.*; }  // 13

set_centered :: (main: *SpriteBase3D, centered: bool) { sys_call("SpriteBase3D", "set_centered", 2586408642, Nil, main.p_object, centered);  }  // 0
is_centered :: (main: *SpriteBase3D) -> bool { call_ret := cast(*bool) sys_call("SpriteBase3D", "is_centered", 36873697, bool, main.p_object); return call_ret.*; }  // 1
set_offset :: (main: *SpriteBase3D, offset: Vector2) { sys_call("SpriteBase3D", "set_offset", 743155724, Nil, main.p_object, offset);  }  // 2
get_offset :: (main: *SpriteBase3D) -> Vector2 { call_ret := cast(*Vector2) sys_call("SpriteBase3D", "get_offset", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 3
set_flip_h :: (main: *SpriteBase3D, flip_h: bool) { sys_call("SpriteBase3D", "set_flip_h", 2586408642, Nil, main.p_object, flip_h);  }  // 4
is_flipped_h :: (main: *SpriteBase3D) -> bool { call_ret := cast(*bool) sys_call("SpriteBase3D", "is_flipped_h", 36873697, bool, main.p_object); return call_ret.*; }  // 5
set_flip_v :: (main: *SpriteBase3D, flip_v: bool) { sys_call("SpriteBase3D", "set_flip_v", 2586408642, Nil, main.p_object, flip_v);  }  // 6
is_flipped_v :: (main: *SpriteBase3D) -> bool { call_ret := cast(*bool) sys_call("SpriteBase3D", "is_flipped_v", 36873697, bool, main.p_object); return call_ret.*; }  // 7
set_modulate :: (main: *SpriteBase3D, modulate: Color) { sys_call("SpriteBase3D", "set_modulate", 2920490490, Nil, main.p_object, modulate);  }  // 8
get_modulate :: (main: *SpriteBase3D) -> Color { call_ret := cast(*Color) sys_call("SpriteBase3D", "get_modulate", 3444240500, Color, main.p_object); return call_ret.*; }  // 9
set_render_priority :: (main: *SpriteBase3D, priority: int) { sys_call("SpriteBase3D", "set_render_priority", 1286410249, Nil, main.p_object, priority);  }  // 10
get_render_priority :: (main: *SpriteBase3D) -> int { call_ret := cast(*int) sys_call("SpriteBase3D", "get_render_priority", 3905245786, int, main.p_object); return call_ret.*; }  // 11
set_pixel_size :: (main: *SpriteBase3D, pixel_size: float) { sys_call("SpriteBase3D", "set_pixel_size", 373806689, Nil, main.p_object, pixel_size);  }  // 12
get_pixel_size :: (main: *SpriteBase3D) -> float { call_ret := cast(*float) sys_call("SpriteBase3D", "get_pixel_size", 1740695150, float, main.p_object); return call_ret.*; }  // 13
set_axis :: (main: *SpriteBase3D, axis: Vector3_Axis) { sys_call("SpriteBase3D", "set_axis", 1144690656, Nil, main.p_object, axis);  }  // 14
get_axis :: (main: *SpriteBase3D) -> Vector3_Axis { call_ret := cast(*Vector3_Axis) sys_call("SpriteBase3D", "get_axis", 3050976882, Vector3_Axis, main.p_object); return call_ret.*; }  // 15
set_draw_flag :: (main: *SpriteBase3D, flag: SpriteBase3D.DrawFlags, enabled: bool) { sys_call("SpriteBase3D", "set_draw_flag", 1135633219, Nil, main.p_object, flag, enabled);  }  // 16
get_draw_flag :: (main: *SpriteBase3D, flag: SpriteBase3D.DrawFlags) -> bool { call_ret := cast(*bool) sys_call("SpriteBase3D", "get_draw_flag", 1733036628, bool, main.p_object, flag); return call_ret.*; }  // 17
set_alpha_cut_mode :: (main: *SpriteBase3D, mode: SpriteBase3D.AlphaCutMode) { sys_call("SpriteBase3D", "set_alpha_cut_mode", 227561226, Nil, main.p_object, mode);  }  // 18
get_alpha_cut_mode :: (main: *SpriteBase3D) -> SpriteBase3D.AlphaCutMode { call_ret := cast(*SpriteBase3D.AlphaCutMode) sys_call("SpriteBase3D", "get_alpha_cut_mode", 336003791, SpriteBase3D.AlphaCutMode, main.p_object); return call_ret.*; }  // 19
set_alpha_scissor_threshold :: (main: *SpriteBase3D, threshold: float) { sys_call("SpriteBase3D", "set_alpha_scissor_threshold", 373806689, Nil, main.p_object, threshold);  }  // 20
get_alpha_scissor_threshold :: (main: *SpriteBase3D) -> float { call_ret := cast(*float) sys_call("SpriteBase3D", "get_alpha_scissor_threshold", 1740695150, float, main.p_object); return call_ret.*; }  // 21
set_alpha_hash_scale :: (main: *SpriteBase3D, threshold: float) { sys_call("SpriteBase3D", "set_alpha_hash_scale", 373806689, Nil, main.p_object, threshold);  }  // 22
get_alpha_hash_scale :: (main: *SpriteBase3D) -> float { call_ret := cast(*float) sys_call("SpriteBase3D", "get_alpha_hash_scale", 1740695150, float, main.p_object); return call_ret.*; }  // 23
set_alpha_antialiasing :: (main: *SpriteBase3D, alpha_aa: BaseMaterial3D.AlphaAntiAliasing) { sys_call("SpriteBase3D", "set_alpha_antialiasing", 3212649852, Nil, main.p_object, alpha_aa);  }  // 24
get_alpha_antialiasing :: (main: *SpriteBase3D) -> BaseMaterial3D.AlphaAntiAliasing { call_ret := cast(*BaseMaterial3D.AlphaAntiAliasing) sys_call("SpriteBase3D", "get_alpha_antialiasing", 2889939400, BaseMaterial3D.AlphaAntiAliasing, main.p_object); return call_ret.*; }  // 25
set_alpha_antialiasing_edge :: (main: *SpriteBase3D, edge: float) { sys_call("SpriteBase3D", "set_alpha_antialiasing_edge", 373806689, Nil, main.p_object, edge);  }  // 26
get_alpha_antialiasing_edge :: (main: *SpriteBase3D) -> float { call_ret := cast(*float) sys_call("SpriteBase3D", "get_alpha_antialiasing_edge", 1740695150, float, main.p_object); return call_ret.*; }  // 27
set_billboard_mode :: (main: *SpriteBase3D, mode: BaseMaterial3D.BillboardMode) { sys_call("SpriteBase3D", "set_billboard_mode", 4202036497, Nil, main.p_object, mode);  }  // 28
get_billboard_mode :: (main: *SpriteBase3D) -> BaseMaterial3D.BillboardMode { call_ret := cast(*BaseMaterial3D.BillboardMode) sys_call("SpriteBase3D", "get_billboard_mode", 1283840139, BaseMaterial3D.BillboardMode, main.p_object); return call_ret.*; }  // 29
set_texture_filter :: (main: *SpriteBase3D, mode: BaseMaterial3D.TextureFilter) { sys_call("SpriteBase3D", "set_texture_filter", 22904437, Nil, main.p_object, mode);  }  // 30
get_texture_filter :: (main: *SpriteBase3D) -> BaseMaterial3D.TextureFilter { call_ret := cast(*BaseMaterial3D.TextureFilter) sys_call("SpriteBase3D", "get_texture_filter", 3289213076, BaseMaterial3D.TextureFilter, main.p_object); return call_ret.*; }  // 31
get_item_rect :: (main: *SpriteBase3D) -> Rect2 { call_ret := cast(*Rect2) sys_call("SpriteBase3D", "get_item_rect", 1639390495, Rect2, main.p_object); return call_ret.*; }  // 32
generate_triangle_mesh :: (main: *SpriteBase3D) -> *TriangleMesh { call_ret := cast(*TriangleMesh) sys_call("SpriteBase3D", "generate_triangle_mesh", 3476533166, TriangleMesh, main.p_object); return call_ret; }  // 33

add_animation :: (main: *SpriteFrames, anim: string) { sys_call("SpriteFrames", "add_animation", 3304788590, Nil, main.p_object, anim);  }  // 0
has_animation :: (main: *SpriteFrames, anim: string) -> bool { call_ret := cast(*bool) sys_call("SpriteFrames", "has_animation", 2619796661, bool, main.p_object, anim); return call_ret.*; }  // 1
duplicate_animation :: (main: *SpriteFrames, anim_from: string, anim_to: string) { sys_call("SpriteFrames", "duplicate_animation", 3740211285, Nil, main.p_object, anim_from, anim_to);  }  // 2
remove_animation :: (main: *SpriteFrames, anim: string) { sys_call("SpriteFrames", "remove_animation", 3304788590, Nil, main.p_object, anim);  }  // 3
rename_animation :: (main: *SpriteFrames, anim: string, newname: string) { sys_call("SpriteFrames", "rename_animation", 3740211285, Nil, main.p_object, anim, newname);  }  // 4
get_animation_names :: (main: *SpriteFrames) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("SpriteFrames", "get_animation_names", 1139954409, PackedStringArray, main.p_object); return call_ret.*; }  // 5
set_animation_speed :: (main: *SpriteFrames, anim: string, fps: float) { sys_call("SpriteFrames", "set_animation_speed", 4135858297, Nil, main.p_object, anim, fps);  }  // 6
get_animation_speed :: (main: *SpriteFrames, anim: string) -> float { call_ret := cast(*float) sys_call("SpriteFrames", "get_animation_speed", 2349060816, float, main.p_object, anim); return call_ret.*; }  // 7
set_animation_loop :: (main: *SpriteFrames, anim: string, loop: bool) { sys_call("SpriteFrames", "set_animation_loop", 2524380260, Nil, main.p_object, anim, loop);  }  // 8
get_animation_loop :: (main: *SpriteFrames, anim: string) -> bool { call_ret := cast(*bool) sys_call("SpriteFrames", "get_animation_loop", 2619796661, bool, main.p_object, anim); return call_ret.*; }  // 9
add_frame :: (main: *SpriteFrames, anim: string, texture: Texture2D) { sys_call("SpriteFrames", "add_frame", 1351332740, Nil, main.p_object, anim, texture);  }  // 10
set_frame :: (main: *SpriteFrames, anim: string, idx: int, texture: Texture2D) { sys_call("SpriteFrames", "set_frame", 56804795, Nil, main.p_object, anim, idx, texture);  }  // 11
remove_frame :: (main: *SpriteFrames, anim: string, idx: int) { sys_call("SpriteFrames", "remove_frame", 2415702435, Nil, main.p_object, anim, idx);  }  // 12
get_frame_count :: (main: *SpriteFrames, anim: string) -> int { call_ret := cast(*int) sys_call("SpriteFrames", "get_frame_count", 2458036349, int, main.p_object, anim); return call_ret.*; }  // 13
get_frame_texture :: (main: *SpriteFrames, anim: string, idx: int) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("SpriteFrames", "get_frame_texture", 2900517879, Texture2D, main.p_object, anim, idx); return call_ret; }  // 14
get_frame_duration :: (main: *SpriteFrames, anim: string, idx: int) -> float { call_ret := cast(*float) sys_call("SpriteFrames", "get_frame_duration", 1129309260, float, main.p_object, anim, idx); return call_ret.*; }  // 15
clear :: (main: *SpriteFrames, anim: string) { sys_call("SpriteFrames", "clear", 3304788590, Nil, main.p_object, anim);  }  // 16
clear_all :: (main: *SpriteFrames) { sys_call("SpriteFrames", "clear_all", 3218959716, Nil, main.p_object);  }  // 17


set_constant_linear_velocity :: (main: *StaticBody2D, vel: Vector2) { sys_call("StaticBody2D", "set_constant_linear_velocity", 743155724, Nil, main.p_object, vel);  }  // 0
set_constant_angular_velocity :: (main: *StaticBody2D, vel: float) { sys_call("StaticBody2D", "set_constant_angular_velocity", 373806689, Nil, main.p_object, vel);  }  // 1
get_constant_linear_velocity :: (main: *StaticBody2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("StaticBody2D", "get_constant_linear_velocity", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 2
get_constant_angular_velocity :: (main: *StaticBody2D) -> float { call_ret := cast(*float) sys_call("StaticBody2D", "get_constant_angular_velocity", 1740695150, float, main.p_object); return call_ret.*; }  // 3
set_physics_material_override :: (main: *StaticBody2D, physics_material_override: PhysicsMaterial) { sys_call("StaticBody2D", "set_physics_material_override", 1784508650, Nil, main.p_object, physics_material_override);  }  // 4
get_physics_material_override :: (main: *StaticBody2D) -> *PhysicsMaterial { call_ret := cast(*PhysicsMaterial) sys_call("StaticBody2D", "get_physics_material_override", 2521850424, PhysicsMaterial, main.p_object); return call_ret; }  // 5

set_constant_linear_velocity :: (main: *StaticBody3D, vel: Vector3) { sys_call("StaticBody3D", "set_constant_linear_velocity", 3460891852, Nil, main.p_object, vel);  }  // 0
set_constant_angular_velocity :: (main: *StaticBody3D, vel: Vector3) { sys_call("StaticBody3D", "set_constant_angular_velocity", 3460891852, Nil, main.p_object, vel);  }  // 1
get_constant_linear_velocity :: (main: *StaticBody3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("StaticBody3D", "get_constant_linear_velocity", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 2
get_constant_angular_velocity :: (main: *StaticBody3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("StaticBody3D", "get_constant_angular_velocity", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 3
set_physics_material_override :: (main: *StaticBody3D, physics_material_override: PhysicsMaterial) { sys_call("StaticBody3D", "set_physics_material_override", 1784508650, Nil, main.p_object, physics_material_override);  }  // 4
get_physics_material_override :: (main: *StaticBody3D) -> *PhysicsMaterial { call_ret := cast(*PhysicsMaterial) sys_call("StaticBody3D", "get_physics_material_override", 2521850424, PhysicsMaterial, main.p_object); return call_ret; }  // 5

set_tooltip :: (main: *StatusIndicator, tooltip: string) { sys_call("StatusIndicator", "set_tooltip", 83702148, Nil, main.p_object, tooltip);  }  // 0
get_tooltip :: (main: *StatusIndicator) -> gstring { call_ret := cast(*gstring) sys_call("StatusIndicator", "get_tooltip", 201670096, gstring, main.p_object); return call_ret.*; }  // 1
set_icon :: (main: *StatusIndicator, texture: Texture2D) { sys_call("StatusIndicator", "set_icon", 4051416890, Nil, main.p_object, texture);  }  // 2
get_icon :: (main: *StatusIndicator) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("StatusIndicator", "get_icon", 3635182373, Texture2D, main.p_object); return call_ret; }  // 3
set_visible :: (main: *StatusIndicator, visible: bool) { sys_call("StatusIndicator", "set_visible", 2586408642, Nil, main.p_object, visible);  }  // 4
is_visible :: (main: *StatusIndicator) -> bool { call_ret := cast(*bool) sys_call("StatusIndicator", "is_visible", 36873697, bool, main.p_object); return call_ret.*; }  // 5
set_menu :: (main: *StatusIndicator, menu: string) { sys_call("StatusIndicator", "set_menu", 1348162250, Nil, main.p_object, menu);  }  // 6
get_menu :: (main: *StatusIndicator) -> NodePath { call_ret := cast(*NodePath) sys_call("StatusIndicator", "get_menu", 4075236667, NodePath, main.p_object); return call_ret.*; }  // 7
get_rect :: (main: *StatusIndicator) -> Rect2 { call_ret := cast(*Rect2) sys_call("StatusIndicator", "get_rect", 1639390495, Rect2, main.p_object); return call_ret.*; }  // 8

put_data :: (main: *StreamPeer, data: PackedByteArray) -> Error { call_ret := cast(*Error) sys_call("StreamPeer", "put_data", 680677267, Error, main.p_object, data); return call_ret.*; }  // 0
put_partial_data :: (main: *StreamPeer, data: PackedByteArray) -> Array { call_ret := cast(*Array) sys_call("StreamPeer", "put_partial_data", 2934048347, Array, main.p_object, data); return call_ret.*; }  // 1
get_data :: (main: *StreamPeer, bytes: int) -> Array { call_ret := cast(*Array) sys_call("StreamPeer", "get_data", 1171824711, Array, main.p_object, bytes); return call_ret.*; }  // 2
get_partial_data :: (main: *StreamPeer, bytes: int) -> Array { call_ret := cast(*Array) sys_call("StreamPeer", "get_partial_data", 1171824711, Array, main.p_object, bytes); return call_ret.*; }  // 3
get_available_bytes :: (main: *StreamPeer) -> int { call_ret := cast(*int) sys_call("StreamPeer", "get_available_bytes", 3905245786, int, main.p_object); return call_ret.*; }  // 4
set_big_endian :: (main: *StreamPeer, enable: bool) { sys_call("StreamPeer", "set_big_endian", 2586408642, Nil, main.p_object, enable);  }  // 5
is_big_endian_enabled :: (main: *StreamPeer) -> bool { call_ret := cast(*bool) sys_call("StreamPeer", "is_big_endian_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 6
put_8 :: (main: *StreamPeer, value: int) { sys_call("StreamPeer", "put_8", 1286410249, Nil, main.p_object, value);  }  // 7
put_u8 :: (main: *StreamPeer, value: int) { sys_call("StreamPeer", "put_u8", 1286410249, Nil, main.p_object, value);  }  // 8
put_16 :: (main: *StreamPeer, value: int) { sys_call("StreamPeer", "put_16", 1286410249, Nil, main.p_object, value);  }  // 9
put_u16 :: (main: *StreamPeer, value: int) { sys_call("StreamPeer", "put_u16", 1286410249, Nil, main.p_object, value);  }  // 10
put_32 :: (main: *StreamPeer, value: int) { sys_call("StreamPeer", "put_32", 1286410249, Nil, main.p_object, value);  }  // 11
put_u32 :: (main: *StreamPeer, value: int) { sys_call("StreamPeer", "put_u32", 1286410249, Nil, main.p_object, value);  }  // 12
put_64 :: (main: *StreamPeer, value: int) { sys_call("StreamPeer", "put_64", 1286410249, Nil, main.p_object, value);  }  // 13
put_u64 :: (main: *StreamPeer, value: int) { sys_call("StreamPeer", "put_u64", 1286410249, Nil, main.p_object, value);  }  // 14
put_half :: (main: *StreamPeer, value: float) { sys_call("StreamPeer", "put_half", 373806689, Nil, main.p_object, value);  }  // 15
put_float :: (main: *StreamPeer, value: float) { sys_call("StreamPeer", "put_float", 373806689, Nil, main.p_object, value);  }  // 16
put_double :: (main: *StreamPeer, value: float) { sys_call("StreamPeer", "put_double", 373806689, Nil, main.p_object, value);  }  // 17
put_string :: (main: *StreamPeer, value: string) { sys_call("StreamPeer", "put_string", 83702148, Nil, main.p_object, value);  }  // 18
put_utf8_string :: (main: *StreamPeer, value: string) { sys_call("StreamPeer", "put_utf8_string", 83702148, Nil, main.p_object, value);  }  // 19
put_var :: (main: *StreamPeer, value: Variant) { sys_call("StreamPeer", "put_var", 738511890, Nil, main.p_object, value);  }  // 20
get_8 :: (main: *StreamPeer) -> int { call_ret := cast(*int) sys_call("StreamPeer", "get_8", 2455072627, int, main.p_object); return call_ret.*; }  // 21
get_u8 :: (main: *StreamPeer) -> int { call_ret := cast(*int) sys_call("StreamPeer", "get_u8", 2455072627, int, main.p_object); return call_ret.*; }  // 22
get_16 :: (main: *StreamPeer) -> int { call_ret := cast(*int) sys_call("StreamPeer", "get_16", 2455072627, int, main.p_object); return call_ret.*; }  // 23
get_u16 :: (main: *StreamPeer) -> int { call_ret := cast(*int) sys_call("StreamPeer", "get_u16", 2455072627, int, main.p_object); return call_ret.*; }  // 24
get_32 :: (main: *StreamPeer) -> int { call_ret := cast(*int) sys_call("StreamPeer", "get_32", 2455072627, int, main.p_object); return call_ret.*; }  // 25
get_u32 :: (main: *StreamPeer) -> int { call_ret := cast(*int) sys_call("StreamPeer", "get_u32", 2455072627, int, main.p_object); return call_ret.*; }  // 26
get_64 :: (main: *StreamPeer) -> int { call_ret := cast(*int) sys_call("StreamPeer", "get_64", 2455072627, int, main.p_object); return call_ret.*; }  // 27
get_u64 :: (main: *StreamPeer) -> int { call_ret := cast(*int) sys_call("StreamPeer", "get_u64", 2455072627, int, main.p_object); return call_ret.*; }  // 28
get_half :: (main: *StreamPeer) -> float { call_ret := cast(*float) sys_call("StreamPeer", "get_half", 191475506, float, main.p_object); return call_ret.*; }  // 29
get_float :: (main: *StreamPeer) -> float { call_ret := cast(*float) sys_call("StreamPeer", "get_float", 191475506, float, main.p_object); return call_ret.*; }  // 30
get_double :: (main: *StreamPeer) -> float { call_ret := cast(*float) sys_call("StreamPeer", "get_double", 191475506, float, main.p_object); return call_ret.*; }  // 31
get_string :: (main: *StreamPeer) -> gstring { call_ret := cast(*gstring) sys_call("StreamPeer", "get_string", 2309358862, gstring, main.p_object); return call_ret.*; }  // 32
get_utf8_string :: (main: *StreamPeer) -> gstring { call_ret := cast(*gstring) sys_call("StreamPeer", "get_utf8_string", 2309358862, gstring, main.p_object); return call_ret.*; }  // 33
get_var :: (main: *StreamPeer) -> Variant { call_ret := cast(*Variant) sys_call("StreamPeer", "get_var", 3442865206, Variant, main.p_object); return call_ret.*; }  // 34

seek :: (main: *StreamPeerBuffer, position: int) { sys_call("StreamPeerBuffer", "seek", 1286410249, Nil, main.p_object, position);  }  // 0
get_size :: (main: *StreamPeerBuffer) -> int { call_ret := cast(*int) sys_call("StreamPeerBuffer", "get_size", 3905245786, int, main.p_object); return call_ret.*; }  // 1
get_position :: (main: *StreamPeerBuffer) -> int { call_ret := cast(*int) sys_call("StreamPeerBuffer", "get_position", 3905245786, int, main.p_object); return call_ret.*; }  // 2
resize :: (main: *StreamPeerBuffer, size: int) { sys_call("StreamPeerBuffer", "resize", 1286410249, Nil, main.p_object, size);  }  // 3
set_data_array :: (main: *StreamPeerBuffer, data: PackedByteArray) { sys_call("StreamPeerBuffer", "set_data_array", 2971499966, Nil, main.p_object, data);  }  // 4
get_data_array :: (main: *StreamPeerBuffer) -> PackedByteArray { call_ret := cast(*PackedByteArray) sys_call("StreamPeerBuffer", "get_data_array", 2362200018, PackedByteArray, main.p_object); return call_ret.*; }  // 5
clear :: (main: *StreamPeerBuffer) { sys_call("StreamPeerBuffer", "clear", 3218959716, Nil, main.p_object);  }  // 6
duplicate :: (main: *StreamPeerBuffer) -> *StreamPeerBuffer { call_ret := cast(*StreamPeerBuffer) sys_call("StreamPeerBuffer", "duplicate", 2474064677, StreamPeerBuffer, main.p_object); return call_ret; }  // 7


start_compression :: (main: *StreamPeerGZIP) -> Error { call_ret := cast(*Error) sys_call("StreamPeerGZIP", "start_compression", 781582770, Error, main.p_object); return call_ret.*; }  // 0
start_decompression :: (main: *StreamPeerGZIP) -> Error { call_ret := cast(*Error) sys_call("StreamPeerGZIP", "start_decompression", 781582770, Error, main.p_object); return call_ret.*; }  // 1
finish :: (main: *StreamPeerGZIP) -> Error { call_ret := cast(*Error) sys_call("StreamPeerGZIP", "finish", 166280745, Error, main.p_object); return call_ret.*; }  // 2
clear :: (main: *StreamPeerGZIP) { sys_call("StreamPeerGZIP", "clear", 3218959716, Nil, main.p_object);  }  // 3

bind :: (main: *StreamPeerTCP, port: int) -> Error { call_ret := cast(*Error) sys_call("StreamPeerTCP", "bind", 3167955072, Error, main.p_object, port); return call_ret.*; }  // 0
connect_to_host :: (main: *StreamPeerTCP, host: string, port: int) -> Error { call_ret := cast(*Error) sys_call("StreamPeerTCP", "connect_to_host", 993915709, Error, main.p_object, host, port); return call_ret.*; }  // 1
poll :: (main: *StreamPeerTCP) -> Error { call_ret := cast(*Error) sys_call("StreamPeerTCP", "poll", 166280745, Error, main.p_object); return call_ret.*; }  // 2
get_status :: (main: *StreamPeerTCP) -> StreamPeerTCP.Status { call_ret := cast(*StreamPeerTCP.Status) sys_call("StreamPeerTCP", "get_status", 859471121, StreamPeerTCP.Status, main.p_object); return call_ret.*; }  // 3
get_connected_host :: (main: *StreamPeerTCP) -> gstring { call_ret := cast(*gstring) sys_call("StreamPeerTCP", "get_connected_host", 201670096, gstring, main.p_object); return call_ret.*; }  // 4
get_connected_port :: (main: *StreamPeerTCP) -> int { call_ret := cast(*int) sys_call("StreamPeerTCP", "get_connected_port", 3905245786, int, main.p_object); return call_ret.*; }  // 5
get_local_port :: (main: *StreamPeerTCP) -> int { call_ret := cast(*int) sys_call("StreamPeerTCP", "get_local_port", 3905245786, int, main.p_object); return call_ret.*; }  // 6
disconnect_from_host :: (main: *StreamPeerTCP) { sys_call("StreamPeerTCP", "disconnect_from_host", 3218959716, Nil, main.p_object);  }  // 7
set_no_delay :: (main: *StreamPeerTCP, enabled: bool) { sys_call("StreamPeerTCP", "set_no_delay", 2586408642, Nil, main.p_object, enabled);  }  // 8

poll :: (main: *StreamPeerTLS) { sys_call("StreamPeerTLS", "poll", 3218959716, Nil, main.p_object);  }  // 0
accept_stream :: (main: *StreamPeerTLS, stream: StreamPeer, server_options: TLSOptions) -> Error { call_ret := cast(*Error) sys_call("StreamPeerTLS", "accept_stream", 4292689651, Error, main.p_object, stream, server_options); return call_ret.*; }  // 1
connect_to_stream :: (main: *StreamPeerTLS, stream: StreamPeer, common_name: string) -> Error { call_ret := cast(*Error) sys_call("StreamPeerTLS", "connect_to_stream", 57169517, Error, main.p_object, stream, common_name); return call_ret.*; }  // 2
get_status :: (main: *StreamPeerTLS) -> StreamPeerTLS.Status { call_ret := cast(*StreamPeerTLS.Status) sys_call("StreamPeerTLS", "get_status", 1128380576, StreamPeerTLS.Status, main.p_object); return call_ret.*; }  // 3
get_stream :: (main: *StreamPeerTLS) -> *StreamPeer { call_ret := cast(*StreamPeer) sys_call("StreamPeerTLS", "get_stream", 2741655269, StreamPeer, main.p_object); return call_ret; }  // 4
disconnect_from_stream :: (main: *StreamPeerTLS) { sys_call("StreamPeerTLS", "disconnect_from_stream", 3218959716, Nil, main.p_object);  }  // 5

get_minimum_size :: (main: *StyleBox) -> Vector2 { call_ret := cast(*Vector2) sys_call("StyleBox", "get_minimum_size", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 4
set_content_margin :: (main: *StyleBox, margin: Side, offset: float) { sys_call("StyleBox", "set_content_margin", 4290182280, Nil, main.p_object, margin, offset);  }  // 5
set_content_margin_all :: (main: *StyleBox, offset: float) { sys_call("StyleBox", "set_content_margin_all", 373806689, Nil, main.p_object, offset);  }  // 6
get_content_margin :: (main: *StyleBox, margin: Side) -> float { call_ret := cast(*float) sys_call("StyleBox", "get_content_margin", 2869120046, float, main.p_object, margin); return call_ret.*; }  // 7
get_margin :: (main: *StyleBox, margin: Side) -> float { call_ret := cast(*float) sys_call("StyleBox", "get_margin", 2869120046, float, main.p_object, margin); return call_ret.*; }  // 8
get_offset :: (main: *StyleBox) -> Vector2 { call_ret := cast(*Vector2) sys_call("StyleBox", "get_offset", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 9
draw :: (main: *StyleBox, canvas_item: RID, rect: Rect2) { sys_call("StyleBox", "draw", 2275962004, Nil, main.p_object, canvas_item, rect);  }  // 10
get_current_item_drawn :: (main: *StyleBox) -> *CanvasItem { call_ret := cast(*CanvasItem) sys_call("StyleBox", "get_current_item_drawn", 3213695180, CanvasItem, main.p_object); return call_ret; }  // 11
test_mask :: (main: *StyleBox, point: Vector2, rect: Rect2) -> bool { call_ret := cast(*bool) sys_call("StyleBox", "test_mask", 3735564539, bool, main.p_object, point, rect); return call_ret.*; }  // 12


set_bg_color :: (main: *StyleBoxFlat, color: Color) { sys_call("StyleBoxFlat", "set_bg_color", 2920490490, Nil, main.p_object, color);  }  // 0
get_bg_color :: (main: *StyleBoxFlat) -> Color { call_ret := cast(*Color) sys_call("StyleBoxFlat", "get_bg_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 1
set_border_color :: (main: *StyleBoxFlat, color: Color) { sys_call("StyleBoxFlat", "set_border_color", 2920490490, Nil, main.p_object, color);  }  // 2
get_border_color :: (main: *StyleBoxFlat) -> Color { call_ret := cast(*Color) sys_call("StyleBoxFlat", "get_border_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 3
set_border_width_all :: (main: *StyleBoxFlat, width: int) { sys_call("StyleBoxFlat", "set_border_width_all", 1286410249, Nil, main.p_object, width);  }  // 4
get_border_width_min :: (main: *StyleBoxFlat) -> int { call_ret := cast(*int) sys_call("StyleBoxFlat", "get_border_width_min", 3905245786, int, main.p_object); return call_ret.*; }  // 5
set_border_width :: (main: *StyleBoxFlat, margin: Side, width: int) { sys_call("StyleBoxFlat", "set_border_width", 437707142, Nil, main.p_object, margin, width);  }  // 6
get_border_width :: (main: *StyleBoxFlat, margin: Side) -> int { call_ret := cast(*int) sys_call("StyleBoxFlat", "get_border_width", 1983885014, int, main.p_object, margin); return call_ret.*; }  // 7
set_border_blend :: (main: *StyleBoxFlat, blend: bool) { sys_call("StyleBoxFlat", "set_border_blend", 2586408642, Nil, main.p_object, blend);  }  // 8
get_border_blend :: (main: *StyleBoxFlat) -> bool { call_ret := cast(*bool) sys_call("StyleBoxFlat", "get_border_blend", 36873697, bool, main.p_object); return call_ret.*; }  // 9
set_corner_radius_all :: (main: *StyleBoxFlat, radius: int) { sys_call("StyleBoxFlat", "set_corner_radius_all", 1286410249, Nil, main.p_object, radius);  }  // 10
set_corner_radius :: (main: *StyleBoxFlat, corner: Corner, radius: int) { sys_call("StyleBoxFlat", "set_corner_radius", 2696158768, Nil, main.p_object, corner, radius);  }  // 11
get_corner_radius :: (main: *StyleBoxFlat, corner: Corner) -> int { call_ret := cast(*int) sys_call("StyleBoxFlat", "get_corner_radius", 3982397690, int, main.p_object, corner); return call_ret.*; }  // 12
set_expand_margin :: (main: *StyleBoxFlat, margin: Side, size: float) { sys_call("StyleBoxFlat", "set_expand_margin", 4290182280, Nil, main.p_object, margin, size);  }  // 13
set_expand_margin_all :: (main: *StyleBoxFlat, size: float) { sys_call("StyleBoxFlat", "set_expand_margin_all", 373806689, Nil, main.p_object, size);  }  // 14
get_expand_margin :: (main: *StyleBoxFlat, margin: Side) -> float { call_ret := cast(*float) sys_call("StyleBoxFlat", "get_expand_margin", 2869120046, float, main.p_object, margin); return call_ret.*; }  // 15
set_draw_center :: (main: *StyleBoxFlat, draw_center: bool) { sys_call("StyleBoxFlat", "set_draw_center", 2586408642, Nil, main.p_object, draw_center);  }  // 16
is_draw_center_enabled :: (main: *StyleBoxFlat) -> bool { call_ret := cast(*bool) sys_call("StyleBoxFlat", "is_draw_center_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 17
set_skew :: (main: *StyleBoxFlat, skew: Vector2) { sys_call("StyleBoxFlat", "set_skew", 743155724, Nil, main.p_object, skew);  }  // 18
get_skew :: (main: *StyleBoxFlat) -> Vector2 { call_ret := cast(*Vector2) sys_call("StyleBoxFlat", "get_skew", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 19
set_shadow_color :: (main: *StyleBoxFlat, color: Color) { sys_call("StyleBoxFlat", "set_shadow_color", 2920490490, Nil, main.p_object, color);  }  // 20
get_shadow_color :: (main: *StyleBoxFlat) -> Color { call_ret := cast(*Color) sys_call("StyleBoxFlat", "get_shadow_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 21
set_shadow_size :: (main: *StyleBoxFlat, size: int) { sys_call("StyleBoxFlat", "set_shadow_size", 1286410249, Nil, main.p_object, size);  }  // 22
get_shadow_size :: (main: *StyleBoxFlat) -> int { call_ret := cast(*int) sys_call("StyleBoxFlat", "get_shadow_size", 3905245786, int, main.p_object); return call_ret.*; }  // 23
set_shadow_offset :: (main: *StyleBoxFlat, offset: Vector2) { sys_call("StyleBoxFlat", "set_shadow_offset", 743155724, Nil, main.p_object, offset);  }  // 24
get_shadow_offset :: (main: *StyleBoxFlat) -> Vector2 { call_ret := cast(*Vector2) sys_call("StyleBoxFlat", "get_shadow_offset", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 25
set_anti_aliased :: (main: *StyleBoxFlat, anti_aliased: bool) { sys_call("StyleBoxFlat", "set_anti_aliased", 2586408642, Nil, main.p_object, anti_aliased);  }  // 26
is_anti_aliased :: (main: *StyleBoxFlat) -> bool { call_ret := cast(*bool) sys_call("StyleBoxFlat", "is_anti_aliased", 36873697, bool, main.p_object); return call_ret.*; }  // 27
set_aa_size :: (main: *StyleBoxFlat, size: float) { sys_call("StyleBoxFlat", "set_aa_size", 373806689, Nil, main.p_object, size);  }  // 28
get_aa_size :: (main: *StyleBoxFlat) -> float { call_ret := cast(*float) sys_call("StyleBoxFlat", "get_aa_size", 1740695150, float, main.p_object); return call_ret.*; }  // 29
set_corner_detail :: (main: *StyleBoxFlat, detail: int) { sys_call("StyleBoxFlat", "set_corner_detail", 1286410249, Nil, main.p_object, detail);  }  // 30
get_corner_detail :: (main: *StyleBoxFlat) -> int { call_ret := cast(*int) sys_call("StyleBoxFlat", "get_corner_detail", 3905245786, int, main.p_object); return call_ret.*; }  // 31

set_color :: (main: *StyleBoxLine, color: Color) { sys_call("StyleBoxLine", "set_color", 2920490490, Nil, main.p_object, color);  }  // 0
get_color :: (main: *StyleBoxLine) -> Color { call_ret := cast(*Color) sys_call("StyleBoxLine", "get_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 1
set_thickness :: (main: *StyleBoxLine, thickness: int) { sys_call("StyleBoxLine", "set_thickness", 1286410249, Nil, main.p_object, thickness);  }  // 2
get_thickness :: (main: *StyleBoxLine) -> int { call_ret := cast(*int) sys_call("StyleBoxLine", "get_thickness", 3905245786, int, main.p_object); return call_ret.*; }  // 3
set_grow_begin :: (main: *StyleBoxLine, offset: float) { sys_call("StyleBoxLine", "set_grow_begin", 373806689, Nil, main.p_object, offset);  }  // 4
get_grow_begin :: (main: *StyleBoxLine) -> float { call_ret := cast(*float) sys_call("StyleBoxLine", "get_grow_begin", 1740695150, float, main.p_object); return call_ret.*; }  // 5
set_grow_end :: (main: *StyleBoxLine, offset: float) { sys_call("StyleBoxLine", "set_grow_end", 373806689, Nil, main.p_object, offset);  }  // 6
get_grow_end :: (main: *StyleBoxLine) -> float { call_ret := cast(*float) sys_call("StyleBoxLine", "get_grow_end", 1740695150, float, main.p_object); return call_ret.*; }  // 7
set_vertical :: (main: *StyleBoxLine, vertical: bool) { sys_call("StyleBoxLine", "set_vertical", 2586408642, Nil, main.p_object, vertical);  }  // 8
is_vertical :: (main: *StyleBoxLine) -> bool { call_ret := cast(*bool) sys_call("StyleBoxLine", "is_vertical", 36873697, bool, main.p_object); return call_ret.*; }  // 9

set_texture :: (main: *StyleBoxTexture, texture: Texture2D) { sys_call("StyleBoxTexture", "set_texture", 4051416890, Nil, main.p_object, texture);  }  // 0
get_texture :: (main: *StyleBoxTexture) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("StyleBoxTexture", "get_texture", 3635182373, Texture2D, main.p_object); return call_ret; }  // 1
set_texture_margin :: (main: *StyleBoxTexture, margin: Side, size: float) { sys_call("StyleBoxTexture", "set_texture_margin", 4290182280, Nil, main.p_object, margin, size);  }  // 2
set_texture_margin_all :: (main: *StyleBoxTexture, size: float) { sys_call("StyleBoxTexture", "set_texture_margin_all", 373806689, Nil, main.p_object, size);  }  // 3
get_texture_margin :: (main: *StyleBoxTexture, margin: Side) -> float { call_ret := cast(*float) sys_call("StyleBoxTexture", "get_texture_margin", 2869120046, float, main.p_object, margin); return call_ret.*; }  // 4
set_expand_margin :: (main: *StyleBoxTexture, margin: Side, size: float) { sys_call("StyleBoxTexture", "set_expand_margin", 4290182280, Nil, main.p_object, margin, size);  }  // 5
set_expand_margin_all :: (main: *StyleBoxTexture, size: float) { sys_call("StyleBoxTexture", "set_expand_margin_all", 373806689, Nil, main.p_object, size);  }  // 6
get_expand_margin :: (main: *StyleBoxTexture, margin: Side) -> float { call_ret := cast(*float) sys_call("StyleBoxTexture", "get_expand_margin", 2869120046, float, main.p_object, margin); return call_ret.*; }  // 7
set_region_rect :: (main: *StyleBoxTexture, region: Rect2) { sys_call("StyleBoxTexture", "set_region_rect", 2046264180, Nil, main.p_object, region);  }  // 8
get_region_rect :: (main: *StyleBoxTexture) -> Rect2 { call_ret := cast(*Rect2) sys_call("StyleBoxTexture", "get_region_rect", 1639390495, Rect2, main.p_object); return call_ret.*; }  // 9
set_draw_center :: (main: *StyleBoxTexture, enable: bool) { sys_call("StyleBoxTexture", "set_draw_center", 2586408642, Nil, main.p_object, enable);  }  // 10
is_draw_center_enabled :: (main: *StyleBoxTexture) -> bool { call_ret := cast(*bool) sys_call("StyleBoxTexture", "is_draw_center_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 11
set_modulate :: (main: *StyleBoxTexture, color: Color) { sys_call("StyleBoxTexture", "set_modulate", 2920490490, Nil, main.p_object, color);  }  // 12
get_modulate :: (main: *StyleBoxTexture) -> Color { call_ret := cast(*Color) sys_call("StyleBoxTexture", "get_modulate", 3444240500, Color, main.p_object); return call_ret.*; }  // 13
set_h_axis_stretch_mode :: (main: *StyleBoxTexture, mode: StyleBoxTexture.AxisStretchMode) { sys_call("StyleBoxTexture", "set_h_axis_stretch_mode", 2965538783, Nil, main.p_object, mode);  }  // 14
get_h_axis_stretch_mode :: (main: *StyleBoxTexture) -> StyleBoxTexture.AxisStretchMode { call_ret := cast(*StyleBoxTexture.AxisStretchMode) sys_call("StyleBoxTexture", "get_h_axis_stretch_mode", 3807744063, StyleBoxTexture.AxisStretchMode, main.p_object); return call_ret.*; }  // 15
set_v_axis_stretch_mode :: (main: *StyleBoxTexture, mode: StyleBoxTexture.AxisStretchMode) { sys_call("StyleBoxTexture", "set_v_axis_stretch_mode", 2965538783, Nil, main.p_object, mode);  }  // 16
get_v_axis_stretch_mode :: (main: *StyleBoxTexture) -> StyleBoxTexture.AxisStretchMode { call_ret := cast(*StyleBoxTexture.AxisStretchMode) sys_call("StyleBoxTexture", "get_v_axis_stretch_mode", 3807744063, StyleBoxTexture.AxisStretchMode, main.p_object); return call_ret.*; }  // 17

set_size :: (main: *SubViewport, size: Vector2i) { sys_call("SubViewport", "set_size", 1130785943, Nil, main.p_object, size);  }  // 0
get_size :: (main: *SubViewport) -> Vector2i { call_ret := cast(*Vector2i) sys_call("SubViewport", "get_size", 3690982128, Vector2i, main.p_object); return call_ret.*; }  // 1
set_size_2d_override :: (main: *SubViewport, size: Vector2i) { sys_call("SubViewport", "set_size_2d_override", 1130785943, Nil, main.p_object, size);  }  // 2
get_size_2d_override :: (main: *SubViewport) -> Vector2i { call_ret := cast(*Vector2i) sys_call("SubViewport", "get_size_2d_override", 3690982128, Vector2i, main.p_object); return call_ret.*; }  // 3
set_size_2d_override_stretch :: (main: *SubViewport, enable: bool) { sys_call("SubViewport", "set_size_2d_override_stretch", 2586408642, Nil, main.p_object, enable);  }  // 4
is_size_2d_override_stretch_enabled :: (main: *SubViewport) -> bool { call_ret := cast(*bool) sys_call("SubViewport", "is_size_2d_override_stretch_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 5
set_update_mode :: (main: *SubViewport, mode: SubViewport.UpdateMode) { sys_call("SubViewport", "set_update_mode", 1295690030, Nil, main.p_object, mode);  }  // 6
get_update_mode :: (main: *SubViewport) -> SubViewport.UpdateMode { call_ret := cast(*SubViewport.UpdateMode) sys_call("SubViewport", "get_update_mode", 2980171553, SubViewport.UpdateMode, main.p_object); return call_ret.*; }  // 7
set_clear_mode :: (main: *SubViewport, mode: SubViewport.ClearMode) { sys_call("SubViewport", "set_clear_mode", 2834454712, Nil, main.p_object, mode);  }  // 8
get_clear_mode :: (main: *SubViewport) -> SubViewport.ClearMode { call_ret := cast(*SubViewport.ClearMode) sys_call("SubViewport", "get_clear_mode", 331324495, SubViewport.ClearMode, main.p_object); return call_ret.*; }  // 9

set_stretch :: (main: *SubViewportContainer, enable: bool) { sys_call("SubViewportContainer", "set_stretch", 2586408642, Nil, main.p_object, enable);  }  // 1
is_stretch_enabled :: (main: *SubViewportContainer) -> bool { call_ret := cast(*bool) sys_call("SubViewportContainer", "is_stretch_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 2
set_stretch_shrink :: (main: *SubViewportContainer, amount: int) { sys_call("SubViewportContainer", "set_stretch_shrink", 1286410249, Nil, main.p_object, amount);  }  // 3
get_stretch_shrink :: (main: *SubViewportContainer) -> int { call_ret := cast(*int) sys_call("SubViewportContainer", "get_stretch_shrink", 3905245786, int, main.p_object); return call_ret.*; }  // 4
set_mouse_target :: (main: *SubViewportContainer, amount: bool) { sys_call("SubViewportContainer", "set_mouse_target", 2586408642, Nil, main.p_object, amount);  }  // 5
is_mouse_target_enabled :: (main: *SubViewportContainer) -> bool { call_ret := cast(*bool) sys_call("SubViewportContainer", "is_mouse_target_enabled", 2240911060, bool, main.p_object); return call_ret.*; }  // 6

set_delay :: (main: *SubtweenTweener, delay: float) -> *SubtweenTweener { call_ret := cast(*SubtweenTweener) sys_call("SubtweenTweener", "set_delay", 449181780, SubtweenTweener, main.p_object, delay); return call_ret; }  // 0

set_skin_weight_count :: (main: *SurfaceTool, count: SurfaceTool.SkinWeightCount) { sys_call("SurfaceTool", "set_skin_weight_count", 618679515, Nil, main.p_object, count);  }  // 0
get_skin_weight_count :: (main: *SurfaceTool) -> SurfaceTool.SkinWeightCount { call_ret := cast(*SurfaceTool.SkinWeightCount) sys_call("SurfaceTool", "get_skin_weight_count", 1072401130, SurfaceTool.SkinWeightCount, main.p_object); return call_ret.*; }  // 1
set_custom_format :: (main: *SurfaceTool, channel_index: int, format: SurfaceTool.CustomFormat) { sys_call("SurfaceTool", "set_custom_format", 4087759856, Nil, main.p_object, channel_index, format);  }  // 2
get_custom_format :: (main: *SurfaceTool, channel_index: int) -> SurfaceTool.CustomFormat { call_ret := cast(*SurfaceTool.CustomFormat) sys_call("SurfaceTool", "get_custom_format", 839863283, SurfaceTool.CustomFormat, main.p_object, channel_index); return call_ret.*; }  // 3
begin :: (main: *SurfaceTool, primitive: Mesh.PrimitiveType) { sys_call("SurfaceTool", "begin", 2230304113, Nil, main.p_object, primitive);  }  // 4
add_vertex :: (main: *SurfaceTool, vertex: Vector3) { sys_call("SurfaceTool", "add_vertex", 3460891852, Nil, main.p_object, vertex);  }  // 5
set_color :: (main: *SurfaceTool, color: Color) { sys_call("SurfaceTool", "set_color", 2920490490, Nil, main.p_object, color);  }  // 6
set_normal :: (main: *SurfaceTool, normal: Vector3) { sys_call("SurfaceTool", "set_normal", 3460891852, Nil, main.p_object, normal);  }  // 7
set_tangent :: (main: *SurfaceTool, tangent: Plane) { sys_call("SurfaceTool", "set_tangent", 3505987427, Nil, main.p_object, tangent);  }  // 8
set_uv :: (main: *SurfaceTool, uv: Vector2) { sys_call("SurfaceTool", "set_uv", 743155724, Nil, main.p_object, uv);  }  // 9
set_uv2 :: (main: *SurfaceTool, uv2: Vector2) { sys_call("SurfaceTool", "set_uv2", 743155724, Nil, main.p_object, uv2);  }  // 10
set_bones :: (main: *SurfaceTool, bones: PackedInt32Array) { sys_call("SurfaceTool", "set_bones", 3614634198, Nil, main.p_object, bones);  }  // 11
set_weights :: (main: *SurfaceTool, weights: PackedFloat32Array) { sys_call("SurfaceTool", "set_weights", 2899603908, Nil, main.p_object, weights);  }  // 12
set_custom :: (main: *SurfaceTool, channel_index: int, custom_color: Color) { sys_call("SurfaceTool", "set_custom", 2878471219, Nil, main.p_object, channel_index, custom_color);  }  // 13
set_smooth_group :: (main: *SurfaceTool, index: int) { sys_call("SurfaceTool", "set_smooth_group", 1286410249, Nil, main.p_object, index);  }  // 14
add_triangle_fan :: (main: *SurfaceTool, vertices: PackedVector3Array) { sys_call("SurfaceTool", "add_triangle_fan", 2235017613, Nil, main.p_object, vertices);  }  // 15
add_index :: (main: *SurfaceTool, index: int) { sys_call("SurfaceTool", "add_index", 1286410249, Nil, main.p_object, index);  }  // 16
index :: (main: *SurfaceTool) { sys_call("SurfaceTool", "index", 3218959716, Nil, main.p_object);  }  // 17
deindex :: (main: *SurfaceTool) { sys_call("SurfaceTool", "deindex", 3218959716, Nil, main.p_object);  }  // 18
generate_normals :: (main: *SurfaceTool) { sys_call("SurfaceTool", "generate_normals", 107499316, Nil, main.p_object);  }  // 19
generate_tangents :: (main: *SurfaceTool) { sys_call("SurfaceTool", "generate_tangents", 3218959716, Nil, main.p_object);  }  // 20
optimize_indices_for_cache :: (main: *SurfaceTool) { sys_call("SurfaceTool", "optimize_indices_for_cache", 3218959716, Nil, main.p_object);  }  // 21
get_aabb :: (main: *SurfaceTool) -> AABB { call_ret := cast(*AABB) sys_call("SurfaceTool", "get_aabb", 1068685055, AABB, main.p_object); return call_ret.*; }  // 22
generate_lod :: (main: *SurfaceTool, nd_threshold: float) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("SurfaceTool", "generate_lod", 1938056459, PackedInt32Array, main.p_object, nd_threshold); return call_ret.*; }  // 23
set_material :: (main: *SurfaceTool, material: Material) { sys_call("SurfaceTool", "set_material", 2757459619, Nil, main.p_object, material);  }  // 24
get_primitive_type :: (main: *SurfaceTool) -> Mesh.PrimitiveType { call_ret := cast(*Mesh.PrimitiveType) sys_call("SurfaceTool", "get_primitive_type", 768822145, Mesh.PrimitiveType, main.p_object); return call_ret.*; }  // 25
clear :: (main: *SurfaceTool) { sys_call("SurfaceTool", "clear", 3218959716, Nil, main.p_object);  }  // 26
create_from :: (main: *SurfaceTool, existing: Mesh, surface: int) { sys_call("SurfaceTool", "create_from", 1767024570, Nil, main.p_object, existing, surface);  }  // 27
create_from_arrays :: (main: *SurfaceTool, arrays: Array) { sys_call("SurfaceTool", "create_from_arrays", 1894639680, Nil, main.p_object, arrays);  }  // 28
create_from_blend_shape :: (main: *SurfaceTool, existing: Mesh, surface: int, blend_shape: string) { sys_call("SurfaceTool", "create_from_blend_shape", 1306185582, Nil, main.p_object, existing, surface, blend_shape);  }  // 29
append_from :: (main: *SurfaceTool, existing: Mesh, surface: int, transform: Transform3D) { sys_call("SurfaceTool", "append_from", 2217967155, Nil, main.p_object, existing, surface, transform);  }  // 30
commit :: (main: *SurfaceTool) -> *ArrayMesh { call_ret := cast(*ArrayMesh) sys_call("SurfaceTool", "commit", 4107864055, ArrayMesh, main.p_object); return call_ret; }  // 31
commit_to_arrays :: (main: *SurfaceTool) -> Array { call_ret := cast(*Array) sys_call("SurfaceTool", "commit_to_arrays", 2915620761, Array, main.p_object); return call_ret.*; }  // 32

get_line_syntax_highlighting :: (main: *SyntaxHighlighter, line: int) -> Dictionary { call_ret := cast(*Dictionary) sys_call("SyntaxHighlighter", "get_line_syntax_highlighting", 3554694381, Dictionary, main.p_object, line); return call_ret.*; }  // 3
update_cache :: (main: *SyntaxHighlighter) { sys_call("SyntaxHighlighter", "update_cache", 3218959716, Nil, main.p_object);  }  // 4
clear_highlighting_cache :: (main: *SyntaxHighlighter) { sys_call("SyntaxHighlighter", "clear_highlighting_cache", 3218959716, Nil, main.p_object);  }  // 5
get_text_edit :: (main: *SyntaxHighlighter) -> *TextEdit { call_ret := cast(*TextEdit) sys_call("SyntaxHighlighter", "get_text_edit", 1893027089, TextEdit, main.p_object); return call_ret; }  // 6

set_antialiasing :: (main: *SystemFont, antialiasing: TextServer.FontAntialiasing) { sys_call("SystemFont", "set_antialiasing", 1669900, Nil, main.p_object, antialiasing);  }  // 0
get_antialiasing :: (main: *SystemFont) -> TextServer.FontAntialiasing { call_ret := cast(*TextServer.FontAntialiasing) sys_call("SystemFont", "get_antialiasing", 4262718649, TextServer.FontAntialiasing, main.p_object); return call_ret.*; }  // 1
set_disable_embedded_bitmaps :: (main: *SystemFont, disable_embedded_bitmaps: bool) { sys_call("SystemFont", "set_disable_embedded_bitmaps", 2586408642, Nil, main.p_object, disable_embedded_bitmaps);  }  // 2
get_disable_embedded_bitmaps :: (main: *SystemFont) -> bool { call_ret := cast(*bool) sys_call("SystemFont", "get_disable_embedded_bitmaps", 36873697, bool, main.p_object); return call_ret.*; }  // 3
set_generate_mipmaps :: (main: *SystemFont, generate_mipmaps: bool) { sys_call("SystemFont", "set_generate_mipmaps", 2586408642, Nil, main.p_object, generate_mipmaps);  }  // 4
get_generate_mipmaps :: (main: *SystemFont) -> bool { call_ret := cast(*bool) sys_call("SystemFont", "get_generate_mipmaps", 36873697, bool, main.p_object); return call_ret.*; }  // 5
set_allow_system_fallback :: (main: *SystemFont, allow_system_fallback: bool) { sys_call("SystemFont", "set_allow_system_fallback", 2586408642, Nil, main.p_object, allow_system_fallback);  }  // 6
is_allow_system_fallback :: (main: *SystemFont) -> bool { call_ret := cast(*bool) sys_call("SystemFont", "is_allow_system_fallback", 36873697, bool, main.p_object); return call_ret.*; }  // 7
set_force_autohinter :: (main: *SystemFont, force_autohinter: bool) { sys_call("SystemFont", "set_force_autohinter", 2586408642, Nil, main.p_object, force_autohinter);  }  // 8
is_force_autohinter :: (main: *SystemFont) -> bool { call_ret := cast(*bool) sys_call("SystemFont", "is_force_autohinter", 36873697, bool, main.p_object); return call_ret.*; }  // 9
set_hinting :: (main: *SystemFont, hinting: TextServer.Hinting) { sys_call("SystemFont", "set_hinting", 1827459492, Nil, main.p_object, hinting);  }  // 10
get_hinting :: (main: *SystemFont) -> TextServer.Hinting { call_ret := cast(*TextServer.Hinting) sys_call("SystemFont", "get_hinting", 3683214614, TextServer.Hinting, main.p_object); return call_ret.*; }  // 11
set_subpixel_positioning :: (main: *SystemFont, subpixel_positioning: TextServer.SubpixelPositioning) { sys_call("SystemFont", "set_subpixel_positioning", 4225742182, Nil, main.p_object, subpixel_positioning);  }  // 12
get_subpixel_positioning :: (main: *SystemFont) -> TextServer.SubpixelPositioning { call_ret := cast(*TextServer.SubpixelPositioning) sys_call("SystemFont", "get_subpixel_positioning", 1069238588, TextServer.SubpixelPositioning, main.p_object); return call_ret.*; }  // 13
set_keep_rounding_remainders :: (main: *SystemFont, keep_rounding_remainders: bool) { sys_call("SystemFont", "set_keep_rounding_remainders", 2586408642, Nil, main.p_object, keep_rounding_remainders);  }  // 14
get_keep_rounding_remainders :: (main: *SystemFont) -> bool { call_ret := cast(*bool) sys_call("SystemFont", "get_keep_rounding_remainders", 36873697, bool, main.p_object); return call_ret.*; }  // 15
set_multichannel_signed_distance_field :: (main: *SystemFont, msdf: bool) { sys_call("SystemFont", "set_multichannel_signed_distance_field", 2586408642, Nil, main.p_object, msdf);  }  // 16
is_multichannel_signed_distance_field :: (main: *SystemFont) -> bool { call_ret := cast(*bool) sys_call("SystemFont", "is_multichannel_signed_distance_field", 36873697, bool, main.p_object); return call_ret.*; }  // 17
set_msdf_pixel_range :: (main: *SystemFont, msdf_pixel_range: int) { sys_call("SystemFont", "set_msdf_pixel_range", 1286410249, Nil, main.p_object, msdf_pixel_range);  }  // 18
get_msdf_pixel_range :: (main: *SystemFont) -> int { call_ret := cast(*int) sys_call("SystemFont", "get_msdf_pixel_range", 3905245786, int, main.p_object); return call_ret.*; }  // 19
set_msdf_size :: (main: *SystemFont, msdf_size: int) { sys_call("SystemFont", "set_msdf_size", 1286410249, Nil, main.p_object, msdf_size);  }  // 20
get_msdf_size :: (main: *SystemFont) -> int { call_ret := cast(*int) sys_call("SystemFont", "get_msdf_size", 3905245786, int, main.p_object); return call_ret.*; }  // 21
set_oversampling :: (main: *SystemFont, oversampling: float) { sys_call("SystemFont", "set_oversampling", 373806689, Nil, main.p_object, oversampling);  }  // 22
get_oversampling :: (main: *SystemFont) -> float { call_ret := cast(*float) sys_call("SystemFont", "get_oversampling", 1740695150, float, main.p_object); return call_ret.*; }  // 23
get_font_names :: (main: *SystemFont) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("SystemFont", "get_font_names", 1139954409, PackedStringArray, main.p_object); return call_ret.*; }  // 24
set_font_names :: (main: *SystemFont, names: PackedStringArray) { sys_call("SystemFont", "set_font_names", 4015028928, Nil, main.p_object, names);  }  // 25
get_font_italic :: (main: *SystemFont) -> bool { call_ret := cast(*bool) sys_call("SystemFont", "get_font_italic", 36873697, bool, main.p_object); return call_ret.*; }  // 26
set_font_italic :: (main: *SystemFont, italic: bool) { sys_call("SystemFont", "set_font_italic", 2586408642, Nil, main.p_object, italic);  }  // 27
set_font_weight :: (main: *SystemFont, weight: int) { sys_call("SystemFont", "set_font_weight", 1286410249, Nil, main.p_object, weight);  }  // 28
set_font_stretch :: (main: *SystemFont, stretch: int) { sys_call("SystemFont", "set_font_stretch", 1286410249, Nil, main.p_object, stretch);  }  // 29

listen :: (main: *TCPServer, port: int) -> Error { call_ret := cast(*Error) sys_call("TCPServer", "listen", 3167955072, Error, main.p_object, port); return call_ret.*; }  // 0
is_connection_available :: (main: *TCPServer) -> bool { call_ret := cast(*bool) sys_call("TCPServer", "is_connection_available", 36873697, bool, main.p_object); return call_ret.*; }  // 1
is_listening :: (main: *TCPServer) -> bool { call_ret := cast(*bool) sys_call("TCPServer", "is_listening", 36873697, bool, main.p_object); return call_ret.*; }  // 2
get_local_port :: (main: *TCPServer) -> int { call_ret := cast(*int) sys_call("TCPServer", "get_local_port", 3905245786, int, main.p_object); return call_ret.*; }  // 3
take_connection :: (main: *TCPServer) -> *StreamPeerTCP { call_ret := cast(*StreamPeerTCP) sys_call("TCPServer", "take_connection", 30545006, StreamPeerTCP, main.p_object); return call_ret; }  // 4
stop :: (main: *TCPServer) { sys_call("TCPServer", "stop", 3218959716, Nil, main.p_object);  }  // 5

client :: (main: *TLSOptions) -> *TLSOptions { call_ret := cast(*TLSOptions) sys_call("TLSOptions", "client", 3565000357, TLSOptions, main.p_object); return call_ret; }  // 0
client_unsafe :: (main: *TLSOptions) -> *TLSOptions { call_ret := cast(*TLSOptions) sys_call("TLSOptions", "client_unsafe", 2090251749, TLSOptions, main.p_object); return call_ret; }  // 1
server :: (main: *TLSOptions, key: CryptoKey, certificate: X509Certificate) -> *TLSOptions { call_ret := cast(*TLSOptions) sys_call("TLSOptions", "server", 36969539, TLSOptions, main.p_object, key, certificate); return call_ret; }  // 2
is_server :: (main: *TLSOptions) -> bool { call_ret := cast(*bool) sys_call("TLSOptions", "is_server", 36873697, bool, main.p_object); return call_ret.*; }  // 3
is_unsafe_client :: (main: *TLSOptions) -> bool { call_ret := cast(*bool) sys_call("TLSOptions", "is_unsafe_client", 36873697, bool, main.p_object); return call_ret.*; }  // 4
get_common_name_override :: (main: *TLSOptions) -> gstring { call_ret := cast(*gstring) sys_call("TLSOptions", "get_common_name_override", 201670096, gstring, main.p_object); return call_ret.*; }  // 5
get_trusted_ca_chain :: (main: *TLSOptions) -> *X509Certificate { call_ret := cast(*X509Certificate) sys_call("TLSOptions", "get_trusted_ca_chain", 1120709175, X509Certificate, main.p_object); return call_ret; }  // 6
get_private_key :: (main: *TLSOptions) -> *CryptoKey { call_ret := cast(*CryptoKey) sys_call("TLSOptions", "get_private_key", 2119971811, CryptoKey, main.p_object); return call_ret; }  // 7
get_own_certificate :: (main: *TLSOptions) -> *X509Certificate { call_ret := cast(*X509Certificate) sys_call("TLSOptions", "get_own_certificate", 1120709175, X509Certificate, main.p_object); return call_ret; }  // 8

set_tab_count :: (main: *TabBar, count: int) { sys_call("TabBar", "set_tab_count", 1286410249, Nil, main.p_object, count);  }  // 0
get_tab_count :: (main: *TabBar) -> int { call_ret := cast(*int) sys_call("TabBar", "get_tab_count", 3905245786, int, main.p_object); return call_ret.*; }  // 1
set_current_tab :: (main: *TabBar, tab_idx: int) { sys_call("TabBar", "set_current_tab", 1286410249, Nil, main.p_object, tab_idx);  }  // 2
get_current_tab :: (main: *TabBar) -> int { call_ret := cast(*int) sys_call("TabBar", "get_current_tab", 3905245786, int, main.p_object); return call_ret.*; }  // 3
get_previous_tab :: (main: *TabBar) -> int { call_ret := cast(*int) sys_call("TabBar", "get_previous_tab", 3905245786, int, main.p_object); return call_ret.*; }  // 4
select_previous_available :: (main: *TabBar) -> bool { call_ret := cast(*bool) sys_call("TabBar", "select_previous_available", 2240911060, bool, main.p_object); return call_ret.*; }  // 5
select_next_available :: (main: *TabBar) -> bool { call_ret := cast(*bool) sys_call("TabBar", "select_next_available", 2240911060, bool, main.p_object); return call_ret.*; }  // 6
set_tab_title :: (main: *TabBar, tab_idx: int, title: string) { sys_call("TabBar", "set_tab_title", 501894301, Nil, main.p_object, tab_idx, title);  }  // 7
get_tab_title :: (main: *TabBar, tab_idx: int) -> gstring { call_ret := cast(*gstring) sys_call("TabBar", "get_tab_title", 844755477, gstring, main.p_object, tab_idx); return call_ret.*; }  // 8
set_tab_tooltip :: (main: *TabBar, tab_idx: int, tooltip: string) { sys_call("TabBar", "set_tab_tooltip", 501894301, Nil, main.p_object, tab_idx, tooltip);  }  // 9
get_tab_tooltip :: (main: *TabBar, tab_idx: int) -> gstring { call_ret := cast(*gstring) sys_call("TabBar", "get_tab_tooltip", 844755477, gstring, main.p_object, tab_idx); return call_ret.*; }  // 10
set_tab_text_direction :: (main: *TabBar, tab_idx: int, direction: Control.TextDirection) { sys_call("TabBar", "set_tab_text_direction", 1707680378, Nil, main.p_object, tab_idx, direction);  }  // 11
get_tab_text_direction :: (main: *TabBar, tab_idx: int) -> Control.TextDirection { call_ret := cast(*Control.TextDirection) sys_call("TabBar", "get_tab_text_direction", 4235602388, Control.TextDirection, main.p_object, tab_idx); return call_ret.*; }  // 12
set_tab_language :: (main: *TabBar, tab_idx: int, language: string) { sys_call("TabBar", "set_tab_language", 501894301, Nil, main.p_object, tab_idx, language);  }  // 13
get_tab_language :: (main: *TabBar, tab_idx: int) -> gstring { call_ret := cast(*gstring) sys_call("TabBar", "get_tab_language", 844755477, gstring, main.p_object, tab_idx); return call_ret.*; }  // 14
set_tab_icon :: (main: *TabBar, tab_idx: int, icon: Texture2D) { sys_call("TabBar", "set_tab_icon", 666127730, Nil, main.p_object, tab_idx, icon);  }  // 15
get_tab_icon :: (main: *TabBar, tab_idx: int) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("TabBar", "get_tab_icon", 3536238170, Texture2D, main.p_object, tab_idx); return call_ret; }  // 16
set_tab_icon_max_width :: (main: *TabBar, tab_idx: int, width: int) { sys_call("TabBar", "set_tab_icon_max_width", 3937882851, Nil, main.p_object, tab_idx, width);  }  // 17
get_tab_icon_max_width :: (main: *TabBar, tab_idx: int) -> int { call_ret := cast(*int) sys_call("TabBar", "get_tab_icon_max_width", 923996154, int, main.p_object, tab_idx); return call_ret.*; }  // 18
set_tab_button_icon :: (main: *TabBar, tab_idx: int, icon: Texture2D) { sys_call("TabBar", "set_tab_button_icon", 666127730, Nil, main.p_object, tab_idx, icon);  }  // 19
get_tab_button_icon :: (main: *TabBar, tab_idx: int) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("TabBar", "get_tab_button_icon", 3536238170, Texture2D, main.p_object, tab_idx); return call_ret; }  // 20
set_tab_disabled :: (main: *TabBar, tab_idx: int, disabled: bool) { sys_call("TabBar", "set_tab_disabled", 300928843, Nil, main.p_object, tab_idx, disabled);  }  // 21
is_tab_disabled :: (main: *TabBar, tab_idx: int) -> bool { call_ret := cast(*bool) sys_call("TabBar", "is_tab_disabled", 1116898809, bool, main.p_object, tab_idx); return call_ret.*; }  // 22
set_tab_hidden :: (main: *TabBar, tab_idx: int, hidden: bool) { sys_call("TabBar", "set_tab_hidden", 300928843, Nil, main.p_object, tab_idx, hidden);  }  // 23
is_tab_hidden :: (main: *TabBar, tab_idx: int) -> bool { call_ret := cast(*bool) sys_call("TabBar", "is_tab_hidden", 1116898809, bool, main.p_object, tab_idx); return call_ret.*; }  // 24
set_tab_metadata :: (main: *TabBar, tab_idx: int, metadata: Variant) { sys_call("TabBar", "set_tab_metadata", 2152698145, Nil, main.p_object, tab_idx, metadata);  }  // 25
get_tab_metadata :: (main: *TabBar, tab_idx: int) -> Variant { call_ret := cast(*Variant) sys_call("TabBar", "get_tab_metadata", 4227898402, Variant, main.p_object, tab_idx); return call_ret.*; }  // 26
remove_tab :: (main: *TabBar, tab_idx: int) { sys_call("TabBar", "remove_tab", 1286410249, Nil, main.p_object, tab_idx);  }  // 27
add_tab :: (main: *TabBar) { sys_call("TabBar", "add_tab", 1465444425, Nil, main.p_object);  }  // 28
get_tab_idx_at_point :: (main: *TabBar, point: Vector2) -> int { call_ret := cast(*int) sys_call("TabBar", "get_tab_idx_at_point", 3820158470, int, main.p_object, point); return call_ret.*; }  // 29
set_tab_alignment :: (main: *TabBar, alignment: TabBar.AlignmentMode) { sys_call("TabBar", "set_tab_alignment", 2413632353, Nil, main.p_object, alignment);  }  // 30
get_tab_alignment :: (main: *TabBar) -> TabBar.AlignmentMode { call_ret := cast(*TabBar.AlignmentMode) sys_call("TabBar", "get_tab_alignment", 2178122193, TabBar.AlignmentMode, main.p_object); return call_ret.*; }  // 31
set_clip_tabs :: (main: *TabBar, clip_tabs: bool) { sys_call("TabBar", "set_clip_tabs", 2586408642, Nil, main.p_object, clip_tabs);  }  // 32
get_clip_tabs :: (main: *TabBar) -> bool { call_ret := cast(*bool) sys_call("TabBar", "get_clip_tabs", 36873697, bool, main.p_object); return call_ret.*; }  // 33
get_tab_offset :: (main: *TabBar) -> int { call_ret := cast(*int) sys_call("TabBar", "get_tab_offset", 3905245786, int, main.p_object); return call_ret.*; }  // 34
get_offset_buttons_visible :: (main: *TabBar) -> bool { call_ret := cast(*bool) sys_call("TabBar", "get_offset_buttons_visible", 36873697, bool, main.p_object); return call_ret.*; }  // 35
ensure_tab_visible :: (main: *TabBar, idx: int) { sys_call("TabBar", "ensure_tab_visible", 1286410249, Nil, main.p_object, idx);  }  // 36
get_tab_rect :: (main: *TabBar, tab_idx: int) -> Rect2 { call_ret := cast(*Rect2) sys_call("TabBar", "get_tab_rect", 3327874267, Rect2, main.p_object, tab_idx); return call_ret.*; }  // 37
move_tab :: (main: *TabBar, from: int, to: int) { sys_call("TabBar", "move_tab", 3937882851, Nil, main.p_object, from, to);  }  // 38
set_tab_close_display_policy :: (main: *TabBar, policy: TabBar.CloseButtonDisplayPolicy) { sys_call("TabBar", "set_tab_close_display_policy", 2212906737, Nil, main.p_object, policy);  }  // 39
get_tab_close_display_policy :: (main: *TabBar) -> TabBar.CloseButtonDisplayPolicy { call_ret := cast(*TabBar.CloseButtonDisplayPolicy) sys_call("TabBar", "get_tab_close_display_policy", 2956568028, TabBar.CloseButtonDisplayPolicy, main.p_object); return call_ret.*; }  // 40
set_max_tab_width :: (main: *TabBar, width: int) { sys_call("TabBar", "set_max_tab_width", 1286410249, Nil, main.p_object, width);  }  // 41
get_max_tab_width :: (main: *TabBar) -> int { call_ret := cast(*int) sys_call("TabBar", "get_max_tab_width", 3905245786, int, main.p_object); return call_ret.*; }  // 42
set_scrolling_enabled :: (main: *TabBar, enabled: bool) { sys_call("TabBar", "set_scrolling_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 43
get_scrolling_enabled :: (main: *TabBar) -> bool { call_ret := cast(*bool) sys_call("TabBar", "get_scrolling_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 44
set_drag_to_rearrange_enabled :: (main: *TabBar, enabled: bool) { sys_call("TabBar", "set_drag_to_rearrange_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 45
get_drag_to_rearrange_enabled :: (main: *TabBar) -> bool { call_ret := cast(*bool) sys_call("TabBar", "get_drag_to_rearrange_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 46
set_tabs_rearrange_group :: (main: *TabBar, group_id: int) { sys_call("TabBar", "set_tabs_rearrange_group", 1286410249, Nil, main.p_object, group_id);  }  // 47
get_tabs_rearrange_group :: (main: *TabBar) -> int { call_ret := cast(*int) sys_call("TabBar", "get_tabs_rearrange_group", 3905245786, int, main.p_object); return call_ret.*; }  // 48
set_scroll_to_selected :: (main: *TabBar, enabled: bool) { sys_call("TabBar", "set_scroll_to_selected", 2586408642, Nil, main.p_object, enabled);  }  // 49
get_scroll_to_selected :: (main: *TabBar) -> bool { call_ret := cast(*bool) sys_call("TabBar", "get_scroll_to_selected", 36873697, bool, main.p_object); return call_ret.*; }  // 50
set_select_with_rmb :: (main: *TabBar, enabled: bool) { sys_call("TabBar", "set_select_with_rmb", 2586408642, Nil, main.p_object, enabled);  }  // 51
get_select_with_rmb :: (main: *TabBar) -> bool { call_ret := cast(*bool) sys_call("TabBar", "get_select_with_rmb", 36873697, bool, main.p_object); return call_ret.*; }  // 52
set_deselect_enabled :: (main: *TabBar, enabled: bool) { sys_call("TabBar", "set_deselect_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 53
get_deselect_enabled :: (main: *TabBar) -> bool { call_ret := cast(*bool) sys_call("TabBar", "get_deselect_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 54
clear_tabs :: (main: *TabBar) { sys_call("TabBar", "clear_tabs", 3218959716, Nil, main.p_object);  }  // 55

get_tab_count :: (main: *TabContainer) -> int { call_ret := cast(*int) sys_call("TabContainer", "get_tab_count", 3905245786, int, main.p_object); return call_ret.*; }  // 0
set_current_tab :: (main: *TabContainer, tab_idx: int) { sys_call("TabContainer", "set_current_tab", 1286410249, Nil, main.p_object, tab_idx);  }  // 1
get_current_tab :: (main: *TabContainer) -> int { call_ret := cast(*int) sys_call("TabContainer", "get_current_tab", 3905245786, int, main.p_object); return call_ret.*; }  // 2
get_previous_tab :: (main: *TabContainer) -> int { call_ret := cast(*int) sys_call("TabContainer", "get_previous_tab", 3905245786, int, main.p_object); return call_ret.*; }  // 3
select_previous_available :: (main: *TabContainer) -> bool { call_ret := cast(*bool) sys_call("TabContainer", "select_previous_available", 2240911060, bool, main.p_object); return call_ret.*; }  // 4
select_next_available :: (main: *TabContainer) -> bool { call_ret := cast(*bool) sys_call("TabContainer", "select_next_available", 2240911060, bool, main.p_object); return call_ret.*; }  // 5
get_current_tab_control :: (main: *TabContainer) -> *Control { call_ret := cast(*Control) sys_call("TabContainer", "get_current_tab_control", 2783021301, Control, main.p_object); return call_ret; }  // 6
get_tab_bar :: (main: *TabContainer) -> *TabBar { call_ret := cast(*TabBar) sys_call("TabContainer", "get_tab_bar", 1865451809, TabBar, main.p_object); return call_ret; }  // 7
get_tab_control :: (main: *TabContainer, tab_idx: int) -> *Control { call_ret := cast(*Control) sys_call("TabContainer", "get_tab_control", 1065994134, Control, main.p_object, tab_idx); return call_ret; }  // 8
set_tab_alignment :: (main: *TabContainer, alignment: TabBar.AlignmentMode) { sys_call("TabContainer", "set_tab_alignment", 2413632353, Nil, main.p_object, alignment);  }  // 9
get_tab_alignment :: (main: *TabContainer) -> TabBar.AlignmentMode { call_ret := cast(*TabBar.AlignmentMode) sys_call("TabContainer", "get_tab_alignment", 2178122193, TabBar.AlignmentMode, main.p_object); return call_ret.*; }  // 10
set_tabs_position :: (main: *TabContainer, tabs_position: TabContainer.TabPosition) { sys_call("TabContainer", "set_tabs_position", 256673370, Nil, main.p_object, tabs_position);  }  // 11
get_tabs_position :: (main: *TabContainer) -> TabContainer.TabPosition { call_ret := cast(*TabContainer.TabPosition) sys_call("TabContainer", "get_tabs_position", 919937023, TabContainer.TabPosition, main.p_object); return call_ret.*; }  // 12
set_clip_tabs :: (main: *TabContainer, clip_tabs: bool) { sys_call("TabContainer", "set_clip_tabs", 2586408642, Nil, main.p_object, clip_tabs);  }  // 13
get_clip_tabs :: (main: *TabContainer) -> bool { call_ret := cast(*bool) sys_call("TabContainer", "get_clip_tabs", 36873697, bool, main.p_object); return call_ret.*; }  // 14
set_tabs_visible :: (main: *TabContainer, visible: bool) { sys_call("TabContainer", "set_tabs_visible", 2586408642, Nil, main.p_object, visible);  }  // 15
are_tabs_visible :: (main: *TabContainer) -> bool { call_ret := cast(*bool) sys_call("TabContainer", "are_tabs_visible", 36873697, bool, main.p_object); return call_ret.*; }  // 16
set_all_tabs_in_front :: (main: *TabContainer, is_front: bool) { sys_call("TabContainer", "set_all_tabs_in_front", 2586408642, Nil, main.p_object, is_front);  }  // 17
is_all_tabs_in_front :: (main: *TabContainer) -> bool { call_ret := cast(*bool) sys_call("TabContainer", "is_all_tabs_in_front", 36873697, bool, main.p_object); return call_ret.*; }  // 18
set_tab_title :: (main: *TabContainer, tab_idx: int, title: string) { sys_call("TabContainer", "set_tab_title", 501894301, Nil, main.p_object, tab_idx, title);  }  // 19
get_tab_title :: (main: *TabContainer, tab_idx: int) -> gstring { call_ret := cast(*gstring) sys_call("TabContainer", "get_tab_title", 844755477, gstring, main.p_object, tab_idx); return call_ret.*; }  // 20
set_tab_tooltip :: (main: *TabContainer, tab_idx: int, tooltip: string) { sys_call("TabContainer", "set_tab_tooltip", 501894301, Nil, main.p_object, tab_idx, tooltip);  }  // 21
get_tab_tooltip :: (main: *TabContainer, tab_idx: int) -> gstring { call_ret := cast(*gstring) sys_call("TabContainer", "get_tab_tooltip", 844755477, gstring, main.p_object, tab_idx); return call_ret.*; }  // 22
set_tab_icon :: (main: *TabContainer, tab_idx: int, icon: Texture2D) { sys_call("TabContainer", "set_tab_icon", 666127730, Nil, main.p_object, tab_idx, icon);  }  // 23
get_tab_icon :: (main: *TabContainer, tab_idx: int) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("TabContainer", "get_tab_icon", 3536238170, Texture2D, main.p_object, tab_idx); return call_ret; }  // 24
set_tab_icon_max_width :: (main: *TabContainer, tab_idx: int, width: int) { sys_call("TabContainer", "set_tab_icon_max_width", 3937882851, Nil, main.p_object, tab_idx, width);  }  // 25
get_tab_icon_max_width :: (main: *TabContainer, tab_idx: int) -> int { call_ret := cast(*int) sys_call("TabContainer", "get_tab_icon_max_width", 923996154, int, main.p_object, tab_idx); return call_ret.*; }  // 26
set_tab_disabled :: (main: *TabContainer, tab_idx: int, disabled: bool) { sys_call("TabContainer", "set_tab_disabled", 300928843, Nil, main.p_object, tab_idx, disabled);  }  // 27
is_tab_disabled :: (main: *TabContainer, tab_idx: int) -> bool { call_ret := cast(*bool) sys_call("TabContainer", "is_tab_disabled", 1116898809, bool, main.p_object, tab_idx); return call_ret.*; }  // 28
set_tab_hidden :: (main: *TabContainer, tab_idx: int, hidden: bool) { sys_call("TabContainer", "set_tab_hidden", 300928843, Nil, main.p_object, tab_idx, hidden);  }  // 29
is_tab_hidden :: (main: *TabContainer, tab_idx: int) -> bool { call_ret := cast(*bool) sys_call("TabContainer", "is_tab_hidden", 1116898809, bool, main.p_object, tab_idx); return call_ret.*; }  // 30
set_tab_metadata :: (main: *TabContainer, tab_idx: int, metadata: Variant) { sys_call("TabContainer", "set_tab_metadata", 2152698145, Nil, main.p_object, tab_idx, metadata);  }  // 31
get_tab_metadata :: (main: *TabContainer, tab_idx: int) -> Variant { call_ret := cast(*Variant) sys_call("TabContainer", "get_tab_metadata", 4227898402, Variant, main.p_object, tab_idx); return call_ret.*; }  // 32
set_tab_button_icon :: (main: *TabContainer, tab_idx: int, icon: Texture2D) { sys_call("TabContainer", "set_tab_button_icon", 666127730, Nil, main.p_object, tab_idx, icon);  }  // 33
get_tab_button_icon :: (main: *TabContainer, tab_idx: int) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("TabContainer", "get_tab_button_icon", 3536238170, Texture2D, main.p_object, tab_idx); return call_ret; }  // 34
get_tab_idx_at_point :: (main: *TabContainer, point: Vector2) -> int { call_ret := cast(*int) sys_call("TabContainer", "get_tab_idx_at_point", 3820158470, int, main.p_object, point); return call_ret.*; }  // 35
get_tab_idx_from_control :: (main: *TabContainer, control: Control) -> int { call_ret := cast(*int) sys_call("TabContainer", "get_tab_idx_from_control", 2787397975, int, main.p_object, control); return call_ret.*; }  // 36
set_popup :: (main: *TabContainer, popup: Node) { sys_call("TabContainer", "set_popup", 1078189570, Nil, main.p_object, popup);  }  // 37
get_popup :: (main: *TabContainer) -> *Popup { call_ret := cast(*Popup) sys_call("TabContainer", "get_popup", 111095082, Popup, main.p_object); return call_ret; }  // 38
set_drag_to_rearrange_enabled :: (main: *TabContainer, enabled: bool) { sys_call("TabContainer", "set_drag_to_rearrange_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 39
get_drag_to_rearrange_enabled :: (main: *TabContainer) -> bool { call_ret := cast(*bool) sys_call("TabContainer", "get_drag_to_rearrange_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 40
set_tabs_rearrange_group :: (main: *TabContainer, group_id: int) { sys_call("TabContainer", "set_tabs_rearrange_group", 1286410249, Nil, main.p_object, group_id);  }  // 41
get_tabs_rearrange_group :: (main: *TabContainer) -> int { call_ret := cast(*int) sys_call("TabContainer", "get_tabs_rearrange_group", 3905245786, int, main.p_object); return call_ret.*; }  // 42
set_use_hidden_tabs_for_min_size :: (main: *TabContainer, enabled: bool) { sys_call("TabContainer", "set_use_hidden_tabs_for_min_size", 2586408642, Nil, main.p_object, enabled);  }  // 43
get_use_hidden_tabs_for_min_size :: (main: *TabContainer) -> bool { call_ret := cast(*bool) sys_call("TabContainer", "get_use_hidden_tabs_for_min_size", 36873697, bool, main.p_object); return call_ret.*; }  // 44
set_tab_focus_mode :: (main: *TabContainer, focus_mode: Control.FocusMode) { sys_call("TabContainer", "set_tab_focus_mode", 3232914922, Nil, main.p_object, focus_mode);  }  // 45
get_tab_focus_mode :: (main: *TabContainer) -> Control.FocusMode { call_ret := cast(*Control.FocusMode) sys_call("TabContainer", "get_tab_focus_mode", 2132829277, Control.FocusMode, main.p_object); return call_ret.*; }  // 46
set_deselect_enabled :: (main: *TabContainer, enabled: bool) { sys_call("TabContainer", "set_deselect_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 47
get_deselect_enabled :: (main: *TabContainer) -> bool { call_ret := cast(*bool) sys_call("TabContainer", "get_deselect_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 48

has_ime_text :: (main: *TextEdit) -> bool { call_ret := cast(*bool) sys_call("TextEdit", "has_ime_text", 36873697, bool, main.p_object); return call_ret.*; }  // 6
cancel_ime :: (main: *TextEdit) { sys_call("TextEdit", "cancel_ime", 3218959716, Nil, main.p_object);  }  // 7
apply_ime :: (main: *TextEdit) { sys_call("TextEdit", "apply_ime", 3218959716, Nil, main.p_object);  }  // 8
set_editable :: (main: *TextEdit, enabled: bool) { sys_call("TextEdit", "set_editable", 2586408642, Nil, main.p_object, enabled);  }  // 9
is_editable :: (main: *TextEdit) -> bool { call_ret := cast(*bool) sys_call("TextEdit", "is_editable", 36873697, bool, main.p_object); return call_ret.*; }  // 10
set_text_direction :: (main: *TextEdit, direction: Control.TextDirection) { sys_call("TextEdit", "set_text_direction", 119160795, Nil, main.p_object, direction);  }  // 11
get_text_direction :: (main: *TextEdit) -> Control.TextDirection { call_ret := cast(*Control.TextDirection) sys_call("TextEdit", "get_text_direction", 797257663, Control.TextDirection, main.p_object); return call_ret.*; }  // 12
set_language :: (main: *TextEdit, language: string) { sys_call("TextEdit", "set_language", 83702148, Nil, main.p_object, language);  }  // 13
get_language :: (main: *TextEdit) -> gstring { call_ret := cast(*gstring) sys_call("TextEdit", "get_language", 201670096, gstring, main.p_object); return call_ret.*; }  // 14
set_structured_text_bidi_override :: (main: *TextEdit, parser: TextServer.StructuredTextParser) { sys_call("TextEdit", "set_structured_text_bidi_override", 55961453, Nil, main.p_object, parser);  }  // 15
get_structured_text_bidi_override :: (main: *TextEdit) -> TextServer.StructuredTextParser { call_ret := cast(*TextServer.StructuredTextParser) sys_call("TextEdit", "get_structured_text_bidi_override", 3385126229, TextServer.StructuredTextParser, main.p_object); return call_ret.*; }  // 16
set_structured_text_bidi_override_options :: (main: *TextEdit, args: Array) { sys_call("TextEdit", "set_structured_text_bidi_override_options", 381264803, Nil, main.p_object, args);  }  // 17
get_structured_text_bidi_override_options :: (main: *TextEdit) -> Array { call_ret := cast(*Array) sys_call("TextEdit", "get_structured_text_bidi_override_options", 3995934104, Array, main.p_object); return call_ret.*; }  // 18
set_tab_size :: (main: *TextEdit, size: int) { sys_call("TextEdit", "set_tab_size", 1286410249, Nil, main.p_object, size);  }  // 19
get_tab_size :: (main: *TextEdit) -> int { call_ret := cast(*int) sys_call("TextEdit", "get_tab_size", 3905245786, int, main.p_object); return call_ret.*; }  // 20
set_indent_wrapped_lines :: (main: *TextEdit, enabled: bool) { sys_call("TextEdit", "set_indent_wrapped_lines", 2586408642, Nil, main.p_object, enabled);  }  // 21
is_indent_wrapped_lines :: (main: *TextEdit) -> bool { call_ret := cast(*bool) sys_call("TextEdit", "is_indent_wrapped_lines", 36873697, bool, main.p_object); return call_ret.*; }  // 22
set_overtype_mode_enabled :: (main: *TextEdit, enabled: bool) { sys_call("TextEdit", "set_overtype_mode_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 23
is_overtype_mode_enabled :: (main: *TextEdit) -> bool { call_ret := cast(*bool) sys_call("TextEdit", "is_overtype_mode_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 24
set_context_menu_enabled :: (main: *TextEdit, enabled: bool) { sys_call("TextEdit", "set_context_menu_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 25
is_context_menu_enabled :: (main: *TextEdit) -> bool { call_ret := cast(*bool) sys_call("TextEdit", "is_context_menu_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 26
set_emoji_menu_enabled :: (main: *TextEdit, enable: bool) { sys_call("TextEdit", "set_emoji_menu_enabled", 2586408642, Nil, main.p_object, enable);  }  // 27
is_emoji_menu_enabled :: (main: *TextEdit) -> bool { call_ret := cast(*bool) sys_call("TextEdit", "is_emoji_menu_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 28
set_shortcut_keys_enabled :: (main: *TextEdit, enabled: bool) { sys_call("TextEdit", "set_shortcut_keys_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 29
is_shortcut_keys_enabled :: (main: *TextEdit) -> bool { call_ret := cast(*bool) sys_call("TextEdit", "is_shortcut_keys_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 30
set_virtual_keyboard_enabled :: (main: *TextEdit, enabled: bool) { sys_call("TextEdit", "set_virtual_keyboard_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 31
is_virtual_keyboard_enabled :: (main: *TextEdit) -> bool { call_ret := cast(*bool) sys_call("TextEdit", "is_virtual_keyboard_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 32
set_middle_mouse_paste_enabled :: (main: *TextEdit, enabled: bool) { sys_call("TextEdit", "set_middle_mouse_paste_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 33
is_middle_mouse_paste_enabled :: (main: *TextEdit) -> bool { call_ret := cast(*bool) sys_call("TextEdit", "is_middle_mouse_paste_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 34
set_empty_selection_clipboard_enabled :: (main: *TextEdit, enabled: bool) { sys_call("TextEdit", "set_empty_selection_clipboard_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 35
is_empty_selection_clipboard_enabled :: (main: *TextEdit) -> bool { call_ret := cast(*bool) sys_call("TextEdit", "is_empty_selection_clipboard_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 36
clear :: (main: *TextEdit) { sys_call("TextEdit", "clear", 3218959716, Nil, main.p_object);  }  // 37
set_text :: (main: *TextEdit, text: string) { sys_call("TextEdit", "set_text", 83702148, Nil, main.p_object, text);  }  // 38
get_text :: (main: *TextEdit) -> gstring { call_ret := cast(*gstring) sys_call("TextEdit", "get_text", 201670096, gstring, main.p_object); return call_ret.*; }  // 39
get_line_count :: (main: *TextEdit) -> int { call_ret := cast(*int) sys_call("TextEdit", "get_line_count", 3905245786, int, main.p_object); return call_ret.*; }  // 40
set_placeholder :: (main: *TextEdit, text: string) { sys_call("TextEdit", "set_placeholder", 83702148, Nil, main.p_object, text);  }  // 41
get_placeholder :: (main: *TextEdit) -> gstring { call_ret := cast(*gstring) sys_call("TextEdit", "get_placeholder", 201670096, gstring, main.p_object); return call_ret.*; }  // 42
set_line :: (main: *TextEdit, line: int, new_text: string) { sys_call("TextEdit", "set_line", 501894301, Nil, main.p_object, line, new_text);  }  // 43
get_line :: (main: *TextEdit, line: int) -> gstring { call_ret := cast(*gstring) sys_call("TextEdit", "get_line", 844755477, gstring, main.p_object, line); return call_ret.*; }  // 44
get_line_with_ime :: (main: *TextEdit, line: int) -> gstring { call_ret := cast(*gstring) sys_call("TextEdit", "get_line_with_ime", 844755477, gstring, main.p_object, line); return call_ret.*; }  // 45
get_line_width :: (main: *TextEdit, line: int) -> int { call_ret := cast(*int) sys_call("TextEdit", "get_line_width", 688195400, int, main.p_object, line); return call_ret.*; }  // 46
get_line_height :: (main: *TextEdit) -> int { call_ret := cast(*int) sys_call("TextEdit", "get_line_height", 3905245786, int, main.p_object); return call_ret.*; }  // 47
get_indent_level :: (main: *TextEdit, line: int) -> int { call_ret := cast(*int) sys_call("TextEdit", "get_indent_level", 923996154, int, main.p_object, line); return call_ret.*; }  // 48
get_first_non_whitespace_column :: (main: *TextEdit, line: int) -> int { call_ret := cast(*int) sys_call("TextEdit", "get_first_non_whitespace_column", 923996154, int, main.p_object, line); return call_ret.*; }  // 49
swap_lines :: (main: *TextEdit, from_line: int, to_line: int) { sys_call("TextEdit", "swap_lines", 3937882851, Nil, main.p_object, from_line, to_line);  }  // 50
insert_line_at :: (main: *TextEdit, line: int, text: string) { sys_call("TextEdit", "insert_line_at", 501894301, Nil, main.p_object, line, text);  }  // 51
remove_line_at :: (main: *TextEdit, line: int) { sys_call("TextEdit", "remove_line_at", 972357352, Nil, main.p_object, line);  }  // 52
insert_text_at_caret :: (main: *TextEdit, text: string) { sys_call("TextEdit", "insert_text_at_caret", 2697778442, Nil, main.p_object, text);  }  // 53
insert_text :: (main: *TextEdit, text: string, line: int, column: int) { sys_call("TextEdit", "insert_text", 1881564334, Nil, main.p_object, text, line, column);  }  // 54
remove_text :: (main: *TextEdit, from_line: int, from_column: int, to_line: int, to_column: int) { sys_call("TextEdit", "remove_text", 4275841770, Nil, main.p_object, from_line, from_column, to_line, to_column);  }  // 55
get_last_unhidden_line :: (main: *TextEdit) -> int { call_ret := cast(*int) sys_call("TextEdit", "get_last_unhidden_line", 3905245786, int, main.p_object); return call_ret.*; }  // 56
get_next_visible_line_offset_from :: (main: *TextEdit, line: int, visible_amount: int) -> int { call_ret := cast(*int) sys_call("TextEdit", "get_next_visible_line_offset_from", 3175239445, int, main.p_object, line, visible_amount); return call_ret.*; }  // 57
get_next_visible_line_index_offset_from :: (main: *TextEdit, line: int, wrap_index: int, visible_amount: int) -> Vector2i { call_ret := cast(*Vector2i) sys_call("TextEdit", "get_next_visible_line_index_offset_from", 3386475622, Vector2i, main.p_object, line, wrap_index, visible_amount); return call_ret.*; }  // 58
backspace :: (main: *TextEdit) { sys_call("TextEdit", "backspace", 1025054187, Nil, main.p_object);  }  // 59
cut :: (main: *TextEdit) { sys_call("TextEdit", "cut", 1025054187, Nil, main.p_object);  }  // 60
copy :: (main: *TextEdit) { sys_call("TextEdit", "copy", 1025054187, Nil, main.p_object);  }  // 61
paste :: (main: *TextEdit) { sys_call("TextEdit", "paste", 1025054187, Nil, main.p_object);  }  // 62
paste_primary_clipboard :: (main: *TextEdit) { sys_call("TextEdit", "paste_primary_clipboard", 1025054187, Nil, main.p_object);  }  // 63
start_action :: (main: *TextEdit, action: TextEdit.EditAction) { sys_call("TextEdit", "start_action", 2834827583, Nil, main.p_object, action);  }  // 64
end_action :: (main: *TextEdit) { sys_call("TextEdit", "end_action", 3218959716, Nil, main.p_object);  }  // 65
begin_complex_operation :: (main: *TextEdit) { sys_call("TextEdit", "begin_complex_operation", 3218959716, Nil, main.p_object);  }  // 66
end_complex_operation :: (main: *TextEdit) { sys_call("TextEdit", "end_complex_operation", 3218959716, Nil, main.p_object);  }  // 67
has_undo :: (main: *TextEdit) -> bool { call_ret := cast(*bool) sys_call("TextEdit", "has_undo", 36873697, bool, main.p_object); return call_ret.*; }  // 68
has_redo :: (main: *TextEdit) -> bool { call_ret := cast(*bool) sys_call("TextEdit", "has_redo", 36873697, bool, main.p_object); return call_ret.*; }  // 69
undo :: (main: *TextEdit) { sys_call("TextEdit", "undo", 3218959716, Nil, main.p_object);  }  // 70
redo :: (main: *TextEdit) { sys_call("TextEdit", "redo", 3218959716, Nil, main.p_object);  }  // 71
clear_undo_history :: (main: *TextEdit) { sys_call("TextEdit", "clear_undo_history", 3218959716, Nil, main.p_object);  }  // 72
tag_saved_version :: (main: *TextEdit) { sys_call("TextEdit", "tag_saved_version", 3218959716, Nil, main.p_object);  }  // 73
get_version :: (main: *TextEdit) -> int { call_ret := cast(*int) sys_call("TextEdit", "get_version", 3905245786, int, main.p_object); return call_ret.*; }  // 74
get_saved_version :: (main: *TextEdit) -> int { call_ret := cast(*int) sys_call("TextEdit", "get_saved_version", 3905245786, int, main.p_object); return call_ret.*; }  // 75
set_search_text :: (main: *TextEdit, search_text: string) { sys_call("TextEdit", "set_search_text", 83702148, Nil, main.p_object, search_text);  }  // 76
set_search_flags :: (main: *TextEdit, flags: int) { sys_call("TextEdit", "set_search_flags", 1286410249, Nil, main.p_object, flags);  }  // 77
search :: (main: *TextEdit, text: string, flags: int, from_line: int, from_column: int) -> Vector2i { call_ret := cast(*Vector2i) sys_call("TextEdit", "search", 1203739136, Vector2i, main.p_object, text, flags, from_line, from_column); return call_ret.*; }  // 78
set_tooltip_request_func :: (main: *TextEdit, callback: Callable) { sys_call("TextEdit", "set_tooltip_request_func", 1611583062, Nil, main.p_object, callback);  }  // 79
get_local_mouse_pos :: (main: *TextEdit) -> Vector2 { call_ret := cast(*Vector2) sys_call("TextEdit", "get_local_mouse_pos", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 80
get_word_at_pos :: (main: *TextEdit, position: Vector2) -> gstring { call_ret := cast(*gstring) sys_call("TextEdit", "get_word_at_pos", 3674420000, gstring, main.p_object, position); return call_ret.*; }  // 81
get_line_column_at_pos :: (main: *TextEdit, position: Vector2i) -> Vector2i { call_ret := cast(*Vector2i) sys_call("TextEdit", "get_line_column_at_pos", 3472935744, Vector2i, main.p_object, position); return call_ret.*; }  // 82
get_pos_at_line_column :: (main: *TextEdit, line: int, column: int) -> Vector2i { call_ret := cast(*Vector2i) sys_call("TextEdit", "get_pos_at_line_column", 410388347, Vector2i, main.p_object, line, column); return call_ret.*; }  // 83
get_rect_at_line_column :: (main: *TextEdit, line: int, column: int) -> Rect2i { call_ret := cast(*Rect2i) sys_call("TextEdit", "get_rect_at_line_column", 3256618057, Rect2i, main.p_object, line, column); return call_ret.*; }  // 84
get_minimap_line_at_pos :: (main: *TextEdit, position: Vector2i) -> int { call_ret := cast(*int) sys_call("TextEdit", "get_minimap_line_at_pos", 2485466453, int, main.p_object, position); return call_ret.*; }  // 85
is_dragging_cursor :: (main: *TextEdit) -> bool { call_ret := cast(*bool) sys_call("TextEdit", "is_dragging_cursor", 36873697, bool, main.p_object); return call_ret.*; }  // 86
is_mouse_over_selection :: (main: *TextEdit, edges: bool) -> bool { call_ret := cast(*bool) sys_call("TextEdit", "is_mouse_over_selection", 1840282309, bool, main.p_object, edges); return call_ret.*; }  // 87
set_caret_type :: (main: *TextEdit, type: TextEdit.CaretType) { sys_call("TextEdit", "set_caret_type", 1211596914, Nil, main.p_object, type);  }  // 88
get_caret_type :: (main: *TextEdit) -> TextEdit.CaretType { call_ret := cast(*TextEdit.CaretType) sys_call("TextEdit", "get_caret_type", 2830252959, TextEdit.CaretType, main.p_object); return call_ret.*; }  // 89
set_caret_blink_enabled :: (main: *TextEdit, enable: bool) { sys_call("TextEdit", "set_caret_blink_enabled", 2586408642, Nil, main.p_object, enable);  }  // 90
is_caret_blink_enabled :: (main: *TextEdit) -> bool { call_ret := cast(*bool) sys_call("TextEdit", "is_caret_blink_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 91
set_caret_blink_interval :: (main: *TextEdit, interval: float) { sys_call("TextEdit", "set_caret_blink_interval", 373806689, Nil, main.p_object, interval);  }  // 92
get_caret_blink_interval :: (main: *TextEdit) -> float { call_ret := cast(*float) sys_call("TextEdit", "get_caret_blink_interval", 1740695150, float, main.p_object); return call_ret.*; }  // 93
set_draw_caret_when_editable_disabled :: (main: *TextEdit, enable: bool) { sys_call("TextEdit", "set_draw_caret_when_editable_disabled", 2586408642, Nil, main.p_object, enable);  }  // 94
is_drawing_caret_when_editable_disabled :: (main: *TextEdit) -> bool { call_ret := cast(*bool) sys_call("TextEdit", "is_drawing_caret_when_editable_disabled", 36873697, bool, main.p_object); return call_ret.*; }  // 95
set_move_caret_on_right_click_enabled :: (main: *TextEdit, enable: bool) { sys_call("TextEdit", "set_move_caret_on_right_click_enabled", 2586408642, Nil, main.p_object, enable);  }  // 96
is_move_caret_on_right_click_enabled :: (main: *TextEdit) -> bool { call_ret := cast(*bool) sys_call("TextEdit", "is_move_caret_on_right_click_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 97
set_caret_mid_grapheme_enabled :: (main: *TextEdit, enabled: bool) { sys_call("TextEdit", "set_caret_mid_grapheme_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 98
is_caret_mid_grapheme_enabled :: (main: *TextEdit) -> bool { call_ret := cast(*bool) sys_call("TextEdit", "is_caret_mid_grapheme_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 99
set_multiple_carets_enabled :: (main: *TextEdit, enabled: bool) { sys_call("TextEdit", "set_multiple_carets_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 100
is_multiple_carets_enabled :: (main: *TextEdit) -> bool { call_ret := cast(*bool) sys_call("TextEdit", "is_multiple_carets_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 101
add_caret :: (main: *TextEdit, line: int, column: int) -> int { call_ret := cast(*int) sys_call("TextEdit", "add_caret", 50157827, int, main.p_object, line, column); return call_ret.*; }  // 102
remove_caret :: (main: *TextEdit, caret: int) { sys_call("TextEdit", "remove_caret", 1286410249, Nil, main.p_object, caret);  }  // 103
remove_secondary_carets :: (main: *TextEdit) { sys_call("TextEdit", "remove_secondary_carets", 3218959716, Nil, main.p_object);  }  // 104
get_caret_count :: (main: *TextEdit) -> int { call_ret := cast(*int) sys_call("TextEdit", "get_caret_count", 3905245786, int, main.p_object); return call_ret.*; }  // 105
add_caret_at_carets :: (main: *TextEdit, below: bool) { sys_call("TextEdit", "add_caret_at_carets", 2586408642, Nil, main.p_object, below);  }  // 106
get_sorted_carets :: (main: *TextEdit) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("TextEdit", "get_sorted_carets", 2131714034, PackedInt32Array, main.p_object); return call_ret.*; }  // 107
collapse_carets :: (main: *TextEdit, from_line: int, from_column: int, to_line: int, to_column: int) { sys_call("TextEdit", "collapse_carets", 228654177, Nil, main.p_object, from_line, from_column, to_line, to_column);  }  // 108
merge_overlapping_carets :: (main: *TextEdit) { sys_call("TextEdit", "merge_overlapping_carets", 3218959716, Nil, main.p_object);  }  // 109
begin_multicaret_edit :: (main: *TextEdit) { sys_call("TextEdit", "begin_multicaret_edit", 3218959716, Nil, main.p_object);  }  // 110
end_multicaret_edit :: (main: *TextEdit) { sys_call("TextEdit", "end_multicaret_edit", 3218959716, Nil, main.p_object);  }  // 111
is_in_mulitcaret_edit :: (main: *TextEdit) -> bool { call_ret := cast(*bool) sys_call("TextEdit", "is_in_mulitcaret_edit", 36873697, bool, main.p_object); return call_ret.*; }  // 112
multicaret_edit_ignore_caret :: (main: *TextEdit, caret_index: int) -> bool { call_ret := cast(*bool) sys_call("TextEdit", "multicaret_edit_ignore_caret", 1116898809, bool, main.p_object, caret_index); return call_ret.*; }  // 113
is_caret_visible :: (main: *TextEdit) -> bool { call_ret := cast(*bool) sys_call("TextEdit", "is_caret_visible", 1051549951, bool, main.p_object); return call_ret.*; }  // 114
get_caret_draw_pos :: (main: *TextEdit) -> Vector2 { call_ret := cast(*Vector2) sys_call("TextEdit", "get_caret_draw_pos", 478253731, Vector2, main.p_object); return call_ret.*; }  // 115
set_caret_line :: (main: *TextEdit, line: int) { sys_call("TextEdit", "set_caret_line", 1302582944, Nil, main.p_object, line);  }  // 116
get_caret_line :: (main: *TextEdit) -> int { call_ret := cast(*int) sys_call("TextEdit", "get_caret_line", 1591665591, int, main.p_object); return call_ret.*; }  // 117
set_caret_column :: (main: *TextEdit, column: int) { sys_call("TextEdit", "set_caret_column", 3796796178, Nil, main.p_object, column);  }  // 118
get_caret_column :: (main: *TextEdit) -> int { call_ret := cast(*int) sys_call("TextEdit", "get_caret_column", 1591665591, int, main.p_object); return call_ret.*; }  // 119
get_caret_wrap_index :: (main: *TextEdit) -> int { call_ret := cast(*int) sys_call("TextEdit", "get_caret_wrap_index", 1591665591, int, main.p_object); return call_ret.*; }  // 120
get_word_under_caret :: (main: *TextEdit) -> gstring { call_ret := cast(*gstring) sys_call("TextEdit", "get_word_under_caret", 3929349208, gstring, main.p_object); return call_ret.*; }  // 121
set_use_default_word_separators :: (main: *TextEdit, enabled: bool) { sys_call("TextEdit", "set_use_default_word_separators", 2586408642, Nil, main.p_object, enabled);  }  // 122
is_default_word_separators_enabled :: (main: *TextEdit) -> bool { call_ret := cast(*bool) sys_call("TextEdit", "is_default_word_separators_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 123
set_use_custom_word_separators :: (main: *TextEdit, enabled: bool) { sys_call("TextEdit", "set_use_custom_word_separators", 2586408642, Nil, main.p_object, enabled);  }  // 124
is_custom_word_separators_enabled :: (main: *TextEdit) -> bool { call_ret := cast(*bool) sys_call("TextEdit", "is_custom_word_separators_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 125
set_custom_word_separators :: (main: *TextEdit, custom_word_separators: string) { sys_call("TextEdit", "set_custom_word_separators", 83702148, Nil, main.p_object, custom_word_separators);  }  // 126
get_custom_word_separators :: (main: *TextEdit) -> gstring { call_ret := cast(*gstring) sys_call("TextEdit", "get_custom_word_separators", 201670096, gstring, main.p_object); return call_ret.*; }  // 127
set_selecting_enabled :: (main: *TextEdit, enable: bool) { sys_call("TextEdit", "set_selecting_enabled", 2586408642, Nil, main.p_object, enable);  }  // 128
is_selecting_enabled :: (main: *TextEdit) -> bool { call_ret := cast(*bool) sys_call("TextEdit", "is_selecting_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 129
set_deselect_on_focus_loss_enabled :: (main: *TextEdit, enable: bool) { sys_call("TextEdit", "set_deselect_on_focus_loss_enabled", 2586408642, Nil, main.p_object, enable);  }  // 130
is_deselect_on_focus_loss_enabled :: (main: *TextEdit) -> bool { call_ret := cast(*bool) sys_call("TextEdit", "is_deselect_on_focus_loss_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 131
set_drag_and_drop_selection_enabled :: (main: *TextEdit, enable: bool) { sys_call("TextEdit", "set_drag_and_drop_selection_enabled", 2586408642, Nil, main.p_object, enable);  }  // 132
is_drag_and_drop_selection_enabled :: (main: *TextEdit) -> bool { call_ret := cast(*bool) sys_call("TextEdit", "is_drag_and_drop_selection_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 133
set_selection_mode :: (main: *TextEdit, mode: TextEdit.SelectionMode) { sys_call("TextEdit", "set_selection_mode", 1658801786, Nil, main.p_object, mode);  }  // 134
get_selection_mode :: (main: *TextEdit) -> TextEdit.SelectionMode { call_ret := cast(*TextEdit.SelectionMode) sys_call("TextEdit", "get_selection_mode", 3750106938, TextEdit.SelectionMode, main.p_object); return call_ret.*; }  // 135
select_all :: (main: *TextEdit) { sys_call("TextEdit", "select_all", 3218959716, Nil, main.p_object);  }  // 136
select_word_under_caret :: (main: *TextEdit) { sys_call("TextEdit", "select_word_under_caret", 1025054187, Nil, main.p_object);  }  // 137
add_selection_for_next_occurrence :: (main: *TextEdit) { sys_call("TextEdit", "add_selection_for_next_occurrence", 3218959716, Nil, main.p_object);  }  // 138
skip_selection_for_next_occurrence :: (main: *TextEdit) { sys_call("TextEdit", "skip_selection_for_next_occurrence", 3218959716, Nil, main.p_object);  }  // 139
select :: (main: *TextEdit, origin_line: int, origin_column: int, caret_line: int, caret_column: int) { sys_call("TextEdit", "select", 2560984452, Nil, main.p_object, origin_line, origin_column, caret_line, caret_column);  }  // 140
has_selection :: (main: *TextEdit) -> bool { call_ret := cast(*bool) sys_call("TextEdit", "has_selection", 2824505868, bool, main.p_object); return call_ret.*; }  // 141
get_selected_text :: (main: *TextEdit) -> gstring { call_ret := cast(*gstring) sys_call("TextEdit", "get_selected_text", 2309358862, gstring, main.p_object); return call_ret.*; }  // 142
get_selection_at_line_column :: (main: *TextEdit, line: int, column: int) -> int { call_ret := cast(*int) sys_call("TextEdit", "get_selection_at_line_column", 1810224333, int, main.p_object, line, column); return call_ret.*; }  // 143
get_line_ranges_from_carets :: (main: *TextEdit) -> [] Vector2i { call_ret := cast(*[] Vector2i) sys_call("TextEdit", "get_line_ranges_from_carets", 2393089247, [] Vector2i, main.p_object); return call_ret.*; }  // 144
get_selection_origin_line :: (main: *TextEdit) -> int { call_ret := cast(*int) sys_call("TextEdit", "get_selection_origin_line", 1591665591, int, main.p_object); return call_ret.*; }  // 145
get_selection_origin_column :: (main: *TextEdit) -> int { call_ret := cast(*int) sys_call("TextEdit", "get_selection_origin_column", 1591665591, int, main.p_object); return call_ret.*; }  // 146
set_selection_origin_line :: (main: *TextEdit, line: int) { sys_call("TextEdit", "set_selection_origin_line", 195434140, Nil, main.p_object, line);  }  // 147
set_selection_origin_column :: (main: *TextEdit, column: int) { sys_call("TextEdit", "set_selection_origin_column", 2230941749, Nil, main.p_object, column);  }  // 148
get_selection_from_line :: (main: *TextEdit) -> int { call_ret := cast(*int) sys_call("TextEdit", "get_selection_from_line", 1591665591, int, main.p_object); return call_ret.*; }  // 149
get_selection_from_column :: (main: *TextEdit) -> int { call_ret := cast(*int) sys_call("TextEdit", "get_selection_from_column", 1591665591, int, main.p_object); return call_ret.*; }  // 150
get_selection_to_line :: (main: *TextEdit) -> int { call_ret := cast(*int) sys_call("TextEdit", "get_selection_to_line", 1591665591, int, main.p_object); return call_ret.*; }  // 151
get_selection_to_column :: (main: *TextEdit) -> int { call_ret := cast(*int) sys_call("TextEdit", "get_selection_to_column", 1591665591, int, main.p_object); return call_ret.*; }  // 152
is_caret_after_selection_origin :: (main: *TextEdit) -> bool { call_ret := cast(*bool) sys_call("TextEdit", "is_caret_after_selection_origin", 1051549951, bool, main.p_object); return call_ret.*; }  // 153
deselect :: (main: *TextEdit) { sys_call("TextEdit", "deselect", 1025054187, Nil, main.p_object);  }  // 154
delete_selection :: (main: *TextEdit) { sys_call("TextEdit", "delete_selection", 1025054187, Nil, main.p_object);  }  // 155
set_line_wrapping_mode :: (main: *TextEdit, mode: TextEdit.LineWrappingMode) { sys_call("TextEdit", "set_line_wrapping_mode", 2525115309, Nil, main.p_object, mode);  }  // 156
get_line_wrapping_mode :: (main: *TextEdit) -> TextEdit.LineWrappingMode { call_ret := cast(*TextEdit.LineWrappingMode) sys_call("TextEdit", "get_line_wrapping_mode", 3562716114, TextEdit.LineWrappingMode, main.p_object); return call_ret.*; }  // 157
set_autowrap_mode :: (main: *TextEdit, autowrap_mode: TextServer.AutowrapMode) { sys_call("TextEdit", "set_autowrap_mode", 3289138044, Nil, main.p_object, autowrap_mode);  }  // 158
get_autowrap_mode :: (main: *TextEdit) -> TextServer.AutowrapMode { call_ret := cast(*TextServer.AutowrapMode) sys_call("TextEdit", "get_autowrap_mode", 1549071663, TextServer.AutowrapMode, main.p_object); return call_ret.*; }  // 159
is_line_wrapped :: (main: *TextEdit, line: int) -> bool { call_ret := cast(*bool) sys_call("TextEdit", "is_line_wrapped", 1116898809, bool, main.p_object, line); return call_ret.*; }  // 160
get_line_wrap_count :: (main: *TextEdit, line: int) -> int { call_ret := cast(*int) sys_call("TextEdit", "get_line_wrap_count", 923996154, int, main.p_object, line); return call_ret.*; }  // 161
get_line_wrap_index_at_column :: (main: *TextEdit, line: int, column: int) -> int { call_ret := cast(*int) sys_call("TextEdit", "get_line_wrap_index_at_column", 3175239445, int, main.p_object, line, column); return call_ret.*; }  // 162
get_line_wrapped_text :: (main: *TextEdit, line: int) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("TextEdit", "get_line_wrapped_text", 647634434, PackedStringArray, main.p_object, line); return call_ret.*; }  // 163
set_smooth_scroll_enabled :: (main: *TextEdit, enable: bool) { sys_call("TextEdit", "set_smooth_scroll_enabled", 2586408642, Nil, main.p_object, enable);  }  // 164
is_smooth_scroll_enabled :: (main: *TextEdit) -> bool { call_ret := cast(*bool) sys_call("TextEdit", "is_smooth_scroll_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 165
get_v_scroll_bar :: (main: *TextEdit) -> *VScrollBar { call_ret := cast(*VScrollBar) sys_call("TextEdit", "get_v_scroll_bar", 3226026593, VScrollBar, main.p_object); return call_ret; }  // 166
get_h_scroll_bar :: (main: *TextEdit) -> *HScrollBar { call_ret := cast(*HScrollBar) sys_call("TextEdit", "get_h_scroll_bar", 3774687988, HScrollBar, main.p_object); return call_ret; }  // 167
set_v_scroll :: (main: *TextEdit, value: float) { sys_call("TextEdit", "set_v_scroll", 373806689, Nil, main.p_object, value);  }  // 168
get_v_scroll :: (main: *TextEdit) -> float { call_ret := cast(*float) sys_call("TextEdit", "get_v_scroll", 1740695150, float, main.p_object); return call_ret.*; }  // 169
set_h_scroll :: (main: *TextEdit, value: int) { sys_call("TextEdit", "set_h_scroll", 1286410249, Nil, main.p_object, value);  }  // 170
get_h_scroll :: (main: *TextEdit) -> int { call_ret := cast(*int) sys_call("TextEdit", "get_h_scroll", 3905245786, int, main.p_object); return call_ret.*; }  // 171
set_scroll_past_end_of_file_enabled :: (main: *TextEdit, enable: bool) { sys_call("TextEdit", "set_scroll_past_end_of_file_enabled", 2586408642, Nil, main.p_object, enable);  }  // 172
is_scroll_past_end_of_file_enabled :: (main: *TextEdit) -> bool { call_ret := cast(*bool) sys_call("TextEdit", "is_scroll_past_end_of_file_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 173
set_v_scroll_speed :: (main: *TextEdit, speed: float) { sys_call("TextEdit", "set_v_scroll_speed", 373806689, Nil, main.p_object, speed);  }  // 174
get_v_scroll_speed :: (main: *TextEdit) -> float { call_ret := cast(*float) sys_call("TextEdit", "get_v_scroll_speed", 1740695150, float, main.p_object); return call_ret.*; }  // 175
set_fit_content_height_enabled :: (main: *TextEdit, enabled: bool) { sys_call("TextEdit", "set_fit_content_height_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 176
is_fit_content_height_enabled :: (main: *TextEdit) -> bool { call_ret := cast(*bool) sys_call("TextEdit", "is_fit_content_height_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 177
set_fit_content_width_enabled :: (main: *TextEdit, enabled: bool) { sys_call("TextEdit", "set_fit_content_width_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 178
is_fit_content_width_enabled :: (main: *TextEdit) -> bool { call_ret := cast(*bool) sys_call("TextEdit", "is_fit_content_width_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 179
get_scroll_pos_for_line :: (main: *TextEdit, line: int) -> float { call_ret := cast(*float) sys_call("TextEdit", "get_scroll_pos_for_line", 3929084198, float, main.p_object, line); return call_ret.*; }  // 180
set_line_as_first_visible :: (main: *TextEdit, line: int) { sys_call("TextEdit", "set_line_as_first_visible", 2230941749, Nil, main.p_object, line);  }  // 181
get_first_visible_line :: (main: *TextEdit) -> int { call_ret := cast(*int) sys_call("TextEdit", "get_first_visible_line", 3905245786, int, main.p_object); return call_ret.*; }  // 182
set_line_as_center_visible :: (main: *TextEdit, line: int) { sys_call("TextEdit", "set_line_as_center_visible", 2230941749, Nil, main.p_object, line);  }  // 183
set_line_as_last_visible :: (main: *TextEdit, line: int) { sys_call("TextEdit", "set_line_as_last_visible", 2230941749, Nil, main.p_object, line);  }  // 184
get_last_full_visible_line :: (main: *TextEdit) -> int { call_ret := cast(*int) sys_call("TextEdit", "get_last_full_visible_line", 3905245786, int, main.p_object); return call_ret.*; }  // 185
get_last_full_visible_line_wrap_index :: (main: *TextEdit) -> int { call_ret := cast(*int) sys_call("TextEdit", "get_last_full_visible_line_wrap_index", 3905245786, int, main.p_object); return call_ret.*; }  // 186
get_visible_line_count :: (main: *TextEdit) -> int { call_ret := cast(*int) sys_call("TextEdit", "get_visible_line_count", 3905245786, int, main.p_object); return call_ret.*; }  // 187
get_visible_line_count_in_range :: (main: *TextEdit, from_line: int, to_line: int) -> int { call_ret := cast(*int) sys_call("TextEdit", "get_visible_line_count_in_range", 3175239445, int, main.p_object, from_line, to_line); return call_ret.*; }  // 188
get_total_visible_line_count :: (main: *TextEdit) -> int { call_ret := cast(*int) sys_call("TextEdit", "get_total_visible_line_count", 3905245786, int, main.p_object); return call_ret.*; }  // 189
adjust_viewport_to_caret :: (main: *TextEdit) { sys_call("TextEdit", "adjust_viewport_to_caret", 1995695955, Nil, main.p_object);  }  // 190
center_viewport_to_caret :: (main: *TextEdit) { sys_call("TextEdit", "center_viewport_to_caret", 1995695955, Nil, main.p_object);  }  // 191
set_draw_minimap :: (main: *TextEdit, enabled: bool) { sys_call("TextEdit", "set_draw_minimap", 2586408642, Nil, main.p_object, enabled);  }  // 192
is_drawing_minimap :: (main: *TextEdit) -> bool { call_ret := cast(*bool) sys_call("TextEdit", "is_drawing_minimap", 36873697, bool, main.p_object); return call_ret.*; }  // 193
set_minimap_width :: (main: *TextEdit, width: int) { sys_call("TextEdit", "set_minimap_width", 1286410249, Nil, main.p_object, width);  }  // 194
get_minimap_width :: (main: *TextEdit) -> int { call_ret := cast(*int) sys_call("TextEdit", "get_minimap_width", 3905245786, int, main.p_object); return call_ret.*; }  // 195
get_minimap_visible_lines :: (main: *TextEdit) -> int { call_ret := cast(*int) sys_call("TextEdit", "get_minimap_visible_lines", 3905245786, int, main.p_object); return call_ret.*; }  // 196
add_gutter :: (main: *TextEdit) { sys_call("TextEdit", "add_gutter", 1025054187, Nil, main.p_object);  }  // 197
remove_gutter :: (main: *TextEdit, gutter: int) { sys_call("TextEdit", "remove_gutter", 1286410249, Nil, main.p_object, gutter);  }  // 198
get_gutter_count :: (main: *TextEdit) -> int { call_ret := cast(*int) sys_call("TextEdit", "get_gutter_count", 3905245786, int, main.p_object); return call_ret.*; }  // 199
set_gutter_name :: (main: *TextEdit, gutter: int, name: string) { sys_call("TextEdit", "set_gutter_name", 501894301, Nil, main.p_object, gutter, name);  }  // 200
get_gutter_name :: (main: *TextEdit, gutter: int) -> gstring { call_ret := cast(*gstring) sys_call("TextEdit", "get_gutter_name", 844755477, gstring, main.p_object, gutter); return call_ret.*; }  // 201
set_gutter_type :: (main: *TextEdit, gutter: int, type: TextEdit.GutterType) { sys_call("TextEdit", "set_gutter_type", 1088959071, Nil, main.p_object, gutter, type);  }  // 202
get_gutter_type :: (main: *TextEdit, gutter: int) -> TextEdit.GutterType { call_ret := cast(*TextEdit.GutterType) sys_call("TextEdit", "get_gutter_type", 1159699127, TextEdit.GutterType, main.p_object, gutter); return call_ret.*; }  // 203
set_gutter_width :: (main: *TextEdit, gutter: int, width: int) { sys_call("TextEdit", "set_gutter_width", 3937882851, Nil, main.p_object, gutter, width);  }  // 204
get_gutter_width :: (main: *TextEdit, gutter: int) -> int { call_ret := cast(*int) sys_call("TextEdit", "get_gutter_width", 923996154, int, main.p_object, gutter); return call_ret.*; }  // 205
set_gutter_draw :: (main: *TextEdit, gutter: int, draw: bool) { sys_call("TextEdit", "set_gutter_draw", 300928843, Nil, main.p_object, gutter, draw);  }  // 206
is_gutter_drawn :: (main: *TextEdit, gutter: int) -> bool { call_ret := cast(*bool) sys_call("TextEdit", "is_gutter_drawn", 1116898809, bool, main.p_object, gutter); return call_ret.*; }  // 207
set_gutter_clickable :: (main: *TextEdit, gutter: int, clickable: bool) { sys_call("TextEdit", "set_gutter_clickable", 300928843, Nil, main.p_object, gutter, clickable);  }  // 208
is_gutter_clickable :: (main: *TextEdit, gutter: int) -> bool { call_ret := cast(*bool) sys_call("TextEdit", "is_gutter_clickable", 1116898809, bool, main.p_object, gutter); return call_ret.*; }  // 209
set_gutter_overwritable :: (main: *TextEdit, gutter: int, overwritable: bool) { sys_call("TextEdit", "set_gutter_overwritable", 300928843, Nil, main.p_object, gutter, overwritable);  }  // 210
is_gutter_overwritable :: (main: *TextEdit, gutter: int) -> bool { call_ret := cast(*bool) sys_call("TextEdit", "is_gutter_overwritable", 1116898809, bool, main.p_object, gutter); return call_ret.*; }  // 211
merge_gutters :: (main: *TextEdit, from_line: int, to_line: int) { sys_call("TextEdit", "merge_gutters", 3937882851, Nil, main.p_object, from_line, to_line);  }  // 212
set_gutter_custom_draw :: (main: *TextEdit, column: int, draw_callback: Callable) { sys_call("TextEdit", "set_gutter_custom_draw", 957362965, Nil, main.p_object, column, draw_callback);  }  // 213
get_total_gutter_width :: (main: *TextEdit) -> int { call_ret := cast(*int) sys_call("TextEdit", "get_total_gutter_width", 3905245786, int, main.p_object); return call_ret.*; }  // 214
set_line_gutter_metadata :: (main: *TextEdit, line: int, gutter: int, metadata: Variant) { sys_call("TextEdit", "set_line_gutter_metadata", 2060538656, Nil, main.p_object, line, gutter, metadata);  }  // 215
get_line_gutter_metadata :: (main: *TextEdit, line: int, gutter: int) -> Variant { call_ret := cast(*Variant) sys_call("TextEdit", "get_line_gutter_metadata", 678354945, Variant, main.p_object, line, gutter); return call_ret.*; }  // 216
set_line_gutter_text :: (main: *TextEdit, line: int, gutter: int, text: string) { sys_call("TextEdit", "set_line_gutter_text", 2285447957, Nil, main.p_object, line, gutter, text);  }  // 217
get_line_gutter_text :: (main: *TextEdit, line: int, gutter: int) -> gstring { call_ret := cast(*gstring) sys_call("TextEdit", "get_line_gutter_text", 1391810591, gstring, main.p_object, line, gutter); return call_ret.*; }  // 218
set_line_gutter_icon :: (main: *TextEdit, line: int, gutter: int, icon: Texture2D) { sys_call("TextEdit", "set_line_gutter_icon", 176101966, Nil, main.p_object, line, gutter, icon);  }  // 219
get_line_gutter_icon :: (main: *TextEdit, line: int, gutter: int) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("TextEdit", "get_line_gutter_icon", 2584904275, Texture2D, main.p_object, line, gutter); return call_ret; }  // 220
set_line_gutter_item_color :: (main: *TextEdit, line: int, gutter: int, color: Color) { sys_call("TextEdit", "set_line_gutter_item_color", 3733378741, Nil, main.p_object, line, gutter, color);  }  // 221
get_line_gutter_item_color :: (main: *TextEdit, line: int, gutter: int) -> Color { call_ret := cast(*Color) sys_call("TextEdit", "get_line_gutter_item_color", 2165839948, Color, main.p_object, line, gutter); return call_ret.*; }  // 222
set_line_gutter_clickable :: (main: *TextEdit, line: int, gutter: int, clickable: bool) { sys_call("TextEdit", "set_line_gutter_clickable", 1383440665, Nil, main.p_object, line, gutter, clickable);  }  // 223
is_line_gutter_clickable :: (main: *TextEdit, line: int, gutter: int) -> bool { call_ret := cast(*bool) sys_call("TextEdit", "is_line_gutter_clickable", 2522259332, bool, main.p_object, line, gutter); return call_ret.*; }  // 224
set_line_background_color :: (main: *TextEdit, line: int, color: Color) { sys_call("TextEdit", "set_line_background_color", 2878471219, Nil, main.p_object, line, color);  }  // 225
get_line_background_color :: (main: *TextEdit, line: int) -> Color { call_ret := cast(*Color) sys_call("TextEdit", "get_line_background_color", 3457211756, Color, main.p_object, line); return call_ret.*; }  // 226
set_syntax_highlighter :: (main: *TextEdit, syntax_highlighter: SyntaxHighlighter) { sys_call("TextEdit", "set_syntax_highlighter", 2765644541, Nil, main.p_object, syntax_highlighter);  }  // 227
get_syntax_highlighter :: (main: *TextEdit) -> *SyntaxHighlighter { call_ret := cast(*SyntaxHighlighter) sys_call("TextEdit", "get_syntax_highlighter", 2721131626, SyntaxHighlighter, main.p_object); return call_ret; }  // 228
set_highlight_current_line :: (main: *TextEdit, enabled: bool) { sys_call("TextEdit", "set_highlight_current_line", 2586408642, Nil, main.p_object, enabled);  }  // 229
is_highlight_current_line_enabled :: (main: *TextEdit) -> bool { call_ret := cast(*bool) sys_call("TextEdit", "is_highlight_current_line_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 230
set_highlight_all_occurrences :: (main: *TextEdit, enabled: bool) { sys_call("TextEdit", "set_highlight_all_occurrences", 2586408642, Nil, main.p_object, enabled);  }  // 231
is_highlight_all_occurrences_enabled :: (main: *TextEdit) -> bool { call_ret := cast(*bool) sys_call("TextEdit", "is_highlight_all_occurrences_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 232
get_draw_control_chars :: (main: *TextEdit) -> bool { call_ret := cast(*bool) sys_call("TextEdit", "get_draw_control_chars", 36873697, bool, main.p_object); return call_ret.*; }  // 233
set_draw_control_chars :: (main: *TextEdit, enabled: bool) { sys_call("TextEdit", "set_draw_control_chars", 2586408642, Nil, main.p_object, enabled);  }  // 234
set_draw_tabs :: (main: *TextEdit, enabled: bool) { sys_call("TextEdit", "set_draw_tabs", 2586408642, Nil, main.p_object, enabled);  }  // 235
is_drawing_tabs :: (main: *TextEdit) -> bool { call_ret := cast(*bool) sys_call("TextEdit", "is_drawing_tabs", 36873697, bool, main.p_object); return call_ret.*; }  // 236
set_draw_spaces :: (main: *TextEdit, enabled: bool) { sys_call("TextEdit", "set_draw_spaces", 2586408642, Nil, main.p_object, enabled);  }  // 237
is_drawing_spaces :: (main: *TextEdit) -> bool { call_ret := cast(*bool) sys_call("TextEdit", "is_drawing_spaces", 36873697, bool, main.p_object); return call_ret.*; }  // 238
get_menu :: (main: *TextEdit) -> *PopupMenu { call_ret := cast(*PopupMenu) sys_call("TextEdit", "get_menu", 229722558, PopupMenu, main.p_object); return call_ret; }  // 239
is_menu_visible :: (main: *TextEdit) -> bool { call_ret := cast(*bool) sys_call("TextEdit", "is_menu_visible", 36873697, bool, main.p_object); return call_ret.*; }  // 240
menu_option :: (main: *TextEdit, option: int) { sys_call("TextEdit", "menu_option", 1286410249, Nil, main.p_object, option);  }  // 241
adjust_carets_after_edit :: (main: *TextEdit, caret: int, from_line: int, from_col: int, to_line: int, to_col: int) { sys_call("TextEdit", "adjust_carets_after_edit", 1770277138, Nil, main.p_object, caret, from_line, from_col, to_line, to_col);  }  // 242
get_caret_index_edit_order :: (main: *TextEdit) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("TextEdit", "get_caret_index_edit_order", 969006518, PackedInt32Array, main.p_object); return call_ret.*; }  // 243
get_selection_line :: (main: *TextEdit) -> int { call_ret := cast(*int) sys_call("TextEdit", "get_selection_line", 1591665591, int, main.p_object); return call_ret.*; }  // 244
get_selection_column :: (main: *TextEdit) -> int { call_ret := cast(*int) sys_call("TextEdit", "get_selection_column", 1591665591, int, main.p_object); return call_ret.*; }  // 245

clear :: (main: *TextLine) { sys_call("TextLine", "clear", 3218959716, Nil, main.p_object);  }  // 0
set_direction :: (main: *TextLine, direction: TextServer.Direction) { sys_call("TextLine", "set_direction", 1418190634, Nil, main.p_object, direction);  }  // 1
get_direction :: (main: *TextLine) -> TextServer.Direction { call_ret := cast(*TextServer.Direction) sys_call("TextLine", "get_direction", 2516697328, TextServer.Direction, main.p_object); return call_ret.*; }  // 2
set_orientation :: (main: *TextLine, orientation: TextServer.Orientation) { sys_call("TextLine", "set_orientation", 42823726, Nil, main.p_object, orientation);  }  // 3
get_orientation :: (main: *TextLine) -> TextServer.Orientation { call_ret := cast(*TextServer.Orientation) sys_call("TextLine", "get_orientation", 175768116, TextServer.Orientation, main.p_object); return call_ret.*; }  // 4
set_preserve_invalid :: (main: *TextLine, enabled: bool) { sys_call("TextLine", "set_preserve_invalid", 2586408642, Nil, main.p_object, enabled);  }  // 5
get_preserve_invalid :: (main: *TextLine) -> bool { call_ret := cast(*bool) sys_call("TextLine", "get_preserve_invalid", 36873697, bool, main.p_object); return call_ret.*; }  // 6
set_preserve_control :: (main: *TextLine, enabled: bool) { sys_call("TextLine", "set_preserve_control", 2586408642, Nil, main.p_object, enabled);  }  // 7
get_preserve_control :: (main: *TextLine) -> bool { call_ret := cast(*bool) sys_call("TextLine", "get_preserve_control", 36873697, bool, main.p_object); return call_ret.*; }  // 8
set_bidi_override :: (main: *TextLine, override: Array) { sys_call("TextLine", "set_bidi_override", 381264803, Nil, main.p_object, override);  }  // 9
add_string :: (main: *TextLine, text: string, font: Font, font_size: int) -> bool { call_ret := cast(*bool) sys_call("TextLine", "add_string", 621426851, bool, main.p_object, text, font, font_size); return call_ret.*; }  // 10
add_object :: (main: *TextLine, key: Variant, size: Vector2) -> bool { call_ret := cast(*bool) sys_call("TextLine", "add_object", 1316529304, bool, main.p_object, key, size); return call_ret.*; }  // 11
resize_object :: (main: *TextLine, key: Variant, size: Vector2) -> bool { call_ret := cast(*bool) sys_call("TextLine", "resize_object", 2095776372, bool, main.p_object, key, size); return call_ret.*; }  // 12
set_width :: (main: *TextLine, width: float) { sys_call("TextLine", "set_width", 373806689, Nil, main.p_object, width);  }  // 13
get_width :: (main: *TextLine) -> float { call_ret := cast(*float) sys_call("TextLine", "get_width", 1740695150, float, main.p_object); return call_ret.*; }  // 14
set_horizontal_alignment :: (main: *TextLine, alignment: HorizontalAlignment) { sys_call("TextLine", "set_horizontal_alignment", 2312603777, Nil, main.p_object, alignment);  }  // 15
get_horizontal_alignment :: (main: *TextLine) -> HorizontalAlignment { call_ret := cast(*HorizontalAlignment) sys_call("TextLine", "get_horizontal_alignment", 341400642, HorizontalAlignment, main.p_object); return call_ret.*; }  // 16
tab_align :: (main: *TextLine, tab_stops: PackedFloat32Array) { sys_call("TextLine", "tab_align", 2899603908, Nil, main.p_object, tab_stops);  }  // 17
set_flags :: (main: *TextLine, flags: TextServer.JustificationFlag) { sys_call("TextLine", "set_flags", 2877345813, Nil, main.p_object, flags);  }  // 18
get_flags :: (main: *TextLine) -> TextServer.JustificationFlag { call_ret := cast(*TextServer.JustificationFlag) sys_call("TextLine", "get_flags", 1583363614, TextServer.JustificationFlag, main.p_object); return call_ret.*; }  // 19
set_text_overrun_behavior :: (main: *TextLine, overrun_behavior: TextServer.OverrunBehavior) { sys_call("TextLine", "set_text_overrun_behavior", 1008890932, Nil, main.p_object, overrun_behavior);  }  // 20
get_text_overrun_behavior :: (main: *TextLine) -> TextServer.OverrunBehavior { call_ret := cast(*TextServer.OverrunBehavior) sys_call("TextLine", "get_text_overrun_behavior", 3779142101, TextServer.OverrunBehavior, main.p_object); return call_ret.*; }  // 21
set_ellipsis_char :: (main: *TextLine, char: string) { sys_call("TextLine", "set_ellipsis_char", 83702148, Nil, main.p_object, char);  }  // 22
get_ellipsis_char :: (main: *TextLine) -> gstring { call_ret := cast(*gstring) sys_call("TextLine", "get_ellipsis_char", 201670096, gstring, main.p_object); return call_ret.*; }  // 23
get_objects :: (main: *TextLine) -> Array { call_ret := cast(*Array) sys_call("TextLine", "get_objects", 3995934104, Array, main.p_object); return call_ret.*; }  // 24
get_object_rect :: (main: *TextLine, key: Variant) -> Rect2 { call_ret := cast(*Rect2) sys_call("TextLine", "get_object_rect", 1742700391, Rect2, main.p_object, key); return call_ret.*; }  // 25
get_size :: (main: *TextLine) -> Vector2 { call_ret := cast(*Vector2) sys_call("TextLine", "get_size", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 26
get_rid :: (main: *TextLine) -> RID { call_ret := cast(*RID) sys_call("TextLine", "get_rid", 2944877500, RID, main.p_object); return call_ret.*; }  // 27
get_line_ascent :: (main: *TextLine) -> float { call_ret := cast(*float) sys_call("TextLine", "get_line_ascent", 1740695150, float, main.p_object); return call_ret.*; }  // 28
get_line_descent :: (main: *TextLine) -> float { call_ret := cast(*float) sys_call("TextLine", "get_line_descent", 1740695150, float, main.p_object); return call_ret.*; }  // 29
get_line_width :: (main: *TextLine) -> float { call_ret := cast(*float) sys_call("TextLine", "get_line_width", 1740695150, float, main.p_object); return call_ret.*; }  // 30
get_line_underline_position :: (main: *TextLine) -> float { call_ret := cast(*float) sys_call("TextLine", "get_line_underline_position", 1740695150, float, main.p_object); return call_ret.*; }  // 31
get_line_underline_thickness :: (main: *TextLine) -> float { call_ret := cast(*float) sys_call("TextLine", "get_line_underline_thickness", 1740695150, float, main.p_object); return call_ret.*; }  // 32
draw :: (main: *TextLine, canvas: RID, pos: Vector2) { sys_call("TextLine", "draw", 856975658, Nil, main.p_object, canvas, pos);  }  // 33
draw_outline :: (main: *TextLine, canvas: RID, pos: Vector2) { sys_call("TextLine", "draw_outline", 1343401456, Nil, main.p_object, canvas, pos);  }  // 34
hit_test :: (main: *TextLine, coords: float) -> int { call_ret := cast(*int) sys_call("TextLine", "hit_test", 2401831903, int, main.p_object, coords); return call_ret.*; }  // 35

set_horizontal_alignment :: (main: *TextMesh, alignment: HorizontalAlignment) { sys_call("TextMesh", "set_horizontal_alignment", 2312603777, Nil, main.p_object, alignment);  }  // 0
get_horizontal_alignment :: (main: *TextMesh) -> HorizontalAlignment { call_ret := cast(*HorizontalAlignment) sys_call("TextMesh", "get_horizontal_alignment", 341400642, HorizontalAlignment, main.p_object); return call_ret.*; }  // 1
set_vertical_alignment :: (main: *TextMesh, alignment: VerticalAlignment) { sys_call("TextMesh", "set_vertical_alignment", 1796458609, Nil, main.p_object, alignment);  }  // 2
get_vertical_alignment :: (main: *TextMesh) -> VerticalAlignment { call_ret := cast(*VerticalAlignment) sys_call("TextMesh", "get_vertical_alignment", 3274884059, VerticalAlignment, main.p_object); return call_ret.*; }  // 3
set_text :: (main: *TextMesh, text: string) { sys_call("TextMesh", "set_text", 83702148, Nil, main.p_object, text);  }  // 4
get_text :: (main: *TextMesh) -> gstring { call_ret := cast(*gstring) sys_call("TextMesh", "get_text", 201670096, gstring, main.p_object); return call_ret.*; }  // 5
set_font :: (main: *TextMesh, font: Font) { sys_call("TextMesh", "set_font", 1262170328, Nil, main.p_object, font);  }  // 6
get_font :: (main: *TextMesh) -> *Font { call_ret := cast(*Font) sys_call("TextMesh", "get_font", 3229501585, Font, main.p_object); return call_ret; }  // 7
set_font_size :: (main: *TextMesh, font_size: int) { sys_call("TextMesh", "set_font_size", 1286410249, Nil, main.p_object, font_size);  }  // 8
get_font_size :: (main: *TextMesh) -> int { call_ret := cast(*int) sys_call("TextMesh", "get_font_size", 3905245786, int, main.p_object); return call_ret.*; }  // 9
set_line_spacing :: (main: *TextMesh, line_spacing: float) { sys_call("TextMesh", "set_line_spacing", 373806689, Nil, main.p_object, line_spacing);  }  // 10
get_line_spacing :: (main: *TextMesh) -> float { call_ret := cast(*float) sys_call("TextMesh", "get_line_spacing", 1740695150, float, main.p_object); return call_ret.*; }  // 11
set_autowrap_mode :: (main: *TextMesh, autowrap_mode: TextServer.AutowrapMode) { sys_call("TextMesh", "set_autowrap_mode", 3289138044, Nil, main.p_object, autowrap_mode);  }  // 12
get_autowrap_mode :: (main: *TextMesh) -> TextServer.AutowrapMode { call_ret := cast(*TextServer.AutowrapMode) sys_call("TextMesh", "get_autowrap_mode", 1549071663, TextServer.AutowrapMode, main.p_object); return call_ret.*; }  // 13
set_justification_flags :: (main: *TextMesh, justification_flags: TextServer.JustificationFlag) { sys_call("TextMesh", "set_justification_flags", 2877345813, Nil, main.p_object, justification_flags);  }  // 14
get_justification_flags :: (main: *TextMesh) -> TextServer.JustificationFlag { call_ret := cast(*TextServer.JustificationFlag) sys_call("TextMesh", "get_justification_flags", 1583363614, TextServer.JustificationFlag, main.p_object); return call_ret.*; }  // 15
set_depth :: (main: *TextMesh, depth: float) { sys_call("TextMesh", "set_depth", 373806689, Nil, main.p_object, depth);  }  // 16
get_depth :: (main: *TextMesh) -> float { call_ret := cast(*float) sys_call("TextMesh", "get_depth", 1740695150, float, main.p_object); return call_ret.*; }  // 17
set_width :: (main: *TextMesh, width: float) { sys_call("TextMesh", "set_width", 373806689, Nil, main.p_object, width);  }  // 18
get_width :: (main: *TextMesh) -> float { call_ret := cast(*float) sys_call("TextMesh", "get_width", 1740695150, float, main.p_object); return call_ret.*; }  // 19
set_pixel_size :: (main: *TextMesh, pixel_size: float) { sys_call("TextMesh", "set_pixel_size", 373806689, Nil, main.p_object, pixel_size);  }  // 20
get_pixel_size :: (main: *TextMesh) -> float { call_ret := cast(*float) sys_call("TextMesh", "get_pixel_size", 1740695150, float, main.p_object); return call_ret.*; }  // 21
set_offset :: (main: *TextMesh, offset: Vector2) { sys_call("TextMesh", "set_offset", 743155724, Nil, main.p_object, offset);  }  // 22
get_offset :: (main: *TextMesh) -> Vector2 { call_ret := cast(*Vector2) sys_call("TextMesh", "get_offset", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 23
set_curve_step :: (main: *TextMesh, curve_step: float) { sys_call("TextMesh", "set_curve_step", 373806689, Nil, main.p_object, curve_step);  }  // 24
get_curve_step :: (main: *TextMesh) -> float { call_ret := cast(*float) sys_call("TextMesh", "get_curve_step", 1740695150, float, main.p_object); return call_ret.*; }  // 25
set_text_direction :: (main: *TextMesh, direction: TextServer.Direction) { sys_call("TextMesh", "set_text_direction", 1418190634, Nil, main.p_object, direction);  }  // 26
get_text_direction :: (main: *TextMesh) -> TextServer.Direction { call_ret := cast(*TextServer.Direction) sys_call("TextMesh", "get_text_direction", 2516697328, TextServer.Direction, main.p_object); return call_ret.*; }  // 27
set_language :: (main: *TextMesh, language: string) { sys_call("TextMesh", "set_language", 83702148, Nil, main.p_object, language);  }  // 28
get_language :: (main: *TextMesh) -> gstring { call_ret := cast(*gstring) sys_call("TextMesh", "get_language", 201670096, gstring, main.p_object); return call_ret.*; }  // 29
set_structured_text_bidi_override :: (main: *TextMesh, parser: TextServer.StructuredTextParser) { sys_call("TextMesh", "set_structured_text_bidi_override", 55961453, Nil, main.p_object, parser);  }  // 30
get_structured_text_bidi_override :: (main: *TextMesh) -> TextServer.StructuredTextParser { call_ret := cast(*TextServer.StructuredTextParser) sys_call("TextMesh", "get_structured_text_bidi_override", 3385126229, TextServer.StructuredTextParser, main.p_object); return call_ret.*; }  // 31
set_structured_text_bidi_override_options :: (main: *TextMesh, args: Array) { sys_call("TextMesh", "set_structured_text_bidi_override_options", 381264803, Nil, main.p_object, args);  }  // 32
get_structured_text_bidi_override_options :: (main: *TextMesh) -> Array { call_ret := cast(*Array) sys_call("TextMesh", "get_structured_text_bidi_override_options", 3995934104, Array, main.p_object); return call_ret.*; }  // 33
set_uppercase :: (main: *TextMesh, enable: bool) { sys_call("TextMesh", "set_uppercase", 2586408642, Nil, main.p_object, enable);  }  // 34
is_uppercase :: (main: *TextMesh) -> bool { call_ret := cast(*bool) sys_call("TextMesh", "is_uppercase", 36873697, bool, main.p_object); return call_ret.*; }  // 35

clear :: (main: *TextParagraph) { sys_call("TextParagraph", "clear", 3218959716, Nil, main.p_object);  }  // 0
set_direction :: (main: *TextParagraph, direction: TextServer.Direction) { sys_call("TextParagraph", "set_direction", 1418190634, Nil, main.p_object, direction);  }  // 1
get_direction :: (main: *TextParagraph) -> TextServer.Direction { call_ret := cast(*TextServer.Direction) sys_call("TextParagraph", "get_direction", 2516697328, TextServer.Direction, main.p_object); return call_ret.*; }  // 2
set_custom_punctuation :: (main: *TextParagraph, custom_punctuation: string) { sys_call("TextParagraph", "set_custom_punctuation", 83702148, Nil, main.p_object, custom_punctuation);  }  // 3
get_custom_punctuation :: (main: *TextParagraph) -> gstring { call_ret := cast(*gstring) sys_call("TextParagraph", "get_custom_punctuation", 201670096, gstring, main.p_object); return call_ret.*; }  // 4
set_orientation :: (main: *TextParagraph, orientation: TextServer.Orientation) { sys_call("TextParagraph", "set_orientation", 42823726, Nil, main.p_object, orientation);  }  // 5
get_orientation :: (main: *TextParagraph) -> TextServer.Orientation { call_ret := cast(*TextServer.Orientation) sys_call("TextParagraph", "get_orientation", 175768116, TextServer.Orientation, main.p_object); return call_ret.*; }  // 6
set_preserve_invalid :: (main: *TextParagraph, enabled: bool) { sys_call("TextParagraph", "set_preserve_invalid", 2586408642, Nil, main.p_object, enabled);  }  // 7
get_preserve_invalid :: (main: *TextParagraph) -> bool { call_ret := cast(*bool) sys_call("TextParagraph", "get_preserve_invalid", 36873697, bool, main.p_object); return call_ret.*; }  // 8
set_preserve_control :: (main: *TextParagraph, enabled: bool) { sys_call("TextParagraph", "set_preserve_control", 2586408642, Nil, main.p_object, enabled);  }  // 9
get_preserve_control :: (main: *TextParagraph) -> bool { call_ret := cast(*bool) sys_call("TextParagraph", "get_preserve_control", 36873697, bool, main.p_object); return call_ret.*; }  // 10
set_bidi_override :: (main: *TextParagraph, override: Array) { sys_call("TextParagraph", "set_bidi_override", 381264803, Nil, main.p_object, override);  }  // 11
set_dropcap :: (main: *TextParagraph, text: string, font: Font, font_size: int) -> bool { call_ret := cast(*bool) sys_call("TextParagraph", "set_dropcap", 2498990330, bool, main.p_object, text, font, font_size); return call_ret.*; }  // 12
clear_dropcap :: (main: *TextParagraph) { sys_call("TextParagraph", "clear_dropcap", 3218959716, Nil, main.p_object);  }  // 13
add_string :: (main: *TextParagraph, text: string, font: Font, font_size: int) -> bool { call_ret := cast(*bool) sys_call("TextParagraph", "add_string", 621426851, bool, main.p_object, text, font, font_size); return call_ret.*; }  // 14
add_object :: (main: *TextParagraph, key: Variant, size: Vector2) -> bool { call_ret := cast(*bool) sys_call("TextParagraph", "add_object", 1316529304, bool, main.p_object, key, size); return call_ret.*; }  // 15
resize_object :: (main: *TextParagraph, key: Variant, size: Vector2) -> bool { call_ret := cast(*bool) sys_call("TextParagraph", "resize_object", 2095776372, bool, main.p_object, key, size); return call_ret.*; }  // 16
set_alignment :: (main: *TextParagraph, alignment: HorizontalAlignment) { sys_call("TextParagraph", "set_alignment", 2312603777, Nil, main.p_object, alignment);  }  // 17
get_alignment :: (main: *TextParagraph) -> HorizontalAlignment { call_ret := cast(*HorizontalAlignment) sys_call("TextParagraph", "get_alignment", 341400642, HorizontalAlignment, main.p_object); return call_ret.*; }  // 18
tab_align :: (main: *TextParagraph, tab_stops: PackedFloat32Array) { sys_call("TextParagraph", "tab_align", 2899603908, Nil, main.p_object, tab_stops);  }  // 19
set_break_flags :: (main: *TextParagraph, flags: TextServer.LineBreakFlag) { sys_call("TextParagraph", "set_break_flags", 2809697122, Nil, main.p_object, flags);  }  // 20
get_break_flags :: (main: *TextParagraph) -> TextServer.LineBreakFlag { call_ret := cast(*TextServer.LineBreakFlag) sys_call("TextParagraph", "get_break_flags", 2340632602, TextServer.LineBreakFlag, main.p_object); return call_ret.*; }  // 21
set_justification_flags :: (main: *TextParagraph, flags: TextServer.JustificationFlag) { sys_call("TextParagraph", "set_justification_flags", 2877345813, Nil, main.p_object, flags);  }  // 22
get_justification_flags :: (main: *TextParagraph) -> TextServer.JustificationFlag { call_ret := cast(*TextServer.JustificationFlag) sys_call("TextParagraph", "get_justification_flags", 1583363614, TextServer.JustificationFlag, main.p_object); return call_ret.*; }  // 23
set_text_overrun_behavior :: (main: *TextParagraph, overrun_behavior: TextServer.OverrunBehavior) { sys_call("TextParagraph", "set_text_overrun_behavior", 1008890932, Nil, main.p_object, overrun_behavior);  }  // 24
get_text_overrun_behavior :: (main: *TextParagraph) -> TextServer.OverrunBehavior { call_ret := cast(*TextServer.OverrunBehavior) sys_call("TextParagraph", "get_text_overrun_behavior", 3779142101, TextServer.OverrunBehavior, main.p_object); return call_ret.*; }  // 25
set_ellipsis_char :: (main: *TextParagraph, char: string) { sys_call("TextParagraph", "set_ellipsis_char", 83702148, Nil, main.p_object, char);  }  // 26
get_ellipsis_char :: (main: *TextParagraph) -> gstring { call_ret := cast(*gstring) sys_call("TextParagraph", "get_ellipsis_char", 201670096, gstring, main.p_object); return call_ret.*; }  // 27
set_width :: (main: *TextParagraph, width: float) { sys_call("TextParagraph", "set_width", 373806689, Nil, main.p_object, width);  }  // 28
get_width :: (main: *TextParagraph) -> float { call_ret := cast(*float) sys_call("TextParagraph", "get_width", 1740695150, float, main.p_object); return call_ret.*; }  // 29
get_non_wrapped_size :: (main: *TextParagraph) -> Vector2 { call_ret := cast(*Vector2) sys_call("TextParagraph", "get_non_wrapped_size", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 30
get_size :: (main: *TextParagraph) -> Vector2 { call_ret := cast(*Vector2) sys_call("TextParagraph", "get_size", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 31
get_rid :: (main: *TextParagraph) -> RID { call_ret := cast(*RID) sys_call("TextParagraph", "get_rid", 2944877500, RID, main.p_object); return call_ret.*; }  // 32
get_line_rid :: (main: *TextParagraph, line: int) -> RID { call_ret := cast(*RID) sys_call("TextParagraph", "get_line_rid", 495598643, RID, main.p_object, line); return call_ret.*; }  // 33
get_dropcap_rid :: (main: *TextParagraph) -> RID { call_ret := cast(*RID) sys_call("TextParagraph", "get_dropcap_rid", 2944877500, RID, main.p_object); return call_ret.*; }  // 34
get_line_count :: (main: *TextParagraph) -> int { call_ret := cast(*int) sys_call("TextParagraph", "get_line_count", 3905245786, int, main.p_object); return call_ret.*; }  // 35
set_max_lines_visible :: (main: *TextParagraph, max_lines_visible: int) { sys_call("TextParagraph", "set_max_lines_visible", 1286410249, Nil, main.p_object, max_lines_visible);  }  // 36
get_max_lines_visible :: (main: *TextParagraph) -> int { call_ret := cast(*int) sys_call("TextParagraph", "get_max_lines_visible", 3905245786, int, main.p_object); return call_ret.*; }  // 37
set_line_spacing :: (main: *TextParagraph, line_spacing: float) { sys_call("TextParagraph", "set_line_spacing", 373806689, Nil, main.p_object, line_spacing);  }  // 38
get_line_spacing :: (main: *TextParagraph) -> float { call_ret := cast(*float) sys_call("TextParagraph", "get_line_spacing", 1740695150, float, main.p_object); return call_ret.*; }  // 39
get_line_objects :: (main: *TextParagraph, line: int) -> Array { call_ret := cast(*Array) sys_call("TextParagraph", "get_line_objects", 663333327, Array, main.p_object, line); return call_ret.*; }  // 40
get_line_object_rect :: (main: *TextParagraph, line: int, key: Variant) -> Rect2 { call_ret := cast(*Rect2) sys_call("TextParagraph", "get_line_object_rect", 204315017, Rect2, main.p_object, line, key); return call_ret.*; }  // 41
get_line_size :: (main: *TextParagraph, line: int) -> Vector2 { call_ret := cast(*Vector2) sys_call("TextParagraph", "get_line_size", 2299179447, Vector2, main.p_object, line); return call_ret.*; }  // 42
get_line_range :: (main: *TextParagraph, line: int) -> Vector2i { call_ret := cast(*Vector2i) sys_call("TextParagraph", "get_line_range", 880721226, Vector2i, main.p_object, line); return call_ret.*; }  // 43
get_line_ascent :: (main: *TextParagraph, line: int) -> float { call_ret := cast(*float) sys_call("TextParagraph", "get_line_ascent", 2339986948, float, main.p_object, line); return call_ret.*; }  // 44
get_line_descent :: (main: *TextParagraph, line: int) -> float { call_ret := cast(*float) sys_call("TextParagraph", "get_line_descent", 2339986948, float, main.p_object, line); return call_ret.*; }  // 45
get_line_width :: (main: *TextParagraph, line: int) -> float { call_ret := cast(*float) sys_call("TextParagraph", "get_line_width", 2339986948, float, main.p_object, line); return call_ret.*; }  // 46
get_line_underline_position :: (main: *TextParagraph, line: int) -> float { call_ret := cast(*float) sys_call("TextParagraph", "get_line_underline_position", 2339986948, float, main.p_object, line); return call_ret.*; }  // 47
get_line_underline_thickness :: (main: *TextParagraph, line: int) -> float { call_ret := cast(*float) sys_call("TextParagraph", "get_line_underline_thickness", 2339986948, float, main.p_object, line); return call_ret.*; }  // 48
get_dropcap_size :: (main: *TextParagraph) -> Vector2 { call_ret := cast(*Vector2) sys_call("TextParagraph", "get_dropcap_size", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 49
get_dropcap_lines :: (main: *TextParagraph) -> int { call_ret := cast(*int) sys_call("TextParagraph", "get_dropcap_lines", 3905245786, int, main.p_object); return call_ret.*; }  // 50
draw :: (main: *TextParagraph, canvas: RID, pos: Vector2) { sys_call("TextParagraph", "draw", 1567802413, Nil, main.p_object, canvas, pos);  }  // 51
draw_outline :: (main: *TextParagraph, canvas: RID, pos: Vector2) { sys_call("TextParagraph", "draw_outline", 1893131224, Nil, main.p_object, canvas, pos);  }  // 52
draw_line :: (main: *TextParagraph, canvas: RID, pos: Vector2, line: int) { sys_call("TextParagraph", "draw_line", 1242169894, Nil, main.p_object, canvas, pos, line);  }  // 53
draw_line_outline :: (main: *TextParagraph, canvas: RID, pos: Vector2, line: int) { sys_call("TextParagraph", "draw_line_outline", 2664926980, Nil, main.p_object, canvas, pos, line);  }  // 54
draw_dropcap :: (main: *TextParagraph, canvas: RID, pos: Vector2) { sys_call("TextParagraph", "draw_dropcap", 856975658, Nil, main.p_object, canvas, pos);  }  // 55
draw_dropcap_outline :: (main: *TextParagraph, canvas: RID, pos: Vector2) { sys_call("TextParagraph", "draw_dropcap_outline", 1343401456, Nil, main.p_object, canvas, pos);  }  // 56
hit_test :: (main: *TextParagraph, coords: Vector2) -> int { call_ret := cast(*int) sys_call("TextParagraph", "hit_test", 3820158470, int, main.p_object, coords); return call_ret.*; }  // 57

has_feature :: (main: *TextServer, feature: TextServer.Feature) -> bool { call_ret := cast(*bool) sys_call("TextServer", "has_feature", 3967367083, bool, main.p_object, feature); return call_ret.*; }  // 0
get_name :: (main: *TextServer) -> gstring { call_ret := cast(*gstring) sys_call("TextServer", "get_name", 201670096, gstring, main.p_object); return call_ret.*; }  // 1
get_features :: (main: *TextServer) -> int { call_ret := cast(*int) sys_call("TextServer", "get_features", 3905245786, int, main.p_object); return call_ret.*; }  // 2
load_support_data :: (main: *TextServer, filename: string) -> bool { call_ret := cast(*bool) sys_call("TextServer", "load_support_data", 2323990056, bool, main.p_object, filename); return call_ret.*; }  // 3
get_support_data_filename :: (main: *TextServer) -> gstring { call_ret := cast(*gstring) sys_call("TextServer", "get_support_data_filename", 201670096, gstring, main.p_object); return call_ret.*; }  // 4
get_support_data_info :: (main: *TextServer) -> gstring { call_ret := cast(*gstring) sys_call("TextServer", "get_support_data_info", 201670096, gstring, main.p_object); return call_ret.*; }  // 5
save_support_data :: (main: *TextServer, filename: string) -> bool { call_ret := cast(*bool) sys_call("TextServer", "save_support_data", 3927539163, bool, main.p_object, filename); return call_ret.*; }  // 6
get_support_data :: (main: *TextServer) -> PackedByteArray { call_ret := cast(*PackedByteArray) sys_call("TextServer", "get_support_data", 2362200018, PackedByteArray, main.p_object); return call_ret.*; }  // 7
is_locale_right_to_left :: (main: *TextServer, locale: string) -> bool { call_ret := cast(*bool) sys_call("TextServer", "is_locale_right_to_left", 3927539163, bool, main.p_object, locale); return call_ret.*; }  // 8
name_to_tag :: (main: *TextServer, name: string) -> int { call_ret := cast(*int) sys_call("TextServer", "name_to_tag", 1321353865, int, main.p_object, name); return call_ret.*; }  // 9
tag_to_name :: (main: *TextServer, tag: int) -> gstring { call_ret := cast(*gstring) sys_call("TextServer", "tag_to_name", 844755477, gstring, main.p_object, tag); return call_ret.*; }  // 10
has :: (main: *TextServer, rid: RID) -> bool { call_ret := cast(*bool) sys_call("TextServer", "has", 3521089500, bool, main.p_object, rid); return call_ret.*; }  // 11
free_rid :: (main: *TextServer, rid: RID) { sys_call("TextServer", "free_rid", 2722037293, Nil, main.p_object, rid);  }  // 12
create_font :: (main: *TextServer) -> RID { call_ret := cast(*RID) sys_call("TextServer", "create_font", 529393457, RID, main.p_object); return call_ret.*; }  // 13
create_font_linked_variation :: (main: *TextServer, font_rid: RID) -> RID { call_ret := cast(*RID) sys_call("TextServer", "create_font_linked_variation", 41030802, RID, main.p_object, font_rid); return call_ret.*; }  // 14
font_set_data :: (main: *TextServer, font_rid: RID, data: PackedByteArray) { sys_call("TextServer", "font_set_data", 1355495400, Nil, main.p_object, font_rid, data);  }  // 15
font_set_face_index :: (main: *TextServer, font_rid: RID, face_index: int) { sys_call("TextServer", "font_set_face_index", 3411492887, Nil, main.p_object, font_rid, face_index);  }  // 16
font_get_face_index :: (main: *TextServer, font_rid: RID) -> int { call_ret := cast(*int) sys_call("TextServer", "font_get_face_index", 2198884583, int, main.p_object, font_rid); return call_ret.*; }  // 17
font_get_face_count :: (main: *TextServer, font_rid: RID) -> int { call_ret := cast(*int) sys_call("TextServer", "font_get_face_count", 2198884583, int, main.p_object, font_rid); return call_ret.*; }  // 18
font_set_style :: (main: *TextServer, font_rid: RID, style: TextServer.FontStyle) { sys_call("TextServer", "font_set_style", 898466325, Nil, main.p_object, font_rid, style);  }  // 19
font_get_style :: (main: *TextServer, font_rid: RID) -> TextServer.FontStyle { call_ret := cast(*TextServer.FontStyle) sys_call("TextServer", "font_get_style", 3082502592, TextServer.FontStyle, main.p_object, font_rid); return call_ret.*; }  // 20
font_set_name :: (main: *TextServer, font_rid: RID, name: string) { sys_call("TextServer", "font_set_name", 2726140452, Nil, main.p_object, font_rid, name);  }  // 21
font_get_name :: (main: *TextServer, font_rid: RID) -> gstring { call_ret := cast(*gstring) sys_call("TextServer", "font_get_name", 642473191, gstring, main.p_object, font_rid); return call_ret.*; }  // 22
font_get_ot_name_strings :: (main: *TextServer, font_rid: RID) -> Dictionary { call_ret := cast(*Dictionary) sys_call("TextServer", "font_get_ot_name_strings", 1882737106, Dictionary, main.p_object, font_rid); return call_ret.*; }  // 23
font_set_style_name :: (main: *TextServer, font_rid: RID, name: string) { sys_call("TextServer", "font_set_style_name", 2726140452, Nil, main.p_object, font_rid, name);  }  // 24
font_get_style_name :: (main: *TextServer, font_rid: RID) -> gstring { call_ret := cast(*gstring) sys_call("TextServer", "font_get_style_name", 642473191, gstring, main.p_object, font_rid); return call_ret.*; }  // 25
font_set_weight :: (main: *TextServer, font_rid: RID, weight: int) { sys_call("TextServer", "font_set_weight", 3411492887, Nil, main.p_object, font_rid, weight);  }  // 26
font_get_weight :: (main: *TextServer, font_rid: RID) -> int { call_ret := cast(*int) sys_call("TextServer", "font_get_weight", 2198884583, int, main.p_object, font_rid); return call_ret.*; }  // 27
font_set_stretch :: (main: *TextServer, font_rid: RID, weight: int) { sys_call("TextServer", "font_set_stretch", 3411492887, Nil, main.p_object, font_rid, weight);  }  // 28
font_get_stretch :: (main: *TextServer, font_rid: RID) -> int { call_ret := cast(*int) sys_call("TextServer", "font_get_stretch", 2198884583, int, main.p_object, font_rid); return call_ret.*; }  // 29
font_set_antialiasing :: (main: *TextServer, font_rid: RID, antialiasing: TextServer.FontAntialiasing) { sys_call("TextServer", "font_set_antialiasing", 958337235, Nil, main.p_object, font_rid, antialiasing);  }  // 30
font_get_antialiasing :: (main: *TextServer, font_rid: RID) -> TextServer.FontAntialiasing { call_ret := cast(*TextServer.FontAntialiasing) sys_call("TextServer", "font_get_antialiasing", 3389420495, TextServer.FontAntialiasing, main.p_object, font_rid); return call_ret.*; }  // 31
font_set_disable_embedded_bitmaps :: (main: *TextServer, font_rid: RID, disable_embedded_bitmaps: bool) { sys_call("TextServer", "font_set_disable_embedded_bitmaps", 1265174801, Nil, main.p_object, font_rid, disable_embedded_bitmaps);  }  // 32
font_get_disable_embedded_bitmaps :: (main: *TextServer, font_rid: RID) -> bool { call_ret := cast(*bool) sys_call("TextServer", "font_get_disable_embedded_bitmaps", 4155700596, bool, main.p_object, font_rid); return call_ret.*; }  // 33
font_set_generate_mipmaps :: (main: *TextServer, font_rid: RID, generate_mipmaps: bool) { sys_call("TextServer", "font_set_generate_mipmaps", 1265174801, Nil, main.p_object, font_rid, generate_mipmaps);  }  // 34
font_get_generate_mipmaps :: (main: *TextServer, font_rid: RID) -> bool { call_ret := cast(*bool) sys_call("TextServer", "font_get_generate_mipmaps", 4155700596, bool, main.p_object, font_rid); return call_ret.*; }  // 35
font_set_multichannel_signed_distance_field :: (main: *TextServer, font_rid: RID, msdf: bool) { sys_call("TextServer", "font_set_multichannel_signed_distance_field", 1265174801, Nil, main.p_object, font_rid, msdf);  }  // 36
font_is_multichannel_signed_distance_field :: (main: *TextServer, font_rid: RID) -> bool { call_ret := cast(*bool) sys_call("TextServer", "font_is_multichannel_signed_distance_field", 4155700596, bool, main.p_object, font_rid); return call_ret.*; }  // 37
font_set_msdf_pixel_range :: (main: *TextServer, font_rid: RID, msdf_pixel_range: int) { sys_call("TextServer", "font_set_msdf_pixel_range", 3411492887, Nil, main.p_object, font_rid, msdf_pixel_range);  }  // 38
font_get_msdf_pixel_range :: (main: *TextServer, font_rid: RID) -> int { call_ret := cast(*int) sys_call("TextServer", "font_get_msdf_pixel_range", 2198884583, int, main.p_object, font_rid); return call_ret.*; }  // 39
font_set_msdf_size :: (main: *TextServer, font_rid: RID, msdf_size: int) { sys_call("TextServer", "font_set_msdf_size", 3411492887, Nil, main.p_object, font_rid, msdf_size);  }  // 40
font_get_msdf_size :: (main: *TextServer, font_rid: RID) -> int { call_ret := cast(*int) sys_call("TextServer", "font_get_msdf_size", 2198884583, int, main.p_object, font_rid); return call_ret.*; }  // 41
font_set_fixed_size :: (main: *TextServer, font_rid: RID, fixed_size: int) { sys_call("TextServer", "font_set_fixed_size", 3411492887, Nil, main.p_object, font_rid, fixed_size);  }  // 42
font_get_fixed_size :: (main: *TextServer, font_rid: RID) -> int { call_ret := cast(*int) sys_call("TextServer", "font_get_fixed_size", 2198884583, int, main.p_object, font_rid); return call_ret.*; }  // 43
font_set_fixed_size_scale_mode :: (main: *TextServer, font_rid: RID, fixed_size_scale_mode: TextServer.FixedSizeScaleMode) { sys_call("TextServer", "font_set_fixed_size_scale_mode", 1029390307, Nil, main.p_object, font_rid, fixed_size_scale_mode);  }  // 44
font_get_fixed_size_scale_mode :: (main: *TextServer, font_rid: RID) -> TextServer.FixedSizeScaleMode { call_ret := cast(*TextServer.FixedSizeScaleMode) sys_call("TextServer", "font_get_fixed_size_scale_mode", 4113120379, TextServer.FixedSizeScaleMode, main.p_object, font_rid); return call_ret.*; }  // 45
font_set_allow_system_fallback :: (main: *TextServer, font_rid: RID, allow_system_fallback: bool) { sys_call("TextServer", "font_set_allow_system_fallback", 1265174801, Nil, main.p_object, font_rid, allow_system_fallback);  }  // 46
font_is_allow_system_fallback :: (main: *TextServer, font_rid: RID) -> bool { call_ret := cast(*bool) sys_call("TextServer", "font_is_allow_system_fallback", 4155700596, bool, main.p_object, font_rid); return call_ret.*; }  // 47
font_set_force_autohinter :: (main: *TextServer, font_rid: RID, force_autohinter: bool) { sys_call("TextServer", "font_set_force_autohinter", 1265174801, Nil, main.p_object, font_rid, force_autohinter);  }  // 48
font_is_force_autohinter :: (main: *TextServer, font_rid: RID) -> bool { call_ret := cast(*bool) sys_call("TextServer", "font_is_force_autohinter", 4155700596, bool, main.p_object, font_rid); return call_ret.*; }  // 49
font_set_hinting :: (main: *TextServer, font_rid: RID, hinting: TextServer.Hinting) { sys_call("TextServer", "font_set_hinting", 1520010864, Nil, main.p_object, font_rid, hinting);  }  // 50
font_get_hinting :: (main: *TextServer, font_rid: RID) -> TextServer.Hinting { call_ret := cast(*TextServer.Hinting) sys_call("TextServer", "font_get_hinting", 3971592737, TextServer.Hinting, main.p_object, font_rid); return call_ret.*; }  // 51
font_set_subpixel_positioning :: (main: *TextServer, font_rid: RID, subpixel_positioning: TextServer.SubpixelPositioning) { sys_call("TextServer", "font_set_subpixel_positioning", 3830459669, Nil, main.p_object, font_rid, subpixel_positioning);  }  // 52
font_get_subpixel_positioning :: (main: *TextServer, font_rid: RID) -> TextServer.SubpixelPositioning { call_ret := cast(*TextServer.SubpixelPositioning) sys_call("TextServer", "font_get_subpixel_positioning", 2752233671, TextServer.SubpixelPositioning, main.p_object, font_rid); return call_ret.*; }  // 53
font_set_keep_rounding_remainders :: (main: *TextServer, font_rid: RID, keep_rounding_remainders: bool) { sys_call("TextServer", "font_set_keep_rounding_remainders", 1265174801, Nil, main.p_object, font_rid, keep_rounding_remainders);  }  // 54
font_get_keep_rounding_remainders :: (main: *TextServer, font_rid: RID) -> bool { call_ret := cast(*bool) sys_call("TextServer", "font_get_keep_rounding_remainders", 4155700596, bool, main.p_object, font_rid); return call_ret.*; }  // 55
font_set_embolden :: (main: *TextServer, font_rid: RID, strength: float) { sys_call("TextServer", "font_set_embolden", 1794382983, Nil, main.p_object, font_rid, strength);  }  // 56
font_get_embolden :: (main: *TextServer, font_rid: RID) -> float { call_ret := cast(*float) sys_call("TextServer", "font_get_embolden", 866169185, float, main.p_object, font_rid); return call_ret.*; }  // 57
font_set_spacing :: (main: *TextServer, font_rid: RID, spacing: TextServer.SpacingType, value: int) { sys_call("TextServer", "font_set_spacing", 1307259930, Nil, main.p_object, font_rid, spacing, value);  }  // 58
font_get_spacing :: (main: *TextServer, font_rid: RID, spacing: TextServer.SpacingType) -> int { call_ret := cast(*int) sys_call("TextServer", "font_get_spacing", 1213653558, int, main.p_object, font_rid, spacing); return call_ret.*; }  // 59
font_set_baseline_offset :: (main: *TextServer, font_rid: RID, baseline_offset: float) { sys_call("TextServer", "font_set_baseline_offset", 1794382983, Nil, main.p_object, font_rid, baseline_offset);  }  // 60
font_get_baseline_offset :: (main: *TextServer, font_rid: RID) -> float { call_ret := cast(*float) sys_call("TextServer", "font_get_baseline_offset", 866169185, float, main.p_object, font_rid); return call_ret.*; }  // 61
font_set_transform :: (main: *TextServer, font_rid: RID, transform: Transform2D) { sys_call("TextServer", "font_set_transform", 1246044741, Nil, main.p_object, font_rid, transform);  }  // 62
font_get_transform :: (main: *TextServer, font_rid: RID) -> Transform2D { call_ret := cast(*Transform2D) sys_call("TextServer", "font_get_transform", 213527486, Transform2D, main.p_object, font_rid); return call_ret.*; }  // 63
font_set_variation_coordinates :: (main: *TextServer, font_rid: RID, variation_coordinates: Dictionary) { sys_call("TextServer", "font_set_variation_coordinates", 1217542888, Nil, main.p_object, font_rid, variation_coordinates);  }  // 64
font_get_variation_coordinates :: (main: *TextServer, font_rid: RID) -> Dictionary { call_ret := cast(*Dictionary) sys_call("TextServer", "font_get_variation_coordinates", 1882737106, Dictionary, main.p_object, font_rid); return call_ret.*; }  // 65
font_set_oversampling :: (main: *TextServer, font_rid: RID, oversampling: float) { sys_call("TextServer", "font_set_oversampling", 1794382983, Nil, main.p_object, font_rid, oversampling);  }  // 66
font_get_oversampling :: (main: *TextServer, font_rid: RID) -> float { call_ret := cast(*float) sys_call("TextServer", "font_get_oversampling", 866169185, float, main.p_object, font_rid); return call_ret.*; }  // 67
font_get_size_cache_list :: (main: *TextServer, font_rid: RID) -> [] Vector2i { call_ret := cast(*[] Vector2i) sys_call("TextServer", "font_get_size_cache_list", 2684255073, [] Vector2i, main.p_object, font_rid); return call_ret.*; }  // 68
font_clear_size_cache :: (main: *TextServer, font_rid: RID) { sys_call("TextServer", "font_clear_size_cache", 2722037293, Nil, main.p_object, font_rid);  }  // 69
font_remove_size_cache :: (main: *TextServer, font_rid: RID, size: Vector2i) { sys_call("TextServer", "font_remove_size_cache", 2450610377, Nil, main.p_object, font_rid, size);  }  // 70
font_set_ascent :: (main: *TextServer, font_rid: RID, size: int, ascent: float) { sys_call("TextServer", "font_set_ascent", 1892459533, Nil, main.p_object, font_rid, size, ascent);  }  // 71
font_get_ascent :: (main: *TextServer, font_rid: RID, size: int) -> float { call_ret := cast(*float) sys_call("TextServer", "font_get_ascent", 755457166, float, main.p_object, font_rid, size); return call_ret.*; }  // 72
font_set_descent :: (main: *TextServer, font_rid: RID, size: int, descent: float) { sys_call("TextServer", "font_set_descent", 1892459533, Nil, main.p_object, font_rid, size, descent);  }  // 73
font_get_descent :: (main: *TextServer, font_rid: RID, size: int) -> float { call_ret := cast(*float) sys_call("TextServer", "font_get_descent", 755457166, float, main.p_object, font_rid, size); return call_ret.*; }  // 74
font_set_underline_position :: (main: *TextServer, font_rid: RID, size: int, underline_position: float) { sys_call("TextServer", "font_set_underline_position", 1892459533, Nil, main.p_object, font_rid, size, underline_position);  }  // 75
font_get_underline_position :: (main: *TextServer, font_rid: RID, size: int) -> float { call_ret := cast(*float) sys_call("TextServer", "font_get_underline_position", 755457166, float, main.p_object, font_rid, size); return call_ret.*; }  // 76
font_set_underline_thickness :: (main: *TextServer, font_rid: RID, size: int, underline_thickness: float) { sys_call("TextServer", "font_set_underline_thickness", 1892459533, Nil, main.p_object, font_rid, size, underline_thickness);  }  // 77
font_get_underline_thickness :: (main: *TextServer, font_rid: RID, size: int) -> float { call_ret := cast(*float) sys_call("TextServer", "font_get_underline_thickness", 755457166, float, main.p_object, font_rid, size); return call_ret.*; }  // 78
font_set_scale :: (main: *TextServer, font_rid: RID, size: int, scale: float) { sys_call("TextServer", "font_set_scale", 1892459533, Nil, main.p_object, font_rid, size, scale);  }  // 79
font_get_scale :: (main: *TextServer, font_rid: RID, size: int) -> float { call_ret := cast(*float) sys_call("TextServer", "font_get_scale", 755457166, float, main.p_object, font_rid, size); return call_ret.*; }  // 80
font_get_texture_count :: (main: *TextServer, font_rid: RID, size: Vector2i) -> int { call_ret := cast(*int) sys_call("TextServer", "font_get_texture_count", 1311001310, int, main.p_object, font_rid, size); return call_ret.*; }  // 81
font_clear_textures :: (main: *TextServer, font_rid: RID, size: Vector2i) { sys_call("TextServer", "font_clear_textures", 2450610377, Nil, main.p_object, font_rid, size);  }  // 82
font_remove_texture :: (main: *TextServer, font_rid: RID, size: Vector2i, texture_index: int) { sys_call("TextServer", "font_remove_texture", 3810512262, Nil, main.p_object, font_rid, size, texture_index);  }  // 83
font_set_texture_image :: (main: *TextServer, font_rid: RID, size: Vector2i, texture_index: int, image: Image) { sys_call("TextServer", "font_set_texture_image", 2354485091, Nil, main.p_object, font_rid, size, texture_index, image);  }  // 84
font_get_texture_image :: (main: *TextServer, font_rid: RID, size: Vector2i, texture_index: int) -> *Image { call_ret := cast(*Image) sys_call("TextServer", "font_get_texture_image", 2451761155, Image, main.p_object, font_rid, size, texture_index); return call_ret; }  // 85
font_set_texture_offsets :: (main: *TextServer, font_rid: RID, size: Vector2i, texture_index: int, offset: PackedInt32Array) { sys_call("TextServer", "font_set_texture_offsets", 3005398047, Nil, main.p_object, font_rid, size, texture_index, offset);  }  // 86
font_get_texture_offsets :: (main: *TextServer, font_rid: RID, size: Vector2i, texture_index: int) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("TextServer", "font_get_texture_offsets", 3420028887, PackedInt32Array, main.p_object, font_rid, size, texture_index); return call_ret.*; }  // 87
font_get_glyph_list :: (main: *TextServer, font_rid: RID, size: Vector2i) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("TextServer", "font_get_glyph_list", 46086620, PackedInt32Array, main.p_object, font_rid, size); return call_ret.*; }  // 88
font_clear_glyphs :: (main: *TextServer, font_rid: RID, size: Vector2i) { sys_call("TextServer", "font_clear_glyphs", 2450610377, Nil, main.p_object, font_rid, size);  }  // 89
font_remove_glyph :: (main: *TextServer, font_rid: RID, size: Vector2i, glyph: int) { sys_call("TextServer", "font_remove_glyph", 3810512262, Nil, main.p_object, font_rid, size, glyph);  }  // 90
font_get_glyph_advance :: (main: *TextServer, font_rid: RID, size: int, glyph: int) -> Vector2 { call_ret := cast(*Vector2) sys_call("TextServer", "font_get_glyph_advance", 2555689501, Vector2, main.p_object, font_rid, size, glyph); return call_ret.*; }  // 91
font_set_glyph_advance :: (main: *TextServer, font_rid: RID, size: int, glyph: int, advance: Vector2) { sys_call("TextServer", "font_set_glyph_advance", 3219397315, Nil, main.p_object, font_rid, size, glyph, advance);  }  // 92
font_get_glyph_offset :: (main: *TextServer, font_rid: RID, size: Vector2i, glyph: int) -> Vector2 { call_ret := cast(*Vector2) sys_call("TextServer", "font_get_glyph_offset", 513728628, Vector2, main.p_object, font_rid, size, glyph); return call_ret.*; }  // 93
font_set_glyph_offset :: (main: *TextServer, font_rid: RID, size: Vector2i, glyph: int, offset: Vector2) { sys_call("TextServer", "font_set_glyph_offset", 1812632090, Nil, main.p_object, font_rid, size, glyph, offset);  }  // 94
font_get_glyph_size :: (main: *TextServer, font_rid: RID, size: Vector2i, glyph: int) -> Vector2 { call_ret := cast(*Vector2) sys_call("TextServer", "font_get_glyph_size", 513728628, Vector2, main.p_object, font_rid, size, glyph); return call_ret.*; }  // 95
font_set_glyph_size :: (main: *TextServer, font_rid: RID, size: Vector2i, glyph: int, gl_size: Vector2) { sys_call("TextServer", "font_set_glyph_size", 1812632090, Nil, main.p_object, font_rid, size, glyph, gl_size);  }  // 96
font_get_glyph_uv_rect :: (main: *TextServer, font_rid: RID, size: Vector2i, glyph: int) -> Rect2 { call_ret := cast(*Rect2) sys_call("TextServer", "font_get_glyph_uv_rect", 2274268786, Rect2, main.p_object, font_rid, size, glyph); return call_ret.*; }  // 97
font_set_glyph_uv_rect :: (main: *TextServer, font_rid: RID, size: Vector2i, glyph: int, uv_rect: Rect2) { sys_call("TextServer", "font_set_glyph_uv_rect", 1973324081, Nil, main.p_object, font_rid, size, glyph, uv_rect);  }  // 98
font_get_glyph_texture_idx :: (main: *TextServer, font_rid: RID, size: Vector2i, glyph: int) -> int { call_ret := cast(*int) sys_call("TextServer", "font_get_glyph_texture_idx", 4292800474, int, main.p_object, font_rid, size, glyph); return call_ret.*; }  // 99
font_set_glyph_texture_idx :: (main: *TextServer, font_rid: RID, size: Vector2i, glyph: int, texture_idx: int) { sys_call("TextServer", "font_set_glyph_texture_idx", 4254580980, Nil, main.p_object, font_rid, size, glyph, texture_idx);  }  // 100
font_get_glyph_texture_rid :: (main: *TextServer, font_rid: RID, size: Vector2i, glyph: int) -> RID { call_ret := cast(*RID) sys_call("TextServer", "font_get_glyph_texture_rid", 1451696141, RID, main.p_object, font_rid, size, glyph); return call_ret.*; }  // 101
font_get_glyph_texture_size :: (main: *TextServer, font_rid: RID, size: Vector2i, glyph: int) -> Vector2 { call_ret := cast(*Vector2) sys_call("TextServer", "font_get_glyph_texture_size", 513728628, Vector2, main.p_object, font_rid, size, glyph); return call_ret.*; }  // 102
font_get_glyph_contours :: (main: *TextServer, font: RID, size: int, index: int) -> Dictionary { call_ret := cast(*Dictionary) sys_call("TextServer", "font_get_glyph_contours", 2903964473, Dictionary, main.p_object, font, size, index); return call_ret.*; }  // 103
font_get_kerning_list :: (main: *TextServer, font_rid: RID, size: int) -> [] Vector2i { call_ret := cast(*[] Vector2i) sys_call("TextServer", "font_get_kerning_list", 1778388067, [] Vector2i, main.p_object, font_rid, size); return call_ret.*; }  // 104
font_clear_kerning_map :: (main: *TextServer, font_rid: RID, size: int) { sys_call("TextServer", "font_clear_kerning_map", 3411492887, Nil, main.p_object, font_rid, size);  }  // 105
font_remove_kerning :: (main: *TextServer, font_rid: RID, size: int, glyph_pair: Vector2i) { sys_call("TextServer", "font_remove_kerning", 2141860016, Nil, main.p_object, font_rid, size, glyph_pair);  }  // 106
font_set_kerning :: (main: *TextServer, font_rid: RID, size: int, glyph_pair: Vector2i, kerning: Vector2) { sys_call("TextServer", "font_set_kerning", 3630965883, Nil, main.p_object, font_rid, size, glyph_pair, kerning);  }  // 107
font_get_kerning :: (main: *TextServer, font_rid: RID, size: int, glyph_pair: Vector2i) -> Vector2 { call_ret := cast(*Vector2) sys_call("TextServer", "font_get_kerning", 1019980169, Vector2, main.p_object, font_rid, size, glyph_pair); return call_ret.*; }  // 108
font_get_glyph_index :: (main: *TextServer, font_rid: RID, size: int, char: int, variation_selector: int) -> int { call_ret := cast(*int) sys_call("TextServer", "font_get_glyph_index", 1765635060, int, main.p_object, font_rid, size, char, variation_selector); return call_ret.*; }  // 109
font_get_char_from_glyph_index :: (main: *TextServer, font_rid: RID, size: int, glyph_index: int) -> int { call_ret := cast(*int) sys_call("TextServer", "font_get_char_from_glyph_index", 2156738276, int, main.p_object, font_rid, size, glyph_index); return call_ret.*; }  // 110
font_has_char :: (main: *TextServer, font_rid: RID, char: int) -> bool { call_ret := cast(*bool) sys_call("TextServer", "font_has_char", 3120086654, bool, main.p_object, font_rid, char); return call_ret.*; }  // 111
font_get_supported_chars :: (main: *TextServer, font_rid: RID) -> gstring { call_ret := cast(*gstring) sys_call("TextServer", "font_get_supported_chars", 642473191, gstring, main.p_object, font_rid); return call_ret.*; }  // 112
font_get_supported_glyphs :: (main: *TextServer, font_rid: RID) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("TextServer", "font_get_supported_glyphs", 788230395, PackedInt32Array, main.p_object, font_rid); return call_ret.*; }  // 113
font_render_range :: (main: *TextServer, font_rid: RID, size: Vector2i, start: int, end: int) { sys_call("TextServer", "font_render_range", 4254580980, Nil, main.p_object, font_rid, size, start, end);  }  // 114
font_render_glyph :: (main: *TextServer, font_rid: RID, size: Vector2i, index: int) { sys_call("TextServer", "font_render_glyph", 3810512262, Nil, main.p_object, font_rid, size, index);  }  // 115
font_draw_glyph :: (main: *TextServer, font_rid: RID, canvas: RID, size: int, pos: Vector2, index: int) { sys_call("TextServer", "font_draw_glyph", 1339057948, Nil, main.p_object, font_rid, canvas, size, pos, index);  }  // 116
font_draw_glyph_outline :: (main: *TextServer, font_rid: RID, canvas: RID, size: int, outline_size: int, pos: Vector2, index: int) { sys_call("TextServer", "font_draw_glyph_outline", 2626165733, Nil, main.p_object, font_rid, canvas, size, outline_size, pos, index);  }  // 117
font_is_language_supported :: (main: *TextServer, font_rid: RID, language: string) -> bool { call_ret := cast(*bool) sys_call("TextServer", "font_is_language_supported", 3199320846, bool, main.p_object, font_rid, language); return call_ret.*; }  // 118
font_set_language_support_override :: (main: *TextServer, font_rid: RID, language: string, supported: bool) { sys_call("TextServer", "font_set_language_support_override", 2313957094, Nil, main.p_object, font_rid, language, supported);  }  // 119
font_get_language_support_override :: (main: *TextServer, font_rid: RID, language: string) -> bool { call_ret := cast(*bool) sys_call("TextServer", "font_get_language_support_override", 2829184646, bool, main.p_object, font_rid, language); return call_ret.*; }  // 120
font_remove_language_support_override :: (main: *TextServer, font_rid: RID, language: string) { sys_call("TextServer", "font_remove_language_support_override", 2726140452, Nil, main.p_object, font_rid, language);  }  // 121
font_get_language_support_overrides :: (main: *TextServer, font_rid: RID) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("TextServer", "font_get_language_support_overrides", 2801473409, PackedStringArray, main.p_object, font_rid); return call_ret.*; }  // 122
font_is_script_supported :: (main: *TextServer, font_rid: RID, script: string) -> bool { call_ret := cast(*bool) sys_call("TextServer", "font_is_script_supported", 3199320846, bool, main.p_object, font_rid, script); return call_ret.*; }  // 123
font_set_script_support_override :: (main: *TextServer, font_rid: RID, script: string, supported: bool) { sys_call("TextServer", "font_set_script_support_override", 2313957094, Nil, main.p_object, font_rid, script, supported);  }  // 124
font_get_script_support_override :: (main: *TextServer, font_rid: RID, script: string) -> bool { call_ret := cast(*bool) sys_call("TextServer", "font_get_script_support_override", 2829184646, bool, main.p_object, font_rid, script); return call_ret.*; }  // 125
font_remove_script_support_override :: (main: *TextServer, font_rid: RID, script: string) { sys_call("TextServer", "font_remove_script_support_override", 2726140452, Nil, main.p_object, font_rid, script);  }  // 126
font_get_script_support_overrides :: (main: *TextServer, font_rid: RID) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("TextServer", "font_get_script_support_overrides", 2801473409, PackedStringArray, main.p_object, font_rid); return call_ret.*; }  // 127
font_set_opentype_feature_overrides :: (main: *TextServer, font_rid: RID, overrides: Dictionary) { sys_call("TextServer", "font_set_opentype_feature_overrides", 1217542888, Nil, main.p_object, font_rid, overrides);  }  // 128
font_get_opentype_feature_overrides :: (main: *TextServer, font_rid: RID) -> Dictionary { call_ret := cast(*Dictionary) sys_call("TextServer", "font_get_opentype_feature_overrides", 1882737106, Dictionary, main.p_object, font_rid); return call_ret.*; }  // 129
font_supported_feature_list :: (main: *TextServer, font_rid: RID) -> Dictionary { call_ret := cast(*Dictionary) sys_call("TextServer", "font_supported_feature_list", 1882737106, Dictionary, main.p_object, font_rid); return call_ret.*; }  // 130
font_supported_variation_list :: (main: *TextServer, font_rid: RID) -> Dictionary { call_ret := cast(*Dictionary) sys_call("TextServer", "font_supported_variation_list", 1882737106, Dictionary, main.p_object, font_rid); return call_ret.*; }  // 131
font_get_global_oversampling :: (main: *TextServer) -> float { call_ret := cast(*float) sys_call("TextServer", "font_get_global_oversampling", 1740695150, float, main.p_object); return call_ret.*; }  // 132
font_set_global_oversampling :: (main: *TextServer, oversampling: float) { sys_call("TextServer", "font_set_global_oversampling", 373806689, Nil, main.p_object, oversampling);  }  // 133
get_hex_code_box_size :: (main: *TextServer, size: int, index: int) -> Vector2 { call_ret := cast(*Vector2) sys_call("TextServer", "get_hex_code_box_size", 3016396712, Vector2, main.p_object, size, index); return call_ret.*; }  // 134
draw_hex_code_box :: (main: *TextServer, canvas: RID, size: int, pos: Vector2, index: int, color: Color) { sys_call("TextServer", "draw_hex_code_box", 1602046441, Nil, main.p_object, canvas, size, pos, index, color);  }  // 135
create_shaped_text :: (main: *TextServer) -> RID { call_ret := cast(*RID) sys_call("TextServer", "create_shaped_text", 1231398698, RID, main.p_object); return call_ret.*; }  // 136
shaped_text_clear :: (main: *TextServer, rid: RID) { sys_call("TextServer", "shaped_text_clear", 2722037293, Nil, main.p_object, rid);  }  // 137
shaped_text_set_direction :: (main: *TextServer, shaped: RID) { sys_call("TextServer", "shaped_text_set_direction", 1551430183, Nil, main.p_object, shaped);  }  // 138
shaped_text_get_direction :: (main: *TextServer, shaped: RID) -> TextServer.Direction { call_ret := cast(*TextServer.Direction) sys_call("TextServer", "shaped_text_get_direction", 3065904362, TextServer.Direction, main.p_object, shaped); return call_ret.*; }  // 139
shaped_text_get_inferred_direction :: (main: *TextServer, shaped: RID) -> TextServer.Direction { call_ret := cast(*TextServer.Direction) sys_call("TextServer", "shaped_text_get_inferred_direction", 3065904362, TextServer.Direction, main.p_object, shaped); return call_ret.*; }  // 140
shaped_text_set_bidi_override :: (main: *TextServer, shaped: RID, override: Array) { sys_call("TextServer", "shaped_text_set_bidi_override", 684822712, Nil, main.p_object, shaped, override);  }  // 141
shaped_text_set_custom_punctuation :: (main: *TextServer, shaped: RID, punct: string) { sys_call("TextServer", "shaped_text_set_custom_punctuation", 2726140452, Nil, main.p_object, shaped, punct);  }  // 142
shaped_text_get_custom_punctuation :: (main: *TextServer, shaped: RID) -> gstring { call_ret := cast(*gstring) sys_call("TextServer", "shaped_text_get_custom_punctuation", 642473191, gstring, main.p_object, shaped); return call_ret.*; }  // 143
shaped_text_set_custom_ellipsis :: (main: *TextServer, shaped: RID, char: int) { sys_call("TextServer", "shaped_text_set_custom_ellipsis", 3411492887, Nil, main.p_object, shaped, char);  }  // 144
shaped_text_get_custom_ellipsis :: (main: *TextServer, shaped: RID) -> int { call_ret := cast(*int) sys_call("TextServer", "shaped_text_get_custom_ellipsis", 2198884583, int, main.p_object, shaped); return call_ret.*; }  // 145
shaped_text_set_orientation :: (main: *TextServer, shaped: RID) { sys_call("TextServer", "shaped_text_set_orientation", 3019609126, Nil, main.p_object, shaped);  }  // 146
shaped_text_get_orientation :: (main: *TextServer, shaped: RID) -> TextServer.Orientation { call_ret := cast(*TextServer.Orientation) sys_call("TextServer", "shaped_text_get_orientation", 3142708106, TextServer.Orientation, main.p_object, shaped); return call_ret.*; }  // 147
shaped_text_set_preserve_invalid :: (main: *TextServer, shaped: RID, enabled: bool) { sys_call("TextServer", "shaped_text_set_preserve_invalid", 1265174801, Nil, main.p_object, shaped, enabled);  }  // 148
shaped_text_get_preserve_invalid :: (main: *TextServer, shaped: RID) -> bool { call_ret := cast(*bool) sys_call("TextServer", "shaped_text_get_preserve_invalid", 4155700596, bool, main.p_object, shaped); return call_ret.*; }  // 149
shaped_text_set_preserve_control :: (main: *TextServer, shaped: RID, enabled: bool) { sys_call("TextServer", "shaped_text_set_preserve_control", 1265174801, Nil, main.p_object, shaped, enabled);  }  // 150
shaped_text_get_preserve_control :: (main: *TextServer, shaped: RID) -> bool { call_ret := cast(*bool) sys_call("TextServer", "shaped_text_get_preserve_control", 4155700596, bool, main.p_object, shaped); return call_ret.*; }  // 151
shaped_text_set_spacing :: (main: *TextServer, shaped: RID, spacing: TextServer.SpacingType, value: int) { sys_call("TextServer", "shaped_text_set_spacing", 1307259930, Nil, main.p_object, shaped, spacing, value);  }  // 152
shaped_text_get_spacing :: (main: *TextServer, shaped: RID, spacing: TextServer.SpacingType) -> int { call_ret := cast(*int) sys_call("TextServer", "shaped_text_get_spacing", 1213653558, int, main.p_object, shaped, spacing); return call_ret.*; }  // 153
shaped_text_add_string :: (main: *TextServer, shaped: RID, text: string, fonts: [] RID, size: int) -> bool { call_ret := cast(*bool) sys_call("TextServer", "shaped_text_add_string", 623473029, bool, main.p_object, shaped, text, fonts, size); return call_ret.*; }  // 154
shaped_text_add_object :: (main: *TextServer, shaped: RID, key: Variant, size: Vector2) -> bool { call_ret := cast(*bool) sys_call("TextServer", "shaped_text_add_object", 3664424789, bool, main.p_object, shaped, key, size); return call_ret.*; }  // 155
shaped_text_resize_object :: (main: *TextServer, shaped: RID, key: Variant, size: Vector2) -> bool { call_ret := cast(*bool) sys_call("TextServer", "shaped_text_resize_object", 790361552, bool, main.p_object, shaped, key, size); return call_ret.*; }  // 156
shaped_get_span_count :: (main: *TextServer, shaped: RID) -> int { call_ret := cast(*int) sys_call("TextServer", "shaped_get_span_count", 2198884583, int, main.p_object, shaped); return call_ret.*; }  // 157
shaped_get_span_meta :: (main: *TextServer, shaped: RID, index: int) -> Variant { call_ret := cast(*Variant) sys_call("TextServer", "shaped_get_span_meta", 4069510997, Variant, main.p_object, shaped, index); return call_ret.*; }  // 158
shaped_get_span_embedded_object :: (main: *TextServer, shaped: RID, index: int) -> Variant { call_ret := cast(*Variant) sys_call("TextServer", "shaped_get_span_embedded_object", 4069510997, Variant, main.p_object, shaped, index); return call_ret.*; }  // 159
shaped_set_span_update_font :: (main: *TextServer, shaped: RID, index: int, fonts: [] RID, size: int) { sys_call("TextServer", "shaped_set_span_update_font", 2022725822, Nil, main.p_object, shaped, index, fonts, size);  }  // 160
shaped_text_substr :: (main: *TextServer, shaped: RID, start: int, length: int) -> RID { call_ret := cast(*RID) sys_call("TextServer", "shaped_text_substr", 1937682086, RID, main.p_object, shaped, start, length); return call_ret.*; }  // 161
shaped_text_get_parent :: (main: *TextServer, shaped: RID) -> RID { call_ret := cast(*RID) sys_call("TextServer", "shaped_text_get_parent", 3814569979, RID, main.p_object, shaped); return call_ret.*; }  // 162
shaped_text_fit_to_width :: (main: *TextServer, shaped: RID, width: float) -> float { call_ret := cast(*float) sys_call("TextServer", "shaped_text_fit_to_width", 530670926, float, main.p_object, shaped, width); return call_ret.*; }  // 163
shaped_text_tab_align :: (main: *TextServer, shaped: RID, tab_stops: PackedFloat32Array) -> float { call_ret := cast(*float) sys_call("TextServer", "shaped_text_tab_align", 1283669550, float, main.p_object, shaped, tab_stops); return call_ret.*; }  // 164
shaped_text_shape :: (main: *TextServer, shaped: RID) -> bool { call_ret := cast(*bool) sys_call("TextServer", "shaped_text_shape", 3521089500, bool, main.p_object, shaped); return call_ret.*; }  // 165
shaped_text_is_ready :: (main: *TextServer, shaped: RID) -> bool { call_ret := cast(*bool) sys_call("TextServer", "shaped_text_is_ready", 4155700596, bool, main.p_object, shaped); return call_ret.*; }  // 166
shaped_text_has_visible_chars :: (main: *TextServer, shaped: RID) -> bool { call_ret := cast(*bool) sys_call("TextServer", "shaped_text_has_visible_chars", 4155700596, bool, main.p_object, shaped); return call_ret.*; }  // 167
shaped_text_get_glyphs :: (main: *TextServer, shaped: RID) -> [] Dictionary { call_ret := cast(*[] Dictionary) sys_call("TextServer", "shaped_text_get_glyphs", 2684255073, [] Dictionary, main.p_object, shaped); return call_ret.*; }  // 168
shaped_text_sort_logical :: (main: *TextServer, shaped: RID) -> [] Dictionary { call_ret := cast(*[] Dictionary) sys_call("TextServer", "shaped_text_sort_logical", 2670461153, [] Dictionary, main.p_object, shaped); return call_ret.*; }  // 169
shaped_text_get_glyph_count :: (main: *TextServer, shaped: RID) -> int { call_ret := cast(*int) sys_call("TextServer", "shaped_text_get_glyph_count", 2198884583, int, main.p_object, shaped); return call_ret.*; }  // 170
shaped_text_get_range :: (main: *TextServer, shaped: RID) -> Vector2i { call_ret := cast(*Vector2i) sys_call("TextServer", "shaped_text_get_range", 733700038, Vector2i, main.p_object, shaped); return call_ret.*; }  // 171
shaped_text_get_line_breaks_adv :: (main: *TextServer, shaped: RID, width: PackedFloat32Array) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("TextServer", "shaped_text_get_line_breaks_adv", 2376991424, PackedInt32Array, main.p_object, shaped, width); return call_ret.*; }  // 172
shaped_text_get_line_breaks :: (main: *TextServer, shaped: RID, width: float) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("TextServer", "shaped_text_get_line_breaks", 2651359741, PackedInt32Array, main.p_object, shaped, width); return call_ret.*; }  // 173
shaped_text_get_word_breaks :: (main: *TextServer, shaped: RID) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("TextServer", "shaped_text_get_word_breaks", 4099476853, PackedInt32Array, main.p_object, shaped); return call_ret.*; }  // 174
shaped_text_get_trim_pos :: (main: *TextServer, shaped: RID) -> int { call_ret := cast(*int) sys_call("TextServer", "shaped_text_get_trim_pos", 2198884583, int, main.p_object, shaped); return call_ret.*; }  // 175
shaped_text_get_ellipsis_pos :: (main: *TextServer, shaped: RID) -> int { call_ret := cast(*int) sys_call("TextServer", "shaped_text_get_ellipsis_pos", 2198884583, int, main.p_object, shaped); return call_ret.*; }  // 176
shaped_text_get_ellipsis_glyphs :: (main: *TextServer, shaped: RID) -> [] Dictionary { call_ret := cast(*[] Dictionary) sys_call("TextServer", "shaped_text_get_ellipsis_glyphs", 2684255073, [] Dictionary, main.p_object, shaped); return call_ret.*; }  // 177
shaped_text_get_ellipsis_glyph_count :: (main: *TextServer, shaped: RID) -> int { call_ret := cast(*int) sys_call("TextServer", "shaped_text_get_ellipsis_glyph_count", 2198884583, int, main.p_object, shaped); return call_ret.*; }  // 178
shaped_text_overrun_trim_to_width :: (main: *TextServer, shaped: RID) { sys_call("TextServer", "shaped_text_overrun_trim_to_width", 2723146520, Nil, main.p_object, shaped);  }  // 179
shaped_text_get_objects :: (main: *TextServer, shaped: RID) -> Array { call_ret := cast(*Array) sys_call("TextServer", "shaped_text_get_objects", 2684255073, Array, main.p_object, shaped); return call_ret.*; }  // 180
shaped_text_get_object_rect :: (main: *TextServer, shaped: RID, key: Variant) -> Rect2 { call_ret := cast(*Rect2) sys_call("TextServer", "shaped_text_get_object_rect", 447978354, Rect2, main.p_object, shaped, key); return call_ret.*; }  // 181
shaped_text_get_object_range :: (main: *TextServer, shaped: RID, key: Variant) -> Vector2i { call_ret := cast(*Vector2i) sys_call("TextServer", "shaped_text_get_object_range", 2524675647, Vector2i, main.p_object, shaped, key); return call_ret.*; }  // 182
shaped_text_get_object_glyph :: (main: *TextServer, shaped: RID, key: Variant) -> int { call_ret := cast(*int) sys_call("TextServer", "shaped_text_get_object_glyph", 1260085030, int, main.p_object, shaped, key); return call_ret.*; }  // 183
shaped_text_get_size :: (main: *TextServer, shaped: RID) -> Vector2 { call_ret := cast(*Vector2) sys_call("TextServer", "shaped_text_get_size", 2440833711, Vector2, main.p_object, shaped); return call_ret.*; }  // 184
shaped_text_get_ascent :: (main: *TextServer, shaped: RID) -> float { call_ret := cast(*float) sys_call("TextServer", "shaped_text_get_ascent", 866169185, float, main.p_object, shaped); return call_ret.*; }  // 185
shaped_text_get_descent :: (main: *TextServer, shaped: RID) -> float { call_ret := cast(*float) sys_call("TextServer", "shaped_text_get_descent", 866169185, float, main.p_object, shaped); return call_ret.*; }  // 186
shaped_text_get_width :: (main: *TextServer, shaped: RID) -> float { call_ret := cast(*float) sys_call("TextServer", "shaped_text_get_width", 866169185, float, main.p_object, shaped); return call_ret.*; }  // 187
shaped_text_get_underline_position :: (main: *TextServer, shaped: RID) -> float { call_ret := cast(*float) sys_call("TextServer", "shaped_text_get_underline_position", 866169185, float, main.p_object, shaped); return call_ret.*; }  // 188
shaped_text_get_underline_thickness :: (main: *TextServer, shaped: RID) -> float { call_ret := cast(*float) sys_call("TextServer", "shaped_text_get_underline_thickness", 866169185, float, main.p_object, shaped); return call_ret.*; }  // 189
shaped_text_get_carets :: (main: *TextServer, shaped: RID, position: int) -> Dictionary { call_ret := cast(*Dictionary) sys_call("TextServer", "shaped_text_get_carets", 1574219346, Dictionary, main.p_object, shaped, position); return call_ret.*; }  // 190
shaped_text_get_selection :: (main: *TextServer, shaped: RID, start: int, end: int) -> PackedVector2Array { call_ret := cast(*PackedVector2Array) sys_call("TextServer", "shaped_text_get_selection", 3714187733, PackedVector2Array, main.p_object, shaped, start, end); return call_ret.*; }  // 191
shaped_text_hit_test_grapheme :: (main: *TextServer, shaped: RID, coords: float) -> int { call_ret := cast(*int) sys_call("TextServer", "shaped_text_hit_test_grapheme", 3149310417, int, main.p_object, shaped, coords); return call_ret.*; }  // 192
shaped_text_hit_test_position :: (main: *TextServer, shaped: RID, coords: float) -> int { call_ret := cast(*int) sys_call("TextServer", "shaped_text_hit_test_position", 3149310417, int, main.p_object, shaped, coords); return call_ret.*; }  // 193
shaped_text_get_grapheme_bounds :: (main: *TextServer, shaped: RID, pos: int) -> Vector2 { call_ret := cast(*Vector2) sys_call("TextServer", "shaped_text_get_grapheme_bounds", 2546185844, Vector2, main.p_object, shaped, pos); return call_ret.*; }  // 194
shaped_text_next_grapheme_pos :: (main: *TextServer, shaped: RID, pos: int) -> int { call_ret := cast(*int) sys_call("TextServer", "shaped_text_next_grapheme_pos", 1120910005, int, main.p_object, shaped, pos); return call_ret.*; }  // 195
shaped_text_prev_grapheme_pos :: (main: *TextServer, shaped: RID, pos: int) -> int { call_ret := cast(*int) sys_call("TextServer", "shaped_text_prev_grapheme_pos", 1120910005, int, main.p_object, shaped, pos); return call_ret.*; }  // 196
shaped_text_get_character_breaks :: (main: *TextServer, shaped: RID) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("TextServer", "shaped_text_get_character_breaks", 788230395, PackedInt32Array, main.p_object, shaped); return call_ret.*; }  // 197
shaped_text_next_character_pos :: (main: *TextServer, shaped: RID, pos: int) -> int { call_ret := cast(*int) sys_call("TextServer", "shaped_text_next_character_pos", 1120910005, int, main.p_object, shaped, pos); return call_ret.*; }  // 198
shaped_text_prev_character_pos :: (main: *TextServer, shaped: RID, pos: int) -> int { call_ret := cast(*int) sys_call("TextServer", "shaped_text_prev_character_pos", 1120910005, int, main.p_object, shaped, pos); return call_ret.*; }  // 199
shaped_text_closest_character_pos :: (main: *TextServer, shaped: RID, pos: int) -> int { call_ret := cast(*int) sys_call("TextServer", "shaped_text_closest_character_pos", 1120910005, int, main.p_object, shaped, pos); return call_ret.*; }  // 200
shaped_text_draw :: (main: *TextServer, shaped: RID, canvas: RID, pos: Vector2) { sys_call("TextServer", "shaped_text_draw", 880389142, Nil, main.p_object, shaped, canvas, pos);  }  // 201
shaped_text_draw_outline :: (main: *TextServer, shaped: RID, canvas: RID, pos: Vector2) { sys_call("TextServer", "shaped_text_draw_outline", 2559184194, Nil, main.p_object, shaped, canvas, pos);  }  // 202
shaped_text_get_dominant_direction_in_range :: (main: *TextServer, shaped: RID, start: int, end: int) -> TextServer.Direction { call_ret := cast(*TextServer.Direction) sys_call("TextServer", "shaped_text_get_dominant_direction_in_range", 3326907668, TextServer.Direction, main.p_object, shaped, start, end); return call_ret.*; }  // 203
format_number :: (main: *TextServer, number: string) -> gstring { call_ret := cast(*gstring) sys_call("TextServer", "format_number", 2664628024, gstring, main.p_object, number); return call_ret.*; }  // 204
parse_number :: (main: *TextServer, number: string) -> gstring { call_ret := cast(*gstring) sys_call("TextServer", "parse_number", 2664628024, gstring, main.p_object, number); return call_ret.*; }  // 205
percent_sign :: (main: *TextServer) -> gstring { call_ret := cast(*gstring) sys_call("TextServer", "percent_sign", 993269549, gstring, main.p_object); return call_ret.*; }  // 206
string_get_word_breaks :: (main: *TextServer, _string: string) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("TextServer", "string_get_word_breaks", 581857818, PackedInt32Array, main.p_object, _string); return call_ret.*; }  // 207
string_get_character_breaks :: (main: *TextServer, _string: string) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("TextServer", "string_get_character_breaks", 2333794773, PackedInt32Array, main.p_object, _string); return call_ret.*; }  // 208
is_confusable :: (main: *TextServer, _string: string, dict: PackedStringArray) -> int { call_ret := cast(*int) sys_call("TextServer", "is_confusable", 1433197768, int, main.p_object, _string, dict); return call_ret.*; }  // 209
spoof_check :: (main: *TextServer, _string: string) -> bool { call_ret := cast(*bool) sys_call("TextServer", "spoof_check", 3927539163, bool, main.p_object, _string); return call_ret.*; }  // 210
strip_diacritics :: (main: *TextServer, _string: string) -> gstring { call_ret := cast(*gstring) sys_call("TextServer", "strip_diacritics", 3135753539, gstring, main.p_object, _string); return call_ret.*; }  // 211
is_valid_identifier :: (main: *TextServer, _string: string) -> bool { call_ret := cast(*bool) sys_call("TextServer", "is_valid_identifier", 3927539163, bool, main.p_object, _string); return call_ret.*; }  // 212
is_valid_letter :: (main: *TextServer, unicode: int) -> bool { call_ret := cast(*bool) sys_call("TextServer", "is_valid_letter", 1116898809, bool, main.p_object, unicode); return call_ret.*; }  // 213
string_to_upper :: (main: *TextServer, _string: string) -> gstring { call_ret := cast(*gstring) sys_call("TextServer", "string_to_upper", 2664628024, gstring, main.p_object, _string); return call_ret.*; }  // 214
string_to_lower :: (main: *TextServer, _string: string) -> gstring { call_ret := cast(*gstring) sys_call("TextServer", "string_to_lower", 2664628024, gstring, main.p_object, _string); return call_ret.*; }  // 215
string_to_title :: (main: *TextServer, _string: string) -> gstring { call_ret := cast(*gstring) sys_call("TextServer", "string_to_title", 2664628024, gstring, main.p_object, _string); return call_ret.*; }  // 216
parse_structured_text :: (main: *TextServer, parser_type: TextServer.StructuredTextParser, args: Array, text: string) -> [] Vector3i { call_ret := cast(*[] Vector3i) sys_call("TextServer", "parse_structured_text", 3310685015, [] Vector3i, main.p_object, parser_type, args, text); return call_ret.*; }  // 217




add_interface :: (main: *TextServerManager, _interface: TextServer) { sys_call("TextServerManager", "add_interface", 1799689403, Nil, main.p_object, _interface);  }  // 0
get_interface_count :: (main: *TextServerManager) -> int { call_ret := cast(*int) sys_call("TextServerManager", "get_interface_count", 3905245786, int, main.p_object); return call_ret.*; }  // 1
remove_interface :: (main: *TextServerManager, _interface: TextServer) { sys_call("TextServerManager", "remove_interface", 1799689403, Nil, main.p_object, _interface);  }  // 2
get_interface :: (main: *TextServerManager, idx: int) -> *TextServer { call_ret := cast(*TextServer) sys_call("TextServerManager", "get_interface", 1672475555, TextServer, main.p_object, idx); return call_ret; }  // 3
get_interfaces :: (main: *TextServerManager) -> [] Dictionary { call_ret := cast(*[] Dictionary) sys_call("TextServerManager", "get_interfaces", 3995934104, [] Dictionary, main.p_object); return call_ret.*; }  // 4
find_interface :: (main: *TextServerManager, name: string) -> *TextServer { call_ret := cast(*TextServer) sys_call("TextServerManager", "find_interface", 2240905781, TextServer, main.p_object, name); return call_ret; }  // 5
set_primary_interface :: (main: *TextServerManager, index: TextServer) { sys_call("TextServerManager", "set_primary_interface", 1799689403, Nil, main.p_object, index);  }  // 6
get_primary_interface :: (main: *TextServerManager) -> *TextServer { call_ret := cast(*TextServer) sys_call("TextServerManager", "get_primary_interface", 905850878, TextServer, main.p_object); return call_ret; }  // 7


get_width :: (main: *Texture2D) -> int { call_ret := cast(*int) sys_call("Texture2D", "get_width", 3905245786, int, main.p_object); return call_ret.*; }  // 7
get_height :: (main: *Texture2D) -> int { call_ret := cast(*int) sys_call("Texture2D", "get_height", 3905245786, int, main.p_object); return call_ret.*; }  // 8
get_size :: (main: *Texture2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("Texture2D", "get_size", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 9
has_alpha :: (main: *Texture2D) -> bool { call_ret := cast(*bool) sys_call("Texture2D", "has_alpha", 36873697, bool, main.p_object); return call_ret.*; }  // 10
draw :: (main: *Texture2D, canvas_item: RID, position: Vector2) { sys_call("Texture2D", "draw", 2729649137, Nil, main.p_object, canvas_item, position);  }  // 11
draw_rect :: (main: *Texture2D, canvas_item: RID, rect: Rect2, tile: bool) { sys_call("Texture2D", "draw_rect", 3499451691, Nil, main.p_object, canvas_item, rect, tile);  }  // 12
draw_rect_region :: (main: *Texture2D, canvas_item: RID, rect: Rect2, src_rect: Rect2) { sys_call("Texture2D", "draw_rect_region", 2963678660, Nil, main.p_object, canvas_item, rect, src_rect);  }  // 13
get_image :: (main: *Texture2D) -> *Image { call_ret := cast(*Image) sys_call("Texture2D", "get_image", 4190603485, Image, main.p_object); return call_ret; }  // 14
create_placeholder :: (main: *Texture2D) -> *Resource { call_ret := cast(*Resource) sys_call("Texture2D", "create_placeholder", 121922552, Resource, main.p_object); return call_ret; }  // 15

create_placeholder :: (main: *Texture2DArray) -> *Resource { call_ret := cast(*Resource) sys_call("Texture2DArray", "create_placeholder", 121922552, Resource, main.p_object); return call_ret; }  // 0


set_texture_rd_rid :: (main: *Texture2DRD, texture_rd_rid: RID) { sys_call("Texture2DRD", "set_texture_rd_rid", 2722037293, Nil, main.p_object, texture_rd_rid);  }  // 0
get_texture_rd_rid :: (main: *Texture2DRD) -> RID { call_ret := cast(*RID) sys_call("Texture2DRD", "get_texture_rd_rid", 2944877500, RID, main.p_object); return call_ret.*; }  // 1

get_format :: (main: *Texture3D) -> Image.Format { call_ret := cast(*Image.Format) sys_call("Texture3D", "get_format", 3847873762, Image.Format, main.p_object); return call_ret.*; }  // 6
get_width :: (main: *Texture3D) -> int { call_ret := cast(*int) sys_call("Texture3D", "get_width", 3905245786, int, main.p_object); return call_ret.*; }  // 7
get_height :: (main: *Texture3D) -> int { call_ret := cast(*int) sys_call("Texture3D", "get_height", 3905245786, int, main.p_object); return call_ret.*; }  // 8
get_depth :: (main: *Texture3D) -> int { call_ret := cast(*int) sys_call("Texture3D", "get_depth", 3905245786, int, main.p_object); return call_ret.*; }  // 9
has_mipmaps :: (main: *Texture3D) -> bool { call_ret := cast(*bool) sys_call("Texture3D", "has_mipmaps", 36873697, bool, main.p_object); return call_ret.*; }  // 10
get_data :: (main: *Texture3D) -> [] Image { call_ret := cast(*[] Image) sys_call("Texture3D", "get_data", 3995934104, [] Image, main.p_object); return call_ret.*; }  // 11
create_placeholder :: (main: *Texture3D) -> *Resource { call_ret := cast(*Resource) sys_call("Texture3D", "create_placeholder", 121922552, Resource, main.p_object); return call_ret; }  // 12

set_texture_rd_rid :: (main: *Texture3DRD, texture_rd_rid: RID) { sys_call("Texture3DRD", "set_texture_rd_rid", 2722037293, Nil, main.p_object, texture_rd_rid);  }  // 0
get_texture_rd_rid :: (main: *Texture3DRD) -> RID { call_ret := cast(*RID) sys_call("Texture3DRD", "get_texture_rd_rid", 2944877500, RID, main.p_object); return call_ret.*; }  // 1

set_texture_normal :: (main: *TextureButton, texture: Texture2D) { sys_call("TextureButton", "set_texture_normal", 4051416890, Nil, main.p_object, texture);  }  // 0
set_texture_pressed :: (main: *TextureButton, texture: Texture2D) { sys_call("TextureButton", "set_texture_pressed", 4051416890, Nil, main.p_object, texture);  }  // 1
set_texture_hover :: (main: *TextureButton, texture: Texture2D) { sys_call("TextureButton", "set_texture_hover", 4051416890, Nil, main.p_object, texture);  }  // 2
set_texture_disabled :: (main: *TextureButton, texture: Texture2D) { sys_call("TextureButton", "set_texture_disabled", 4051416890, Nil, main.p_object, texture);  }  // 3
set_texture_focused :: (main: *TextureButton, texture: Texture2D) { sys_call("TextureButton", "set_texture_focused", 4051416890, Nil, main.p_object, texture);  }  // 4
set_click_mask :: (main: *TextureButton, mask: BitMap) { sys_call("TextureButton", "set_click_mask", 698588216, Nil, main.p_object, mask);  }  // 5
set_ignore_texture_size :: (main: *TextureButton, ignore: bool) { sys_call("TextureButton", "set_ignore_texture_size", 2586408642, Nil, main.p_object, ignore);  }  // 6
set_stretch_mode :: (main: *TextureButton, mode: TextureButton.StretchMode) { sys_call("TextureButton", "set_stretch_mode", 252530840, Nil, main.p_object, mode);  }  // 7
set_flip_h :: (main: *TextureButton, enable: bool) { sys_call("TextureButton", "set_flip_h", 2586408642, Nil, main.p_object, enable);  }  // 8
is_flipped_h :: (main: *TextureButton) -> bool { call_ret := cast(*bool) sys_call("TextureButton", "is_flipped_h", 36873697, bool, main.p_object); return call_ret.*; }  // 9
set_flip_v :: (main: *TextureButton, enable: bool) { sys_call("TextureButton", "set_flip_v", 2586408642, Nil, main.p_object, enable);  }  // 10
is_flipped_v :: (main: *TextureButton) -> bool { call_ret := cast(*bool) sys_call("TextureButton", "is_flipped_v", 36873697, bool, main.p_object); return call_ret.*; }  // 11
get_texture_normal :: (main: *TextureButton) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("TextureButton", "get_texture_normal", 3635182373, Texture2D, main.p_object); return call_ret; }  // 12
get_texture_pressed :: (main: *TextureButton) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("TextureButton", "get_texture_pressed", 3635182373, Texture2D, main.p_object); return call_ret; }  // 13
get_texture_hover :: (main: *TextureButton) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("TextureButton", "get_texture_hover", 3635182373, Texture2D, main.p_object); return call_ret; }  // 14
get_texture_disabled :: (main: *TextureButton) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("TextureButton", "get_texture_disabled", 3635182373, Texture2D, main.p_object); return call_ret; }  // 15
get_texture_focused :: (main: *TextureButton) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("TextureButton", "get_texture_focused", 3635182373, Texture2D, main.p_object); return call_ret; }  // 16
get_click_mask :: (main: *TextureButton) -> *BitMap { call_ret := cast(*BitMap) sys_call("TextureButton", "get_click_mask", 2459671998, BitMap, main.p_object); return call_ret; }  // 17
get_ignore_texture_size :: (main: *TextureButton) -> bool { call_ret := cast(*bool) sys_call("TextureButton", "get_ignore_texture_size", 36873697, bool, main.p_object); return call_ret.*; }  // 18
get_stretch_mode :: (main: *TextureButton) -> TextureButton.StretchMode { call_ret := cast(*TextureButton.StretchMode) sys_call("TextureButton", "get_stretch_mode", 33815122, TextureButton.StretchMode, main.p_object); return call_ret.*; }  // 19



get_format :: (main: *TextureLayered) -> Image.Format { call_ret := cast(*Image.Format) sys_call("TextureLayered", "get_format", 3847873762, Image.Format, main.p_object); return call_ret.*; }  // 7
get_layered_type :: (main: *TextureLayered) -> TextureLayered.LayeredType { call_ret := cast(*TextureLayered.LayeredType) sys_call("TextureLayered", "get_layered_type", 518123893, TextureLayered.LayeredType, main.p_object); return call_ret.*; }  // 8
get_width :: (main: *TextureLayered) -> int { call_ret := cast(*int) sys_call("TextureLayered", "get_width", 3905245786, int, main.p_object); return call_ret.*; }  // 9
get_height :: (main: *TextureLayered) -> int { call_ret := cast(*int) sys_call("TextureLayered", "get_height", 3905245786, int, main.p_object); return call_ret.*; }  // 10
get_layers :: (main: *TextureLayered) -> int { call_ret := cast(*int) sys_call("TextureLayered", "get_layers", 3905245786, int, main.p_object); return call_ret.*; }  // 11
has_mipmaps :: (main: *TextureLayered) -> bool { call_ret := cast(*bool) sys_call("TextureLayered", "has_mipmaps", 36873697, bool, main.p_object); return call_ret.*; }  // 12
get_layer_data :: (main: *TextureLayered, layer: int) -> *Image { call_ret := cast(*Image) sys_call("TextureLayered", "get_layer_data", 3655284255, Image, main.p_object, layer); return call_ret; }  // 13

set_texture_rd_rid :: (main: *TextureLayeredRD, texture_rd_rid: RID) { sys_call("TextureLayeredRD", "set_texture_rd_rid", 2722037293, Nil, main.p_object, texture_rd_rid);  }  // 0
get_texture_rd_rid :: (main: *TextureLayeredRD) -> RID { call_ret := cast(*RID) sys_call("TextureLayeredRD", "get_texture_rd_rid", 2944877500, RID, main.p_object); return call_ret.*; }  // 1

set_under_texture :: (main: *TextureProgressBar, tex: Texture2D) { sys_call("TextureProgressBar", "set_under_texture", 4051416890, Nil, main.p_object, tex);  }  // 0
get_under_texture :: (main: *TextureProgressBar) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("TextureProgressBar", "get_under_texture", 3635182373, Texture2D, main.p_object); return call_ret; }  // 1
set_progress_texture :: (main: *TextureProgressBar, tex: Texture2D) { sys_call("TextureProgressBar", "set_progress_texture", 4051416890, Nil, main.p_object, tex);  }  // 2
get_progress_texture :: (main: *TextureProgressBar) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("TextureProgressBar", "get_progress_texture", 3635182373, Texture2D, main.p_object); return call_ret; }  // 3
set_over_texture :: (main: *TextureProgressBar, tex: Texture2D) { sys_call("TextureProgressBar", "set_over_texture", 4051416890, Nil, main.p_object, tex);  }  // 4
get_over_texture :: (main: *TextureProgressBar) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("TextureProgressBar", "get_over_texture", 3635182373, Texture2D, main.p_object); return call_ret; }  // 5
set_fill_mode :: (main: *TextureProgressBar, mode: int) { sys_call("TextureProgressBar", "set_fill_mode", 1286410249, Nil, main.p_object, mode);  }  // 6
get_fill_mode :: (main: *TextureProgressBar) -> int { call_ret := cast(*int) sys_call("TextureProgressBar", "get_fill_mode", 2455072627, int, main.p_object); return call_ret.*; }  // 7
set_tint_under :: (main: *TextureProgressBar, tint: Color) { sys_call("TextureProgressBar", "set_tint_under", 2920490490, Nil, main.p_object, tint);  }  // 8
get_tint_under :: (main: *TextureProgressBar) -> Color { call_ret := cast(*Color) sys_call("TextureProgressBar", "get_tint_under", 3444240500, Color, main.p_object); return call_ret.*; }  // 9
set_tint_progress :: (main: *TextureProgressBar, tint: Color) { sys_call("TextureProgressBar", "set_tint_progress", 2920490490, Nil, main.p_object, tint);  }  // 10
get_tint_progress :: (main: *TextureProgressBar) -> Color { call_ret := cast(*Color) sys_call("TextureProgressBar", "get_tint_progress", 3444240500, Color, main.p_object); return call_ret.*; }  // 11
set_tint_over :: (main: *TextureProgressBar, tint: Color) { sys_call("TextureProgressBar", "set_tint_over", 2920490490, Nil, main.p_object, tint);  }  // 12
get_tint_over :: (main: *TextureProgressBar) -> Color { call_ret := cast(*Color) sys_call("TextureProgressBar", "get_tint_over", 3444240500, Color, main.p_object); return call_ret.*; }  // 13
set_texture_progress_offset :: (main: *TextureProgressBar, offset: Vector2) { sys_call("TextureProgressBar", "set_texture_progress_offset", 743155724, Nil, main.p_object, offset);  }  // 14
get_texture_progress_offset :: (main: *TextureProgressBar) -> Vector2 { call_ret := cast(*Vector2) sys_call("TextureProgressBar", "get_texture_progress_offset", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 15
set_radial_initial_angle :: (main: *TextureProgressBar, mode: float) { sys_call("TextureProgressBar", "set_radial_initial_angle", 373806689, Nil, main.p_object, mode);  }  // 16
get_radial_initial_angle :: (main: *TextureProgressBar) -> float { call_ret := cast(*float) sys_call("TextureProgressBar", "get_radial_initial_angle", 191475506, float, main.p_object); return call_ret.*; }  // 17
set_radial_center_offset :: (main: *TextureProgressBar, mode: Vector2) { sys_call("TextureProgressBar", "set_radial_center_offset", 743155724, Nil, main.p_object, mode);  }  // 18
get_radial_center_offset :: (main: *TextureProgressBar) -> Vector2 { call_ret := cast(*Vector2) sys_call("TextureProgressBar", "get_radial_center_offset", 1497962370, Vector2, main.p_object); return call_ret.*; }  // 19
set_fill_degrees :: (main: *TextureProgressBar, mode: float) { sys_call("TextureProgressBar", "set_fill_degrees", 373806689, Nil, main.p_object, mode);  }  // 20
get_fill_degrees :: (main: *TextureProgressBar) -> float { call_ret := cast(*float) sys_call("TextureProgressBar", "get_fill_degrees", 191475506, float, main.p_object); return call_ret.*; }  // 21
set_stretch_margin :: (main: *TextureProgressBar, margin: Side, value: int) { sys_call("TextureProgressBar", "set_stretch_margin", 437707142, Nil, main.p_object, margin, value);  }  // 22
get_stretch_margin :: (main: *TextureProgressBar, margin: Side) -> int { call_ret := cast(*int) sys_call("TextureProgressBar", "get_stretch_margin", 1983885014, int, main.p_object, margin); return call_ret.*; }  // 23
set_nine_patch_stretch :: (main: *TextureProgressBar, stretch: bool) { sys_call("TextureProgressBar", "set_nine_patch_stretch", 2586408642, Nil, main.p_object, stretch);  }  // 24
get_nine_patch_stretch :: (main: *TextureProgressBar) -> bool { call_ret := cast(*bool) sys_call("TextureProgressBar", "get_nine_patch_stretch", 36873697, bool, main.p_object); return call_ret.*; }  // 25

set_texture :: (main: *TextureRect, texture: Texture2D) { sys_call("TextureRect", "set_texture", 4051416890, Nil, main.p_object, texture);  }  // 0
get_texture :: (main: *TextureRect) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("TextureRect", "get_texture", 3635182373, Texture2D, main.p_object); return call_ret; }  // 1
set_expand_mode :: (main: *TextureRect, expand_mode: TextureRect.ExpandMode) { sys_call("TextureRect", "set_expand_mode", 1870766882, Nil, main.p_object, expand_mode);  }  // 2
get_expand_mode :: (main: *TextureRect) -> TextureRect.ExpandMode { call_ret := cast(*TextureRect.ExpandMode) sys_call("TextureRect", "get_expand_mode", 3863824733, TextureRect.ExpandMode, main.p_object); return call_ret.*; }  // 3
set_flip_h :: (main: *TextureRect, enable: bool) { sys_call("TextureRect", "set_flip_h", 2586408642, Nil, main.p_object, enable);  }  // 4
is_flipped_h :: (main: *TextureRect) -> bool { call_ret := cast(*bool) sys_call("TextureRect", "is_flipped_h", 36873697, bool, main.p_object); return call_ret.*; }  // 5
set_flip_v :: (main: *TextureRect, enable: bool) { sys_call("TextureRect", "set_flip_v", 2586408642, Nil, main.p_object, enable);  }  // 6
is_flipped_v :: (main: *TextureRect) -> bool { call_ret := cast(*bool) sys_call("TextureRect", "is_flipped_v", 36873697, bool, main.p_object); return call_ret.*; }  // 7
set_stretch_mode :: (main: *TextureRect, stretch_mode: TextureRect.StretchMode) { sys_call("TextureRect", "set_stretch_mode", 58788729, Nil, main.p_object, stretch_mode);  }  // 8
get_stretch_mode :: (main: *TextureRect) -> TextureRect.StretchMode { call_ret := cast(*TextureRect.StretchMode) sys_call("TextureRect", "get_stretch_mode", 346396079, TextureRect.StretchMode, main.p_object); return call_ret.*; }  // 9

set_icon :: (main: *Theme, name: string, theme_type: string, texture: Texture2D) { sys_call("Theme", "set_icon", 2188371082, Nil, main.p_object, name, theme_type, texture);  }  // 0
get_icon :: (main: *Theme, name: string, theme_type: string) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("Theme", "get_icon", 934555193, Texture2D, main.p_object, name, theme_type); return call_ret; }  // 1
has_icon :: (main: *Theme, name: string, theme_type: string) -> bool { call_ret := cast(*bool) sys_call("Theme", "has_icon", 471820014, bool, main.p_object, name, theme_type); return call_ret.*; }  // 2
rename_icon :: (main: *Theme, old_name: string, name: string, theme_type: string) { sys_call("Theme", "rename_icon", 642128662, Nil, main.p_object, old_name, name, theme_type);  }  // 3
clear_icon :: (main: *Theme, name: string, theme_type: string) { sys_call("Theme", "clear_icon", 3740211285, Nil, main.p_object, name, theme_type);  }  // 4
get_icon_list :: (main: *Theme, theme_type: string) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("Theme", "get_icon_list", 4291131558, PackedStringArray, main.p_object, theme_type); return call_ret.*; }  // 5
get_icon_type_list :: (main: *Theme) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("Theme", "get_icon_type_list", 1139954409, PackedStringArray, main.p_object); return call_ret.*; }  // 6
set_stylebox :: (main: *Theme, name: string, theme_type: string, texture: StyleBox) { sys_call("Theme", "set_stylebox", 2075907568, Nil, main.p_object, name, theme_type, texture);  }  // 7
get_stylebox :: (main: *Theme, name: string, theme_type: string) -> *StyleBox { call_ret := cast(*StyleBox) sys_call("Theme", "get_stylebox", 3405608165, StyleBox, main.p_object, name, theme_type); return call_ret; }  // 8
has_stylebox :: (main: *Theme, name: string, theme_type: string) -> bool { call_ret := cast(*bool) sys_call("Theme", "has_stylebox", 471820014, bool, main.p_object, name, theme_type); return call_ret.*; }  // 9
rename_stylebox :: (main: *Theme, old_name: string, name: string, theme_type: string) { sys_call("Theme", "rename_stylebox", 642128662, Nil, main.p_object, old_name, name, theme_type);  }  // 10
clear_stylebox :: (main: *Theme, name: string, theme_type: string) { sys_call("Theme", "clear_stylebox", 3740211285, Nil, main.p_object, name, theme_type);  }  // 11
get_stylebox_list :: (main: *Theme, theme_type: string) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("Theme", "get_stylebox_list", 4291131558, PackedStringArray, main.p_object, theme_type); return call_ret.*; }  // 12
get_stylebox_type_list :: (main: *Theme) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("Theme", "get_stylebox_type_list", 1139954409, PackedStringArray, main.p_object); return call_ret.*; }  // 13
set_font :: (main: *Theme, name: string, theme_type: string, font: Font) { sys_call("Theme", "set_font", 177292320, Nil, main.p_object, name, theme_type, font);  }  // 14
get_font :: (main: *Theme, name: string, theme_type: string) -> *Font { call_ret := cast(*Font) sys_call("Theme", "get_font", 3445063586, Font, main.p_object, name, theme_type); return call_ret; }  // 15
has_font :: (main: *Theme, name: string, theme_type: string) -> bool { call_ret := cast(*bool) sys_call("Theme", "has_font", 471820014, bool, main.p_object, name, theme_type); return call_ret.*; }  // 16
rename_font :: (main: *Theme, old_name: string, name: string, theme_type: string) { sys_call("Theme", "rename_font", 642128662, Nil, main.p_object, old_name, name, theme_type);  }  // 17
clear_font :: (main: *Theme, name: string, theme_type: string) { sys_call("Theme", "clear_font", 3740211285, Nil, main.p_object, name, theme_type);  }  // 18
get_font_list :: (main: *Theme, theme_type: string) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("Theme", "get_font_list", 4291131558, PackedStringArray, main.p_object, theme_type); return call_ret.*; }  // 19
get_font_type_list :: (main: *Theme) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("Theme", "get_font_type_list", 1139954409, PackedStringArray, main.p_object); return call_ret.*; }  // 20
set_font_size :: (main: *Theme, name: string, theme_type: string, font_size: int) { sys_call("Theme", "set_font_size", 281601298, Nil, main.p_object, name, theme_type, font_size);  }  // 21
get_font_size :: (main: *Theme, name: string, theme_type: string) -> int { call_ret := cast(*int) sys_call("Theme", "get_font_size", 2419549490, int, main.p_object, name, theme_type); return call_ret.*; }  // 22
has_font_size :: (main: *Theme, name: string, theme_type: string) -> bool { call_ret := cast(*bool) sys_call("Theme", "has_font_size", 471820014, bool, main.p_object, name, theme_type); return call_ret.*; }  // 23
rename_font_size :: (main: *Theme, old_name: string, name: string, theme_type: string) { sys_call("Theme", "rename_font_size", 642128662, Nil, main.p_object, old_name, name, theme_type);  }  // 24
clear_font_size :: (main: *Theme, name: string, theme_type: string) { sys_call("Theme", "clear_font_size", 3740211285, Nil, main.p_object, name, theme_type);  }  // 25
get_font_size_list :: (main: *Theme, theme_type: string) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("Theme", "get_font_size_list", 4291131558, PackedStringArray, main.p_object, theme_type); return call_ret.*; }  // 26
get_font_size_type_list :: (main: *Theme) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("Theme", "get_font_size_type_list", 1139954409, PackedStringArray, main.p_object); return call_ret.*; }  // 27
set_color :: (main: *Theme, name: string, theme_type: string, color: Color) { sys_call("Theme", "set_color", 4111215154, Nil, main.p_object, name, theme_type, color);  }  // 28
get_color :: (main: *Theme, name: string, theme_type: string) -> Color { call_ret := cast(*Color) sys_call("Theme", "get_color", 2015923404, Color, main.p_object, name, theme_type); return call_ret.*; }  // 29
has_color :: (main: *Theme, name: string, theme_type: string) -> bool { call_ret := cast(*bool) sys_call("Theme", "has_color", 471820014, bool, main.p_object, name, theme_type); return call_ret.*; }  // 30
rename_color :: (main: *Theme, old_name: string, name: string, theme_type: string) { sys_call("Theme", "rename_color", 642128662, Nil, main.p_object, old_name, name, theme_type);  }  // 31
clear_color :: (main: *Theme, name: string, theme_type: string) { sys_call("Theme", "clear_color", 3740211285, Nil, main.p_object, name, theme_type);  }  // 32
get_color_list :: (main: *Theme, theme_type: string) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("Theme", "get_color_list", 4291131558, PackedStringArray, main.p_object, theme_type); return call_ret.*; }  // 33
get_color_type_list :: (main: *Theme) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("Theme", "get_color_type_list", 1139954409, PackedStringArray, main.p_object); return call_ret.*; }  // 34
set_constant :: (main: *Theme, name: string, theme_type: string, constant: int) { sys_call("Theme", "set_constant", 281601298, Nil, main.p_object, name, theme_type, constant);  }  // 35
get_constant :: (main: *Theme, name: string, theme_type: string) -> int { call_ret := cast(*int) sys_call("Theme", "get_constant", 2419549490, int, main.p_object, name, theme_type); return call_ret.*; }  // 36
has_constant :: (main: *Theme, name: string, theme_type: string) -> bool { call_ret := cast(*bool) sys_call("Theme", "has_constant", 471820014, bool, main.p_object, name, theme_type); return call_ret.*; }  // 37
rename_constant :: (main: *Theme, old_name: string, name: string, theme_type: string) { sys_call("Theme", "rename_constant", 642128662, Nil, main.p_object, old_name, name, theme_type);  }  // 38
clear_constant :: (main: *Theme, name: string, theme_type: string) { sys_call("Theme", "clear_constant", 3740211285, Nil, main.p_object, name, theme_type);  }  // 39
get_constant_list :: (main: *Theme, theme_type: string) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("Theme", "get_constant_list", 4291131558, PackedStringArray, main.p_object, theme_type); return call_ret.*; }  // 40
get_constant_type_list :: (main: *Theme) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("Theme", "get_constant_type_list", 1139954409, PackedStringArray, main.p_object); return call_ret.*; }  // 41
set_default_base_scale :: (main: *Theme, base_scale: float) { sys_call("Theme", "set_default_base_scale", 373806689, Nil, main.p_object, base_scale);  }  // 42
get_default_base_scale :: (main: *Theme) -> float { call_ret := cast(*float) sys_call("Theme", "get_default_base_scale", 1740695150, float, main.p_object); return call_ret.*; }  // 43
has_default_base_scale :: (main: *Theme) -> bool { call_ret := cast(*bool) sys_call("Theme", "has_default_base_scale", 36873697, bool, main.p_object); return call_ret.*; }  // 44
set_default_font :: (main: *Theme, font: Font) { sys_call("Theme", "set_default_font", 1262170328, Nil, main.p_object, font);  }  // 45
get_default_font :: (main: *Theme) -> *Font { call_ret := cast(*Font) sys_call("Theme", "get_default_font", 3229501585, Font, main.p_object); return call_ret; }  // 46
has_default_font :: (main: *Theme) -> bool { call_ret := cast(*bool) sys_call("Theme", "has_default_font", 36873697, bool, main.p_object); return call_ret.*; }  // 47
set_default_font_size :: (main: *Theme, font_size: int) { sys_call("Theme", "set_default_font_size", 1286410249, Nil, main.p_object, font_size);  }  // 48
get_default_font_size :: (main: *Theme) -> int { call_ret := cast(*int) sys_call("Theme", "get_default_font_size", 3905245786, int, main.p_object); return call_ret.*; }  // 49
has_default_font_size :: (main: *Theme) -> bool { call_ret := cast(*bool) sys_call("Theme", "has_default_font_size", 36873697, bool, main.p_object); return call_ret.*; }  // 50
set_theme_item :: (main: *Theme, data_type: Theme.DataType, name: string, theme_type: string, value: Variant) { sys_call("Theme", "set_theme_item", 2492983623, Nil, main.p_object, data_type, name, theme_type, value);  }  // 51
get_theme_item :: (main: *Theme, data_type: Theme.DataType, name: string, theme_type: string) -> Variant { call_ret := cast(*Variant) sys_call("Theme", "get_theme_item", 2191024021, Variant, main.p_object, data_type, name, theme_type); return call_ret.*; }  // 52
has_theme_item :: (main: *Theme, data_type: Theme.DataType, name: string, theme_type: string) -> bool { call_ret := cast(*bool) sys_call("Theme", "has_theme_item", 1739311056, bool, main.p_object, data_type, name, theme_type); return call_ret.*; }  // 53
rename_theme_item :: (main: *Theme, data_type: Theme.DataType, old_name: string, name: string, theme_type: string) { sys_call("Theme", "rename_theme_item", 3900867553, Nil, main.p_object, data_type, old_name, name, theme_type);  }  // 54
clear_theme_item :: (main: *Theme, data_type: Theme.DataType, name: string, theme_type: string) { sys_call("Theme", "clear_theme_item", 2965505587, Nil, main.p_object, data_type, name, theme_type);  }  // 55
get_theme_item_list :: (main: *Theme, data_type: Theme.DataType, theme_type: string) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("Theme", "get_theme_item_list", 3726716710, PackedStringArray, main.p_object, data_type, theme_type); return call_ret.*; }  // 56
get_theme_item_type_list :: (main: *Theme, data_type: Theme.DataType) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("Theme", "get_theme_item_type_list", 1316004935, PackedStringArray, main.p_object, data_type); return call_ret.*; }  // 57
set_type_variation :: (main: *Theme, theme_type: string, base_type: string) { sys_call("Theme", "set_type_variation", 3740211285, Nil, main.p_object, theme_type, base_type);  }  // 58
is_type_variation :: (main: *Theme, theme_type: string, base_type: string) -> bool { call_ret := cast(*bool) sys_call("Theme", "is_type_variation", 471820014, bool, main.p_object, theme_type, base_type); return call_ret.*; }  // 59
clear_type_variation :: (main: *Theme, theme_type: string) { sys_call("Theme", "clear_type_variation", 3304788590, Nil, main.p_object, theme_type);  }  // 60
get_type_variation_base :: (main: *Theme, theme_type: string) -> StringName { call_ret := cast(*StringName) sys_call("Theme", "get_type_variation_base", 1965194235, StringName, main.p_object, theme_type); return call_ret.*; }  // 61
get_type_variation_list :: (main: *Theme, base_type: string) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("Theme", "get_type_variation_list", 1761182771, PackedStringArray, main.p_object, base_type); return call_ret.*; }  // 62
add_type :: (main: *Theme, theme_type: string) { sys_call("Theme", "add_type", 3304788590, Nil, main.p_object, theme_type);  }  // 63
remove_type :: (main: *Theme, theme_type: string) { sys_call("Theme", "remove_type", 3304788590, Nil, main.p_object, theme_type);  }  // 64
get_type_list :: (main: *Theme) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("Theme", "get_type_list", 1139954409, PackedStringArray, main.p_object); return call_ret.*; }  // 65
merge_with :: (main: *Theme, other: Theme) { sys_call("Theme", "merge_with", 2326690814, Nil, main.p_object, other);  }  // 66
clear :: (main: *Theme) { sys_call("Theme", "clear", 3218959716, Nil, main.p_object);  }  // 67

get_default_theme :: (main: *ThemeDB) -> *Theme { call_ret := cast(*Theme) sys_call("ThemeDB", "get_default_theme", 754276358, Theme, main.p_object); return call_ret; }  // 0
get_project_theme :: (main: *ThemeDB) -> *Theme { call_ret := cast(*Theme) sys_call("ThemeDB", "get_project_theme", 754276358, Theme, main.p_object); return call_ret; }  // 1
set_fallback_base_scale :: (main: *ThemeDB, base_scale: float) { sys_call("ThemeDB", "set_fallback_base_scale", 373806689, Nil, main.p_object, base_scale);  }  // 2
get_fallback_base_scale :: (main: *ThemeDB) -> float { call_ret := cast(*float) sys_call("ThemeDB", "get_fallback_base_scale", 191475506, float, main.p_object); return call_ret.*; }  // 3
set_fallback_font :: (main: *ThemeDB, font: Font) { sys_call("ThemeDB", "set_fallback_font", 1262170328, Nil, main.p_object, font);  }  // 4
get_fallback_font :: (main: *ThemeDB) -> *Font { call_ret := cast(*Font) sys_call("ThemeDB", "get_fallback_font", 3656929885, Font, main.p_object); return call_ret; }  // 5
set_fallback_font_size :: (main: *ThemeDB, font_size: int) { sys_call("ThemeDB", "set_fallback_font_size", 1286410249, Nil, main.p_object, font_size);  }  // 6
get_fallback_font_size :: (main: *ThemeDB) -> int { call_ret := cast(*int) sys_call("ThemeDB", "get_fallback_font_size", 2455072627, int, main.p_object); return call_ret.*; }  // 7
set_fallback_icon :: (main: *ThemeDB, icon: Texture2D) { sys_call("ThemeDB", "set_fallback_icon", 4051416890, Nil, main.p_object, icon);  }  // 8
get_fallback_icon :: (main: *ThemeDB) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("ThemeDB", "get_fallback_icon", 255860311, Texture2D, main.p_object); return call_ret; }  // 9
set_fallback_stylebox :: (main: *ThemeDB, stylebox: StyleBox) { sys_call("ThemeDB", "set_fallback_stylebox", 2797200388, Nil, main.p_object, stylebox);  }  // 10
get_fallback_stylebox :: (main: *ThemeDB) -> *StyleBox { call_ret := cast(*StyleBox) sys_call("ThemeDB", "get_fallback_stylebox", 496040854, StyleBox, main.p_object); return call_ret; }  // 11

start :: (main: *Thread, callable: Callable) -> Error { call_ret := cast(*Error) sys_call("Thread", "start", 1327203254, Error, main.p_object, callable); return call_ret.*; }  // 0
get_id :: (main: *Thread) -> gstring { call_ret := cast(*gstring) sys_call("Thread", "get_id", 201670096, gstring, main.p_object); return call_ret.*; }  // 1
is_started :: (main: *Thread) -> bool { call_ret := cast(*bool) sys_call("Thread", "is_started", 36873697, bool, main.p_object); return call_ret.*; }  // 2
is_alive :: (main: *Thread) -> bool { call_ret := cast(*bool) sys_call("Thread", "is_alive", 36873697, bool, main.p_object); return call_ret.*; }  // 3
wait_to_finish :: (main: *Thread) -> Variant { call_ret := cast(*Variant) sys_call("Thread", "wait_to_finish", 1460262497, Variant, main.p_object); return call_ret.*; }  // 4
set_thread_safety_checks_enabled :: (main: *Thread, enabled: bool) { sys_call("Thread", "set_thread_safety_checks_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 5

set_flip_h :: (main: *TileData, flip_h: bool) { sys_call("TileData", "set_flip_h", 2586408642, Nil, main.p_object, flip_h);  }  // 0
get_flip_h :: (main: *TileData) -> bool { call_ret := cast(*bool) sys_call("TileData", "get_flip_h", 36873697, bool, main.p_object); return call_ret.*; }  // 1
set_flip_v :: (main: *TileData, flip_v: bool) { sys_call("TileData", "set_flip_v", 2586408642, Nil, main.p_object, flip_v);  }  // 2
get_flip_v :: (main: *TileData) -> bool { call_ret := cast(*bool) sys_call("TileData", "get_flip_v", 36873697, bool, main.p_object); return call_ret.*; }  // 3
set_transpose :: (main: *TileData, transpose: bool) { sys_call("TileData", "set_transpose", 2586408642, Nil, main.p_object, transpose);  }  // 4
get_transpose :: (main: *TileData) -> bool { call_ret := cast(*bool) sys_call("TileData", "get_transpose", 36873697, bool, main.p_object); return call_ret.*; }  // 5
set_material :: (main: *TileData, material: Material) { sys_call("TileData", "set_material", 2757459619, Nil, main.p_object, material);  }  // 6
get_material :: (main: *TileData) -> *Material { call_ret := cast(*Material) sys_call("TileData", "get_material", 5934680, Material, main.p_object); return call_ret; }  // 7
set_texture_origin :: (main: *TileData, texture_origin: Vector2i) { sys_call("TileData", "set_texture_origin", 1130785943, Nil, main.p_object, texture_origin);  }  // 8
get_texture_origin :: (main: *TileData) -> Vector2i { call_ret := cast(*Vector2i) sys_call("TileData", "get_texture_origin", 3690982128, Vector2i, main.p_object); return call_ret.*; }  // 9
set_modulate :: (main: *TileData, modulate: Color) { sys_call("TileData", "set_modulate", 2920490490, Nil, main.p_object, modulate);  }  // 10
get_modulate :: (main: *TileData) -> Color { call_ret := cast(*Color) sys_call("TileData", "get_modulate", 3444240500, Color, main.p_object); return call_ret.*; }  // 11
set_z_index :: (main: *TileData, z_index: int) { sys_call("TileData", "set_z_index", 1286410249, Nil, main.p_object, z_index);  }  // 12
get_z_index :: (main: *TileData) -> int { call_ret := cast(*int) sys_call("TileData", "get_z_index", 3905245786, int, main.p_object); return call_ret.*; }  // 13
set_y_sort_origin :: (main: *TileData, y_sort_origin: int) { sys_call("TileData", "set_y_sort_origin", 1286410249, Nil, main.p_object, y_sort_origin);  }  // 14
get_y_sort_origin :: (main: *TileData) -> int { call_ret := cast(*int) sys_call("TileData", "get_y_sort_origin", 3905245786, int, main.p_object); return call_ret.*; }  // 15
set_occluder_polygons_count :: (main: *TileData, layer_id: int, polygons_count: int) { sys_call("TileData", "set_occluder_polygons_count", 3937882851, Nil, main.p_object, layer_id, polygons_count);  }  // 16
get_occluder_polygons_count :: (main: *TileData, layer_id: int) -> int { call_ret := cast(*int) sys_call("TileData", "get_occluder_polygons_count", 923996154, int, main.p_object, layer_id); return call_ret.*; }  // 17
add_occluder_polygon :: (main: *TileData, layer_id: int) { sys_call("TileData", "add_occluder_polygon", 1286410249, Nil, main.p_object, layer_id);  }  // 18
remove_occluder_polygon :: (main: *TileData, layer_id: int, polygon_index: int) { sys_call("TileData", "remove_occluder_polygon", 3937882851, Nil, main.p_object, layer_id, polygon_index);  }  // 19
set_occluder_polygon :: (main: *TileData, layer_id: int, polygon_index: int, polygon: OccluderPolygon2D) { sys_call("TileData", "set_occluder_polygon", 164249167, Nil, main.p_object, layer_id, polygon_index, polygon);  }  // 20
get_occluder_polygon :: (main: *TileData, layer_id: int, polygon_index: int) -> *OccluderPolygon2D { call_ret := cast(*OccluderPolygon2D) sys_call("TileData", "get_occluder_polygon", 971166743, OccluderPolygon2D, main.p_object, layer_id, polygon_index); return call_ret; }  // 21
set_occluder :: (main: *TileData, layer_id: int, occluder_polygon: OccluderPolygon2D) { sys_call("TileData", "set_occluder", 914399637, Nil, main.p_object, layer_id, occluder_polygon);  }  // 22
get_occluder :: (main: *TileData, layer_id: int) -> *OccluderPolygon2D { call_ret := cast(*OccluderPolygon2D) sys_call("TileData", "get_occluder", 2377324099, OccluderPolygon2D, main.p_object, layer_id); return call_ret; }  // 23
set_constant_linear_velocity :: (main: *TileData, layer_id: int, velocity: Vector2) { sys_call("TileData", "set_constant_linear_velocity", 163021252, Nil, main.p_object, layer_id, velocity);  }  // 24
get_constant_linear_velocity :: (main: *TileData, layer_id: int) -> Vector2 { call_ret := cast(*Vector2) sys_call("TileData", "get_constant_linear_velocity", 2299179447, Vector2, main.p_object, layer_id); return call_ret.*; }  // 25
set_constant_angular_velocity :: (main: *TileData, layer_id: int, velocity: float) { sys_call("TileData", "set_constant_angular_velocity", 1602489585, Nil, main.p_object, layer_id, velocity);  }  // 26
get_constant_angular_velocity :: (main: *TileData, layer_id: int) -> float { call_ret := cast(*float) sys_call("TileData", "get_constant_angular_velocity", 2339986948, float, main.p_object, layer_id); return call_ret.*; }  // 27
set_collision_polygons_count :: (main: *TileData, layer_id: int, polygons_count: int) { sys_call("TileData", "set_collision_polygons_count", 3937882851, Nil, main.p_object, layer_id, polygons_count);  }  // 28
get_collision_polygons_count :: (main: *TileData, layer_id: int) -> int { call_ret := cast(*int) sys_call("TileData", "get_collision_polygons_count", 923996154, int, main.p_object, layer_id); return call_ret.*; }  // 29
add_collision_polygon :: (main: *TileData, layer_id: int) { sys_call("TileData", "add_collision_polygon", 1286410249, Nil, main.p_object, layer_id);  }  // 30
remove_collision_polygon :: (main: *TileData, layer_id: int, polygon_index: int) { sys_call("TileData", "remove_collision_polygon", 3937882851, Nil, main.p_object, layer_id, polygon_index);  }  // 31
set_collision_polygon_points :: (main: *TileData, layer_id: int, polygon_index: int, polygon: PackedVector2Array) { sys_call("TileData", "set_collision_polygon_points", 3230546541, Nil, main.p_object, layer_id, polygon_index, polygon);  }  // 32
get_collision_polygon_points :: (main: *TileData, layer_id: int, polygon_index: int) -> PackedVector2Array { call_ret := cast(*PackedVector2Array) sys_call("TileData", "get_collision_polygon_points", 103942801, PackedVector2Array, main.p_object, layer_id, polygon_index); return call_ret.*; }  // 33
set_collision_polygon_one_way :: (main: *TileData, layer_id: int, polygon_index: int, one_way: bool) { sys_call("TileData", "set_collision_polygon_one_way", 1383440665, Nil, main.p_object, layer_id, polygon_index, one_way);  }  // 34
is_collision_polygon_one_way :: (main: *TileData, layer_id: int, polygon_index: int) -> bool { call_ret := cast(*bool) sys_call("TileData", "is_collision_polygon_one_way", 2522259332, bool, main.p_object, layer_id, polygon_index); return call_ret.*; }  // 35
set_collision_polygon_one_way_margin :: (main: *TileData, layer_id: int, polygon_index: int, one_way_margin: float) { sys_call("TileData", "set_collision_polygon_one_way_margin", 3506521499, Nil, main.p_object, layer_id, polygon_index, one_way_margin);  }  // 36
get_collision_polygon_one_way_margin :: (main: *TileData, layer_id: int, polygon_index: int) -> float { call_ret := cast(*float) sys_call("TileData", "get_collision_polygon_one_way_margin", 3085491603, float, main.p_object, layer_id, polygon_index); return call_ret.*; }  // 37
set_terrain_set :: (main: *TileData, terrain_set: int) { sys_call("TileData", "set_terrain_set", 1286410249, Nil, main.p_object, terrain_set);  }  // 38
get_terrain_set :: (main: *TileData) -> int { call_ret := cast(*int) sys_call("TileData", "get_terrain_set", 3905245786, int, main.p_object); return call_ret.*; }  // 39
set_terrain :: (main: *TileData, terrain: int) { sys_call("TileData", "set_terrain", 1286410249, Nil, main.p_object, terrain);  }  // 40
get_terrain :: (main: *TileData) -> int { call_ret := cast(*int) sys_call("TileData", "get_terrain", 3905245786, int, main.p_object); return call_ret.*; }  // 41
set_terrain_peering_bit :: (main: *TileData, peering_bit: TileSet.CellNeighbor, terrain: int) { sys_call("TileData", "set_terrain_peering_bit", 1084452308, Nil, main.p_object, peering_bit, terrain);  }  // 42
get_terrain_peering_bit :: (main: *TileData, peering_bit: TileSet.CellNeighbor) -> int { call_ret := cast(*int) sys_call("TileData", "get_terrain_peering_bit", 3831796792, int, main.p_object, peering_bit); return call_ret.*; }  // 43
is_valid_terrain_peering_bit :: (main: *TileData, peering_bit: TileSet.CellNeighbor) -> bool { call_ret := cast(*bool) sys_call("TileData", "is_valid_terrain_peering_bit", 845723972, bool, main.p_object, peering_bit); return call_ret.*; }  // 44
set_navigation_polygon :: (main: *TileData, layer_id: int, navigation_polygon: NavigationPolygon) { sys_call("TileData", "set_navigation_polygon", 2224691167, Nil, main.p_object, layer_id, navigation_polygon);  }  // 45
get_navigation_polygon :: (main: *TileData, layer_id: int) -> *NavigationPolygon { call_ret := cast(*NavigationPolygon) sys_call("TileData", "get_navigation_polygon", 2907127272, NavigationPolygon, main.p_object, layer_id); return call_ret; }  // 46
set_probability :: (main: *TileData, probability: float) { sys_call("TileData", "set_probability", 373806689, Nil, main.p_object, probability);  }  // 47
get_probability :: (main: *TileData) -> float { call_ret := cast(*float) sys_call("TileData", "get_probability", 1740695150, float, main.p_object); return call_ret.*; }  // 48
set_custom_data :: (main: *TileData, layer_name: string, value: Variant) { sys_call("TileData", "set_custom_data", 402577236, Nil, main.p_object, layer_name, value);  }  // 49
get_custom_data :: (main: *TileData, layer_name: string) -> Variant { call_ret := cast(*Variant) sys_call("TileData", "get_custom_data", 1868160156, Variant, main.p_object, layer_name); return call_ret.*; }  // 50
has_custom_data :: (main: *TileData, layer_name: string) -> bool { call_ret := cast(*bool) sys_call("TileData", "has_custom_data", 3927539163, bool, main.p_object, layer_name); return call_ret.*; }  // 51
set_custom_data_by_layer_id :: (main: *TileData, layer_id: int, value: Variant) { sys_call("TileData", "set_custom_data_by_layer_id", 2152698145, Nil, main.p_object, layer_id, value);  }  // 52
get_custom_data_by_layer_id :: (main: *TileData, layer_id: int) -> Variant { call_ret := cast(*Variant) sys_call("TileData", "get_custom_data_by_layer_id", 4227898402, Variant, main.p_object, layer_id); return call_ret.*; }  // 53

set_navigation_map :: (main: *TileMap, layer: int, map: RID) { sys_call("TileMap", "set_navigation_map", 4040184819, Nil, main.p_object, layer, map);  }  // 2
get_navigation_map :: (main: *TileMap, layer: int) -> RID { call_ret := cast(*RID) sys_call("TileMap", "get_navigation_map", 495598643, RID, main.p_object, layer); return call_ret.*; }  // 3
force_update :: (main: *TileMap) { sys_call("TileMap", "force_update", 1025054187, Nil, main.p_object);  }  // 4
set_tileset :: (main: *TileMap, tileset: TileSet) { sys_call("TileMap", "set_tileset", 774531446, Nil, main.p_object, tileset);  }  // 5
get_tileset :: (main: *TileMap) -> *TileSet { call_ret := cast(*TileSet) sys_call("TileMap", "get_tileset", 2678226422, TileSet, main.p_object); return call_ret; }  // 6
set_rendering_quadrant_size :: (main: *TileMap, size: int) { sys_call("TileMap", "set_rendering_quadrant_size", 1286410249, Nil, main.p_object, size);  }  // 7
get_rendering_quadrant_size :: (main: *TileMap) -> int { call_ret := cast(*int) sys_call("TileMap", "get_rendering_quadrant_size", 3905245786, int, main.p_object); return call_ret.*; }  // 8
get_layers_count :: (main: *TileMap) -> int { call_ret := cast(*int) sys_call("TileMap", "get_layers_count", 3905245786, int, main.p_object); return call_ret.*; }  // 9
add_layer :: (main: *TileMap, to_position: int) { sys_call("TileMap", "add_layer", 1286410249, Nil, main.p_object, to_position);  }  // 10
move_layer :: (main: *TileMap, layer: int, to_position: int) { sys_call("TileMap", "move_layer", 3937882851, Nil, main.p_object, layer, to_position);  }  // 11
remove_layer :: (main: *TileMap, layer: int) { sys_call("TileMap", "remove_layer", 1286410249, Nil, main.p_object, layer);  }  // 12
set_layer_name :: (main: *TileMap, layer: int, name: string) { sys_call("TileMap", "set_layer_name", 501894301, Nil, main.p_object, layer, name);  }  // 13
get_layer_name :: (main: *TileMap, layer: int) -> gstring { call_ret := cast(*gstring) sys_call("TileMap", "get_layer_name", 844755477, gstring, main.p_object, layer); return call_ret.*; }  // 14
set_layer_enabled :: (main: *TileMap, layer: int, enabled: bool) { sys_call("TileMap", "set_layer_enabled", 300928843, Nil, main.p_object, layer, enabled);  }  // 15
is_layer_enabled :: (main: *TileMap, layer: int) -> bool { call_ret := cast(*bool) sys_call("TileMap", "is_layer_enabled", 1116898809, bool, main.p_object, layer); return call_ret.*; }  // 16
set_layer_modulate :: (main: *TileMap, layer: int, modulate: Color) { sys_call("TileMap", "set_layer_modulate", 2878471219, Nil, main.p_object, layer, modulate);  }  // 17
get_layer_modulate :: (main: *TileMap, layer: int) -> Color { call_ret := cast(*Color) sys_call("TileMap", "get_layer_modulate", 3457211756, Color, main.p_object, layer); return call_ret.*; }  // 18
set_layer_y_sort_enabled :: (main: *TileMap, layer: int, y_sort_enabled: bool) { sys_call("TileMap", "set_layer_y_sort_enabled", 300928843, Nil, main.p_object, layer, y_sort_enabled);  }  // 19
is_layer_y_sort_enabled :: (main: *TileMap, layer: int) -> bool { call_ret := cast(*bool) sys_call("TileMap", "is_layer_y_sort_enabled", 1116898809, bool, main.p_object, layer); return call_ret.*; }  // 20
set_layer_y_sort_origin :: (main: *TileMap, layer: int, y_sort_origin: int) { sys_call("TileMap", "set_layer_y_sort_origin", 3937882851, Nil, main.p_object, layer, y_sort_origin);  }  // 21
get_layer_y_sort_origin :: (main: *TileMap, layer: int) -> int { call_ret := cast(*int) sys_call("TileMap", "get_layer_y_sort_origin", 923996154, int, main.p_object, layer); return call_ret.*; }  // 22
set_layer_z_index :: (main: *TileMap, layer: int, z_index: int) { sys_call("TileMap", "set_layer_z_index", 3937882851, Nil, main.p_object, layer, z_index);  }  // 23
get_layer_z_index :: (main: *TileMap, layer: int) -> int { call_ret := cast(*int) sys_call("TileMap", "get_layer_z_index", 923996154, int, main.p_object, layer); return call_ret.*; }  // 24
set_layer_navigation_enabled :: (main: *TileMap, layer: int, enabled: bool) { sys_call("TileMap", "set_layer_navigation_enabled", 300928843, Nil, main.p_object, layer, enabled);  }  // 25
is_layer_navigation_enabled :: (main: *TileMap, layer: int) -> bool { call_ret := cast(*bool) sys_call("TileMap", "is_layer_navigation_enabled", 1116898809, bool, main.p_object, layer); return call_ret.*; }  // 26
set_layer_navigation_map :: (main: *TileMap, layer: int, map: RID) { sys_call("TileMap", "set_layer_navigation_map", 4040184819, Nil, main.p_object, layer, map);  }  // 27
get_layer_navigation_map :: (main: *TileMap, layer: int) -> RID { call_ret := cast(*RID) sys_call("TileMap", "get_layer_navigation_map", 495598643, RID, main.p_object, layer); return call_ret.*; }  // 28
set_collision_animatable :: (main: *TileMap, enabled: bool) { sys_call("TileMap", "set_collision_animatable", 2586408642, Nil, main.p_object, enabled);  }  // 29
is_collision_animatable :: (main: *TileMap) -> bool { call_ret := cast(*bool) sys_call("TileMap", "is_collision_animatable", 36873697, bool, main.p_object); return call_ret.*; }  // 30
set_collision_visibility_mode :: (main: *TileMap, collision_visibility_mode: TileMap.VisibilityMode) { sys_call("TileMap", "set_collision_visibility_mode", 3193440636, Nil, main.p_object, collision_visibility_mode);  }  // 31
get_collision_visibility_mode :: (main: *TileMap) -> TileMap.VisibilityMode { call_ret := cast(*TileMap.VisibilityMode) sys_call("TileMap", "get_collision_visibility_mode", 1697018252, TileMap.VisibilityMode, main.p_object); return call_ret.*; }  // 32
set_navigation_visibility_mode :: (main: *TileMap, navigation_visibility_mode: TileMap.VisibilityMode) { sys_call("TileMap", "set_navigation_visibility_mode", 3193440636, Nil, main.p_object, navigation_visibility_mode);  }  // 33
get_navigation_visibility_mode :: (main: *TileMap) -> TileMap.VisibilityMode { call_ret := cast(*TileMap.VisibilityMode) sys_call("TileMap", "get_navigation_visibility_mode", 1697018252, TileMap.VisibilityMode, main.p_object); return call_ret.*; }  // 34
set_cell :: (main: *TileMap, layer: int, coords: Vector2i) { sys_call("TileMap", "set_cell", 966713560, Nil, main.p_object, layer, coords);  }  // 35
erase_cell :: (main: *TileMap, layer: int, coords: Vector2i) { sys_call("TileMap", "erase_cell", 2311374912, Nil, main.p_object, layer, coords);  }  // 36
get_cell_source_id :: (main: *TileMap, layer: int, coords: Vector2i) -> int { call_ret := cast(*int) sys_call("TileMap", "get_cell_source_id", 551761942, int, main.p_object, layer, coords); return call_ret.*; }  // 37
get_cell_atlas_coords :: (main: *TileMap, layer: int, coords: Vector2i) -> Vector2i { call_ret := cast(*Vector2i) sys_call("TileMap", "get_cell_atlas_coords", 1869815066, Vector2i, main.p_object, layer, coords); return call_ret.*; }  // 38
get_cell_alternative_tile :: (main: *TileMap, layer: int, coords: Vector2i) -> int { call_ret := cast(*int) sys_call("TileMap", "get_cell_alternative_tile", 551761942, int, main.p_object, layer, coords); return call_ret.*; }  // 39
get_cell_tile_data :: (main: *TileMap, layer: int, coords: Vector2i) -> *TileData { call_ret := cast(*TileData) sys_call("TileMap", "get_cell_tile_data", 2849631287, TileData, main.p_object, layer, coords); return call_ret; }  // 40
is_cell_flipped_h :: (main: *TileMap, layer: int, coords: Vector2i) -> bool { call_ret := cast(*bool) sys_call("TileMap", "is_cell_flipped_h", 2908343862, bool, main.p_object, layer, coords); return call_ret.*; }  // 41
is_cell_flipped_v :: (main: *TileMap, layer: int, coords: Vector2i) -> bool { call_ret := cast(*bool) sys_call("TileMap", "is_cell_flipped_v", 2908343862, bool, main.p_object, layer, coords); return call_ret.*; }  // 42
is_cell_transposed :: (main: *TileMap, layer: int, coords: Vector2i) -> bool { call_ret := cast(*bool) sys_call("TileMap", "is_cell_transposed", 2908343862, bool, main.p_object, layer, coords); return call_ret.*; }  // 43
get_coords_for_body_rid :: (main: *TileMap, body: RID) -> Vector2i { call_ret := cast(*Vector2i) sys_call("TileMap", "get_coords_for_body_rid", 291584212, Vector2i, main.p_object, body); return call_ret.*; }  // 44
get_layer_for_body_rid :: (main: *TileMap, body: RID) -> int { call_ret := cast(*int) sys_call("TileMap", "get_layer_for_body_rid", 3917799429, int, main.p_object, body); return call_ret.*; }  // 45
get_pattern :: (main: *TileMap, layer: int, coords_array: [] Vector2i) -> *TileMapPattern { call_ret := cast(*TileMapPattern) sys_call("TileMap", "get_pattern", 2833570986, TileMapPattern, main.p_object, layer, coords_array); return call_ret; }  // 46
map_pattern :: (main: *TileMap, position_in_tilemap: Vector2i, coords_in_pattern: Vector2i, pattern: TileMapPattern) -> Vector2i { call_ret := cast(*Vector2i) sys_call("TileMap", "map_pattern", 1864516957, Vector2i, main.p_object, position_in_tilemap, coords_in_pattern, pattern); return call_ret.*; }  // 47
set_pattern :: (main: *TileMap, layer: int, position: Vector2i, pattern: TileMapPattern) { sys_call("TileMap", "set_pattern", 1195853946, Nil, main.p_object, layer, position, pattern);  }  // 48
set_cells_terrain_connect :: (main: *TileMap, layer: int, cells: [] Vector2i, terrain_set: int, terrain: int) { sys_call("TileMap", "set_cells_terrain_connect", 3578627656, Nil, main.p_object, layer, cells, terrain_set, terrain);  }  // 49
set_cells_terrain_path :: (main: *TileMap, layer: int, path: [] Vector2i, terrain_set: int, terrain: int) { sys_call("TileMap", "set_cells_terrain_path", 3578627656, Nil, main.p_object, layer, path, terrain_set, terrain);  }  // 50
fix_invalid_tiles :: (main: *TileMap) { sys_call("TileMap", "fix_invalid_tiles", 3218959716, Nil, main.p_object);  }  // 51
clear_layer :: (main: *TileMap, layer: int) { sys_call("TileMap", "clear_layer", 1286410249, Nil, main.p_object, layer);  }  // 52
clear :: (main: *TileMap) { sys_call("TileMap", "clear", 3218959716, Nil, main.p_object);  }  // 53
update_internals :: (main: *TileMap) { sys_call("TileMap", "update_internals", 3218959716, Nil, main.p_object);  }  // 54
notify_runtime_tile_data_update :: (main: *TileMap) { sys_call("TileMap", "notify_runtime_tile_data_update", 1025054187, Nil, main.p_object);  }  // 55
get_surrounding_cells :: (main: *TileMap, coords: Vector2i) -> [] Vector2i { call_ret := cast(*[] Vector2i) sys_call("TileMap", "get_surrounding_cells", 2673526557, [] Vector2i, main.p_object, coords); return call_ret.*; }  // 56
get_used_cells :: (main: *TileMap, layer: int) -> [] Vector2i { call_ret := cast(*[] Vector2i) sys_call("TileMap", "get_used_cells", 663333327, [] Vector2i, main.p_object, layer); return call_ret.*; }  // 57
get_used_cells_by_id :: (main: *TileMap, layer: int) -> [] Vector2i { call_ret := cast(*[] Vector2i) sys_call("TileMap", "get_used_cells_by_id", 2931012785, [] Vector2i, main.p_object, layer); return call_ret.*; }  // 58
get_used_rect :: (main: *TileMap) -> Rect2i { call_ret := cast(*Rect2i) sys_call("TileMap", "get_used_rect", 410525958, Rect2i, main.p_object); return call_ret.*; }  // 59
map_to_local :: (main: *TileMap, map_position: Vector2i) -> Vector2 { call_ret := cast(*Vector2) sys_call("TileMap", "map_to_local", 108438297, Vector2, main.p_object, map_position); return call_ret.*; }  // 60
local_to_map :: (main: *TileMap, local_position: Vector2) -> Vector2i { call_ret := cast(*Vector2i) sys_call("TileMap", "local_to_map", 837806996, Vector2i, main.p_object, local_position); return call_ret.*; }  // 61
get_neighbor_cell :: (main: *TileMap, coords: Vector2i, neighbor: TileSet.CellNeighbor) -> Vector2i { call_ret := cast(*Vector2i) sys_call("TileMap", "get_neighbor_cell", 986575103, Vector2i, main.p_object, coords, neighbor); return call_ret.*; }  // 62

set_cell :: (main: *TileMapLayer, coords: Vector2i) { sys_call("TileMapLayer", "set_cell", 2428518503, Nil, main.p_object, coords);  }  // 3
erase_cell :: (main: *TileMapLayer, coords: Vector2i) { sys_call("TileMapLayer", "erase_cell", 1130785943, Nil, main.p_object, coords);  }  // 4
fix_invalid_tiles :: (main: *TileMapLayer) { sys_call("TileMapLayer", "fix_invalid_tiles", 3218959716, Nil, main.p_object);  }  // 5
clear :: (main: *TileMapLayer) { sys_call("TileMapLayer", "clear", 3218959716, Nil, main.p_object);  }  // 6
get_cell_source_id :: (main: *TileMapLayer, coords: Vector2i) -> int { call_ret := cast(*int) sys_call("TileMapLayer", "get_cell_source_id", 2485466453, int, main.p_object, coords); return call_ret.*; }  // 7
get_cell_atlas_coords :: (main: *TileMapLayer, coords: Vector2i) -> Vector2i { call_ret := cast(*Vector2i) sys_call("TileMapLayer", "get_cell_atlas_coords", 3050897911, Vector2i, main.p_object, coords); return call_ret.*; }  // 8
get_cell_alternative_tile :: (main: *TileMapLayer, coords: Vector2i) -> int { call_ret := cast(*int) sys_call("TileMapLayer", "get_cell_alternative_tile", 2485466453, int, main.p_object, coords); return call_ret.*; }  // 9
get_cell_tile_data :: (main: *TileMapLayer, coords: Vector2i) -> *TileData { call_ret := cast(*TileData) sys_call("TileMapLayer", "get_cell_tile_data", 205084707, TileData, main.p_object, coords); return call_ret; }  // 10
is_cell_flipped_h :: (main: *TileMapLayer, coords: Vector2i) -> bool { call_ret := cast(*bool) sys_call("TileMapLayer", "is_cell_flipped_h", 3900751641, bool, main.p_object, coords); return call_ret.*; }  // 11
is_cell_flipped_v :: (main: *TileMapLayer, coords: Vector2i) -> bool { call_ret := cast(*bool) sys_call("TileMapLayer", "is_cell_flipped_v", 3900751641, bool, main.p_object, coords); return call_ret.*; }  // 12
is_cell_transposed :: (main: *TileMapLayer, coords: Vector2i) -> bool { call_ret := cast(*bool) sys_call("TileMapLayer", "is_cell_transposed", 3900751641, bool, main.p_object, coords); return call_ret.*; }  // 13
get_used_cells :: (main: *TileMapLayer) -> [] Vector2i { call_ret := cast(*[] Vector2i) sys_call("TileMapLayer", "get_used_cells", 3995934104, [] Vector2i, main.p_object); return call_ret.*; }  // 14
get_used_cells_by_id :: (main: *TileMapLayer) -> [] Vector2i { call_ret := cast(*[] Vector2i) sys_call("TileMapLayer", "get_used_cells_by_id", 4175304538, [] Vector2i, main.p_object); return call_ret.*; }  // 15
get_used_rect :: (main: *TileMapLayer) -> Rect2i { call_ret := cast(*Rect2i) sys_call("TileMapLayer", "get_used_rect", 410525958, Rect2i, main.p_object); return call_ret.*; }  // 16
get_pattern :: (main: *TileMapLayer, coords_array: [] Vector2i) -> *TileMapPattern { call_ret := cast(*TileMapPattern) sys_call("TileMapLayer", "get_pattern", 3820813253, TileMapPattern, main.p_object, coords_array); return call_ret; }  // 17
set_pattern :: (main: *TileMapLayer, position: Vector2i, pattern: TileMapPattern) { sys_call("TileMapLayer", "set_pattern", 1491151770, Nil, main.p_object, position, pattern);  }  // 18
set_cells_terrain_connect :: (main: *TileMapLayer, cells: [] Vector2i, terrain_set: int, terrain: int) { sys_call("TileMapLayer", "set_cells_terrain_connect", 748968311, Nil, main.p_object, cells, terrain_set, terrain);  }  // 19
set_cells_terrain_path :: (main: *TileMapLayer, path: [] Vector2i, terrain_set: int, terrain: int) { sys_call("TileMapLayer", "set_cells_terrain_path", 748968311, Nil, main.p_object, path, terrain_set, terrain);  }  // 20
has_body_rid :: (main: *TileMapLayer, body: RID) -> bool { call_ret := cast(*bool) sys_call("TileMapLayer", "has_body_rid", 4155700596, bool, main.p_object, body); return call_ret.*; }  // 21
get_coords_for_body_rid :: (main: *TileMapLayer, body: RID) -> Vector2i { call_ret := cast(*Vector2i) sys_call("TileMapLayer", "get_coords_for_body_rid", 733700038, Vector2i, main.p_object, body); return call_ret.*; }  // 22
update_internals :: (main: *TileMapLayer) { sys_call("TileMapLayer", "update_internals", 3218959716, Nil, main.p_object);  }  // 23
notify_runtime_tile_data_update :: (main: *TileMapLayer) { sys_call("TileMapLayer", "notify_runtime_tile_data_update", 3218959716, Nil, main.p_object);  }  // 24
map_pattern :: (main: *TileMapLayer, position_in_tilemap: Vector2i, coords_in_pattern: Vector2i, pattern: TileMapPattern) -> Vector2i { call_ret := cast(*Vector2i) sys_call("TileMapLayer", "map_pattern", 1864516957, Vector2i, main.p_object, position_in_tilemap, coords_in_pattern, pattern); return call_ret.*; }  // 25
get_surrounding_cells :: (main: *TileMapLayer, coords: Vector2i) -> [] Vector2i { call_ret := cast(*[] Vector2i) sys_call("TileMapLayer", "get_surrounding_cells", 2673526557, [] Vector2i, main.p_object, coords); return call_ret.*; }  // 26
get_neighbor_cell :: (main: *TileMapLayer, coords: Vector2i, neighbor: TileSet.CellNeighbor) -> Vector2i { call_ret := cast(*Vector2i) sys_call("TileMapLayer", "get_neighbor_cell", 986575103, Vector2i, main.p_object, coords, neighbor); return call_ret.*; }  // 27
map_to_local :: (main: *TileMapLayer, map_position: Vector2i) -> Vector2 { call_ret := cast(*Vector2) sys_call("TileMapLayer", "map_to_local", 108438297, Vector2, main.p_object, map_position); return call_ret.*; }  // 28
local_to_map :: (main: *TileMapLayer, local_position: Vector2) -> Vector2i { call_ret := cast(*Vector2i) sys_call("TileMapLayer", "local_to_map", 837806996, Vector2i, main.p_object, local_position); return call_ret.*; }  // 29
set_tile_map_data_from_array :: (main: *TileMapLayer, tile_map_layer_data: PackedByteArray) { sys_call("TileMapLayer", "set_tile_map_data_from_array", 2971499966, Nil, main.p_object, tile_map_layer_data);  }  // 30
get_tile_map_data_as_array :: (main: *TileMapLayer) -> PackedByteArray { call_ret := cast(*PackedByteArray) sys_call("TileMapLayer", "get_tile_map_data_as_array", 2362200018, PackedByteArray, main.p_object); return call_ret.*; }  // 31
set_enabled :: (main: *TileMapLayer, enabled: bool) { sys_call("TileMapLayer", "set_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 32
is_enabled :: (main: *TileMapLayer) -> bool { call_ret := cast(*bool) sys_call("TileMapLayer", "is_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 33
set_tile_set :: (main: *TileMapLayer, tile_set: TileSet) { sys_call("TileMapLayer", "set_tile_set", 774531446, Nil, main.p_object, tile_set);  }  // 34
get_tile_set :: (main: *TileMapLayer) -> *TileSet { call_ret := cast(*TileSet) sys_call("TileMapLayer", "get_tile_set", 2678226422, TileSet, main.p_object); return call_ret; }  // 35
set_y_sort_origin :: (main: *TileMapLayer, y_sort_origin: int) { sys_call("TileMapLayer", "set_y_sort_origin", 1286410249, Nil, main.p_object, y_sort_origin);  }  // 36
get_y_sort_origin :: (main: *TileMapLayer) -> int { call_ret := cast(*int) sys_call("TileMapLayer", "get_y_sort_origin", 3905245786, int, main.p_object); return call_ret.*; }  // 37
set_x_draw_order_reversed :: (main: *TileMapLayer, x_draw_order_reversed: bool) { sys_call("TileMapLayer", "set_x_draw_order_reversed", 2586408642, Nil, main.p_object, x_draw_order_reversed);  }  // 38
is_x_draw_order_reversed :: (main: *TileMapLayer) -> bool { call_ret := cast(*bool) sys_call("TileMapLayer", "is_x_draw_order_reversed", 36873697, bool, main.p_object); return call_ret.*; }  // 39
set_rendering_quadrant_size :: (main: *TileMapLayer, size: int) { sys_call("TileMapLayer", "set_rendering_quadrant_size", 1286410249, Nil, main.p_object, size);  }  // 40
get_rendering_quadrant_size :: (main: *TileMapLayer) -> int { call_ret := cast(*int) sys_call("TileMapLayer", "get_rendering_quadrant_size", 3905245786, int, main.p_object); return call_ret.*; }  // 41
set_collision_enabled :: (main: *TileMapLayer, enabled: bool) { sys_call("TileMapLayer", "set_collision_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 42
is_collision_enabled :: (main: *TileMapLayer) -> bool { call_ret := cast(*bool) sys_call("TileMapLayer", "is_collision_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 43
set_use_kinematic_bodies :: (main: *TileMapLayer, use_kinematic_bodies: bool) { sys_call("TileMapLayer", "set_use_kinematic_bodies", 2586408642, Nil, main.p_object, use_kinematic_bodies);  }  // 44
is_using_kinematic_bodies :: (main: *TileMapLayer) -> bool { call_ret := cast(*bool) sys_call("TileMapLayer", "is_using_kinematic_bodies", 36873697, bool, main.p_object); return call_ret.*; }  // 45
set_collision_visibility_mode :: (main: *TileMapLayer, visibility_mode: TileMapLayer.DebugVisibilityMode) { sys_call("TileMapLayer", "set_collision_visibility_mode", 3508099847, Nil, main.p_object, visibility_mode);  }  // 46
get_collision_visibility_mode :: (main: *TileMapLayer) -> TileMapLayer.DebugVisibilityMode { call_ret := cast(*TileMapLayer.DebugVisibilityMode) sys_call("TileMapLayer", "get_collision_visibility_mode", 338220793, TileMapLayer.DebugVisibilityMode, main.p_object); return call_ret.*; }  // 47
set_occlusion_enabled :: (main: *TileMapLayer, enabled: bool) { sys_call("TileMapLayer", "set_occlusion_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 48
is_occlusion_enabled :: (main: *TileMapLayer) -> bool { call_ret := cast(*bool) sys_call("TileMapLayer", "is_occlusion_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 49
set_navigation_enabled :: (main: *TileMapLayer, enabled: bool) { sys_call("TileMapLayer", "set_navigation_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 50
is_navigation_enabled :: (main: *TileMapLayer) -> bool { call_ret := cast(*bool) sys_call("TileMapLayer", "is_navigation_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 51
set_navigation_map :: (main: *TileMapLayer, map: RID) { sys_call("TileMapLayer", "set_navigation_map", 2722037293, Nil, main.p_object, map);  }  // 52
get_navigation_map :: (main: *TileMapLayer) -> RID { call_ret := cast(*RID) sys_call("TileMapLayer", "get_navigation_map", 2944877500, RID, main.p_object); return call_ret.*; }  // 53
set_navigation_visibility_mode :: (main: *TileMapLayer, show_navigation: TileMapLayer.DebugVisibilityMode) { sys_call("TileMapLayer", "set_navigation_visibility_mode", 3508099847, Nil, main.p_object, show_navigation);  }  // 54
get_navigation_visibility_mode :: (main: *TileMapLayer) -> TileMapLayer.DebugVisibilityMode { call_ret := cast(*TileMapLayer.DebugVisibilityMode) sys_call("TileMapLayer", "get_navigation_visibility_mode", 338220793, TileMapLayer.DebugVisibilityMode, main.p_object); return call_ret.*; }  // 55

set_cell :: (main: *TileMapPattern, coords: Vector2i) { sys_call("TileMapPattern", "set_cell", 2224802556, Nil, main.p_object, coords);  }  // 0
has_cell :: (main: *TileMapPattern, coords: Vector2i) -> bool { call_ret := cast(*bool) sys_call("TileMapPattern", "has_cell", 3900751641, bool, main.p_object, coords); return call_ret.*; }  // 1
remove_cell :: (main: *TileMapPattern, coords: Vector2i, update_size: bool) { sys_call("TileMapPattern", "remove_cell", 4153096796, Nil, main.p_object, coords, update_size);  }  // 2
get_cell_source_id :: (main: *TileMapPattern, coords: Vector2i) -> int { call_ret := cast(*int) sys_call("TileMapPattern", "get_cell_source_id", 2485466453, int, main.p_object, coords); return call_ret.*; }  // 3
get_cell_atlas_coords :: (main: *TileMapPattern, coords: Vector2i) -> Vector2i { call_ret := cast(*Vector2i) sys_call("TileMapPattern", "get_cell_atlas_coords", 3050897911, Vector2i, main.p_object, coords); return call_ret.*; }  // 4
get_cell_alternative_tile :: (main: *TileMapPattern, coords: Vector2i) -> int { call_ret := cast(*int) sys_call("TileMapPattern", "get_cell_alternative_tile", 2485466453, int, main.p_object, coords); return call_ret.*; }  // 5
get_used_cells :: (main: *TileMapPattern) -> [] Vector2i { call_ret := cast(*[] Vector2i) sys_call("TileMapPattern", "get_used_cells", 3995934104, [] Vector2i, main.p_object); return call_ret.*; }  // 6
get_size :: (main: *TileMapPattern) -> Vector2i { call_ret := cast(*Vector2i) sys_call("TileMapPattern", "get_size", 3690982128, Vector2i, main.p_object); return call_ret.*; }  // 7
set_size :: (main: *TileMapPattern, size: Vector2i) { sys_call("TileMapPattern", "set_size", 1130785943, Nil, main.p_object, size);  }  // 8
is_empty :: (main: *TileMapPattern) -> bool { call_ret := cast(*bool) sys_call("TileMapPattern", "is_empty", 36873697, bool, main.p_object); return call_ret.*; }  // 9

get_next_source_id :: (main: *TileSet) -> int { call_ret := cast(*int) sys_call("TileSet", "get_next_source_id", 3905245786, int, main.p_object); return call_ret.*; }  // 0
add_source :: (main: *TileSet, source: TileSetSource) -> int { call_ret := cast(*int) sys_call("TileSet", "add_source", 1059186179, int, main.p_object, source); return call_ret.*; }  // 1
remove_source :: (main: *TileSet, source_id: int) { sys_call("TileSet", "remove_source", 1286410249, Nil, main.p_object, source_id);  }  // 2
set_source_id :: (main: *TileSet, source_id: int, new_source_id: int) { sys_call("TileSet", "set_source_id", 3937882851, Nil, main.p_object, source_id, new_source_id);  }  // 3
get_source_count :: (main: *TileSet) -> int { call_ret := cast(*int) sys_call("TileSet", "get_source_count", 3905245786, int, main.p_object); return call_ret.*; }  // 4
get_source_id :: (main: *TileSet, index: int) -> int { call_ret := cast(*int) sys_call("TileSet", "get_source_id", 923996154, int, main.p_object, index); return call_ret.*; }  // 5
has_source :: (main: *TileSet, source_id: int) -> bool { call_ret := cast(*bool) sys_call("TileSet", "has_source", 1116898809, bool, main.p_object, source_id); return call_ret.*; }  // 6
get_source :: (main: *TileSet, source_id: int) -> *TileSetSource { call_ret := cast(*TileSetSource) sys_call("TileSet", "get_source", 1763540252, TileSetSource, main.p_object, source_id); return call_ret; }  // 7
set_tile_shape :: (main: *TileSet, shape: TileSet.TileShape) { sys_call("TileSet", "set_tile_shape", 2131427112, Nil, main.p_object, shape);  }  // 8
get_tile_shape :: (main: *TileSet) -> TileSet.TileShape { call_ret := cast(*TileSet.TileShape) sys_call("TileSet", "get_tile_shape", 716918169, TileSet.TileShape, main.p_object); return call_ret.*; }  // 9
set_tile_layout :: (main: *TileSet, layout: TileSet.TileLayout) { sys_call("TileSet", "set_tile_layout", 1071216679, Nil, main.p_object, layout);  }  // 10
get_tile_layout :: (main: *TileSet) -> TileSet.TileLayout { call_ret := cast(*TileSet.TileLayout) sys_call("TileSet", "get_tile_layout", 194628839, TileSet.TileLayout, main.p_object); return call_ret.*; }  // 11
set_tile_offset_axis :: (main: *TileSet, alignment: TileSet.TileOffsetAxis) { sys_call("TileSet", "set_tile_offset_axis", 3300198521, Nil, main.p_object, alignment);  }  // 12
get_tile_offset_axis :: (main: *TileSet) -> TileSet.TileOffsetAxis { call_ret := cast(*TileSet.TileOffsetAxis) sys_call("TileSet", "get_tile_offset_axis", 762494114, TileSet.TileOffsetAxis, main.p_object); return call_ret.*; }  // 13
set_tile_size :: (main: *TileSet, size: Vector2i) { sys_call("TileSet", "set_tile_size", 1130785943, Nil, main.p_object, size);  }  // 14
get_tile_size :: (main: *TileSet) -> Vector2i { call_ret := cast(*Vector2i) sys_call("TileSet", "get_tile_size", 3690982128, Vector2i, main.p_object); return call_ret.*; }  // 15
set_uv_clipping :: (main: *TileSet, uv_clipping: bool) { sys_call("TileSet", "set_uv_clipping", 2586408642, Nil, main.p_object, uv_clipping);  }  // 16
is_uv_clipping :: (main: *TileSet) -> bool { call_ret := cast(*bool) sys_call("TileSet", "is_uv_clipping", 36873697, bool, main.p_object); return call_ret.*; }  // 17
get_occlusion_layers_count :: (main: *TileSet) -> int { call_ret := cast(*int) sys_call("TileSet", "get_occlusion_layers_count", 3905245786, int, main.p_object); return call_ret.*; }  // 18
add_occlusion_layer :: (main: *TileSet) { sys_call("TileSet", "add_occlusion_layer", 1025054187, Nil, main.p_object);  }  // 19
move_occlusion_layer :: (main: *TileSet, layer_index: int, to_position: int) { sys_call("TileSet", "move_occlusion_layer", 3937882851, Nil, main.p_object, layer_index, to_position);  }  // 20
remove_occlusion_layer :: (main: *TileSet, layer_index: int) { sys_call("TileSet", "remove_occlusion_layer", 1286410249, Nil, main.p_object, layer_index);  }  // 21
set_occlusion_layer_light_mask :: (main: *TileSet, layer_index: int, light_mask: int) { sys_call("TileSet", "set_occlusion_layer_light_mask", 3937882851, Nil, main.p_object, layer_index, light_mask);  }  // 22
get_occlusion_layer_light_mask :: (main: *TileSet, layer_index: int) -> int { call_ret := cast(*int) sys_call("TileSet", "get_occlusion_layer_light_mask", 923996154, int, main.p_object, layer_index); return call_ret.*; }  // 23
set_occlusion_layer_sdf_collision :: (main: *TileSet, layer_index: int, sdf_collision: bool) { sys_call("TileSet", "set_occlusion_layer_sdf_collision", 300928843, Nil, main.p_object, layer_index, sdf_collision);  }  // 24
get_occlusion_layer_sdf_collision :: (main: *TileSet, layer_index: int) -> bool { call_ret := cast(*bool) sys_call("TileSet", "get_occlusion_layer_sdf_collision", 1116898809, bool, main.p_object, layer_index); return call_ret.*; }  // 25
get_physics_layers_count :: (main: *TileSet) -> int { call_ret := cast(*int) sys_call("TileSet", "get_physics_layers_count", 3905245786, int, main.p_object); return call_ret.*; }  // 26
add_physics_layer :: (main: *TileSet) { sys_call("TileSet", "add_physics_layer", 1025054187, Nil, main.p_object);  }  // 27
move_physics_layer :: (main: *TileSet, layer_index: int, to_position: int) { sys_call("TileSet", "move_physics_layer", 3937882851, Nil, main.p_object, layer_index, to_position);  }  // 28
remove_physics_layer :: (main: *TileSet, layer_index: int) { sys_call("TileSet", "remove_physics_layer", 1286410249, Nil, main.p_object, layer_index);  }  // 29
set_physics_layer_collision_layer :: (main: *TileSet, layer_index: int, layer: int) { sys_call("TileSet", "set_physics_layer_collision_layer", 3937882851, Nil, main.p_object, layer_index, layer);  }  // 30
get_physics_layer_collision_layer :: (main: *TileSet, layer_index: int) -> int { call_ret := cast(*int) sys_call("TileSet", "get_physics_layer_collision_layer", 923996154, int, main.p_object, layer_index); return call_ret.*; }  // 31
set_physics_layer_collision_mask :: (main: *TileSet, layer_index: int, mask: int) { sys_call("TileSet", "set_physics_layer_collision_mask", 3937882851, Nil, main.p_object, layer_index, mask);  }  // 32
get_physics_layer_collision_mask :: (main: *TileSet, layer_index: int) -> int { call_ret := cast(*int) sys_call("TileSet", "get_physics_layer_collision_mask", 923996154, int, main.p_object, layer_index); return call_ret.*; }  // 33
set_physics_layer_collision_priority :: (main: *TileSet, layer_index: int, priority: float) { sys_call("TileSet", "set_physics_layer_collision_priority", 1602489585, Nil, main.p_object, layer_index, priority);  }  // 34
get_physics_layer_collision_priority :: (main: *TileSet, layer_index: int) -> float { call_ret := cast(*float) sys_call("TileSet", "get_physics_layer_collision_priority", 2339986948, float, main.p_object, layer_index); return call_ret.*; }  // 35
set_physics_layer_physics_material :: (main: *TileSet, layer_index: int, physics_material: PhysicsMaterial) { sys_call("TileSet", "set_physics_layer_physics_material", 1018687357, Nil, main.p_object, layer_index, physics_material);  }  // 36
get_physics_layer_physics_material :: (main: *TileSet, layer_index: int) -> *PhysicsMaterial { call_ret := cast(*PhysicsMaterial) sys_call("TileSet", "get_physics_layer_physics_material", 788318639, PhysicsMaterial, main.p_object, layer_index); return call_ret; }  // 37
get_terrain_sets_count :: (main: *TileSet) -> int { call_ret := cast(*int) sys_call("TileSet", "get_terrain_sets_count", 3905245786, int, main.p_object); return call_ret.*; }  // 38
add_terrain_set :: (main: *TileSet) { sys_call("TileSet", "add_terrain_set", 1025054187, Nil, main.p_object);  }  // 39
move_terrain_set :: (main: *TileSet, terrain_set: int, to_position: int) { sys_call("TileSet", "move_terrain_set", 3937882851, Nil, main.p_object, terrain_set, to_position);  }  // 40
remove_terrain_set :: (main: *TileSet, terrain_set: int) { sys_call("TileSet", "remove_terrain_set", 1286410249, Nil, main.p_object, terrain_set);  }  // 41
set_terrain_set_mode :: (main: *TileSet, terrain_set: int, mode: TileSet.TerrainMode) { sys_call("TileSet", "set_terrain_set_mode", 3943003916, Nil, main.p_object, terrain_set, mode);  }  // 42
get_terrain_set_mode :: (main: *TileSet, terrain_set: int) -> TileSet.TerrainMode { call_ret := cast(*TileSet.TerrainMode) sys_call("TileSet", "get_terrain_set_mode", 2084469411, TileSet.TerrainMode, main.p_object, terrain_set); return call_ret.*; }  // 43
get_terrains_count :: (main: *TileSet, terrain_set: int) -> int { call_ret := cast(*int) sys_call("TileSet", "get_terrains_count", 923996154, int, main.p_object, terrain_set); return call_ret.*; }  // 44
add_terrain :: (main: *TileSet, terrain_set: int) { sys_call("TileSet", "add_terrain", 1230568737, Nil, main.p_object, terrain_set);  }  // 45
move_terrain :: (main: *TileSet, terrain_set: int, terrain_index: int, to_position: int) { sys_call("TileSet", "move_terrain", 1649997291, Nil, main.p_object, terrain_set, terrain_index, to_position);  }  // 46
remove_terrain :: (main: *TileSet, terrain_set: int, terrain_index: int) { sys_call("TileSet", "remove_terrain", 3937882851, Nil, main.p_object, terrain_set, terrain_index);  }  // 47
set_terrain_name :: (main: *TileSet, terrain_set: int, terrain_index: int, name: string) { sys_call("TileSet", "set_terrain_name", 2285447957, Nil, main.p_object, terrain_set, terrain_index, name);  }  // 48
get_terrain_name :: (main: *TileSet, terrain_set: int, terrain_index: int) -> gstring { call_ret := cast(*gstring) sys_call("TileSet", "get_terrain_name", 1391810591, gstring, main.p_object, terrain_set, terrain_index); return call_ret.*; }  // 49
set_terrain_color :: (main: *TileSet, terrain_set: int, terrain_index: int, color: Color) { sys_call("TileSet", "set_terrain_color", 3733378741, Nil, main.p_object, terrain_set, terrain_index, color);  }  // 50
get_terrain_color :: (main: *TileSet, terrain_set: int, terrain_index: int) -> Color { call_ret := cast(*Color) sys_call("TileSet", "get_terrain_color", 2165839948, Color, main.p_object, terrain_set, terrain_index); return call_ret.*; }  // 51
get_navigation_layers_count :: (main: *TileSet) -> int { call_ret := cast(*int) sys_call("TileSet", "get_navigation_layers_count", 3905245786, int, main.p_object); return call_ret.*; }  // 52
add_navigation_layer :: (main: *TileSet) { sys_call("TileSet", "add_navigation_layer", 1025054187, Nil, main.p_object);  }  // 53
move_navigation_layer :: (main: *TileSet, layer_index: int, to_position: int) { sys_call("TileSet", "move_navigation_layer", 3937882851, Nil, main.p_object, layer_index, to_position);  }  // 54
remove_navigation_layer :: (main: *TileSet, layer_index: int) { sys_call("TileSet", "remove_navigation_layer", 1286410249, Nil, main.p_object, layer_index);  }  // 55
set_navigation_layer_layers :: (main: *TileSet, layer_index: int, layers: int) { sys_call("TileSet", "set_navigation_layer_layers", 3937882851, Nil, main.p_object, layer_index, layers);  }  // 56
get_navigation_layer_layers :: (main: *TileSet, layer_index: int) -> int { call_ret := cast(*int) sys_call("TileSet", "get_navigation_layer_layers", 923996154, int, main.p_object, layer_index); return call_ret.*; }  // 57
set_navigation_layer_layer_value :: (main: *TileSet, layer_index: int, layer_number: int, value: bool) { sys_call("TileSet", "set_navigation_layer_layer_value", 1383440665, Nil, main.p_object, layer_index, layer_number, value);  }  // 58
get_navigation_layer_layer_value :: (main: *TileSet, layer_index: int, layer_number: int) -> bool { call_ret := cast(*bool) sys_call("TileSet", "get_navigation_layer_layer_value", 2522259332, bool, main.p_object, layer_index, layer_number); return call_ret.*; }  // 59
get_custom_data_layers_count :: (main: *TileSet) -> int { call_ret := cast(*int) sys_call("TileSet", "get_custom_data_layers_count", 3905245786, int, main.p_object); return call_ret.*; }  // 60
add_custom_data_layer :: (main: *TileSet) { sys_call("TileSet", "add_custom_data_layer", 1025054187, Nil, main.p_object);  }  // 61
move_custom_data_layer :: (main: *TileSet, layer_index: int, to_position: int) { sys_call("TileSet", "move_custom_data_layer", 3937882851, Nil, main.p_object, layer_index, to_position);  }  // 62
remove_custom_data_layer :: (main: *TileSet, layer_index: int) { sys_call("TileSet", "remove_custom_data_layer", 1286410249, Nil, main.p_object, layer_index);  }  // 63
get_custom_data_layer_by_name :: (main: *TileSet, layer_name: string) -> int { call_ret := cast(*int) sys_call("TileSet", "get_custom_data_layer_by_name", 1321353865, int, main.p_object, layer_name); return call_ret.*; }  // 64
set_custom_data_layer_name :: (main: *TileSet, layer_index: int, layer_name: string) { sys_call("TileSet", "set_custom_data_layer_name", 501894301, Nil, main.p_object, layer_index, layer_name);  }  // 65
has_custom_data_layer_by_name :: (main: *TileSet, layer_name: string) -> bool { call_ret := cast(*bool) sys_call("TileSet", "has_custom_data_layer_by_name", 3927539163, bool, main.p_object, layer_name); return call_ret.*; }  // 66
get_custom_data_layer_name :: (main: *TileSet, layer_index: int) -> gstring { call_ret := cast(*gstring) sys_call("TileSet", "get_custom_data_layer_name", 844755477, gstring, main.p_object, layer_index); return call_ret.*; }  // 67
set_custom_data_layer_type :: (main: *TileSet, layer_index: int, layer_type: Variant_Type) { sys_call("TileSet", "set_custom_data_layer_type", 3492912874, Nil, main.p_object, layer_index, layer_type);  }  // 68
get_custom_data_layer_type :: (main: *TileSet, layer_index: int) -> Variant_Type { call_ret := cast(*Variant_Type) sys_call("TileSet", "get_custom_data_layer_type", 2990820875, Variant_Type, main.p_object, layer_index); return call_ret.*; }  // 69
set_source_level_tile_proxy :: (main: *TileSet, source_from: int, source_to: int) { sys_call("TileSet", "set_source_level_tile_proxy", 3937882851, Nil, main.p_object, source_from, source_to);  }  // 70
get_source_level_tile_proxy :: (main: *TileSet, source_from: int) -> int { call_ret := cast(*int) sys_call("TileSet", "get_source_level_tile_proxy", 3744713108, int, main.p_object, source_from); return call_ret.*; }  // 71
has_source_level_tile_proxy :: (main: *TileSet, source_from: int) -> bool { call_ret := cast(*bool) sys_call("TileSet", "has_source_level_tile_proxy", 3067735520, bool, main.p_object, source_from); return call_ret.*; }  // 72
remove_source_level_tile_proxy :: (main: *TileSet, source_from: int) { sys_call("TileSet", "remove_source_level_tile_proxy", 1286410249, Nil, main.p_object, source_from);  }  // 73
set_coords_level_tile_proxy :: (main: *TileSet, p_source_from: int, coords_from: Vector2i, source_to: int, coords_to: Vector2i) { sys_call("TileSet", "set_coords_level_tile_proxy", 1769939278, Nil, main.p_object, p_source_from, coords_from, source_to, coords_to);  }  // 74
get_coords_level_tile_proxy :: (main: *TileSet, source_from: int, coords_from: Vector2i) -> Array { call_ret := cast(*Array) sys_call("TileSet", "get_coords_level_tile_proxy", 2856536371, Array, main.p_object, source_from, coords_from); return call_ret.*; }  // 75
has_coords_level_tile_proxy :: (main: *TileSet, source_from: int, coords_from: Vector2i) -> bool { call_ret := cast(*bool) sys_call("TileSet", "has_coords_level_tile_proxy", 3957903770, bool, main.p_object, source_from, coords_from); return call_ret.*; }  // 76
remove_coords_level_tile_proxy :: (main: *TileSet, source_from: int, coords_from: Vector2i) { sys_call("TileSet", "remove_coords_level_tile_proxy", 2311374912, Nil, main.p_object, source_from, coords_from);  }  // 77
set_alternative_level_tile_proxy :: (main: *TileSet, source_from: int, coords_from: Vector2i, alternative_from: int, source_to: int, coords_to: Vector2i, alternative_to: int) { sys_call("TileSet", "set_alternative_level_tile_proxy", 3862385460, Nil, main.p_object, source_from, coords_from, alternative_from, source_to, coords_to, alternative_to);  }  // 78
get_alternative_level_tile_proxy :: (main: *TileSet, source_from: int, coords_from: Vector2i, alternative_from: int) -> Array { call_ret := cast(*Array) sys_call("TileSet", "get_alternative_level_tile_proxy", 2303761075, Array, main.p_object, source_from, coords_from, alternative_from); return call_ret.*; }  // 79
has_alternative_level_tile_proxy :: (main: *TileSet, source_from: int, coords_from: Vector2i, alternative_from: int) -> bool { call_ret := cast(*bool) sys_call("TileSet", "has_alternative_level_tile_proxy", 180086755, bool, main.p_object, source_from, coords_from, alternative_from); return call_ret.*; }  // 80
remove_alternative_level_tile_proxy :: (main: *TileSet, source_from: int, coords_from: Vector2i, alternative_from: int) { sys_call("TileSet", "remove_alternative_level_tile_proxy", 2328951467, Nil, main.p_object, source_from, coords_from, alternative_from);  }  // 81
map_tile_proxy :: (main: *TileSet, source_from: int, coords_from: Vector2i, alternative_from: int) -> Array { call_ret := cast(*Array) sys_call("TileSet", "map_tile_proxy", 4267935328, Array, main.p_object, source_from, coords_from, alternative_from); return call_ret.*; }  // 82
cleanup_invalid_tile_proxies :: (main: *TileSet) { sys_call("TileSet", "cleanup_invalid_tile_proxies", 3218959716, Nil, main.p_object);  }  // 83
clear_tile_proxies :: (main: *TileSet) { sys_call("TileSet", "clear_tile_proxies", 3218959716, Nil, main.p_object);  }  // 84
add_pattern :: (main: *TileSet, pattern: TileMapPattern) -> int { call_ret := cast(*int) sys_call("TileSet", "add_pattern", 763712015, int, main.p_object, pattern); return call_ret.*; }  // 85
get_pattern :: (main: *TileSet) -> *TileMapPattern { call_ret := cast(*TileMapPattern) sys_call("TileSet", "get_pattern", 4207737510, TileMapPattern, main.p_object); return call_ret; }  // 86
remove_pattern :: (main: *TileSet, index: int) { sys_call("TileSet", "remove_pattern", 1286410249, Nil, main.p_object, index);  }  // 87
get_patterns_count :: (main: *TileSet) -> int { call_ret := cast(*int) sys_call("TileSet", "get_patterns_count", 2455072627, int, main.p_object); return call_ret.*; }  // 88

set_texture :: (main: *TileSetAtlasSource, texture: Texture2D) { sys_call("TileSetAtlasSource", "set_texture", 4051416890, Nil, main.p_object, texture);  }  // 0
get_texture :: (main: *TileSetAtlasSource) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("TileSetAtlasSource", "get_texture", 3635182373, Texture2D, main.p_object); return call_ret; }  // 1
set_margins :: (main: *TileSetAtlasSource, margins: Vector2i) { sys_call("TileSetAtlasSource", "set_margins", 1130785943, Nil, main.p_object, margins);  }  // 2
get_margins :: (main: *TileSetAtlasSource) -> Vector2i { call_ret := cast(*Vector2i) sys_call("TileSetAtlasSource", "get_margins", 3690982128, Vector2i, main.p_object); return call_ret.*; }  // 3
set_separation :: (main: *TileSetAtlasSource, separation: Vector2i) { sys_call("TileSetAtlasSource", "set_separation", 1130785943, Nil, main.p_object, separation);  }  // 4
get_separation :: (main: *TileSetAtlasSource) -> Vector2i { call_ret := cast(*Vector2i) sys_call("TileSetAtlasSource", "get_separation", 3690982128, Vector2i, main.p_object); return call_ret.*; }  // 5
set_texture_region_size :: (main: *TileSetAtlasSource, texture_region_size: Vector2i) { sys_call("TileSetAtlasSource", "set_texture_region_size", 1130785943, Nil, main.p_object, texture_region_size);  }  // 6
get_texture_region_size :: (main: *TileSetAtlasSource) -> Vector2i { call_ret := cast(*Vector2i) sys_call("TileSetAtlasSource", "get_texture_region_size", 3690982128, Vector2i, main.p_object); return call_ret.*; }  // 7
set_use_texture_padding :: (main: *TileSetAtlasSource, use_texture_padding: bool) { sys_call("TileSetAtlasSource", "set_use_texture_padding", 2586408642, Nil, main.p_object, use_texture_padding);  }  // 8
get_use_texture_padding :: (main: *TileSetAtlasSource) -> bool { call_ret := cast(*bool) sys_call("TileSetAtlasSource", "get_use_texture_padding", 36873697, bool, main.p_object); return call_ret.*; }  // 9
create_tile :: (main: *TileSetAtlasSource, atlas_coords: Vector2i) { sys_call("TileSetAtlasSource", "create_tile", 190528769, Nil, main.p_object, atlas_coords);  }  // 10
remove_tile :: (main: *TileSetAtlasSource, atlas_coords: Vector2i) { sys_call("TileSetAtlasSource", "remove_tile", 1130785943, Nil, main.p_object, atlas_coords);  }  // 11
move_tile_in_atlas :: (main: *TileSetAtlasSource, atlas_coords: Vector2i) { sys_call("TileSetAtlasSource", "move_tile_in_atlas", 3870111920, Nil, main.p_object, atlas_coords);  }  // 12
get_tile_size_in_atlas :: (main: *TileSetAtlasSource, atlas_coords: Vector2i) -> Vector2i { call_ret := cast(*Vector2i) sys_call("TileSetAtlasSource", "get_tile_size_in_atlas", 3050897911, Vector2i, main.p_object, atlas_coords); return call_ret.*; }  // 13
has_room_for_tile :: (main: *TileSetAtlasSource, atlas_coords: Vector2i, size: Vector2i, animation_columns: int, animation_separation: Vector2i, frames_count: int) -> bool { call_ret := cast(*bool) sys_call("TileSetAtlasSource", "has_room_for_tile", 3018597268, bool, main.p_object, atlas_coords, size, animation_columns, animation_separation, frames_count); return call_ret.*; }  // 14
get_tiles_to_be_removed_on_change :: (main: *TileSetAtlasSource, texture: Texture2D, margins: Vector2i, separation: Vector2i, texture_region_size: Vector2i) -> PackedVector2Array { call_ret := cast(*PackedVector2Array) sys_call("TileSetAtlasSource", "get_tiles_to_be_removed_on_change", 1240378054, PackedVector2Array, main.p_object, texture, margins, separation, texture_region_size); return call_ret.*; }  // 15
get_tile_at_coords :: (main: *TileSetAtlasSource, atlas_coords: Vector2i) -> Vector2i { call_ret := cast(*Vector2i) sys_call("TileSetAtlasSource", "get_tile_at_coords", 3050897911, Vector2i, main.p_object, atlas_coords); return call_ret.*; }  // 16
has_tiles_outside_texture :: (main: *TileSetAtlasSource) -> bool { call_ret := cast(*bool) sys_call("TileSetAtlasSource", "has_tiles_outside_texture", 36873697, bool, main.p_object); return call_ret.*; }  // 17
clear_tiles_outside_texture :: (main: *TileSetAtlasSource) { sys_call("TileSetAtlasSource", "clear_tiles_outside_texture", 3218959716, Nil, main.p_object);  }  // 18
set_tile_animation_columns :: (main: *TileSetAtlasSource, atlas_coords: Vector2i, frame_columns: int) { sys_call("TileSetAtlasSource", "set_tile_animation_columns", 3200960707, Nil, main.p_object, atlas_coords, frame_columns);  }  // 19
get_tile_animation_columns :: (main: *TileSetAtlasSource, atlas_coords: Vector2i) -> int { call_ret := cast(*int) sys_call("TileSetAtlasSource", "get_tile_animation_columns", 2485466453, int, main.p_object, atlas_coords); return call_ret.*; }  // 20
set_tile_animation_separation :: (main: *TileSetAtlasSource, atlas_coords: Vector2i, separation: Vector2i) { sys_call("TileSetAtlasSource", "set_tile_animation_separation", 1941061099, Nil, main.p_object, atlas_coords, separation);  }  // 21
get_tile_animation_separation :: (main: *TileSetAtlasSource, atlas_coords: Vector2i) -> Vector2i { call_ret := cast(*Vector2i) sys_call("TileSetAtlasSource", "get_tile_animation_separation", 3050897911, Vector2i, main.p_object, atlas_coords); return call_ret.*; }  // 22
set_tile_animation_speed :: (main: *TileSetAtlasSource, atlas_coords: Vector2i, speed: float) { sys_call("TileSetAtlasSource", "set_tile_animation_speed", 2262553149, Nil, main.p_object, atlas_coords, speed);  }  // 23
get_tile_animation_speed :: (main: *TileSetAtlasSource, atlas_coords: Vector2i) -> float { call_ret := cast(*float) sys_call("TileSetAtlasSource", "get_tile_animation_speed", 719993801, float, main.p_object, atlas_coords); return call_ret.*; }  // 24
set_tile_animation_mode :: (main: *TileSetAtlasSource, atlas_coords: Vector2i, mode: TileSetAtlasSource.TileAnimationMode) { sys_call("TileSetAtlasSource", "set_tile_animation_mode", 3192753483, Nil, main.p_object, atlas_coords, mode);  }  // 25
get_tile_animation_mode :: (main: *TileSetAtlasSource, atlas_coords: Vector2i) -> TileSetAtlasSource.TileAnimationMode { call_ret := cast(*TileSetAtlasSource.TileAnimationMode) sys_call("TileSetAtlasSource", "get_tile_animation_mode", 4025349959, TileSetAtlasSource.TileAnimationMode, main.p_object, atlas_coords); return call_ret.*; }  // 26
set_tile_animation_frames_count :: (main: *TileSetAtlasSource, atlas_coords: Vector2i, frames_count: int) { sys_call("TileSetAtlasSource", "set_tile_animation_frames_count", 3200960707, Nil, main.p_object, atlas_coords, frames_count);  }  // 27
get_tile_animation_frames_count :: (main: *TileSetAtlasSource, atlas_coords: Vector2i) -> int { call_ret := cast(*int) sys_call("TileSetAtlasSource", "get_tile_animation_frames_count", 2485466453, int, main.p_object, atlas_coords); return call_ret.*; }  // 28
set_tile_animation_frame_duration :: (main: *TileSetAtlasSource, atlas_coords: Vector2i, frame_index: int, duration: float) { sys_call("TileSetAtlasSource", "set_tile_animation_frame_duration", 2843487787, Nil, main.p_object, atlas_coords, frame_index, duration);  }  // 29
get_tile_animation_frame_duration :: (main: *TileSetAtlasSource, atlas_coords: Vector2i, frame_index: int) -> float { call_ret := cast(*float) sys_call("TileSetAtlasSource", "get_tile_animation_frame_duration", 1802448425, float, main.p_object, atlas_coords, frame_index); return call_ret.*; }  // 30
get_tile_animation_total_duration :: (main: *TileSetAtlasSource, atlas_coords: Vector2i) -> float { call_ret := cast(*float) sys_call("TileSetAtlasSource", "get_tile_animation_total_duration", 719993801, float, main.p_object, atlas_coords); return call_ret.*; }  // 31
create_alternative_tile :: (main: *TileSetAtlasSource, atlas_coords: Vector2i) -> int { call_ret := cast(*int) sys_call("TileSetAtlasSource", "create_alternative_tile", 2226298068, int, main.p_object, atlas_coords); return call_ret.*; }  // 32
remove_alternative_tile :: (main: *TileSetAtlasSource, atlas_coords: Vector2i, alternative_tile: int) { sys_call("TileSetAtlasSource", "remove_alternative_tile", 3200960707, Nil, main.p_object, atlas_coords, alternative_tile);  }  // 33
set_alternative_tile_id :: (main: *TileSetAtlasSource, atlas_coords: Vector2i, alternative_tile: int, new_id: int) { sys_call("TileSetAtlasSource", "set_alternative_tile_id", 1499785778, Nil, main.p_object, atlas_coords, alternative_tile, new_id);  }  // 34
get_next_alternative_tile_id :: (main: *TileSetAtlasSource, atlas_coords: Vector2i) -> int { call_ret := cast(*int) sys_call("TileSetAtlasSource", "get_next_alternative_tile_id", 2485466453, int, main.p_object, atlas_coords); return call_ret.*; }  // 35
get_tile_data :: (main: *TileSetAtlasSource, atlas_coords: Vector2i, alternative_tile: int) -> *TileData { call_ret := cast(*TileData) sys_call("TileSetAtlasSource", "get_tile_data", 3534028207, TileData, main.p_object, atlas_coords, alternative_tile); return call_ret; }  // 36
get_atlas_grid_size :: (main: *TileSetAtlasSource) -> Vector2i { call_ret := cast(*Vector2i) sys_call("TileSetAtlasSource", "get_atlas_grid_size", 3690982128, Vector2i, main.p_object); return call_ret.*; }  // 37
get_tile_texture_region :: (main: *TileSetAtlasSource, atlas_coords: Vector2i) -> Rect2i { call_ret := cast(*Rect2i) sys_call("TileSetAtlasSource", "get_tile_texture_region", 241857547, Rect2i, main.p_object, atlas_coords); return call_ret.*; }  // 38
get_runtime_texture :: (main: *TileSetAtlasSource) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("TileSetAtlasSource", "get_runtime_texture", 3635182373, Texture2D, main.p_object); return call_ret; }  // 39
get_runtime_tile_texture_region :: (main: *TileSetAtlasSource, atlas_coords: Vector2i, frame: int) -> Rect2i { call_ret := cast(*Rect2i) sys_call("TileSetAtlasSource", "get_runtime_tile_texture_region", 104874263, Rect2i, main.p_object, atlas_coords, frame); return call_ret.*; }  // 40

get_scene_tiles_count :: (main: *TileSetScenesCollectionSource) -> int { call_ret := cast(*int) sys_call("TileSetScenesCollectionSource", "get_scene_tiles_count", 2455072627, int, main.p_object); return call_ret.*; }  // 0
get_scene_tile_id :: (main: *TileSetScenesCollectionSource, index: int) -> int { call_ret := cast(*int) sys_call("TileSetScenesCollectionSource", "get_scene_tile_id", 3744713108, int, main.p_object, index); return call_ret.*; }  // 1
has_scene_tile_id :: (main: *TileSetScenesCollectionSource, id: int) -> bool { call_ret := cast(*bool) sys_call("TileSetScenesCollectionSource", "has_scene_tile_id", 3067735520, bool, main.p_object, id); return call_ret.*; }  // 2
create_scene_tile :: (main: *TileSetScenesCollectionSource, packed_scene: PackedScene) -> int { call_ret := cast(*int) sys_call("TileSetScenesCollectionSource", "create_scene_tile", 1117465415, int, main.p_object, packed_scene); return call_ret.*; }  // 3
set_scene_tile_id :: (main: *TileSetScenesCollectionSource, id: int, new_id: int) { sys_call("TileSetScenesCollectionSource", "set_scene_tile_id", 3937882851, Nil, main.p_object, id, new_id);  }  // 4
set_scene_tile_scene :: (main: *TileSetScenesCollectionSource, id: int, packed_scene: PackedScene) { sys_call("TileSetScenesCollectionSource", "set_scene_tile_scene", 3435852839, Nil, main.p_object, id, packed_scene);  }  // 5
get_scene_tile_scene :: (main: *TileSetScenesCollectionSource, id: int) -> *PackedScene { call_ret := cast(*PackedScene) sys_call("TileSetScenesCollectionSource", "get_scene_tile_scene", 511017218, PackedScene, main.p_object, id); return call_ret; }  // 6
set_scene_tile_display_placeholder :: (main: *TileSetScenesCollectionSource, id: int, display_placeholder: bool) { sys_call("TileSetScenesCollectionSource", "set_scene_tile_display_placeholder", 300928843, Nil, main.p_object, id, display_placeholder);  }  // 7
get_scene_tile_display_placeholder :: (main: *TileSetScenesCollectionSource, id: int) -> bool { call_ret := cast(*bool) sys_call("TileSetScenesCollectionSource", "get_scene_tile_display_placeholder", 1116898809, bool, main.p_object, id); return call_ret.*; }  // 8
remove_scene_tile :: (main: *TileSetScenesCollectionSource, id: int) { sys_call("TileSetScenesCollectionSource", "remove_scene_tile", 1286410249, Nil, main.p_object, id);  }  // 9
get_next_scene_tile_id :: (main: *TileSetScenesCollectionSource) -> int { call_ret := cast(*int) sys_call("TileSetScenesCollectionSource", "get_next_scene_tile_id", 3905245786, int, main.p_object); return call_ret.*; }  // 10

get_tiles_count :: (main: *TileSetSource) -> int { call_ret := cast(*int) sys_call("TileSetSource", "get_tiles_count", 3905245786, int, main.p_object); return call_ret.*; }  // 0
get_tile_id :: (main: *TileSetSource, index: int) -> Vector2i { call_ret := cast(*Vector2i) sys_call("TileSetSource", "get_tile_id", 880721226, Vector2i, main.p_object, index); return call_ret.*; }  // 1
has_tile :: (main: *TileSetSource, atlas_coords: Vector2i) -> bool { call_ret := cast(*bool) sys_call("TileSetSource", "has_tile", 3900751641, bool, main.p_object, atlas_coords); return call_ret.*; }  // 2
get_alternative_tiles_count :: (main: *TileSetSource, atlas_coords: Vector2i) -> int { call_ret := cast(*int) sys_call("TileSetSource", "get_alternative_tiles_count", 2485466453, int, main.p_object, atlas_coords); return call_ret.*; }  // 3
get_alternative_tile_id :: (main: *TileSetSource, atlas_coords: Vector2i, index: int) -> int { call_ret := cast(*int) sys_call("TileSetSource", "get_alternative_tile_id", 89881719, int, main.p_object, atlas_coords, index); return call_ret.*; }  // 4
has_alternative_tile :: (main: *TileSetSource, atlas_coords: Vector2i, alternative_tile: int) -> bool { call_ret := cast(*bool) sys_call("TileSetSource", "has_alternative_tile", 1073731340, bool, main.p_object, atlas_coords, alternative_tile); return call_ret.*; }  // 5

get_datetime_dict_from_unix_time :: (main: *Time, unix_time_val: int) -> Dictionary { call_ret := cast(*Dictionary) sys_call("Time", "get_datetime_dict_from_unix_time", 3485342025, Dictionary, main.p_object, unix_time_val); return call_ret.*; }  // 0
get_date_dict_from_unix_time :: (main: *Time, unix_time_val: int) -> Dictionary { call_ret := cast(*Dictionary) sys_call("Time", "get_date_dict_from_unix_time", 3485342025, Dictionary, main.p_object, unix_time_val); return call_ret.*; }  // 1
get_time_dict_from_unix_time :: (main: *Time, unix_time_val: int) -> Dictionary { call_ret := cast(*Dictionary) sys_call("Time", "get_time_dict_from_unix_time", 3485342025, Dictionary, main.p_object, unix_time_val); return call_ret.*; }  // 2
get_datetime_string_from_unix_time :: (main: *Time, unix_time_val: int) -> gstring { call_ret := cast(*gstring) sys_call("Time", "get_datetime_string_from_unix_time", 2311239925, gstring, main.p_object, unix_time_val); return call_ret.*; }  // 3
get_date_string_from_unix_time :: (main: *Time, unix_time_val: int) -> gstring { call_ret := cast(*gstring) sys_call("Time", "get_date_string_from_unix_time", 844755477, gstring, main.p_object, unix_time_val); return call_ret.*; }  // 4
get_time_string_from_unix_time :: (main: *Time, unix_time_val: int) -> gstring { call_ret := cast(*gstring) sys_call("Time", "get_time_string_from_unix_time", 844755477, gstring, main.p_object, unix_time_val); return call_ret.*; }  // 5
get_datetime_dict_from_datetime_string :: (main: *Time, datetime: string, weekday: bool) -> Dictionary { call_ret := cast(*Dictionary) sys_call("Time", "get_datetime_dict_from_datetime_string", 3253569256, Dictionary, main.p_object, datetime, weekday); return call_ret.*; }  // 6
get_datetime_string_from_datetime_dict :: (main: *Time, datetime: Dictionary, use_space: bool) -> gstring { call_ret := cast(*gstring) sys_call("Time", "get_datetime_string_from_datetime_dict", 1898123706, gstring, main.p_object, datetime, use_space); return call_ret.*; }  // 7
get_unix_time_from_datetime_dict :: (main: *Time, datetime: Dictionary) -> int { call_ret := cast(*int) sys_call("Time", "get_unix_time_from_datetime_dict", 3021115443, int, main.p_object, datetime); return call_ret.*; }  // 8
get_unix_time_from_datetime_string :: (main: *Time, datetime: string) -> int { call_ret := cast(*int) sys_call("Time", "get_unix_time_from_datetime_string", 1321353865, int, main.p_object, datetime); return call_ret.*; }  // 9
get_offset_string_from_offset_minutes :: (main: *Time, offset_minutes: int) -> gstring { call_ret := cast(*gstring) sys_call("Time", "get_offset_string_from_offset_minutes", 844755477, gstring, main.p_object, offset_minutes); return call_ret.*; }  // 10
get_datetime_dict_from_system :: (main: *Time) -> Dictionary { call_ret := cast(*Dictionary) sys_call("Time", "get_datetime_dict_from_system", 205769976, Dictionary, main.p_object); return call_ret.*; }  // 11
get_date_dict_from_system :: (main: *Time) -> Dictionary { call_ret := cast(*Dictionary) sys_call("Time", "get_date_dict_from_system", 205769976, Dictionary, main.p_object); return call_ret.*; }  // 12
get_time_dict_from_system :: (main: *Time) -> Dictionary { call_ret := cast(*Dictionary) sys_call("Time", "get_time_dict_from_system", 205769976, Dictionary, main.p_object); return call_ret.*; }  // 13
get_datetime_string_from_system :: (main: *Time) -> gstring { call_ret := cast(*gstring) sys_call("Time", "get_datetime_string_from_system", 1136425492, gstring, main.p_object); return call_ret.*; }  // 14
get_date_string_from_system :: (main: *Time) -> gstring { call_ret := cast(*gstring) sys_call("Time", "get_date_string_from_system", 1162154673, gstring, main.p_object); return call_ret.*; }  // 15
get_time_string_from_system :: (main: *Time) -> gstring { call_ret := cast(*gstring) sys_call("Time", "get_time_string_from_system", 1162154673, gstring, main.p_object); return call_ret.*; }  // 16
get_time_zone_from_system :: (main: *Time) -> Dictionary { call_ret := cast(*Dictionary) sys_call("Time", "get_time_zone_from_system", 3102165223, Dictionary, main.p_object); return call_ret.*; }  // 17
get_unix_time_from_system :: (main: *Time) -> float { call_ret := cast(*float) sys_call("Time", "get_unix_time_from_system", 1740695150, float, main.p_object); return call_ret.*; }  // 18
get_ticks_msec :: (main: *Time) -> int { call_ret := cast(*int) sys_call("Time", "get_ticks_msec", 3905245786, int, main.p_object); return call_ret.*; }  // 19
get_ticks_usec :: (main: *Time) -> int { call_ret := cast(*int) sys_call("Time", "get_ticks_usec", 3905245786, int, main.p_object); return call_ret.*; }  // 20

set_wait_time :: (main: *Timer, time_sec: float) { sys_call("Timer", "set_wait_time", 373806689, Nil, main.p_object, time_sec);  }  // 0
get_wait_time :: (main: *Timer) -> float { call_ret := cast(*float) sys_call("Timer", "get_wait_time", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_one_shot :: (main: *Timer, enable: bool) { sys_call("Timer", "set_one_shot", 2586408642, Nil, main.p_object, enable);  }  // 2
is_one_shot :: (main: *Timer) -> bool { call_ret := cast(*bool) sys_call("Timer", "is_one_shot", 36873697, bool, main.p_object); return call_ret.*; }  // 3
set_autostart :: (main: *Timer, enable: bool) { sys_call("Timer", "set_autostart", 2586408642, Nil, main.p_object, enable);  }  // 4
has_autostart :: (main: *Timer) -> bool { call_ret := cast(*bool) sys_call("Timer", "has_autostart", 36873697, bool, main.p_object); return call_ret.*; }  // 5
start :: (main: *Timer) { sys_call("Timer", "start", 1392008558, Nil, main.p_object);  }  // 6
stop :: (main: *Timer) { sys_call("Timer", "stop", 3218959716, Nil, main.p_object);  }  // 7
set_paused :: (main: *Timer, paused: bool) { sys_call("Timer", "set_paused", 2586408642, Nil, main.p_object, paused);  }  // 8
is_paused :: (main: *Timer) -> bool { call_ret := cast(*bool) sys_call("Timer", "is_paused", 36873697, bool, main.p_object); return call_ret.*; }  // 9
set_ignore_time_scale :: (main: *Timer, ignore: bool) { sys_call("Timer", "set_ignore_time_scale", 2586408642, Nil, main.p_object, ignore);  }  // 10
is_ignoring_time_scale :: (main: *Timer) -> bool { call_ret := cast(*bool) sys_call("Timer", "is_ignoring_time_scale", 2240911060, bool, main.p_object); return call_ret.*; }  // 11
is_stopped :: (main: *Timer) -> bool { call_ret := cast(*bool) sys_call("Timer", "is_stopped", 36873697, bool, main.p_object); return call_ret.*; }  // 12
get_time_left :: (main: *Timer) -> float { call_ret := cast(*float) sys_call("Timer", "get_time_left", 1740695150, float, main.p_object); return call_ret.*; }  // 13
set_timer_process_callback :: (main: *Timer, callback: Timer.TimerProcessCallback) { sys_call("Timer", "set_timer_process_callback", 3469495063, Nil, main.p_object, callback);  }  // 14
get_timer_process_callback :: (main: *Timer) -> Timer.TimerProcessCallback { call_ret := cast(*Timer.TimerProcessCallback) sys_call("Timer", "get_timer_process_callback", 2672570227, Timer.TimerProcessCallback, main.p_object); return call_ret.*; }  // 15

set_inner_radius :: (main: *TorusMesh, radius: float) { sys_call("TorusMesh", "set_inner_radius", 373806689, Nil, main.p_object, radius);  }  // 0
get_inner_radius :: (main: *TorusMesh) -> float { call_ret := cast(*float) sys_call("TorusMesh", "get_inner_radius", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_outer_radius :: (main: *TorusMesh, radius: float) { sys_call("TorusMesh", "set_outer_radius", 373806689, Nil, main.p_object, radius);  }  // 2
get_outer_radius :: (main: *TorusMesh) -> float { call_ret := cast(*float) sys_call("TorusMesh", "get_outer_radius", 1740695150, float, main.p_object); return call_ret.*; }  // 3
set_rings :: (main: *TorusMesh, rings: int) { sys_call("TorusMesh", "set_rings", 1286410249, Nil, main.p_object, rings);  }  // 4
get_rings :: (main: *TorusMesh) -> int { call_ret := cast(*int) sys_call("TorusMesh", "get_rings", 3905245786, int, main.p_object); return call_ret.*; }  // 5
set_ring_segments :: (main: *TorusMesh, rings: int) { sys_call("TorusMesh", "set_ring_segments", 1286410249, Nil, main.p_object, rings);  }  // 6
get_ring_segments :: (main: *TorusMesh) -> int { call_ret := cast(*int) sys_call("TorusMesh", "get_ring_segments", 3905245786, int, main.p_object); return call_ret.*; }  // 7

set_texture_normal :: (main: *TouchScreenButton, texture: Texture2D) { sys_call("TouchScreenButton", "set_texture_normal", 4051416890, Nil, main.p_object, texture);  }  // 0
get_texture_normal :: (main: *TouchScreenButton) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("TouchScreenButton", "get_texture_normal", 3635182373, Texture2D, main.p_object); return call_ret; }  // 1
set_texture_pressed :: (main: *TouchScreenButton, texture: Texture2D) { sys_call("TouchScreenButton", "set_texture_pressed", 4051416890, Nil, main.p_object, texture);  }  // 2
get_texture_pressed :: (main: *TouchScreenButton) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("TouchScreenButton", "get_texture_pressed", 3635182373, Texture2D, main.p_object); return call_ret; }  // 3
set_bitmask :: (main: *TouchScreenButton, bitmask: BitMap) { sys_call("TouchScreenButton", "set_bitmask", 698588216, Nil, main.p_object, bitmask);  }  // 4
get_bitmask :: (main: *TouchScreenButton) -> *BitMap { call_ret := cast(*BitMap) sys_call("TouchScreenButton", "get_bitmask", 2459671998, BitMap, main.p_object); return call_ret; }  // 5
set_shape :: (main: *TouchScreenButton, shape: Shape2D) { sys_call("TouchScreenButton", "set_shape", 771364740, Nil, main.p_object, shape);  }  // 6
get_shape :: (main: *TouchScreenButton) -> *Shape2D { call_ret := cast(*Shape2D) sys_call("TouchScreenButton", "get_shape", 522005891, Shape2D, main.p_object); return call_ret; }  // 7
set_shape_centered :: (main: *TouchScreenButton, _bool: bool) { sys_call("TouchScreenButton", "set_shape_centered", 2586408642, Nil, main.p_object, _bool);  }  // 8
is_shape_centered :: (main: *TouchScreenButton) -> bool { call_ret := cast(*bool) sys_call("TouchScreenButton", "is_shape_centered", 36873697, bool, main.p_object); return call_ret.*; }  // 9
set_shape_visible :: (main: *TouchScreenButton, _bool: bool) { sys_call("TouchScreenButton", "set_shape_visible", 2586408642, Nil, main.p_object, _bool);  }  // 10
is_shape_visible :: (main: *TouchScreenButton) -> bool { call_ret := cast(*bool) sys_call("TouchScreenButton", "is_shape_visible", 36873697, bool, main.p_object); return call_ret.*; }  // 11
set_action :: (main: *TouchScreenButton, action: string) { sys_call("TouchScreenButton", "set_action", 83702148, Nil, main.p_object, action);  }  // 12
get_action :: (main: *TouchScreenButton) -> gstring { call_ret := cast(*gstring) sys_call("TouchScreenButton", "get_action", 201670096, gstring, main.p_object); return call_ret.*; }  // 13
set_visibility_mode :: (main: *TouchScreenButton, mode: TouchScreenButton.VisibilityMode) { sys_call("TouchScreenButton", "set_visibility_mode", 3031128463, Nil, main.p_object, mode);  }  // 14
get_visibility_mode :: (main: *TouchScreenButton) -> TouchScreenButton.VisibilityMode { call_ret := cast(*TouchScreenButton.VisibilityMode) sys_call("TouchScreenButton", "get_visibility_mode", 2558996468, TouchScreenButton.VisibilityMode, main.p_object); return call_ret.*; }  // 15
set_passby_press :: (main: *TouchScreenButton, enabled: bool) { sys_call("TouchScreenButton", "set_passby_press", 2586408642, Nil, main.p_object, enabled);  }  // 16
is_passby_press_enabled :: (main: *TouchScreenButton) -> bool { call_ret := cast(*bool) sys_call("TouchScreenButton", "is_passby_press_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 17
is_pressed :: (main: *TouchScreenButton) -> bool { call_ret := cast(*bool) sys_call("TouchScreenButton", "is_pressed", 36873697, bool, main.p_object); return call_ret.*; }  // 18

set_locale :: (main: *Translation, locale: string) { sys_call("Translation", "set_locale", 83702148, Nil, main.p_object, locale);  }  // 2
get_locale :: (main: *Translation) -> gstring { call_ret := cast(*gstring) sys_call("Translation", "get_locale", 201670096, gstring, main.p_object); return call_ret.*; }  // 3
add_message :: (main: *Translation, src_message: string, xlated_message: string) { sys_call("Translation", "add_message", 3898530326, Nil, main.p_object, src_message, xlated_message);  }  // 4
add_plural_message :: (main: *Translation, src_message: string, xlated_messages: PackedStringArray) { sys_call("Translation", "add_plural_message", 2356982266, Nil, main.p_object, src_message, xlated_messages);  }  // 5
get_message :: (main: *Translation, src_message: string) -> StringName { call_ret := cast(*StringName) sys_call("Translation", "get_message", 1829228469, StringName, main.p_object, src_message); return call_ret.*; }  // 6
get_plural_message :: (main: *Translation, src_message: string, src_plural_message: string, n: int) -> StringName { call_ret := cast(*StringName) sys_call("Translation", "get_plural_message", 229954002, StringName, main.p_object, src_message, src_plural_message, n); return call_ret.*; }  // 7
erase_message :: (main: *Translation, src_message: string) { sys_call("Translation", "erase_message", 3959009644, Nil, main.p_object, src_message);  }  // 8
get_message_list :: (main: *Translation) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("Translation", "get_message_list", 1139954409, PackedStringArray, main.p_object); return call_ret.*; }  // 9
get_translated_message_list :: (main: *Translation) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("Translation", "get_translated_message_list", 1139954409, PackedStringArray, main.p_object); return call_ret.*; }  // 10
get_message_count :: (main: *Translation) -> int { call_ret := cast(*int) sys_call("Translation", "get_message_count", 3905245786, int, main.p_object); return call_ret.*; }  // 11

get_translation_object :: (main: *TranslationDomain, locale: string) -> *Translation { call_ret := cast(*Translation) sys_call("TranslationDomain", "get_translation_object", 606768082, Translation, main.p_object, locale); return call_ret; }  // 0
add_translation :: (main: *TranslationDomain, translation: Translation) { sys_call("TranslationDomain", "add_translation", 1466479800, Nil, main.p_object, translation);  }  // 1
remove_translation :: (main: *TranslationDomain, translation: Translation) { sys_call("TranslationDomain", "remove_translation", 1466479800, Nil, main.p_object, translation);  }  // 2
clear :: (main: *TranslationDomain) { sys_call("TranslationDomain", "clear", 3218959716, Nil, main.p_object);  }  // 3
translate :: (main: *TranslationDomain, message: string) -> StringName { call_ret := cast(*StringName) sys_call("TranslationDomain", "translate", 1829228469, StringName, main.p_object, message); return call_ret.*; }  // 4
translate_plural :: (main: *TranslationDomain, message: string, message_plural: string, n: int) -> StringName { call_ret := cast(*StringName) sys_call("TranslationDomain", "translate_plural", 229954002, StringName, main.p_object, message, message_plural, n); return call_ret.*; }  // 5
is_pseudolocalization_enabled :: (main: *TranslationDomain) -> bool { call_ret := cast(*bool) sys_call("TranslationDomain", "is_pseudolocalization_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 6
set_pseudolocalization_enabled :: (main: *TranslationDomain, enabled: bool) { sys_call("TranslationDomain", "set_pseudolocalization_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 7
is_pseudolocalization_accents_enabled :: (main: *TranslationDomain) -> bool { call_ret := cast(*bool) sys_call("TranslationDomain", "is_pseudolocalization_accents_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 8
set_pseudolocalization_accents_enabled :: (main: *TranslationDomain, enabled: bool) { sys_call("TranslationDomain", "set_pseudolocalization_accents_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 9
is_pseudolocalization_double_vowels_enabled :: (main: *TranslationDomain) -> bool { call_ret := cast(*bool) sys_call("TranslationDomain", "is_pseudolocalization_double_vowels_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 10
set_pseudolocalization_double_vowels_enabled :: (main: *TranslationDomain, enabled: bool) { sys_call("TranslationDomain", "set_pseudolocalization_double_vowels_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 11
is_pseudolocalization_fake_bidi_enabled :: (main: *TranslationDomain) -> bool { call_ret := cast(*bool) sys_call("TranslationDomain", "is_pseudolocalization_fake_bidi_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 12
set_pseudolocalization_fake_bidi_enabled :: (main: *TranslationDomain, enabled: bool) { sys_call("TranslationDomain", "set_pseudolocalization_fake_bidi_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 13
is_pseudolocalization_override_enabled :: (main: *TranslationDomain) -> bool { call_ret := cast(*bool) sys_call("TranslationDomain", "is_pseudolocalization_override_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 14
set_pseudolocalization_override_enabled :: (main: *TranslationDomain, enabled: bool) { sys_call("TranslationDomain", "set_pseudolocalization_override_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 15
is_pseudolocalization_skip_placeholders_enabled :: (main: *TranslationDomain) -> bool { call_ret := cast(*bool) sys_call("TranslationDomain", "is_pseudolocalization_skip_placeholders_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 16
set_pseudolocalization_skip_placeholders_enabled :: (main: *TranslationDomain, enabled: bool) { sys_call("TranslationDomain", "set_pseudolocalization_skip_placeholders_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 17
get_pseudolocalization_expansion_ratio :: (main: *TranslationDomain) -> float { call_ret := cast(*float) sys_call("TranslationDomain", "get_pseudolocalization_expansion_ratio", 1740695150, float, main.p_object); return call_ret.*; }  // 18
set_pseudolocalization_expansion_ratio :: (main: *TranslationDomain, ratio: float) { sys_call("TranslationDomain", "set_pseudolocalization_expansion_ratio", 373806689, Nil, main.p_object, ratio);  }  // 19
get_pseudolocalization_prefix :: (main: *TranslationDomain) -> gstring { call_ret := cast(*gstring) sys_call("TranslationDomain", "get_pseudolocalization_prefix", 201670096, gstring, main.p_object); return call_ret.*; }  // 20
set_pseudolocalization_prefix :: (main: *TranslationDomain, prefix: string) { sys_call("TranslationDomain", "set_pseudolocalization_prefix", 83702148, Nil, main.p_object, prefix);  }  // 21
get_pseudolocalization_suffix :: (main: *TranslationDomain) -> gstring { call_ret := cast(*gstring) sys_call("TranslationDomain", "get_pseudolocalization_suffix", 201670096, gstring, main.p_object); return call_ret.*; }  // 22
set_pseudolocalization_suffix :: (main: *TranslationDomain, suffix: string) { sys_call("TranslationDomain", "set_pseudolocalization_suffix", 83702148, Nil, main.p_object, suffix);  }  // 23
pseudolocalize :: (main: *TranslationDomain, message: string) -> StringName { call_ret := cast(*StringName) sys_call("TranslationDomain", "pseudolocalize", 1965194235, StringName, main.p_object, message); return call_ret.*; }  // 24

set_locale :: (main: *TranslationServer, locale: string) { sys_call("TranslationServer", "set_locale", 83702148, Nil, main.p_object, locale);  }  // 0
get_locale :: (main: *TranslationServer) -> gstring { call_ret := cast(*gstring) sys_call("TranslationServer", "get_locale", 201670096, gstring, main.p_object); return call_ret.*; }  // 1
get_tool_locale :: (main: *TranslationServer) -> gstring { call_ret := cast(*gstring) sys_call("TranslationServer", "get_tool_locale", 2841200299, gstring, main.p_object); return call_ret.*; }  // 2
compare_locales :: (main: *TranslationServer, locale_a: string, locale_b: string) -> int { call_ret := cast(*int) sys_call("TranslationServer", "compare_locales", 2878152881, int, main.p_object, locale_a, locale_b); return call_ret.*; }  // 3
standardize_locale :: (main: *TranslationServer, locale: string) -> gstring { call_ret := cast(*gstring) sys_call("TranslationServer", "standardize_locale", 4216441673, gstring, main.p_object, locale); return call_ret.*; }  // 4
get_all_languages :: (main: *TranslationServer) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("TranslationServer", "get_all_languages", 1139954409, PackedStringArray, main.p_object); return call_ret.*; }  // 5
get_language_name :: (main: *TranslationServer, language: string) -> gstring { call_ret := cast(*gstring) sys_call("TranslationServer", "get_language_name", 3135753539, gstring, main.p_object, language); return call_ret.*; }  // 6
get_all_scripts :: (main: *TranslationServer) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("TranslationServer", "get_all_scripts", 1139954409, PackedStringArray, main.p_object); return call_ret.*; }  // 7
get_script_name :: (main: *TranslationServer, script: string) -> gstring { call_ret := cast(*gstring) sys_call("TranslationServer", "get_script_name", 3135753539, gstring, main.p_object, script); return call_ret.*; }  // 8
get_all_countries :: (main: *TranslationServer) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("TranslationServer", "get_all_countries", 1139954409, PackedStringArray, main.p_object); return call_ret.*; }  // 9
get_country_name :: (main: *TranslationServer, country: string) -> gstring { call_ret := cast(*gstring) sys_call("TranslationServer", "get_country_name", 3135753539, gstring, main.p_object, country); return call_ret.*; }  // 10
get_locale_name :: (main: *TranslationServer, locale: string) -> gstring { call_ret := cast(*gstring) sys_call("TranslationServer", "get_locale_name", 3135753539, gstring, main.p_object, locale); return call_ret.*; }  // 11
translate :: (main: *TranslationServer, message: string) -> StringName { call_ret := cast(*StringName) sys_call("TranslationServer", "translate", 1829228469, StringName, main.p_object, message); return call_ret.*; }  // 12
translate_plural :: (main: *TranslationServer, message: string, plural_message: string, n: int) -> StringName { call_ret := cast(*StringName) sys_call("TranslationServer", "translate_plural", 229954002, StringName, main.p_object, message, plural_message, n); return call_ret.*; }  // 13
add_translation :: (main: *TranslationServer, translation: Translation) { sys_call("TranslationServer", "add_translation", 1466479800, Nil, main.p_object, translation);  }  // 14
remove_translation :: (main: *TranslationServer, translation: Translation) { sys_call("TranslationServer", "remove_translation", 1466479800, Nil, main.p_object, translation);  }  // 15
get_translation_object :: (main: *TranslationServer, locale: string) -> *Translation { call_ret := cast(*Translation) sys_call("TranslationServer", "get_translation_object", 2065240175, Translation, main.p_object, locale); return call_ret; }  // 16
has_domain :: (main: *TranslationServer, domain: string) -> bool { call_ret := cast(*bool) sys_call("TranslationServer", "has_domain", 2619796661, bool, main.p_object, domain); return call_ret.*; }  // 17
get_or_add_domain :: (main: *TranslationServer, domain: string) -> *TranslationDomain { call_ret := cast(*TranslationDomain) sys_call("TranslationServer", "get_or_add_domain", 397200075, TranslationDomain, main.p_object, domain); return call_ret; }  // 18
remove_domain :: (main: *TranslationServer, domain: string) { sys_call("TranslationServer", "remove_domain", 3304788590, Nil, main.p_object, domain);  }  // 19
clear :: (main: *TranslationServer) { sys_call("TranslationServer", "clear", 3218959716, Nil, main.p_object);  }  // 20
get_loaded_locales :: (main: *TranslationServer) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("TranslationServer", "get_loaded_locales", 1139954409, PackedStringArray, main.p_object); return call_ret.*; }  // 21
is_pseudolocalization_enabled :: (main: *TranslationServer) -> bool { call_ret := cast(*bool) sys_call("TranslationServer", "is_pseudolocalization_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 22
set_pseudolocalization_enabled :: (main: *TranslationServer, enabled: bool) { sys_call("TranslationServer", "set_pseudolocalization_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 23
reload_pseudolocalization :: (main: *TranslationServer) { sys_call("TranslationServer", "reload_pseudolocalization", 3218959716, Nil, main.p_object);  }  // 24
pseudolocalize :: (main: *TranslationServer, message: string) -> StringName { call_ret := cast(*StringName) sys_call("TranslationServer", "pseudolocalize", 1965194235, StringName, main.p_object, message); return call_ret.*; }  // 25

clear :: (main: *Tree) { sys_call("Tree", "clear", 3218959716, Nil, main.p_object);  }  // 0
create_item :: (main: *Tree) -> *TreeItem { call_ret := cast(*TreeItem) sys_call("Tree", "create_item", 528467046, TreeItem, main.p_object); return call_ret; }  // 1
get_root :: (main: *Tree) -> *TreeItem { call_ret := cast(*TreeItem) sys_call("Tree", "get_root", 1514277247, TreeItem, main.p_object); return call_ret; }  // 2
set_column_custom_minimum_width :: (main: *Tree, column: int, min_width: int) { sys_call("Tree", "set_column_custom_minimum_width", 3937882851, Nil, main.p_object, column, min_width);  }  // 3
set_column_expand :: (main: *Tree, column: int, expand: bool) { sys_call("Tree", "set_column_expand", 300928843, Nil, main.p_object, column, expand);  }  // 4
set_column_expand_ratio :: (main: *Tree, column: int, ratio: int) { sys_call("Tree", "set_column_expand_ratio", 3937882851, Nil, main.p_object, column, ratio);  }  // 5
set_column_clip_content :: (main: *Tree, column: int, enable: bool) { sys_call("Tree", "set_column_clip_content", 300928843, Nil, main.p_object, column, enable);  }  // 6
is_column_expanding :: (main: *Tree, column: int) -> bool { call_ret := cast(*bool) sys_call("Tree", "is_column_expanding", 1116898809, bool, main.p_object, column); return call_ret.*; }  // 7
is_column_clipping_content :: (main: *Tree, column: int) -> bool { call_ret := cast(*bool) sys_call("Tree", "is_column_clipping_content", 1116898809, bool, main.p_object, column); return call_ret.*; }  // 8
get_column_expand_ratio :: (main: *Tree, column: int) -> int { call_ret := cast(*int) sys_call("Tree", "get_column_expand_ratio", 923996154, int, main.p_object, column); return call_ret.*; }  // 9
get_column_width :: (main: *Tree, column: int) -> int { call_ret := cast(*int) sys_call("Tree", "get_column_width", 923996154, int, main.p_object, column); return call_ret.*; }  // 10
set_hide_root :: (main: *Tree, enable: bool) { sys_call("Tree", "set_hide_root", 2586408642, Nil, main.p_object, enable);  }  // 11
is_root_hidden :: (main: *Tree) -> bool { call_ret := cast(*bool) sys_call("Tree", "is_root_hidden", 36873697, bool, main.p_object); return call_ret.*; }  // 12
get_next_selected :: (main: *Tree, from: TreeItem) -> *TreeItem { call_ret := cast(*TreeItem) sys_call("Tree", "get_next_selected", 873446299, TreeItem, main.p_object, from); return call_ret; }  // 13
get_selected :: (main: *Tree) -> *TreeItem { call_ret := cast(*TreeItem) sys_call("Tree", "get_selected", 1514277247, TreeItem, main.p_object); return call_ret; }  // 14
set_selected :: (main: *Tree, item: TreeItem, column: int) { sys_call("Tree", "set_selected", 2662547442, Nil, main.p_object, item, column);  }  // 15
get_selected_column :: (main: *Tree) -> int { call_ret := cast(*int) sys_call("Tree", "get_selected_column", 3905245786, int, main.p_object); return call_ret.*; }  // 16
get_pressed_button :: (main: *Tree) -> int { call_ret := cast(*int) sys_call("Tree", "get_pressed_button", 3905245786, int, main.p_object); return call_ret.*; }  // 17
set_select_mode :: (main: *Tree, mode: Tree.SelectMode) { sys_call("Tree", "set_select_mode", 3223887270, Nil, main.p_object, mode);  }  // 18
get_select_mode :: (main: *Tree) -> Tree.SelectMode { call_ret := cast(*Tree.SelectMode) sys_call("Tree", "get_select_mode", 100748571, Tree.SelectMode, main.p_object); return call_ret.*; }  // 19
deselect_all :: (main: *Tree) { sys_call("Tree", "deselect_all", 3218959716, Nil, main.p_object);  }  // 20
set_columns :: (main: *Tree, amount: int) { sys_call("Tree", "set_columns", 1286410249, Nil, main.p_object, amount);  }  // 21
get_columns :: (main: *Tree) -> int { call_ret := cast(*int) sys_call("Tree", "get_columns", 3905245786, int, main.p_object); return call_ret.*; }  // 22
get_edited :: (main: *Tree) -> *TreeItem { call_ret := cast(*TreeItem) sys_call("Tree", "get_edited", 1514277247, TreeItem, main.p_object); return call_ret; }  // 23
get_edited_column :: (main: *Tree) -> int { call_ret := cast(*int) sys_call("Tree", "get_edited_column", 3905245786, int, main.p_object); return call_ret.*; }  // 24
edit_selected :: (main: *Tree) -> bool { call_ret := cast(*bool) sys_call("Tree", "edit_selected", 2595650253, bool, main.p_object); return call_ret.*; }  // 25
get_custom_popup_rect :: (main: *Tree) -> Rect2 { call_ret := cast(*Rect2) sys_call("Tree", "get_custom_popup_rect", 1639390495, Rect2, main.p_object); return call_ret.*; }  // 26
get_item_area_rect :: (main: *Tree, item: TreeItem) -> Rect2 { call_ret := cast(*Rect2) sys_call("Tree", "get_item_area_rect", 47968679, Rect2, main.p_object, item); return call_ret.*; }  // 27
get_item_at_position :: (main: *Tree, position: Vector2) -> *TreeItem { call_ret := cast(*TreeItem) sys_call("Tree", "get_item_at_position", 4193340126, TreeItem, main.p_object, position); return call_ret; }  // 28
get_column_at_position :: (main: *Tree, position: Vector2) -> int { call_ret := cast(*int) sys_call("Tree", "get_column_at_position", 3820158470, int, main.p_object, position); return call_ret.*; }  // 29
get_drop_section_at_position :: (main: *Tree, position: Vector2) -> int { call_ret := cast(*int) sys_call("Tree", "get_drop_section_at_position", 3820158470, int, main.p_object, position); return call_ret.*; }  // 30
get_button_id_at_position :: (main: *Tree, position: Vector2) -> int { call_ret := cast(*int) sys_call("Tree", "get_button_id_at_position", 3820158470, int, main.p_object, position); return call_ret.*; }  // 31
ensure_cursor_is_visible :: (main: *Tree) { sys_call("Tree", "ensure_cursor_is_visible", 3218959716, Nil, main.p_object);  }  // 32
set_column_titles_visible :: (main: *Tree, visible: bool) { sys_call("Tree", "set_column_titles_visible", 2586408642, Nil, main.p_object, visible);  }  // 33
are_column_titles_visible :: (main: *Tree) -> bool { call_ret := cast(*bool) sys_call("Tree", "are_column_titles_visible", 36873697, bool, main.p_object); return call_ret.*; }  // 34
set_column_title :: (main: *Tree, column: int, title: string) { sys_call("Tree", "set_column_title", 501894301, Nil, main.p_object, column, title);  }  // 35
get_column_title :: (main: *Tree, column: int) -> gstring { call_ret := cast(*gstring) sys_call("Tree", "get_column_title", 844755477, gstring, main.p_object, column); return call_ret.*; }  // 36
set_column_title_alignment :: (main: *Tree, column: int, title_alignment: HorizontalAlignment) { sys_call("Tree", "set_column_title_alignment", 3276431499, Nil, main.p_object, column, title_alignment);  }  // 37
get_column_title_alignment :: (main: *Tree, column: int) -> HorizontalAlignment { call_ret := cast(*HorizontalAlignment) sys_call("Tree", "get_column_title_alignment", 4171562184, HorizontalAlignment, main.p_object, column); return call_ret.*; }  // 38
set_column_title_direction :: (main: *Tree, column: int, direction: Control.TextDirection) { sys_call("Tree", "set_column_title_direction", 1707680378, Nil, main.p_object, column, direction);  }  // 39
get_column_title_direction :: (main: *Tree, column: int) -> Control.TextDirection { call_ret := cast(*Control.TextDirection) sys_call("Tree", "get_column_title_direction", 4235602388, Control.TextDirection, main.p_object, column); return call_ret.*; }  // 40
set_column_title_language :: (main: *Tree, column: int, language: string) { sys_call("Tree", "set_column_title_language", 501894301, Nil, main.p_object, column, language);  }  // 41
get_column_title_language :: (main: *Tree, column: int) -> gstring { call_ret := cast(*gstring) sys_call("Tree", "get_column_title_language", 844755477, gstring, main.p_object, column); return call_ret.*; }  // 42
get_scroll :: (main: *Tree) -> Vector2 { call_ret := cast(*Vector2) sys_call("Tree", "get_scroll", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 43
scroll_to_item :: (main: *Tree, item: TreeItem) { sys_call("Tree", "scroll_to_item", 1314737213, Nil, main.p_object, item);  }  // 44
set_h_scroll_enabled :: (main: *Tree, h_scroll: bool) { sys_call("Tree", "set_h_scroll_enabled", 2586408642, Nil, main.p_object, h_scroll);  }  // 45
is_h_scroll_enabled :: (main: *Tree) -> bool { call_ret := cast(*bool) sys_call("Tree", "is_h_scroll_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 46
set_v_scroll_enabled :: (main: *Tree, h_scroll: bool) { sys_call("Tree", "set_v_scroll_enabled", 2586408642, Nil, main.p_object, h_scroll);  }  // 47
is_v_scroll_enabled :: (main: *Tree) -> bool { call_ret := cast(*bool) sys_call("Tree", "is_v_scroll_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 48
set_hide_folding :: (main: *Tree, hide: bool) { sys_call("Tree", "set_hide_folding", 2586408642, Nil, main.p_object, hide);  }  // 49
is_folding_hidden :: (main: *Tree) -> bool { call_ret := cast(*bool) sys_call("Tree", "is_folding_hidden", 36873697, bool, main.p_object); return call_ret.*; }  // 50
set_enable_recursive_folding :: (main: *Tree, enable: bool) { sys_call("Tree", "set_enable_recursive_folding", 2586408642, Nil, main.p_object, enable);  }  // 51
is_recursive_folding_enabled :: (main: *Tree) -> bool { call_ret := cast(*bool) sys_call("Tree", "is_recursive_folding_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 52
set_drop_mode_flags :: (main: *Tree, flags: int) { sys_call("Tree", "set_drop_mode_flags", 1286410249, Nil, main.p_object, flags);  }  // 53
get_drop_mode_flags :: (main: *Tree) -> int { call_ret := cast(*int) sys_call("Tree", "get_drop_mode_flags", 3905245786, int, main.p_object); return call_ret.*; }  // 54
set_allow_rmb_select :: (main: *Tree, allow: bool) { sys_call("Tree", "set_allow_rmb_select", 2586408642, Nil, main.p_object, allow);  }  // 55
get_allow_rmb_select :: (main: *Tree) -> bool { call_ret := cast(*bool) sys_call("Tree", "get_allow_rmb_select", 36873697, bool, main.p_object); return call_ret.*; }  // 56
set_allow_reselect :: (main: *Tree, allow: bool) { sys_call("Tree", "set_allow_reselect", 2586408642, Nil, main.p_object, allow);  }  // 57
get_allow_reselect :: (main: *Tree) -> bool { call_ret := cast(*bool) sys_call("Tree", "get_allow_reselect", 36873697, bool, main.p_object); return call_ret.*; }  // 58
set_allow_search :: (main: *Tree, allow: bool) { sys_call("Tree", "set_allow_search", 2586408642, Nil, main.p_object, allow);  }  // 59
get_allow_search :: (main: *Tree) -> bool { call_ret := cast(*bool) sys_call("Tree", "get_allow_search", 36873697, bool, main.p_object); return call_ret.*; }  // 60
set_auto_tooltip :: (main: *Tree, enable: bool) { sys_call("Tree", "set_auto_tooltip", 2586408642, Nil, main.p_object, enable);  }  // 61
is_auto_tooltip_enabled :: (main: *Tree) -> bool { call_ret := cast(*bool) sys_call("Tree", "is_auto_tooltip_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 62

set_cell_mode :: (main: *TreeItem, column: int, mode: TreeItem.TreeCellMode) { sys_call("TreeItem", "set_cell_mode", 289920701, Nil, main.p_object, column, mode);  }  // 0
get_cell_mode :: (main: *TreeItem, column: int) -> TreeItem.TreeCellMode { call_ret := cast(*TreeItem.TreeCellMode) sys_call("TreeItem", "get_cell_mode", 3406114978, TreeItem.TreeCellMode, main.p_object, column); return call_ret.*; }  // 1
set_auto_translate_mode :: (main: *TreeItem, column: int, mode: Node.AutoTranslateMode) { sys_call("TreeItem", "set_auto_translate_mode", 287402019, Nil, main.p_object, column, mode);  }  // 2
get_auto_translate_mode :: (main: *TreeItem, column: int) -> Node.AutoTranslateMode { call_ret := cast(*Node.AutoTranslateMode) sys_call("TreeItem", "get_auto_translate_mode", 906302372, Node.AutoTranslateMode, main.p_object, column); return call_ret.*; }  // 3
set_edit_multiline :: (main: *TreeItem, column: int, multiline: bool) { sys_call("TreeItem", "set_edit_multiline", 300928843, Nil, main.p_object, column, multiline);  }  // 4
is_edit_multiline :: (main: *TreeItem, column: int) -> bool { call_ret := cast(*bool) sys_call("TreeItem", "is_edit_multiline", 1116898809, bool, main.p_object, column); return call_ret.*; }  // 5
set_checked :: (main: *TreeItem, column: int, checked: bool) { sys_call("TreeItem", "set_checked", 300928843, Nil, main.p_object, column, checked);  }  // 6
set_indeterminate :: (main: *TreeItem, column: int, indeterminate: bool) { sys_call("TreeItem", "set_indeterminate", 300928843, Nil, main.p_object, column, indeterminate);  }  // 7
is_checked :: (main: *TreeItem, column: int) -> bool { call_ret := cast(*bool) sys_call("TreeItem", "is_checked", 1116898809, bool, main.p_object, column); return call_ret.*; }  // 8
is_indeterminate :: (main: *TreeItem, column: int) -> bool { call_ret := cast(*bool) sys_call("TreeItem", "is_indeterminate", 1116898809, bool, main.p_object, column); return call_ret.*; }  // 9
propagate_check :: (main: *TreeItem, column: int) { sys_call("TreeItem", "propagate_check", 972357352, Nil, main.p_object, column);  }  // 10
set_text :: (main: *TreeItem, column: int, text: string) { sys_call("TreeItem", "set_text", 501894301, Nil, main.p_object, column, text);  }  // 11
get_text :: (main: *TreeItem, column: int) -> gstring { call_ret := cast(*gstring) sys_call("TreeItem", "get_text", 844755477, gstring, main.p_object, column); return call_ret.*; }  // 12
set_text_direction :: (main: *TreeItem, column: int, direction: Control.TextDirection) { sys_call("TreeItem", "set_text_direction", 1707680378, Nil, main.p_object, column, direction);  }  // 13
get_text_direction :: (main: *TreeItem, column: int) -> Control.TextDirection { call_ret := cast(*Control.TextDirection) sys_call("TreeItem", "get_text_direction", 4235602388, Control.TextDirection, main.p_object, column); return call_ret.*; }  // 14
set_autowrap_mode :: (main: *TreeItem, column: int, autowrap_mode: TextServer.AutowrapMode) { sys_call("TreeItem", "set_autowrap_mode", 3633006561, Nil, main.p_object, column, autowrap_mode);  }  // 15
get_autowrap_mode :: (main: *TreeItem, column: int) -> TextServer.AutowrapMode { call_ret := cast(*TextServer.AutowrapMode) sys_call("TreeItem", "get_autowrap_mode", 2902757236, TextServer.AutowrapMode, main.p_object, column); return call_ret.*; }  // 16
set_text_overrun_behavior :: (main: *TreeItem, column: int, overrun_behavior: TextServer.OverrunBehavior) { sys_call("TreeItem", "set_text_overrun_behavior", 1940772195, Nil, main.p_object, column, overrun_behavior);  }  // 17
get_text_overrun_behavior :: (main: *TreeItem, column: int) -> TextServer.OverrunBehavior { call_ret := cast(*TextServer.OverrunBehavior) sys_call("TreeItem", "get_text_overrun_behavior", 3782727860, TextServer.OverrunBehavior, main.p_object, column); return call_ret.*; }  // 18
set_structured_text_bidi_override :: (main: *TreeItem, column: int, parser: TextServer.StructuredTextParser) { sys_call("TreeItem", "set_structured_text_bidi_override", 868756907, Nil, main.p_object, column, parser);  }  // 19
get_structured_text_bidi_override :: (main: *TreeItem, column: int) -> TextServer.StructuredTextParser { call_ret := cast(*TextServer.StructuredTextParser) sys_call("TreeItem", "get_structured_text_bidi_override", 3377823772, TextServer.StructuredTextParser, main.p_object, column); return call_ret.*; }  // 20
set_structured_text_bidi_override_options :: (main: *TreeItem, column: int, args: Array) { sys_call("TreeItem", "set_structured_text_bidi_override_options", 537221740, Nil, main.p_object, column, args);  }  // 21
get_structured_text_bidi_override_options :: (main: *TreeItem, column: int) -> Array { call_ret := cast(*Array) sys_call("TreeItem", "get_structured_text_bidi_override_options", 663333327, Array, main.p_object, column); return call_ret.*; }  // 22
set_language :: (main: *TreeItem, column: int, language: string) { sys_call("TreeItem", "set_language", 501894301, Nil, main.p_object, column, language);  }  // 23
get_language :: (main: *TreeItem, column: int) -> gstring { call_ret := cast(*gstring) sys_call("TreeItem", "get_language", 844755477, gstring, main.p_object, column); return call_ret.*; }  // 24
set_suffix :: (main: *TreeItem, column: int, text: string) { sys_call("TreeItem", "set_suffix", 501894301, Nil, main.p_object, column, text);  }  // 25
get_suffix :: (main: *TreeItem, column: int) -> gstring { call_ret := cast(*gstring) sys_call("TreeItem", "get_suffix", 844755477, gstring, main.p_object, column); return call_ret.*; }  // 26
set_icon :: (main: *TreeItem, column: int, texture: Texture2D) { sys_call("TreeItem", "set_icon", 666127730, Nil, main.p_object, column, texture);  }  // 27
get_icon :: (main: *TreeItem, column: int) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("TreeItem", "get_icon", 3536238170, Texture2D, main.p_object, column); return call_ret; }  // 28
set_icon_overlay :: (main: *TreeItem, column: int, texture: Texture2D) { sys_call("TreeItem", "set_icon_overlay", 666127730, Nil, main.p_object, column, texture);  }  // 29
get_icon_overlay :: (main: *TreeItem, column: int) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("TreeItem", "get_icon_overlay", 3536238170, Texture2D, main.p_object, column); return call_ret; }  // 30
set_icon_region :: (main: *TreeItem, column: int, region: Rect2) { sys_call("TreeItem", "set_icon_region", 1356297692, Nil, main.p_object, column, region);  }  // 31
get_icon_region :: (main: *TreeItem, column: int) -> Rect2 { call_ret := cast(*Rect2) sys_call("TreeItem", "get_icon_region", 3327874267, Rect2, main.p_object, column); return call_ret.*; }  // 32
set_icon_max_width :: (main: *TreeItem, column: int, width: int) { sys_call("TreeItem", "set_icon_max_width", 3937882851, Nil, main.p_object, column, width);  }  // 33
get_icon_max_width :: (main: *TreeItem, column: int) -> int { call_ret := cast(*int) sys_call("TreeItem", "get_icon_max_width", 923996154, int, main.p_object, column); return call_ret.*; }  // 34
set_icon_modulate :: (main: *TreeItem, column: int, modulate: Color) { sys_call("TreeItem", "set_icon_modulate", 2878471219, Nil, main.p_object, column, modulate);  }  // 35
get_icon_modulate :: (main: *TreeItem, column: int) -> Color { call_ret := cast(*Color) sys_call("TreeItem", "get_icon_modulate", 3457211756, Color, main.p_object, column); return call_ret.*; }  // 36
set_range :: (main: *TreeItem, column: int, value: float) { sys_call("TreeItem", "set_range", 1602489585, Nil, main.p_object, column, value);  }  // 37
get_range :: (main: *TreeItem, column: int) -> float { call_ret := cast(*float) sys_call("TreeItem", "get_range", 2339986948, float, main.p_object, column); return call_ret.*; }  // 38
set_range_config :: (main: *TreeItem, column: int, min: float, max: float, step: float) { sys_call("TreeItem", "set_range_config", 1547181014, Nil, main.p_object, column, min, max, step);  }  // 39
get_range_config :: (main: *TreeItem, column: int) -> Dictionary { call_ret := cast(*Dictionary) sys_call("TreeItem", "get_range_config", 3554694381, Dictionary, main.p_object, column); return call_ret.*; }  // 40
set_metadata :: (main: *TreeItem, column: int, meta: Variant) { sys_call("TreeItem", "set_metadata", 2152698145, Nil, main.p_object, column, meta);  }  // 41
get_metadata :: (main: *TreeItem, column: int) -> Variant { call_ret := cast(*Variant) sys_call("TreeItem", "get_metadata", 4227898402, Variant, main.p_object, column); return call_ret.*; }  // 42
set_custom_draw :: (main: *TreeItem, column: int, object: Object, callback: string) { sys_call("TreeItem", "set_custom_draw", 272420368, Nil, main.p_object, column, object, callback);  }  // 43
set_custom_draw_callback :: (main: *TreeItem, column: int, callback: Callable) { sys_call("TreeItem", "set_custom_draw_callback", 957362965, Nil, main.p_object, column, callback);  }  // 44
get_custom_draw_callback :: (main: *TreeItem, column: int) -> Callable { call_ret := cast(*Callable) sys_call("TreeItem", "get_custom_draw_callback", 1317077508, Callable, main.p_object, column); return call_ret.*; }  // 45
set_collapsed :: (main: *TreeItem, enable: bool) { sys_call("TreeItem", "set_collapsed", 2586408642, Nil, main.p_object, enable);  }  // 46
is_collapsed :: (main: *TreeItem) -> bool { call_ret := cast(*bool) sys_call("TreeItem", "is_collapsed", 2240911060, bool, main.p_object); return call_ret.*; }  // 47
set_collapsed_recursive :: (main: *TreeItem, enable: bool) { sys_call("TreeItem", "set_collapsed_recursive", 2586408642, Nil, main.p_object, enable);  }  // 48
is_any_collapsed :: (main: *TreeItem) -> bool { call_ret := cast(*bool) sys_call("TreeItem", "is_any_collapsed", 2595650253, bool, main.p_object); return call_ret.*; }  // 49
set_visible :: (main: *TreeItem, enable: bool) { sys_call("TreeItem", "set_visible", 2586408642, Nil, main.p_object, enable);  }  // 50
is_visible :: (main: *TreeItem) -> bool { call_ret := cast(*bool) sys_call("TreeItem", "is_visible", 2240911060, bool, main.p_object); return call_ret.*; }  // 51
is_visible_in_tree :: (main: *TreeItem) -> bool { call_ret := cast(*bool) sys_call("TreeItem", "is_visible_in_tree", 36873697, bool, main.p_object); return call_ret.*; }  // 52
uncollapse_tree :: (main: *TreeItem) { sys_call("TreeItem", "uncollapse_tree", 3218959716, Nil, main.p_object);  }  // 53
set_custom_minimum_height :: (main: *TreeItem, height: int) { sys_call("TreeItem", "set_custom_minimum_height", 1286410249, Nil, main.p_object, height);  }  // 54
get_custom_minimum_height :: (main: *TreeItem) -> int { call_ret := cast(*int) sys_call("TreeItem", "get_custom_minimum_height", 3905245786, int, main.p_object); return call_ret.*; }  // 55
set_selectable :: (main: *TreeItem, column: int, selectable: bool) { sys_call("TreeItem", "set_selectable", 300928843, Nil, main.p_object, column, selectable);  }  // 56
is_selectable :: (main: *TreeItem, column: int) -> bool { call_ret := cast(*bool) sys_call("TreeItem", "is_selectable", 1116898809, bool, main.p_object, column); return call_ret.*; }  // 57
is_selected :: (main: *TreeItem, column: int) -> bool { call_ret := cast(*bool) sys_call("TreeItem", "is_selected", 3067735520, bool, main.p_object, column); return call_ret.*; }  // 58
select :: (main: *TreeItem, column: int) { sys_call("TreeItem", "select", 1286410249, Nil, main.p_object, column);  }  // 59
deselect :: (main: *TreeItem, column: int) { sys_call("TreeItem", "deselect", 1286410249, Nil, main.p_object, column);  }  // 60
set_editable :: (main: *TreeItem, column: int, enabled: bool) { sys_call("TreeItem", "set_editable", 300928843, Nil, main.p_object, column, enabled);  }  // 61
is_editable :: (main: *TreeItem, column: int) -> bool { call_ret := cast(*bool) sys_call("TreeItem", "is_editable", 3067735520, bool, main.p_object, column); return call_ret.*; }  // 62
set_custom_color :: (main: *TreeItem, column: int, color: Color) { sys_call("TreeItem", "set_custom_color", 2878471219, Nil, main.p_object, column, color);  }  // 63
get_custom_color :: (main: *TreeItem, column: int) -> Color { call_ret := cast(*Color) sys_call("TreeItem", "get_custom_color", 3457211756, Color, main.p_object, column); return call_ret.*; }  // 64
clear_custom_color :: (main: *TreeItem, column: int) { sys_call("TreeItem", "clear_custom_color", 1286410249, Nil, main.p_object, column);  }  // 65
set_custom_font :: (main: *TreeItem, column: int, font: Font) { sys_call("TreeItem", "set_custom_font", 2637609184, Nil, main.p_object, column, font);  }  // 66
get_custom_font :: (main: *TreeItem, column: int) -> *Font { call_ret := cast(*Font) sys_call("TreeItem", "get_custom_font", 4244553094, Font, main.p_object, column); return call_ret; }  // 67
set_custom_font_size :: (main: *TreeItem, column: int, font_size: int) { sys_call("TreeItem", "set_custom_font_size", 3937882851, Nil, main.p_object, column, font_size);  }  // 68
get_custom_font_size :: (main: *TreeItem, column: int) -> int { call_ret := cast(*int) sys_call("TreeItem", "get_custom_font_size", 923996154, int, main.p_object, column); return call_ret.*; }  // 69
set_custom_bg_color :: (main: *TreeItem, column: int, color: Color) { sys_call("TreeItem", "set_custom_bg_color", 894174518, Nil, main.p_object, column, color);  }  // 70
clear_custom_bg_color :: (main: *TreeItem, column: int) { sys_call("TreeItem", "clear_custom_bg_color", 1286410249, Nil, main.p_object, column);  }  // 71
get_custom_bg_color :: (main: *TreeItem, column: int) -> Color { call_ret := cast(*Color) sys_call("TreeItem", "get_custom_bg_color", 3457211756, Color, main.p_object, column); return call_ret.*; }  // 72
set_custom_as_button :: (main: *TreeItem, column: int, enable: bool) { sys_call("TreeItem", "set_custom_as_button", 300928843, Nil, main.p_object, column, enable);  }  // 73
is_custom_set_as_button :: (main: *TreeItem, column: int) -> bool { call_ret := cast(*bool) sys_call("TreeItem", "is_custom_set_as_button", 1116898809, bool, main.p_object, column); return call_ret.*; }  // 74
clear_buttons :: (main: *TreeItem) { sys_call("TreeItem", "clear_buttons", 3218959716, Nil, main.p_object);  }  // 75
add_button :: (main: *TreeItem, column: int, button: Texture2D) { sys_call("TreeItem", "add_button", 1688223362, Nil, main.p_object, column, button);  }  // 76
get_button_count :: (main: *TreeItem, column: int) -> int { call_ret := cast(*int) sys_call("TreeItem", "get_button_count", 923996154, int, main.p_object, column); return call_ret.*; }  // 77
get_button_tooltip_text :: (main: *TreeItem, column: int, button_index: int) -> gstring { call_ret := cast(*gstring) sys_call("TreeItem", "get_button_tooltip_text", 1391810591, gstring, main.p_object, column, button_index); return call_ret.*; }  // 78
get_button_id :: (main: *TreeItem, column: int, button_index: int) -> int { call_ret := cast(*int) sys_call("TreeItem", "get_button_id", 3175239445, int, main.p_object, column, button_index); return call_ret.*; }  // 79
get_button_by_id :: (main: *TreeItem, column: int, id: int) -> int { call_ret := cast(*int) sys_call("TreeItem", "get_button_by_id", 3175239445, int, main.p_object, column, id); return call_ret.*; }  // 80
get_button_color :: (main: *TreeItem, column: int, id: int) -> Color { call_ret := cast(*Color) sys_call("TreeItem", "get_button_color", 2165839948, Color, main.p_object, column, id); return call_ret.*; }  // 81
get_button :: (main: *TreeItem, column: int, button_index: int) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("TreeItem", "get_button", 2584904275, Texture2D, main.p_object, column, button_index); return call_ret; }  // 82
set_button_tooltip_text :: (main: *TreeItem, column: int, button_index: int, tooltip: string) { sys_call("TreeItem", "set_button_tooltip_text", 2285447957, Nil, main.p_object, column, button_index, tooltip);  }  // 83
set_button :: (main: *TreeItem, column: int, button_index: int, button: Texture2D) { sys_call("TreeItem", "set_button", 176101966, Nil, main.p_object, column, button_index, button);  }  // 84
erase_button :: (main: *TreeItem, column: int, button_index: int) { sys_call("TreeItem", "erase_button", 3937882851, Nil, main.p_object, column, button_index);  }  // 85
set_button_disabled :: (main: *TreeItem, column: int, button_index: int, disabled: bool) { sys_call("TreeItem", "set_button_disabled", 1383440665, Nil, main.p_object, column, button_index, disabled);  }  // 86
set_button_color :: (main: *TreeItem, column: int, button_index: int, color: Color) { sys_call("TreeItem", "set_button_color", 3733378741, Nil, main.p_object, column, button_index, color);  }  // 87
is_button_disabled :: (main: *TreeItem, column: int, button_index: int) -> bool { call_ret := cast(*bool) sys_call("TreeItem", "is_button_disabled", 2522259332, bool, main.p_object, column, button_index); return call_ret.*; }  // 88
set_tooltip_text :: (main: *TreeItem, column: int, tooltip: string) { sys_call("TreeItem", "set_tooltip_text", 501894301, Nil, main.p_object, column, tooltip);  }  // 89
get_tooltip_text :: (main: *TreeItem, column: int) -> gstring { call_ret := cast(*gstring) sys_call("TreeItem", "get_tooltip_text", 844755477, gstring, main.p_object, column); return call_ret.*; }  // 90
set_text_alignment :: (main: *TreeItem, column: int, text_alignment: HorizontalAlignment) { sys_call("TreeItem", "set_text_alignment", 3276431499, Nil, main.p_object, column, text_alignment);  }  // 91
get_text_alignment :: (main: *TreeItem, column: int) -> HorizontalAlignment { call_ret := cast(*HorizontalAlignment) sys_call("TreeItem", "get_text_alignment", 4171562184, HorizontalAlignment, main.p_object, column); return call_ret.*; }  // 92
set_expand_right :: (main: *TreeItem, column: int, enable: bool) { sys_call("TreeItem", "set_expand_right", 300928843, Nil, main.p_object, column, enable);  }  // 93
get_expand_right :: (main: *TreeItem, column: int) -> bool { call_ret := cast(*bool) sys_call("TreeItem", "get_expand_right", 1116898809, bool, main.p_object, column); return call_ret.*; }  // 94
set_disable_folding :: (main: *TreeItem, disable: bool) { sys_call("TreeItem", "set_disable_folding", 2586408642, Nil, main.p_object, disable);  }  // 95
is_folding_disabled :: (main: *TreeItem) -> bool { call_ret := cast(*bool) sys_call("TreeItem", "is_folding_disabled", 36873697, bool, main.p_object); return call_ret.*; }  // 96
create_child :: (main: *TreeItem) -> *TreeItem { call_ret := cast(*TreeItem) sys_call("TreeItem", "create_child", 954243986, TreeItem, main.p_object); return call_ret; }  // 97
add_child :: (main: *TreeItem, child: TreeItem) { sys_call("TreeItem", "add_child", 1819951137, Nil, main.p_object, child);  }  // 98
remove_child :: (main: *TreeItem, child: TreeItem) { sys_call("TreeItem", "remove_child", 1819951137, Nil, main.p_object, child);  }  // 99
get_tree :: (main: *TreeItem) -> *Tree { call_ret := cast(*Tree) sys_call("TreeItem", "get_tree", 2243340556, Tree, main.p_object); return call_ret; }  // 100
get_next :: (main: *TreeItem) -> *TreeItem { call_ret := cast(*TreeItem) sys_call("TreeItem", "get_next", 1514277247, TreeItem, main.p_object); return call_ret; }  // 101
get_prev :: (main: *TreeItem) -> *TreeItem { call_ret := cast(*TreeItem) sys_call("TreeItem", "get_prev", 2768121250, TreeItem, main.p_object); return call_ret; }  // 102
get_parent :: (main: *TreeItem) -> *TreeItem { call_ret := cast(*TreeItem) sys_call("TreeItem", "get_parent", 1514277247, TreeItem, main.p_object); return call_ret; }  // 103
get_first_child :: (main: *TreeItem) -> *TreeItem { call_ret := cast(*TreeItem) sys_call("TreeItem", "get_first_child", 1514277247, TreeItem, main.p_object); return call_ret; }  // 104
get_next_in_tree :: (main: *TreeItem) -> *TreeItem { call_ret := cast(*TreeItem) sys_call("TreeItem", "get_next_in_tree", 1666920593, TreeItem, main.p_object); return call_ret; }  // 105
get_prev_in_tree :: (main: *TreeItem) -> *TreeItem { call_ret := cast(*TreeItem) sys_call("TreeItem", "get_prev_in_tree", 1666920593, TreeItem, main.p_object); return call_ret; }  // 106
get_next_visible :: (main: *TreeItem) -> *TreeItem { call_ret := cast(*TreeItem) sys_call("TreeItem", "get_next_visible", 1666920593, TreeItem, main.p_object); return call_ret; }  // 107
get_prev_visible :: (main: *TreeItem) -> *TreeItem { call_ret := cast(*TreeItem) sys_call("TreeItem", "get_prev_visible", 1666920593, TreeItem, main.p_object); return call_ret; }  // 108
get_child :: (main: *TreeItem, index: int) -> *TreeItem { call_ret := cast(*TreeItem) sys_call("TreeItem", "get_child", 306700752, TreeItem, main.p_object, index); return call_ret; }  // 109
get_child_count :: (main: *TreeItem) -> int { call_ret := cast(*int) sys_call("TreeItem", "get_child_count", 2455072627, int, main.p_object); return call_ret.*; }  // 110
get_children :: (main: *TreeItem) -> [] TreeItem { call_ret := cast(*[] TreeItem) sys_call("TreeItem", "get_children", 2915620761, [] TreeItem, main.p_object); return call_ret.*; }  // 111
get_index :: (main: *TreeItem) -> int { call_ret := cast(*int) sys_call("TreeItem", "get_index", 2455072627, int, main.p_object); return call_ret.*; }  // 112
move_before :: (main: *TreeItem, item: TreeItem) { sys_call("TreeItem", "move_before", 1819951137, Nil, main.p_object, item);  }  // 113
move_after :: (main: *TreeItem, item: TreeItem) { sys_call("TreeItem", "move_after", 1819951137, Nil, main.p_object, item);  }  // 114
call_recursive :: (main: *TreeItem, method: string) { sys_call("TreeItem", "call_recursive", 2866548813, Nil, main.p_object, method);  }  // 115


set_radius :: (main: *TubeTrailMesh, radius: float) { sys_call("TubeTrailMesh", "set_radius", 373806689, Nil, main.p_object, radius);  }  // 0
get_radius :: (main: *TubeTrailMesh) -> float { call_ret := cast(*float) sys_call("TubeTrailMesh", "get_radius", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_radial_steps :: (main: *TubeTrailMesh, radial_steps: int) { sys_call("TubeTrailMesh", "set_radial_steps", 1286410249, Nil, main.p_object, radial_steps);  }  // 2
get_radial_steps :: (main: *TubeTrailMesh) -> int { call_ret := cast(*int) sys_call("TubeTrailMesh", "get_radial_steps", 3905245786, int, main.p_object); return call_ret.*; }  // 3
set_sections :: (main: *TubeTrailMesh, sections: int) { sys_call("TubeTrailMesh", "set_sections", 1286410249, Nil, main.p_object, sections);  }  // 4
get_sections :: (main: *TubeTrailMesh) -> int { call_ret := cast(*int) sys_call("TubeTrailMesh", "get_sections", 3905245786, int, main.p_object); return call_ret.*; }  // 5
set_section_length :: (main: *TubeTrailMesh, section_length: float) { sys_call("TubeTrailMesh", "set_section_length", 373806689, Nil, main.p_object, section_length);  }  // 6
get_section_length :: (main: *TubeTrailMesh) -> float { call_ret := cast(*float) sys_call("TubeTrailMesh", "get_section_length", 1740695150, float, main.p_object); return call_ret.*; }  // 7
set_section_rings :: (main: *TubeTrailMesh, section_rings: int) { sys_call("TubeTrailMesh", "set_section_rings", 1286410249, Nil, main.p_object, section_rings);  }  // 8
get_section_rings :: (main: *TubeTrailMesh) -> int { call_ret := cast(*int) sys_call("TubeTrailMesh", "get_section_rings", 3905245786, int, main.p_object); return call_ret.*; }  // 9
set_cap_top :: (main: *TubeTrailMesh, cap_top: bool) { sys_call("TubeTrailMesh", "set_cap_top", 2586408642, Nil, main.p_object, cap_top);  }  // 10
is_cap_top :: (main: *TubeTrailMesh) -> bool { call_ret := cast(*bool) sys_call("TubeTrailMesh", "is_cap_top", 36873697, bool, main.p_object); return call_ret.*; }  // 11
set_cap_bottom :: (main: *TubeTrailMesh, cap_bottom: bool) { sys_call("TubeTrailMesh", "set_cap_bottom", 2586408642, Nil, main.p_object, cap_bottom);  }  // 12
is_cap_bottom :: (main: *TubeTrailMesh) -> bool { call_ret := cast(*bool) sys_call("TubeTrailMesh", "is_cap_bottom", 36873697, bool, main.p_object); return call_ret.*; }  // 13
set_curve :: (main: *TubeTrailMesh, curve: Curve) { sys_call("TubeTrailMesh", "set_curve", 270443179, Nil, main.p_object, curve);  }  // 14
get_curve :: (main: *TubeTrailMesh) -> *Curve { call_ret := cast(*Curve) sys_call("TubeTrailMesh", "get_curve", 2460114913, Curve, main.p_object); return call_ret; }  // 15

tween_property :: (main: *Tween, object: Object, property: string, final_val: Variant, duration: float) -> *PropertyTweener { call_ret := cast(*PropertyTweener) sys_call("Tween", "tween_property", 4049770449, PropertyTweener, main.p_object, object, property, final_val, duration); return call_ret; }  // 0
tween_interval :: (main: *Tween, time: float) -> *IntervalTweener { call_ret := cast(*IntervalTweener) sys_call("Tween", "tween_interval", 413360199, IntervalTweener, main.p_object, time); return call_ret; }  // 1
tween_callback :: (main: *Tween, callback: Callable) -> *CallbackTweener { call_ret := cast(*CallbackTweener) sys_call("Tween", "tween_callback", 1540176488, CallbackTweener, main.p_object, callback); return call_ret; }  // 2
tween_method :: (main: *Tween, method: Callable, from: Variant, to: Variant, duration: float) -> *MethodTweener { call_ret := cast(*MethodTweener) sys_call("Tween", "tween_method", 2337877153, MethodTweener, main.p_object, method, from, to, duration); return call_ret; }  // 3
tween_subtween :: (main: *Tween, subtween: Tween) -> *SubtweenTweener { call_ret := cast(*SubtweenTweener) sys_call("Tween", "tween_subtween", 1567358477, SubtweenTweener, main.p_object, subtween); return call_ret; }  // 4
custom_step :: (main: *Tween, delta: float) -> bool { call_ret := cast(*bool) sys_call("Tween", "custom_step", 330693286, bool, main.p_object, delta); return call_ret.*; }  // 5
stop :: (main: *Tween) { sys_call("Tween", "stop", 3218959716, Nil, main.p_object);  }  // 6
pause :: (main: *Tween) { sys_call("Tween", "pause", 3218959716, Nil, main.p_object);  }  // 7
play :: (main: *Tween) { sys_call("Tween", "play", 3218959716, Nil, main.p_object);  }  // 8
kill :: (main: *Tween) { sys_call("Tween", "kill", 3218959716, Nil, main.p_object);  }  // 9
get_total_elapsed_time :: (main: *Tween) -> float { call_ret := cast(*float) sys_call("Tween", "get_total_elapsed_time", 1740695150, float, main.p_object); return call_ret.*; }  // 10
is_running :: (main: *Tween) -> bool { call_ret := cast(*bool) sys_call("Tween", "is_running", 2240911060, bool, main.p_object); return call_ret.*; }  // 11
is_valid :: (main: *Tween) -> bool { call_ret := cast(*bool) sys_call("Tween", "is_valid", 2240911060, bool, main.p_object); return call_ret.*; }  // 12
bind_node :: (main: *Tween, node: Node) -> *Tween { call_ret := cast(*Tween) sys_call("Tween", "bind_node", 2946786331, Tween, main.p_object, node); return call_ret; }  // 13
set_process_mode :: (main: *Tween, mode: Tween.TweenProcessMode) -> *Tween { call_ret := cast(*Tween) sys_call("Tween", "set_process_mode", 855258840, Tween, main.p_object, mode); return call_ret; }  // 14
set_pause_mode :: (main: *Tween, mode: Tween.TweenPauseMode) -> *Tween { call_ret := cast(*Tween) sys_call("Tween", "set_pause_mode", 3363368837, Tween, main.p_object, mode); return call_ret; }  // 15
set_ignore_time_scale :: (main: *Tween) -> *Tween { call_ret := cast(*Tween) sys_call("Tween", "set_ignore_time_scale", 1942052223, Tween, main.p_object); return call_ret; }  // 16
set_parallel :: (main: *Tween) -> *Tween { call_ret := cast(*Tween) sys_call("Tween", "set_parallel", 1942052223, Tween, main.p_object); return call_ret; }  // 17
set_loops :: (main: *Tween) -> *Tween { call_ret := cast(*Tween) sys_call("Tween", "set_loops", 2670836414, Tween, main.p_object); return call_ret; }  // 18
get_loops_left :: (main: *Tween) -> int { call_ret := cast(*int) sys_call("Tween", "get_loops_left", 3905245786, int, main.p_object); return call_ret.*; }  // 19
set_speed_scale :: (main: *Tween, speed: float) -> *Tween { call_ret := cast(*Tween) sys_call("Tween", "set_speed_scale", 3961971106, Tween, main.p_object, speed); return call_ret; }  // 20
set_trans :: (main: *Tween, trans: Tween.TransitionType) -> *Tween { call_ret := cast(*Tween) sys_call("Tween", "set_trans", 3965963875, Tween, main.p_object, trans); return call_ret; }  // 21
set_ease :: (main: *Tween, ease: Tween.EaseType) -> *Tween { call_ret := cast(*Tween) sys_call("Tween", "set_ease", 1208117252, Tween, main.p_object, ease); return call_ret; }  // 22
parallel :: (main: *Tween) -> *Tween { call_ret := cast(*Tween) sys_call("Tween", "parallel", 3426978995, Tween, main.p_object); return call_ret; }  // 23
chain :: (main: *Tween) -> *Tween { call_ret := cast(*Tween) sys_call("Tween", "chain", 3426978995, Tween, main.p_object); return call_ret; }  // 24
interpolate_value :: (main: *Tween, initial_value: Variant, delta_value: Variant, elapsed_time: float, duration: float, trans_type: Tween.TransitionType, ease_type: Tween.EaseType) -> Variant { call_ret := cast(*Variant) sys_call("Tween", "interpolate_value", 3452526450, Variant, main.p_object, initial_value, delta_value, elapsed_time, duration, trans_type, ease_type); return call_ret.*; }  // 25


listen :: (main: *UDPServer, port: int) -> Error { call_ret := cast(*Error) sys_call("UDPServer", "listen", 3167955072, Error, main.p_object, port); return call_ret.*; }  // 0
poll :: (main: *UDPServer) -> Error { call_ret := cast(*Error) sys_call("UDPServer", "poll", 166280745, Error, main.p_object); return call_ret.*; }  // 1
is_connection_available :: (main: *UDPServer) -> bool { call_ret := cast(*bool) sys_call("UDPServer", "is_connection_available", 36873697, bool, main.p_object); return call_ret.*; }  // 2
get_local_port :: (main: *UDPServer) -> int { call_ret := cast(*int) sys_call("UDPServer", "get_local_port", 3905245786, int, main.p_object); return call_ret.*; }  // 3
is_listening :: (main: *UDPServer) -> bool { call_ret := cast(*bool) sys_call("UDPServer", "is_listening", 36873697, bool, main.p_object); return call_ret.*; }  // 4
take_connection :: (main: *UDPServer) -> *PacketPeerUDP { call_ret := cast(*PacketPeerUDP) sys_call("UDPServer", "take_connection", 808734560, PacketPeerUDP, main.p_object); return call_ret; }  // 5
stop :: (main: *UDPServer) { sys_call("UDPServer", "stop", 3218959716, Nil, main.p_object);  }  // 6
set_max_pending_connections :: (main: *UDPServer, max_pending_connections: int) { sys_call("UDPServer", "set_max_pending_connections", 1286410249, Nil, main.p_object, max_pending_connections);  }  // 7
get_max_pending_connections :: (main: *UDPServer) -> int { call_ret := cast(*int) sys_call("UDPServer", "get_max_pending_connections", 3905245786, int, main.p_object); return call_ret.*; }  // 8

get_device_count :: (main: *UPNP) -> int { call_ret := cast(*int) sys_call("UPNP", "get_device_count", 3905245786, int, main.p_object); return call_ret.*; }  // 0
get_device :: (main: *UPNP, index: int) -> *UPNPDevice { call_ret := cast(*UPNPDevice) sys_call("UPNP", "get_device", 2193290270, UPNPDevice, main.p_object, index); return call_ret; }  // 1
add_device :: (main: *UPNP, device: UPNPDevice) { sys_call("UPNP", "add_device", 986715920, Nil, main.p_object, device);  }  // 2
set_device :: (main: *UPNP, index: int, device: UPNPDevice) { sys_call("UPNP", "set_device", 3015133723, Nil, main.p_object, index, device);  }  // 3
remove_device :: (main: *UPNP, index: int) { sys_call("UPNP", "remove_device", 1286410249, Nil, main.p_object, index);  }  // 4
clear_devices :: (main: *UPNP) { sys_call("UPNP", "clear_devices", 3218959716, Nil, main.p_object);  }  // 5
get_gateway :: (main: *UPNP) -> *UPNPDevice { call_ret := cast(*UPNPDevice) sys_call("UPNP", "get_gateway", 2276800779, UPNPDevice, main.p_object); return call_ret; }  // 6
discover :: (main: *UPNP) -> int { call_ret := cast(*int) sys_call("UPNP", "discover", 1575334765, int, main.p_object); return call_ret.*; }  // 7
query_external_address :: (main: *UPNP) -> gstring { call_ret := cast(*gstring) sys_call("UPNP", "query_external_address", 201670096, gstring, main.p_object); return call_ret.*; }  // 8
add_port_mapping :: (main: *UPNP, port: int) -> int { call_ret := cast(*int) sys_call("UPNP", "add_port_mapping", 818314583, int, main.p_object, port); return call_ret.*; }  // 9
delete_port_mapping :: (main: *UPNP, port: int) -> int { call_ret := cast(*int) sys_call("UPNP", "delete_port_mapping", 3444187325, int, main.p_object, port); return call_ret.*; }  // 10
set_discover_multicast_if :: (main: *UPNP, m_if: string) { sys_call("UPNP", "set_discover_multicast_if", 83702148, Nil, main.p_object, m_if);  }  // 11
get_discover_multicast_if :: (main: *UPNP) -> gstring { call_ret := cast(*gstring) sys_call("UPNP", "get_discover_multicast_if", 201670096, gstring, main.p_object); return call_ret.*; }  // 12
set_discover_local_port :: (main: *UPNP, port: int) { sys_call("UPNP", "set_discover_local_port", 1286410249, Nil, main.p_object, port);  }  // 13
get_discover_local_port :: (main: *UPNP) -> int { call_ret := cast(*int) sys_call("UPNP", "get_discover_local_port", 3905245786, int, main.p_object); return call_ret.*; }  // 14
set_discover_ipv6 :: (main: *UPNP, ipv6: bool) { sys_call("UPNP", "set_discover_ipv6", 2586408642, Nil, main.p_object, ipv6);  }  // 15
is_discover_ipv6 :: (main: *UPNP) -> bool { call_ret := cast(*bool) sys_call("UPNP", "is_discover_ipv6", 36873697, bool, main.p_object); return call_ret.*; }  // 16

is_valid_gateway :: (main: *UPNPDevice) -> bool { call_ret := cast(*bool) sys_call("UPNPDevice", "is_valid_gateway", 36873697, bool, main.p_object); return call_ret.*; }  // 0
query_external_address :: (main: *UPNPDevice) -> gstring { call_ret := cast(*gstring) sys_call("UPNPDevice", "query_external_address", 201670096, gstring, main.p_object); return call_ret.*; }  // 1
add_port_mapping :: (main: *UPNPDevice, port: int) -> int { call_ret := cast(*int) sys_call("UPNPDevice", "add_port_mapping", 818314583, int, main.p_object, port); return call_ret.*; }  // 2
delete_port_mapping :: (main: *UPNPDevice, port: int) -> int { call_ret := cast(*int) sys_call("UPNPDevice", "delete_port_mapping", 3444187325, int, main.p_object, port); return call_ret.*; }  // 3
set_description_url :: (main: *UPNPDevice, url: string) { sys_call("UPNPDevice", "set_description_url", 83702148, Nil, main.p_object, url);  }  // 4
get_description_url :: (main: *UPNPDevice) -> gstring { call_ret := cast(*gstring) sys_call("UPNPDevice", "get_description_url", 201670096, gstring, main.p_object); return call_ret.*; }  // 5
set_service_type :: (main: *UPNPDevice, type: string) { sys_call("UPNPDevice", "set_service_type", 83702148, Nil, main.p_object, type);  }  // 6
get_service_type :: (main: *UPNPDevice) -> gstring { call_ret := cast(*gstring) sys_call("UPNPDevice", "get_service_type", 201670096, gstring, main.p_object); return call_ret.*; }  // 7
set_igd_control_url :: (main: *UPNPDevice, url: string) { sys_call("UPNPDevice", "set_igd_control_url", 83702148, Nil, main.p_object, url);  }  // 8
get_igd_control_url :: (main: *UPNPDevice) -> gstring { call_ret := cast(*gstring) sys_call("UPNPDevice", "get_igd_control_url", 201670096, gstring, main.p_object); return call_ret.*; }  // 9
set_igd_service_type :: (main: *UPNPDevice, type: string) { sys_call("UPNPDevice", "set_igd_service_type", 83702148, Nil, main.p_object, type);  }  // 10
get_igd_service_type :: (main: *UPNPDevice) -> gstring { call_ret := cast(*gstring) sys_call("UPNPDevice", "get_igd_service_type", 201670096, gstring, main.p_object); return call_ret.*; }  // 11
set_igd_our_addr :: (main: *UPNPDevice, addr: string) { sys_call("UPNPDevice", "set_igd_our_addr", 83702148, Nil, main.p_object, addr);  }  // 12
get_igd_our_addr :: (main: *UPNPDevice) -> gstring { call_ret := cast(*gstring) sys_call("UPNPDevice", "get_igd_our_addr", 201670096, gstring, main.p_object); return call_ret.*; }  // 13
set_igd_status :: (main: *UPNPDevice, status: UPNPDevice.IGDStatus) { sys_call("UPNPDevice", "set_igd_status", 519504122, Nil, main.p_object, status);  }  // 14
get_igd_status :: (main: *UPNPDevice) -> UPNPDevice.IGDStatus { call_ret := cast(*UPNPDevice.IGDStatus) sys_call("UPNPDevice", "get_igd_status", 180887011, UPNPDevice.IGDStatus, main.p_object); return call_ret.*; }  // 15

create_action :: (main: *UndoRedo, name: string) { sys_call("UndoRedo", "create_action", 3171901514, Nil, main.p_object, name);  }  // 0
commit_action :: (main: *UndoRedo) { sys_call("UndoRedo", "commit_action", 3216645846, Nil, main.p_object);  }  // 1
is_committing_action :: (main: *UndoRedo) -> bool { call_ret := cast(*bool) sys_call("UndoRedo", "is_committing_action", 36873697, bool, main.p_object); return call_ret.*; }  // 2
add_do_method :: (main: *UndoRedo, callable: Callable) { sys_call("UndoRedo", "add_do_method", 1611583062, Nil, main.p_object, callable);  }  // 3
add_undo_method :: (main: *UndoRedo, callable: Callable) { sys_call("UndoRedo", "add_undo_method", 1611583062, Nil, main.p_object, callable);  }  // 4
add_do_property :: (main: *UndoRedo, object: Object, property: string, value: Variant) { sys_call("UndoRedo", "add_do_property", 1017172818, Nil, main.p_object, object, property, value);  }  // 5
add_undo_property :: (main: *UndoRedo, object: Object, property: string, value: Variant) { sys_call("UndoRedo", "add_undo_property", 1017172818, Nil, main.p_object, object, property, value);  }  // 6
add_do_reference :: (main: *UndoRedo, object: Object) { sys_call("UndoRedo", "add_do_reference", 3975164845, Nil, main.p_object, object);  }  // 7
add_undo_reference :: (main: *UndoRedo, object: Object) { sys_call("UndoRedo", "add_undo_reference", 3975164845, Nil, main.p_object, object);  }  // 8
start_force_keep_in_merge_ends :: (main: *UndoRedo) { sys_call("UndoRedo", "start_force_keep_in_merge_ends", 3218959716, Nil, main.p_object);  }  // 9
end_force_keep_in_merge_ends :: (main: *UndoRedo) { sys_call("UndoRedo", "end_force_keep_in_merge_ends", 3218959716, Nil, main.p_object);  }  // 10
get_history_count :: (main: *UndoRedo) -> int { call_ret := cast(*int) sys_call("UndoRedo", "get_history_count", 2455072627, int, main.p_object); return call_ret.*; }  // 11
get_current_action :: (main: *UndoRedo) -> int { call_ret := cast(*int) sys_call("UndoRedo", "get_current_action", 2455072627, int, main.p_object); return call_ret.*; }  // 12
get_action_name :: (main: *UndoRedo, id: int) -> gstring { call_ret := cast(*gstring) sys_call("UndoRedo", "get_action_name", 990163283, gstring, main.p_object, id); return call_ret.*; }  // 13
clear_history :: (main: *UndoRedo) { sys_call("UndoRedo", "clear_history", 3216645846, Nil, main.p_object);  }  // 14
get_current_action_name :: (main: *UndoRedo) -> gstring { call_ret := cast(*gstring) sys_call("UndoRedo", "get_current_action_name", 201670096, gstring, main.p_object); return call_ret.*; }  // 15
has_undo :: (main: *UndoRedo) -> bool { call_ret := cast(*bool) sys_call("UndoRedo", "has_undo", 36873697, bool, main.p_object); return call_ret.*; }  // 16
has_redo :: (main: *UndoRedo) -> bool { call_ret := cast(*bool) sys_call("UndoRedo", "has_redo", 36873697, bool, main.p_object); return call_ret.*; }  // 17
get_version :: (main: *UndoRedo) -> int { call_ret := cast(*int) sys_call("UndoRedo", "get_version", 3905245786, int, main.p_object); return call_ret.*; }  // 18
set_max_steps :: (main: *UndoRedo, max_steps: int) { sys_call("UndoRedo", "set_max_steps", 1286410249, Nil, main.p_object, max_steps);  }  // 19
get_max_steps :: (main: *UndoRedo) -> int { call_ret := cast(*int) sys_call("UndoRedo", "get_max_steps", 3905245786, int, main.p_object); return call_ret.*; }  // 20
redo :: (main: *UndoRedo) -> bool { call_ret := cast(*bool) sys_call("UndoRedo", "redo", 2240911060, bool, main.p_object); return call_ret.*; }  // 21
undo :: (main: *UndoRedo) -> bool { call_ret := cast(*bool) sys_call("UndoRedo", "undo", 2240911060, bool, main.p_object); return call_ret.*; }  // 22

get_cache :: (main: *UniformSetCacheRD, shader: RID, set: int, uniforms: [] RDUniform) -> RID { call_ret := cast(*RID) sys_call("UniformSetCacheRD", "get_cache", 658571723, RID, main.p_object, shader, set, uniforms); return call_ret.*; }  // 0







set_engine_force :: (main: *VehicleBody3D, engine_force: float) { sys_call("VehicleBody3D", "set_engine_force", 373806689, Nil, main.p_object, engine_force);  }  // 0
get_engine_force :: (main: *VehicleBody3D) -> float { call_ret := cast(*float) sys_call("VehicleBody3D", "get_engine_force", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_brake :: (main: *VehicleBody3D, brake: float) { sys_call("VehicleBody3D", "set_brake", 373806689, Nil, main.p_object, brake);  }  // 2
get_brake :: (main: *VehicleBody3D) -> float { call_ret := cast(*float) sys_call("VehicleBody3D", "get_brake", 1740695150, float, main.p_object); return call_ret.*; }  // 3
set_steering :: (main: *VehicleBody3D, steering: float) { sys_call("VehicleBody3D", "set_steering", 373806689, Nil, main.p_object, steering);  }  // 4
get_steering :: (main: *VehicleBody3D) -> float { call_ret := cast(*float) sys_call("VehicleBody3D", "get_steering", 1740695150, float, main.p_object); return call_ret.*; }  // 5

set_radius :: (main: *VehicleWheel3D, length: float) { sys_call("VehicleWheel3D", "set_radius", 373806689, Nil, main.p_object, length);  }  // 0
get_radius :: (main: *VehicleWheel3D) -> float { call_ret := cast(*float) sys_call("VehicleWheel3D", "get_radius", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_suspension_rest_length :: (main: *VehicleWheel3D, length: float) { sys_call("VehicleWheel3D", "set_suspension_rest_length", 373806689, Nil, main.p_object, length);  }  // 2
get_suspension_rest_length :: (main: *VehicleWheel3D) -> float { call_ret := cast(*float) sys_call("VehicleWheel3D", "get_suspension_rest_length", 1740695150, float, main.p_object); return call_ret.*; }  // 3
set_suspension_travel :: (main: *VehicleWheel3D, length: float) { sys_call("VehicleWheel3D", "set_suspension_travel", 373806689, Nil, main.p_object, length);  }  // 4
get_suspension_travel :: (main: *VehicleWheel3D) -> float { call_ret := cast(*float) sys_call("VehicleWheel3D", "get_suspension_travel", 1740695150, float, main.p_object); return call_ret.*; }  // 5
set_suspension_stiffness :: (main: *VehicleWheel3D, length: float) { sys_call("VehicleWheel3D", "set_suspension_stiffness", 373806689, Nil, main.p_object, length);  }  // 6
get_suspension_stiffness :: (main: *VehicleWheel3D) -> float { call_ret := cast(*float) sys_call("VehicleWheel3D", "get_suspension_stiffness", 1740695150, float, main.p_object); return call_ret.*; }  // 7
set_suspension_max_force :: (main: *VehicleWheel3D, length: float) { sys_call("VehicleWheel3D", "set_suspension_max_force", 373806689, Nil, main.p_object, length);  }  // 8
get_suspension_max_force :: (main: *VehicleWheel3D) -> float { call_ret := cast(*float) sys_call("VehicleWheel3D", "get_suspension_max_force", 1740695150, float, main.p_object); return call_ret.*; }  // 9
set_damping_compression :: (main: *VehicleWheel3D, length: float) { sys_call("VehicleWheel3D", "set_damping_compression", 373806689, Nil, main.p_object, length);  }  // 10
get_damping_compression :: (main: *VehicleWheel3D) -> float { call_ret := cast(*float) sys_call("VehicleWheel3D", "get_damping_compression", 1740695150, float, main.p_object); return call_ret.*; }  // 11
set_damping_relaxation :: (main: *VehicleWheel3D, length: float) { sys_call("VehicleWheel3D", "set_damping_relaxation", 373806689, Nil, main.p_object, length);  }  // 12
get_damping_relaxation :: (main: *VehicleWheel3D) -> float { call_ret := cast(*float) sys_call("VehicleWheel3D", "get_damping_relaxation", 1740695150, float, main.p_object); return call_ret.*; }  // 13
set_use_as_traction :: (main: *VehicleWheel3D, enable: bool) { sys_call("VehicleWheel3D", "set_use_as_traction", 2586408642, Nil, main.p_object, enable);  }  // 14
is_used_as_traction :: (main: *VehicleWheel3D) -> bool { call_ret := cast(*bool) sys_call("VehicleWheel3D", "is_used_as_traction", 36873697, bool, main.p_object); return call_ret.*; }  // 15
set_use_as_steering :: (main: *VehicleWheel3D, enable: bool) { sys_call("VehicleWheel3D", "set_use_as_steering", 2586408642, Nil, main.p_object, enable);  }  // 16
is_used_as_steering :: (main: *VehicleWheel3D) -> bool { call_ret := cast(*bool) sys_call("VehicleWheel3D", "is_used_as_steering", 36873697, bool, main.p_object); return call_ret.*; }  // 17
set_friction_slip :: (main: *VehicleWheel3D, length: float) { sys_call("VehicleWheel3D", "set_friction_slip", 373806689, Nil, main.p_object, length);  }  // 18
get_friction_slip :: (main: *VehicleWheel3D) -> float { call_ret := cast(*float) sys_call("VehicleWheel3D", "get_friction_slip", 1740695150, float, main.p_object); return call_ret.*; }  // 19
is_in_contact :: (main: *VehicleWheel3D) -> bool { call_ret := cast(*bool) sys_call("VehicleWheel3D", "is_in_contact", 36873697, bool, main.p_object); return call_ret.*; }  // 20
get_contact_body :: (main: *VehicleWheel3D) -> *Node3D { call_ret := cast(*Node3D) sys_call("VehicleWheel3D", "get_contact_body", 151077316, Node3D, main.p_object); return call_ret; }  // 21
get_contact_point :: (main: *VehicleWheel3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("VehicleWheel3D", "get_contact_point", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 22
get_contact_normal :: (main: *VehicleWheel3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("VehicleWheel3D", "get_contact_normal", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 23
set_roll_influence :: (main: *VehicleWheel3D, roll_influence: float) { sys_call("VehicleWheel3D", "set_roll_influence", 373806689, Nil, main.p_object, roll_influence);  }  // 24
get_roll_influence :: (main: *VehicleWheel3D) -> float { call_ret := cast(*float) sys_call("VehicleWheel3D", "get_roll_influence", 1740695150, float, main.p_object); return call_ret.*; }  // 25
get_skidinfo :: (main: *VehicleWheel3D) -> float { call_ret := cast(*float) sys_call("VehicleWheel3D", "get_skidinfo", 1740695150, float, main.p_object); return call_ret.*; }  // 26
get_rpm :: (main: *VehicleWheel3D) -> float { call_ret := cast(*float) sys_call("VehicleWheel3D", "get_rpm", 1740695150, float, main.p_object); return call_ret.*; }  // 27
set_engine_force :: (main: *VehicleWheel3D, engine_force: float) { sys_call("VehicleWheel3D", "set_engine_force", 373806689, Nil, main.p_object, engine_force);  }  // 28
get_engine_force :: (main: *VehicleWheel3D) -> float { call_ret := cast(*float) sys_call("VehicleWheel3D", "get_engine_force", 1740695150, float, main.p_object); return call_ret.*; }  // 29
set_brake :: (main: *VehicleWheel3D, brake: float) { sys_call("VehicleWheel3D", "set_brake", 373806689, Nil, main.p_object, brake);  }  // 30
get_brake :: (main: *VehicleWheel3D) -> float { call_ret := cast(*float) sys_call("VehicleWheel3D", "get_brake", 1740695150, float, main.p_object); return call_ret.*; }  // 31
set_steering :: (main: *VehicleWheel3D, steering: float) { sys_call("VehicleWheel3D", "set_steering", 373806689, Nil, main.p_object, steering);  }  // 32
get_steering :: (main: *VehicleWheel3D) -> float { call_ret := cast(*float) sys_call("VehicleWheel3D", "get_steering", 1740695150, float, main.p_object); return call_ret.*; }  // 33

set_file :: (main: *VideoStream, file: string) { sys_call("VideoStream", "set_file", 83702148, Nil, main.p_object, file);  }  // 1
get_file :: (main: *VideoStream) -> gstring { call_ret := cast(*gstring) sys_call("VideoStream", "get_file", 2841200299, gstring, main.p_object); return call_ret.*; }  // 2

mix_audio :: (main: *VideoStreamPlayback, num_frames: int) -> int { call_ret := cast(*int) sys_call("VideoStreamPlayback", "mix_audio", 93876830, int, main.p_object, num_frames); return call_ret.*; }  // 13

set_stream :: (main: *VideoStreamPlayer, stream: VideoStream) { sys_call("VideoStreamPlayer", "set_stream", 2317102564, Nil, main.p_object, stream);  }  // 0
get_stream :: (main: *VideoStreamPlayer) -> *VideoStream { call_ret := cast(*VideoStream) sys_call("VideoStreamPlayer", "get_stream", 438621487, VideoStream, main.p_object); return call_ret; }  // 1
play :: (main: *VideoStreamPlayer) { sys_call("VideoStreamPlayer", "play", 3218959716, Nil, main.p_object);  }  // 2
stop :: (main: *VideoStreamPlayer) { sys_call("VideoStreamPlayer", "stop", 3218959716, Nil, main.p_object);  }  // 3
is_playing :: (main: *VideoStreamPlayer) -> bool { call_ret := cast(*bool) sys_call("VideoStreamPlayer", "is_playing", 36873697, bool, main.p_object); return call_ret.*; }  // 4
set_paused :: (main: *VideoStreamPlayer, paused: bool) { sys_call("VideoStreamPlayer", "set_paused", 2586408642, Nil, main.p_object, paused);  }  // 5
is_paused :: (main: *VideoStreamPlayer) -> bool { call_ret := cast(*bool) sys_call("VideoStreamPlayer", "is_paused", 36873697, bool, main.p_object); return call_ret.*; }  // 6
set_loop :: (main: *VideoStreamPlayer, loop: bool) { sys_call("VideoStreamPlayer", "set_loop", 2586408642, Nil, main.p_object, loop);  }  // 7
has_loop :: (main: *VideoStreamPlayer) -> bool { call_ret := cast(*bool) sys_call("VideoStreamPlayer", "has_loop", 36873697, bool, main.p_object); return call_ret.*; }  // 8
set_volume :: (main: *VideoStreamPlayer, volume: float) { sys_call("VideoStreamPlayer", "set_volume", 373806689, Nil, main.p_object, volume);  }  // 9
get_volume :: (main: *VideoStreamPlayer) -> float { call_ret := cast(*float) sys_call("VideoStreamPlayer", "get_volume", 1740695150, float, main.p_object); return call_ret.*; }  // 10
set_volume_db :: (main: *VideoStreamPlayer, db: float) { sys_call("VideoStreamPlayer", "set_volume_db", 373806689, Nil, main.p_object, db);  }  // 11
get_volume_db :: (main: *VideoStreamPlayer) -> float { call_ret := cast(*float) sys_call("VideoStreamPlayer", "get_volume_db", 1740695150, float, main.p_object); return call_ret.*; }  // 12
set_audio_track :: (main: *VideoStreamPlayer, track: int) { sys_call("VideoStreamPlayer", "set_audio_track", 1286410249, Nil, main.p_object, track);  }  // 13
get_audio_track :: (main: *VideoStreamPlayer) -> int { call_ret := cast(*int) sys_call("VideoStreamPlayer", "get_audio_track", 3905245786, int, main.p_object); return call_ret.*; }  // 14
get_stream_name :: (main: *VideoStreamPlayer) -> gstring { call_ret := cast(*gstring) sys_call("VideoStreamPlayer", "get_stream_name", 201670096, gstring, main.p_object); return call_ret.*; }  // 15
get_stream_length :: (main: *VideoStreamPlayer) -> float { call_ret := cast(*float) sys_call("VideoStreamPlayer", "get_stream_length", 1740695150, float, main.p_object); return call_ret.*; }  // 16
set_stream_position :: (main: *VideoStreamPlayer, position: float) { sys_call("VideoStreamPlayer", "set_stream_position", 373806689, Nil, main.p_object, position);  }  // 17
get_stream_position :: (main: *VideoStreamPlayer) -> float { call_ret := cast(*float) sys_call("VideoStreamPlayer", "get_stream_position", 1740695150, float, main.p_object); return call_ret.*; }  // 18
set_autoplay :: (main: *VideoStreamPlayer, enabled: bool) { sys_call("VideoStreamPlayer", "set_autoplay", 2586408642, Nil, main.p_object, enabled);  }  // 19
has_autoplay :: (main: *VideoStreamPlayer) -> bool { call_ret := cast(*bool) sys_call("VideoStreamPlayer", "has_autoplay", 36873697, bool, main.p_object); return call_ret.*; }  // 20
set_expand :: (main: *VideoStreamPlayer, enable: bool) { sys_call("VideoStreamPlayer", "set_expand", 2586408642, Nil, main.p_object, enable);  }  // 21
has_expand :: (main: *VideoStreamPlayer) -> bool { call_ret := cast(*bool) sys_call("VideoStreamPlayer", "has_expand", 36873697, bool, main.p_object); return call_ret.*; }  // 22
set_buffering_msec :: (main: *VideoStreamPlayer, msec: int) { sys_call("VideoStreamPlayer", "set_buffering_msec", 1286410249, Nil, main.p_object, msec);  }  // 23
get_buffering_msec :: (main: *VideoStreamPlayer) -> int { call_ret := cast(*int) sys_call("VideoStreamPlayer", "get_buffering_msec", 3905245786, int, main.p_object); return call_ret.*; }  // 24
set_bus :: (main: *VideoStreamPlayer, bus: string) { sys_call("VideoStreamPlayer", "set_bus", 3304788590, Nil, main.p_object, bus);  }  // 25
get_bus :: (main: *VideoStreamPlayer) -> StringName { call_ret := cast(*StringName) sys_call("VideoStreamPlayer", "get_bus", 2002593661, StringName, main.p_object); return call_ret.*; }  // 26
get_video_texture :: (main: *VideoStreamPlayer) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("VideoStreamPlayer", "get_video_texture", 3635182373, Texture2D, main.p_object); return call_ret; }  // 27


set_world_2d :: (main: *Viewport, world_2d: World2D) { sys_call("Viewport", "set_world_2d", 2736080068, Nil, main.p_object, world_2d);  }  // 0
get_world_2d :: (main: *Viewport) -> *World2D { call_ret := cast(*World2D) sys_call("Viewport", "get_world_2d", 2339128592, World2D, main.p_object); return call_ret; }  // 1
find_world_2d :: (main: *Viewport) -> *World2D { call_ret := cast(*World2D) sys_call("Viewport", "find_world_2d", 2339128592, World2D, main.p_object); return call_ret; }  // 2
set_canvas_transform :: (main: *Viewport, xform: Transform2D) { sys_call("Viewport", "set_canvas_transform", 2761652528, Nil, main.p_object, xform);  }  // 3
get_canvas_transform :: (main: *Viewport) -> Transform2D { call_ret := cast(*Transform2D) sys_call("Viewport", "get_canvas_transform", 3814499831, Transform2D, main.p_object); return call_ret.*; }  // 4
set_global_canvas_transform :: (main: *Viewport, xform: Transform2D) { sys_call("Viewport", "set_global_canvas_transform", 2761652528, Nil, main.p_object, xform);  }  // 5
get_global_canvas_transform :: (main: *Viewport) -> Transform2D { call_ret := cast(*Transform2D) sys_call("Viewport", "get_global_canvas_transform", 3814499831, Transform2D, main.p_object); return call_ret.*; }  // 6
get_stretch_transform :: (main: *Viewport) -> Transform2D { call_ret := cast(*Transform2D) sys_call("Viewport", "get_stretch_transform", 3814499831, Transform2D, main.p_object); return call_ret.*; }  // 7
get_final_transform :: (main: *Viewport) -> Transform2D { call_ret := cast(*Transform2D) sys_call("Viewport", "get_final_transform", 3814499831, Transform2D, main.p_object); return call_ret.*; }  // 8
get_screen_transform :: (main: *Viewport) -> Transform2D { call_ret := cast(*Transform2D) sys_call("Viewport", "get_screen_transform", 3814499831, Transform2D, main.p_object); return call_ret.*; }  // 9
get_visible_rect :: (main: *Viewport) -> Rect2 { call_ret := cast(*Rect2) sys_call("Viewport", "get_visible_rect", 1639390495, Rect2, main.p_object); return call_ret.*; }  // 10
set_transparent_background :: (main: *Viewport, enable: bool) { sys_call("Viewport", "set_transparent_background", 2586408642, Nil, main.p_object, enable);  }  // 11
has_transparent_background :: (main: *Viewport) -> bool { call_ret := cast(*bool) sys_call("Viewport", "has_transparent_background", 36873697, bool, main.p_object); return call_ret.*; }  // 12
set_use_hdr_2d :: (main: *Viewport, enable: bool) { sys_call("Viewport", "set_use_hdr_2d", 2586408642, Nil, main.p_object, enable);  }  // 13
is_using_hdr_2d :: (main: *Viewport) -> bool { call_ret := cast(*bool) sys_call("Viewport", "is_using_hdr_2d", 36873697, bool, main.p_object); return call_ret.*; }  // 14
set_msaa_2d :: (main: *Viewport, msaa: Viewport.MSAA) { sys_call("Viewport", "set_msaa_2d", 3330258708, Nil, main.p_object, msaa);  }  // 15
get_msaa_2d :: (main: *Viewport) -> Viewport.MSAA { call_ret := cast(*Viewport.MSAA) sys_call("Viewport", "get_msaa_2d", 2542055527, Viewport.MSAA, main.p_object); return call_ret.*; }  // 16
set_msaa_3d :: (main: *Viewport, msaa: Viewport.MSAA) { sys_call("Viewport", "set_msaa_3d", 3330258708, Nil, main.p_object, msaa);  }  // 17
get_msaa_3d :: (main: *Viewport) -> Viewport.MSAA { call_ret := cast(*Viewport.MSAA) sys_call("Viewport", "get_msaa_3d", 2542055527, Viewport.MSAA, main.p_object); return call_ret.*; }  // 18
set_screen_space_aa :: (main: *Viewport, screen_space_aa: Viewport.ScreenSpaceAA) { sys_call("Viewport", "set_screen_space_aa", 3544169389, Nil, main.p_object, screen_space_aa);  }  // 19
get_screen_space_aa :: (main: *Viewport) -> Viewport.ScreenSpaceAA { call_ret := cast(*Viewport.ScreenSpaceAA) sys_call("Viewport", "get_screen_space_aa", 1390814124, Viewport.ScreenSpaceAA, main.p_object); return call_ret.*; }  // 20
set_use_taa :: (main: *Viewport, enable: bool) { sys_call("Viewport", "set_use_taa", 2586408642, Nil, main.p_object, enable);  }  // 21
is_using_taa :: (main: *Viewport) -> bool { call_ret := cast(*bool) sys_call("Viewport", "is_using_taa", 36873697, bool, main.p_object); return call_ret.*; }  // 22
set_use_debanding :: (main: *Viewport, enable: bool) { sys_call("Viewport", "set_use_debanding", 2586408642, Nil, main.p_object, enable);  }  // 23
is_using_debanding :: (main: *Viewport) -> bool { call_ret := cast(*bool) sys_call("Viewport", "is_using_debanding", 36873697, bool, main.p_object); return call_ret.*; }  // 24
set_use_occlusion_culling :: (main: *Viewport, enable: bool) { sys_call("Viewport", "set_use_occlusion_culling", 2586408642, Nil, main.p_object, enable);  }  // 25
is_using_occlusion_culling :: (main: *Viewport) -> bool { call_ret := cast(*bool) sys_call("Viewport", "is_using_occlusion_culling", 36873697, bool, main.p_object); return call_ret.*; }  // 26
set_debug_draw :: (main: *Viewport, debug_draw: Viewport.DebugDraw) { sys_call("Viewport", "set_debug_draw", 1970246205, Nil, main.p_object, debug_draw);  }  // 27
get_debug_draw :: (main: *Viewport) -> Viewport.DebugDraw { call_ret := cast(*Viewport.DebugDraw) sys_call("Viewport", "get_debug_draw", 579191299, Viewport.DebugDraw, main.p_object); return call_ret.*; }  // 28
get_render_info :: (main: *Viewport, type: Viewport.RenderInfoType, info: Viewport.RenderInfo) -> int { call_ret := cast(*int) sys_call("Viewport", "get_render_info", 481977019, int, main.p_object, type, info); return call_ret.*; }  // 29
get_texture :: (main: *Viewport) -> *ViewportTexture { call_ret := cast(*ViewportTexture) sys_call("Viewport", "get_texture", 1746695840, ViewportTexture, main.p_object); return call_ret; }  // 30
set_physics_object_picking :: (main: *Viewport, enable: bool) { sys_call("Viewport", "set_physics_object_picking", 2586408642, Nil, main.p_object, enable);  }  // 31
get_physics_object_picking :: (main: *Viewport) -> bool { call_ret := cast(*bool) sys_call("Viewport", "get_physics_object_picking", 2240911060, bool, main.p_object); return call_ret.*; }  // 32
set_physics_object_picking_sort :: (main: *Viewport, enable: bool) { sys_call("Viewport", "set_physics_object_picking_sort", 2586408642, Nil, main.p_object, enable);  }  // 33
get_physics_object_picking_sort :: (main: *Viewport) -> bool { call_ret := cast(*bool) sys_call("Viewport", "get_physics_object_picking_sort", 2240911060, bool, main.p_object); return call_ret.*; }  // 34
set_physics_object_picking_first_only :: (main: *Viewport, enable: bool) { sys_call("Viewport", "set_physics_object_picking_first_only", 2586408642, Nil, main.p_object, enable);  }  // 35
get_physics_object_picking_first_only :: (main: *Viewport) -> bool { call_ret := cast(*bool) sys_call("Viewport", "get_physics_object_picking_first_only", 2240911060, bool, main.p_object); return call_ret.*; }  // 36
get_viewport_rid :: (main: *Viewport) -> RID { call_ret := cast(*RID) sys_call("Viewport", "get_viewport_rid", 2944877500, RID, main.p_object); return call_ret.*; }  // 37
push_text_input :: (main: *Viewport, text: string) { sys_call("Viewport", "push_text_input", 83702148, Nil, main.p_object, text);  }  // 38
push_input :: (main: *Viewport, event: InputEvent) { sys_call("Viewport", "push_input", 3644664830, Nil, main.p_object, event);  }  // 39
push_unhandled_input :: (main: *Viewport, event: InputEvent) { sys_call("Viewport", "push_unhandled_input", 3644664830, Nil, main.p_object, event);  }  // 40
notify_mouse_entered :: (main: *Viewport) { sys_call("Viewport", "notify_mouse_entered", 3218959716, Nil, main.p_object);  }  // 41
notify_mouse_exited :: (main: *Viewport) { sys_call("Viewport", "notify_mouse_exited", 3218959716, Nil, main.p_object);  }  // 42
get_mouse_position :: (main: *Viewport) -> Vector2 { call_ret := cast(*Vector2) sys_call("Viewport", "get_mouse_position", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 43
warp_mouse :: (main: *Viewport, position: Vector2) { sys_call("Viewport", "warp_mouse", 743155724, Nil, main.p_object, position);  }  // 44
update_mouse_cursor_state :: (main: *Viewport) { sys_call("Viewport", "update_mouse_cursor_state", 3218959716, Nil, main.p_object);  }  // 45
gui_cancel_drag :: (main: *Viewport) { sys_call("Viewport", "gui_cancel_drag", 3218959716, Nil, main.p_object);  }  // 46
gui_get_drag_data :: (main: *Viewport) -> Variant { call_ret := cast(*Variant) sys_call("Viewport", "gui_get_drag_data", 1214101251, Variant, main.p_object); return call_ret.*; }  // 47
gui_is_dragging :: (main: *Viewport) -> bool { call_ret := cast(*bool) sys_call("Viewport", "gui_is_dragging", 36873697, bool, main.p_object); return call_ret.*; }  // 48
gui_is_drag_successful :: (main: *Viewport) -> bool { call_ret := cast(*bool) sys_call("Viewport", "gui_is_drag_successful", 36873697, bool, main.p_object); return call_ret.*; }  // 49
gui_release_focus :: (main: *Viewport) { sys_call("Viewport", "gui_release_focus", 3218959716, Nil, main.p_object);  }  // 50
gui_get_focus_owner :: (main: *Viewport) -> *Control { call_ret := cast(*Control) sys_call("Viewport", "gui_get_focus_owner", 2783021301, Control, main.p_object); return call_ret; }  // 51
gui_get_hovered_control :: (main: *Viewport) -> *Control { call_ret := cast(*Control) sys_call("Viewport", "gui_get_hovered_control", 2783021301, Control, main.p_object); return call_ret; }  // 52
set_disable_input :: (main: *Viewport, disable: bool) { sys_call("Viewport", "set_disable_input", 2586408642, Nil, main.p_object, disable);  }  // 53
is_input_disabled :: (main: *Viewport) -> bool { call_ret := cast(*bool) sys_call("Viewport", "is_input_disabled", 36873697, bool, main.p_object); return call_ret.*; }  // 54
set_positional_shadow_atlas_size :: (main: *Viewport, size: int) { sys_call("Viewport", "set_positional_shadow_atlas_size", 1286410249, Nil, main.p_object, size);  }  // 55
get_positional_shadow_atlas_size :: (main: *Viewport) -> int { call_ret := cast(*int) sys_call("Viewport", "get_positional_shadow_atlas_size", 3905245786, int, main.p_object); return call_ret.*; }  // 56
set_positional_shadow_atlas_16_bits :: (main: *Viewport, enable: bool) { sys_call("Viewport", "set_positional_shadow_atlas_16_bits", 2586408642, Nil, main.p_object, enable);  }  // 57
get_positional_shadow_atlas_16_bits :: (main: *Viewport) -> bool { call_ret := cast(*bool) sys_call("Viewport", "get_positional_shadow_atlas_16_bits", 36873697, bool, main.p_object); return call_ret.*; }  // 58
set_snap_controls_to_pixels :: (main: *Viewport, enabled: bool) { sys_call("Viewport", "set_snap_controls_to_pixels", 2586408642, Nil, main.p_object, enabled);  }  // 59
is_snap_controls_to_pixels_enabled :: (main: *Viewport) -> bool { call_ret := cast(*bool) sys_call("Viewport", "is_snap_controls_to_pixels_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 60
set_snap_2d_transforms_to_pixel :: (main: *Viewport, enabled: bool) { sys_call("Viewport", "set_snap_2d_transforms_to_pixel", 2586408642, Nil, main.p_object, enabled);  }  // 61
is_snap_2d_transforms_to_pixel_enabled :: (main: *Viewport) -> bool { call_ret := cast(*bool) sys_call("Viewport", "is_snap_2d_transforms_to_pixel_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 62
set_snap_2d_vertices_to_pixel :: (main: *Viewport, enabled: bool) { sys_call("Viewport", "set_snap_2d_vertices_to_pixel", 2586408642, Nil, main.p_object, enabled);  }  // 63
is_snap_2d_vertices_to_pixel_enabled :: (main: *Viewport) -> bool { call_ret := cast(*bool) sys_call("Viewport", "is_snap_2d_vertices_to_pixel_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 64
set_positional_shadow_atlas_quadrant_subdiv :: (main: *Viewport, quadrant: int, subdiv: Viewport.PositionalShadowAtlasQuadrantSubdiv) { sys_call("Viewport", "set_positional_shadow_atlas_quadrant_subdiv", 2596956071, Nil, main.p_object, quadrant, subdiv);  }  // 65
get_positional_shadow_atlas_quadrant_subdiv :: (main: *Viewport, quadrant: int) -> Viewport.PositionalShadowAtlasQuadrantSubdiv { call_ret := cast(*Viewport.PositionalShadowAtlasQuadrantSubdiv) sys_call("Viewport", "get_positional_shadow_atlas_quadrant_subdiv", 2676778355, Viewport.PositionalShadowAtlasQuadrantSubdiv, main.p_object, quadrant); return call_ret.*; }  // 66
set_input_as_handled :: (main: *Viewport) { sys_call("Viewport", "set_input_as_handled", 3218959716, Nil, main.p_object);  }  // 67
is_input_handled :: (main: *Viewport) -> bool { call_ret := cast(*bool) sys_call("Viewport", "is_input_handled", 36873697, bool, main.p_object); return call_ret.*; }  // 68
set_handle_input_locally :: (main: *Viewport, enable: bool) { sys_call("Viewport", "set_handle_input_locally", 2586408642, Nil, main.p_object, enable);  }  // 69
is_handling_input_locally :: (main: *Viewport) -> bool { call_ret := cast(*bool) sys_call("Viewport", "is_handling_input_locally", 36873697, bool, main.p_object); return call_ret.*; }  // 70
set_default_canvas_item_texture_filter :: (main: *Viewport, mode: Viewport.DefaultCanvasItemTextureFilter) { sys_call("Viewport", "set_default_canvas_item_texture_filter", 2815160100, Nil, main.p_object, mode);  }  // 71
get_default_canvas_item_texture_filter :: (main: *Viewport) -> Viewport.DefaultCanvasItemTextureFilter { call_ret := cast(*Viewport.DefaultCanvasItemTextureFilter) sys_call("Viewport", "get_default_canvas_item_texture_filter", 896601198, Viewport.DefaultCanvasItemTextureFilter, main.p_object); return call_ret.*; }  // 72
set_embedding_subwindows :: (main: *Viewport, enable: bool) { sys_call("Viewport", "set_embedding_subwindows", 2586408642, Nil, main.p_object, enable);  }  // 73
is_embedding_subwindows :: (main: *Viewport) -> bool { call_ret := cast(*bool) sys_call("Viewport", "is_embedding_subwindows", 36873697, bool, main.p_object); return call_ret.*; }  // 74
get_embedded_subwindows :: (main: *Viewport) -> [] Window { call_ret := cast(*[] Window) sys_call("Viewport", "get_embedded_subwindows", 3995934104, [] Window, main.p_object); return call_ret.*; }  // 75
set_canvas_cull_mask :: (main: *Viewport, mask: int) { sys_call("Viewport", "set_canvas_cull_mask", 1286410249, Nil, main.p_object, mask);  }  // 76
get_canvas_cull_mask :: (main: *Viewport) -> int { call_ret := cast(*int) sys_call("Viewport", "get_canvas_cull_mask", 3905245786, int, main.p_object); return call_ret.*; }  // 77
set_canvas_cull_mask_bit :: (main: *Viewport, layer: int, enable: bool) { sys_call("Viewport", "set_canvas_cull_mask_bit", 300928843, Nil, main.p_object, layer, enable);  }  // 78
get_canvas_cull_mask_bit :: (main: *Viewport, layer: int) -> bool { call_ret := cast(*bool) sys_call("Viewport", "get_canvas_cull_mask_bit", 1116898809, bool, main.p_object, layer); return call_ret.*; }  // 79
set_default_canvas_item_texture_repeat :: (main: *Viewport, mode: Viewport.DefaultCanvasItemTextureRepeat) { sys_call("Viewport", "set_default_canvas_item_texture_repeat", 1658513413, Nil, main.p_object, mode);  }  // 80
get_default_canvas_item_texture_repeat :: (main: *Viewport) -> Viewport.DefaultCanvasItemTextureRepeat { call_ret := cast(*Viewport.DefaultCanvasItemTextureRepeat) sys_call("Viewport", "get_default_canvas_item_texture_repeat", 4049774160, Viewport.DefaultCanvasItemTextureRepeat, main.p_object); return call_ret.*; }  // 81
set_sdf_oversize :: (main: *Viewport, oversize: Viewport.SDFOversize) { sys_call("Viewport", "set_sdf_oversize", 2574159017, Nil, main.p_object, oversize);  }  // 82
get_sdf_oversize :: (main: *Viewport) -> Viewport.SDFOversize { call_ret := cast(*Viewport.SDFOversize) sys_call("Viewport", "get_sdf_oversize", 2631427510, Viewport.SDFOversize, main.p_object); return call_ret.*; }  // 83
set_sdf_scale :: (main: *Viewport, scale: Viewport.SDFScale) { sys_call("Viewport", "set_sdf_scale", 1402773951, Nil, main.p_object, scale);  }  // 84
get_sdf_scale :: (main: *Viewport) -> Viewport.SDFScale { call_ret := cast(*Viewport.SDFScale) sys_call("Viewport", "get_sdf_scale", 3162688184, Viewport.SDFScale, main.p_object); return call_ret.*; }  // 85
set_mesh_lod_threshold :: (main: *Viewport, pixels: float) { sys_call("Viewport", "set_mesh_lod_threshold", 373806689, Nil, main.p_object, pixels);  }  // 86
get_mesh_lod_threshold :: (main: *Viewport) -> float { call_ret := cast(*float) sys_call("Viewport", "get_mesh_lod_threshold", 1740695150, float, main.p_object); return call_ret.*; }  // 87
set_as_audio_listener_2d :: (main: *Viewport, enable: bool) { sys_call("Viewport", "set_as_audio_listener_2d", 2586408642, Nil, main.p_object, enable);  }  // 88
is_audio_listener_2d :: (main: *Viewport) -> bool { call_ret := cast(*bool) sys_call("Viewport", "is_audio_listener_2d", 36873697, bool, main.p_object); return call_ret.*; }  // 89
get_audio_listener_2d :: (main: *Viewport) -> *AudioListener2D { call_ret := cast(*AudioListener2D) sys_call("Viewport", "get_audio_listener_2d", 1840977180, AudioListener2D, main.p_object); return call_ret; }  // 90
get_camera_2d :: (main: *Viewport) -> *Camera2D { call_ret := cast(*Camera2D) sys_call("Viewport", "get_camera_2d", 3551466917, Camera2D, main.p_object); return call_ret; }  // 91
set_world_3d :: (main: *Viewport, world_3d: World3D) { sys_call("Viewport", "set_world_3d", 1400875337, Nil, main.p_object, world_3d);  }  // 92
get_world_3d :: (main: *Viewport) -> *World3D { call_ret := cast(*World3D) sys_call("Viewport", "get_world_3d", 317588385, World3D, main.p_object); return call_ret; }  // 93
find_world_3d :: (main: *Viewport) -> *World3D { call_ret := cast(*World3D) sys_call("Viewport", "find_world_3d", 317588385, World3D, main.p_object); return call_ret; }  // 94
set_use_own_world_3d :: (main: *Viewport, enable: bool) { sys_call("Viewport", "set_use_own_world_3d", 2586408642, Nil, main.p_object, enable);  }  // 95
is_using_own_world_3d :: (main: *Viewport) -> bool { call_ret := cast(*bool) sys_call("Viewport", "is_using_own_world_3d", 36873697, bool, main.p_object); return call_ret.*; }  // 96
get_audio_listener_3d :: (main: *Viewport) -> *AudioListener3D { call_ret := cast(*AudioListener3D) sys_call("Viewport", "get_audio_listener_3d", 3472246991, AudioListener3D, main.p_object); return call_ret; }  // 97
get_camera_3d :: (main: *Viewport) -> *Camera3D { call_ret := cast(*Camera3D) sys_call("Viewport", "get_camera_3d", 2285090890, Camera3D, main.p_object); return call_ret; }  // 98
set_as_audio_listener_3d :: (main: *Viewport, enable: bool) { sys_call("Viewport", "set_as_audio_listener_3d", 2586408642, Nil, main.p_object, enable);  }  // 99
is_audio_listener_3d :: (main: *Viewport) -> bool { call_ret := cast(*bool) sys_call("Viewport", "is_audio_listener_3d", 36873697, bool, main.p_object); return call_ret.*; }  // 100
set_disable_3d :: (main: *Viewport, disable: bool) { sys_call("Viewport", "set_disable_3d", 2586408642, Nil, main.p_object, disable);  }  // 101
is_3d_disabled :: (main: *Viewport) -> bool { call_ret := cast(*bool) sys_call("Viewport", "is_3d_disabled", 36873697, bool, main.p_object); return call_ret.*; }  // 102
set_use_xr :: (main: *Viewport, use: bool) { sys_call("Viewport", "set_use_xr", 2586408642, Nil, main.p_object, use);  }  // 103
is_using_xr :: (main: *Viewport) -> bool { call_ret := cast(*bool) sys_call("Viewport", "is_using_xr", 2240911060, bool, main.p_object); return call_ret.*; }  // 104
set_scaling_3d_mode :: (main: *Viewport, scaling_3d_mode: Viewport.Scaling3DMode) { sys_call("Viewport", "set_scaling_3d_mode", 1531597597, Nil, main.p_object, scaling_3d_mode);  }  // 105
get_scaling_3d_mode :: (main: *Viewport) -> Viewport.Scaling3DMode { call_ret := cast(*Viewport.Scaling3DMode) sys_call("Viewport", "get_scaling_3d_mode", 2597660574, Viewport.Scaling3DMode, main.p_object); return call_ret.*; }  // 106
set_scaling_3d_scale :: (main: *Viewport, scale: float) { sys_call("Viewport", "set_scaling_3d_scale", 373806689, Nil, main.p_object, scale);  }  // 107
get_scaling_3d_scale :: (main: *Viewport) -> float { call_ret := cast(*float) sys_call("Viewport", "get_scaling_3d_scale", 1740695150, float, main.p_object); return call_ret.*; }  // 108
set_fsr_sharpness :: (main: *Viewport, fsr_sharpness: float) { sys_call("Viewport", "set_fsr_sharpness", 373806689, Nil, main.p_object, fsr_sharpness);  }  // 109
get_fsr_sharpness :: (main: *Viewport) -> float { call_ret := cast(*float) sys_call("Viewport", "get_fsr_sharpness", 1740695150, float, main.p_object); return call_ret.*; }  // 110
set_texture_mipmap_bias :: (main: *Viewport, texture_mipmap_bias: float) { sys_call("Viewport", "set_texture_mipmap_bias", 373806689, Nil, main.p_object, texture_mipmap_bias);  }  // 111
get_texture_mipmap_bias :: (main: *Viewport) -> float { call_ret := cast(*float) sys_call("Viewport", "get_texture_mipmap_bias", 1740695150, float, main.p_object); return call_ret.*; }  // 112
set_anisotropic_filtering_level :: (main: *Viewport, anisotropic_filtering_level: Viewport.AnisotropicFiltering) { sys_call("Viewport", "set_anisotropic_filtering_level", 3445583046, Nil, main.p_object, anisotropic_filtering_level);  }  // 113
get_anisotropic_filtering_level :: (main: *Viewport) -> Viewport.AnisotropicFiltering { call_ret := cast(*Viewport.AnisotropicFiltering) sys_call("Viewport", "get_anisotropic_filtering_level", 3991528932, Viewport.AnisotropicFiltering, main.p_object); return call_ret.*; }  // 114
set_vrs_mode :: (main: *Viewport, mode: Viewport.VRSMode) { sys_call("Viewport", "set_vrs_mode", 2749867817, Nil, main.p_object, mode);  }  // 115
get_vrs_mode :: (main: *Viewport) -> Viewport.VRSMode { call_ret := cast(*Viewport.VRSMode) sys_call("Viewport", "get_vrs_mode", 349660525, Viewport.VRSMode, main.p_object); return call_ret.*; }  // 116
set_vrs_update_mode :: (main: *Viewport, mode: Viewport.VRSUpdateMode) { sys_call("Viewport", "set_vrs_update_mode", 3182412319, Nil, main.p_object, mode);  }  // 117
get_vrs_update_mode :: (main: *Viewport) -> Viewport.VRSUpdateMode { call_ret := cast(*Viewport.VRSUpdateMode) sys_call("Viewport", "get_vrs_update_mode", 2255951583, Viewport.VRSUpdateMode, main.p_object); return call_ret.*; }  // 118
set_vrs_texture :: (main: *Viewport, texture: Texture2D) { sys_call("Viewport", "set_vrs_texture", 4051416890, Nil, main.p_object, texture);  }  // 119
get_vrs_texture :: (main: *Viewport) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("Viewport", "get_vrs_texture", 3635182373, Texture2D, main.p_object); return call_ret; }  // 120

set_viewport_path_in_scene :: (main: *ViewportTexture, path: string) { sys_call("ViewportTexture", "set_viewport_path_in_scene", 1348162250, Nil, main.p_object, path);  }  // 0
get_viewport_path_in_scene :: (main: *ViewportTexture) -> NodePath { call_ret := cast(*NodePath) sys_call("ViewportTexture", "get_viewport_path_in_scene", 4075236667, NodePath, main.p_object); return call_ret.*; }  // 1

set_enable_mode :: (main: *VisibleOnScreenEnabler2D, mode: VisibleOnScreenEnabler2D.EnableMode) { sys_call("VisibleOnScreenEnabler2D", "set_enable_mode", 2961788752, Nil, main.p_object, mode);  }  // 0
get_enable_mode :: (main: *VisibleOnScreenEnabler2D) -> VisibleOnScreenEnabler2D.EnableMode { call_ret := cast(*VisibleOnScreenEnabler2D.EnableMode) sys_call("VisibleOnScreenEnabler2D", "get_enable_mode", 2650445576, VisibleOnScreenEnabler2D.EnableMode, main.p_object); return call_ret.*; }  // 1
set_enable_node_path :: (main: *VisibleOnScreenEnabler2D, path: string) { sys_call("VisibleOnScreenEnabler2D", "set_enable_node_path", 1348162250, Nil, main.p_object, path);  }  // 2
get_enable_node_path :: (main: *VisibleOnScreenEnabler2D) -> NodePath { call_ret := cast(*NodePath) sys_call("VisibleOnScreenEnabler2D", "get_enable_node_path", 277076166, NodePath, main.p_object); return call_ret.*; }  // 3

set_enable_mode :: (main: *VisibleOnScreenEnabler3D, mode: VisibleOnScreenEnabler3D.EnableMode) { sys_call("VisibleOnScreenEnabler3D", "set_enable_mode", 320303646, Nil, main.p_object, mode);  }  // 0
get_enable_mode :: (main: *VisibleOnScreenEnabler3D) -> VisibleOnScreenEnabler3D.EnableMode { call_ret := cast(*VisibleOnScreenEnabler3D.EnableMode) sys_call("VisibleOnScreenEnabler3D", "get_enable_mode", 3352990031, VisibleOnScreenEnabler3D.EnableMode, main.p_object); return call_ret.*; }  // 1
set_enable_node_path :: (main: *VisibleOnScreenEnabler3D, path: string) { sys_call("VisibleOnScreenEnabler3D", "set_enable_node_path", 1348162250, Nil, main.p_object, path);  }  // 2
get_enable_node_path :: (main: *VisibleOnScreenEnabler3D) -> NodePath { call_ret := cast(*NodePath) sys_call("VisibleOnScreenEnabler3D", "get_enable_node_path", 277076166, NodePath, main.p_object); return call_ret.*; }  // 3

set_rect :: (main: *VisibleOnScreenNotifier2D, rect: Rect2) { sys_call("VisibleOnScreenNotifier2D", "set_rect", 2046264180, Nil, main.p_object, rect);  }  // 0
get_rect :: (main: *VisibleOnScreenNotifier2D) -> Rect2 { call_ret := cast(*Rect2) sys_call("VisibleOnScreenNotifier2D", "get_rect", 1639390495, Rect2, main.p_object); return call_ret.*; }  // 1
is_on_screen :: (main: *VisibleOnScreenNotifier2D) -> bool { call_ret := cast(*bool) sys_call("VisibleOnScreenNotifier2D", "is_on_screen", 36873697, bool, main.p_object); return call_ret.*; }  // 2

set_aabb :: (main: *VisibleOnScreenNotifier3D, rect: AABB) { sys_call("VisibleOnScreenNotifier3D", "set_aabb", 259215842, Nil, main.p_object, rect);  }  // 0
is_on_screen :: (main: *VisibleOnScreenNotifier3D) -> bool { call_ret := cast(*bool) sys_call("VisibleOnScreenNotifier3D", "is_on_screen", 36873697, bool, main.p_object); return call_ret.*; }  // 1

set_base :: (main: *VisualInstance3D, base: RID) { sys_call("VisualInstance3D", "set_base", 2722037293, Nil, main.p_object, base);  }  // 1
get_base :: (main: *VisualInstance3D) -> RID { call_ret := cast(*RID) sys_call("VisualInstance3D", "get_base", 2944877500, RID, main.p_object); return call_ret.*; }  // 2
get_instance :: (main: *VisualInstance3D) -> RID { call_ret := cast(*RID) sys_call("VisualInstance3D", "get_instance", 2944877500, RID, main.p_object); return call_ret.*; }  // 3
set_layer_mask :: (main: *VisualInstance3D, mask: int) { sys_call("VisualInstance3D", "set_layer_mask", 1286410249, Nil, main.p_object, mask);  }  // 4
get_layer_mask :: (main: *VisualInstance3D) -> int { call_ret := cast(*int) sys_call("VisualInstance3D", "get_layer_mask", 3905245786, int, main.p_object); return call_ret.*; }  // 5
set_layer_mask_value :: (main: *VisualInstance3D, layer_number: int, value: bool) { sys_call("VisualInstance3D", "set_layer_mask_value", 300928843, Nil, main.p_object, layer_number, value);  }  // 6
get_layer_mask_value :: (main: *VisualInstance3D, layer_number: int) -> bool { call_ret := cast(*bool) sys_call("VisualInstance3D", "get_layer_mask_value", 1116898809, bool, main.p_object, layer_number); return call_ret.*; }  // 7
set_sorting_offset :: (main: *VisualInstance3D, offset: float) { sys_call("VisualInstance3D", "set_sorting_offset", 373806689, Nil, main.p_object, offset);  }  // 8
get_sorting_offset :: (main: *VisualInstance3D) -> float { call_ret := cast(*float) sys_call("VisualInstance3D", "get_sorting_offset", 1740695150, float, main.p_object); return call_ret.*; }  // 9
set_sorting_use_aabb_center :: (main: *VisualInstance3D, enabled: bool) { sys_call("VisualInstance3D", "set_sorting_use_aabb_center", 2586408642, Nil, main.p_object, enabled);  }  // 10
is_sorting_use_aabb_center :: (main: *VisualInstance3D) -> bool { call_ret := cast(*bool) sys_call("VisualInstance3D", "is_sorting_use_aabb_center", 36873697, bool, main.p_object); return call_ret.*; }  // 11
get_aabb :: (main: *VisualInstance3D) -> AABB { call_ret := cast(*AABB) sys_call("VisualInstance3D", "get_aabb", 1068685055, AABB, main.p_object); return call_ret.*; }  // 12

set_mode :: (main: *VisualShader, mode: Shader.Mode) { sys_call("VisualShader", "set_mode", 3978014962, Nil, main.p_object, mode);  }  // 0
add_node :: (main: *VisualShader, type: VisualShader.Type, node: VisualShaderNode, position: Vector2, id: int) { sys_call("VisualShader", "add_node", 1560769431, Nil, main.p_object, type, node, position, id);  }  // 1
get_node :: (main: *VisualShader, type: VisualShader.Type, id: int) -> *VisualShaderNode { call_ret := cast(*VisualShaderNode) sys_call("VisualShader", "get_node", 3784670312, VisualShaderNode, main.p_object, type, id); return call_ret; }  // 2
set_node_position :: (main: *VisualShader, type: VisualShader.Type, id: int, position: Vector2) { sys_call("VisualShader", "set_node_position", 2726660721, Nil, main.p_object, type, id, position);  }  // 3
get_node_position :: (main: *VisualShader, type: VisualShader.Type, id: int) -> Vector2 { call_ret := cast(*Vector2) sys_call("VisualShader", "get_node_position", 2175036082, Vector2, main.p_object, type, id); return call_ret.*; }  // 4
get_node_list :: (main: *VisualShader, type: VisualShader.Type) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("VisualShader", "get_node_list", 2370592410, PackedInt32Array, main.p_object, type); return call_ret.*; }  // 5
get_valid_node_id :: (main: *VisualShader, type: VisualShader.Type) -> int { call_ret := cast(*int) sys_call("VisualShader", "get_valid_node_id", 629467342, int, main.p_object, type); return call_ret.*; }  // 6
remove_node :: (main: *VisualShader, type: VisualShader.Type, id: int) { sys_call("VisualShader", "remove_node", 844050912, Nil, main.p_object, type, id);  }  // 7
replace_node :: (main: *VisualShader, type: VisualShader.Type, id: int, new_class: string) { sys_call("VisualShader", "replace_node", 3144735253, Nil, main.p_object, type, id, new_class);  }  // 8
is_node_connection :: (main: *VisualShader, type: VisualShader.Type, from_node: int, from_port: int, to_node: int, to_port: int) -> bool { call_ret := cast(*bool) sys_call("VisualShader", "is_node_connection", 3922381898, bool, main.p_object, type, from_node, from_port, to_node, to_port); return call_ret.*; }  // 9
can_connect_nodes :: (main: *VisualShader, type: VisualShader.Type, from_node: int, from_port: int, to_node: int, to_port: int) -> bool { call_ret := cast(*bool) sys_call("VisualShader", "can_connect_nodes", 3922381898, bool, main.p_object, type, from_node, from_port, to_node, to_port); return call_ret.*; }  // 10
connect_nodes :: (main: *VisualShader, type: VisualShader.Type, from_node: int, from_port: int, to_node: int, to_port: int) -> Error { call_ret := cast(*Error) sys_call("VisualShader", "connect_nodes", 3081049573, Error, main.p_object, type, from_node, from_port, to_node, to_port); return call_ret.*; }  // 11
disconnect_nodes :: (main: *VisualShader, type: VisualShader.Type, from_node: int, from_port: int, to_node: int, to_port: int) { sys_call("VisualShader", "disconnect_nodes", 2268060358, Nil, main.p_object, type, from_node, from_port, to_node, to_port);  }  // 12
connect_nodes_forced :: (main: *VisualShader, type: VisualShader.Type, from_node: int, from_port: int, to_node: int, to_port: int) { sys_call("VisualShader", "connect_nodes_forced", 2268060358, Nil, main.p_object, type, from_node, from_port, to_node, to_port);  }  // 13
get_node_connections :: (main: *VisualShader, type: VisualShader.Type) -> [] Dictionary { call_ret := cast(*[] Dictionary) sys_call("VisualShader", "get_node_connections", 1441964831, [] Dictionary, main.p_object, type); return call_ret.*; }  // 14
set_graph_offset :: (main: *VisualShader, offset: Vector2) { sys_call("VisualShader", "set_graph_offset", 743155724, Nil, main.p_object, offset);  }  // 15
get_graph_offset :: (main: *VisualShader) -> Vector2 { call_ret := cast(*Vector2) sys_call("VisualShader", "get_graph_offset", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 16
attach_node_to_frame :: (main: *VisualShader, type: VisualShader.Type, id: int, frame: int) { sys_call("VisualShader", "attach_node_to_frame", 2479945279, Nil, main.p_object, type, id, frame);  }  // 17
detach_node_from_frame :: (main: *VisualShader, type: VisualShader.Type, id: int) { sys_call("VisualShader", "detach_node_from_frame", 844050912, Nil, main.p_object, type, id);  }  // 18
add_varying :: (main: *VisualShader, name: string, mode: VisualShader.VaryingMode, type: VisualShader.VaryingType) { sys_call("VisualShader", "add_varying", 2084110726, Nil, main.p_object, name, mode, type);  }  // 19
remove_varying :: (main: *VisualShader, name: string) { sys_call("VisualShader", "remove_varying", 83702148, Nil, main.p_object, name);  }  // 20
has_varying :: (main: *VisualShader, name: string) -> bool { call_ret := cast(*bool) sys_call("VisualShader", "has_varying", 3927539163, bool, main.p_object, name); return call_ret.*; }  // 21

get_default_input_port :: (main: *VisualShaderNode, type: VisualShaderNode.PortType) -> int { call_ret := cast(*int) sys_call("VisualShaderNode", "get_default_input_port", 1894493699, int, main.p_object, type); return call_ret.*; }  // 0
set_output_port_for_preview :: (main: *VisualShaderNode, port: int) { sys_call("VisualShaderNode", "set_output_port_for_preview", 1286410249, Nil, main.p_object, port);  }  // 1
get_output_port_for_preview :: (main: *VisualShaderNode) -> int { call_ret := cast(*int) sys_call("VisualShaderNode", "get_output_port_for_preview", 3905245786, int, main.p_object); return call_ret.*; }  // 2
set_input_port_default_value :: (main: *VisualShaderNode, port: int, value: Variant) { sys_call("VisualShaderNode", "set_input_port_default_value", 150923387, Nil, main.p_object, port, value);  }  // 3
get_input_port_default_value :: (main: *VisualShaderNode, port: int) -> Variant { call_ret := cast(*Variant) sys_call("VisualShaderNode", "get_input_port_default_value", 4227898402, Variant, main.p_object, port); return call_ret.*; }  // 4
remove_input_port_default_value :: (main: *VisualShaderNode, port: int) { sys_call("VisualShaderNode", "remove_input_port_default_value", 1286410249, Nil, main.p_object, port);  }  // 5
clear_default_input_values :: (main: *VisualShaderNode) { sys_call("VisualShaderNode", "clear_default_input_values", 3218959716, Nil, main.p_object);  }  // 6
set_default_input_values :: (main: *VisualShaderNode, values: Array) { sys_call("VisualShaderNode", "set_default_input_values", 381264803, Nil, main.p_object, values);  }  // 7
get_default_input_values :: (main: *VisualShaderNode) -> Array { call_ret := cast(*Array) sys_call("VisualShaderNode", "get_default_input_values", 3995934104, Array, main.p_object); return call_ret.*; }  // 8
set_frame :: (main: *VisualShaderNode, frame: int) { sys_call("VisualShaderNode", "set_frame", 1286410249, Nil, main.p_object, frame);  }  // 9
get_frame :: (main: *VisualShaderNode) -> int { call_ret := cast(*int) sys_call("VisualShaderNode", "get_frame", 3905245786, int, main.p_object); return call_ret.*; }  // 10

set_billboard_type :: (main: *VisualShaderNodeBillboard, billboard_type: VisualShaderNodeBillboard.BillboardType) { sys_call("VisualShaderNodeBillboard", "set_billboard_type", 1227463289, Nil, main.p_object, billboard_type);  }  // 0
get_billboard_type :: (main: *VisualShaderNodeBillboard) -> VisualShaderNodeBillboard.BillboardType { call_ret := cast(*VisualShaderNodeBillboard.BillboardType) sys_call("VisualShaderNodeBillboard", "get_billboard_type", 3724188517, VisualShaderNodeBillboard.BillboardType, main.p_object); return call_ret.*; }  // 1
set_keep_scale_enabled :: (main: *VisualShaderNodeBillboard, enabled: bool) { sys_call("VisualShaderNodeBillboard", "set_keep_scale_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 2
is_keep_scale_enabled :: (main: *VisualShaderNodeBillboard) -> bool { call_ret := cast(*bool) sys_call("VisualShaderNodeBillboard", "is_keep_scale_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 3

set_constant :: (main: *VisualShaderNodeBooleanConstant, constant: bool) { sys_call("VisualShaderNodeBooleanConstant", "set_constant", 2586408642, Nil, main.p_object, constant);  }  // 0
get_constant :: (main: *VisualShaderNodeBooleanConstant) -> bool { call_ret := cast(*bool) sys_call("VisualShaderNodeBooleanConstant", "get_constant", 36873697, bool, main.p_object); return call_ret.*; }  // 1

set_default_value_enabled :: (main: *VisualShaderNodeBooleanParameter, enabled: bool) { sys_call("VisualShaderNodeBooleanParameter", "set_default_value_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 0
is_default_value_enabled :: (main: *VisualShaderNodeBooleanParameter) -> bool { call_ret := cast(*bool) sys_call("VisualShaderNodeBooleanParameter", "is_default_value_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 1
set_default_value :: (main: *VisualShaderNodeBooleanParameter, value: bool) { sys_call("VisualShaderNodeBooleanParameter", "set_default_value", 2586408642, Nil, main.p_object, value);  }  // 2
get_default_value :: (main: *VisualShaderNodeBooleanParameter) -> bool { call_ret := cast(*bool) sys_call("VisualShaderNodeBooleanParameter", "get_default_value", 36873697, bool, main.p_object); return call_ret.*; }  // 3

set_op_type :: (main: *VisualShaderNodeClamp, op_type: VisualShaderNodeClamp.OpType) { sys_call("VisualShaderNodeClamp", "set_op_type", 405010749, Nil, main.p_object, op_type);  }  // 0
get_op_type :: (main: *VisualShaderNodeClamp) -> VisualShaderNodeClamp.OpType { call_ret := cast(*VisualShaderNodeClamp.OpType) sys_call("VisualShaderNodeClamp", "get_op_type", 233276050, VisualShaderNodeClamp.OpType, main.p_object); return call_ret.*; }  // 1

set_constant :: (main: *VisualShaderNodeColorConstant, constant: Color) { sys_call("VisualShaderNodeColorConstant", "set_constant", 2920490490, Nil, main.p_object, constant);  }  // 0
get_constant :: (main: *VisualShaderNodeColorConstant) -> Color { call_ret := cast(*Color) sys_call("VisualShaderNodeColorConstant", "get_constant", 3444240500, Color, main.p_object); return call_ret.*; }  // 1

set_function :: (main: *VisualShaderNodeColorFunc, func: VisualShaderNodeColorFunc.Function) { sys_call("VisualShaderNodeColorFunc", "set_function", 3973396138, Nil, main.p_object, func);  }  // 0
get_function :: (main: *VisualShaderNodeColorFunc) -> VisualShaderNodeColorFunc.Function { call_ret := cast(*VisualShaderNodeColorFunc.Function) sys_call("VisualShaderNodeColorFunc", "get_function", 554863321, VisualShaderNodeColorFunc.Function, main.p_object); return call_ret.*; }  // 1

set_operator :: (main: *VisualShaderNodeColorOp, op: VisualShaderNodeColorOp.Operator) { sys_call("VisualShaderNodeColorOp", "set_operator", 4260370673, Nil, main.p_object, op);  }  // 0
get_operator :: (main: *VisualShaderNodeColorOp) -> VisualShaderNodeColorOp.Operator { call_ret := cast(*VisualShaderNodeColorOp.Operator) sys_call("VisualShaderNodeColorOp", "get_operator", 1950956529, VisualShaderNodeColorOp.Operator, main.p_object); return call_ret.*; }  // 1

set_default_value_enabled :: (main: *VisualShaderNodeColorParameter, enabled: bool) { sys_call("VisualShaderNodeColorParameter", "set_default_value_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 0
is_default_value_enabled :: (main: *VisualShaderNodeColorParameter) -> bool { call_ret := cast(*bool) sys_call("VisualShaderNodeColorParameter", "is_default_value_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 1
set_default_value :: (main: *VisualShaderNodeColorParameter, value: Color) { sys_call("VisualShaderNodeColorParameter", "set_default_value", 2920490490, Nil, main.p_object, value);  }  // 2
get_default_value :: (main: *VisualShaderNodeColorParameter) -> Color { call_ret := cast(*Color) sys_call("VisualShaderNodeColorParameter", "get_default_value", 3444240500, Color, main.p_object); return call_ret.*; }  // 3

set_description :: (main: *VisualShaderNodeComment, description: string) { sys_call("VisualShaderNodeComment", "set_description", 83702148, Nil, main.p_object, description);  }  // 0
get_description :: (main: *VisualShaderNodeComment) -> gstring { call_ret := cast(*gstring) sys_call("VisualShaderNodeComment", "get_description", 201670096, gstring, main.p_object); return call_ret.*; }  // 1

set_comparison_type :: (main: *VisualShaderNodeCompare, type: VisualShaderNodeCompare.ComparisonType) { sys_call("VisualShaderNodeCompare", "set_comparison_type", 516558320, Nil, main.p_object, type);  }  // 0
get_comparison_type :: (main: *VisualShaderNodeCompare) -> VisualShaderNodeCompare.ComparisonType { call_ret := cast(*VisualShaderNodeCompare.ComparisonType) sys_call("VisualShaderNodeCompare", "get_comparison_type", 3495315961, VisualShaderNodeCompare.ComparisonType, main.p_object); return call_ret.*; }  // 1
set_function :: (main: *VisualShaderNodeCompare, func: VisualShaderNodeCompare.Function) { sys_call("VisualShaderNodeCompare", "set_function", 2370951349, Nil, main.p_object, func);  }  // 2
get_function :: (main: *VisualShaderNodeCompare) -> VisualShaderNodeCompare.Function { call_ret := cast(*VisualShaderNodeCompare.Function) sys_call("VisualShaderNodeCompare", "get_function", 4089164265, VisualShaderNodeCompare.Function, main.p_object); return call_ret.*; }  // 3
set_condition :: (main: *VisualShaderNodeCompare, condition: VisualShaderNodeCompare.Condition) { sys_call("VisualShaderNodeCompare", "set_condition", 918742392, Nil, main.p_object, condition);  }  // 4
get_condition :: (main: *VisualShaderNodeCompare) -> VisualShaderNodeCompare.Condition { call_ret := cast(*VisualShaderNodeCompare.Condition) sys_call("VisualShaderNodeCompare", "get_condition", 3281078941, VisualShaderNodeCompare.Condition, main.p_object); return call_ret.*; }  // 5


set_source :: (main: *VisualShaderNodeCubemap, value: VisualShaderNodeCubemap.Source) { sys_call("VisualShaderNodeCubemap", "set_source", 1625400621, Nil, main.p_object, value);  }  // 0
get_source :: (main: *VisualShaderNodeCubemap) -> VisualShaderNodeCubemap.Source { call_ret := cast(*VisualShaderNodeCubemap.Source) sys_call("VisualShaderNodeCubemap", "get_source", 2222048781, VisualShaderNodeCubemap.Source, main.p_object); return call_ret.*; }  // 1
set_cube_map :: (main: *VisualShaderNodeCubemap, value: TextureLayered) { sys_call("VisualShaderNodeCubemap", "set_cube_map", 1278366092, Nil, main.p_object, value);  }  // 2
get_cube_map :: (main: *VisualShaderNodeCubemap) -> *TextureLayered { call_ret := cast(*TextureLayered) sys_call("VisualShaderNodeCubemap", "get_cube_map", 3984243839, TextureLayered, main.p_object); return call_ret; }  // 3
set_texture_type :: (main: *VisualShaderNodeCubemap, value: VisualShaderNodeCubemap.TextureType) { sys_call("VisualShaderNodeCubemap", "set_texture_type", 1899718876, Nil, main.p_object, value);  }  // 4
get_texture_type :: (main: *VisualShaderNodeCubemap) -> VisualShaderNodeCubemap.TextureType { call_ret := cast(*VisualShaderNodeCubemap.TextureType) sys_call("VisualShaderNodeCubemap", "get_texture_type", 3356498888, VisualShaderNodeCubemap.TextureType, main.p_object); return call_ret.*; }  // 5


set_texture :: (main: *VisualShaderNodeCurveTexture, texture: CurveTexture) { sys_call("VisualShaderNodeCurveTexture", "set_texture", 181872837, Nil, main.p_object, texture);  }  // 0
get_texture :: (main: *VisualShaderNodeCurveTexture) -> *CurveTexture { call_ret := cast(*CurveTexture) sys_call("VisualShaderNodeCurveTexture", "get_texture", 2800800579, CurveTexture, main.p_object); return call_ret; }  // 1

set_texture :: (main: *VisualShaderNodeCurveXYZTexture, texture: CurveXYZTexture) { sys_call("VisualShaderNodeCurveXYZTexture", "set_texture", 8031783, Nil, main.p_object, texture);  }  // 0
get_texture :: (main: *VisualShaderNodeCurveXYZTexture) -> *CurveXYZTexture { call_ret := cast(*CurveXYZTexture) sys_call("VisualShaderNodeCurveXYZTexture", "get_texture", 1950275015, CurveXYZTexture, main.p_object); return call_ret; }  // 1

get_option_index :: (main: *VisualShaderNodeCustom, option: int) -> int { call_ret := cast(*int) sys_call("VisualShaderNodeCustom", "get_option_index", 923996154, int, main.p_object, option); return call_ret.*; }  // 21

set_op_type :: (main: *VisualShaderNodeDerivativeFunc, type: VisualShaderNodeDerivativeFunc.OpType) { sys_call("VisualShaderNodeDerivativeFunc", "set_op_type", 377800221, Nil, main.p_object, type);  }  // 0
get_op_type :: (main: *VisualShaderNodeDerivativeFunc) -> VisualShaderNodeDerivativeFunc.OpType { call_ret := cast(*VisualShaderNodeDerivativeFunc.OpType) sys_call("VisualShaderNodeDerivativeFunc", "get_op_type", 3997800514, VisualShaderNodeDerivativeFunc.OpType, main.p_object); return call_ret.*; }  // 1
set_function :: (main: *VisualShaderNodeDerivativeFunc, func: VisualShaderNodeDerivativeFunc.Function) { sys_call("VisualShaderNodeDerivativeFunc", "set_function", 1944704156, Nil, main.p_object, func);  }  // 2
get_function :: (main: *VisualShaderNodeDerivativeFunc) -> VisualShaderNodeDerivativeFunc.Function { call_ret := cast(*VisualShaderNodeDerivativeFunc.Function) sys_call("VisualShaderNodeDerivativeFunc", "get_function", 2389093396, VisualShaderNodeDerivativeFunc.Function, main.p_object); return call_ret.*; }  // 3
set_precision :: (main: *VisualShaderNodeDerivativeFunc, precision: VisualShaderNodeDerivativeFunc.Precision) { sys_call("VisualShaderNodeDerivativeFunc", "set_precision", 797270566, Nil, main.p_object, precision);  }  // 4
get_precision :: (main: *VisualShaderNodeDerivativeFunc) -> VisualShaderNodeDerivativeFunc.Precision { call_ret := cast(*VisualShaderNodeDerivativeFunc.Precision) sys_call("VisualShaderNodeDerivativeFunc", "get_precision", 3822547323, VisualShaderNodeDerivativeFunc.Precision, main.p_object); return call_ret.*; }  // 5




set_expression :: (main: *VisualShaderNodeExpression, expression: string) { sys_call("VisualShaderNodeExpression", "set_expression", 83702148, Nil, main.p_object, expression);  }  // 0
get_expression :: (main: *VisualShaderNodeExpression) -> gstring { call_ret := cast(*gstring) sys_call("VisualShaderNodeExpression", "get_expression", 201670096, gstring, main.p_object); return call_ret.*; }  // 1


set_constant :: (main: *VisualShaderNodeFloatConstant, constant: float) { sys_call("VisualShaderNodeFloatConstant", "set_constant", 373806689, Nil, main.p_object, constant);  }  // 0
get_constant :: (main: *VisualShaderNodeFloatConstant) -> float { call_ret := cast(*float) sys_call("VisualShaderNodeFloatConstant", "get_constant", 1740695150, float, main.p_object); return call_ret.*; }  // 1

set_function :: (main: *VisualShaderNodeFloatFunc, func: VisualShaderNodeFloatFunc.Function) { sys_call("VisualShaderNodeFloatFunc", "set_function", 536026177, Nil, main.p_object, func);  }  // 0
get_function :: (main: *VisualShaderNodeFloatFunc) -> VisualShaderNodeFloatFunc.Function { call_ret := cast(*VisualShaderNodeFloatFunc.Function) sys_call("VisualShaderNodeFloatFunc", "get_function", 2033948868, VisualShaderNodeFloatFunc.Function, main.p_object); return call_ret.*; }  // 1

set_operator :: (main: *VisualShaderNodeFloatOp, op: VisualShaderNodeFloatOp.Operator) { sys_call("VisualShaderNodeFloatOp", "set_operator", 2488468047, Nil, main.p_object, op);  }  // 0
get_operator :: (main: *VisualShaderNodeFloatOp) -> VisualShaderNodeFloatOp.Operator { call_ret := cast(*VisualShaderNodeFloatOp.Operator) sys_call("VisualShaderNodeFloatOp", "get_operator", 1867979390, VisualShaderNodeFloatOp.Operator, main.p_object); return call_ret.*; }  // 1

set_hint :: (main: *VisualShaderNodeFloatParameter, hint: VisualShaderNodeFloatParameter.Hint) { sys_call("VisualShaderNodeFloatParameter", "set_hint", 3712586466, Nil, main.p_object, hint);  }  // 0
get_hint :: (main: *VisualShaderNodeFloatParameter) -> VisualShaderNodeFloatParameter.Hint { call_ret := cast(*VisualShaderNodeFloatParameter.Hint) sys_call("VisualShaderNodeFloatParameter", "get_hint", 3042240429, VisualShaderNodeFloatParameter.Hint, main.p_object); return call_ret.*; }  // 1
set_min :: (main: *VisualShaderNodeFloatParameter, value: float) { sys_call("VisualShaderNodeFloatParameter", "set_min", 373806689, Nil, main.p_object, value);  }  // 2
get_min :: (main: *VisualShaderNodeFloatParameter) -> float { call_ret := cast(*float) sys_call("VisualShaderNodeFloatParameter", "get_min", 1740695150, float, main.p_object); return call_ret.*; }  // 3
set_max :: (main: *VisualShaderNodeFloatParameter, value: float) { sys_call("VisualShaderNodeFloatParameter", "set_max", 373806689, Nil, main.p_object, value);  }  // 4
get_max :: (main: *VisualShaderNodeFloatParameter) -> float { call_ret := cast(*float) sys_call("VisualShaderNodeFloatParameter", "get_max", 1740695150, float, main.p_object); return call_ret.*; }  // 5
set_step :: (main: *VisualShaderNodeFloatParameter, value: float) { sys_call("VisualShaderNodeFloatParameter", "set_step", 373806689, Nil, main.p_object, value);  }  // 6
get_step :: (main: *VisualShaderNodeFloatParameter) -> float { call_ret := cast(*float) sys_call("VisualShaderNodeFloatParameter", "get_step", 1740695150, float, main.p_object); return call_ret.*; }  // 7
set_default_value_enabled :: (main: *VisualShaderNodeFloatParameter, enabled: bool) { sys_call("VisualShaderNodeFloatParameter", "set_default_value_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 8
is_default_value_enabled :: (main: *VisualShaderNodeFloatParameter) -> bool { call_ret := cast(*bool) sys_call("VisualShaderNodeFloatParameter", "is_default_value_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 9
set_default_value :: (main: *VisualShaderNodeFloatParameter, value: float) { sys_call("VisualShaderNodeFloatParameter", "set_default_value", 373806689, Nil, main.p_object, value);  }  // 10
get_default_value :: (main: *VisualShaderNodeFloatParameter) -> float { call_ret := cast(*float) sys_call("VisualShaderNodeFloatParameter", "get_default_value", 1740695150, float, main.p_object); return call_ret.*; }  // 11

set_title :: (main: *VisualShaderNodeFrame, title: string) { sys_call("VisualShaderNodeFrame", "set_title", 83702148, Nil, main.p_object, title);  }  // 0
get_title :: (main: *VisualShaderNodeFrame) -> gstring { call_ret := cast(*gstring) sys_call("VisualShaderNodeFrame", "get_title", 201670096, gstring, main.p_object); return call_ret.*; }  // 1
set_tint_color_enabled :: (main: *VisualShaderNodeFrame, enable: bool) { sys_call("VisualShaderNodeFrame", "set_tint_color_enabled", 2586408642, Nil, main.p_object, enable);  }  // 2
is_tint_color_enabled :: (main: *VisualShaderNodeFrame) -> bool { call_ret := cast(*bool) sys_call("VisualShaderNodeFrame", "is_tint_color_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 3
set_tint_color :: (main: *VisualShaderNodeFrame, color: Color) { sys_call("VisualShaderNodeFrame", "set_tint_color", 2920490490, Nil, main.p_object, color);  }  // 4
get_tint_color :: (main: *VisualShaderNodeFrame) -> Color { call_ret := cast(*Color) sys_call("VisualShaderNodeFrame", "get_tint_color", 3444240500, Color, main.p_object); return call_ret.*; }  // 5
set_autoshrink_enabled :: (main: *VisualShaderNodeFrame, enable: bool) { sys_call("VisualShaderNodeFrame", "set_autoshrink_enabled", 2586408642, Nil, main.p_object, enable);  }  // 6
is_autoshrink_enabled :: (main: *VisualShaderNodeFrame) -> bool { call_ret := cast(*bool) sys_call("VisualShaderNodeFrame", "is_autoshrink_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 7
add_attached_node :: (main: *VisualShaderNodeFrame, node: int) { sys_call("VisualShaderNodeFrame", "add_attached_node", 1286410249, Nil, main.p_object, node);  }  // 8
remove_attached_node :: (main: *VisualShaderNodeFrame, node: int) { sys_call("VisualShaderNodeFrame", "remove_attached_node", 1286410249, Nil, main.p_object, node);  }  // 9
set_attached_nodes :: (main: *VisualShaderNodeFrame, attached_nodes: PackedInt32Array) { sys_call("VisualShaderNodeFrame", "set_attached_nodes", 3614634198, Nil, main.p_object, attached_nodes);  }  // 10
get_attached_nodes :: (main: *VisualShaderNodeFrame) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("VisualShaderNodeFrame", "get_attached_nodes", 1930428628, PackedInt32Array, main.p_object); return call_ret.*; }  // 11



set_inputs :: (main: *VisualShaderNodeGroupBase, inputs: string) { sys_call("VisualShaderNodeGroupBase", "set_inputs", 83702148, Nil, main.p_object, inputs);  }  // 0
get_inputs :: (main: *VisualShaderNodeGroupBase) -> gstring { call_ret := cast(*gstring) sys_call("VisualShaderNodeGroupBase", "get_inputs", 201670096, gstring, main.p_object); return call_ret.*; }  // 1
set_outputs :: (main: *VisualShaderNodeGroupBase, outputs: string) { sys_call("VisualShaderNodeGroupBase", "set_outputs", 83702148, Nil, main.p_object, outputs);  }  // 2
get_outputs :: (main: *VisualShaderNodeGroupBase) -> gstring { call_ret := cast(*gstring) sys_call("VisualShaderNodeGroupBase", "get_outputs", 201670096, gstring, main.p_object); return call_ret.*; }  // 3
is_valid_port_name :: (main: *VisualShaderNodeGroupBase, name: string) -> bool { call_ret := cast(*bool) sys_call("VisualShaderNodeGroupBase", "is_valid_port_name", 3927539163, bool, main.p_object, name); return call_ret.*; }  // 4
add_input_port :: (main: *VisualShaderNodeGroupBase, id: int, type: int, name: string) { sys_call("VisualShaderNodeGroupBase", "add_input_port", 2285447957, Nil, main.p_object, id, type, name);  }  // 5
remove_input_port :: (main: *VisualShaderNodeGroupBase, id: int) { sys_call("VisualShaderNodeGroupBase", "remove_input_port", 1286410249, Nil, main.p_object, id);  }  // 6
get_input_port_count :: (main: *VisualShaderNodeGroupBase) -> int { call_ret := cast(*int) sys_call("VisualShaderNodeGroupBase", "get_input_port_count", 3905245786, int, main.p_object); return call_ret.*; }  // 7
has_input_port :: (main: *VisualShaderNodeGroupBase, id: int) -> bool { call_ret := cast(*bool) sys_call("VisualShaderNodeGroupBase", "has_input_port", 1116898809, bool, main.p_object, id); return call_ret.*; }  // 8
clear_input_ports :: (main: *VisualShaderNodeGroupBase) { sys_call("VisualShaderNodeGroupBase", "clear_input_ports", 3218959716, Nil, main.p_object);  }  // 9
add_output_port :: (main: *VisualShaderNodeGroupBase, id: int, type: int, name: string) { sys_call("VisualShaderNodeGroupBase", "add_output_port", 2285447957, Nil, main.p_object, id, type, name);  }  // 10
remove_output_port :: (main: *VisualShaderNodeGroupBase, id: int) { sys_call("VisualShaderNodeGroupBase", "remove_output_port", 1286410249, Nil, main.p_object, id);  }  // 11
get_output_port_count :: (main: *VisualShaderNodeGroupBase) -> int { call_ret := cast(*int) sys_call("VisualShaderNodeGroupBase", "get_output_port_count", 3905245786, int, main.p_object); return call_ret.*; }  // 12
has_output_port :: (main: *VisualShaderNodeGroupBase, id: int) -> bool { call_ret := cast(*bool) sys_call("VisualShaderNodeGroupBase", "has_output_port", 1116898809, bool, main.p_object, id); return call_ret.*; }  // 13
clear_output_ports :: (main: *VisualShaderNodeGroupBase) { sys_call("VisualShaderNodeGroupBase", "clear_output_ports", 3218959716, Nil, main.p_object);  }  // 14
set_input_port_name :: (main: *VisualShaderNodeGroupBase, id: int, name: string) { sys_call("VisualShaderNodeGroupBase", "set_input_port_name", 501894301, Nil, main.p_object, id, name);  }  // 15
set_input_port_type :: (main: *VisualShaderNodeGroupBase, id: int, type: int) { sys_call("VisualShaderNodeGroupBase", "set_input_port_type", 3937882851, Nil, main.p_object, id, type);  }  // 16
set_output_port_name :: (main: *VisualShaderNodeGroupBase, id: int, name: string) { sys_call("VisualShaderNodeGroupBase", "set_output_port_name", 501894301, Nil, main.p_object, id, name);  }  // 17
set_output_port_type :: (main: *VisualShaderNodeGroupBase, id: int, type: int) { sys_call("VisualShaderNodeGroupBase", "set_output_port_type", 3937882851, Nil, main.p_object, id, type);  }  // 18
get_free_input_port_id :: (main: *VisualShaderNodeGroupBase) -> int { call_ret := cast(*int) sys_call("VisualShaderNodeGroupBase", "get_free_input_port_id", 3905245786, int, main.p_object); return call_ret.*; }  // 19
get_free_output_port_id :: (main: *VisualShaderNodeGroupBase) -> int { call_ret := cast(*int) sys_call("VisualShaderNodeGroupBase", "get_free_output_port_id", 3905245786, int, main.p_object); return call_ret.*; }  // 20


set_input_name :: (main: *VisualShaderNodeInput, name: string) { sys_call("VisualShaderNodeInput", "set_input_name", 83702148, Nil, main.p_object, name);  }  // 0
get_input_name :: (main: *VisualShaderNodeInput) -> gstring { call_ret := cast(*gstring) sys_call("VisualShaderNodeInput", "get_input_name", 201670096, gstring, main.p_object); return call_ret.*; }  // 1
get_input_real_name :: (main: *VisualShaderNodeInput) -> gstring { call_ret := cast(*gstring) sys_call("VisualShaderNodeInput", "get_input_real_name", 201670096, gstring, main.p_object); return call_ret.*; }  // 2

set_constant :: (main: *VisualShaderNodeIntConstant, constant: int) { sys_call("VisualShaderNodeIntConstant", "set_constant", 1286410249, Nil, main.p_object, constant);  }  // 0
get_constant :: (main: *VisualShaderNodeIntConstant) -> int { call_ret := cast(*int) sys_call("VisualShaderNodeIntConstant", "get_constant", 3905245786, int, main.p_object); return call_ret.*; }  // 1

set_function :: (main: *VisualShaderNodeIntFunc, func: VisualShaderNodeIntFunc.Function) { sys_call("VisualShaderNodeIntFunc", "set_function", 424195284, Nil, main.p_object, func);  }  // 0
get_function :: (main: *VisualShaderNodeIntFunc) -> VisualShaderNodeIntFunc.Function { call_ret := cast(*VisualShaderNodeIntFunc.Function) sys_call("VisualShaderNodeIntFunc", "get_function", 2753496911, VisualShaderNodeIntFunc.Function, main.p_object); return call_ret.*; }  // 1

set_operator :: (main: *VisualShaderNodeIntOp, op: VisualShaderNodeIntOp.Operator) { sys_call("VisualShaderNodeIntOp", "set_operator", 1677909323, Nil, main.p_object, op);  }  // 0
get_operator :: (main: *VisualShaderNodeIntOp) -> VisualShaderNodeIntOp.Operator { call_ret := cast(*VisualShaderNodeIntOp.Operator) sys_call("VisualShaderNodeIntOp", "get_operator", 1236987913, VisualShaderNodeIntOp.Operator, main.p_object); return call_ret.*; }  // 1

set_hint :: (main: *VisualShaderNodeIntParameter, hint: VisualShaderNodeIntParameter.Hint) { sys_call("VisualShaderNodeIntParameter", "set_hint", 2540512075, Nil, main.p_object, hint);  }  // 0
get_hint :: (main: *VisualShaderNodeIntParameter) -> VisualShaderNodeIntParameter.Hint { call_ret := cast(*VisualShaderNodeIntParameter.Hint) sys_call("VisualShaderNodeIntParameter", "get_hint", 4250814924, VisualShaderNodeIntParameter.Hint, main.p_object); return call_ret.*; }  // 1
set_min :: (main: *VisualShaderNodeIntParameter, value: int) { sys_call("VisualShaderNodeIntParameter", "set_min", 1286410249, Nil, main.p_object, value);  }  // 2
get_min :: (main: *VisualShaderNodeIntParameter) -> int { call_ret := cast(*int) sys_call("VisualShaderNodeIntParameter", "get_min", 3905245786, int, main.p_object); return call_ret.*; }  // 3
set_max :: (main: *VisualShaderNodeIntParameter, value: int) { sys_call("VisualShaderNodeIntParameter", "set_max", 1286410249, Nil, main.p_object, value);  }  // 4
get_max :: (main: *VisualShaderNodeIntParameter) -> int { call_ret := cast(*int) sys_call("VisualShaderNodeIntParameter", "get_max", 3905245786, int, main.p_object); return call_ret.*; }  // 5
set_step :: (main: *VisualShaderNodeIntParameter, value: int) { sys_call("VisualShaderNodeIntParameter", "set_step", 1286410249, Nil, main.p_object, value);  }  // 6
get_step :: (main: *VisualShaderNodeIntParameter) -> int { call_ret := cast(*int) sys_call("VisualShaderNodeIntParameter", "get_step", 3905245786, int, main.p_object); return call_ret.*; }  // 7
set_enum_names :: (main: *VisualShaderNodeIntParameter, names: PackedStringArray) { sys_call("VisualShaderNodeIntParameter", "set_enum_names", 4015028928, Nil, main.p_object, names);  }  // 8
get_enum_names :: (main: *VisualShaderNodeIntParameter) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("VisualShaderNodeIntParameter", "get_enum_names", 1139954409, PackedStringArray, main.p_object); return call_ret.*; }  // 9
set_default_value_enabled :: (main: *VisualShaderNodeIntParameter, enabled: bool) { sys_call("VisualShaderNodeIntParameter", "set_default_value_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 10
is_default_value_enabled :: (main: *VisualShaderNodeIntParameter) -> bool { call_ret := cast(*bool) sys_call("VisualShaderNodeIntParameter", "is_default_value_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 11
set_default_value :: (main: *VisualShaderNodeIntParameter, value: int) { sys_call("VisualShaderNodeIntParameter", "set_default_value", 1286410249, Nil, main.p_object, value);  }  // 12
get_default_value :: (main: *VisualShaderNodeIntParameter) -> int { call_ret := cast(*int) sys_call("VisualShaderNodeIntParameter", "get_default_value", 3905245786, int, main.p_object); return call_ret.*; }  // 13

set_function :: (main: *VisualShaderNodeIs, func: VisualShaderNodeIs.Function) { sys_call("VisualShaderNodeIs", "set_function", 1438374690, Nil, main.p_object, func);  }  // 0
get_function :: (main: *VisualShaderNodeIs) -> VisualShaderNodeIs.Function { call_ret := cast(*VisualShaderNodeIs.Function) sys_call("VisualShaderNodeIs", "get_function", 580678557, VisualShaderNodeIs.Function, main.p_object); return call_ret.*; }  // 1


set_op_type :: (main: *VisualShaderNodeMix, op_type: VisualShaderNodeMix.OpType) { sys_call("VisualShaderNodeMix", "set_op_type", 3397501671, Nil, main.p_object, op_type);  }  // 0
get_op_type :: (main: *VisualShaderNodeMix) -> VisualShaderNodeMix.OpType { call_ret := cast(*VisualShaderNodeMix.OpType) sys_call("VisualShaderNodeMix", "get_op_type", 4013957297, VisualShaderNodeMix.OpType, main.p_object); return call_ret.*; }  // 1

set_op_type :: (main: *VisualShaderNodeMultiplyAdd, type: VisualShaderNodeMultiplyAdd.OpType) { sys_call("VisualShaderNodeMultiplyAdd", "set_op_type", 1409862380, Nil, main.p_object, type);  }  // 0
get_op_type :: (main: *VisualShaderNodeMultiplyAdd) -> VisualShaderNodeMultiplyAdd.OpType { call_ret := cast(*VisualShaderNodeMultiplyAdd.OpType) sys_call("VisualShaderNodeMultiplyAdd", "get_op_type", 2823201991, VisualShaderNodeMultiplyAdd.OpType, main.p_object); return call_ret.*; }  // 1



set_parameter_name :: (main: *VisualShaderNodeParameter, name: string) { sys_call("VisualShaderNodeParameter", "set_parameter_name", 83702148, Nil, main.p_object, name);  }  // 0
get_parameter_name :: (main: *VisualShaderNodeParameter) -> gstring { call_ret := cast(*gstring) sys_call("VisualShaderNodeParameter", "get_parameter_name", 201670096, gstring, main.p_object); return call_ret.*; }  // 1
set_qualifier :: (main: *VisualShaderNodeParameter, qualifier: VisualShaderNodeParameter.Qualifier) { sys_call("VisualShaderNodeParameter", "set_qualifier", 1276489447, Nil, main.p_object, qualifier);  }  // 2
get_qualifier :: (main: *VisualShaderNodeParameter) -> VisualShaderNodeParameter.Qualifier { call_ret := cast(*VisualShaderNodeParameter.Qualifier) sys_call("VisualShaderNodeParameter", "get_qualifier", 3558406205, VisualShaderNodeParameter.Qualifier, main.p_object); return call_ret.*; }  // 3

set_parameter_name :: (main: *VisualShaderNodeParameterRef, name: string) { sys_call("VisualShaderNodeParameterRef", "set_parameter_name", 83702148, Nil, main.p_object, name);  }  // 0
get_parameter_name :: (main: *VisualShaderNodeParameterRef) -> gstring { call_ret := cast(*gstring) sys_call("VisualShaderNodeParameterRef", "get_parameter_name", 201670096, gstring, main.p_object); return call_ret.*; }  // 1

set_mode :: (main: *VisualShaderNodeParticleAccelerator, mode: VisualShaderNodeParticleAccelerator.Mode) { sys_call("VisualShaderNodeParticleAccelerator", "set_mode", 3457585749, Nil, main.p_object, mode);  }  // 0
get_mode :: (main: *VisualShaderNodeParticleAccelerator) -> VisualShaderNodeParticleAccelerator.Mode { call_ret := cast(*VisualShaderNodeParticleAccelerator.Mode) sys_call("VisualShaderNodeParticleAccelerator", "get_mode", 2660365633, VisualShaderNodeParticleAccelerator.Mode, main.p_object); return call_ret.*; }  // 1



set_flags :: (main: *VisualShaderNodeParticleEmit, flags: VisualShaderNodeParticleEmit.EmitFlags) { sys_call("VisualShaderNodeParticleEmit", "set_flags", 3960756792, Nil, main.p_object, flags);  }  // 0
get_flags :: (main: *VisualShaderNodeParticleEmit) -> VisualShaderNodeParticleEmit.EmitFlags { call_ret := cast(*VisualShaderNodeParticleEmit.EmitFlags) sys_call("VisualShaderNodeParticleEmit", "get_flags", 171277835, VisualShaderNodeParticleEmit.EmitFlags, main.p_object); return call_ret.*; }  // 1

set_mode_2d :: (main: *VisualShaderNodeParticleEmitter, enabled: bool) { sys_call("VisualShaderNodeParticleEmitter", "set_mode_2d", 2586408642, Nil, main.p_object, enabled);  }  // 0
is_mode_2d :: (main: *VisualShaderNodeParticleEmitter) -> bool { call_ret := cast(*bool) sys_call("VisualShaderNodeParticleEmitter", "is_mode_2d", 36873697, bool, main.p_object); return call_ret.*; }  // 1

set_mesh :: (main: *VisualShaderNodeParticleMeshEmitter, mesh: Mesh) { sys_call("VisualShaderNodeParticleMeshEmitter", "set_mesh", 194775623, Nil, main.p_object, mesh);  }  // 0
get_mesh :: (main: *VisualShaderNodeParticleMeshEmitter) -> *Mesh { call_ret := cast(*Mesh) sys_call("VisualShaderNodeParticleMeshEmitter", "get_mesh", 1808005922, Mesh, main.p_object); return call_ret; }  // 1
set_use_all_surfaces :: (main: *VisualShaderNodeParticleMeshEmitter, enabled: bool) { sys_call("VisualShaderNodeParticleMeshEmitter", "set_use_all_surfaces", 2586408642, Nil, main.p_object, enabled);  }  // 2
is_use_all_surfaces :: (main: *VisualShaderNodeParticleMeshEmitter) -> bool { call_ret := cast(*bool) sys_call("VisualShaderNodeParticleMeshEmitter", "is_use_all_surfaces", 36873697, bool, main.p_object); return call_ret.*; }  // 3
set_surface_index :: (main: *VisualShaderNodeParticleMeshEmitter, surface_index: int) { sys_call("VisualShaderNodeParticleMeshEmitter", "set_surface_index", 1286410249, Nil, main.p_object, surface_index);  }  // 4
get_surface_index :: (main: *VisualShaderNodeParticleMeshEmitter) -> int { call_ret := cast(*int) sys_call("VisualShaderNodeParticleMeshEmitter", "get_surface_index", 3905245786, int, main.p_object); return call_ret.*; }  // 5

set_degrees_mode :: (main: *VisualShaderNodeParticleMultiplyByAxisAngle, enabled: bool) { sys_call("VisualShaderNodeParticleMultiplyByAxisAngle", "set_degrees_mode", 2586408642, Nil, main.p_object, enabled);  }  // 0
is_degrees_mode :: (main: *VisualShaderNodeParticleMultiplyByAxisAngle) -> bool { call_ret := cast(*bool) sys_call("VisualShaderNodeParticleMultiplyByAxisAngle", "is_degrees_mode", 36873697, bool, main.p_object); return call_ret.*; }  // 1


set_op_type :: (main: *VisualShaderNodeParticleRandomness, type: VisualShaderNodeParticleRandomness.OpType) { sys_call("VisualShaderNodeParticleRandomness", "set_op_type", 2060089061, Nil, main.p_object, type);  }  // 0
get_op_type :: (main: *VisualShaderNodeParticleRandomness) -> VisualShaderNodeParticleRandomness.OpType { call_ret := cast(*VisualShaderNodeParticleRandomness.OpType) sys_call("VisualShaderNodeParticleRandomness", "get_op_type", 3597061078, VisualShaderNodeParticleRandomness.OpType, main.p_object); return call_ret.*; }  // 1





set_op_type :: (main: *VisualShaderNodeRemap, op_type: VisualShaderNodeRemap.OpType) { sys_call("VisualShaderNodeRemap", "set_op_type", 1703697889, Nil, main.p_object, op_type);  }  // 0
get_op_type :: (main: *VisualShaderNodeRemap) -> VisualShaderNodeRemap.OpType { call_ret := cast(*VisualShaderNodeRemap.OpType) sys_call("VisualShaderNodeRemap", "get_op_type", 1678380563, VisualShaderNodeRemap.OpType, main.p_object); return call_ret.*; }  // 1

get_port_type :: (main: *VisualShaderNodeReroute) -> VisualShaderNode.PortType { call_ret := cast(*VisualShaderNode.PortType) sys_call("VisualShaderNodeReroute", "get_port_type", 1287173294, VisualShaderNode.PortType, main.p_object); return call_ret.*; }  // 0

set_size :: (main: *VisualShaderNodeResizableBase, size: Vector2) { sys_call("VisualShaderNodeResizableBase", "set_size", 743155724, Nil, main.p_object, size);  }  // 0
get_size :: (main: *VisualShaderNodeResizableBase) -> Vector2 { call_ret := cast(*Vector2) sys_call("VisualShaderNodeResizableBase", "get_size", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 1




set_source :: (main: *VisualShaderNodeSample3D, value: VisualShaderNodeSample3D.Source) { sys_call("VisualShaderNodeSample3D", "set_source", 3315130991, Nil, main.p_object, value);  }  // 0
get_source :: (main: *VisualShaderNodeSample3D) -> VisualShaderNodeSample3D.Source { call_ret := cast(*VisualShaderNodeSample3D.Source) sys_call("VisualShaderNodeSample3D", "get_source", 1079494121, VisualShaderNodeSample3D.Source, main.p_object); return call_ret.*; }  // 1



set_op_type :: (main: *VisualShaderNodeSmoothStep, op_type: VisualShaderNodeSmoothStep.OpType) { sys_call("VisualShaderNodeSmoothStep", "set_op_type", 2427426148, Nil, main.p_object, op_type);  }  // 0
get_op_type :: (main: *VisualShaderNodeSmoothStep) -> VisualShaderNodeSmoothStep.OpType { call_ret := cast(*VisualShaderNodeSmoothStep.OpType) sys_call("VisualShaderNodeSmoothStep", "get_op_type", 359640855, VisualShaderNodeSmoothStep.OpType, main.p_object); return call_ret.*; }  // 1

set_op_type :: (main: *VisualShaderNodeStep, op_type: VisualShaderNodeStep.OpType) { sys_call("VisualShaderNodeStep", "set_op_type", 715172489, Nil, main.p_object, op_type);  }  // 0
get_op_type :: (main: *VisualShaderNodeStep) -> VisualShaderNodeStep.OpType { call_ret := cast(*VisualShaderNodeStep.OpType) sys_call("VisualShaderNodeStep", "get_op_type", 3274022781, VisualShaderNodeStep.OpType, main.p_object); return call_ret.*; }  // 1

set_op_type :: (main: *VisualShaderNodeSwitch, type: VisualShaderNodeSwitch.OpType) { sys_call("VisualShaderNodeSwitch", "set_op_type", 510471861, Nil, main.p_object, type);  }  // 0
get_op_type :: (main: *VisualShaderNodeSwitch) -> VisualShaderNodeSwitch.OpType { call_ret := cast(*VisualShaderNodeSwitch.OpType) sys_call("VisualShaderNodeSwitch", "get_op_type", 2517845071, VisualShaderNodeSwitch.OpType, main.p_object); return call_ret.*; }  // 1

set_source :: (main: *VisualShaderNodeTexture, value: VisualShaderNodeTexture.Source) { sys_call("VisualShaderNodeTexture", "set_source", 905262939, Nil, main.p_object, value);  }  // 0
get_source :: (main: *VisualShaderNodeTexture) -> VisualShaderNodeTexture.Source { call_ret := cast(*VisualShaderNodeTexture.Source) sys_call("VisualShaderNodeTexture", "get_source", 2896297444, VisualShaderNodeTexture.Source, main.p_object); return call_ret.*; }  // 1
set_texture :: (main: *VisualShaderNodeTexture, value: Texture2D) { sys_call("VisualShaderNodeTexture", "set_texture", 4051416890, Nil, main.p_object, value);  }  // 2
get_texture :: (main: *VisualShaderNodeTexture) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("VisualShaderNodeTexture", "get_texture", 3635182373, Texture2D, main.p_object); return call_ret; }  // 3
set_texture_type :: (main: *VisualShaderNodeTexture, value: VisualShaderNodeTexture.TextureType) { sys_call("VisualShaderNodeTexture", "set_texture_type", 986314081, Nil, main.p_object, value);  }  // 4
get_texture_type :: (main: *VisualShaderNodeTexture) -> VisualShaderNodeTexture.TextureType { call_ret := cast(*VisualShaderNodeTexture.TextureType) sys_call("VisualShaderNodeTexture", "get_texture_type", 3290430153, VisualShaderNodeTexture.TextureType, main.p_object); return call_ret.*; }  // 5

set_texture_array :: (main: *VisualShaderNodeTexture2DArray, value: TextureLayered) { sys_call("VisualShaderNodeTexture2DArray", "set_texture_array", 1278366092, Nil, main.p_object, value);  }  // 0
get_texture_array :: (main: *VisualShaderNodeTexture2DArray) -> *TextureLayered { call_ret := cast(*TextureLayered) sys_call("VisualShaderNodeTexture2DArray", "get_texture_array", 3984243839, TextureLayered, main.p_object); return call_ret; }  // 1



set_texture :: (main: *VisualShaderNodeTexture3D, value: Texture3D) { sys_call("VisualShaderNodeTexture3D", "set_texture", 1188404210, Nil, main.p_object, value);  }  // 0
get_texture :: (main: *VisualShaderNodeTexture3D) -> *Texture3D { call_ret := cast(*Texture3D) sys_call("VisualShaderNodeTexture3D", "get_texture", 373985333, Texture3D, main.p_object); return call_ret; }  // 1


set_texture_type :: (main: *VisualShaderNodeTextureParameter, type: VisualShaderNodeTextureParameter.TextureType) { sys_call("VisualShaderNodeTextureParameter", "set_texture_type", 2227296876, Nil, main.p_object, type);  }  // 0
get_texture_type :: (main: *VisualShaderNodeTextureParameter) -> VisualShaderNodeTextureParameter.TextureType { call_ret := cast(*VisualShaderNodeTextureParameter.TextureType) sys_call("VisualShaderNodeTextureParameter", "get_texture_type", 367922070, VisualShaderNodeTextureParameter.TextureType, main.p_object); return call_ret.*; }  // 1
set_color_default :: (main: *VisualShaderNodeTextureParameter, color: VisualShaderNodeTextureParameter.ColorDefault) { sys_call("VisualShaderNodeTextureParameter", "set_color_default", 4217624432, Nil, main.p_object, color);  }  // 2
get_color_default :: (main: *VisualShaderNodeTextureParameter) -> VisualShaderNodeTextureParameter.ColorDefault { call_ret := cast(*VisualShaderNodeTextureParameter.ColorDefault) sys_call("VisualShaderNodeTextureParameter", "get_color_default", 3837060134, VisualShaderNodeTextureParameter.ColorDefault, main.p_object); return call_ret.*; }  // 3
set_texture_filter :: (main: *VisualShaderNodeTextureParameter, filter: VisualShaderNodeTextureParameter.TextureFilter) { sys_call("VisualShaderNodeTextureParameter", "set_texture_filter", 2147684752, Nil, main.p_object, filter);  }  // 4
get_texture_filter :: (main: *VisualShaderNodeTextureParameter) -> VisualShaderNodeTextureParameter.TextureFilter { call_ret := cast(*VisualShaderNodeTextureParameter.TextureFilter) sys_call("VisualShaderNodeTextureParameter", "get_texture_filter", 4184490817, VisualShaderNodeTextureParameter.TextureFilter, main.p_object); return call_ret.*; }  // 5
set_texture_repeat :: (main: *VisualShaderNodeTextureParameter, repeat: VisualShaderNodeTextureParameter.TextureRepeat) { sys_call("VisualShaderNodeTextureParameter", "set_texture_repeat", 2036143070, Nil, main.p_object, repeat);  }  // 6
get_texture_repeat :: (main: *VisualShaderNodeTextureParameter) -> VisualShaderNodeTextureParameter.TextureRepeat { call_ret := cast(*VisualShaderNodeTextureParameter.TextureRepeat) sys_call("VisualShaderNodeTextureParameter", "get_texture_repeat", 1690132794, VisualShaderNodeTextureParameter.TextureRepeat, main.p_object); return call_ret.*; }  // 7
set_texture_source :: (main: *VisualShaderNodeTextureParameter, source: VisualShaderNodeTextureParameter.TextureSource) { sys_call("VisualShaderNodeTextureParameter", "set_texture_source", 1212687372, Nil, main.p_object, source);  }  // 8
get_texture_source :: (main: *VisualShaderNodeTextureParameter) -> VisualShaderNodeTextureParameter.TextureSource { call_ret := cast(*VisualShaderNodeTextureParameter.TextureSource) sys_call("VisualShaderNodeTextureParameter", "get_texture_source", 2039092262, VisualShaderNodeTextureParameter.TextureSource, main.p_object); return call_ret.*; }  // 9





set_constant :: (main: *VisualShaderNodeTransformConstant, constant: Transform3D) { sys_call("VisualShaderNodeTransformConstant", "set_constant", 2952846383, Nil, main.p_object, constant);  }  // 0
get_constant :: (main: *VisualShaderNodeTransformConstant) -> Transform3D { call_ret := cast(*Transform3D) sys_call("VisualShaderNodeTransformConstant", "get_constant", 3229777777, Transform3D, main.p_object); return call_ret.*; }  // 1


set_function :: (main: *VisualShaderNodeTransformFunc, func: VisualShaderNodeTransformFunc.Function) { sys_call("VisualShaderNodeTransformFunc", "set_function", 2900990409, Nil, main.p_object, func);  }  // 0
get_function :: (main: *VisualShaderNodeTransformFunc) -> VisualShaderNodeTransformFunc.Function { call_ret := cast(*VisualShaderNodeTransformFunc.Function) sys_call("VisualShaderNodeTransformFunc", "get_function", 2839926569, VisualShaderNodeTransformFunc.Function, main.p_object); return call_ret.*; }  // 1

set_operator :: (main: *VisualShaderNodeTransformOp, op: VisualShaderNodeTransformOp.Operator) { sys_call("VisualShaderNodeTransformOp", "set_operator", 2287310733, Nil, main.p_object, op);  }  // 0
get_operator :: (main: *VisualShaderNodeTransformOp) -> VisualShaderNodeTransformOp.Operator { call_ret := cast(*VisualShaderNodeTransformOp.Operator) sys_call("VisualShaderNodeTransformOp", "get_operator", 1238663601, VisualShaderNodeTransformOp.Operator, main.p_object); return call_ret.*; }  // 1

set_default_value_enabled :: (main: *VisualShaderNodeTransformParameter, enabled: bool) { sys_call("VisualShaderNodeTransformParameter", "set_default_value_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 0
is_default_value_enabled :: (main: *VisualShaderNodeTransformParameter) -> bool { call_ret := cast(*bool) sys_call("VisualShaderNodeTransformParameter", "is_default_value_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 1
set_default_value :: (main: *VisualShaderNodeTransformParameter, value: Transform3D) { sys_call("VisualShaderNodeTransformParameter", "set_default_value", 2952846383, Nil, main.p_object, value);  }  // 2
get_default_value :: (main: *VisualShaderNodeTransformParameter) -> Transform3D { call_ret := cast(*Transform3D) sys_call("VisualShaderNodeTransformParameter", "get_default_value", 3229777777, Transform3D, main.p_object); return call_ret.*; }  // 3

set_operator :: (main: *VisualShaderNodeTransformVecMult, op: VisualShaderNodeTransformVecMult.Operator) { sys_call("VisualShaderNodeTransformVecMult", "set_operator", 1785665912, Nil, main.p_object, op);  }  // 0
get_operator :: (main: *VisualShaderNodeTransformVecMult) -> VisualShaderNodeTransformVecMult.Operator { call_ret := cast(*VisualShaderNodeTransformVecMult.Operator) sys_call("VisualShaderNodeTransformVecMult", "get_operator", 1622088722, VisualShaderNodeTransformVecMult.Operator, main.p_object); return call_ret.*; }  // 1

set_constant :: (main: *VisualShaderNodeUIntConstant, constant: int) { sys_call("VisualShaderNodeUIntConstant", "set_constant", 1286410249, Nil, main.p_object, constant);  }  // 0
get_constant :: (main: *VisualShaderNodeUIntConstant) -> int { call_ret := cast(*int) sys_call("VisualShaderNodeUIntConstant", "get_constant", 3905245786, int, main.p_object); return call_ret.*; }  // 1

set_function :: (main: *VisualShaderNodeUIntFunc, func: VisualShaderNodeUIntFunc.Function) { sys_call("VisualShaderNodeUIntFunc", "set_function", 2273148961, Nil, main.p_object, func);  }  // 0
get_function :: (main: *VisualShaderNodeUIntFunc) -> VisualShaderNodeUIntFunc.Function { call_ret := cast(*VisualShaderNodeUIntFunc.Function) sys_call("VisualShaderNodeUIntFunc", "get_function", 4187123296, VisualShaderNodeUIntFunc.Function, main.p_object); return call_ret.*; }  // 1

set_operator :: (main: *VisualShaderNodeUIntOp, op: VisualShaderNodeUIntOp.Operator) { sys_call("VisualShaderNodeUIntOp", "set_operator", 3463048345, Nil, main.p_object, op);  }  // 0
get_operator :: (main: *VisualShaderNodeUIntOp) -> VisualShaderNodeUIntOp.Operator { call_ret := cast(*VisualShaderNodeUIntOp.Operator) sys_call("VisualShaderNodeUIntOp", "get_operator", 256631461, VisualShaderNodeUIntOp.Operator, main.p_object); return call_ret.*; }  // 1

set_default_value_enabled :: (main: *VisualShaderNodeUIntParameter, enabled: bool) { sys_call("VisualShaderNodeUIntParameter", "set_default_value_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 0
is_default_value_enabled :: (main: *VisualShaderNodeUIntParameter) -> bool { call_ret := cast(*bool) sys_call("VisualShaderNodeUIntParameter", "is_default_value_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 1
set_default_value :: (main: *VisualShaderNodeUIntParameter, value: int) { sys_call("VisualShaderNodeUIntParameter", "set_default_value", 1286410249, Nil, main.p_object, value);  }  // 2
get_default_value :: (main: *VisualShaderNodeUIntParameter) -> int { call_ret := cast(*int) sys_call("VisualShaderNodeUIntParameter", "get_default_value", 3905245786, int, main.p_object); return call_ret.*; }  // 3

set_function :: (main: *VisualShaderNodeUVFunc, func: VisualShaderNodeUVFunc.Function) { sys_call("VisualShaderNodeUVFunc", "set_function", 765791915, Nil, main.p_object, func);  }  // 0
get_function :: (main: *VisualShaderNodeUVFunc) -> VisualShaderNodeUVFunc.Function { call_ret := cast(*VisualShaderNodeUVFunc.Function) sys_call("VisualShaderNodeUVFunc", "get_function", 3772902164, VisualShaderNodeUVFunc.Function, main.p_object); return call_ret.*; }  // 1


set_varying_name :: (main: *VisualShaderNodeVarying, name: string) { sys_call("VisualShaderNodeVarying", "set_varying_name", 83702148, Nil, main.p_object, name);  }  // 0
get_varying_name :: (main: *VisualShaderNodeVarying) -> gstring { call_ret := cast(*gstring) sys_call("VisualShaderNodeVarying", "get_varying_name", 201670096, gstring, main.p_object); return call_ret.*; }  // 1
set_varying_type :: (main: *VisualShaderNodeVarying, type: VisualShader.VaryingType) { sys_call("VisualShaderNodeVarying", "set_varying_type", 3565867981, Nil, main.p_object, type);  }  // 2
get_varying_type :: (main: *VisualShaderNodeVarying) -> VisualShader.VaryingType { call_ret := cast(*VisualShader.VaryingType) sys_call("VisualShaderNodeVarying", "get_varying_type", 523183580, VisualShader.VaryingType, main.p_object); return call_ret.*; }  // 3



set_constant :: (main: *VisualShaderNodeVec2Constant, constant: Vector2) { sys_call("VisualShaderNodeVec2Constant", "set_constant", 743155724, Nil, main.p_object, constant);  }  // 0
get_constant :: (main: *VisualShaderNodeVec2Constant) -> Vector2 { call_ret := cast(*Vector2) sys_call("VisualShaderNodeVec2Constant", "get_constant", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 1

set_default_value_enabled :: (main: *VisualShaderNodeVec2Parameter, enabled: bool) { sys_call("VisualShaderNodeVec2Parameter", "set_default_value_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 0
is_default_value_enabled :: (main: *VisualShaderNodeVec2Parameter) -> bool { call_ret := cast(*bool) sys_call("VisualShaderNodeVec2Parameter", "is_default_value_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 1
set_default_value :: (main: *VisualShaderNodeVec2Parameter, value: Vector2) { sys_call("VisualShaderNodeVec2Parameter", "set_default_value", 743155724, Nil, main.p_object, value);  }  // 2
get_default_value :: (main: *VisualShaderNodeVec2Parameter) -> Vector2 { call_ret := cast(*Vector2) sys_call("VisualShaderNodeVec2Parameter", "get_default_value", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 3

set_constant :: (main: *VisualShaderNodeVec3Constant, constant: Vector3) { sys_call("VisualShaderNodeVec3Constant", "set_constant", 3460891852, Nil, main.p_object, constant);  }  // 0
get_constant :: (main: *VisualShaderNodeVec3Constant) -> Vector3 { call_ret := cast(*Vector3) sys_call("VisualShaderNodeVec3Constant", "get_constant", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 1

set_default_value_enabled :: (main: *VisualShaderNodeVec3Parameter, enabled: bool) { sys_call("VisualShaderNodeVec3Parameter", "set_default_value_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 0
is_default_value_enabled :: (main: *VisualShaderNodeVec3Parameter) -> bool { call_ret := cast(*bool) sys_call("VisualShaderNodeVec3Parameter", "is_default_value_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 1
set_default_value :: (main: *VisualShaderNodeVec3Parameter, value: Vector3) { sys_call("VisualShaderNodeVec3Parameter", "set_default_value", 3460891852, Nil, main.p_object, value);  }  // 2
get_default_value :: (main: *VisualShaderNodeVec3Parameter) -> Vector3 { call_ret := cast(*Vector3) sys_call("VisualShaderNodeVec3Parameter", "get_default_value", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 3

set_constant :: (main: *VisualShaderNodeVec4Constant, constant: Quaternion) { sys_call("VisualShaderNodeVec4Constant", "set_constant", 1727505552, Nil, main.p_object, constant);  }  // 0
get_constant :: (main: *VisualShaderNodeVec4Constant) -> Quaternion { call_ret := cast(*Quaternion) sys_call("VisualShaderNodeVec4Constant", "get_constant", 1222331677, Quaternion, main.p_object); return call_ret.*; }  // 1

set_default_value_enabled :: (main: *VisualShaderNodeVec4Parameter, enabled: bool) { sys_call("VisualShaderNodeVec4Parameter", "set_default_value_enabled", 2586408642, Nil, main.p_object, enabled);  }  // 0
is_default_value_enabled :: (main: *VisualShaderNodeVec4Parameter) -> bool { call_ret := cast(*bool) sys_call("VisualShaderNodeVec4Parameter", "is_default_value_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 1
set_default_value :: (main: *VisualShaderNodeVec4Parameter, value: Vector4) { sys_call("VisualShaderNodeVec4Parameter", "set_default_value", 643568085, Nil, main.p_object, value);  }  // 2
get_default_value :: (main: *VisualShaderNodeVec4Parameter) -> Vector4 { call_ret := cast(*Vector4) sys_call("VisualShaderNodeVec4Parameter", "get_default_value", 2435802345, Vector4, main.p_object); return call_ret.*; }  // 3

set_op_type :: (main: *VisualShaderNodeVectorBase, type: VisualShaderNodeVectorBase.OpType) { sys_call("VisualShaderNodeVectorBase", "set_op_type", 1692596998, Nil, main.p_object, type);  }  // 0
get_op_type :: (main: *VisualShaderNodeVectorBase) -> VisualShaderNodeVectorBase.OpType { call_ret := cast(*VisualShaderNodeVectorBase.OpType) sys_call("VisualShaderNodeVectorBase", "get_op_type", 2568738462, VisualShaderNodeVectorBase.OpType, main.p_object); return call_ret.*; }  // 1




set_function :: (main: *VisualShaderNodeVectorFunc, func: VisualShaderNodeVectorFunc.Function) { sys_call("VisualShaderNodeVectorFunc", "set_function", 629964457, Nil, main.p_object, func);  }  // 0
get_function :: (main: *VisualShaderNodeVectorFunc) -> VisualShaderNodeVectorFunc.Function { call_ret := cast(*VisualShaderNodeVectorFunc.Function) sys_call("VisualShaderNodeVectorFunc", "get_function", 4047776843, VisualShaderNodeVectorFunc.Function, main.p_object); return call_ret.*; }  // 1


set_operator :: (main: *VisualShaderNodeVectorOp, op: VisualShaderNodeVectorOp.Operator) { sys_call("VisualShaderNodeVectorOp", "set_operator", 3371507302, Nil, main.p_object, op);  }  // 0
get_operator :: (main: *VisualShaderNodeVectorOp) -> VisualShaderNodeVectorOp.Operator { call_ret := cast(*VisualShaderNodeVectorOp.Operator) sys_call("VisualShaderNodeVectorOp", "get_operator", 11793929, VisualShaderNodeVectorOp.Operator, main.p_object); return call_ret.*; }  // 1



set_probe_data :: (main: *VoxelGI, data: VoxelGIData) { sys_call("VoxelGI", "set_probe_data", 1637849675, Nil, main.p_object, data);  }  // 0
get_probe_data :: (main: *VoxelGI) -> *VoxelGIData { call_ret := cast(*VoxelGIData) sys_call("VoxelGI", "get_probe_data", 1730645405, VoxelGIData, main.p_object); return call_ret; }  // 1
set_subdiv :: (main: *VoxelGI, subdiv: VoxelGI.Subdiv) { sys_call("VoxelGI", "set_subdiv", 2240898472, Nil, main.p_object, subdiv);  }  // 2
get_subdiv :: (main: *VoxelGI) -> VoxelGI.Subdiv { call_ret := cast(*VoxelGI.Subdiv) sys_call("VoxelGI", "get_subdiv", 4261647950, VoxelGI.Subdiv, main.p_object); return call_ret.*; }  // 3
set_size :: (main: *VoxelGI, size: Vector3) { sys_call("VoxelGI", "set_size", 3460891852, Nil, main.p_object, size);  }  // 4
get_size :: (main: *VoxelGI) -> Vector3 { call_ret := cast(*Vector3) sys_call("VoxelGI", "get_size", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 5
set_camera_attributes :: (main: *VoxelGI, camera_attributes: CameraAttributes) { sys_call("VoxelGI", "set_camera_attributes", 2817810567, Nil, main.p_object, camera_attributes);  }  // 6
get_camera_attributes :: (main: *VoxelGI) -> *CameraAttributes { call_ret := cast(*CameraAttributes) sys_call("VoxelGI", "get_camera_attributes", 3921283215, CameraAttributes, main.p_object); return call_ret; }  // 7
bake :: (main: *VoxelGI) { sys_call("VoxelGI", "bake", 2781551026, Nil, main.p_object);  }  // 8
debug_bake :: (main: *VoxelGI) { sys_call("VoxelGI", "debug_bake", 3218959716, Nil, main.p_object);  }  // 9

allocate :: (main: *VoxelGIData, to_cell_xform: Transform3D, aabb: AABB, octree_size: Vector3, octree_cells: PackedByteArray, data_cells: PackedByteArray, distance_field: PackedByteArray, level_counts: PackedInt32Array) { sys_call("VoxelGIData", "allocate", 4041601946, Nil, main.p_object, to_cell_xform, aabb, octree_size, octree_cells, data_cells, distance_field, level_counts);  }  // 0
get_bounds :: (main: *VoxelGIData) -> AABB { call_ret := cast(*AABB) sys_call("VoxelGIData", "get_bounds", 1068685055, AABB, main.p_object); return call_ret.*; }  // 1
get_octree_size :: (main: *VoxelGIData) -> Vector3 { call_ret := cast(*Vector3) sys_call("VoxelGIData", "get_octree_size", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 2
get_to_cell_xform :: (main: *VoxelGIData) -> Transform3D { call_ret := cast(*Transform3D) sys_call("VoxelGIData", "get_to_cell_xform", 3229777777, Transform3D, main.p_object); return call_ret.*; }  // 3
get_octree_cells :: (main: *VoxelGIData) -> PackedByteArray { call_ret := cast(*PackedByteArray) sys_call("VoxelGIData", "get_octree_cells", 2362200018, PackedByteArray, main.p_object); return call_ret.*; }  // 4
get_data_cells :: (main: *VoxelGIData) -> PackedByteArray { call_ret := cast(*PackedByteArray) sys_call("VoxelGIData", "get_data_cells", 2362200018, PackedByteArray, main.p_object); return call_ret.*; }  // 5
get_level_counts :: (main: *VoxelGIData) -> PackedInt32Array { call_ret := cast(*PackedInt32Array) sys_call("VoxelGIData", "get_level_counts", 1930428628, PackedInt32Array, main.p_object); return call_ret.*; }  // 6
set_dynamic_range :: (main: *VoxelGIData, dynamic_range: float) { sys_call("VoxelGIData", "set_dynamic_range", 373806689, Nil, main.p_object, dynamic_range);  }  // 7
get_dynamic_range :: (main: *VoxelGIData) -> float { call_ret := cast(*float) sys_call("VoxelGIData", "get_dynamic_range", 1740695150, float, main.p_object); return call_ret.*; }  // 8
set_energy :: (main: *VoxelGIData, energy: float) { sys_call("VoxelGIData", "set_energy", 373806689, Nil, main.p_object, energy);  }  // 9
get_energy :: (main: *VoxelGIData) -> float { call_ret := cast(*float) sys_call("VoxelGIData", "get_energy", 1740695150, float, main.p_object); return call_ret.*; }  // 10
set_bias :: (main: *VoxelGIData, bias: float) { sys_call("VoxelGIData", "set_bias", 373806689, Nil, main.p_object, bias);  }  // 11
get_bias :: (main: *VoxelGIData) -> float { call_ret := cast(*float) sys_call("VoxelGIData", "get_bias", 1740695150, float, main.p_object); return call_ret.*; }  // 12
set_normal_bias :: (main: *VoxelGIData, bias: float) { sys_call("VoxelGIData", "set_normal_bias", 373806689, Nil, main.p_object, bias);  }  // 13
get_normal_bias :: (main: *VoxelGIData) -> float { call_ret := cast(*float) sys_call("VoxelGIData", "get_normal_bias", 1740695150, float, main.p_object); return call_ret.*; }  // 14
set_propagation :: (main: *VoxelGIData, propagation: float) { sys_call("VoxelGIData", "set_propagation", 373806689, Nil, main.p_object, propagation);  }  // 15
get_propagation :: (main: *VoxelGIData) -> float { call_ret := cast(*float) sys_call("VoxelGIData", "get_propagation", 1740695150, float, main.p_object); return call_ret.*; }  // 16
set_interior :: (main: *VoxelGIData, interior: bool) { sys_call("VoxelGIData", "set_interior", 2586408642, Nil, main.p_object, interior);  }  // 17
is_interior :: (main: *VoxelGIData) -> bool { call_ret := cast(*bool) sys_call("VoxelGIData", "is_interior", 36873697, bool, main.p_object); return call_ret.*; }  // 18
set_use_two_bounces :: (main: *VoxelGIData, enable: bool) { sys_call("VoxelGIData", "set_use_two_bounces", 2586408642, Nil, main.p_object, enable);  }  // 19
is_using_two_bounces :: (main: *VoxelGIData) -> bool { call_ret := cast(*bool) sys_call("VoxelGIData", "is_using_two_bounces", 36873697, bool, main.p_object); return call_ret.*; }  // 20

get_ref :: (main: *WeakRef) -> Variant { call_ret := cast(*Variant) sys_call("WeakRef", "get_ref", 1214101251, Variant, main.p_object); return call_ret.*; }  // 0

poll :: (main: *WebRTCDataChannel) -> Error { call_ret := cast(*Error) sys_call("WebRTCDataChannel", "poll", 166280745, Error, main.p_object); return call_ret.*; }  // 0
close :: (main: *WebRTCDataChannel) { sys_call("WebRTCDataChannel", "close", 3218959716, Nil, main.p_object);  }  // 1
was_string_packet :: (main: *WebRTCDataChannel) -> bool { call_ret := cast(*bool) sys_call("WebRTCDataChannel", "was_string_packet", 36873697, bool, main.p_object); return call_ret.*; }  // 2
set_write_mode :: (main: *WebRTCDataChannel, write_mode: WebRTCDataChannel.WriteMode) { sys_call("WebRTCDataChannel", "set_write_mode", 1999768052, Nil, main.p_object, write_mode);  }  // 3
get_write_mode :: (main: *WebRTCDataChannel) -> WebRTCDataChannel.WriteMode { call_ret := cast(*WebRTCDataChannel.WriteMode) sys_call("WebRTCDataChannel", "get_write_mode", 2848495172, WebRTCDataChannel.WriteMode, main.p_object); return call_ret.*; }  // 4
get_ready_state :: (main: *WebRTCDataChannel) -> WebRTCDataChannel.ChannelState { call_ret := cast(*WebRTCDataChannel.ChannelState) sys_call("WebRTCDataChannel", "get_ready_state", 3501143017, WebRTCDataChannel.ChannelState, main.p_object); return call_ret.*; }  // 5
get_label :: (main: *WebRTCDataChannel) -> gstring { call_ret := cast(*gstring) sys_call("WebRTCDataChannel", "get_label", 201670096, gstring, main.p_object); return call_ret.*; }  // 6
is_ordered :: (main: *WebRTCDataChannel) -> bool { call_ret := cast(*bool) sys_call("WebRTCDataChannel", "is_ordered", 36873697, bool, main.p_object); return call_ret.*; }  // 7
get_id :: (main: *WebRTCDataChannel) -> int { call_ret := cast(*int) sys_call("WebRTCDataChannel", "get_id", 3905245786, int, main.p_object); return call_ret.*; }  // 8
get_max_packet_life_time :: (main: *WebRTCDataChannel) -> int { call_ret := cast(*int) sys_call("WebRTCDataChannel", "get_max_packet_life_time", 3905245786, int, main.p_object); return call_ret.*; }  // 9
get_max_retransmits :: (main: *WebRTCDataChannel) -> int { call_ret := cast(*int) sys_call("WebRTCDataChannel", "get_max_retransmits", 3905245786, int, main.p_object); return call_ret.*; }  // 10
get_protocol :: (main: *WebRTCDataChannel) -> gstring { call_ret := cast(*gstring) sys_call("WebRTCDataChannel", "get_protocol", 201670096, gstring, main.p_object); return call_ret.*; }  // 11
is_negotiated :: (main: *WebRTCDataChannel) -> bool { call_ret := cast(*bool) sys_call("WebRTCDataChannel", "is_negotiated", 36873697, bool, main.p_object); return call_ret.*; }  // 12
get_buffered_amount :: (main: *WebRTCDataChannel) -> int { call_ret := cast(*int) sys_call("WebRTCDataChannel", "get_buffered_amount", 3905245786, int, main.p_object); return call_ret.*; }  // 13


create_server :: (main: *WebRTCMultiplayerPeer) -> Error { call_ret := cast(*Error) sys_call("WebRTCMultiplayerPeer", "create_server", 2865356025, Error, main.p_object); return call_ret.*; }  // 0
create_client :: (main: *WebRTCMultiplayerPeer, peer_id: int) -> Error { call_ret := cast(*Error) sys_call("WebRTCMultiplayerPeer", "create_client", 2641732907, Error, main.p_object, peer_id); return call_ret.*; }  // 1
create_mesh :: (main: *WebRTCMultiplayerPeer, peer_id: int) -> Error { call_ret := cast(*Error) sys_call("WebRTCMultiplayerPeer", "create_mesh", 2641732907, Error, main.p_object, peer_id); return call_ret.*; }  // 2
add_peer :: (main: *WebRTCMultiplayerPeer, peer: WebRTCPeerConnection, peer_id: int) -> Error { call_ret := cast(*Error) sys_call("WebRTCMultiplayerPeer", "add_peer", 4078953270, Error, main.p_object, peer, peer_id); return call_ret.*; }  // 3
remove_peer :: (main: *WebRTCMultiplayerPeer, peer_id: int) { sys_call("WebRTCMultiplayerPeer", "remove_peer", 1286410249, Nil, main.p_object, peer_id);  }  // 4
has_peer :: (main: *WebRTCMultiplayerPeer, peer_id: int) -> bool { call_ret := cast(*bool) sys_call("WebRTCMultiplayerPeer", "has_peer", 3067735520, bool, main.p_object, peer_id); return call_ret.*; }  // 5
get_peer :: (main: *WebRTCMultiplayerPeer, peer_id: int) -> Dictionary { call_ret := cast(*Dictionary) sys_call("WebRTCMultiplayerPeer", "get_peer", 3554694381, Dictionary, main.p_object, peer_id); return call_ret.*; }  // 6
get_peers :: (main: *WebRTCMultiplayerPeer) -> Dictionary { call_ret := cast(*Dictionary) sys_call("WebRTCMultiplayerPeer", "get_peers", 2382534195, Dictionary, main.p_object); return call_ret.*; }  // 7

set_default_extension :: (main: *WebRTCPeerConnection, extension_class: string) { sys_call("WebRTCPeerConnection", "set_default_extension", 3304788590, Nil, main.p_object, extension_class);  }  // 0
initialize :: (main: *WebRTCPeerConnection) -> Error { call_ret := cast(*Error) sys_call("WebRTCPeerConnection", "initialize", 2625064318, Error, main.p_object); return call_ret.*; }  // 1
create_data_channel :: (main: *WebRTCPeerConnection, label: string) -> *WebRTCDataChannel { call_ret := cast(*WebRTCDataChannel) sys_call("WebRTCPeerConnection", "create_data_channel", 1288557393, WebRTCDataChannel, main.p_object, label); return call_ret; }  // 2
create_offer :: (main: *WebRTCPeerConnection) -> Error { call_ret := cast(*Error) sys_call("WebRTCPeerConnection", "create_offer", 166280745, Error, main.p_object); return call_ret.*; }  // 3
set_local_description :: (main: *WebRTCPeerConnection, type: string, sdp: string) -> Error { call_ret := cast(*Error) sys_call("WebRTCPeerConnection", "set_local_description", 852856452, Error, main.p_object, type, sdp); return call_ret.*; }  // 4
set_remote_description :: (main: *WebRTCPeerConnection, type: string, sdp: string) -> Error { call_ret := cast(*Error) sys_call("WebRTCPeerConnection", "set_remote_description", 852856452, Error, main.p_object, type, sdp); return call_ret.*; }  // 5
add_ice_candidate :: (main: *WebRTCPeerConnection, media: string, index: int, name: string) -> Error { call_ret := cast(*Error) sys_call("WebRTCPeerConnection", "add_ice_candidate", 3958950400, Error, main.p_object, media, index, name); return call_ret.*; }  // 6
poll :: (main: *WebRTCPeerConnection) -> Error { call_ret := cast(*Error) sys_call("WebRTCPeerConnection", "poll", 166280745, Error, main.p_object); return call_ret.*; }  // 7
close :: (main: *WebRTCPeerConnection) { sys_call("WebRTCPeerConnection", "close", 3218959716, Nil, main.p_object);  }  // 8
get_connection_state :: (main: *WebRTCPeerConnection) -> WebRTCPeerConnection.ConnectionState { call_ret := cast(*WebRTCPeerConnection.ConnectionState) sys_call("WebRTCPeerConnection", "get_connection_state", 2275710506, WebRTCPeerConnection.ConnectionState, main.p_object); return call_ret.*; }  // 9
get_gathering_state :: (main: *WebRTCPeerConnection) -> WebRTCPeerConnection.GatheringState { call_ret := cast(*WebRTCPeerConnection.GatheringState) sys_call("WebRTCPeerConnection", "get_gathering_state", 4262591401, WebRTCPeerConnection.GatheringState, main.p_object); return call_ret.*; }  // 10
get_signaling_state :: (main: *WebRTCPeerConnection) -> WebRTCPeerConnection.SignalingState { call_ret := cast(*WebRTCPeerConnection.SignalingState) sys_call("WebRTCPeerConnection", "get_signaling_state", 3342956226, WebRTCPeerConnection.SignalingState, main.p_object); return call_ret.*; }  // 11


create_client :: (main: *WebSocketMultiplayerPeer, url: string) -> Error { call_ret := cast(*Error) sys_call("WebSocketMultiplayerPeer", "create_client", 1966198364, Error, main.p_object, url); return call_ret.*; }  // 0
create_server :: (main: *WebSocketMultiplayerPeer, port: int) -> Error { call_ret := cast(*Error) sys_call("WebSocketMultiplayerPeer", "create_server", 2400822951, Error, main.p_object, port); return call_ret.*; }  // 1
get_peer :: (main: *WebSocketMultiplayerPeer, peer_id: int) -> *WebSocketPeer { call_ret := cast(*WebSocketPeer) sys_call("WebSocketMultiplayerPeer", "get_peer", 1381378851, WebSocketPeer, main.p_object, peer_id); return call_ret; }  // 2
get_peer_address :: (main: *WebSocketMultiplayerPeer, id: int) -> gstring { call_ret := cast(*gstring) sys_call("WebSocketMultiplayerPeer", "get_peer_address", 844755477, gstring, main.p_object, id); return call_ret.*; }  // 3
get_peer_port :: (main: *WebSocketMultiplayerPeer, id: int) -> int { call_ret := cast(*int) sys_call("WebSocketMultiplayerPeer", "get_peer_port", 923996154, int, main.p_object, id); return call_ret.*; }  // 4
get_supported_protocols :: (main: *WebSocketMultiplayerPeer) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("WebSocketMultiplayerPeer", "get_supported_protocols", 1139954409, PackedStringArray, main.p_object); return call_ret.*; }  // 5
set_supported_protocols :: (main: *WebSocketMultiplayerPeer, protocols: PackedStringArray) { sys_call("WebSocketMultiplayerPeer", "set_supported_protocols", 4015028928, Nil, main.p_object, protocols);  }  // 6
get_handshake_headers :: (main: *WebSocketMultiplayerPeer) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("WebSocketMultiplayerPeer", "get_handshake_headers", 1139954409, PackedStringArray, main.p_object); return call_ret.*; }  // 7
set_handshake_headers :: (main: *WebSocketMultiplayerPeer, protocols: PackedStringArray) { sys_call("WebSocketMultiplayerPeer", "set_handshake_headers", 4015028928, Nil, main.p_object, protocols);  }  // 8
get_inbound_buffer_size :: (main: *WebSocketMultiplayerPeer) -> int { call_ret := cast(*int) sys_call("WebSocketMultiplayerPeer", "get_inbound_buffer_size", 3905245786, int, main.p_object); return call_ret.*; }  // 9
set_inbound_buffer_size :: (main: *WebSocketMultiplayerPeer, buffer_size: int) { sys_call("WebSocketMultiplayerPeer", "set_inbound_buffer_size", 1286410249, Nil, main.p_object, buffer_size);  }  // 10
get_outbound_buffer_size :: (main: *WebSocketMultiplayerPeer) -> int { call_ret := cast(*int) sys_call("WebSocketMultiplayerPeer", "get_outbound_buffer_size", 3905245786, int, main.p_object); return call_ret.*; }  // 11
set_outbound_buffer_size :: (main: *WebSocketMultiplayerPeer, buffer_size: int) { sys_call("WebSocketMultiplayerPeer", "set_outbound_buffer_size", 1286410249, Nil, main.p_object, buffer_size);  }  // 12
get_handshake_timeout :: (main: *WebSocketMultiplayerPeer) -> float { call_ret := cast(*float) sys_call("WebSocketMultiplayerPeer", "get_handshake_timeout", 1740695150, float, main.p_object); return call_ret.*; }  // 13
set_handshake_timeout :: (main: *WebSocketMultiplayerPeer, timeout: float) { sys_call("WebSocketMultiplayerPeer", "set_handshake_timeout", 373806689, Nil, main.p_object, timeout);  }  // 14
set_max_queued_packets :: (main: *WebSocketMultiplayerPeer, max_queued_packets: int) { sys_call("WebSocketMultiplayerPeer", "set_max_queued_packets", 1286410249, Nil, main.p_object, max_queued_packets);  }  // 15
get_max_queued_packets :: (main: *WebSocketMultiplayerPeer) -> int { call_ret := cast(*int) sys_call("WebSocketMultiplayerPeer", "get_max_queued_packets", 3905245786, int, main.p_object); return call_ret.*; }  // 16

connect_to_url :: (main: *WebSocketPeer, url: string) -> Error { call_ret := cast(*Error) sys_call("WebSocketPeer", "connect_to_url", 1966198364, Error, main.p_object, url); return call_ret.*; }  // 0
accept_stream :: (main: *WebSocketPeer, stream: StreamPeer) -> Error { call_ret := cast(*Error) sys_call("WebSocketPeer", "accept_stream", 255125695, Error, main.p_object, stream); return call_ret.*; }  // 1
send :: (main: *WebSocketPeer, message: PackedByteArray) -> Error { call_ret := cast(*Error) sys_call("WebSocketPeer", "send", 2780360567, Error, main.p_object, message); return call_ret.*; }  // 2
send_text :: (main: *WebSocketPeer, message: string) -> Error { call_ret := cast(*Error) sys_call("WebSocketPeer", "send_text", 166001499, Error, main.p_object, message); return call_ret.*; }  // 3
was_string_packet :: (main: *WebSocketPeer) -> bool { call_ret := cast(*bool) sys_call("WebSocketPeer", "was_string_packet", 36873697, bool, main.p_object); return call_ret.*; }  // 4
poll :: (main: *WebSocketPeer) { sys_call("WebSocketPeer", "poll", 3218959716, Nil, main.p_object);  }  // 5
close :: (main: *WebSocketPeer) { sys_call("WebSocketPeer", "close", 1047156615, Nil, main.p_object);  }  // 6
get_connected_host :: (main: *WebSocketPeer) -> gstring { call_ret := cast(*gstring) sys_call("WebSocketPeer", "get_connected_host", 201670096, gstring, main.p_object); return call_ret.*; }  // 7
get_connected_port :: (main: *WebSocketPeer) -> int { call_ret := cast(*int) sys_call("WebSocketPeer", "get_connected_port", 3905245786, int, main.p_object); return call_ret.*; }  // 8
get_selected_protocol :: (main: *WebSocketPeer) -> gstring { call_ret := cast(*gstring) sys_call("WebSocketPeer", "get_selected_protocol", 201670096, gstring, main.p_object); return call_ret.*; }  // 9
get_requested_url :: (main: *WebSocketPeer) -> gstring { call_ret := cast(*gstring) sys_call("WebSocketPeer", "get_requested_url", 201670096, gstring, main.p_object); return call_ret.*; }  // 10
set_no_delay :: (main: *WebSocketPeer, enabled: bool) { sys_call("WebSocketPeer", "set_no_delay", 2586408642, Nil, main.p_object, enabled);  }  // 11
get_current_outbound_buffered_amount :: (main: *WebSocketPeer) -> int { call_ret := cast(*int) sys_call("WebSocketPeer", "get_current_outbound_buffered_amount", 3905245786, int, main.p_object); return call_ret.*; }  // 12
get_ready_state :: (main: *WebSocketPeer) -> WebSocketPeer.State { call_ret := cast(*WebSocketPeer.State) sys_call("WebSocketPeer", "get_ready_state", 346482985, WebSocketPeer.State, main.p_object); return call_ret.*; }  // 13
get_close_code :: (main: *WebSocketPeer) -> int { call_ret := cast(*int) sys_call("WebSocketPeer", "get_close_code", 3905245786, int, main.p_object); return call_ret.*; }  // 14
get_close_reason :: (main: *WebSocketPeer) -> gstring { call_ret := cast(*gstring) sys_call("WebSocketPeer", "get_close_reason", 201670096, gstring, main.p_object); return call_ret.*; }  // 15
get_supported_protocols :: (main: *WebSocketPeer) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("WebSocketPeer", "get_supported_protocols", 1139954409, PackedStringArray, main.p_object); return call_ret.*; }  // 16
set_supported_protocols :: (main: *WebSocketPeer, protocols: PackedStringArray) { sys_call("WebSocketPeer", "set_supported_protocols", 4015028928, Nil, main.p_object, protocols);  }  // 17
get_handshake_headers :: (main: *WebSocketPeer) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("WebSocketPeer", "get_handshake_headers", 1139954409, PackedStringArray, main.p_object); return call_ret.*; }  // 18
set_handshake_headers :: (main: *WebSocketPeer, protocols: PackedStringArray) { sys_call("WebSocketPeer", "set_handshake_headers", 4015028928, Nil, main.p_object, protocols);  }  // 19
get_inbound_buffer_size :: (main: *WebSocketPeer) -> int { call_ret := cast(*int) sys_call("WebSocketPeer", "get_inbound_buffer_size", 3905245786, int, main.p_object); return call_ret.*; }  // 20
set_inbound_buffer_size :: (main: *WebSocketPeer, buffer_size: int) { sys_call("WebSocketPeer", "set_inbound_buffer_size", 1286410249, Nil, main.p_object, buffer_size);  }  // 21
get_outbound_buffer_size :: (main: *WebSocketPeer) -> int { call_ret := cast(*int) sys_call("WebSocketPeer", "get_outbound_buffer_size", 3905245786, int, main.p_object); return call_ret.*; }  // 22
set_outbound_buffer_size :: (main: *WebSocketPeer, buffer_size: int) { sys_call("WebSocketPeer", "set_outbound_buffer_size", 1286410249, Nil, main.p_object, buffer_size);  }  // 23
set_max_queued_packets :: (main: *WebSocketPeer, buffer_size: int) { sys_call("WebSocketPeer", "set_max_queued_packets", 1286410249, Nil, main.p_object, buffer_size);  }  // 24
get_max_queued_packets :: (main: *WebSocketPeer) -> int { call_ret := cast(*int) sys_call("WebSocketPeer", "get_max_queued_packets", 3905245786, int, main.p_object); return call_ret.*; }  // 25
set_heartbeat_interval :: (main: *WebSocketPeer, interval: float) { sys_call("WebSocketPeer", "set_heartbeat_interval", 373806689, Nil, main.p_object, interval);  }  // 26
get_heartbeat_interval :: (main: *WebSocketPeer) -> float { call_ret := cast(*float) sys_call("WebSocketPeer", "get_heartbeat_interval", 1740695150, float, main.p_object); return call_ret.*; }  // 27

is_session_supported :: (main: *WebXRInterface, session_mode: string) { sys_call("WebXRInterface", "is_session_supported", 83702148, Nil, main.p_object, session_mode);  }  // 0
set_session_mode :: (main: *WebXRInterface, session_mode: string) { sys_call("WebXRInterface", "set_session_mode", 83702148, Nil, main.p_object, session_mode);  }  // 1
get_session_mode :: (main: *WebXRInterface) -> gstring { call_ret := cast(*gstring) sys_call("WebXRInterface", "get_session_mode", 201670096, gstring, main.p_object); return call_ret.*; }  // 2
set_required_features :: (main: *WebXRInterface, required_features: string) { sys_call("WebXRInterface", "set_required_features", 83702148, Nil, main.p_object, required_features);  }  // 3
get_required_features :: (main: *WebXRInterface) -> gstring { call_ret := cast(*gstring) sys_call("WebXRInterface", "get_required_features", 201670096, gstring, main.p_object); return call_ret.*; }  // 4
set_optional_features :: (main: *WebXRInterface, optional_features: string) { sys_call("WebXRInterface", "set_optional_features", 83702148, Nil, main.p_object, optional_features);  }  // 5
get_optional_features :: (main: *WebXRInterface) -> gstring { call_ret := cast(*gstring) sys_call("WebXRInterface", "get_optional_features", 201670096, gstring, main.p_object); return call_ret.*; }  // 6
get_reference_space_type :: (main: *WebXRInterface) -> gstring { call_ret := cast(*gstring) sys_call("WebXRInterface", "get_reference_space_type", 201670096, gstring, main.p_object); return call_ret.*; }  // 7
get_enabled_features :: (main: *WebXRInterface) -> gstring { call_ret := cast(*gstring) sys_call("WebXRInterface", "get_enabled_features", 201670096, gstring, main.p_object); return call_ret.*; }  // 8
set_requested_reference_space_types :: (main: *WebXRInterface, requested_reference_space_types: string) { sys_call("WebXRInterface", "set_requested_reference_space_types", 83702148, Nil, main.p_object, requested_reference_space_types);  }  // 9
get_requested_reference_space_types :: (main: *WebXRInterface) -> gstring { call_ret := cast(*gstring) sys_call("WebXRInterface", "get_requested_reference_space_types", 201670096, gstring, main.p_object); return call_ret.*; }  // 10
is_input_source_active :: (main: *WebXRInterface, input_source_id: int) -> bool { call_ret := cast(*bool) sys_call("WebXRInterface", "is_input_source_active", 1116898809, bool, main.p_object, input_source_id); return call_ret.*; }  // 11
get_input_source_tracker :: (main: *WebXRInterface, input_source_id: int) -> *XRControllerTracker { call_ret := cast(*XRControllerTracker) sys_call("WebXRInterface", "get_input_source_tracker", 399776966, XRControllerTracker, main.p_object, input_source_id); return call_ret; }  // 12
get_input_source_target_ray_mode :: (main: *WebXRInterface, input_source_id: int) -> WebXRInterface.TargetRayMode { call_ret := cast(*WebXRInterface.TargetRayMode) sys_call("WebXRInterface", "get_input_source_target_ray_mode", 2852387453, WebXRInterface.TargetRayMode, main.p_object, input_source_id); return call_ret.*; }  // 13
get_visibility_state :: (main: *WebXRInterface) -> gstring { call_ret := cast(*gstring) sys_call("WebXRInterface", "get_visibility_state", 201670096, gstring, main.p_object); return call_ret.*; }  // 14
get_display_refresh_rate :: (main: *WebXRInterface) -> float { call_ret := cast(*float) sys_call("WebXRInterface", "get_display_refresh_rate", 1740695150, float, main.p_object); return call_ret.*; }  // 15
set_display_refresh_rate :: (main: *WebXRInterface, refresh_rate: float) { sys_call("WebXRInterface", "set_display_refresh_rate", 373806689, Nil, main.p_object, refresh_rate);  }  // 16
get_available_display_refresh_rates :: (main: *WebXRInterface) -> Array { call_ret := cast(*Array) sys_call("WebXRInterface", "get_available_display_refresh_rates", 3995934104, Array, main.p_object); return call_ret.*; }  // 17

set_title :: (main: *Window, title: string) { sys_call("Window", "set_title", 83702148, Nil, main.p_object, title);  }  // 1
get_title :: (main: *Window) -> gstring { call_ret := cast(*gstring) sys_call("Window", "get_title", 201670096, gstring, main.p_object); return call_ret.*; }  // 2
get_window_id :: (main: *Window) -> int { call_ret := cast(*int) sys_call("Window", "get_window_id", 3905245786, int, main.p_object); return call_ret.*; }  // 3
set_initial_position :: (main: *Window, initial_position: Window.WindowInitialPosition) { sys_call("Window", "set_initial_position", 4084468099, Nil, main.p_object, initial_position);  }  // 4
get_initial_position :: (main: *Window) -> Window.WindowInitialPosition { call_ret := cast(*Window.WindowInitialPosition) sys_call("Window", "get_initial_position", 4294066647, Window.WindowInitialPosition, main.p_object); return call_ret.*; }  // 5
set_current_screen :: (main: *Window, index: int) { sys_call("Window", "set_current_screen", 1286410249, Nil, main.p_object, index);  }  // 6
get_current_screen :: (main: *Window) -> int { call_ret := cast(*int) sys_call("Window", "get_current_screen", 3905245786, int, main.p_object); return call_ret.*; }  // 7
set_position :: (main: *Window, position: Vector2i) { sys_call("Window", "set_position", 1130785943, Nil, main.p_object, position);  }  // 8
get_position :: (main: *Window) -> Vector2i { call_ret := cast(*Vector2i) sys_call("Window", "get_position", 3690982128, Vector2i, main.p_object); return call_ret.*; }  // 9
move_to_center :: (main: *Window) { sys_call("Window", "move_to_center", 3218959716, Nil, main.p_object);  }  // 10
set_size :: (main: *Window, size: Vector2i) { sys_call("Window", "set_size", 1130785943, Nil, main.p_object, size);  }  // 11
get_size :: (main: *Window) -> Vector2i { call_ret := cast(*Vector2i) sys_call("Window", "get_size", 3690982128, Vector2i, main.p_object); return call_ret.*; }  // 12
reset_size :: (main: *Window) { sys_call("Window", "reset_size", 3218959716, Nil, main.p_object);  }  // 13
get_position_with_decorations :: (main: *Window) -> Vector2i { call_ret := cast(*Vector2i) sys_call("Window", "get_position_with_decorations", 3690982128, Vector2i, main.p_object); return call_ret.*; }  // 14
get_size_with_decorations :: (main: *Window) -> Vector2i { call_ret := cast(*Vector2i) sys_call("Window", "get_size_with_decorations", 3690982128, Vector2i, main.p_object); return call_ret.*; }  // 15
set_max_size :: (main: *Window, max_size: Vector2i) { sys_call("Window", "set_max_size", 1130785943, Nil, main.p_object, max_size);  }  // 16
get_max_size :: (main: *Window) -> Vector2i { call_ret := cast(*Vector2i) sys_call("Window", "get_max_size", 3690982128, Vector2i, main.p_object); return call_ret.*; }  // 17
set_min_size :: (main: *Window, min_size: Vector2i) { sys_call("Window", "set_min_size", 1130785943, Nil, main.p_object, min_size);  }  // 18
get_min_size :: (main: *Window) -> Vector2i { call_ret := cast(*Vector2i) sys_call("Window", "get_min_size", 3690982128, Vector2i, main.p_object); return call_ret.*; }  // 19
set_mode :: (main: *Window, mode: Window.Mode) { sys_call("Window", "set_mode", 3095236531, Nil, main.p_object, mode);  }  // 20
get_mode :: (main: *Window) -> Window.Mode { call_ret := cast(*Window.Mode) sys_call("Window", "get_mode", 2566346114, Window.Mode, main.p_object); return call_ret.*; }  // 21
set_flag :: (main: *Window, flag: Window.Flags, enabled: bool) { sys_call("Window", "set_flag", 3426449779, Nil, main.p_object, flag, enabled);  }  // 22
get_flag :: (main: *Window, flag: Window.Flags) -> bool { call_ret := cast(*bool) sys_call("Window", "get_flag", 3062752289, bool, main.p_object, flag); return call_ret.*; }  // 23
is_maximize_allowed :: (main: *Window) -> bool { call_ret := cast(*bool) sys_call("Window", "is_maximize_allowed", 36873697, bool, main.p_object); return call_ret.*; }  // 24
request_attention :: (main: *Window) { sys_call("Window", "request_attention", 3218959716, Nil, main.p_object);  }  // 25
move_to_foreground :: (main: *Window) { sys_call("Window", "move_to_foreground", 3218959716, Nil, main.p_object);  }  // 26
set_visible :: (main: *Window, visible: bool) { sys_call("Window", "set_visible", 2586408642, Nil, main.p_object, visible);  }  // 27
is_visible :: (main: *Window) -> bool { call_ret := cast(*bool) sys_call("Window", "is_visible", 36873697, bool, main.p_object); return call_ret.*; }  // 28
hide :: (main: *Window) { sys_call("Window", "hide", 3218959716, Nil, main.p_object);  }  // 29
show :: (main: *Window) { sys_call("Window", "show", 3218959716, Nil, main.p_object);  }  // 30
set_transient :: (main: *Window, transient: bool) { sys_call("Window", "set_transient", 2586408642, Nil, main.p_object, transient);  }  // 31
is_transient :: (main: *Window) -> bool { call_ret := cast(*bool) sys_call("Window", "is_transient", 36873697, bool, main.p_object); return call_ret.*; }  // 32
set_transient_to_focused :: (main: *Window, enable: bool) { sys_call("Window", "set_transient_to_focused", 2586408642, Nil, main.p_object, enable);  }  // 33
is_transient_to_focused :: (main: *Window) -> bool { call_ret := cast(*bool) sys_call("Window", "is_transient_to_focused", 36873697, bool, main.p_object); return call_ret.*; }  // 34
set_exclusive :: (main: *Window, exclusive: bool) { sys_call("Window", "set_exclusive", 2586408642, Nil, main.p_object, exclusive);  }  // 35
is_exclusive :: (main: *Window) -> bool { call_ret := cast(*bool) sys_call("Window", "is_exclusive", 36873697, bool, main.p_object); return call_ret.*; }  // 36
set_unparent_when_invisible :: (main: *Window, unparent: bool) { sys_call("Window", "set_unparent_when_invisible", 2586408642, Nil, main.p_object, unparent);  }  // 37
can_draw :: (main: *Window) -> bool { call_ret := cast(*bool) sys_call("Window", "can_draw", 36873697, bool, main.p_object); return call_ret.*; }  // 38
has_focus :: (main: *Window) -> bool { call_ret := cast(*bool) sys_call("Window", "has_focus", 36873697, bool, main.p_object); return call_ret.*; }  // 39
grab_focus :: (main: *Window) { sys_call("Window", "grab_focus", 3218959716, Nil, main.p_object);  }  // 40
start_drag :: (main: *Window) { sys_call("Window", "start_drag", 3218959716, Nil, main.p_object);  }  // 41
start_resize :: (main: *Window, edge: DisplayServer.WindowResizeEdge) { sys_call("Window", "start_resize", 122288853, Nil, main.p_object, edge);  }  // 42
set_ime_active :: (main: *Window, active: bool) { sys_call("Window", "set_ime_active", 2586408642, Nil, main.p_object, active);  }  // 43
set_ime_position :: (main: *Window, position: Vector2i) { sys_call("Window", "set_ime_position", 1130785943, Nil, main.p_object, position);  }  // 44
is_embedded :: (main: *Window) -> bool { call_ret := cast(*bool) sys_call("Window", "is_embedded", 36873697, bool, main.p_object); return call_ret.*; }  // 45
get_contents_minimum_size :: (main: *Window) -> Vector2 { call_ret := cast(*Vector2) sys_call("Window", "get_contents_minimum_size", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 46
set_force_native :: (main: *Window, force_native: bool) { sys_call("Window", "set_force_native", 2586408642, Nil, main.p_object, force_native);  }  // 47
get_force_native :: (main: *Window) -> bool { call_ret := cast(*bool) sys_call("Window", "get_force_native", 36873697, bool, main.p_object); return call_ret.*; }  // 48
set_content_scale_size :: (main: *Window, size: Vector2i) { sys_call("Window", "set_content_scale_size", 1130785943, Nil, main.p_object, size);  }  // 49
get_content_scale_size :: (main: *Window) -> Vector2i { call_ret := cast(*Vector2i) sys_call("Window", "get_content_scale_size", 3690982128, Vector2i, main.p_object); return call_ret.*; }  // 50
set_content_scale_mode :: (main: *Window, mode: Window.ContentScaleMode) { sys_call("Window", "set_content_scale_mode", 2937716473, Nil, main.p_object, mode);  }  // 51
get_content_scale_mode :: (main: *Window) -> Window.ContentScaleMode { call_ret := cast(*Window.ContentScaleMode) sys_call("Window", "get_content_scale_mode", 161585230, Window.ContentScaleMode, main.p_object); return call_ret.*; }  // 52
set_content_scale_aspect :: (main: *Window, aspect: Window.ContentScaleAspect) { sys_call("Window", "set_content_scale_aspect", 2370399418, Nil, main.p_object, aspect);  }  // 53
get_content_scale_aspect :: (main: *Window) -> Window.ContentScaleAspect { call_ret := cast(*Window.ContentScaleAspect) sys_call("Window", "get_content_scale_aspect", 4158790715, Window.ContentScaleAspect, main.p_object); return call_ret.*; }  // 54
set_content_scale_stretch :: (main: *Window, stretch: Window.ContentScaleStretch) { sys_call("Window", "set_content_scale_stretch", 349355940, Nil, main.p_object, stretch);  }  // 55
get_content_scale_stretch :: (main: *Window) -> Window.ContentScaleStretch { call_ret := cast(*Window.ContentScaleStretch) sys_call("Window", "get_content_scale_stretch", 536857316, Window.ContentScaleStretch, main.p_object); return call_ret.*; }  // 56
set_keep_title_visible :: (main: *Window, title_visible: bool) { sys_call("Window", "set_keep_title_visible", 2586408642, Nil, main.p_object, title_visible);  }  // 57
get_keep_title_visible :: (main: *Window) -> bool { call_ret := cast(*bool) sys_call("Window", "get_keep_title_visible", 36873697, bool, main.p_object); return call_ret.*; }  // 58
set_content_scale_factor :: (main: *Window, factor: float) { sys_call("Window", "set_content_scale_factor", 373806689, Nil, main.p_object, factor);  }  // 59
get_content_scale_factor :: (main: *Window) -> float { call_ret := cast(*float) sys_call("Window", "get_content_scale_factor", 1740695150, float, main.p_object); return call_ret.*; }  // 60
set_use_font_oversampling :: (main: *Window, enable: bool) { sys_call("Window", "set_use_font_oversampling", 2586408642, Nil, main.p_object, enable);  }  // 61
is_using_font_oversampling :: (main: *Window) -> bool { call_ret := cast(*bool) sys_call("Window", "is_using_font_oversampling", 36873697, bool, main.p_object); return call_ret.*; }  // 62
set_mouse_passthrough_polygon :: (main: *Window, polygon: PackedVector2Array) { sys_call("Window", "set_mouse_passthrough_polygon", 1509147220, Nil, main.p_object, polygon);  }  // 63
get_mouse_passthrough_polygon :: (main: *Window) -> PackedVector2Array { call_ret := cast(*PackedVector2Array) sys_call("Window", "get_mouse_passthrough_polygon", 2961356807, PackedVector2Array, main.p_object); return call_ret.*; }  // 64
set_wrap_controls :: (main: *Window, enable: bool) { sys_call("Window", "set_wrap_controls", 2586408642, Nil, main.p_object, enable);  }  // 65
is_wrapping_controls :: (main: *Window) -> bool { call_ret := cast(*bool) sys_call("Window", "is_wrapping_controls", 36873697, bool, main.p_object); return call_ret.*; }  // 66
child_controls_changed :: (main: *Window) { sys_call("Window", "child_controls_changed", 3218959716, Nil, main.p_object);  }  // 67
set_theme :: (main: *Window, theme: Theme) { sys_call("Window", "set_theme", 2326690814, Nil, main.p_object, theme);  }  // 68
get_theme :: (main: *Window) -> *Theme { call_ret := cast(*Theme) sys_call("Window", "get_theme", 3846893731, Theme, main.p_object); return call_ret; }  // 69
set_theme_type_variation :: (main: *Window, theme_type: string) { sys_call("Window", "set_theme_type_variation", 3304788590, Nil, main.p_object, theme_type);  }  // 70
get_theme_type_variation :: (main: *Window) -> StringName { call_ret := cast(*StringName) sys_call("Window", "get_theme_type_variation", 2002593661, StringName, main.p_object); return call_ret.*; }  // 71
begin_bulk_theme_override :: (main: *Window) { sys_call("Window", "begin_bulk_theme_override", 3218959716, Nil, main.p_object);  }  // 72
end_bulk_theme_override :: (main: *Window) { sys_call("Window", "end_bulk_theme_override", 3218959716, Nil, main.p_object);  }  // 73
add_theme_icon_override :: (main: *Window, name: string, texture: Texture2D) { sys_call("Window", "add_theme_icon_override", 1373065600, Nil, main.p_object, name, texture);  }  // 74
add_theme_stylebox_override :: (main: *Window, name: string, stylebox: StyleBox) { sys_call("Window", "add_theme_stylebox_override", 4188838905, Nil, main.p_object, name, stylebox);  }  // 75
add_theme_font_override :: (main: *Window, name: string, font: Font) { sys_call("Window", "add_theme_font_override", 3518018674, Nil, main.p_object, name, font);  }  // 76
add_theme_font_size_override :: (main: *Window, name: string, font_size: int) { sys_call("Window", "add_theme_font_size_override", 2415702435, Nil, main.p_object, name, font_size);  }  // 77
add_theme_color_override :: (main: *Window, name: string, color: Color) { sys_call("Window", "add_theme_color_override", 4260178595, Nil, main.p_object, name, color);  }  // 78
add_theme_constant_override :: (main: *Window, name: string, constant: int) { sys_call("Window", "add_theme_constant_override", 2415702435, Nil, main.p_object, name, constant);  }  // 79
remove_theme_icon_override :: (main: *Window, name: string) { sys_call("Window", "remove_theme_icon_override", 3304788590, Nil, main.p_object, name);  }  // 80
remove_theme_stylebox_override :: (main: *Window, name: string) { sys_call("Window", "remove_theme_stylebox_override", 3304788590, Nil, main.p_object, name);  }  // 81
remove_theme_font_override :: (main: *Window, name: string) { sys_call("Window", "remove_theme_font_override", 3304788590, Nil, main.p_object, name);  }  // 82
remove_theme_font_size_override :: (main: *Window, name: string) { sys_call("Window", "remove_theme_font_size_override", 3304788590, Nil, main.p_object, name);  }  // 83
remove_theme_color_override :: (main: *Window, name: string) { sys_call("Window", "remove_theme_color_override", 3304788590, Nil, main.p_object, name);  }  // 84
remove_theme_constant_override :: (main: *Window, name: string) { sys_call("Window", "remove_theme_constant_override", 3304788590, Nil, main.p_object, name);  }  // 85
get_theme_icon :: (main: *Window, name: string) -> *Texture2D { call_ret := cast(*Texture2D) sys_call("Window", "get_theme_icon", 3163973443, Texture2D, main.p_object, name); return call_ret; }  // 86
get_theme_stylebox :: (main: *Window, name: string) -> *StyleBox { call_ret := cast(*StyleBox) sys_call("Window", "get_theme_stylebox", 604739069, StyleBox, main.p_object, name); return call_ret; }  // 87
get_theme_font :: (main: *Window, name: string) -> *Font { call_ret := cast(*Font) sys_call("Window", "get_theme_font", 2826986490, Font, main.p_object, name); return call_ret; }  // 88
get_theme_font_size :: (main: *Window, name: string) -> int { call_ret := cast(*int) sys_call("Window", "get_theme_font_size", 1327056374, int, main.p_object, name); return call_ret.*; }  // 89
get_theme_color :: (main: *Window, name: string) -> Color { call_ret := cast(*Color) sys_call("Window", "get_theme_color", 2798751242, Color, main.p_object, name); return call_ret.*; }  // 90
get_theme_constant :: (main: *Window, name: string) -> int { call_ret := cast(*int) sys_call("Window", "get_theme_constant", 1327056374, int, main.p_object, name); return call_ret.*; }  // 91
has_theme_icon_override :: (main: *Window, name: string) -> bool { call_ret := cast(*bool) sys_call("Window", "has_theme_icon_override", 2619796661, bool, main.p_object, name); return call_ret.*; }  // 92
has_theme_stylebox_override :: (main: *Window, name: string) -> bool { call_ret := cast(*bool) sys_call("Window", "has_theme_stylebox_override", 2619796661, bool, main.p_object, name); return call_ret.*; }  // 93
has_theme_font_override :: (main: *Window, name: string) -> bool { call_ret := cast(*bool) sys_call("Window", "has_theme_font_override", 2619796661, bool, main.p_object, name); return call_ret.*; }  // 94
has_theme_font_size_override :: (main: *Window, name: string) -> bool { call_ret := cast(*bool) sys_call("Window", "has_theme_font_size_override", 2619796661, bool, main.p_object, name); return call_ret.*; }  // 95
has_theme_color_override :: (main: *Window, name: string) -> bool { call_ret := cast(*bool) sys_call("Window", "has_theme_color_override", 2619796661, bool, main.p_object, name); return call_ret.*; }  // 96
has_theme_constant_override :: (main: *Window, name: string) -> bool { call_ret := cast(*bool) sys_call("Window", "has_theme_constant_override", 2619796661, bool, main.p_object, name); return call_ret.*; }  // 97
has_theme_icon :: (main: *Window, name: string) -> bool { call_ret := cast(*bool) sys_call("Window", "has_theme_icon", 866386512, bool, main.p_object, name); return call_ret.*; }  // 98
has_theme_stylebox :: (main: *Window, name: string) -> bool { call_ret := cast(*bool) sys_call("Window", "has_theme_stylebox", 866386512, bool, main.p_object, name); return call_ret.*; }  // 99
has_theme_font :: (main: *Window, name: string) -> bool { call_ret := cast(*bool) sys_call("Window", "has_theme_font", 866386512, bool, main.p_object, name); return call_ret.*; }  // 100
has_theme_font_size :: (main: *Window, name: string) -> bool { call_ret := cast(*bool) sys_call("Window", "has_theme_font_size", 866386512, bool, main.p_object, name); return call_ret.*; }  // 101
has_theme_color :: (main: *Window, name: string) -> bool { call_ret := cast(*bool) sys_call("Window", "has_theme_color", 866386512, bool, main.p_object, name); return call_ret.*; }  // 102
has_theme_constant :: (main: *Window, name: string) -> bool { call_ret := cast(*bool) sys_call("Window", "has_theme_constant", 866386512, bool, main.p_object, name); return call_ret.*; }  // 103
get_theme_default_base_scale :: (main: *Window) -> float { call_ret := cast(*float) sys_call("Window", "get_theme_default_base_scale", 1740695150, float, main.p_object); return call_ret.*; }  // 104
get_theme_default_font :: (main: *Window) -> *Font { call_ret := cast(*Font) sys_call("Window", "get_theme_default_font", 3229501585, Font, main.p_object); return call_ret; }  // 105
get_theme_default_font_size :: (main: *Window) -> int { call_ret := cast(*int) sys_call("Window", "get_theme_default_font_size", 3905245786, int, main.p_object); return call_ret.*; }  // 106
set_layout_direction :: (main: *Window, direction: Window.LayoutDirection) { sys_call("Window", "set_layout_direction", 3094704184, Nil, main.p_object, direction);  }  // 107
get_layout_direction :: (main: *Window) -> Window.LayoutDirection { call_ret := cast(*Window.LayoutDirection) sys_call("Window", "get_layout_direction", 3909617982, Window.LayoutDirection, main.p_object); return call_ret.*; }  // 108
is_layout_rtl :: (main: *Window) -> bool { call_ret := cast(*bool) sys_call("Window", "is_layout_rtl", 36873697, bool, main.p_object); return call_ret.*; }  // 109
set_auto_translate :: (main: *Window, enable: bool) { sys_call("Window", "set_auto_translate", 2586408642, Nil, main.p_object, enable);  }  // 110
is_auto_translating :: (main: *Window) -> bool { call_ret := cast(*bool) sys_call("Window", "is_auto_translating", 36873697, bool, main.p_object); return call_ret.*; }  // 111
popup :: (main: *Window) { sys_call("Window", "popup", 1680304321, Nil, main.p_object);  }  // 112
popup_on_parent :: (main: *Window, parent_rect: Rect2i) { sys_call("Window", "popup_on_parent", 1763793166, Nil, main.p_object, parent_rect);  }  // 113
popup_centered :: (main: *Window) { sys_call("Window", "popup_centered", 3447975422, Nil, main.p_object);  }  // 114
popup_centered_ratio :: (main: *Window) { sys_call("Window", "popup_centered_ratio", 1014814997, Nil, main.p_object);  }  // 115
popup_centered_clamped :: (main: *Window) { sys_call("Window", "popup_centered_clamped", 2613752477, Nil, main.p_object);  }  // 116
popup_exclusive :: (main: *Window, from_node: Node) { sys_call("Window", "popup_exclusive", 2134721627, Nil, main.p_object, from_node);  }  // 117
popup_exclusive_on_parent :: (main: *Window, from_node: Node, parent_rect: Rect2i) { sys_call("Window", "popup_exclusive_on_parent", 2344671043, Nil, main.p_object, from_node, parent_rect);  }  // 118
popup_exclusive_centered :: (main: *Window, from_node: Node) { sys_call("Window", "popup_exclusive_centered", 3357594017, Nil, main.p_object, from_node);  }  // 119
popup_exclusive_centered_ratio :: (main: *Window, from_node: Node) { sys_call("Window", "popup_exclusive_centered_ratio", 2284776287, Nil, main.p_object, from_node);  }  // 120
popup_exclusive_centered_clamped :: (main: *Window, from_node: Node) { sys_call("Window", "popup_exclusive_centered_clamped", 2612708785, Nil, main.p_object, from_node);  }  // 121

add_task :: (main: *WorkerThreadPool, action: Callable) -> int { call_ret := cast(*int) sys_call("WorkerThreadPool", "add_task", 3745067146, int, main.p_object, action); return call_ret.*; }  // 0
is_task_completed :: (main: *WorkerThreadPool, task_id: int) -> bool { call_ret := cast(*bool) sys_call("WorkerThreadPool", "is_task_completed", 1116898809, bool, main.p_object, task_id); return call_ret.*; }  // 1
wait_for_task_completion :: (main: *WorkerThreadPool, task_id: int) -> Error { call_ret := cast(*Error) sys_call("WorkerThreadPool", "wait_for_task_completion", 844576869, Error, main.p_object, task_id); return call_ret.*; }  // 2
add_group_task :: (main: *WorkerThreadPool, action: Callable, elements: int) -> int { call_ret := cast(*int) sys_call("WorkerThreadPool", "add_group_task", 1801953219, int, main.p_object, action, elements); return call_ret.*; }  // 3
is_group_task_completed :: (main: *WorkerThreadPool, group_id: int) -> bool { call_ret := cast(*bool) sys_call("WorkerThreadPool", "is_group_task_completed", 1116898809, bool, main.p_object, group_id); return call_ret.*; }  // 4
get_group_processed_element_count :: (main: *WorkerThreadPool, group_id: int) -> int { call_ret := cast(*int) sys_call("WorkerThreadPool", "get_group_processed_element_count", 923996154, int, main.p_object, group_id); return call_ret.*; }  // 5
wait_for_group_task_completion :: (main: *WorkerThreadPool, group_id: int) { sys_call("WorkerThreadPool", "wait_for_group_task_completion", 1286410249, Nil, main.p_object, group_id);  }  // 6

get_canvas :: (main: *World2D) -> RID { call_ret := cast(*RID) sys_call("World2D", "get_canvas", 2944877500, RID, main.p_object); return call_ret.*; }  // 0
get_space :: (main: *World2D) -> RID { call_ret := cast(*RID) sys_call("World2D", "get_space", 2944877500, RID, main.p_object); return call_ret.*; }  // 1
get_navigation_map :: (main: *World2D) -> RID { call_ret := cast(*RID) sys_call("World2D", "get_navigation_map", 2944877500, RID, main.p_object); return call_ret.*; }  // 2
get_direct_space_state :: (main: *World2D) -> *PhysicsDirectSpaceState2D { call_ret := cast(*PhysicsDirectSpaceState2D) sys_call("World2D", "get_direct_space_state", 2506717822, PhysicsDirectSpaceState2D, main.p_object); return call_ret; }  // 3

get_space :: (main: *World3D) -> RID { call_ret := cast(*RID) sys_call("World3D", "get_space", 2944877500, RID, main.p_object); return call_ret.*; }  // 0
get_navigation_map :: (main: *World3D) -> RID { call_ret := cast(*RID) sys_call("World3D", "get_navigation_map", 2944877500, RID, main.p_object); return call_ret.*; }  // 1
get_scenario :: (main: *World3D) -> RID { call_ret := cast(*RID) sys_call("World3D", "get_scenario", 2944877500, RID, main.p_object); return call_ret.*; }  // 2
set_environment :: (main: *World3D, env: Environment) { sys_call("World3D", "set_environment", 4143518816, Nil, main.p_object, env);  }  // 3
get_environment :: (main: *World3D) -> *Environment { call_ret := cast(*Environment) sys_call("World3D", "get_environment", 3082064660, Environment, main.p_object); return call_ret; }  // 4
set_fallback_environment :: (main: *World3D, env: Environment) { sys_call("World3D", "set_fallback_environment", 4143518816, Nil, main.p_object, env);  }  // 5
get_fallback_environment :: (main: *World3D) -> *Environment { call_ret := cast(*Environment) sys_call("World3D", "get_fallback_environment", 3082064660, Environment, main.p_object); return call_ret; }  // 6
set_camera_attributes :: (main: *World3D, attributes: CameraAttributes) { sys_call("World3D", "set_camera_attributes", 2817810567, Nil, main.p_object, attributes);  }  // 7
get_camera_attributes :: (main: *World3D) -> *CameraAttributes { call_ret := cast(*CameraAttributes) sys_call("World3D", "get_camera_attributes", 3921283215, CameraAttributes, main.p_object); return call_ret; }  // 8
get_direct_space_state :: (main: *World3D) -> *PhysicsDirectSpaceState3D { call_ret := cast(*PhysicsDirectSpaceState3D) sys_call("World3D", "get_direct_space_state", 2069328350, PhysicsDirectSpaceState3D, main.p_object); return call_ret; }  // 9

set_normal :: (main: *WorldBoundaryShape2D, normal: Vector2) { sys_call("WorldBoundaryShape2D", "set_normal", 743155724, Nil, main.p_object, normal);  }  // 0
get_normal :: (main: *WorldBoundaryShape2D) -> Vector2 { call_ret := cast(*Vector2) sys_call("WorldBoundaryShape2D", "get_normal", 3341600327, Vector2, main.p_object); return call_ret.*; }  // 1
set_distance :: (main: *WorldBoundaryShape2D, distance: float) { sys_call("WorldBoundaryShape2D", "set_distance", 373806689, Nil, main.p_object, distance);  }  // 2
get_distance :: (main: *WorldBoundaryShape2D) -> float { call_ret := cast(*float) sys_call("WorldBoundaryShape2D", "get_distance", 1740695150, float, main.p_object); return call_ret.*; }  // 3

set_plane :: (main: *WorldBoundaryShape3D, plane: Plane) { sys_call("WorldBoundaryShape3D", "set_plane", 3505987427, Nil, main.p_object, plane);  }  // 0
get_plane :: (main: *WorldBoundaryShape3D) -> Plane { call_ret := cast(*Plane) sys_call("WorldBoundaryShape3D", "get_plane", 2753500971, Plane, main.p_object); return call_ret.*; }  // 1

set_environment :: (main: *WorldEnvironment, env: Environment) { sys_call("WorldEnvironment", "set_environment", 4143518816, Nil, main.p_object, env);  }  // 0
get_environment :: (main: *WorldEnvironment) -> *Environment { call_ret := cast(*Environment) sys_call("WorldEnvironment", "get_environment", 3082064660, Environment, main.p_object); return call_ret; }  // 1
set_camera_attributes :: (main: *WorldEnvironment, camera_attributes: CameraAttributes) { sys_call("WorldEnvironment", "set_camera_attributes", 2817810567, Nil, main.p_object, camera_attributes);  }  // 2
get_camera_attributes :: (main: *WorldEnvironment) -> *CameraAttributes { call_ret := cast(*CameraAttributes) sys_call("WorldEnvironment", "get_camera_attributes", 3921283215, CameraAttributes, main.p_object); return call_ret; }  // 3
set_compositor :: (main: *WorldEnvironment, compositor: Compositor) { sys_call("WorldEnvironment", "set_compositor", 1586754307, Nil, main.p_object, compositor);  }  // 4
get_compositor :: (main: *WorldEnvironment) -> *Compositor { call_ret := cast(*Compositor) sys_call("WorldEnvironment", "get_compositor", 3647707413, Compositor, main.p_object); return call_ret; }  // 5

save :: (main: *X509Certificate, path: string) -> Error { call_ret := cast(*Error) sys_call("X509Certificate", "save", 166001499, Error, main.p_object, path); return call_ret.*; }  // 0
load :: (main: *X509Certificate, path: string) -> Error { call_ret := cast(*Error) sys_call("X509Certificate", "load", 166001499, Error, main.p_object, path); return call_ret.*; }  // 1
save_to_string :: (main: *X509Certificate) -> gstring { call_ret := cast(*gstring) sys_call("X509Certificate", "save_to_string", 2841200299, gstring, main.p_object); return call_ret.*; }  // 2
load_from_string :: (main: *X509Certificate, _string: string) -> Error { call_ret := cast(*Error) sys_call("X509Certificate", "load_from_string", 166001499, Error, main.p_object, _string); return call_ret.*; }  // 3

read :: (main: *XMLParser) -> Error { call_ret := cast(*Error) sys_call("XMLParser", "read", 166280745, Error, main.p_object); return call_ret.*; }  // 0
get_node_type :: (main: *XMLParser) -> XMLParser.NodeType { call_ret := cast(*XMLParser.NodeType) sys_call("XMLParser", "get_node_type", 2984359541, XMLParser.NodeType, main.p_object); return call_ret.*; }  // 1
get_node_name :: (main: *XMLParser) -> gstring { call_ret := cast(*gstring) sys_call("XMLParser", "get_node_name", 201670096, gstring, main.p_object); return call_ret.*; }  // 2
get_node_data :: (main: *XMLParser) -> gstring { call_ret := cast(*gstring) sys_call("XMLParser", "get_node_data", 201670096, gstring, main.p_object); return call_ret.*; }  // 3
get_node_offset :: (main: *XMLParser) -> int { call_ret := cast(*int) sys_call("XMLParser", "get_node_offset", 3905245786, int, main.p_object); return call_ret.*; }  // 4
get_attribute_count :: (main: *XMLParser) -> int { call_ret := cast(*int) sys_call("XMLParser", "get_attribute_count", 3905245786, int, main.p_object); return call_ret.*; }  // 5
get_attribute_name :: (main: *XMLParser, idx: int) -> gstring { call_ret := cast(*gstring) sys_call("XMLParser", "get_attribute_name", 844755477, gstring, main.p_object, idx); return call_ret.*; }  // 6
get_attribute_value :: (main: *XMLParser, idx: int) -> gstring { call_ret := cast(*gstring) sys_call("XMLParser", "get_attribute_value", 844755477, gstring, main.p_object, idx); return call_ret.*; }  // 7
has_attribute :: (main: *XMLParser, name: string) -> bool { call_ret := cast(*bool) sys_call("XMLParser", "has_attribute", 3927539163, bool, main.p_object, name); return call_ret.*; }  // 8
get_named_attribute_value :: (main: *XMLParser, name: string) -> gstring { call_ret := cast(*gstring) sys_call("XMLParser", "get_named_attribute_value", 3135753539, gstring, main.p_object, name); return call_ret.*; }  // 9
get_named_attribute_value_safe :: (main: *XMLParser, name: string) -> gstring { call_ret := cast(*gstring) sys_call("XMLParser", "get_named_attribute_value_safe", 3135753539, gstring, main.p_object, name); return call_ret.*; }  // 10
is_empty :: (main: *XMLParser) -> bool { call_ret := cast(*bool) sys_call("XMLParser", "is_empty", 36873697, bool, main.p_object); return call_ret.*; }  // 11
get_current_line :: (main: *XMLParser) -> int { call_ret := cast(*int) sys_call("XMLParser", "get_current_line", 3905245786, int, main.p_object); return call_ret.*; }  // 12
skip_section :: (main: *XMLParser) { sys_call("XMLParser", "skip_section", 3218959716, Nil, main.p_object);  }  // 13
seek :: (main: *XMLParser, position: int) -> Error { call_ret := cast(*Error) sys_call("XMLParser", "seek", 844576869, Error, main.p_object, position); return call_ret.*; }  // 14
open :: (main: *XMLParser, file: string) -> Error { call_ret := cast(*Error) sys_call("XMLParser", "open", 166001499, Error, main.p_object, file); return call_ret.*; }  // 15
open_buffer :: (main: *XMLParser, buffer: PackedByteArray) -> Error { call_ret := cast(*Error) sys_call("XMLParser", "open_buffer", 680677267, Error, main.p_object, buffer); return call_ret.*; }  // 16

get_size :: (main: *XRAnchor3D) -> Vector3 { call_ret := cast(*Vector3) sys_call("XRAnchor3D", "get_size", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 0
get_plane :: (main: *XRAnchor3D) -> Plane { call_ret := cast(*Plane) sys_call("XRAnchor3D", "get_plane", 2753500971, Plane, main.p_object); return call_ret.*; }  // 1

set_body_tracker :: (main: *XRBodyModifier3D, tracker_name: string) { sys_call("XRBodyModifier3D", "set_body_tracker", 3304788590, Nil, main.p_object, tracker_name);  }  // 0
get_body_tracker :: (main: *XRBodyModifier3D) -> StringName { call_ret := cast(*StringName) sys_call("XRBodyModifier3D", "get_body_tracker", 2002593661, StringName, main.p_object); return call_ret.*; }  // 1
set_body_update :: (main: *XRBodyModifier3D, body_update: XRBodyModifier3D.BodyUpdate) { sys_call("XRBodyModifier3D", "set_body_update", 2211199417, Nil, main.p_object, body_update);  }  // 2
get_body_update :: (main: *XRBodyModifier3D) -> XRBodyModifier3D.BodyUpdate { call_ret := cast(*XRBodyModifier3D.BodyUpdate) sys_call("XRBodyModifier3D", "get_body_update", 2642335328, XRBodyModifier3D.BodyUpdate, main.p_object); return call_ret.*; }  // 3
set_bone_update :: (main: *XRBodyModifier3D, bone_update: XRBodyModifier3D.BoneUpdate) { sys_call("XRBodyModifier3D", "set_bone_update", 3356796943, Nil, main.p_object, bone_update);  }  // 4
get_bone_update :: (main: *XRBodyModifier3D) -> XRBodyModifier3D.BoneUpdate { call_ret := cast(*XRBodyModifier3D.BoneUpdate) sys_call("XRBodyModifier3D", "get_bone_update", 1309305964, XRBodyModifier3D.BoneUpdate, main.p_object); return call_ret.*; }  // 5

set_has_tracking_data :: (main: *XRBodyTracker, has_data: bool) { sys_call("XRBodyTracker", "set_has_tracking_data", 2586408642, Nil, main.p_object, has_data);  }  // 0
get_has_tracking_data :: (main: *XRBodyTracker) -> bool { call_ret := cast(*bool) sys_call("XRBodyTracker", "get_has_tracking_data", 36873697, bool, main.p_object); return call_ret.*; }  // 1
set_body_flags :: (main: *XRBodyTracker, flags: XRBodyTracker.BodyFlags) { sys_call("XRBodyTracker", "set_body_flags", 2103235750, Nil, main.p_object, flags);  }  // 2
get_body_flags :: (main: *XRBodyTracker) -> XRBodyTracker.BodyFlags { call_ret := cast(*XRBodyTracker.BodyFlags) sys_call("XRBodyTracker", "get_body_flags", 3543166366, XRBodyTracker.BodyFlags, main.p_object); return call_ret.*; }  // 3
set_joint_flags :: (main: *XRBodyTracker, joint: XRBodyTracker.Joint, flags: XRBodyTracker.JointFlags) { sys_call("XRBodyTracker", "set_joint_flags", 592144999, Nil, main.p_object, joint, flags);  }  // 4
get_joint_flags :: (main: *XRBodyTracker, joint: XRBodyTracker.Joint) -> XRBodyTracker.JointFlags { call_ret := cast(*XRBodyTracker.JointFlags) sys_call("XRBodyTracker", "get_joint_flags", 1030162609, XRBodyTracker.JointFlags, main.p_object, joint); return call_ret.*; }  // 5
set_joint_transform :: (main: *XRBodyTracker, joint: XRBodyTracker.Joint, transform: Transform3D) { sys_call("XRBodyTracker", "set_joint_transform", 2635424328, Nil, main.p_object, joint, transform);  }  // 6
get_joint_transform :: (main: *XRBodyTracker, joint: XRBodyTracker.Joint) -> Transform3D { call_ret := cast(*Transform3D) sys_call("XRBodyTracker", "get_joint_transform", 3474811534, Transform3D, main.p_object, joint); return call_ret.*; }  // 7


is_button_pressed :: (main: *XRController3D, name: string) -> bool { call_ret := cast(*bool) sys_call("XRController3D", "is_button_pressed", 2619796661, bool, main.p_object, name); return call_ret.*; }  // 0
get_input :: (main: *XRController3D, name: string) -> Variant { call_ret := cast(*Variant) sys_call("XRController3D", "get_input", 2760726917, Variant, main.p_object, name); return call_ret.*; }  // 1
get_float :: (main: *XRController3D, name: string) -> float { call_ret := cast(*float) sys_call("XRController3D", "get_float", 2349060816, float, main.p_object, name); return call_ret.*; }  // 2
get_vector2 :: (main: *XRController3D, name: string) -> Vector2 { call_ret := cast(*Vector2) sys_call("XRController3D", "get_vector2", 3100822709, Vector2, main.p_object, name); return call_ret.*; }  // 3
get_tracker_hand :: (main: *XRController3D) -> XRPositionalTracker.TrackerHand { call_ret := cast(*XRPositionalTracker.TrackerHand) sys_call("XRController3D", "get_tracker_hand", 4181770860, XRPositionalTracker.TrackerHand, main.p_object); return call_ret.*; }  // 4


set_face_tracker :: (main: *XRFaceModifier3D, tracker_name: string) { sys_call("XRFaceModifier3D", "set_face_tracker", 3304788590, Nil, main.p_object, tracker_name);  }  // 0
get_face_tracker :: (main: *XRFaceModifier3D) -> StringName { call_ret := cast(*StringName) sys_call("XRFaceModifier3D", "get_face_tracker", 2002593661, StringName, main.p_object); return call_ret.*; }  // 1
set_target :: (main: *XRFaceModifier3D, target: string) { sys_call("XRFaceModifier3D", "set_target", 1348162250, Nil, main.p_object, target);  }  // 2
get_target :: (main: *XRFaceModifier3D) -> NodePath { call_ret := cast(*NodePath) sys_call("XRFaceModifier3D", "get_target", 4075236667, NodePath, main.p_object); return call_ret.*; }  // 3

get_blend_shape :: (main: *XRFaceTracker, blend_shape: XRFaceTracker.BlendShapeEntry) -> float { call_ret := cast(*float) sys_call("XRFaceTracker", "get_blend_shape", 330010046, float, main.p_object, blend_shape); return call_ret.*; }  // 0
set_blend_shape :: (main: *XRFaceTracker, blend_shape: XRFaceTracker.BlendShapeEntry, weight: float) { sys_call("XRFaceTracker", "set_blend_shape", 2352588791, Nil, main.p_object, blend_shape, weight);  }  // 1
get_blend_shapes :: (main: *XRFaceTracker) -> PackedFloat32Array { call_ret := cast(*PackedFloat32Array) sys_call("XRFaceTracker", "get_blend_shapes", 675695659, PackedFloat32Array, main.p_object); return call_ret.*; }  // 2
set_blend_shapes :: (main: *XRFaceTracker, weights: PackedFloat32Array) { sys_call("XRFaceTracker", "set_blend_shapes", 2899603908, Nil, main.p_object, weights);  }  // 3

set_hand_tracker :: (main: *XRHandModifier3D, tracker_name: string) { sys_call("XRHandModifier3D", "set_hand_tracker", 3304788590, Nil, main.p_object, tracker_name);  }  // 0
get_hand_tracker :: (main: *XRHandModifier3D) -> StringName { call_ret := cast(*StringName) sys_call("XRHandModifier3D", "get_hand_tracker", 2002593661, StringName, main.p_object); return call_ret.*; }  // 1
set_bone_update :: (main: *XRHandModifier3D, bone_update: XRHandModifier3D.BoneUpdate) { sys_call("XRHandModifier3D", "set_bone_update", 3635701455, Nil, main.p_object, bone_update);  }  // 2
get_bone_update :: (main: *XRHandModifier3D) -> XRHandModifier3D.BoneUpdate { call_ret := cast(*XRHandModifier3D.BoneUpdate) sys_call("XRHandModifier3D", "get_bone_update", 2873665691, XRHandModifier3D.BoneUpdate, main.p_object); return call_ret.*; }  // 3

set_has_tracking_data :: (main: *XRHandTracker, has_data: bool) { sys_call("XRHandTracker", "set_has_tracking_data", 2586408642, Nil, main.p_object, has_data);  }  // 0
get_has_tracking_data :: (main: *XRHandTracker) -> bool { call_ret := cast(*bool) sys_call("XRHandTracker", "get_has_tracking_data", 36873697, bool, main.p_object); return call_ret.*; }  // 1
set_hand_tracking_source :: (main: *XRHandTracker, source: XRHandTracker.HandTrackingSource) { sys_call("XRHandTracker", "set_hand_tracking_source", 2958308861, Nil, main.p_object, source);  }  // 2
get_hand_tracking_source :: (main: *XRHandTracker) -> XRHandTracker.HandTrackingSource { call_ret := cast(*XRHandTracker.HandTrackingSource) sys_call("XRHandTracker", "get_hand_tracking_source", 2475045250, XRHandTracker.HandTrackingSource, main.p_object); return call_ret.*; }  // 3
set_hand_joint_flags :: (main: *XRHandTracker, joint: XRHandTracker.HandJoint, flags: XRHandTracker.HandJointFlags) { sys_call("XRHandTracker", "set_hand_joint_flags", 3028437365, Nil, main.p_object, joint, flags);  }  // 4
get_hand_joint_flags :: (main: *XRHandTracker, joint: XRHandTracker.HandJoint) -> XRHandTracker.HandJointFlags { call_ret := cast(*XRHandTracker.HandJointFlags) sys_call("XRHandTracker", "get_hand_joint_flags", 1730972401, XRHandTracker.HandJointFlags, main.p_object, joint); return call_ret.*; }  // 5
set_hand_joint_transform :: (main: *XRHandTracker, joint: XRHandTracker.HandJoint, transform: Transform3D) { sys_call("XRHandTracker", "set_hand_joint_transform", 2529959613, Nil, main.p_object, joint, transform);  }  // 6
get_hand_joint_transform :: (main: *XRHandTracker, joint: XRHandTracker.HandJoint) -> Transform3D { call_ret := cast(*Transform3D) sys_call("XRHandTracker", "get_hand_joint_transform", 1090840196, Transform3D, main.p_object, joint); return call_ret.*; }  // 7
set_hand_joint_radius :: (main: *XRHandTracker, joint: XRHandTracker.HandJoint, radius: float) { sys_call("XRHandTracker", "set_hand_joint_radius", 2723659615, Nil, main.p_object, joint, radius);  }  // 8
get_hand_joint_radius :: (main: *XRHandTracker, joint: XRHandTracker.HandJoint) -> float { call_ret := cast(*float) sys_call("XRHandTracker", "get_hand_joint_radius", 3400025734, float, main.p_object, joint); return call_ret.*; }  // 9
set_hand_joint_linear_velocity :: (main: *XRHandTracker, joint: XRHandTracker.HandJoint, linear_velocity: Vector3) { sys_call("XRHandTracker", "set_hand_joint_linear_velocity", 1978646737, Nil, main.p_object, joint, linear_velocity);  }  // 10
get_hand_joint_linear_velocity :: (main: *XRHandTracker, joint: XRHandTracker.HandJoint) -> Vector3 { call_ret := cast(*Vector3) sys_call("XRHandTracker", "get_hand_joint_linear_velocity", 547240792, Vector3, main.p_object, joint); return call_ret.*; }  // 11
set_hand_joint_angular_velocity :: (main: *XRHandTracker, joint: XRHandTracker.HandJoint, angular_velocity: Vector3) { sys_call("XRHandTracker", "set_hand_joint_angular_velocity", 1978646737, Nil, main.p_object, joint, angular_velocity);  }  // 12
get_hand_joint_angular_velocity :: (main: *XRHandTracker, joint: XRHandTracker.HandJoint) -> Vector3 { call_ret := cast(*Vector3) sys_call("XRHandTracker", "get_hand_joint_angular_velocity", 547240792, Vector3, main.p_object, joint); return call_ret.*; }  // 13

get_name :: (main: *XRInterface) -> StringName { call_ret := cast(*StringName) sys_call("XRInterface", "get_name", 2002593661, StringName, main.p_object); return call_ret.*; }  // 0
get_capabilities :: (main: *XRInterface) -> int { call_ret := cast(*int) sys_call("XRInterface", "get_capabilities", 3905245786, int, main.p_object); return call_ret.*; }  // 1
is_primary :: (main: *XRInterface) -> bool { call_ret := cast(*bool) sys_call("XRInterface", "is_primary", 2240911060, bool, main.p_object); return call_ret.*; }  // 2
set_primary :: (main: *XRInterface, primary: bool) { sys_call("XRInterface", "set_primary", 2586408642, Nil, main.p_object, primary);  }  // 3
is_initialized :: (main: *XRInterface) -> bool { call_ret := cast(*bool) sys_call("XRInterface", "is_initialized", 36873697, bool, main.p_object); return call_ret.*; }  // 4
initialize :: (main: *XRInterface) -> bool { call_ret := cast(*bool) sys_call("XRInterface", "initialize", 2240911060, bool, main.p_object); return call_ret.*; }  // 5
uninitialize :: (main: *XRInterface) { sys_call("XRInterface", "uninitialize", 3218959716, Nil, main.p_object);  }  // 6
get_system_info :: (main: *XRInterface) -> Dictionary { call_ret := cast(*Dictionary) sys_call("XRInterface", "get_system_info", 2382534195, Dictionary, main.p_object); return call_ret.*; }  // 7
get_tracking_status :: (main: *XRInterface) -> XRInterface.TrackingStatus { call_ret := cast(*XRInterface.TrackingStatus) sys_call("XRInterface", "get_tracking_status", 167423259, XRInterface.TrackingStatus, main.p_object); return call_ret.*; }  // 8
get_render_target_size :: (main: *XRInterface) -> Vector2 { call_ret := cast(*Vector2) sys_call("XRInterface", "get_render_target_size", 1497962370, Vector2, main.p_object); return call_ret.*; }  // 9
get_view_count :: (main: *XRInterface) -> int { call_ret := cast(*int) sys_call("XRInterface", "get_view_count", 2455072627, int, main.p_object); return call_ret.*; }  // 10
trigger_haptic_pulse :: (main: *XRInterface, action_name: string, tracker_name: string, frequency: float, amplitude: float, duration_sec: float, delay_sec: float) { sys_call("XRInterface", "trigger_haptic_pulse", 3752640163, Nil, main.p_object, action_name, tracker_name, frequency, amplitude, duration_sec, delay_sec);  }  // 11
supports_play_area_mode :: (main: *XRInterface, mode: XRInterface.PlayAreaMode) -> bool { call_ret := cast(*bool) sys_call("XRInterface", "supports_play_area_mode", 3429955281, bool, main.p_object, mode); return call_ret.*; }  // 12
get_play_area_mode :: (main: *XRInterface) -> XRInterface.PlayAreaMode { call_ret := cast(*XRInterface.PlayAreaMode) sys_call("XRInterface", "get_play_area_mode", 1615132885, XRInterface.PlayAreaMode, main.p_object); return call_ret.*; }  // 13
set_play_area_mode :: (main: *XRInterface, mode: XRInterface.PlayAreaMode) -> bool { call_ret := cast(*bool) sys_call("XRInterface", "set_play_area_mode", 3429955281, bool, main.p_object, mode); return call_ret.*; }  // 14
get_play_area :: (main: *XRInterface) -> PackedVector3Array { call_ret := cast(*PackedVector3Array) sys_call("XRInterface", "get_play_area", 497664490, PackedVector3Array, main.p_object); return call_ret.*; }  // 15
get_anchor_detection_is_enabled :: (main: *XRInterface) -> bool { call_ret := cast(*bool) sys_call("XRInterface", "get_anchor_detection_is_enabled", 36873697, bool, main.p_object); return call_ret.*; }  // 16
set_anchor_detection_is_enabled :: (main: *XRInterface, enable: bool) { sys_call("XRInterface", "set_anchor_detection_is_enabled", 2586408642, Nil, main.p_object, enable);  }  // 17
get_camera_feed_id :: (main: *XRInterface) -> int { call_ret := cast(*int) sys_call("XRInterface", "get_camera_feed_id", 2455072627, int, main.p_object); return call_ret.*; }  // 18
is_passthrough_supported :: (main: *XRInterface) -> bool { call_ret := cast(*bool) sys_call("XRInterface", "is_passthrough_supported", 2240911060, bool, main.p_object); return call_ret.*; }  // 19
is_passthrough_enabled :: (main: *XRInterface) -> bool { call_ret := cast(*bool) sys_call("XRInterface", "is_passthrough_enabled", 2240911060, bool, main.p_object); return call_ret.*; }  // 20
start_passthrough :: (main: *XRInterface) -> bool { call_ret := cast(*bool) sys_call("XRInterface", "start_passthrough", 2240911060, bool, main.p_object); return call_ret.*; }  // 21
stop_passthrough :: (main: *XRInterface) { sys_call("XRInterface", "stop_passthrough", 3218959716, Nil, main.p_object);  }  // 22
get_transform_for_view :: (main: *XRInterface, view: int, cam_transform: Transform3D) -> Transform3D { call_ret := cast(*Transform3D) sys_call("XRInterface", "get_transform_for_view", 518934792, Transform3D, main.p_object, view, cam_transform); return call_ret.*; }  // 23
get_projection_for_view :: (main: *XRInterface, view: int, aspect: float, near: float, far: float) -> Projection { call_ret := cast(*Projection) sys_call("XRInterface", "get_projection_for_view", 3766090294, Projection, main.p_object, view, aspect, near, far); return call_ret.*; }  // 24
get_supported_environment_blend_modes :: (main: *XRInterface) -> Array { call_ret := cast(*Array) sys_call("XRInterface", "get_supported_environment_blend_modes", 2915620761, Array, main.p_object); return call_ret.*; }  // 25
set_environment_blend_mode :: (main: *XRInterface, mode: XRInterface.EnvironmentBlendMode) -> bool { call_ret := cast(*bool) sys_call("XRInterface", "set_environment_blend_mode", 551152418, bool, main.p_object, mode); return call_ret.*; }  // 26
get_environment_blend_mode :: (main: *XRInterface) -> XRInterface.EnvironmentBlendMode { call_ret := cast(*XRInterface.EnvironmentBlendMode) sys_call("XRInterface", "get_environment_blend_mode", 1984334071, XRInterface.EnvironmentBlendMode, main.p_object); return call_ret.*; }  // 27

get_color_texture :: (main: *XRInterfaceExtension) -> RID { call_ret := cast(*RID) sys_call("XRInterfaceExtension", "get_color_texture", 529393457, RID, main.p_object); return call_ret.*; }  // 31
get_depth_texture :: (main: *XRInterfaceExtension) -> RID { call_ret := cast(*RID) sys_call("XRInterfaceExtension", "get_depth_texture", 529393457, RID, main.p_object); return call_ret.*; }  // 32
get_velocity_texture :: (main: *XRInterfaceExtension) -> RID { call_ret := cast(*RID) sys_call("XRInterfaceExtension", "get_velocity_texture", 529393457, RID, main.p_object); return call_ret.*; }  // 33
add_blit :: (main: *XRInterfaceExtension, render_target: RID, src_rect: Rect2, dst_rect: Rect2i, use_layer: bool, layer: int, apply_lens_distortion: bool, eye_center: Vector2, k1: float, k2: float, upscale: float, aspect_ratio: float) { sys_call("XRInterfaceExtension", "add_blit", 258596971, Nil, main.p_object, render_target, src_rect, dst_rect, use_layer, layer, apply_lens_distortion, eye_center, k1, k2, upscale, aspect_ratio);  }  // 34
get_render_target_texture :: (main: *XRInterfaceExtension, render_target: RID) -> RID { call_ret := cast(*RID) sys_call("XRInterfaceExtension", "get_render_target_texture", 41030802, RID, main.p_object, render_target); return call_ret.*; }  // 35

set_tracker :: (main: *XRNode3D, tracker_name: string) { sys_call("XRNode3D", "set_tracker", 3304788590, Nil, main.p_object, tracker_name);  }  // 0
get_tracker :: (main: *XRNode3D) -> StringName { call_ret := cast(*StringName) sys_call("XRNode3D", "get_tracker", 2002593661, StringName, main.p_object); return call_ret.*; }  // 1
set_pose_name :: (main: *XRNode3D, pose: string) { sys_call("XRNode3D", "set_pose_name", 3304788590, Nil, main.p_object, pose);  }  // 2
get_pose_name :: (main: *XRNode3D) -> StringName { call_ret := cast(*StringName) sys_call("XRNode3D", "get_pose_name", 2002593661, StringName, main.p_object); return call_ret.*; }  // 3
set_show_when_tracked :: (main: *XRNode3D, show: bool) { sys_call("XRNode3D", "set_show_when_tracked", 2586408642, Nil, main.p_object, show);  }  // 4
get_show_when_tracked :: (main: *XRNode3D) -> bool { call_ret := cast(*bool) sys_call("XRNode3D", "get_show_when_tracked", 36873697, bool, main.p_object); return call_ret.*; }  // 5
get_is_active :: (main: *XRNode3D) -> bool { call_ret := cast(*bool) sys_call("XRNode3D", "get_is_active", 36873697, bool, main.p_object); return call_ret.*; }  // 6
get_has_tracking_data :: (main: *XRNode3D) -> bool { call_ret := cast(*bool) sys_call("XRNode3D", "get_has_tracking_data", 36873697, bool, main.p_object); return call_ret.*; }  // 7
get_pose :: (main: *XRNode3D) -> *XRPose { call_ret := cast(*XRPose) sys_call("XRNode3D", "get_pose", 2806551826, XRPose, main.p_object); return call_ret; }  // 8
trigger_haptic_pulse :: (main: *XRNode3D, action_name: string, frequency: float, amplitude: float, duration_sec: float, delay_sec: float) { sys_call("XRNode3D", "trigger_haptic_pulse", 508576839, Nil, main.p_object, action_name, frequency, amplitude, duration_sec, delay_sec);  }  // 9

set_world_scale :: (main: *XROrigin3D, world_scale: float) { sys_call("XROrigin3D", "set_world_scale", 373806689, Nil, main.p_object, world_scale);  }  // 0
get_world_scale :: (main: *XROrigin3D) -> float { call_ret := cast(*float) sys_call("XROrigin3D", "get_world_scale", 1740695150, float, main.p_object); return call_ret.*; }  // 1
set_current :: (main: *XROrigin3D, enabled: bool) { sys_call("XROrigin3D", "set_current", 2586408642, Nil, main.p_object, enabled);  }  // 2
is_current :: (main: *XROrigin3D) -> bool { call_ret := cast(*bool) sys_call("XROrigin3D", "is_current", 36873697, bool, main.p_object); return call_ret.*; }  // 3

set_has_tracking_data :: (main: *XRPose, has_tracking_data: bool) { sys_call("XRPose", "set_has_tracking_data", 2586408642, Nil, main.p_object, has_tracking_data);  }  // 0
get_has_tracking_data :: (main: *XRPose) -> bool { call_ret := cast(*bool) sys_call("XRPose", "get_has_tracking_data", 36873697, bool, main.p_object); return call_ret.*; }  // 1
set_name :: (main: *XRPose, name: string) { sys_call("XRPose", "set_name", 3304788590, Nil, main.p_object, name);  }  // 2
get_name :: (main: *XRPose) -> StringName { call_ret := cast(*StringName) sys_call("XRPose", "get_name", 2002593661, StringName, main.p_object); return call_ret.*; }  // 3
set_transform :: (main: *XRPose, transform: Transform3D) { sys_call("XRPose", "set_transform", 2952846383, Nil, main.p_object, transform);  }  // 4
get_transform :: (main: *XRPose) -> Transform3D { call_ret := cast(*Transform3D) sys_call("XRPose", "get_transform", 3229777777, Transform3D, main.p_object); return call_ret.*; }  // 5
get_adjusted_transform :: (main: *XRPose) -> Transform3D { call_ret := cast(*Transform3D) sys_call("XRPose", "get_adjusted_transform", 3229777777, Transform3D, main.p_object); return call_ret.*; }  // 6
set_linear_velocity :: (main: *XRPose, velocity: Vector3) { sys_call("XRPose", "set_linear_velocity", 3460891852, Nil, main.p_object, velocity);  }  // 7
get_linear_velocity :: (main: *XRPose) -> Vector3 { call_ret := cast(*Vector3) sys_call("XRPose", "get_linear_velocity", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 8
set_angular_velocity :: (main: *XRPose, velocity: Vector3) { sys_call("XRPose", "set_angular_velocity", 3460891852, Nil, main.p_object, velocity);  }  // 9
get_angular_velocity :: (main: *XRPose) -> Vector3 { call_ret := cast(*Vector3) sys_call("XRPose", "get_angular_velocity", 3360562783, Vector3, main.p_object); return call_ret.*; }  // 10
set_tracking_confidence :: (main: *XRPose, tracking_confidence: XRPose.TrackingConfidence) { sys_call("XRPose", "set_tracking_confidence", 4171656666, Nil, main.p_object, tracking_confidence);  }  // 11
get_tracking_confidence :: (main: *XRPose) -> XRPose.TrackingConfidence { call_ret := cast(*XRPose.TrackingConfidence) sys_call("XRPose", "get_tracking_confidence", 2064923680, XRPose.TrackingConfidence, main.p_object); return call_ret.*; }  // 12

get_tracker_profile :: (main: *XRPositionalTracker) -> gstring { call_ret := cast(*gstring) sys_call("XRPositionalTracker", "get_tracker_profile", 201670096, gstring, main.p_object); return call_ret.*; }  // 0
set_tracker_profile :: (main: *XRPositionalTracker, profile: string) { sys_call("XRPositionalTracker", "set_tracker_profile", 83702148, Nil, main.p_object, profile);  }  // 1
get_tracker_hand :: (main: *XRPositionalTracker) -> XRPositionalTracker.TrackerHand { call_ret := cast(*XRPositionalTracker.TrackerHand) sys_call("XRPositionalTracker", "get_tracker_hand", 4181770860, XRPositionalTracker.TrackerHand, main.p_object); return call_ret.*; }  // 2
set_tracker_hand :: (main: *XRPositionalTracker, hand: XRPositionalTracker.TrackerHand) { sys_call("XRPositionalTracker", "set_tracker_hand", 3904108980, Nil, main.p_object, hand);  }  // 3
has_pose :: (main: *XRPositionalTracker, name: string) -> bool { call_ret := cast(*bool) sys_call("XRPositionalTracker", "has_pose", 2619796661, bool, main.p_object, name); return call_ret.*; }  // 4
get_pose :: (main: *XRPositionalTracker, name: string) -> *XRPose { call_ret := cast(*XRPose) sys_call("XRPositionalTracker", "get_pose", 4099720006, XRPose, main.p_object, name); return call_ret; }  // 5
invalidate_pose :: (main: *XRPositionalTracker, name: string) { sys_call("XRPositionalTracker", "invalidate_pose", 3304788590, Nil, main.p_object, name);  }  // 6
set_pose :: (main: *XRPositionalTracker, name: string, transform: Transform3D, linear_velocity: Vector3, angular_velocity: Vector3, tracking_confidence: XRPose.TrackingConfidence) { sys_call("XRPositionalTracker", "set_pose", 3451230163, Nil, main.p_object, name, transform, linear_velocity, angular_velocity, tracking_confidence);  }  // 7
get_input :: (main: *XRPositionalTracker, name: string) -> Variant { call_ret := cast(*Variant) sys_call("XRPositionalTracker", "get_input", 2760726917, Variant, main.p_object, name); return call_ret.*; }  // 8
set_input :: (main: *XRPositionalTracker, name: string, value: Variant) { sys_call("XRPositionalTracker", "set_input", 3776071444, Nil, main.p_object, name, value);  }  // 9

get_world_scale :: (main: *XRServer) -> float { call_ret := cast(*float) sys_call("XRServer", "get_world_scale", 1740695150, float, main.p_object); return call_ret.*; }  // 0
set_world_scale :: (main: *XRServer, scale: float) { sys_call("XRServer", "set_world_scale", 373806689, Nil, main.p_object, scale);  }  // 1
get_world_origin :: (main: *XRServer) -> Transform3D { call_ret := cast(*Transform3D) sys_call("XRServer", "get_world_origin", 3229777777, Transform3D, main.p_object); return call_ret.*; }  // 2
set_world_origin :: (main: *XRServer, world_origin: Transform3D) { sys_call("XRServer", "set_world_origin", 2952846383, Nil, main.p_object, world_origin);  }  // 3
get_reference_frame :: (main: *XRServer) -> Transform3D { call_ret := cast(*Transform3D) sys_call("XRServer", "get_reference_frame", 3229777777, Transform3D, main.p_object); return call_ret.*; }  // 4
clear_reference_frame :: (main: *XRServer) { sys_call("XRServer", "clear_reference_frame", 3218959716, Nil, main.p_object);  }  // 5
center_on_hmd :: (main: *XRServer, rotation_mode: XRServer.RotationMode, keep_height: bool) { sys_call("XRServer", "center_on_hmd", 1450904707, Nil, main.p_object, rotation_mode, keep_height);  }  // 6
get_hmd_transform :: (main: *XRServer) -> Transform3D { call_ret := cast(*Transform3D) sys_call("XRServer", "get_hmd_transform", 4183770049, Transform3D, main.p_object); return call_ret.*; }  // 7
set_camera_locked_to_origin :: (main: *XRServer, enabled: bool) { sys_call("XRServer", "set_camera_locked_to_origin", 2586408642, Nil, main.p_object, enabled);  }  // 8
is_camera_locked_to_origin :: (main: *XRServer) -> bool { call_ret := cast(*bool) sys_call("XRServer", "is_camera_locked_to_origin", 36873697, bool, main.p_object); return call_ret.*; }  // 9
add_interface :: (main: *XRServer, _interface: XRInterface) { sys_call("XRServer", "add_interface", 1898711491, Nil, main.p_object, _interface);  }  // 10
get_interface_count :: (main: *XRServer) -> int { call_ret := cast(*int) sys_call("XRServer", "get_interface_count", 3905245786, int, main.p_object); return call_ret.*; }  // 11
remove_interface :: (main: *XRServer, _interface: XRInterface) { sys_call("XRServer", "remove_interface", 1898711491, Nil, main.p_object, _interface);  }  // 12
get_interface :: (main: *XRServer, idx: int) -> *XRInterface { call_ret := cast(*XRInterface) sys_call("XRServer", "get_interface", 4237347919, XRInterface, main.p_object, idx); return call_ret; }  // 13
get_interfaces :: (main: *XRServer) -> [] Dictionary { call_ret := cast(*[] Dictionary) sys_call("XRServer", "get_interfaces", 3995934104, [] Dictionary, main.p_object); return call_ret.*; }  // 14
find_interface :: (main: *XRServer, name: string) -> *XRInterface { call_ret := cast(*XRInterface) sys_call("XRServer", "find_interface", 1395192955, XRInterface, main.p_object, name); return call_ret; }  // 15
add_tracker :: (main: *XRServer, tracker: XRTracker) { sys_call("XRServer", "add_tracker", 684804553, Nil, main.p_object, tracker);  }  // 16
remove_tracker :: (main: *XRServer, tracker: XRTracker) { sys_call("XRServer", "remove_tracker", 684804553, Nil, main.p_object, tracker);  }  // 17
get_trackers :: (main: *XRServer, tracker_types: int) -> Dictionary { call_ret := cast(*Dictionary) sys_call("XRServer", "get_trackers", 3554694381, Dictionary, main.p_object, tracker_types); return call_ret.*; }  // 18
get_tracker :: (main: *XRServer, tracker_name: string) -> *XRTracker { call_ret := cast(*XRTracker) sys_call("XRServer", "get_tracker", 147382240, XRTracker, main.p_object, tracker_name); return call_ret; }  // 19
get_primary_interface :: (main: *XRServer) -> *XRInterface { call_ret := cast(*XRInterface) sys_call("XRServer", "get_primary_interface", 2143545064, XRInterface, main.p_object); return call_ret; }  // 20
set_primary_interface :: (main: *XRServer, _interface: XRInterface) { sys_call("XRServer", "set_primary_interface", 1898711491, Nil, main.p_object, _interface);  }  // 21

get_tracker_type :: (main: *XRTracker) -> XRServer.TrackerType { call_ret := cast(*XRServer.TrackerType) sys_call("XRTracker", "get_tracker_type", 2784508102, XRServer.TrackerType, main.p_object); return call_ret.*; }  // 0
set_tracker_type :: (main: *XRTracker, type: XRServer.TrackerType) { sys_call("XRTracker", "set_tracker_type", 3055763575, Nil, main.p_object, type);  }  // 1
get_tracker_name :: (main: *XRTracker) -> StringName { call_ret := cast(*StringName) sys_call("XRTracker", "get_tracker_name", 2002593661, StringName, main.p_object); return call_ret.*; }  // 2
set_tracker_name :: (main: *XRTracker, name: string) { sys_call("XRTracker", "set_tracker_name", 3304788590, Nil, main.p_object, name);  }  // 3
get_tracker_desc :: (main: *XRTracker) -> gstring { call_ret := cast(*gstring) sys_call("XRTracker", "get_tracker_desc", 201670096, gstring, main.p_object); return call_ret.*; }  // 4
set_tracker_desc :: (main: *XRTracker, description: string) { sys_call("XRTracker", "set_tracker_desc", 83702148, Nil, main.p_object, description);  }  // 5

get_vrs_min_radius :: (main: *XRVRS) -> float { call_ret := cast(*float) sys_call("XRVRS", "get_vrs_min_radius", 1740695150, float, main.p_object); return call_ret.*; }  // 0
set_vrs_min_radius :: (main: *XRVRS, radius: float) { sys_call("XRVRS", "set_vrs_min_radius", 373806689, Nil, main.p_object, radius);  }  // 1
get_vrs_strength :: (main: *XRVRS) -> float { call_ret := cast(*float) sys_call("XRVRS", "get_vrs_strength", 1740695150, float, main.p_object); return call_ret.*; }  // 2
set_vrs_strength :: (main: *XRVRS, strength: float) { sys_call("XRVRS", "set_vrs_strength", 373806689, Nil, main.p_object, strength);  }  // 3
get_vrs_render_region :: (main: *XRVRS) -> Rect2i { call_ret := cast(*Rect2i) sys_call("XRVRS", "get_vrs_render_region", 410525958, Rect2i, main.p_object); return call_ret.*; }  // 4
set_vrs_render_region :: (main: *XRVRS, render_region: Rect2i) { sys_call("XRVRS", "set_vrs_render_region", 1763793166, Nil, main.p_object, render_region);  }  // 5
make_vrs_texture :: (main: *XRVRS, target_size: Vector2, eye_foci: PackedVector2Array) -> RID { call_ret := cast(*RID) sys_call("XRVRS", "make_vrs_texture", 3647044786, RID, main.p_object, target_size, eye_foci); return call_ret.*; }  // 6

open :: (main: *ZIPPacker, path: string) -> Error { call_ret := cast(*Error) sys_call("ZIPPacker", "open", 1936816515, Error, main.p_object, path); return call_ret.*; }  // 0
start_file :: (main: *ZIPPacker, path: string) -> Error { call_ret := cast(*Error) sys_call("ZIPPacker", "start_file", 166001499, Error, main.p_object, path); return call_ret.*; }  // 1
write_file :: (main: *ZIPPacker, data: PackedByteArray) -> Error { call_ret := cast(*Error) sys_call("ZIPPacker", "write_file", 680677267, Error, main.p_object, data); return call_ret.*; }  // 2
close_file :: (main: *ZIPPacker) -> Error { call_ret := cast(*Error) sys_call("ZIPPacker", "close_file", 166280745, Error, main.p_object); return call_ret.*; }  // 3
close :: (main: *ZIPPacker) -> Error { call_ret := cast(*Error) sys_call("ZIPPacker", "close", 166280745, Error, main.p_object); return call_ret.*; }  // 4

open :: (main: *ZIPReader, path: string) -> Error { call_ret := cast(*Error) sys_call("ZIPReader", "open", 166001499, Error, main.p_object, path); return call_ret.*; }  // 0
close :: (main: *ZIPReader) -> Error { call_ret := cast(*Error) sys_call("ZIPReader", "close", 166280745, Error, main.p_object); return call_ret.*; }  // 1
get_files :: (main: *ZIPReader) -> PackedStringArray { call_ret := cast(*PackedStringArray) sys_call("ZIPReader", "get_files", 2981934095, PackedStringArray, main.p_object); return call_ret.*; }  // 2
read_file :: (main: *ZIPReader, path: string) -> PackedByteArray { call_ret := cast(*PackedByteArray) sys_call("ZIPReader", "read_file", 740857591, PackedByteArray, main.p_object, path); return call_ret.*; }  // 3
file_exists :: (main: *ZIPReader, path: string) -> bool { call_ret := cast(*bool) sys_call("ZIPReader", "file_exists", 35364943, bool, main.p_object, path); return call_ret.*; }  // 4







































// ====== SINGLETONS ======

S_Performance: Performance;
S_Engine: Engine;
S_ProjectSettings: ProjectSettings;
S_OS: OS;
S_Time: Time;
S_TextServerManager: TextServerManager;
S_PhysicsServer2DManager: PhysicsServer2DManager;
S_PhysicsServer3DManager: PhysicsServer3DManager;
S_NavigationMeshGenerator: NavigationMeshGenerator;
S_IP: IP;
S_Geometry2D: Geometry2D;
S_Geometry3D: Geometry3D;
S_ResourceLoader: ResourceLoader;
S_ResourceSaver: ResourceSaver;
S_ClassDB: ClassDB;
S_Marshalls: Marshalls;
S_TranslationServer: TranslationServer;
S_Input: Input;
S_InputMap: InputMap;
S_EngineDebugger: EngineDebugger;
S_GDExtensionManager: GDExtensionManager;
S_ResourceUID: ResourceUID;
S_WorkerThreadPool: WorkerThreadPool;
S_ThemeDB: ThemeDB;
S_EditorInterface: EditorInterface;
S_JavaClassWrapper: JavaClassWrapper;
S_JavaScriptBridge: JavaScriptBridge;
S_AudioServer: AudioServer;
S_CameraServer: CameraServer;
S_DisplayServer: DisplayServer;
S_NativeMenu: NativeMenu;
S_NavigationServer2D: NavigationServer2D;
S_NavigationServer3D: NavigationServer3D;
S_RenderingServer: RenderingServer;
S_PhysicsServer2D: PhysicsServer2D;
S_PhysicsServer3D: PhysicsServer3D;
S_XRServer: XRServer;

#run {
    assert(size_of(Nil) == 0);
    assert(size_of(Vector2) == 8);
    assert(size_of(Vector2i) == 8);
    assert(size_of(Rect2) == 16);
    assert(size_of(Rect2i) == 16);
    assert(size_of(Vector3) == 12);
    assert(size_of(Vector3i) == 12);
    assert(size_of(Transform2D) == 24);
    assert(size_of(Vector4) == 16);
    assert(size_of(Vector4i) == 16);
    assert(size_of(Plane) == 16);
    assert(size_of(Quaternion) == 16);
    assert(size_of(AABB) == 24);
    assert(size_of(Basis) == 36);
    assert(size_of(Transform3D) == 48);
    assert(size_of(Projection) == 64);
    assert(size_of(Color) == 16);
    assert(size_of(StringName) == 4);
    assert(size_of(NodePath) == 4);
    assert(size_of(RID) == 8);
    assert(size_of(Object) == 4);
    assert(size_of(Callable) == 16);
    assert(size_of(Signal) == 16);
    assert(size_of(Dictionary) == 4);
    assert(size_of(Array) == 4);
    assert(size_of(PackedByteArray) == 8);
    assert(size_of(PackedInt32Array) == 8);
    assert(size_of(PackedInt64Array) == 8);
    assert(size_of(PackedFloat32Array) == 8);
    assert(size_of(PackedFloat64Array) == 8);
    assert(size_of(PackedStringArray) == 8);
    assert(size_of(PackedVector2Array) == 8);
    assert(size_of(PackedVector3Array) == 8);
    assert(size_of(PackedColorArray) == 8);
    assert(size_of(PackedVector4Array) == 8);
    assert(size_of(Variant) == 24);
}

#scope_file

// #import "Hash_Table";
